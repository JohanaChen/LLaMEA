{"id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.37707859631786955, "feedback": "The algorithm HADE_LS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "9d5c8fcd-21aa-4dbc-82db-bf4b687a9fe3", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "8d1a213d-6159-4538-a33e-c92f8d27af4b", "solution": "import numpy as np\n\nclass HADE_LS_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # initial scaling factor for mutation\n        self.CR = 0.9  # initial crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            population_std = np.std(population, axis=0)\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Adjust F and CR according to population diversity\n                F_dynamic = self.F + 0.1 * np.mean(population_std)\n                CR_dynamic = self.CR - 0.1 * np.mean(population_std)\n                \n                mutant = np.clip(population[a] + F_dynamic * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < CR_dynamic\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS_Enhanced", "description": "Enhanced HADE_LS with adaptive scaling and crossover probabilities based on population diversity for improved convergence speed.", "configspace": "", "generation": 2, "fitness": 0.3042429631404, "feedback": "The algorithm HADE_LS_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7713921949400451, 0.7713921949400451, 0.7713921949400451, 0.7784491660541051, 0.7784491660541051, 0.7784491660541051, 0.7515157937172326, 0.7515157937172326, 0.7515157937172326, 0.5091831180928328, 0.5091831180928328, 0.5091831180928328, 0.5345894859808159, 0.5345894859808159, 0.5345894859808159, 0.5396452894860668, 0.5396452894860668, 0.5396452894860668, 0.1319960000076149, 0.1319960000076149, 0.1319960000076149, 0.12115740126698238, 0.12115740126698238, 0.12115740126698238, 0.12634204045716524, 0.12634204045716524, 0.12634204045716524, 0.10214977955881732, 0.10214977955881732, 0.10214977955881732, 0.10783151204566, 0.10783151204566, 0.10783151204566, 0.10649367154956779, 0.10649367154956779, 0.10649367154956779, 0.934303551939943, 0.934303551939943, 0.934303551939943, 0.976145791799144, 0.976145791799144, 0.976145791799144, 0.9540271039740162, 0.9540271039740162, 0.9540271039740162, 0.37251472544486475, 0.37251472544486475, 0.37251472544486475, 0.3913410666812248, 0.3913410666812248, 0.3913410666812248, 0.4041319774259954, 0.4041319774259954, 0.4041319774259954, 0.548749999207715, 0.548749999207715, 0.548749999207715, 0.6418083464524382, 0.6418083464524382, 0.6418083464524382, 0.6553127955996516, 0.6553127955996516, 0.6553127955996516, 0.29263071361127535, 0.29263071361127535, 0.29263071361127535, 0.2506185148348524, 0.2506185148348524, 0.2506185148348524, 0.24056114109269522, 0.24056114109269522, 0.24056114109269522, 0.15568488521107393, 0.15568488521107393, 0.15568488521107393, 0.24212578412066343, 0.24212578412066343, 0.24212578412066343, 0.16740568105300102, 0.16740568105300102, 0.16740568105300102, 0.012096610130397867, 0.012096610130397867, 0.012096610130397867, 0.001310500460252606, 0.001310500460252606, 0.001310500460252606, 0.006202230302164047, 0.006202230302164047, 0.006202230302164047, 0.09695754001735879, 0.09695754001735879, 0.09695754001735879, 0.07877732104067348, 0.07877732104067348, 0.07877732104067348, 0.06549042682568285, 0.06549042682568285, 0.06549042682568285, 0.05905352927807728, 0.05905352927807728, 0.05905352927807728, 0.13794030816471425, 0.13794030816471425, 0.13794030816471425, 0.11771788080421897, 0.11771788080421897, 0.11771788080421897, 0.25918568806727627, 0.25918568806727627, 0.25918568806727627, 0.2634996697867924, 0.2634996697867924, 0.2634996697867924, 0.21959770501362308, 0.21959770501362308, 0.21959770501362308, 0.6561237183651252, 0.6561237183651252, 0.6561237183651252, 0.6409783826861277, 0.6409783826861277, 0.6409783826861277, 0.6430780925589622, 0.6430780925589622, 0.6430780925589622, 0.13211405365042317, 0.13211405365042317, 0.13211405365042317, 0.12116725751810431, 0.12116725751810431, 0.12116725751810431, 0.13588229212189906, 0.13588229212189906, 0.13588229212189906, 0.1909993716986076, 0.1909993716986076, 0.1909993716986076, 0.16192902806179066, 0.16192902806179066, 0.16192902806179066, 0.23397135067323294, 0.23397135067323294, 0.23397135067323294, 0.3399004755980213, 0.3399004755980213, 0.3399004755980213, 0.326705184511741, 0.326705184511741, 0.326705184511741, 0.3684917864199082, 0.3684917864199082, 0.3684917864199082, 0.22948296473185292, 0.22948296473185292, 0.22948296473185292, 0.21604592277471246, 0.21604592277471246, 0.21604592277471246, 0.2537483321914181, 0.2537483321914181, 0.2537483321914181, 0.2228395371259495, 0.2228395371259495, 0.2228395371259495, 0.20253941294937727, 0.20253941294937727, 0.20253941294937727, 0.1980694252278642, 0.1980694252278642, 0.1980694252278642, 0.1933709423798381, 0.1933709423798381, 0.1933709423798381, 0.2025319089370421, 0.2025319089370421, 0.2025319089370421, 0.2774145022328903, 0.2774145022328903, 0.2774145022328903, 0.5795928624628768, 0.5795928624628768, 0.5795928624628768, 0.19521167614048718, 0.19521167614048718, 0.19521167614048718, 0.3034346063777329, 0.3034346063777329, 0.3034346063777329, 0.16564898510562742, 0.16564898510562742, 0.16564898510562742, 0.2702043688252177, 0.2702043688252177, 0.2702043688252177, 0.49866929514718605, 0.49866929514718605, 0.49866929514718605, 0.18344367466890754, 0.18344367466890754, 0.18344367466890754, 0.21324085564471995, 0.21324085564471995, 0.21324085564471995, 0.19113160981537558, 0.19113160981537558, 0.19113160981537558, 0.0827649813485587, 0.0827649813485587, 0.0827649813485587, 0.07664845832620082, 0.07664845832620082, 0.07664845832620082, 0.07218108833432668, 0.07218108833432668, 0.07218108833432668]}, "mutation_prompt": null}
{"id": "421e20b6-7df6-4b9a-b78f-a7cb98fe261d", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "792b4c37-0569-4d4e-b933-182ab195fbda", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "f31bdeee-13b2-4f89-aeb1-c0c276263f94", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "e964533b-633d-45c0-86d6-4e08a21b16e3", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "b8dbb2b4-35d1-4f7a-8ca6-b6ba4767c8f1", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "70ed5e9b-7a70-40da-8b1f-0b8d655ed5fc", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "0a24ef51-910d-44a6-bfe8-c06aac5debf8", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "d36daf4f-5972-4cb9-a954-96410f12c8af", "solution": "import numpy as np\n\nclass eHADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # Adjusted scaling factor for mutation\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_memory = np.zeros(dim)  # Memory for adaptive step size\n        \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # Limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                self.step_memory = neighbors - current  # Update memory\n                current = neighbors\n            else:\n                step_size *= 0.9  # Reduce step size for better local exploration\n            if evaluations >= self.budget:\n                break\n        return current", "name": "eHADE_LS", "description": "Enhanced Hybrid Adaptive Differential Evolution with Local Search (eHADE-LS) improves convergence by fine-tuning mutation scaling and introducing adaptive memory-based step size in local search.", "configspace": "", "generation": 10, "fitness": 0.3362539818795344, "feedback": "The algorithm eHADE_LS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7247081822132577, 0.7247081822132577, 0.7247081822132577, 0.75075367530363, 0.75075367530363, 0.75075367530363, 0.7687276095956993, 0.7687276095956993, 0.7687276095956993, 0.5476203716613328, 0.5476203716613328, 0.5476203716613328, 0.510024238628944, 0.510024238628944, 0.510024238628944, 0.5365869963209721, 0.5365869963209721, 0.5365869963209721, 0.13637136963275265, 0.13637136963275265, 0.13637136963275265, 0.1380354763356859, 0.1380354763356859, 0.1380354763356859, 0.15664331569942136, 0.15664331569942136, 0.15664331569942136, 0.12154941079379156, 0.12154941079379156, 0.12154941079379156, 0.128357054799634, 0.128357054799634, 0.128357054799634, 0.12036845626687354, 0.12036845626687354, 0.12036845626687354, 0.9131882675770054, 0.9131882675770054, 0.9131882675770054, 0.9166845815418563, 0.9166845815418563, 0.9166845815418563, 0.8963277023049868, 0.8963277023049868, 0.8963277023049868, 0.3976973523853704, 0.3976973523853704, 0.3976973523853704, 0.3818499804659369, 0.3818499804659369, 0.3818499804659369, 0.41325111837262174, 0.41325111837262174, 0.41325111837262174, 0.6880157483182092, 0.6880157483182092, 0.6880157483182092, 0.7289637866789016, 0.7289637866789016, 0.7289637866789016, 0.7169317287977517, 0.7169317287977517, 0.7169317287977517, 0.27166464431606163, 0.27166464431606163, 0.27166464431606163, 0.235434845280183, 0.235434845280183, 0.235434845280183, 0.19832508832476903, 0.19832508832476903, 0.19832508832476903, 0.15629694796543503, 0.15629694796543503, 0.15629694796543503, 0.2123437815767507, 0.2123437815767507, 0.2123437815767507, 0.246405967386775, 0.246405967386775, 0.246405967386775, 0.22808790191705952, 0.22808790191705952, 0.22808790191705952, 0.2171962874805774, 0.2171962874805774, 0.2171962874805774, 0.2697732235000697, 0.2697732235000697, 0.2697732235000697, 0.3567806740743096, 0.3567806740743096, 0.3567806740743096, 0.34543234390525435, 0.34543234390525435, 0.34543234390525435, 0.3812783442291118, 0.3812783442291118, 0.3812783442291118, 0.09931502738666698, 0.09931502738666698, 0.09931502738666698, 0.09794380328619223, 0.09794380328619223, 0.09794380328619223, 0.125744434600072, 0.125744434600072, 0.125744434600072, 0.23156705317860826, 0.23156705317860826, 0.23156705317860826, 0.25527034281568817, 0.25527034281568817, 0.25527034281568817, 0.2451740137797075, 0.2451740137797075, 0.2451740137797075, 0.5904064166362791, 0.5904064166362791, 0.5904064166362791, 0.5794184899456019, 0.5794184899456019, 0.5794184899456019, 0.5792397134071892, 0.5792397134071892, 0.5792397134071892, 0.1340174304120012, 0.1340174304120012, 0.1340174304120012, 0.11120008261969594, 0.11120008261969594, 0.11120008261969594, 0.13162465869271578, 0.13162465869271578, 0.13162465869271578, 0.266783030776368, 0.266783030776368, 0.266783030776368, 0.20447063252729514, 0.20447063252729514, 0.20447063252729514, 0.20427858401664334, 0.20427858401664334, 0.20427858401664334, 0.36107950836871383, 0.36107950836871383, 0.36107950836871383, 0.3444233888584548, 0.3444233888584548, 0.3444233888584548, 0.36311443862453263, 0.36311443862453263, 0.36311443862453263, 0.2636256354269658, 0.2636256354269658, 0.2636256354269658, 0.26524973222230575, 0.26524973222230575, 0.26524973222230575, 0.24562269432952277, 0.24562269432952277, 0.24562269432952277, 0.19132445832072453, 0.19132445832072453, 0.19132445832072453, 0.2088865911643205, 0.2088865911643205, 0.2088865911643205, 0.18801952318668103, 0.18801952318668103, 0.18801952318668103, 0.26952388733954813, 0.26952388733954813, 0.26952388733954813, 0.19822691944783688, 0.19822691944783688, 0.19822691944783688, 0.1894573852765783, 0.1894573852765783, 0.1894573852765783, 0.7024579360934452, 0.7024579360934452, 0.7024579360934452, 0.18506899470775018, 0.18506899470775018, 0.18506899470775018, 0.7079772251516929, 0.7079772251516929, 0.7079772251516929, 0.2055795111909553, 0.2055795111909553, 0.2055795111909553, 0.33753153664224145, 0.33753153664224145, 0.33753153664224145, 0.49732738573805035, 0.49732738573805035, 0.49732738573805035, 0.2020988640910364, 0.2020988640910364, 0.2020988640910364, 0.18801003354586687, 0.18801003354586687, 0.18801003354586687, 0.18175764378179193, 0.18175764378179193, 0.18175764378179193, 0.08155791430845005, 0.08155791430845005, 0.08155791430845005, 0.07782320289054079, 0.07782320289054079, 0.07782320289054079, 0.08641209688675411, 0.08641209688675411, 0.08641209688675411]}, "mutation_prompt": null}
{"id": "f3328097-4dd0-4a25-8c3c-4f691634661f", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "d9898afb-565a-4a0e-84c0-653e0a94cdea", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "98846123-0f35-4254-b041-3a49638009e8", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "eb9bc939-7cd2-42a3-956a-4a1d031c9036", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "4e46e6e0-69c0-4e05-990b-b0fd36fc4de4", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "aaa2f612-5067-4a5a-8c06-2ec25666574d", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "e8329965-84d4-434f-8f80-4a3bf0072388", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "9fcee33e-e6e6-40ec-bea2-2bcedba10764", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "00ce2d61-9777-4bad-9a80-f3637e230c43", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "7a6e9b78-cbdc-4bc2-b5a0-8d9910bbe98a", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "d2a78411-d55c-46ca-82ab-eed082c90d61", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "1ad30916-04cf-42bb-b211-cfcb2a034479", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "87559e23-97bd-4342-88ee-2d31a32803cd", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "2a24053c-33bc-4691-9226-6294d35c5224", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "5864a2ed-250c-41e9-bbcb-455da59ad447", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "06d4c600-1ae3-423e-be2e-62356b085f1d", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "fc141f09-71ff-406e-8f69-c74db16a028b", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "7fd270fc-a5f3-4a5b-8b63-205034ed75e3", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "c0d03692-e2d8-4109-87b1-ba2491ba02b9", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "f93e1eac-d0ed-4b9e-84ef-2e39eb503226", "solution": "import numpy as np\n\nclass HADE_LS_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # Adjusted scaling factor for mutation\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS_Enhanced", "description": "Enhanced Hybrid Adaptive Differential Evolution with Local Search, optimized by adjusting crossover probability and mutation scaling for improved convergence speed.", "configspace": "", "generation": 30, "fitness": 0.3175643818225193, "feedback": "The algorithm HADE_LS_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7274444807293448, 0.7274444807293448, 0.7274444807293448, 0.7448578754219684, 0.7448578754219684, 0.7448578754219684, 0.7669625993769978, 0.7669625993769978, 0.7669625993769978, 0.5482781569782242, 0.5482781569782242, 0.5482781569782242, 0.5242745112462518, 0.5242745112462518, 0.5242745112462518, 0.5217318708868246, 0.5217318708868246, 0.5217318708868246, 0.14971840864576103, 0.14971840864576103, 0.14971840864576103, 0.14143531598596093, 0.14143531598596093, 0.14143531598596093, 0.13769963903346893, 0.13769963903346893, 0.13769963903346893, 0.1002488843153817, 0.1002488843153817, 0.1002488843153817, 0.11285128107535525, 0.11285128107535525, 0.11285128107535525, 0.10096384612840759, 0.10096384612840759, 0.10096384612840759, 0.9325093839320311, 0.9325093839320311, 0.9325093839320311, 0.9545931910883235, 0.9545931910883235, 0.9545931910883235, 0.889993693893021, 0.889993693893021, 0.889993693893021, 0.38171829087162856, 0.38171829087162856, 0.38171829087162856, 0.3802374105798496, 0.3802374105798496, 0.3802374105798496, 0.40271610818546477, 0.40271610818546477, 0.40271610818546477, 0.5825207898799698, 0.5825207898799698, 0.5825207898799698, 0.6301921671108484, 0.6301921671108484, 0.6301921671108484, 0.6033504776605532, 0.6033504776605532, 0.6033504776605532, 0.2188651655929199, 0.2188651655929199, 0.2188651655929199, 0.24694385836354327, 0.24694385836354327, 0.24694385836354327, 0.18928521623399241, 0.18928521623399241, 0.18928521623399241, 0.22246780352265116, 0.22246780352265116, 0.22246780352265116, 0.22904414166570164, 0.22904414166570164, 0.22904414166570164, 0.20997534257363093, 0.20997534257363093, 0.20997534257363093, 0.13224718766481947, 0.13224718766481947, 0.13224718766481947, 0.15702426992820928, 0.15702426992820928, 0.15702426992820928, 0.15203941990144032, 0.15203941990144032, 0.15203941990144032, 0.237982628736363, 0.237982628736363, 0.237982628736363, 0.2947775329597834, 0.2947775329597834, 0.2947775329597834, 0.3154712245524375, 0.3154712245524375, 0.3154712245524375, 0.057593430688522185, 0.057593430688522185, 0.057593430688522185, 0.07097982336378139, 0.07097982336378139, 0.07097982336378139, 0.0687896978372946, 0.0687896978372946, 0.0687896978372946, 0.17922446492171618, 0.17922446492171618, 0.17922446492171618, 0.200735801319341, 0.200735801319341, 0.200735801319341, 0.18552497722420025, 0.18552497722420025, 0.18552497722420025, 0.5678439532008387, 0.5678439532008387, 0.5678439532008387, 0.5643253542447324, 0.5643253542447324, 0.5643253542447324, 0.5409449757817532, 0.5409449757817532, 0.5409449757817532, 0.11691540684147772, 0.11691540684147772, 0.11691540684147772, 0.10483714802061261, 0.10483714802061261, 0.10483714802061261, 0.12641535693836015, 0.12641535693836015, 0.12641535693836015, 0.254538078293147, 0.254538078293147, 0.254538078293147, 0.25876244606964716, 0.25876244606964716, 0.25876244606964716, 0.19471410737889405, 0.19471410737889405, 0.19471410737889405, 0.31529410443321126, 0.31529410443321126, 0.31529410443321126, 0.3362805338819237, 0.3362805338819237, 0.3362805338819237, 0.34924894704247345, 0.34924894704247345, 0.34924894704247345, 0.24753326335052406, 0.24753326335052406, 0.24753326335052406, 0.24096399180833117, 0.24096399180833117, 0.24096399180833117, 0.26366434903303126, 0.26366434903303126, 0.26366434903303126, 0.19032925615093332, 0.19032925615093332, 0.19032925615093332, 0.18813500735273936, 0.18813500735273936, 0.18813500735273936, 0.21113858424508158, 0.21113858424508158, 0.21113858424508158, 0.2348204112849933, 0.2348204112849933, 0.2348204112849933, 0.19605453662287642, 0.19605453662287642, 0.19605453662287642, 0.2021291946160525, 0.2021291946160525, 0.2021291946160525, 0.739354857623283, 0.739354857623283, 0.739354857623283, 0.19234559823436848, 0.19234559823436848, 0.19234559823436848, 0.5564242564828576, 0.5564242564828576, 0.5564242564828576, 0.16527353448794113, 0.16527353448794113, 0.16527353448794113, 0.4278718198506509, 0.4278718198506509, 0.4278718198506509, 0.5799673385992878, 0.5799673385992878, 0.5799673385992878, 0.1964331868897773, 0.1964331868897773, 0.1964331868897773, 0.18290515189879897, 0.18290515189879897, 0.18290515189879897, 0.17588496861096825, 0.17588496861096825, 0.17588496861096825, 0.08236528780463648, 0.08236528780463648, 0.08236528780463648, 0.07109466604288062, 0.07109466604288062, 0.07109466604288062, 0.08655544802831594, 0.08655544802831594, 0.08655544802831594]}, "mutation_prompt": null}
{"id": "b6c42a29-4559-4950-a41b-d0eca0a6aa67", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "7ad6c272-31e6-4c70-bded-4066e9a3ada9", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "387b7b16-7db8-4603-8ed5-0173e82b827e", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "0864b1e4-e924-4178-9782-69ba1dd3e162", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "2746a6bd-0e1f-45e6-a415-58507589b3f7", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "568fc0fa-82ef-4c56-8e33-a45bcc30baab", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "df734039-842c-4408-ac22-46cd92be9de9", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "37fc9453-0a8a-4265-a272-716f1a3beb2b", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "3ff1fb38-c59f-4bf0-9ad5-0d6f5b93ae1a", "solution": "import numpy as np\n\nclass HADE_LS_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # slight increase in the scaling factor for mutation\n        self.CR = 0.8  # slight reduction in initial crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_prob = np.random.rand(self.dim) < (self.CR + 0.1 * (fitness[best_idx] - fitness[i]) / max(1, abs(fitness[i])))\n                trial = np.where(crossover_prob, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS_Enhanced", "description": "Enhanced HADE-LS with tweaked mutation strategy and dynamic crossover probability for improved convergence speed.", "configspace": "", "generation": 39, "fitness": 0.2658670624793081, "feedback": "The algorithm HADE_LS_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7620997293146097, 0.7620997293146097, 0.7620997293146097, 0.7399938234178075, 0.7399938234178075, 0.7399938234178075, 0.7270451181588602, 0.7270451181588602, 0.7270451181588602, 0.24807813538354717, 0.24807813538354717, 0.24807813538354717, 0.18710944364644233, 0.18710944364644233, 0.18710944364644233, 0.27768997827174613, 0.27768997827174613, 0.27768997827174613, 0.11673516546167517, 0.11673516546167517, 0.11673516546167517, 0.13908954190279632, 0.13908954190279632, 0.13908954190279632, 0.16461536533495114, 0.16461536533495114, 0.16461536533495114, 0.08421025324539566, 0.08421025324539566, 0.08421025324539566, 0.12064160110637079, 0.12064160110637079, 0.12064160110637079, 0.12018143013186289, 0.12018143013186289, 0.12018143013186289, 0.928121617597133, 0.928121617597133, 0.928121617597133, 0.9592270221580266, 0.9592270221580266, 0.9592270221580266, 0.8957844020493514, 0.8957844020493514, 0.8957844020493514, 0.3544390614279097, 0.3544390614279097, 0.3544390614279097, 0.33943864715990424, 0.33943864715990424, 0.33943864715990424, 0.34052778238450554, 0.34052778238450554, 0.34052778238450554, 0.594158234371962, 0.594158234371962, 0.594158234371962, 0.5547398319835941, 0.5547398319835941, 0.5547398319835941, 0.6514788197974226, 0.6514788197974226, 0.6514788197974226, 0.19804706253511561, 0.19804706253511561, 0.19804706253511561, 0.1320041694389582, 0.1320041694389582, 0.1320041694389582, 0.21503553813128617, 0.21503553813128617, 0.21503553813128617, 0.16962635072822885, 0.16962635072822885, 0.16962635072822885, 0.18860938022761442, 0.18860938022761442, 0.18860938022761442, 0.1904047388457597, 0.1904047388457597, 0.1904047388457597, 0.032026823630227796, 0.032026823630227796, 0.032026823630227796, 0.038761645806347556, 0.038761645806347556, 0.038761645806347556, 0.039636980033482705, 0.039636980033482705, 0.039636980033482705, 0.15805263162159955, 0.15805263162159955, 0.15805263162159955, 0.1034973811132508, 0.1034973811132508, 0.1034973811132508, 0.17330826879478722, 0.17330826879478722, 0.17330826879478722, 0.0018079067374834334, 0.0018079067374834334, 0.0018079067374834334, 0.009990849204595587, 0.009990849204595587, 0.009990849204595587, 0.039622192881439644, 0.039622192881439644, 0.039622192881439644, 0.16309997212257388, 0.16309997212257388, 0.16309997212257388, 0.10739106763417072, 0.10739106763417072, 0.10739106763417072, 0.09981238782700752, 0.09981238782700752, 0.09981238782700752, 0.44322393967426477, 0.44322393967426477, 0.44322393967426477, 0.4850149230375984, 0.4850149230375984, 0.4850149230375984, 0.5239609827444345, 0.5239609827444345, 0.5239609827444345, 0.11245368939897471, 0.11245368939897471, 0.11245368939897471, 0.13403995014963077, 0.13403995014963077, 0.13403995014963077, 0.14370742117190638, 0.14370742117190638, 0.14370742117190638, 0.18589499887399152, 0.18589499887399152, 0.18589499887399152, 0.17370250454866631, 0.17370250454866631, 0.17370250454866631, 0.2799525238202194, 0.2799525238202194, 0.2799525238202194, 0.21564338935777272, 0.21564338935777272, 0.21564338935777272, 0.27459971537697037, 0.27459971537697037, 0.27459971537697037, 0.3356572305996868, 0.3356572305996868, 0.3356572305996868, 0.21271635664773614, 0.21271635664773614, 0.21271635664773614, 0.22327042099421002, 0.22327042099421002, 0.22327042099421002, 0.24479806084738487, 0.24479806084738487, 0.24479806084738487, 0.19327868235257328, 0.19327868235257328, 0.19327868235257328, 0.19368476969048465, 0.19368476969048465, 0.19368476969048465, 0.1948944153922907, 0.1948944153922907, 0.1948944153922907, 0.20416743145491922, 0.20416743145491922, 0.20416743145491922, 0.23549829630500463, 0.23549829630500463, 0.23549829630500463, 0.1957353166563004, 0.1957353166563004, 0.1957353166563004, 0.4683907818179722, 0.4683907818179722, 0.4683907818179722, 0.1854428880202238, 0.1854428880202238, 0.1854428880202238, 0.5192633131955702, 0.5192633131955702, 0.5192633131955702, 0.20243121987491397, 0.20243121987491397, 0.20243121987491397, 0.21634498669969882, 0.21634498669969882, 0.21634498669969882, 0.2057678603045049, 0.2057678603045049, 0.2057678603045049, 0.18893523112500854, 0.18893523112500854, 0.18893523112500854, 0.17516379490953893, 0.17516379490953893, 0.17516379490953893, 0.1796897700136697, 0.1796897700136697, 0.1796897700136697, 0.0752202004824507, 0.0752202004824507, 0.0752202004824507, 0.07972723587283204, 0.07972723587283204, 0.07972723587283204, 0.07401584547897377, 0.07401584547897377, 0.07401584547897377]}, "mutation_prompt": null}
{"id": "bec61dde-bff9-4fdc-ae34-0b08edbc9c8a", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "aa40170c-615a-4b43-9201-c2c67700f203", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "3794d8e1-d2c8-4c37-9559-bdfd56671d04", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "1e16c79d-da60-44ee-ba81-df864e614e47", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # initial scaling factor for mutation\n        self.CR = 0.9  # initial crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            diversity = np.std(population, axis=0).mean()\n            self.F = 0.4 + (0.6 * (1 - diversity / (self.upper_bound - self.lower_bound)))\n            self.CR = 0.8 + (0.2 * (diversity / (self.upper_bound - self.lower_bound)))\n\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n\n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n                if evaluations >= self.budget:\n                    break\n\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n\n        return best\n\n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Enhanced HADE-LS with Adaptive Parameter Tuning for Improved Convergence Speed by dynamically adjusting control parameters based on population diversity.", "configspace": "", "generation": 43, "fitness": 0.22674425958836542, "feedback": "The algorithm HADE_LS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.4896531679811954, 0.4896531679811954, 0.4896531679811954, 0.4951087014194734, 0.4951087014194734, 0.4951087014194734, 0.5070212383767316, 0.5070212383767316, 0.5070212383767316, 0.21320412176611903, 0.21320412176611903, 0.21320412176611903, 0.21988230868125225, 0.21988230868125225, 0.21988230868125225, 0.23891634273563178, 0.23891634273563178, 0.23891634273563178, 0.13967503555295768, 0.13967503555295768, 0.13967503555295768, 0.12480221917546641, 0.12480221917546641, 0.12480221917546641, 0.12426814188757052, 0.12426814188757052, 0.12426814188757052, 0.09972575845185983, 0.09972575845185983, 0.09972575845185983, 0.09734174931476214, 0.09734174931476214, 0.09734174931476214, 0.09184081648114828, 0.09184081648114828, 0.09184081648114828, 0.9429714435877694, 0.9429714435877694, 0.9429714435877694, 0.9389359741558425, 0.9389359741558425, 0.9389359741558425, 0.9293903187573542, 0.9293903187573542, 0.9293903187573542, 0.25962764509394043, 0.25962764509394043, 0.25962764509394043, 0.2425291655243662, 0.2425291655243662, 0.2425291655243662, 0.25008890584602983, 0.25008890584602983, 0.25008890584602983, 0.2530890046709039, 0.2530890046709039, 0.2530890046709039, 0.3344207235060719, 0.3344207235060719, 0.3344207235060719, 0.294710962030725, 0.294710962030725, 0.294710962030725, 0.15462820421712076, 0.15462820421712076, 0.15462820421712076, 0.15831025089496886, 0.15831025089496886, 0.15831025089496886, 0.1443258022422178, 0.1443258022422178, 0.1443258022422178, 0.09638417986722192, 0.09638417986722192, 0.09638417986722192, 0.14759216339890613, 0.14759216339890613, 0.14759216339890613, 0.14149680971443546, 0.14149680971443546, 0.14149680971443546, 0.026985819738298833, 0.026985819738298833, 0.026985819738298833, 0.03284860408211476, 0.03284860408211476, 0.03284860408211476, 0.025061416433649897, 0.025061416433649897, 0.025061416433649897, 0.14798316868400785, 0.14798316868400785, 0.14798316868400785, 0.12129543585533697, 0.12129543585533697, 0.12129543585533697, 0.18058138068480944, 0.18058138068480944, 0.18058138068480944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00022770158735363477, 0.00022770158735363477, 0.00022770158735363477, 0.11007694503682564, 0.11007694503682564, 0.11007694503682564, 0.11695907634964642, 0.11695907634964642, 0.11695907634964642, 0.09998384025186169, 0.09998384025186169, 0.09998384025186169, 0.4130410547578416, 0.4130410547578416, 0.4130410547578416, 0.4100468418428834, 0.4100468418428834, 0.4100468418428834, 0.3862670791116982, 0.3862670791116982, 0.3862670791116982, 0.11257380043081922, 0.11257380043081922, 0.11257380043081922, 0.08639751469112089, 0.08639751469112089, 0.08639751469112089, 0.09474647573822581, 0.09474647573822581, 0.09474647573822581, 0.2410711255923167, 0.2410711255923167, 0.2410711255923167, 0.1859663240280709, 0.1859663240280709, 0.1859663240280709, 0.1797678990967414, 0.1797678990967414, 0.1797678990967414, 0.2558274371680225, 0.2558274371680225, 0.2558274371680225, 0.25997150605388164, 0.25997150605388164, 0.25997150605388164, 0.2835020614971021, 0.2835020614971021, 0.2835020614971021, 0.18768958635870336, 0.18768958635870336, 0.18768958635870336, 0.1936349420927368, 0.1936349420927368, 0.1936349420927368, 0.20814460167288062, 0.20814460167288062, 0.20814460167288062, 0.16994144131115285, 0.16994144131115285, 0.16994144131115285, 0.1704648100070668, 0.1704648100070668, 0.1704648100070668, 0.20101186543726124, 0.20101186543726124, 0.20101186543726124, 0.2077079311029867, 0.2077079311029867, 0.2077079311029867, 0.18784674143190883, 0.18784674143190883, 0.18784674143190883, 0.1948297204221977, 0.1948297204221977, 0.1948297204221977, 0.5271785301569557, 0.5271785301569557, 0.5271785301569557, 0.1773572406644871, 0.1773572406644871, 0.1773572406644871, 0.37234394182577557, 0.37234394182577557, 0.37234394182577557, 0.20223446156837588, 0.20223446156837588, 0.20223446156837588, 0.428854375136944, 0.428854375136944, 0.428854375136944, 0.2074626125101715, 0.2074626125101715, 0.2074626125101715, 0.19477073863234162, 0.19477073863234162, 0.19477073863234162, 0.1716087509799087, 0.1716087509799087, 0.1716087509799087, 0.20667085909434868, 0.20667085909434868, 0.20667085909434868, 0.07573805066016681, 0.07573805066016681, 0.07573805066016681, 0.0697829165138446, 0.0697829165138446, 0.0697829165138446, 0.06898890873742236, 0.06898890873742236, 0.06898890873742236]}, "mutation_prompt": null}
{"id": "1181f3f8-279c-4373-879f-a2ec7ca06222", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # slightly increased scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = np.random.choice([idx for idx in range(self.population_size) if idx != i], 3, replace=False)\n                a, b, c = indices[0], indices[1], indices[2]\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # More frequent and intensive local search\n            if evaluations < self.budget and evaluations % (self.population_size) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.05  # reduced step size for finer granularity\n        for _ in range(15):  # increased local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "HADE_LS 2.0% Boosted refines mutation strategies and enhances local search intensity for accelerated convergence.", "configspace": "", "generation": 44, "fitness": 0.2968557262449398, "feedback": "The algorithm HADE_LS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.21.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.6850644126518203, 0.6850644126518203, 0.6850644126518203, 0.6758770445945557, 0.6758770445945557, 0.6758770445945557, 0.6834298743054719, 0.6834298743054719, 0.6834298743054719, 0.3582619044862566, 0.3582619044862566, 0.3582619044862566, 0.3813881050988581, 0.3813881050988581, 0.3813881050988581, 0.39592257810093323, 0.39592257810093323, 0.39592257810093323, 0.12957652511757645, 0.12957652511757645, 0.12957652511757645, 0.15242282211473301, 0.15242282211473301, 0.15242282211473301, 0.15201852820885375, 0.15201852820885375, 0.15201852820885375, 0.10435593046324643, 0.10435593046324643, 0.10435593046324643, 0.1257231683354858, 0.1257231683354858, 0.1257231683354858, 0.09456797114827664, 0.09456797114827664, 0.09456797114827664, 0.8905041446488894, 0.8905041446488894, 0.8905041446488894, 0.935780843596428, 0.935780843596428, 0.935780843596428, 0.8079492292919859, 0.8079492292919859, 0.8079492292919859, 0.3042375700415202, 0.3042375700415202, 0.3042375700415202, 0.30526069240615894, 0.30526069240615894, 0.30526069240615894, 0.2995805007794644, 0.2995805007794644, 0.2995805007794644, 0.5776799498795426, 0.5776799498795426, 0.5776799498795426, 0.6930110818281627, 0.6930110818281627, 0.6930110818281627, 0.5292721897559802, 0.5292721897559802, 0.5292721897559802, 0.19912361270414747, 0.19912361270414747, 0.19912361270414747, 0.1777813397712079, 0.1777813397712079, 0.1777813397712079, 0.18820197564831564, 0.18820197564831564, 0.18820197564831564, 0.16231615188104465, 0.16231615188104465, 0.16231615188104465, 0.21702996675672648, 0.21702996675672648, 0.21702996675672648, 0.17474047457705089, 0.17474047457705089, 0.17474047457705089, 0.16942301268965398, 0.16942301268965398, 0.16942301268965398, 0.18292829939220934, 0.18292829939220934, 0.18292829939220934, 0.16609716823475607, 0.16609716823475607, 0.16609716823475607, 0.29763393078901723, 0.29763393078901723, 0.29763393078901723, 0.26177938601250184, 0.26177938601250184, 0.26177938601250184, 0.29464405778775016, 0.29464405778775016, 0.29464405778775016, 0.05126234170879085, 0.05126234170879085, 0.05126234170879085, 0.04557887120788651, 0.04557887120788651, 0.04557887120788651, 0.05693764972005044, 0.05693764972005044, 0.05693764972005044, 0.1769350157251729, 0.1769350157251729, 0.1769350157251729, 0.19686161261267132, 0.19686161261267132, 0.19686161261267132, 0.1807890585003119, 0.1807890585003119, 0.1807890585003119, 0.5025852092191475, 0.5025852092191475, 0.5025852092191475, 0.493246303798339, 0.493246303798339, 0.493246303798339, 0.5351988061034141, 0.5351988061034141, 0.5351988061034141, 0.146907211305626, 0.146907211305626, 0.146907211305626, 0.11967825181821268, 0.11967825181821268, 0.11967825181821268, 0.12195144514413192, 0.12195144514413192, 0.12195144514413192, 0.21194456657067962, 0.21194456657067962, 0.21194456657067962, 0.19369844109730694, 0.19369844109730694, 0.19369844109730694, 0.1481038774424953, 0.1481038774424953, 0.1481038774424953, 0.2925744352768518, 0.2925744352768518, 0.2925744352768518, 0.3199829909203653, 0.3199829909203653, 0.3199829909203653, 0.3230603259413879, 0.3230603259413879, 0.3230603259413879, 0.24068405736873233, 0.24068405736873233, 0.24068405736873233, 0.2332488177755495, 0.2332488177755495, 0.2332488177755495, 0.23371029921574205, 0.23371029921574205, 0.23371029921574205, 0.1979690487399265, 0.1979690487399265, 0.1979690487399265, 0.19730099397448653, 0.19730099397448653, 0.19730099397448653, 0.24320378014458333, 0.24320378014458333, 0.24320378014458333, 0.2565865529589252, 0.2565865529589252, 0.2565865529589252, 0.24050154430571125, 0.24050154430571125, 0.24050154430571125, 0.21252045885425108, 0.21252045885425108, 0.21252045885425108, 0.7754279884066375, 0.7754279884066375, 0.7754279884066375, 0.17595747349020663, 0.17595747349020663, 0.17595747349020663, 0.6109700244049612, 0.6109700244049612, 0.6109700244049612, 0.6426850805671904, 0.6426850805671904, 0.6426850805671904, 0.20270333325249734, 0.20270333325249734, 0.20270333325249734, 0.2071625782535612, 0.2071625782535612, 0.2071625782535612, 0.19417626014562606, 0.19417626014562606, 0.19417626014562606, 0.18875812915525914, 0.18875812915525914, 0.18875812915525914, 0.18566632976785058, 0.18566632976785058, 0.18566632976785058, 0.07881375597159967, 0.07881375597159967, 0.07881375597159967, 0.07638419189592494, 0.07638419189592494, 0.07638419189592494, 0.0883007337750179, 0.0883007337750179, 0.0883007337750179]}, "mutation_prompt": null}
{"id": "a53401d9-b961-42fd-a3c1-f4c807d2f4cb", "solution": "import numpy as np\n\nclass HADE_LS_Adaptive:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size_initial = 0.1\n        self.step_size_min = 0.01\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search with adaptive step size\n            if evaluations < self.budget:\n                improvement = fitness[best_idx] < np.min(fitness)\n                step_size = max(self.step_size_min, self.step_size_initial * (0.5 if improvement else 1.1))\n                best = self.local_search(best, func, evaluations, step_size)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations, step_size):\n        current = start\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS_Adaptive", "description": "HADE-LS with Adaptive Step Size Control introduces dynamic step size adjustments based on fitness improvement to enhance convergence speed.", "configspace": "", "generation": 45, "fitness": 0.3464948332898581, "feedback": "The algorithm HADE_LS_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.23.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7447159507706013, 0.7447159507706013, 0.7447159507706013, 0.7531190219171999, 0.7531190219171999, 0.7531190219171999, 0.766800476734403, 0.766800476734403, 0.766800476734403, 0.5433834544104986, 0.5433834544104986, 0.5433834544104986, 0.5468662928748211, 0.5468662928748211, 0.5468662928748211, 0.5510170219552218, 0.5510170219552218, 0.5510170219552218, 0.1272080070856082, 0.1272080070856082, 0.1272080070856082, 0.13021974996214636, 0.13021974996214636, 0.13021974996214636, 0.10978508096438089, 0.10978508096438089, 0.10978508096438089, 0.10917779396524363, 0.10917779396524363, 0.10917779396524363, 0.1207071722590013, 0.1207071722590013, 0.1207071722590013, 0.13490836333182743, 0.13490836333182743, 0.13490836333182743, 0.9479468341675775, 0.9479468341675775, 0.9479468341675775, 0.8340973148579169, 0.8340973148579169, 0.8340973148579169, 0.8800895974656922, 0.8800895974656922, 0.8800895974656922, 0.35690233268121374, 0.35690233268121374, 0.35690233268121374, 0.40036105568430447, 0.40036105568430447, 0.40036105568430447, 0.36034856042923924, 0.36034856042923924, 0.36034856042923924, 0.6826801254584798, 0.6826801254584798, 0.6826801254584798, 0.7353437142098951, 0.7353437142098951, 0.7353437142098951, 0.6781891227122068, 0.6781891227122068, 0.6781891227122068, 0.1666979118610945, 0.1666979118610945, 0.1666979118610945, 0.17156282199915018, 0.17156282199915018, 0.17156282199915018, 0.1886026814356846, 0.1886026814356846, 0.1886026814356846, 0.19822436056921022, 0.19822436056921022, 0.19822436056921022, 0.17267968637890374, 0.17267968637890374, 0.17267968637890374, 0.21126195938239645, 0.21126195938239645, 0.21126195938239645, 0.23638647934671275, 0.23638647934671275, 0.23638647934671275, 0.26114908225852074, 0.26114908225852074, 0.26114908225852074, 0.26647821397333316, 0.26647821397333316, 0.26647821397333316, 0.4355458452793861, 0.4355458452793861, 0.4355458452793861, 0.36909879412509905, 0.36909879412509905, 0.36909879412509905, 0.43232485327101267, 0.43232485327101267, 0.43232485327101267, 0.10271362160893927, 0.10271362160893927, 0.10271362160893927, 0.1469401011310516, 0.1469401011310516, 0.1469401011310516, 0.12615420031812352, 0.12615420031812352, 0.12615420031812352, 0.2611351157956223, 0.2611351157956223, 0.2611351157956223, 0.2530709131567813, 0.2530709131567813, 0.2530709131567813, 0.2245460951798044, 0.2245460951798044, 0.2245460951798044, 0.6319098682893258, 0.6319098682893258, 0.6319098682893258, 0.6508477996852373, 0.6508477996852373, 0.6508477996852373, 0.6270964420123593, 0.6270964420123593, 0.6270964420123593, 0.11852272889595894, 0.11852272889595894, 0.11852272889595894, 0.142730751293209, 0.142730751293209, 0.142730751293209, 0.14845720062303713, 0.14845720062303713, 0.14845720062303713, 0.17258536941763336, 0.17258536941763336, 0.17258536941763336, 0.21409872811442032, 0.21409872811442032, 0.21409872811442032, 0.23929677534914995, 0.23929677534914995, 0.23929677534914995, 0.36575975313224185, 0.36575975313224185, 0.36575975313224185, 0.35875569341878066, 0.35875569341878066, 0.35875569341878066, 0.36094141122613865, 0.36094141122613865, 0.36094141122613865, 0.267603879007867, 0.267603879007867, 0.267603879007867, 0.288951146184408, 0.288951146184408, 0.288951146184408, 0.30931901756586055, 0.30931901756586055, 0.30931901756586055, 0.20769009707869523, 0.20769009707869523, 0.20769009707869523, 0.19020478028303744, 0.19020478028303744, 0.19020478028303744, 0.18141655254510802, 0.18141655254510802, 0.18141655254510802, 0.22671101622121326, 0.22671101622121326, 0.22671101622121326, 0.1931122565522001, 0.1931122565522001, 0.1931122565522001, 0.20080505390773307, 0.20080505390773307, 0.20080505390773307, 0.711010223298665, 0.711010223298665, 0.711010223298665, 0.62212561954563, 0.62212561954563, 0.62212561954563, 0.6452652928139238, 0.6452652928139238, 0.6452652928139238, 0.5791203090219087, 0.5791203090219087, 0.5791203090219087, 0.3961941002516568, 0.3961941002516568, 0.3961941002516568, 0.3541401348399358, 0.3541401348399358, 0.3541401348399358, 0.18432600368549612, 0.18432600368549612, 0.18432600368549612, 0.19141338405361952, 0.19141338405361952, 0.19141338405361952, 0.18541882117774067, 0.18541882117774067, 0.18541882117774067, 0.07673075891016556, 0.07673075891016556, 0.07673075891016556, 0.08182837528603393, 0.08182837528603393, 0.08182837528603393, 0.08479887221308768, 0.08479887221308768, 0.08479887221308768]}, "mutation_prompt": null}
{"id": "7e1f4c8d-55a8-4472-b623-043c197a95c3", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "8efa0895-2376-4275-88e2-5aaebcc283ae", "solution": "import numpy as np\n\nclass HADE_LS_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.55  # slightly increased scaling factor to enhance exploration\n        self.CR = 0.85  # slightly reduced crossover probability to maintain diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically with slight adjustment in conditions\n            if evaluations < self.budget and evaluations % (self.population_size * 1.8) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS_Enhanced", "description": "Hybrid Adaptive Differential Evolution with Enhanced Exploration focuses on improving convergence speed by refining population diversity and mutation strategies.", "configspace": "", "generation": 47, "fitness": 0.35011900559896925, "feedback": "The algorithm HADE_LS_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.23.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.796536454532585, 0.796536454532585, 0.796536454532585, 0.7960747756178661, 0.7960747756178661, 0.7960747756178661, 0.7886718547482007, 0.7886718547482007, 0.7886718547482007, 0.6352326090364604, 0.6352326090364604, 0.6352326090364604, 0.6351274310179249, 0.6351274310179249, 0.6351274310179249, 0.6357493993036742, 0.6357493993036742, 0.6357493993036742, 0.12552008095317324, 0.12552008095317324, 0.12552008095317324, 0.1275066262777136, 0.1275066262777136, 0.1275066262777136, 0.12284746568613991, 0.12284746568613991, 0.12284746568613991, 0.11522017432946052, 0.11522017432946052, 0.11522017432946052, 0.11230708260338929, 0.11230708260338929, 0.11230708260338929, 0.1077477762177852, 0.1077477762177852, 0.1077477762177852, 0.9322159589823089, 0.9322159589823089, 0.9322159589823089, 0.868411996612299, 0.868411996612299, 0.868411996612299, 0.8504754321945467, 0.8504754321945467, 0.8504754321945467, 0.43350937335267703, 0.43350937335267703, 0.43350937335267703, 0.4322672558479578, 0.4322672558479578, 0.4322672558479578, 0.47664873436726496, 0.47664873436726496, 0.47664873436726496, 0.6866505805385071, 0.6866505805385071, 0.6866505805385071, 0.6627068526739981, 0.6627068526739981, 0.6627068526739981, 0.6965798129819245, 0.6965798129819245, 0.6965798129819245, 0.37202122023572726, 0.37202122023572726, 0.37202122023572726, 0.317768096324922, 0.317768096324922, 0.317768096324922, 0.24911119701382833, 0.24911119701382833, 0.24911119701382833, 0.22052991116527232, 0.22052991116527232, 0.22052991116527232, 0.20009534563680387, 0.20009534563680387, 0.20009534563680387, 0.34033292175765395, 0.34033292175765395, 0.34033292175765395, 0.23353041585287526, 0.23353041585287526, 0.23353041585287526, 0.23809481643336627, 0.23809481643336627, 0.23809481643336627, 0.21046973199002117, 0.21046973199002117, 0.21046973199002117, 0.3941933636564101, 0.3941933636564101, 0.3941933636564101, 0.3505533534516576, 0.3505533534516576, 0.3505533534516576, 0.42289786746556857, 0.42289786746556857, 0.42289786746556857, 0.06282090850015698, 0.06282090850015698, 0.06282090850015698, 0.1205560713735605, 0.1205560713735605, 0.1205560713735605, 0.13356522905989165, 0.13356522905989165, 0.13356522905989165, 0.21873214000882668, 0.21873214000882668, 0.21873214000882668, 0.26106970186243506, 0.26106970186243506, 0.26106970186243506, 0.24521636586551498, 0.24521636586551498, 0.24521636586551498, 0.6499438636037189, 0.6499438636037189, 0.6499438636037189, 0.6211620910373101, 0.6211620910373101, 0.6211620910373101, 0.6341341537365214, 0.6341341537365214, 0.6341341537365214, 0.12151905256057982, 0.12151905256057982, 0.12151905256057982, 0.10865852782400287, 0.10865852782400287, 0.10865852782400287, 0.11208661983578372, 0.11208661983578372, 0.11208661983578372, 0.15842191857837684, 0.15842191857837684, 0.15842191857837684, 0.17052405079602873, 0.17052405079602873, 0.17052405079602873, 0.1650554279625327, 0.1650554279625327, 0.1650554279625327, 0.3570620244130056, 0.3570620244130056, 0.3570620244130056, 0.36619182558948615, 0.36619182558948615, 0.36619182558948615, 0.41785257284135646, 0.41785257284135646, 0.41785257284135646, 0.2649858959445752, 0.2649858959445752, 0.2649858959445752, 0.27433373485887147, 0.27433373485887147, 0.27433373485887147, 0.30687735695537166, 0.30687735695537166, 0.30687735695537166, 0.20276271209420904, 0.20276271209420904, 0.20276271209420904, 0.1847750755430091, 0.1847750755430091, 0.1847750755430091, 0.2013936957522564, 0.2013936957522564, 0.2013936957522564, 0.22194595729621058, 0.22194595729621058, 0.22194595729621058, 0.191311640467406, 0.191311640467406, 0.191311640467406, 0.20898580894299323, 0.20898580894299323, 0.20898580894299323, 0.5917124129387467, 0.5917124129387467, 0.5917124129387467, 0.5125737312229082, 0.5125737312229082, 0.5125737312229082, 0.4937350346989977, 0.4937350346989977, 0.4937350346989977, 0.2031192886920069, 0.2031192886920069, 0.2031192886920069, 0.3010372625277169, 0.3010372625277169, 0.3010372625277169, 0.722516780642269, 0.722516780642269, 0.722516780642269, 0.18159503741296612, 0.18159503741296612, 0.18159503741296612, 0.20877618414757548, 0.20877618414757548, 0.20877618414757548, 0.18464119452066452, 0.18464119452066452, 0.18464119452066452, 0.07784201393820878, 0.07784201393820878, 0.07784201393820878, 0.08086129948868181, 0.08086129948868181, 0.08086129948868181, 0.08060777073108949, 0.08060777073108949, 0.08060777073108949]}, "mutation_prompt": null}
{"id": "09703244-02de-4f9c-a519-f97fc34045af", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "f0b80a72-965f-4ae7-842e-7c3495587442", "solution": "import numpy as np\n\nclass HADE_LS_PLUS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # initial scaling factor for mutation\n        self.CR = 0.9  # initial crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Dynamic scaling factor and adaptive crossover\n                F_dynamic = self.F + 0.1 * np.random.rand()\n                CR_adaptive = self.CR - 0.1 * np.random.rand()\n                \n                mutant = np.clip(population[a] + F_dynamic * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS_PLUS", "description": "Enhanced Hybrid Adaptive Differential Evolution with Local Search (HADE-LS+) introduces a dynamic scaling factor and adaptive crossover probability to accelerate convergence.", "configspace": "", "generation": 49, "fitness": 0.33116831733838176, "feedback": "The algorithm HADE_LS_PLUS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7619420422133413, 0.7619420422133413, 0.7619420422133413, 0.7700993285398956, 0.7700993285398956, 0.7700993285398956, 0.760209442348305, 0.760209442348305, 0.760209442348305, 0.5825365267183001, 0.5825365267183001, 0.5825365267183001, 0.5657284214042979, 0.5657284214042979, 0.5657284214042979, 0.5953704673025016, 0.5953704673025016, 0.5953704673025016, 0.1235695507465453, 0.1235695507465453, 0.1235695507465453, 0.12417373747818639, 0.12417373747818639, 0.12417373747818639, 0.11801704683833758, 0.11801704683833758, 0.11801704683833758, 0.11779098223438, 0.11779098223438, 0.11779098223438, 0.10656516053496412, 0.10656516053496412, 0.10656516053496412, 0.11093712163394631, 0.11093712163394631, 0.11093712163394631, 0.9101070998484012, 0.9101070998484012, 0.9101070998484012, 0.9198470799060947, 0.9198470799060947, 0.9198470799060947, 0.9388147105038859, 0.9388147105038859, 0.9388147105038859, 0.39834785777415904, 0.39834785777415904, 0.39834785777415904, 0.37978888719317017, 0.37978888719317017, 0.37978888719317017, 0.3775657578512571, 0.3775657578512571, 0.3775657578512571, 0.6369080170110917, 0.6369080170110917, 0.6369080170110917, 0.6529833356369836, 0.6529833356369836, 0.6529833356369836, 0.7064557086669724, 0.7064557086669724, 0.7064557086669724, 0.26262426794646554, 0.26262426794646554, 0.26262426794646554, 0.22899594438006166, 0.22899594438006166, 0.22899594438006166, 0.2322824594114925, 0.2322824594114925, 0.2322824594114925, 0.22174644987886882, 0.22174644987886882, 0.22174644987886882, 0.24245835687794193, 0.24245835687794193, 0.24245835687794193, 0.2116147782028479, 0.2116147782028479, 0.2116147782028479, 0.16463678787445502, 0.16463678787445502, 0.16463678787445502, 0.18004166102959718, 0.18004166102959718, 0.18004166102959718, 0.21328304868938264, 0.21328304868938264, 0.21328304868938264, 0.3333786624289551, 0.3333786624289551, 0.3333786624289551, 0.3036065634770806, 0.3036065634770806, 0.3036065634770806, 0.3368316189832512, 0.3368316189832512, 0.3368316189832512, 0.05515368379946084, 0.05515368379946084, 0.05515368379946084, 0.08795668482854013, 0.08795668482854013, 0.08795668482854013, 0.06417084286792285, 0.06417084286792285, 0.06417084286792285, 0.20846688883282827, 0.20846688883282827, 0.20846688883282827, 0.21111906601555042, 0.21111906601555042, 0.21111906601555042, 0.2140190021974404, 0.2140190021974404, 0.2140190021974404, 0.5729760301218059, 0.5729760301218059, 0.5729760301218059, 0.5556581034444825, 0.5556581034444825, 0.5556581034444825, 0.5960674137124355, 0.5960674137124355, 0.5960674137124355, 0.16186475162538083, 0.16186475162538083, 0.16186475162538083, 0.11575023888330305, 0.11575023888330305, 0.11575023888330305, 0.1229225540542147, 0.1229225540542147, 0.1229225540542147, 0.25686363901971976, 0.25686363901971976, 0.25686363901971976, 0.18058831891575333, 0.18058831891575333, 0.18058831891575333, 0.20060679561489136, 0.20060679561489136, 0.20060679561489136, 0.3242582889099459, 0.3242582889099459, 0.3242582889099459, 0.33344327227585513, 0.33344327227585513, 0.33344327227585513, 0.37339630807753954, 0.37339630807753954, 0.37339630807753954, 0.24899452552268975, 0.24899452552268975, 0.24899452552268975, 0.26883306685971964, 0.26883306685971964, 0.26883306685971964, 0.2742993008340515, 0.2742993008340515, 0.2742993008340515, 0.1958676454466528, 0.1958676454466528, 0.1958676454466528, 0.2259014395871547, 0.2259014395871547, 0.2259014395871547, 0.19879239482664712, 0.19879239482664712, 0.19879239482664712, 0.19023969050087008, 0.19023969050087008, 0.19023969050087008, 0.20215031740701872, 0.20215031740701872, 0.20215031740701872, 0.19696759473452574, 0.19696759473452574, 0.19696759473452574, 0.7460302942841801, 0.7460302942841801, 0.7460302942841801, 0.6166620747603658, 0.6166620747603658, 0.6166620747603658, 0.4559725420236296, 0.4559725420236296, 0.4559725420236296, 0.23585701516412583, 0.23585701516412583, 0.23585701516412583, 0.26537383443111184, 0.26537383443111184, 0.26537383443111184, 0.4650607984646339, 0.4650607984646339, 0.4650607984646339, 0.20337018957046094, 0.20337018957046094, 0.20337018957046094, 0.20638207328111124, 0.20638207328111124, 0.20638207328111124, 0.18872455697097457, 0.18872455697097457, 0.18872455697097457, 0.07940731399065604, 0.07940731399065604, 0.07940731399065604, 0.07338974739132187, 0.07338974739132187, 0.07338974739132187, 0.08130166754909829, 0.08130166754909829, 0.08130166754909829]}, "mutation_prompt": null}
{"id": "9d696bef-6b22-4875-89de-25668033f755", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "aba29624-f9f1-483b-b3fa-51f02dc16482", "solution": "import numpy as np\n\nclass HADE_LS_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                dynamic_F = self.F + 0.1 * np.random.randn()  # dynamic scaling\n                mutant = np.clip(population[a] + dynamic_F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                dynamic_CR = self.CR * (1 - (evaluations / self.budget))  # adaptive crossover\n                crossover = np.random.rand(self.dim) < dynamic_CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS_Enhanced", "description": "Enhanced HADE-LS with dynamic scaling and adaptive crossover for improved convergence speed.", "configspace": "", "generation": 51, "fitness": 0.3048347407308371, "feedback": "The algorithm HADE_LS_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7662749673235787, 0.7662749673235787, 0.7662749673235787, 0.7758168891864092, 0.7758168891864092, 0.7758168891864092, 0.7832885570719818, 0.7832885570719818, 0.7832885570719818, 0.6020369748194916, 0.6020369748194916, 0.6020369748194916, 0.580563238755418, 0.580563238755418, 0.580563238755418, 0.5761192797234909, 0.5761192797234909, 0.5761192797234909, 0.19376848948688719, 0.19376848948688719, 0.19376848948688719, 0.20336710464277052, 0.20336710464277052, 0.20336710464277052, 0.2043897420186177, 0.2043897420186177, 0.2043897420186177, 0.13780181335201613, 0.13780181335201613, 0.13780181335201613, 0.15380982375459407, 0.15380982375459407, 0.15380982375459407, 0.14418875821472388, 0.14418875821472388, 0.14418875821472388, 0.8997920059159409, 0.8997920059159409, 0.8997920059159409, 0.90131890102246, 0.90131890102246, 0.90131890102246, 0.9077149253928546, 0.9077149253928546, 0.9077149253928546, 0.3610379425724167, 0.3610379425724167, 0.3610379425724167, 0.35966900518043154, 0.35966900518043154, 0.35966900518043154, 0.32464430255543375, 0.32464430255543375, 0.32464430255543375, 0.5377661105011264, 0.5377661105011264, 0.5377661105011264, 0.5929233698094705, 0.5929233698094705, 0.5929233698094705, 0.6681640835843008, 0.6681640835843008, 0.6681640835843008, 0.16079373610035386, 0.16079373610035386, 0.16079373610035386, 0.1733209266397705, 0.1733209266397705, 0.1733209266397705, 0.1793171875204076, 0.1793171875204076, 0.1793171875204076, 0.13468433257969026, 0.13468433257969026, 0.13468433257969026, 0.15811585646079307, 0.15811585646079307, 0.15811585646079307, 0.16724039006524727, 0.16724039006524727, 0.16724039006524727, 0.09083361386525923, 0.09083361386525923, 0.09083361386525923, 0.0339361346574758, 0.0339361346574758, 0.0339361346574758, 0.018946844462601642, 0.018946844462601642, 0.018946844462601642, 0.17789757961317265, 0.17789757961317265, 0.17789757961317265, 0.12182688001732334, 0.12182688001732334, 0.12182688001732334, 0.13510786407420328, 0.13510786407420328, 0.13510786407420328, 0.014717391676025149, 0.014717391676025149, 0.014717391676025149, 0.005171931410066777, 0.005171931410066777, 0.005171931410066777, 0.01801839435268726, 0.01801839435268726, 0.01801839435268726, 0.13761550998889105, 0.13761550998889105, 0.13761550998889105, 0.15058566295802556, 0.15058566295802556, 0.15058566295802556, 0.12884019266970226, 0.12884019266970226, 0.12884019266970226, 0.48463942870335974, 0.48463942870335974, 0.48463942870335974, 0.4964876778649021, 0.4964876778649021, 0.4964876778649021, 0.5104955194144787, 0.5104955194144787, 0.5104955194144787, 0.11528739250211761, 0.11528739250211761, 0.11528739250211761, 0.11940583598710364, 0.11940583598710364, 0.11940583598710364, 0.13032799766714875, 0.13032799766714875, 0.13032799766714875, 0.14788078112389935, 0.14788078112389935, 0.14788078112389935, 0.20375351701591826, 0.20375351701591826, 0.20375351701591826, 0.1758752009314799, 0.1758752009314799, 0.1758752009314799, 0.28804098375022835, 0.28804098375022835, 0.28804098375022835, 0.34137382904654445, 0.34137382904654445, 0.34137382904654445, 0.3705307322834622, 0.3705307322834622, 0.3705307322834622, 0.23628323545562746, 0.23628323545562746, 0.23628323545562746, 0.2554376902878325, 0.2554376902878325, 0.2554376902878325, 0.24096034747747852, 0.24096034747747852, 0.24096034747747852, 0.2266814220407919, 0.2266814220407919, 0.2266814220407919, 0.19325166724581044, 0.19325166724581044, 0.19325166724581044, 0.20121000608967599, 0.20121000608967599, 0.20121000608967599, 0.2173434629396085, 0.2173434629396085, 0.2173434629396085, 0.2299810468667518, 0.2299810468667518, 0.2299810468667518, 0.22821642529529462, 0.22821642529529462, 0.22821642529529462, 0.5293103114136665, 0.5293103114136665, 0.5293103114136665, 0.6523677301511495, 0.6523677301511495, 0.6523677301511495, 0.43843881867974643, 0.43843881867974643, 0.43843881867974643, 0.606090128093528, 0.606090128093528, 0.606090128093528, 0.42823219233450904, 0.42823219233450904, 0.42823219233450904, 0.41149249695707235, 0.41149249695707235, 0.41149249695707235, 0.17769186196542908, 0.17769186196542908, 0.17769186196542908, 0.18069237912074276, 0.18069237912074276, 0.18069237912074276, 0.18943383887076837, 0.18943383887076837, 0.18943383887076837, 0.08126309787016162, 0.08126309787016162, 0.08126309787016162, 0.08132513036435118, 0.08132513036435118, 0.08132513036435118, 0.07687243281352385, 0.07687243281352385, 0.07687243281352385]}, "mutation_prompt": null}
{"id": "5bebf0f0-46c1-47b0-8132-45e5a95bf18f", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "00ecf01b-cb40-4412-b28a-0c609664d509", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "de119099-618a-42e7-a297-3e68ed998ee1", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "b5965e19-646a-4540-ace9-ef3ec5226856", "solution": "import numpy as np\n\nclass HADE_AS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # initial scaling factor for mutation\n        self.CR = 0.9  # initial crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.adjustment_factor = 0.05  # factor to adjust F and CR\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n\n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n                if evaluations >= self.budget:\n                    break\n            \n            # Adjust F and CR dynamically based on convergence\n            if evaluations % (self.population_size // 2) == 0:\n                recent_best_fitness = np.min(fitness)\n                if recent_best_fitness < fitness[best_idx]:\n                    self.F = min(1.0, self.F + self.adjustment_factor)\n                    self.CR = max(0.1, self.CR - self.adjustment_factor)\n                else:\n                    self.F = max(0.1, self.F - self.adjustment_factor)\n                    self.CR = min(1.0, self.CR + self.adjustment_factor)\n\n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_AS", "description": "Enhanced Hybrid Adaptive Differential Evolution with Adaptive Scaling (HADE-AS) incorporates dynamic adjustments to the mutation factor and crossover probability based on convergence trends to enhance exploration and exploitation balance.", "configspace": "", "generation": 55, "fitness": 0.16916720740984323, "feedback": "The algorithm HADE_AS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.12.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.376860632408474, 0.376860632408474, 0.376860632408474, 0.37254220742426547, 0.37254220742426547, 0.37254220742426547, 0.40736516197012074, 0.40736516197012074, 0.40736516197012074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019009924090994, 0.019009924090994, 0.019009924090994, 0.11120243823953957, 0.11120243823953957, 0.11120243823953957, 0.09518598705863568, 0.09518598705863568, 0.09518598705863568, 0.1708651662205719, 0.1708651662205719, 0.1708651662205719, 0.037516689472752995, 0.037516689472752995, 0.037516689472752995, 0.057736825855768226, 0.057736825855768226, 0.057736825855768226, 0.0607775672789701, 0.0607775672789701, 0.0607775672789701, 0.13978762485995389, 0.13978762485995389, 0.13978762485995389, 0.3978706718339624, 0.3978706718339624, 0.3978706718339624, 0.083170475299578, 0.083170475299578, 0.083170475299578, 0.16353307122897276, 0.16353307122897276, 0.16353307122897276, 0.19330790535038134, 0.19330790535038134, 0.19330790535038134, 0.21397937287815605, 0.21397937287815605, 0.21397937287815605, 0.17548852928343717, 0.17548852928343717, 0.17548852928343717, 0.21134481257481907, 0.21134481257481907, 0.21134481257481907, 0.3134090064876771, 0.3134090064876771, 0.3134090064876771, 0.1770309303160449, 0.1770309303160449, 0.1770309303160449, 0.1272330851956185, 0.1272330851956185, 0.1272330851956185, 0.13007974739706607, 0.13007974739706607, 0.13007974739706607, 0.14484972525028095, 0.14484972525028095, 0.14484972525028095, 0.19737525734144346, 0.19737525734144346, 0.19737525734144346, 0.08311311252948783, 0.08311311252948783, 0.08311311252948783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008548140248058056, 0.0008548140248058056, 0.0008548140248058056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.29687305145853604, 0.29687305145853604, 0.29687305145853604, 0.058524570776404494, 0.058524570776404494, 0.058524570776404494, 0.07573626963697644, 0.07573626963697644, 0.07573626963697644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09319463058748279, 0.09319463058748279, 0.09319463058748279, 0.009443329699027503, 0.009443329699027503, 0.009443329699027503, 0.08500909102283172, 0.08500909102283172, 0.08500909102283172, 0.34730590291119745, 0.34730590291119745, 0.34730590291119745, 0.3233867349713847, 0.3233867349713847, 0.3233867349713847, 0.3628663225361902, 0.3628663225361902, 0.3628663225361902, 0.09467861437078462, 0.09467861437078462, 0.09467861437078462, 0.09458145083302083, 0.09458145083302083, 0.09458145083302083, 0.0759386363910759, 0.0759386363910759, 0.0759386363910759, 0.18902161956558883, 0.18902161956558883, 0.18902161956558883, 0.18394783620730537, 0.18394783620730537, 0.18394783620730537, 0.23837279095242303, 0.23837279095242303, 0.23837279095242303, 0.24077177850967368, 0.24077177850967368, 0.24077177850967368, 0.1973101114158029, 0.1973101114158029, 0.1973101114158029, 0.19705610236038806, 0.19705610236038806, 0.19705610236038806, 0.15908922763087052, 0.15908922763087052, 0.15908922763087052, 0.12866891098812938, 0.12866891098812938, 0.12866891098812938, 0.14449475987435378, 0.14449475987435378, 0.14449475987435378, 0.22055056497820658, 0.22055056497820658, 0.22055056497820658, 0.20712885868378206, 0.20712885868378206, 0.20712885868378206, 0.27580577729503575, 0.27580577729503575, 0.27580577729503575, 0.21032137592445566, 0.21032137592445566, 0.21032137592445566, 0.17684112341846192, 0.17684112341846192, 0.17684112341846192, 0.18900341083789307, 0.18900341083789307, 0.18900341083789307, 0.2246026351177195, 0.2246026351177195, 0.2246026351177195, 0.17753541529277828, 0.17753541529277828, 0.17753541529277828, 0.5591209352454718, 0.5591209352454718, 0.5591209352454718, 0.15138426137112404, 0.15138426137112404, 0.15138426137112404, 0.4134312717537588, 0.4134312717537588, 0.4134312717537588, 0.4827491131650402, 0.4827491131650402, 0.4827491131650402, 0.1780388189492298, 0.1780388189492298, 0.1780388189492298, 0.20162300053883553, 0.20162300053883553, 0.20162300053883553, 0.19187431141711708, 0.19187431141711708, 0.19187431141711708, 0.08406608482325917, 0.08406608482325917, 0.08406608482325917, 0.07433306129606954, 0.07433306129606954, 0.07433306129606954, 0.10316642882924776, 0.10316642882924776, 0.10316642882924776]}, "mutation_prompt": null}
{"id": "da8463b7-65c4-4748-8863-3c551d6720bd", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "3bb8b152-0849-4924-abf6-aaae365c7b35", "solution": "import numpy as np\n\nclass EHADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        # Adaptive scaling factor and crossover rate\n        self.F_min, self.F_max = 0.4, 0.9\n        self.CR_min, self.CR_max = 0.8, 1.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n\n                # Adaptive mutation strategy\n                F = self.F_min + (self.F_max - self.F_min) * (1 - evaluations / self.budget)\n                mutant = np.clip(population[a] + F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                CR = self.CR_min + (self.CR_max - self.CR_min) * (evaluations / self.budget)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Improved local search with dynamic step size\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.05  # Reduced step size for precision\n        for _ in range(5):  # Fewer iterations for efficient exploration\n            if evaluations >= self.budget:\n                break\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n        return current", "name": "EHADE_LS", "description": "Enhanced Hybrid Adaptive Differential Evolution with Local Search (EHADE-LS) incorporates adaptive scaling and crossover rates, and refined local search to enhance convergence speed.", "configspace": "", "generation": 57, "fitness": 0.29064387622528515, "feedback": "The algorithm EHADE_LS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.21.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.6478034884315869, 0.6478034884315869, 0.6478034884315869, 0.6688122522579956, 0.6688122522579956, 0.6688122522579956, 0.6670419426194818, 0.6670419426194818, 0.6670419426194818, 0.45096491986640075, 0.45096491986640075, 0.45096491986640075, 0.44163325200417747, 0.44163325200417747, 0.44163325200417747, 0.401094295664022, 0.401094295664022, 0.401094295664022, 0.12381698072574143, 0.12381698072574143, 0.12381698072574143, 0.11615714757075968, 0.11615714757075968, 0.11615714757075968, 0.16337064928038403, 0.16337064928038403, 0.16337064928038403, 0.10293477308454435, 0.10293477308454435, 0.10293477308454435, 0.1231597409978662, 0.1231597409978662, 0.1231597409978662, 0.10623408375104315, 0.10623408375104315, 0.10623408375104315, 0.9655821018080025, 0.9655821018080025, 0.9655821018080025, 0.9754474497665725, 0.9754474497665725, 0.9754474497665725, 0.9571244865381858, 0.9571244865381858, 0.9571244865381858, 0.3336839164423764, 0.3336839164423764, 0.3336839164423764, 0.30093659135303563, 0.30093659135303563, 0.30093659135303563, 0.31562800485344955, 0.31562800485344955, 0.31562800485344955, 0.52922763049601, 0.52922763049601, 0.52922763049601, 0.5217463666298765, 0.5217463666298765, 0.5217463666298765, 0.545101784995004, 0.545101784995004, 0.545101784995004, 0.22307834343845123, 0.22307834343845123, 0.22307834343845123, 0.23939649909836358, 0.23939649909836358, 0.23939649909836358, 0.2784790355781076, 0.2784790355781076, 0.2784790355781076, 0.16759993083963942, 0.16759993083963942, 0.16759993083963942, 0.2169962747456099, 0.2169962747456099, 0.2169962747456099, 0.1477964266392584, 0.1477964266392584, 0.1477964266392584, 0.18388542772058925, 0.18388542772058925, 0.18388542772058925, 0.1547268371448346, 0.1547268371448346, 0.1547268371448346, 0.15996885475084144, 0.15996885475084144, 0.15996885475084144, 0.27123169809322867, 0.27123169809322867, 0.27123169809322867, 0.2626258542655353, 0.2626258542655353, 0.2626258542655353, 0.3219268948323545, 0.3219268948323545, 0.3219268948323545, 0.06656271258132607, 0.06656271258132607, 0.06656271258132607, 0.10701092523657951, 0.10701092523657951, 0.10701092523657951, 0.056842219794684956, 0.056842219794684956, 0.056842219794684956, 0.18040472131604635, 0.18040472131604635, 0.18040472131604635, 0.1907120665508114, 0.1907120665508114, 0.1907120665508114, 0.1990842740086537, 0.1990842740086537, 0.1990842740086537, 0.5322628093734207, 0.5322628093734207, 0.5322628093734207, 0.5403044728298794, 0.5403044728298794, 0.5403044728298794, 0.5381599689123094, 0.5381599689123094, 0.5381599689123094, 0.12454799926839988, 0.12454799926839988, 0.12454799926839988, 0.09310943995309606, 0.09310943995309606, 0.09310943995309606, 0.11238572117306345, 0.11238572117306345, 0.11238572117306345, 0.23106864317466502, 0.23106864317466502, 0.23106864317466502, 0.148115143933374, 0.148115143933374, 0.148115143933374, 0.16949779402947263, 0.16949779402947263, 0.16949779402947263, 0.2874518922174064, 0.2874518922174064, 0.2874518922174064, 0.27654959311664595, 0.27654959311664595, 0.27654959311664595, 0.3114263698283323, 0.3114263698283323, 0.3114263698283323, 0.23481819469578835, 0.23481819469578835, 0.23481819469578835, 0.20857888312934936, 0.20857888312934936, 0.20857888312934936, 0.23599016865327038, 0.23599016865327038, 0.23599016865327038, 0.23037914522735614, 0.23037914522735614, 0.23037914522735614, 0.18742760259858493, 0.18742760259858493, 0.18742760259858493, 0.20974549985690993, 0.20974549985690993, 0.20974549985690993, 0.19681122306424859, 0.19681122306424859, 0.19681122306424859, 0.1920541609060138, 0.1920541609060138, 0.1920541609060138, 0.2201833021448396, 0.2201833021448396, 0.2201833021448396, 0.5111342677313077, 0.5111342677313077, 0.5111342677313077, 0.31945786842881196, 0.31945786842881196, 0.31945786842881196, 0.580535971852006, 0.580535971852006, 0.580535971852006, 0.16571133459172938, 0.16571133459172938, 0.16571133459172938, 0.17675601997702595, 0.17675601997702595, 0.17675601997702595, 0.20702709937689823, 0.20702709937689823, 0.20702709937689823, 0.19179957522692515, 0.19179957522692515, 0.19179957522692515, 0.19375347295356438, 0.19375347295356438, 0.19375347295356438, 0.18139279759458105, 0.18139279759458105, 0.18139279759458105, 0.07623465891287984, 0.07623465891287984, 0.07623465891287984, 0.07533587980263201, 0.07533587980263201, 0.07533587980263201, 0.0805212579143113, 0.0805212579143113, 0.0805212579143113]}, "mutation_prompt": null}
{"id": "8ffa2555-b624-4e0f-a4b0-67fa624f947b", "solution": "import numpy as np\n\nclass HADE_LS_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search with adaptive step size\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations, fitness[best_idx])\n        \n        return best\n    \n    def local_search(self, start, func, evaluations, best_fitness):\n        current = start\n        initial_step_size = 0.1\n        adaptive_factor = 0.9\n        step_size = initial_step_size\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n                step_size *= adaptive_factor\n            else:\n                step_size = initial_step_size\n            \n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS_Enhanced", "description": "Enhanced HADE-LS with adaptive step size for local search to improve convergence speed via dynamic exploration.", "configspace": "", "generation": 58, "fitness": 0.3767585267060975, "feedback": "The algorithm HADE_LS_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.778969360334162, 0.778969360334162, 0.778969360334162, 0.79469058721563, 0.79469058721563, 0.79469058721563, 0.796680919281379, 0.796680919281379, 0.796680919281379, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14628221081135306, 0.14628221081135306, 0.14628221081135306, 0.15713613060834308, 0.15713613060834308, 0.15713613060834308, 0.12731996803393864, 0.12731996803393864, 0.12731996803393864, 0.10952392961577384, 0.10952392961577384, 0.10952392961577384, 0.13129410421159082, 0.13129410421159082, 0.13129410421159082, 0.11731262985782487, 0.11731262985782487, 0.11731262985782487, 0.9345095912046286, 0.9345095912046286, 0.9345095912046286, 0.9461350622144222, 0.9461350622144222, 0.9461350622144222, 0.8854981845157388, 0.8854981845157388, 0.8854981845157388, 0.41032426521298937, 0.41032426521298937, 0.41032426521298937, 0.4354940501864668, 0.4354940501864668, 0.4354940501864668, 0.45851794608310303, 0.45851794608310303, 0.45851794608310303, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7580600680715284, 0.7580600680715284, 0.7580600680715284, 0.7648224457261389, 0.7648224457261389, 0.7648224457261389, 0.21401726350563244, 0.21401726350563244, 0.21401726350563244, 0.28087069548356647, 0.28087069548356647, 0.28087069548356647, 0.21977368312684564, 0.21977368312684564, 0.21977368312684564, 0.2062013823903065, 0.2062013823903065, 0.2062013823903065, 0.18966053021446805, 0.18966053021446805, 0.18966053021446805, 0.31109867513370204, 0.31109867513370204, 0.31109867513370204, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.2964032129778277, 0.2964032129778277, 0.2964032129778277, 0.2992112095227596, 0.2992112095227596, 0.2992112095227596, 0.28010858161999264, 0.28010858161999264, 0.28010858161999264, 0.6866093837491467, 0.6866093837491467, 0.6866093837491467, 0.685114095670929, 0.685114095670929, 0.685114095670929, 0.6673144735318848, 0.6673144735318848, 0.6673144735318848, 0.13786980469516186, 0.13786980469516186, 0.13786980469516186, 0.11460061852107717, 0.11460061852107717, 0.11460061852107717, 0.1252216264072893, 0.1252216264072893, 0.1252216264072893, 0.20533207867950098, 0.20533207867950098, 0.20533207867950098, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20335783660282458, 0.20335783660282458, 0.20335783660282458, 0.3830773653182754, 0.3830773653182754, 0.3830773653182754, 0.4128042530200642, 0.4128042530200642, 0.4128042530200642, 0.3896624418855411, 0.3896624418855411, 0.3896624418855411, 0.2753591500404774, 0.2753591500404774, 0.2753591500404774, 0.284409500507666, 0.284409500507666, 0.284409500507666, 0.31022736215664215, 0.31022736215664215, 0.31022736215664215, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19384802480274732, 0.19384802480274732, 0.19384802480274732, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21631745126547297, 0.21631745126547297, 0.21631745126547297, 0.2042572420873061, 0.2042572420873061, 0.2042572420873061, 0.26339051768775024, 0.26339051768775024, 0.26339051768775024, 0.7192189160578268, 0.7192189160578268, 0.7192189160578268, 0.7792119696840331, 0.7792119696840331, 0.7792119696840331, 0.7111494759395279, 0.7111494759395279, 0.7111494759395279, 0.22121026469715188, 0.22121026469715188, 0.22121026469715188, 0.20311741768501923, 0.20311741768501923, 0.20311741768501923, 0.7775196713958487, 0.7775196713958487, 0.7775196713958487, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08657122098949732, 0.08657122098949732, 0.08657122098949732, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "d2625215-39b7-4830-a522-26ab7e2b223f", "solution": "import numpy as np\n\nclass Enh_HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Adjusted mutation strategy with dynamic scaling factor\n                F_adjusted = self.F * (0.5 + np.random.rand() / 2)\n                mutant = np.clip(population[a] + F_adjusted * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # More frequent adaptive local search\n            if evaluations < self.budget and evaluations % (self.population_size * 1.5) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n                step_size *= 1.1  # increase step size adaptively if improvement\n            else:\n                step_size *= 0.9  # decrease step size if no improvement\n            if evaluations >= self.budget:\n                break\n        return current", "name": "Enh_HADE_LS", "description": "Enhanced Hybrid Adaptive Differential Evolution with Improved Local Search (Enh-HADE-LS) accelerates convergence by refining mutation strategy and boosting local search adaptivity.", "configspace": "", "generation": 59, "fitness": 0.3540077985307215, "feedback": "The algorithm Enh_HADE_LS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.8151503282664254, 0.8151503282664254, 0.8151503282664254, 0.8384591209081024, 0.8384591209081024, 0.8384591209081024, 0.8400415646903012, 0.8400415646903012, 0.8400415646903012, 0.6909241655099032, 0.6909241655099032, 0.6909241655099032, 0.683825489297768, 0.683825489297768, 0.683825489297768, 0.09187657057796261, 0.09187657057796261, 0.09187657057796261, 0.15791129320871156, 0.15791129320871156, 0.15791129320871156, 0.14380513541613782, 0.14380513541613782, 0.14380513541613782, 0.13539850221823468, 0.13539850221823468, 0.13539850221823468, 0.12921810871963557, 0.12921810871963557, 0.12921810871963557, 0.11533043495434558, 0.11533043495434558, 0.11533043495434558, 0.1301779265791092, 0.1301779265791092, 0.1301779265791092, 0.8673346844688261, 0.8673346844688261, 0.8673346844688261, 0.8268655932595663, 0.8268655932595663, 0.8268655932595663, 0.8320527509606976, 0.8320527509606976, 0.8320527509606976, 0.18400776693717558, 0.18400776693717558, 0.18400776693717558, 0.3336826832972065, 0.3336826832972065, 0.3336826832972065, 0.3005996018907332, 0.3005996018907332, 0.3005996018907332, 0.8212398528063914, 0.8212398528063914, 0.8212398528063914, 0.8135743823647644, 0.8135743823647644, 0.8135743823647644, 0.8140857074619238, 0.8140857074619238, 0.8140857074619238, 0.18734352699904522, 0.18734352699904522, 0.18734352699904522, 0.13038230748124802, 0.13038230748124802, 0.13038230748124802, 0.23369885803942547, 0.23369885803942547, 0.23369885803942547, 0.14221630773763405, 0.14221630773763405, 0.14221630773763405, 0.2009656714475444, 0.2009656714475444, 0.2009656714475444, 0.35722762601377367, 0.35722762601377367, 0.35722762601377367, 0.08343884801728108, 0.08343884801728108, 0.08343884801728108, 0.1909740761775317, 0.1909740761775317, 0.1909740761775317, 0.466324614833454, 0.466324614833454, 0.466324614833454, 0.3084709318401997, 0.3084709318401997, 0.3084709318401997, 0.3879414690473779, 0.3879414690473779, 0.3879414690473779, 0.13377597559993715, 0.13377597559993715, 0.13377597559993715, 0.16316433414561615, 0.16316433414561615, 0.16316433414561615, 0.20839637081913998, 0.20839637081913998, 0.20839637081913998, 0.19087732002598512, 0.19087732002598512, 0.19087732002598512, 0.3276490386991455, 0.3276490386991455, 0.3276490386991455, 0.3975825531366427, 0.3975825531366427, 0.3975825531366427, 0.39659461655521944, 0.39659461655521944, 0.39659461655521944, 0.7713878832422502, 0.7713878832422502, 0.7713878832422502, 0.5997794503830971, 0.5997794503830971, 0.5997794503830971, 0.7070509701257721, 0.7070509701257721, 0.7070509701257721, 0.1289618655486705, 0.1289618655486705, 0.1289618655486705, 0.1312764492182963, 0.1312764492182963, 0.1312764492182963, 0.15554575897570921, 0.15554575897570921, 0.15554575897570921, 0.15256033867715835, 0.15256033867715835, 0.15256033867715835, 0.15742817986786062, 0.15742817986786062, 0.15742817986786062, 0.26969656040810575, 0.26969656040810575, 0.26969656040810575, 0.5044601438021069, 0.5044601438021069, 0.5044601438021069, 0.4943103429444642, 0.4943103429444642, 0.4943103429444642, 0.5153885765424653, 0.5153885765424653, 0.5153885765424653, 0.40718215244885425, 0.40718215244885425, 0.40718215244885425, 0.3778884098442391, 0.3778884098442391, 0.3778884098442391, 0.400868107079669, 0.400868107079669, 0.400868107079669, 0.21389881360640606, 0.21389881360640606, 0.21389881360640606, 0.2154188895127973, 0.2154188895127973, 0.2154188895127973, 0.20137335031869108, 0.20137335031869108, 0.20137335031869108, 0.38340856187753347, 0.38340856187753347, 0.38340856187753347, 0.4335563478916944, 0.4335563478916944, 0.4335563478916944, 0.3417176055816198, 0.3417176055816198, 0.3417176055816198, 0.8476104521074649, 0.8476104521074649, 0.8476104521074649, 0.19637875135828864, 0.19637875135828864, 0.19637875135828864, 0.18207229417100257, 0.18207229417100257, 0.18207229417100257, 0.4071879422425151, 0.4071879422425151, 0.4071879422425151, 0.22301962227710237, 0.22301962227710237, 0.22301962227710237, 0.15228026144516627, 0.15228026144516627, 0.15228026144516627, 0.18533216442053546, 0.18533216442053546, 0.18533216442053546, 0.19168112360010203, 0.19168112360010203, 0.19168112360010203, 0.1887640542039032, 0.1887640542039032, 0.1887640542039032, 0.10655559121724201, 0.10655559121724201, 0.10655559121724201, 0.08817824837464028, 0.08817824837464028, 0.08817824837464028, 0.08375612048640635, 0.08375612048640635, 0.08375612048640635]}, "mutation_prompt": null}
{"id": "e120d5b1-83e0-4ce4-8ec1-1798214bba23", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "39c045b1-f3b4-4fcb-9843-d0874b75d13b", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "26883809-6b6a-491c-92e6-d2298341b7cb", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Adaptive mutation based on best solution\n                F_adaptive = self.F + 0.2 * np.random.rand()\n                mutant = np.clip(population[a] + F_adaptive * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Selective local search based on improvement\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                if fitness[best_idx] < np.min(fitness) * 1.01:\n                    best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Enhanced HADE-LS with adaptive mutation and selective local search to accelerate convergence.", "configspace": "", "generation": 62, "fitness": 0.3450059525520963, "feedback": "The algorithm HADE_LS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7244642511635867, 0.7244642511635867, 0.7244642511635867, 0.7252329549781884, 0.7252329549781884, 0.7252329549781884, 0.7783200421793481, 0.7783200421793481, 0.7783200421793481, 0.5752108529975329, 0.5752108529975329, 0.5752108529975329, 0.5898537663352168, 0.5898537663352168, 0.5898537663352168, 0.5960749181824372, 0.5960749181824372, 0.5960749181824372, 0.10130609287194425, 0.10130609287194425, 0.10130609287194425, 0.12087139509035949, 0.12087139509035949, 0.12087139509035949, 0.1430952161034842, 0.1430952161034842, 0.1430952161034842, 0.09439021065389352, 0.09439021065389352, 0.09439021065389352, 0.10968415146332844, 0.10968415146332844, 0.10968415146332844, 0.12244055635604167, 0.12244055635604167, 0.12244055635604167, 0.8563791143739108, 0.8563791143739108, 0.8563791143739108, 0.9669196961830827, 0.9669196961830827, 0.9669196961830827, 0.9743318717879852, 0.9743318717879852, 0.9743318717879852, 0.35209464870247487, 0.35209464870247487, 0.35209464870247487, 0.4006584491461729, 0.4006584491461729, 0.4006584491461729, 0.4666424230779175, 0.4666424230779175, 0.4666424230779175, 0.5994831846066816, 0.5994831846066816, 0.5994831846066816, 0.8225835457284708, 0.8225835457284708, 0.8225835457284708, 0.5850743988874609, 0.5850743988874609, 0.5850743988874609, 0.3097910822603679, 0.3097910822603679, 0.3097910822603679, 0.4169503624118943, 0.4169503624118943, 0.4169503624118943, 0.30202915743384207, 0.30202915743384207, 0.30202915743384207, 0.2747570874407218, 0.2747570874407218, 0.2747570874407218, 0.2975536377849324, 0.2975536377849324, 0.2975536377849324, 0.27132578377489414, 0.27132578377489414, 0.27132578377489414, 0.26775654580600505, 0.26775654580600505, 0.26775654580600505, 0.21839269044610388, 0.21839269044610388, 0.21839269044610388, 0.3393473774783705, 0.3393473774783705, 0.3393473774783705, 0.40339266121710626, 0.40339266121710626, 0.40339266121710626, 0.4155205586148669, 0.4155205586148669, 0.4155205586148669, 0.4158437389216634, 0.4158437389216634, 0.4158437389216634, 0.06152313032585843, 0.06152313032585843, 0.06152313032585843, 0.13883177194752694, 0.13883177194752694, 0.13883177194752694, 0.11909840828110208, 0.11909840828110208, 0.11909840828110208, 0.2258980088771405, 0.2258980088771405, 0.2258980088771405, 0.25220780113731067, 0.25220780113731067, 0.25220780113731067, 0.2885878521415196, 0.2885878521415196, 0.2885878521415196, 0.6343473507313822, 0.6343473507313822, 0.6343473507313822, 0.668567381591259, 0.668567381591259, 0.668567381591259, 0.5985408169697759, 0.5985408169697759, 0.5985408169697759, 0.10678427110543176, 0.10678427110543176, 0.10678427110543176, 0.10620617321653314, 0.10620617321653314, 0.10620617321653314, 0.10110687727373346, 0.10110687727373346, 0.10110687727373346, 0.17898293897890194, 0.17898293897890194, 0.17898293897890194, 0.14679062806590426, 0.14679062806590426, 0.14679062806590426, 0.19289285462396277, 0.19289285462396277, 0.19289285462396277, 0.34471098447092796, 0.34471098447092796, 0.34471098447092796, 0.308535398086101, 0.308535398086101, 0.308535398086101, 0.33947618188283124, 0.33947618188283124, 0.33947618188283124, 0.26225430641854885, 0.26225430641854885, 0.26225430641854885, 0.250229044789569, 0.250229044789569, 0.250229044789569, 0.28789916975987295, 0.28789916975987295, 0.28789916975987295, 0.20195660478442212, 0.20195660478442212, 0.20195660478442212, 0.188755304930722, 0.188755304930722, 0.188755304930722, 0.21927549013562653, 0.21927549013562653, 0.21927549013562653, 0.21030996175616679, 0.21030996175616679, 0.21030996175616679, 0.2036612753330469, 0.2036612753330469, 0.2036612753330469, 0.1917367170611558, 0.1917367170611558, 0.1917367170611558, 0.8198122396732972, 0.8198122396732972, 0.8198122396732972, 0.5932262768395109, 0.5932262768395109, 0.5932262768395109, 0.1762383620830864, 0.1762383620830864, 0.1762383620830864, 0.20117422494418502, 0.20117422494418502, 0.20117422494418502, 0.6109071432030808, 0.6109071432030808, 0.6109071432030808, 0.20435759854728286, 0.20435759854728286, 0.20435759854728286, 0.17754563073278373, 0.17754563073278373, 0.17754563073278373, 0.187209158246889, 0.187209158246889, 0.187209158246889, 0.16923148448823044, 0.16923148448823044, 0.16923148448823044, 0.0746502722524911, 0.0746502722524911, 0.0746502722524911, 0.08544136296068394, 0.08544136296068394, 0.08544136296068394, 0.0736957006427903, 0.0736957006427903, 0.0736957006427903]}, "mutation_prompt": null}
{"id": "ade4712f-2404-4c22-abeb-88c5784faacc", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "cf098f81-e542-43ca-9ec6-0a48dacf28f2", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F_min = 0.4  # lower bound for scaling factor\n        self.F_max = 0.9  # upper bound for scaling factor\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            self.F = self.F_min + ((self.F_max - self.F_min) * (self.budget - evaluations) / self.budget)\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Enhanced HADE-LS by optimizing mutation strategy and adaptive scaling for improved convergence speed.", "configspace": "", "generation": 64, "fitness": 0.27688867133157863, "feedback": "The algorithm HADE_LS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.6138969613591228, 0.6138969613591228, 0.6138969613591228, 0.6477245768279829, 0.6477245768279829, 0.6477245768279829, 0.6344500698522285, 0.6344500698522285, 0.6344500698522285, 0.38557941899199943, 0.38557941899199943, 0.38557941899199943, 0.3549880495665855, 0.3549880495665855, 0.3549880495665855, 0.3742227633904768, 0.3742227633904768, 0.3742227633904768, 0.12444961332611149, 0.12444961332611149, 0.12444961332611149, 0.11472975761006987, 0.11472975761006987, 0.11472975761006987, 0.11682735184467052, 0.11682735184467052, 0.11682735184467052, 0.1085755051639622, 0.1085755051639622, 0.1085755051639622, 0.10469785939373655, 0.10469785939373655, 0.10469785939373655, 0.10502256659861009, 0.10502256659861009, 0.10502256659861009, 0.9609560128918629, 0.9609560128918629, 0.9609560128918629, 0.9868320179502662, 0.9868320179502662, 0.9868320179502662, 0.9695492652292605, 0.9695492652292605, 0.9695492652292605, 0.310568049273519, 0.310568049273519, 0.310568049273519, 0.28209217413893106, 0.28209217413893106, 0.28209217413893106, 0.3085174321779237, 0.3085174321779237, 0.3085174321779237, 0.4492689288116045, 0.4492689288116045, 0.4492689288116045, 0.4936693195922187, 0.4936693195922187, 0.4936693195922187, 0.40967446617291714, 0.40967446617291714, 0.40967446617291714, 0.21458611130831406, 0.21458611130831406, 0.21458611130831406, 0.20814525176682364, 0.20814525176682364, 0.20814525176682364, 0.21374090860781492, 0.21374090860781492, 0.21374090860781492, 0.10207592158984113, 0.10207592158984113, 0.10207592158984113, 0.23010588262076204, 0.23010588262076204, 0.23010588262076204, 0.18989084594291672, 0.18989084594291672, 0.18989084594291672, 0.14111608265036701, 0.14111608265036701, 0.14111608265036701, 0.11253175890729183, 0.11253175890729183, 0.11253175890729183, 0.11561720300154243, 0.11561720300154243, 0.11561720300154243, 0.2645294152811686, 0.2645294152811686, 0.2645294152811686, 0.24472259661042373, 0.24472259661042373, 0.24472259661042373, 0.2713770805588456, 0.2713770805588456, 0.2713770805588456, 0.04457203891156025, 0.04457203891156025, 0.04457203891156025, 0.04969091177823415, 0.04969091177823415, 0.04969091177823415, 0.05647891082481915, 0.05647891082481915, 0.05647891082481915, 0.17791345158853478, 0.17791345158853478, 0.17791345158853478, 0.16697345801708796, 0.16697345801708796, 0.16697345801708796, 0.1582097418786811, 0.1582097418786811, 0.1582097418786811, 0.47170443388534344, 0.47170443388534344, 0.47170443388534344, 0.4647364069735237, 0.4647364069735237, 0.4647364069735237, 0.505301342383252, 0.505301342383252, 0.505301342383252, 0.10660821101039508, 0.10660821101039508, 0.10660821101039508, 0.10266448047586307, 0.10266448047586307, 0.10266448047586307, 0.09851411116428932, 0.09851411116428932, 0.09851411116428932, 0.2507550990435735, 0.2507550990435735, 0.2507550990435735, 0.16359957054477292, 0.16359957054477292, 0.16359957054477292, 0.19027272611072354, 0.19027272611072354, 0.19027272611072354, 0.2739793390518461, 0.2739793390518461, 0.2739793390518461, 0.27992589800568857, 0.27992589800568857, 0.27992589800568857, 0.3068729535586523, 0.3068729535586523, 0.3068729535586523, 0.18437748885789984, 0.18437748885789984, 0.18437748885789984, 0.22744249090205093, 0.22744249090205093, 0.22744249090205093, 0.2352676384980884, 0.2352676384980884, 0.2352676384980884, 0.17654431993447128, 0.17654431993447128, 0.17654431993447128, 0.19557252905076827, 0.19557252905076827, 0.19557252905076827, 0.18256508687721973, 0.18256508687721973, 0.18256508687721973, 0.21458455987610792, 0.21458455987610792, 0.21458455987610792, 0.18579383727735277, 0.18579383727735277, 0.18579383727735277, 0.1949039283857943, 0.1949039283857943, 0.1949039283857943, 0.6459470621769607, 0.6459470621769607, 0.6459470621769607, 0.4545892476780551, 0.4545892476780551, 0.4545892476780551, 0.1790094399522948, 0.1790094399522948, 0.1790094399522948, 0.6389285266717941, 0.6389285266717941, 0.6389285266717941, 0.2023022395665407, 0.2023022395665407, 0.2023022395665407, 0.20844512662491965, 0.20844512662491965, 0.20844512662491965, 0.18076595077047497, 0.18076595077047497, 0.18076595077047497, 0.19484377483878756, 0.19484377483878756, 0.19484377483878756, 0.18565160916204204, 0.18565160916204204, 0.18565160916204204, 0.07267212209567264, 0.07267212209567264, 0.07267212209567264, 0.06854460673026674, 0.06854460673026674, 0.06854460673026674, 0.07372844572908721, 0.07372844572908721, 0.07372844572908721]}, "mutation_prompt": null}
{"id": "d0940102-a5ae-42ce-b52e-36e83fe3d4b7", "solution": "import numpy as np\n\nclass HADE_LS_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        step_size = 0.1  # Adaptive step size for local search\n\n        while evaluations < self.budget:\n            self.adjust_population(fitness)\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            if evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations, step_size)\n                step_size = max(step_size * 0.9, 0.01)  # Reduce step size adaptively\n        \n        return best\n    \n    def local_search(self, start, func, evaluations, step_size):\n        current = start\n        for _ in range(5):  # Reduce local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current\n    \n    def adjust_population(self, fitness):\n        sorted_indices = np.argsort(fitness)\n        top_individuals = int(0.2 * self.population_size)\n        for idx in sorted_indices[:top_individuals]:\n            self.F *= 0.98  # Slightly decrease F to favor exploration\n            self.CR = min(self.CR + 0.01, 1.0)  # Slightly increase CR for more aggressive exploitation", "name": "HADE_LS_Enhanced", "description": "Enhanced HADE_LS with adaptive step sizing and dynamic population adjustment to improve convergence speed and solution quality.", "configspace": "", "generation": 65, "fitness": 0.12415159968842213, "feedback": "The algorithm HADE_LS_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.24762818783343477, 0.24762818783343477, 0.24762818783343477, 0.15620968952295988, 0.15620968952295988, 0.15620968952295988, 0.32145579540846625, 0.32145579540846625, 0.32145579540846625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01705175432163686, 0.01705175432163686, 0.01705175432163686, 0.11162481858381179, 0.11162481858381179, 0.11162481858381179, 0.09134027675453815, 0.09134027675453815, 0.09134027675453815, 0.12130321658141274, 0.12130321658141274, 0.12130321658141274, 0.04661552802172664, 0.04661552802172664, 0.04661552802172664, 0.02953367198703294, 0.02953367198703294, 0.02953367198703294, 0.065625005907887, 0.065625005907887, 0.065625005907887, 0.05682921427361254, 0.05682921427361254, 0.05682921427361254, 0.07385030774011736, 0.07385030774011736, 0.07385030774011736, 0.09618979869442079, 0.09618979869442079, 0.09618979869442079, 0.060190574373782724, 0.060190574373782724, 0.060190574373782724, 0.06414568741245641, 0.06414568741245641, 0.06414568741245641, 0.11994948664585448, 0.11994948664585448, 0.11994948664585448, 0.17054164458846577, 0.17054164458846577, 0.17054164458846577, 0.12044512121465234, 0.12044512121465234, 0.12044512121465234, 0.12787705400927585, 0.12787705400927585, 0.12787705400927585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10701112915816668, 0.10701112915816668, 0.10701112915816668, 0.10838312901745628, 0.10838312901745628, 0.10838312901745628, 0.19140490968312762, 0.19140490968312762, 0.19140490968312762, 0.07620462000489647, 0.07620462000489647, 0.07620462000489647, 0.012653547350511496, 0.012653547350511496, 0.012653547350511496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08231057816532417, 0.08231057816532417, 0.08231057816532417, 0.09164781112927445, 0.09164781112927445, 0.09164781112927445, 0.10691816489022199, 0.10691816489022199, 0.10691816489022199, 0.023976749494516336, 0.023976749494516336, 0.023976749494516336, 0.03234474114597363, 0.03234474114597363, 0.03234474114597363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03346198123737465, 0.03346198123737465, 0.03346198123737465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010009356076816744, 0.010009356076816744, 0.010009356076816744, 0.2950573006075461, 0.2950573006075461, 0.2950573006075461, 0.20536135526834665, 0.20536135526834665, 0.20536135526834665, 0.2243218230446492, 0.2243218230446492, 0.2243218230446492, 0.08540136786742436, 0.08540136786742436, 0.08540136786742436, 0.07835293774087981, 0.07835293774087981, 0.07835293774087981, 0.08604757579779065, 0.08604757579779065, 0.08604757579779065, 0.185106723498772, 0.185106723498772, 0.185106723498772, 0.21500228613080807, 0.21500228613080807, 0.21500228613080807, 0.19448165200791234, 0.19448165200791234, 0.19448165200791234, 0.2056950372509344, 0.2056950372509344, 0.2056950372509344, 0.17635365882373932, 0.17635365882373932, 0.17635365882373932, 0.18594258168144684, 0.18594258168144684, 0.18594258168144684, 0.12098824348512882, 0.12098824348512882, 0.12098824348512882, 0.1332847795973532, 0.1332847795973532, 0.1332847795973532, 0.12169208956811528, 0.12169208956811528, 0.12169208956811528, 0.2395937039030116, 0.2395937039030116, 0.2395937039030116, 0.21495729000825403, 0.21495729000825403, 0.21495729000825403, 0.23332541522719685, 0.23332541522719685, 0.23332541522719685, 0.1795293852118095, 0.1795293852118095, 0.1795293852118095, 0.18499924118476951, 0.18499924118476951, 0.18499924118476951, 0.18348026858457256, 0.18348026858457256, 0.18348026858457256, 0.37125522339919903, 0.37125522339919903, 0.37125522339919903, 0.19167790433415444, 0.19167790433415444, 0.19167790433415444, 0.16265562497073294, 0.16265562497073294, 0.16265562497073294, 0.15776856378718163, 0.15776856378718163, 0.15776856378718163, 0.17964307006572966, 0.17964307006572966, 0.17964307006572966, 0.23807404705073887, 0.23807404705073887, 0.23807404705073887, 0.19724730453401484, 0.19724730453401484, 0.19724730453401484, 0.22523076209586546, 0.22523076209586546, 0.22523076209586546, 0.21641193144929727, 0.21641193144929727, 0.21641193144929727, 0.09779196266095391, 0.09779196266095391, 0.09779196266095391, 0.07277323321658735, 0.07277323321658735, 0.07277323321658735, 0.10387728228227155, 0.10387728228227155, 0.10387728228227155]}, "mutation_prompt": null}
{"id": "ed464ff8-1989-4612-91d2-7e8b40f54f91", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "ef701fc9-01a7-4b45-8fc9-36ab50115740", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "061db988-cd24-4fb8-bd40-e14ecb26b060", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "0f377f96-c194-4e42-bcb5-5817fdc13ff4", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "e941fefe-9b23-4e55-ba34-bc5b554c33b6", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "03faf9b3-1dc1-4e42-9f79-6b677607dd48", "solution": "import numpy as np\n\nclass HADE_LS_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # refined scaling factor for mutation\n        self.CR = 0.85  # slightly adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS_Improved", "description": "Adjusted HADE-LS with refined mutation strategy and adaptive parameters to enhance convergence speed.", "configspace": "", "generation": 71, "fitness": 0.3175643818225193, "feedback": "The algorithm HADE_LS_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7274444807293448, 0.7274444807293448, 0.7274444807293448, 0.7448578754219684, 0.7448578754219684, 0.7448578754219684, 0.7669625993769978, 0.7669625993769978, 0.7669625993769978, 0.5482781569782242, 0.5482781569782242, 0.5482781569782242, 0.5242745112462518, 0.5242745112462518, 0.5242745112462518, 0.5217318708868246, 0.5217318708868246, 0.5217318708868246, 0.14971840864576103, 0.14971840864576103, 0.14971840864576103, 0.14143531598596093, 0.14143531598596093, 0.14143531598596093, 0.13769963903346893, 0.13769963903346893, 0.13769963903346893, 0.1002488843153817, 0.1002488843153817, 0.1002488843153817, 0.11285128107535525, 0.11285128107535525, 0.11285128107535525, 0.10096384612840759, 0.10096384612840759, 0.10096384612840759, 0.9325093839320311, 0.9325093839320311, 0.9325093839320311, 0.9545931910883235, 0.9545931910883235, 0.9545931910883235, 0.889993693893021, 0.889993693893021, 0.889993693893021, 0.38171829087162856, 0.38171829087162856, 0.38171829087162856, 0.3802374105798496, 0.3802374105798496, 0.3802374105798496, 0.40271610818546477, 0.40271610818546477, 0.40271610818546477, 0.5825207898799698, 0.5825207898799698, 0.5825207898799698, 0.6301921671108484, 0.6301921671108484, 0.6301921671108484, 0.6033504776605532, 0.6033504776605532, 0.6033504776605532, 0.2188651655929199, 0.2188651655929199, 0.2188651655929199, 0.24694385836354327, 0.24694385836354327, 0.24694385836354327, 0.18928521623399241, 0.18928521623399241, 0.18928521623399241, 0.22246780352265116, 0.22246780352265116, 0.22246780352265116, 0.22904414166570164, 0.22904414166570164, 0.22904414166570164, 0.20997534257363093, 0.20997534257363093, 0.20997534257363093, 0.13224718766481947, 0.13224718766481947, 0.13224718766481947, 0.15702426992820928, 0.15702426992820928, 0.15702426992820928, 0.15203941990144032, 0.15203941990144032, 0.15203941990144032, 0.237982628736363, 0.237982628736363, 0.237982628736363, 0.2947775329597834, 0.2947775329597834, 0.2947775329597834, 0.3154712245524375, 0.3154712245524375, 0.3154712245524375, 0.057593430688522185, 0.057593430688522185, 0.057593430688522185, 0.07097982336378139, 0.07097982336378139, 0.07097982336378139, 0.0687896978372946, 0.0687896978372946, 0.0687896978372946, 0.17922446492171618, 0.17922446492171618, 0.17922446492171618, 0.200735801319341, 0.200735801319341, 0.200735801319341, 0.18552497722420025, 0.18552497722420025, 0.18552497722420025, 0.5678439532008387, 0.5678439532008387, 0.5678439532008387, 0.5643253542447324, 0.5643253542447324, 0.5643253542447324, 0.5409449757817532, 0.5409449757817532, 0.5409449757817532, 0.11691540684147772, 0.11691540684147772, 0.11691540684147772, 0.10483714802061261, 0.10483714802061261, 0.10483714802061261, 0.12641535693836015, 0.12641535693836015, 0.12641535693836015, 0.254538078293147, 0.254538078293147, 0.254538078293147, 0.25876244606964716, 0.25876244606964716, 0.25876244606964716, 0.19471410737889405, 0.19471410737889405, 0.19471410737889405, 0.31529410443321126, 0.31529410443321126, 0.31529410443321126, 0.3362805338819237, 0.3362805338819237, 0.3362805338819237, 0.34924894704247345, 0.34924894704247345, 0.34924894704247345, 0.24753326335052406, 0.24753326335052406, 0.24753326335052406, 0.24096399180833117, 0.24096399180833117, 0.24096399180833117, 0.26366434903303126, 0.26366434903303126, 0.26366434903303126, 0.19032925615093332, 0.19032925615093332, 0.19032925615093332, 0.18813500735273936, 0.18813500735273936, 0.18813500735273936, 0.21113858424508158, 0.21113858424508158, 0.21113858424508158, 0.2348204112849933, 0.2348204112849933, 0.2348204112849933, 0.19605453662287642, 0.19605453662287642, 0.19605453662287642, 0.2021291946160525, 0.2021291946160525, 0.2021291946160525, 0.739354857623283, 0.739354857623283, 0.739354857623283, 0.19234559823436848, 0.19234559823436848, 0.19234559823436848, 0.5564242564828576, 0.5564242564828576, 0.5564242564828576, 0.16527353448794113, 0.16527353448794113, 0.16527353448794113, 0.4278718198506509, 0.4278718198506509, 0.4278718198506509, 0.5799673385992878, 0.5799673385992878, 0.5799673385992878, 0.1964331868897773, 0.1964331868897773, 0.1964331868897773, 0.18290515189879897, 0.18290515189879897, 0.18290515189879897, 0.17588496861096825, 0.17588496861096825, 0.17588496861096825, 0.08236528780463648, 0.08236528780463648, 0.08236528780463648, 0.07109466604288062, 0.07109466604288062, 0.07109466604288062, 0.08655544802831594, 0.08655544802831594, 0.08655544802831594]}, "mutation_prompt": null}
{"id": "7e9fd88e-1dc5-481f-8e44-4bdebbf24487", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "6df53895-3c7c-4eb8-924d-6d10aadb88a5", "solution": "import numpy as np\n\nclass E_HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            F_dynamic = 0.5 + 0.5 * (1 - (evaluations / self.budget))  # dynamic scaling factor\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + F_dynamic * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                CR_dynamic = 0.9 * (1 - evaluations / self.budget)  # adaptive crossover probability\n                crossover = np.random.rand(self.dim) < CR_dynamic\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "E_HADE_LS", "description": "Enhanced Hybrid Adaptive Differential Evolution with Local Search (E-HADE-LS) accelerates convergence by introducing adaptive crossover based on iteration progress and dynamic scaling of mutation factor.", "configspace": "", "generation": 73, "fitness": 0.22286193176646615, "feedback": "The algorithm E_HADE_LS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.5844854853280279, 0.5844854853280279, 0.5844854853280279, 0.5970889910699675, 0.5970889910699675, 0.5970889910699675, 0.6036460741248988, 0.6036460741248988, 0.6036460741248988, 0.31178384124911795, 0.31178384124911795, 0.31178384124911795, 0.27969086724396663, 0.27969086724396663, 0.27969086724396663, 0.31106494848022415, 0.31106494848022415, 0.31106494848022415, 0.13803510670572394, 0.13803510670572394, 0.13803510670572394, 0.13573171160469555, 0.13573171160469555, 0.13573171160469555, 0.16537504746101872, 0.16537504746101872, 0.16537504746101872, 0.12728002324129573, 0.12728002324129573, 0.12728002324129573, 0.10752468348189037, 0.10752468348189037, 0.10752468348189037, 0.1236768935745498, 0.1236768935745498, 0.1236768935745498, 0.9181193126253828, 0.9181193126253828, 0.9181193126253828, 0.9662336662939611, 0.9662336662939611, 0.9662336662939611, 0.9639410810596919, 0.9639410810596919, 0.9639410810596919, 0.24598176731302068, 0.24598176731302068, 0.24598176731302068, 0.23113477677501193, 0.23113477677501193, 0.23113477677501193, 0.23388849686619828, 0.23388849686619828, 0.23388849686619828, 0.35276967463614106, 0.35276967463614106, 0.35276967463614106, 0.29793358639358836, 0.29793358639358836, 0.29793358639358836, 0.29044184698452313, 0.29044184698452313, 0.29044184698452313, 0.1457817137855011, 0.1457817137855011, 0.1457817137855011, 0.14182459039456097, 0.14182459039456097, 0.14182459039456097, 0.1371381886362043, 0.1371381886362043, 0.1371381886362043, 0.12137483173122432, 0.12137483173122432, 0.12137483173122432, 0.15273684281251354, 0.15273684281251354, 0.15273684281251354, 0.13558690706883403, 0.13558690706883403, 0.13558690706883403, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05062518650511849, 0.05062518650511849, 0.05062518650511849, 0.06634289782873692, 0.06634289782873692, 0.06634289782873692, 0.06606637449791741, 0.06606637449791741, 0.06606637449791741, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0961148324294192, 0.0961148324294192, 0.0961148324294192, 0.089477672561048, 0.089477672561048, 0.089477672561048, 0.09362019803138277, 0.09362019803138277, 0.09362019803138277, 0.41711331488934966, 0.41711331488934966, 0.41711331488934966, 0.4089233617940874, 0.4089233617940874, 0.4089233617940874, 0.4028552758533953, 0.4028552758533953, 0.4028552758533953, 0.11006559259717619, 0.11006559259717619, 0.11006559259717619, 0.11092661166992002, 0.11092661166992002, 0.11092661166992002, 0.10253811126145262, 0.10253811126145262, 0.10253811126145262, 0.2221772262701578, 0.2221772262701578, 0.2221772262701578, 0.20898952790665992, 0.20898952790665992, 0.20898952790665992, 0.20954375820537785, 0.20954375820537785, 0.20954375820537785, 0.22186011132802275, 0.22186011132802275, 0.22186011132802275, 0.24161372339309273, 0.24161372339309273, 0.24161372339309273, 0.26364721507403877, 0.26364721507403877, 0.26364721507403877, 0.17803911754474433, 0.17803911754474433, 0.17803911754474433, 0.18376262563430712, 0.18376262563430712, 0.18376262563430712, 0.1874214922005636, 0.1874214922005636, 0.1874214922005636, 0.1678107821866912, 0.1678107821866912, 0.1678107821866912, 0.18708469956127405, 0.18708469956127405, 0.18708469956127405, 0.17238829867391903, 0.17238829867391903, 0.17238829867391903, 0.19892626640081423, 0.19892626640081423, 0.19892626640081423, 0.2127736594337417, 0.2127736594337417, 0.2127736594337417, 0.1894897024985821, 0.1894897024985821, 0.1894897024985821, 0.23258205677903776, 0.23258205677903776, 0.23258205677903776, 0.2976246111885965, 0.2976246111885965, 0.2976246111885965, 0.1798259770424322, 0.1798259770424322, 0.1798259770424322, 0.19333532989157898, 0.19333532989157898, 0.19333532989157898, 0.266093741803892, 0.266093741803892, 0.266093741803892, 0.20670455658494657, 0.20670455658494657, 0.20670455658494657, 0.18687003950645042, 0.18687003950645042, 0.18687003950645042, 0.19754267191255204, 0.19754267191255204, 0.19754267191255204, 0.18979464874239416, 0.18979464874239416, 0.18979464874239416, 0.06989650996840135, 0.06989650996840135, 0.06989650996840135, 0.06899344003078423, 0.06899344003078423, 0.06899344003078423, 0.0757269105617715, 0.0757269105617715, 0.0757269105617715]}, "mutation_prompt": null}
{"id": "ef856df4-3983-46ba-adaf-46a0d8cd1711", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "09c691fa-e9d3-4ec8-a276-1e069b7b765c", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "341f3aa7-da35-446e-811e-55f37ef54be1", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "31472afe-9780-4ae1-9a68-569ecbc84c97", "solution": "import numpy as np\n\nclass Enhanced_HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # initial crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                # Dynamic crossover probability adjustment\n                self.CR = 0.9 - 0.5 * (evaluations / self.budget)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search with adaptive step size\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations, step_size=max(0.1, 0.01 * (self.budget - evaluations) / self.budget))\n        \n        return best\n    \n    def local_search(self, start, func, evaluations, step_size):\n        current = start\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "Enhanced_HADE_LS", "description": "The updated algorithm incorporates a dynamic crossover probability and adaptive step size for local search to improve convergence efficiency.", "configspace": "", "generation": 77, "fitness": 0.3158492008615139, "feedback": "The algorithm Enhanced_HADE_LS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7813061646351079, 0.7813061646351079, 0.7813061646351079, 0.7883028835073365, 0.7883028835073365, 0.7883028835073365, 0.7820431482900538, 0.7820431482900538, 0.7820431482900538, 0.6081056207222355, 0.6081056207222355, 0.6081056207222355, 0.5827804322015806, 0.5827804322015806, 0.5827804322015806, 0.5938281545832698, 0.5938281545832698, 0.5938281545832698, 0.1384645777970842, 0.1384645777970842, 0.1384645777970842, 0.14747569615829503, 0.14747569615829503, 0.14747569615829503, 0.18552693269786014, 0.18552693269786014, 0.18552693269786014, 0.11533047757027393, 0.11533047757027393, 0.11533047757027393, 0.1275172519784603, 0.1275172519784603, 0.1275172519784603, 0.14212072977233492, 0.14212072977233492, 0.14212072977233492, 0.9272823899358376, 0.9272823899358376, 0.9272823899358376, 0.8856267261663032, 0.8856267261663032, 0.8856267261663032, 0.9022693227464295, 0.9022693227464295, 0.9022693227464295, 0.3862331480612081, 0.3862331480612081, 0.3862331480612081, 0.36896134260956415, 0.36896134260956415, 0.36896134260956415, 0.40234592728544083, 0.40234592728544083, 0.40234592728544083, 0.634913671019253, 0.634913671019253, 0.634913671019253, 0.7437457966349584, 0.7437457966349584, 0.7437457966349584, 0.6857243120566794, 0.6857243120566794, 0.6857243120566794, 0.1531401049697252, 0.1531401049697252, 0.1531401049697252, 0.20740435860108564, 0.20740435860108564, 0.20740435860108564, 0.17992217696163293, 0.17992217696163293, 0.17992217696163293, 0.21136458968857819, 0.21136458968857819, 0.21136458968857819, 0.17340405386367075, 0.17340405386367075, 0.17340405386367075, 0.16927743353693891, 0.16927743353693891, 0.16927743353693891, 0.09812018552036716, 0.09812018552036716, 0.09812018552036716, 0.10536054676690598, 0.10536054676690598, 0.10536054676690598, 0.09875573870211252, 0.09875573870211252, 0.09875573870211252, 0.20277729256414512, 0.20277729256414512, 0.20277729256414512, 0.2438561173040824, 0.2438561173040824, 0.2438561173040824, 0.2407858316153867, 0.2407858316153867, 0.2407858316153867, 0.018965619682437374, 0.018965619682437374, 0.018965619682437374, 0.026371601246003795, 0.026371601246003795, 0.026371601246003795, 0.04081755050074409, 0.04081755050074409, 0.04081755050074409, 0.1708917895031925, 0.1708917895031925, 0.1708917895031925, 0.18251858641403917, 0.18251858641403917, 0.18251858641403917, 0.1651184824364571, 0.1651184824364571, 0.1651184824364571, 0.5410117035533233, 0.5410117035533233, 0.5410117035533233, 0.5081986125160388, 0.5081986125160388, 0.5081986125160388, 0.536968883041522, 0.536968883041522, 0.536968883041522, 0.1396119491515807, 0.1396119491515807, 0.1396119491515807, 0.10675372726353272, 0.10675372726353272, 0.10675372726353272, 0.12332773061425706, 0.12332773061425706, 0.12332773061425706, 0.17988633207523563, 0.17988633207523563, 0.17988633207523563, 0.16862140549253313, 0.16862140549253313, 0.16862140549253313, 0.23373245091919914, 0.23373245091919914, 0.23373245091919914, 0.34468222823607175, 0.34468222823607175, 0.34468222823607175, 0.37496968841154377, 0.37496968841154377, 0.37496968841154377, 0.34918614682002913, 0.34918614682002913, 0.34918614682002913, 0.22973753147313447, 0.22973753147313447, 0.22973753147313447, 0.25880074470487047, 0.25880074470487047, 0.25880074470487047, 0.2548060492440122, 0.2548060492440122, 0.2548060492440122, 0.1913831623095138, 0.1913831623095138, 0.1913831623095138, 0.19366328002465938, 0.19366328002465938, 0.19366328002465938, 0.2002694212169268, 0.2002694212169268, 0.2002694212169268, 0.2514693188917999, 0.2514693188917999, 0.2514693188917999, 0.22459914486161858, 0.22459914486161858, 0.22459914486161858, 0.2084379631801273, 0.2084379631801273, 0.2084379631801273, 0.6444482439326609, 0.6444482439326609, 0.6444482439326609, 0.5833614901174513, 0.5833614901174513, 0.5833614901174513, 0.3211066978333702, 0.3211066978333702, 0.3211066978333702, 0.309071305026103, 0.309071305026103, 0.309071305026103, 0.2038895270484219, 0.2038895270484219, 0.2038895270484219, 0.6346415640008634, 0.6346415640008634, 0.6346415640008634, 0.18061793911775348, 0.18061793911775348, 0.18061793911775348, 0.179898450861658, 0.179898450861658, 0.179898450861658, 0.1857130751969709, 0.1857130751969709, 0.1857130751969709, 0.08891744854799055, 0.08891744854799055, 0.08891744854799055, 0.08800311557517437, 0.08800311557517437, 0.08800311557517437, 0.08259936446198335, 0.08259936446198335, 0.08259936446198335]}, "mutation_prompt": null}
{"id": "3d3c69f4-465f-4a9a-9cad-f815730ada4d", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "ff49f411-f702-4216-bbf0-2f1167be8abc", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "e5d70099-ac80-49a6-b64f-3bdaa10e7cbf", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "5a0d45ff-dee4-4f46-8ad0-241235b8a573", "solution": "import numpy as np\n\nclass EHADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F_base = 0.5  # base scaling factor for mutation\n        self.CR_base = 0.9  # base crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            diversity = np.std(population, axis=0).mean()  # calculate population diversity\n            self.F = self.F_base + 0.1 * np.clip(diversity / 5.0, 0, 1)  # adapt mutation factor\n            self.CR = self.CR_base - 0.1 * np.clip(diversity / 5.0, 0, 1)  # adapt crossover probability\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "EHADE_LS", "description": "Enhanced Hybrid Adaptive Differential Evolution with Local Search (EHADE-LS) introduces dynamic adaptation of mutation factor and crossover probability based on population diversity to improve convergence speed.", "configspace": "", "generation": 81, "fitness": 0.35849839407613787, "feedback": "The algorithm EHADE_LS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.24.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7836018151090116, 0.7836018151090116, 0.7836018151090116, 0.7734401130849977, 0.7734401130849977, 0.7734401130849977, 0.7850899644650172, 0.7850899644650172, 0.7850899644650172, 0.6037682106406084, 0.6037682106406084, 0.6037682106406084, 0.5922728039439349, 0.5922728039439349, 0.5922728039439349, 0.6399530235995101, 0.6399530235995101, 0.6399530235995101, 0.13853348697060142, 0.13853348697060142, 0.13853348697060142, 0.13369206655562516, 0.13369206655562516, 0.13369206655562516, 0.12903833488098249, 0.12903833488098249, 0.12903833488098249, 0.10875496494340964, 0.10875496494340964, 0.10875496494340964, 0.10452219422277231, 0.10452219422277231, 0.10452219422277231, 0.13206976947808757, 0.13206976947808757, 0.13206976947808757, 0.9592644035523362, 0.9592644035523362, 0.9592644035523362, 0.9203236620475701, 0.9203236620475701, 0.9203236620475701, 0.9455299007439831, 0.9455299007439831, 0.9455299007439831, 0.4502782482496017, 0.4502782482496017, 0.4502782482496017, 0.46416007526473835, 0.46416007526473835, 0.46416007526473835, 0.45059803197396064, 0.45059803197396064, 0.45059803197396064, 0.749369416887807, 0.749369416887807, 0.749369416887807, 0.7468181864288637, 0.7468181864288637, 0.7468181864288637, 0.6929507445595844, 0.6929507445595844, 0.6929507445595844, 0.15528008701169804, 0.15528008701169804, 0.15528008701169804, 0.4175918889785456, 0.4175918889785456, 0.4175918889785456, 0.19540980097759297, 0.19540980097759297, 0.19540980097759297, 0.2000761504681322, 0.2000761504681322, 0.2000761504681322, 0.25613362231490755, 0.25613362231490755, 0.25613362231490755, 0.1935139767449494, 0.1935139767449494, 0.1935139767449494, 0.25945358446874467, 0.25945358446874467, 0.25945358446874467, 0.2766077428226348, 0.2766077428226348, 0.2766077428226348, 0.2613408885972973, 0.2613408885972973, 0.2613408885972973, 0.3965837964239862, 0.3965837964239862, 0.3965837964239862, 0.3461411009418537, 0.3461411009418537, 0.3461411009418537, 0.42264343536166404, 0.42264343536166404, 0.42264343536166404, 0.1138482949380194, 0.1138482949380194, 0.1138482949380194, 0.17828575581813422, 0.17828575581813422, 0.17828575581813422, 0.1526664668099207, 0.1526664668099207, 0.1526664668099207, 0.2684037179560641, 0.2684037179560641, 0.2684037179560641, 0.2954887677443936, 0.2954887677443936, 0.2954887677443936, 0.26299935548732856, 0.26299935548732856, 0.26299935548732856, 0.6827021175561669, 0.6827021175561669, 0.6827021175561669, 0.6698101753393608, 0.6698101753393608, 0.6698101753393608, 0.6754154266199448, 0.6754154266199448, 0.6754154266199448, 0.108558563816612, 0.108558563816612, 0.108558563816612, 0.12818064913722593, 0.12818064913722593, 0.12818064913722593, 0.12064488265471085, 0.12064488265471085, 0.12064488265471085, 0.19660416057222418, 0.19660416057222418, 0.19660416057222418, 0.2268269448870891, 0.2268269448870891, 0.2268269448870891, 0.23449714926894316, 0.23449714926894316, 0.23449714926894316, 0.39545280275189365, 0.39545280275189365, 0.39545280275189365, 0.38177708162005053, 0.38177708162005053, 0.38177708162005053, 0.4109945768978137, 0.4109945768978137, 0.4109945768978137, 0.26628516614214437, 0.26628516614214437, 0.26628516614214437, 0.27217353870555194, 0.27217353870555194, 0.27217353870555194, 0.31688710265670383, 0.31688710265670383, 0.31688710265670383, 0.19370811929640763, 0.19370811929640763, 0.19370811929640763, 0.18570475120379226, 0.18570475120379226, 0.18570475120379226, 0.2066037511724087, 0.2066037511724087, 0.2066037511724087, 0.19839780590896672, 0.19839780590896672, 0.19839780590896672, 0.2236380453537874, 0.2236380453537874, 0.2236380453537874, 0.258431394985839, 0.258431394985839, 0.258431394985839, 0.3021213842557753, 0.3021213842557753, 0.3021213842557753, 0.6669668304612753, 0.6669668304612753, 0.6669668304612753, 0.3761967511531771, 0.3761967511531771, 0.3761967511531771, 0.16982755166892782, 0.16982755166892782, 0.16982755166892782, 0.6348588827049175, 0.6348588827049175, 0.6348588827049175, 0.5624800418682132, 0.5624800418682132, 0.5624800418682132, 0.19490453132504004, 0.19490453132504004, 0.19490453132504004, 0.18839555424116006, 0.18839555424116006, 0.18839555424116006, 0.18056322770140265, 0.18056322770140265, 0.18056322770140265, 0.08163040954598944, 0.08163040954598944, 0.08163040954598944, 0.07344088188064635, 0.07344088188064635, 0.07344088188064635, 0.07070626865889373, 0.07070626865889373, 0.07070626865889373]}, "mutation_prompt": null}
{"id": "09b1fded-7a46-434f-a222-be2e5a5d62d5", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "0473cc6c-b8f0-454b-8bb3-605913c41f95", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "67bc3871-5b5e-4637-9764-a57b5bde93fa", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "0d4a1219-06ee-4858-9f11-be76ae9313f7", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "43d26d65-d675-46b5-8e06-5fe151e06464", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "3a911f17-b013-4d23-a85a-9340a6e4f179", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "9d91f3ea-6333-49c4-9056-2b18ba331290", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "fc526cea-9875-4584-b821-d5c9e8c5c029", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "38238cf0-55d7-4bbe-9731-dde4ac5b0e9b", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "b3b059cf-42f9-42ba-bc4b-a61002846052", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "5a5a3041-8366-43f8-a490-26aa7cde34fd", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "bfcf1421-0d89-4390-91ee-13b7675a1679", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "249d0677-3356-457f-a8c8-138395005b63", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "b93cf49a-3a1f-46b5-ad6b-b632d0a90810", "solution": "import numpy as np\n\nclass HADE_LS_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            F = np.random.uniform(0.4, 0.9)  # stochastic control for mutation factor\n            CR = 0.8 + 0.1 * np.sin(evaluations / self.population_size)  # adaptive crossover probability\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(population[a] + F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS_Enhanced", "description": "Enhanced HADE-LS with stochastic control for mutation factor and periodic adaptive crossover probability adjustment.", "configspace": "", "generation": 95, "fitness": 0.29770129966189174, "feedback": "The algorithm HADE_LS_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.22.", "error": "", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7386059365463967, 0.7386059365463967, 0.7386059365463967, 0.718600059315675, 0.718600059315675, 0.718600059315675, 0.7208215628679051, 0.7208215628679051, 0.7208215628679051, 0.4693608606724943, 0.4693608606724943, 0.4693608606724943, 0.528618901260571, 0.528618901260571, 0.528618901260571, 0.49076659030779113, 0.49076659030779113, 0.49076659030779113, 0.1517464495298072, 0.1517464495298072, 0.1517464495298072, 0.13272254996415644, 0.13272254996415644, 0.13272254996415644, 0.12429415698644675, 0.12429415698644675, 0.12429415698644675, 0.11713482002821851, 0.11713482002821851, 0.11713482002821851, 0.11945819223475607, 0.11945819223475607, 0.11945819223475607, 0.1208555779439543, 0.1208555779439543, 0.1208555779439543, 0.9321164158725708, 0.9321164158725708, 0.9321164158725708, 0.9540739907443427, 0.9540739907443427, 0.9540739907443427, 0.9393086778431939, 0.9393086778431939, 0.9393086778431939, 0.3034361360652812, 0.3034361360652812, 0.3034361360652812, 0.31054682643821496, 0.31054682643821496, 0.31054682643821496, 0.34035871385702343, 0.34035871385702343, 0.34035871385702343, 0.4339721345353189, 0.4339721345353189, 0.4339721345353189, 0.6057422567141504, 0.6057422567141504, 0.6057422567141504, 0.559960031091265, 0.559960031091265, 0.559960031091265, 0.2200055966398623, 0.2200055966398623, 0.2200055966398623, 0.20977327257249878, 0.20977327257249878, 0.20977327257249878, 0.2238806094884147, 0.2238806094884147, 0.2238806094884147, 0.16270480142382127, 0.16270480142382127, 0.16270480142382127, 0.2407568618585264, 0.2407568618585264, 0.2407568618585264, 0.18435750809452522, 0.18435750809452522, 0.18435750809452522, 0.09579902677155283, 0.09579902677155283, 0.09579902677155283, 0.10560321557609642, 0.10560321557609642, 0.10560321557609642, 0.08349608408437492, 0.08349608408437492, 0.08349608408437492, 0.22601166476676615, 0.22601166476676615, 0.22601166476676615, 0.1666807379508748, 0.1666807379508748, 0.1666807379508748, 0.23542806316258125, 0.23542806316258125, 0.23542806316258125, 0.03042593115030756, 0.03042593115030756, 0.03042593115030756, 0.05639697145596534, 0.05639697145596534, 0.05639697145596534, 0.03890770175070679, 0.03890770175070679, 0.03890770175070679, 0.1641875610135507, 0.1641875610135507, 0.1641875610135507, 0.16528467988348494, 0.16528467988348494, 0.16528467988348494, 0.15433628374081487, 0.15433628374081487, 0.15433628374081487, 0.5027603631126585, 0.5027603631126585, 0.5027603631126585, 0.5410369585785175, 0.5410369585785175, 0.5410369585785175, 0.5402548716863347, 0.5402548716863347, 0.5402548716863347, 0.12352161350147528, 0.12352161350147528, 0.12352161350147528, 0.13579232833825317, 0.13579232833825317, 0.13579232833825317, 0.12799809913656224, 0.12799809913656224, 0.12799809913656224, 0.1997475242271527, 0.1997475242271527, 0.1997475242271527, 0.16320364383556407, 0.16320364383556407, 0.16320364383556407, 0.1952000762606726, 0.1952000762606726, 0.1952000762606726, 0.3141429962291816, 0.3141429962291816, 0.3141429962291816, 0.3066214845286771, 0.3066214845286771, 0.3066214845286771, 0.328653667709914, 0.328653667709914, 0.328653667709914, 0.23787135668643278, 0.23787135668643278, 0.23787135668643278, 0.24967357288194048, 0.24967357288194048, 0.24967357288194048, 0.24138797373470156, 0.24138797373470156, 0.24138797373470156, 0.21422711722017052, 0.21422711722017052, 0.21422711722017052, 0.18350622339751477, 0.18350622339751477, 0.18350622339751477, 0.22078649866986966, 0.22078649866986966, 0.22078649866986966, 0.21993763479165873, 0.21993763479165873, 0.21993763479165873, 0.19861820948731768, 0.19861820948731768, 0.19861820948731768, 0.21405973447712145, 0.21405973447712145, 0.21405973447712145, 0.5972108250108319, 0.5972108250108319, 0.5972108250108319, 0.20013721553970476, 0.20013721553970476, 0.20013721553970476, 0.6625100384167316, 0.6625100384167316, 0.6625100384167316, 0.4375214830635398, 0.4375214830635398, 0.4375214830635398, 0.3701036423049, 0.3701036423049, 0.3701036423049, 0.31622747665216755, 0.31622747665216755, 0.31622747665216755, 0.1912612176490286, 0.1912612176490286, 0.1912612176490286, 0.18530348828923038, 0.18530348828923038, 0.18530348828923038, 0.19024038801723586, 0.19024038801723586, 0.19024038801723586, 0.08639749571742361, 0.08639749571742361, 0.08639749571742361, 0.07806209253243446, 0.07806209253243446, 0.07806209253243446, 0.08397885176702824, 0.08397885176702824, 0.08397885176702824]}, "mutation_prompt": null}
{"id": "e2aa268d-fe48-4840-b976-7009479e3b9f", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "c4606f7b-ea73-4d8e-9741-87f598619b9e", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "26ca4af6-1d79-4c09-9435-a02e0dfac206", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
{"id": "ccfa8e36-0751-4531-829a-e26eab8b7a97", "solution": "import numpy as np\n\nclass HADE_LS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # scaling factor for mutation\n        self.CR = 0.9  # crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n                \n                if evaluations >= self.budget:\n                    break\n            \n            # Local search periodically\n            if evaluations < self.budget and evaluations % (self.population_size * 2) == 0:\n                best = self.local_search(best, func, evaluations)\n        \n        return best\n    \n    def local_search(self, start, func, evaluations):\n        current = start\n        step_size = 0.1\n        for _ in range(10):  # limit local search iterations\n            neighbors = current + np.random.uniform(-step_size, step_size, self.dim)\n            neighbors = np.clip(neighbors, self.lower_bound, self.upper_bound)\n            f_neighbors = func(neighbors)\n            evaluations += 1\n            if f_neighbors < func(current):\n                current = neighbors\n            if evaluations >= self.budget:\n                break\n        return current", "name": "HADE_LS", "description": "Hybrid Adaptive Differential Evolution with Local Search (HADE-LS) combines differential evolution with adaptive mutation strategies and periodic local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "484ba336-44c7-4878-b69f-2de6adabbf1a", "metadata": {"aucs": [0.7791965496472714, 0.7791965496472714, 0.7791965496472714, 0.7956398023498177, 0.7956398023498177, 0.7956398023498177, 0.796863545450829, 0.796863545450829, 0.796863545450829, 0.6459427639855551, 0.6459427639855551, 0.6459427639855551, 0.5944982887933932, 0.5944982887933932, 0.5944982887933932, 0.6074623017277241, 0.6074623017277241, 0.6074623017277241, 0.14575471003162743, 0.14575471003162743, 0.14575471003162743, 0.1566071350435253, 0.1566071350435253, 0.1566071350435253, 0.12831489909501992, 0.12831489909501992, 0.12831489909501992, 0.10754605146399698, 0.10754605146399698, 0.10754605146399698, 0.13160326079020268, 0.13160326079020268, 0.13160326079020268, 0.11751715411467978, 0.11751715411467978, 0.11751715411467978, 0.9345123756055815, 0.9345123756055815, 0.9345123756055815, 0.9461349585564478, 0.9461349585564478, 0.9461349585564478, 0.8855008927185846, 0.8855008927185846, 0.8855008927185846, 0.41219298004544846, 0.41219298004544846, 0.41219298004544846, 0.4365087441358829, 0.4365087441358829, 0.4365087441358829, 0.458942278969079, 0.458942278969079, 0.458942278969079, 0.7296919349884711, 0.7296919349884711, 0.7296919349884711, 0.7572720318308518, 0.7572720318308518, 0.7572720318308518, 0.7640483841402468, 0.7640483841402468, 0.7640483841402468, 0.21463832666205684, 0.21463832666205684, 0.21463832666205684, 0.2808381367917663, 0.2808381367917663, 0.2808381367917663, 0.2204759540272082, 0.2204759540272082, 0.2204759540272082, 0.20518025210039692, 0.20518025210039692, 0.20518025210039692, 0.18968791672727492, 0.18968791672727492, 0.18968791672727492, 0.3113187894672397, 0.3113187894672397, 0.3113187894672397, 0.3279823057955057, 0.3279823057955057, 0.3279823057955057, 0.3378655827156667, 0.3378655827156667, 0.3378655827156667, 0.328953014536001, 0.328953014536001, 0.328953014536001, 0.4418610701258018, 0.4418610701258018, 0.4418610701258018, 0.43976991166988844, 0.43976991166988844, 0.43976991166988844, 0.47749839810686856, 0.47749839810686856, 0.47749839810686856, 0.16864142609642185, 0.16864142609642185, 0.16864142609642185, 0.20973105463253938, 0.20973105463253938, 0.20973105463253938, 0.19374067997180322, 0.19374067997180322, 0.19374067997180322, 0.29646620180811045, 0.29646620180811045, 0.29646620180811045, 0.2992097027504347, 0.2992097027504347, 0.2992097027504347, 0.2801695337362493, 0.2801695337362493, 0.2801695337362493, 0.6872431523757331, 0.6872431523757331, 0.6872431523757331, 0.6851860771804015, 0.6851860771804015, 0.6851860771804015, 0.6674990009849113, 0.6674990009849113, 0.6674990009849113, 0.13642598783156923, 0.13642598783156923, 0.13642598783156923, 0.11414946922195246, 0.11414946922195246, 0.11414946922195246, 0.1252030851322723, 0.1252030851322723, 0.1252030851322723, 0.20589535651104163, 0.20589535651104163, 0.20589535651104163, 0.17497029629638017, 0.17497029629638017, 0.17497029629638017, 0.20465585976333267, 0.20465585976333267, 0.20465585976333267, 0.3826102578479196, 0.3826102578479196, 0.3826102578479196, 0.4126494955767622, 0.4126494955767622, 0.4126494955767622, 0.3896493169029921, 0.3896493169029921, 0.3896493169029921, 0.2753097007196237, 0.2753097007196237, 0.2753097007196237, 0.2843459191035542, 0.2843459191035542, 0.2843459191035542, 0.3107273506870286, 0.3107273506870286, 0.3107273506870286, 0.19087365617514374, 0.19087365617514374, 0.19087365617514374, 0.19381806939848145, 0.19381806939848145, 0.19381806939848145, 0.2033207928270362, 0.2033207928270362, 0.2033207928270362, 0.21932708989136673, 0.21932708989136673, 0.21932708989136673, 0.20503190707289753, 0.20503190707289753, 0.20503190707289753, 0.2633817731979914, 0.2633817731979914, 0.2633817731979914, 0.7228062324345852, 0.7228062324345852, 0.7228062324345852, 0.7798463613944089, 0.7798463613944089, 0.7798463613944089, 0.7241557789664856, 0.7241557789664856, 0.7241557789664856, 0.22106069123621153, 0.22106069123621153, 0.22106069123621153, 0.20318838694969732, 0.20318838694969732, 0.20318838694969732, 0.7767875388384818, 0.7767875388384818, 0.7767875388384818, 0.19427061551969182, 0.19427061551969182, 0.19427061551969182, 0.18525666488551495, 0.18525666488551495, 0.18525666488551495, 0.19743114519807714, 0.19743114519807714, 0.19743114519807714, 0.08663943500682503, 0.08663943500682503, 0.08663943500682503, 0.09020520757575068, 0.09020520757575068, 0.09020520757575068, 0.07995796097701091, 0.07995796097701091, 0.07995796097701091]}, "mutation_prompt": null}
