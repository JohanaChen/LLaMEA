{"id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.12833282674289628, "feedback": "The algorithm AdaptiveGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": null, "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "eaacbb0e-417c-4123-9b2a-28e7fbdf8654", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "2c3e40db-ed07-4952-bfe4-ac5c196e8a3d", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "7de40f9e-e28a-4ac6-a60e-e9b74eb3667b", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "3ba4a8c9-a57e-4ad4-99ed-462556ae8466", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "f72a9608-baff-4c1b-a493-fca18b2b6168", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "1f6516e9-3bbb-48c9-99be-70e70e91abee", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        sorted_indices = np.argsort(fitness) \n        return population[sorted_indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < 0.5\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = 0.01 + 0.49 * (diversity - 0.1)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "A streamlined adaptive genetic algorithm with optimized selection and diversity-driven parameter tuning for enhanced performance.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('scale < 0').", "error": "ValueError('scale < 0')", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {}, "mutation_prompt": null}
{"id": "72758d70-5268-486f-be71-19ccd2a1f60c", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "7c8f77e4-561f-422d-a5b3-d4c376d6412e", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "c24d8b3f-d1f1-4e97-91d5-fed80f5daa7e", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "c4f461fa-43e2-4390-8daf-dda6877e8c11", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "c008bddc-cdfb-40bf-836b-cf13c59d8985", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "01dc34fa-29af-4720-b423-d331ede5b9ed", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "e021bcf9-879b-41fb-ac56-eed524e166c1", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "585b51ed-6f91-495c-96b1-d904a514a796", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "f2e9befb-b6bb-48cf-9c61-df47d902a807", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "8897bcf5-be78-4c37-9e27-2569ec089b82", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "b5de11d9-7bd6-4db5-be6d-81b9ce827b4a", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "552d6bb4-b181-4088-9ec1-ef5731cd73ec", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "1724f548-5f64-4872-aab4-d707c980011b", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "e1caa77d-45d1-43c8-84da-99112dc56390", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)\n        return population[indices[:self.population_size // 2]]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        while len(new_population) < self.population_size and self.current_evals < self.budget:\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = min(0.5, max(0.01, 1 / (10 * self.dim) * diversity))\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An adaptive multi-population genetic algorithm that dynamically adjusts mutation rates and population sizes based on the diversity of solutions to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.5513175836194979, 0.5671226540475549, 0.6558348725970677, 0.21832087097231934, 0.16255764401899764, 0.373151647655361, 0.37905587318495504, 0.3324164566462381, 0.22786516001225676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013804022372679858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06969375461066352, 0.08581921074586374, 0.07713799227229301, 0.07877153870022335, 0.07750924855056596, 0.07277646909517554, 0.08126208835972026, 0.06546369699184784, 0.06940234663396205, 0.012902802491607912, 0.0032611451054254115, 0.032062212123567746, 0.022837494408389336, 0.0027656809806947402, 0.017110819734594274, 0.014763392921912755, 0.0416249197413221, 0.00857786305181285, 0.050715909121374136, 0.04615723698705021, 0.04723739974219954, 0.056629892529795334, 0.046875487207913236, 0.04557114535320961, 0.06440384009324007, 0.048986754550083944, 0.04508098130984928, 0.0840864441945165, 0.078761407945236, 0.0703591188559829, 0.0732544338176756, 0.05029067177694524, 0.07404429386644806, 0.05537531798711148, 0.07553348305718388, 0.05919370482730124, 0.17260900856154715, 0.17242018413902493, 0.14693646050593345, 0.09298652987401934, 0.07285119553694963, 0.04214259088711092, 0.07924610401754695, 0.11621677695280053, 0.1163577036034611, 0.15975857013034744, 0.02727835008068702, 0.05675635180590999, 0.0036559417267492123, 0.3179537284989774, 0.0005668521869476306, 0.15887052102234078, 0.3465538388374726, 0.10711538230495787, 0.17479197753232822, 0.17384108526333908, 0.13825355126847916, 0.14734249872902094, 0.1732594899613057, 0.14117179017381254, 0.18959237125699002, 0.159642977118722, 0.15554263222441844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00535779310230633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002308598423885755, 0.12449390502242619, 0.08764444410364125, 0.09577768600317271, 0.05145897296067503, 0.04444331075471475, 0.03681491053833075, 0.10388607955198681, 0.10520773105519088, 0.08646277145526238, 0.0054498770169583155, 0.08954214236335978, 0.01619207047797644, 0.03133888768278725, 0.044895283562584876, 0.05263278934059712, 0.04622241669700766, 0.0022117826039782518, 0.04477031385863206, 0.02899820992950153, 0.023584030427313385, 0.027365006538557668, 9.999999999998899e-05, 0.011168927573984577, 0.062007670124888836, 0.0013907130245275345, 0.008784843409303522, 0.023756395431937194, 0.4336900557018184, 0.4291469690082229, 0.40132052837141874, 0.30093146677913385, 0.17382137443892187, 0.21971229262620295, 0.36811311927816437, 0.37063355176690493, 0.434817504294537, 0.0036838384715345285, 0.011959950677335685, 0.03782945467688292, 0.08119109262374624, 0.04815753191545624, 0.0872587604758468, 0.10398514635815403, 0.07621791679694179, 0.06891953268072881, 0.146588624639024, 0.11353598398169884, 0.11842175776965747, 0.13358168631844525, 0.14497780136358562, 0.10798713552628325, 0.11640457704792007, 0.14161845079290247, 0.09618637446991984, 0.1708825322812807, 0.154087684112999, 0.16707786178500117, 0.1994773477228946, 0.17720951905906568, 0.1941537674550976, 0.14168259834966979, 0.17377774300845283, 0.18096945621888738, 0.08794924062686571, 0.08394424997356276, 0.12196939326609135, 0.12786146150057776, 0.11466174080983349, 0.17065856395024603, 0.08590097181684231, 0.10848092692415179, 0.1358880269510564, 0.24585192605553463, 0.25884027241889496, 0.21834791189725788, 0.29461988483295587, 0.24966855536177646, 0.2753502729103564, 0.22515804857535882, 0.2551713952882738, 0.2708381506052375, 0.16733037730460942, 0.16432545694101786, 0.1646576031733633, 0.16408209183716538, 0.15542012093206647, 0.1619101304839341, 0.15941436310510326, 0.16250589949832206, 0.15713235544401472, 0.15466071872541054, 0.18409022735849145, 0.15129808031088854, 0.12676012707794748, 0.1207914665021157, 0.12198980784812907, 0.16121963856974997, 0.16576659426464357, 0.13152539511886552, 0.4317270880702726, 0.4900873076252257, 0.3305615104992716, 0.1793339903095904, 0.07948477609135574, 0.1068014109115818, 0.12958203649792344, 0.20675079919877148, 0.23362110170991368, 0.2194696124457376, 0.17372908871389414, 0.19045360620149, 0.23222643964674672, 0.2166739256836313, 0.2561111074033511, 0.2145443696369681, 0.22588738849181123, 0.23040615310939982, 0.07896127613985604, 0.11110724655988524, 0.08380518040174789, 0.09786422008331919, 0.10815727401155162, 0.089619284031065, 0.09088343773028684, 0.09211841977300173, 0.10114243499303033]}, "mutation_prompt": null}
{"id": "27695618-e509-460e-ac12-e280dba92721", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 21, "fitness": 0.14802750131560247, "feedback": "The algorithm AdaptiveGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.13.", "error": "", "parent_id": "248c67fb-570c-4a2b-ab2a-9636b70da6b1", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "c8a69716-339b-4ef9-8e7d-5dd1adb079f0", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "ea0f707f-8245-421c-b99c-cff60f02d23d", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "bfd6ed98-38b5-456f-a34d-54b96d53ff91", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "231928e8-0bb4-4c9a-8993-85e3a600bbb2", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "47d04e6d-ba63-4548-8c4c-20487ab71738", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "64285221-7653-46c8-ab5b-aeeb765f1402", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "1258b4f9-848e-46aa-bdc6-9560621fe801", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "aeaf944b-e78b-4e8e-a808-4a5e7e530660", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "3f38f28c-158f-4816-97dd-445b15488733", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "aa513c2b-8eca-4e0b-890e-fd375cf046e7", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "98c75b32-5253-4346-96ed-c7c3a14a92f3", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "5f2f2f76-b0c0-490d-8d80-5df3a214f680", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "bf5859a0-d248-405f-a484-3e23cf6f2d53", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "7168cfa4-d4b4-46ef-86f3-fd4b738b36e1", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "d7d44d90-708e-4971-a12f-e467d272e081", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "6ec6e752-7e7e-49eb-9f2e-9356159ba3a9", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "6590934f-898b-4be9-9ffd-b8fa04d7079a", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "bd10dd79-87ff-407b-b64b-ccc163b0a3ac", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "127c1b8d-2a8f-431f-80c0-a334a48a0df2", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indices = np.argsort(fitness)[:self.population_size // 3]  # Select top third\n        return population[indices]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return (1 - alpha) * parent1 + alpha * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.uniform(-1, 1, self.dim) * self.mutation_rate\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):  # Reduce loop count for efficiency\n            indices = np.random.choice(len(parents), 2, replace=False)\n            parent1, parent2 = parents[indices]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 1 / (5 * self.dim) * diversity)\n        self.population_size = int(max(10, min(100, self.population_size * (1 + 0.05 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithm", "description": "An improved adaptive multi-population genetic algorithm utilizing a simplified selection and mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.6466354890681341, 0.6618865728286234, 0.6438779579029563, 0.42002244720902915, 0.533104149251167, 0.49101629978800043, 0.5409188892073349, 0.5798438594371155, 0.5419190470431262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02770102795155238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09608633740116579, 0.1300572737959892, 0.09032093588121426, 0.09925448374705415, 0.07719043549593751, 0.08004351907817986, 0.11226106756642695, 0.14677486548135765, 0.08234325991628122, 0.04959921085935182, 0.03697507226884189, 0.029808744446208624, 0.025600676450230453, 0.02312280383000942, 0.02070710761773842, 0.014763392921912755, 0.055752787195011644, 0.01659799940168194, 0.07388758713292354, 0.06524981871023394, 0.05948085281556903, 0.062134741357128265, 0.07465721023271676, 0.06724368746979503, 0.0699958529221949, 0.06595174446866581, 0.06600439243281309, 0.13623997930433362, 0.07652313771520036, 0.10659875009692876, 0.10395817026668741, 0.11464427540888222, 0.07129049853753788, 0.06412801183514116, 0.08391326375198949, 0.17116158991540487, 0.172756825049723, 0.21128458815961182, 0.13357351158741637, 0.15324827523878015, 0.1720625743905848, 0.06357843864971913, 0.09073902111801613, 0.10734134553884978, 0.188180359132052, 0.13020013839188704, 0.1252383081668409, 0.09636056035841101, 0.14143412138802436, 0.2666982028628374, 0.24240345974873168, 0.19169046844789017, 0.19388773597905629, 0.2266236667522027, 0.339390944098909, 0.35589856049754076, 0.10829542430153938, 0.1240284859232943, 0.1253781941883939, 0.1728616452914844, 0.1513440229314259, 0.16506633013202465, 0.1883929220557392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04844139528589675, 0.003069248288770865, 9.999999999998899e-05, 0.0029416532079455937, 9.999999999998899e-05, 0.0007941251282185258, 0.06074154304984769, 0.06236078549036905, 0.08924256854777413, 0.03166280504217556, 0.03395264569541201, 0.041244750690676346, 0.08325418211811342, 0.06237480337499923, 0.06755439465203839, 0.07308425829681309, 0.13060020260882232, 0.06425582027963106, 0.0533669533527702, 0.10407613580248087, 0.0742484460784566, 0.07498268802967178, 0.06381017534271194, 0.052240673702091955, 0.07011345081043752, 0.10641089984517171, 0.0644397354941717, 0.04732329050219963, 0.07676417222325582, 0.16819133256992025, 0.047909291748131855, 0.1426628003031829, 0.07161574162995388, 0.4320778078684897, 0.47463837462017133, 0.417973305670595, 0.2894909214835216, 0.31851139943966444, 0.3716448731737533, 0.44852961222331056, 0.41986635205216516, 0.43228279243177226, 0.00691043996121099, 0.05249703553855145, 0.027009302776256128, 0.11601968356758885, 0.08725048507185207, 0.06276238949525892, 0.08217457404360451, 0.1336295597867605, 0.13082259560640774, 0.09459084890649605, 0.1321984884550953, 0.14534214365548537, 0.12059739852418261, 0.13182582966572176, 0.10798713552628325, 0.14317717281937514, 0.11573211749431433, 0.07726393575557644, 0.1641161947845292, 0.17797073596645496, 0.23122780165491497, 0.2047023281319018, 0.1891556021725206, 0.211965899032731, 0.13058416461167766, 0.17377774300845283, 0.16046309074070408, 0.10524392630792279, 0.09668447128077329, 0.13532513251365108, 0.1517617313801456, 0.13003081374450698, 0.16777109898434028, 0.09045961495907018, 0.15478250932625637, 0.11275433769217547, 0.25617422769682785, 0.2940270754211439, 0.19272970539762457, 0.2791283524986107, 0.25996741552376823, 0.252249072063638, 0.2722074194513492, 0.23793584046778926, 0.24232379521626546, 0.16632776396284044, 0.1699188819559353, 0.15250746055683162, 0.19057873073513532, 0.16595569848391845, 0.1594352136252435, 0.15699391495271753, 0.16734373807236846, 0.17350937976047898, 0.16570178740155883, 0.18267141616181692, 0.16191257285447214, 0.11879084517395333, 0.1207914665021157, 0.12434616688493516, 0.13986733195389478, 0.10998243030268151, 0.08917413794740092, 0.11040265245322212, 0.16712106746752375, 0.3636505826678643, 0.13777416104549955, 0.1394728980628246, 0.0978773350424792, 0.10084206423237552, 0.2929594157464688, 0.08939331310609544, 0.204852782122384, 0.218869741938712, 0.23401483576453186, 0.21221972036201653, 0.20591936775724962, 0.22560629910270513, 0.2301760581924578, 0.22616230262216008, 0.22769745198679125, 0.07958195993554817, 0.08761550015814412, 0.07960997062339648, 0.10179996165907179, 0.0991720527123583, 0.09535992662344783, 0.06642520188551548, 0.0845202607599933, 0.11046941021890722]}, "mutation_prompt": null}
{"id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithmEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        return population[np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2)]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithmEnhanced", "description": "A streamlined adaptive genetic algorithm with revised selection and mutation strategies for enhanced diversity management.", "configspace": "", "generation": 41, "fitness": 0.16306278191985418, "feedback": "The algorithm AdaptiveGeneticAlgorithmEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.13.", "error": "", "parent_id": "27695618-e509-460e-ac12-e280dba92721", "metadata": {"aucs": [0.5434431149991508, 0.5539361961978395, 0.5445345164007165, 0.4881859840816686, 0.4715303732835835, 0.5715570644379415, 0.5123814023740748, 0.48904100786986004, 0.48126833664518376, 0.0001672799171099637, 0.016431712423112144, 9.999999999998899e-05, 9.999999999998899e-05, 0.042765279551932656, 9.999999999998899e-05, 9.999999999998899e-05, 0.04389567957358398, 9.999999999998899e-05, 0.09383707246950068, 0.08429924359285446, 0.0808911553370042, 0.09603800333873314, 0.07035508503716537, 0.11863242539214791, 0.07265626007997139, 0.0556391639262358, 0.09426508420653423, 0.03088502103152846, 0.027800339609724833, 0.036260195195846556, 0.055328249746288916, 0.006374857060383543, 0.026560025201733506, 0.04703277539525441, 0.014776729617261064, 0.019007843814258685, 0.19029331966870844, 0.1429138252029204, 0.19086074153214605, 0.11312608359973075, 0.19926317821883677, 0.11909195454934618, 0.17425301070930166, 0.1252659497394214, 0.14297823939232834, 0.3033693312903897, 0.28134813212736076, 0.25651280335592264, 0.30540067104311375, 0.26554654506356, 0.29048881386155634, 0.3002899659246525, 0.24386730766581444, 0.31301922452088904, 0.17296585684177457, 0.16533167985943054, 0.14155063573327176, 0.13961936671680164, 0.17289744812991215, 0.10363415066354575, 0.1264023275932472, 0.15230733558592624, 0.15814894147769432, 0.15440697564221173, 0.116194442201629, 0.1277113215852147, 0.15841619626303616, 0.1483348679874249, 0.13212662050528146, 0.20426766469802804, 0.3130749190965343, 0.17137466347149855, 0.26482263314704346, 0.1492081630163684, 0.1628013065620647, 0.3072534274756621, 0.17842800464115804, 0.12903304872838506, 0.17953147503842448, 0.13630601515639773, 0.1748912060265031, 0.0016320612907880783, 0.005156572127874126, 0.0035038247658274457, 0.009013832652537301, 0.08168425973964044, 0.025845278440932984, 9.999999999998899e-05, 0.050102332591847154, 0.0646847239573175, 0.09823312895613723, 0.060503021293927484, 0.08000440437280154, 0.04398221650142131, 0.02857316302527202, 0.025407431055362806, 0.13034964449372566, 0.06451582270171252, 0.08564502482262082, 0.003019193415467636, 0.012575860878585088, 0.004698343763922308, 0.008765438280238569, 0.03825528622286145, 0.0019136361372582567, 0.004090717230979646, 0.0382515434178935, 9.999999999998899e-05, 0.13562757179752893, 0.06055760188436854, 0.15258049040208987, 0.10240074490510886, 0.09818368281811851, 0.13158509484718017, 0.10902542351827049, 0.09279316559059447, 0.10505849260827815, 0.45848654264265454, 0.4737017238026273, 0.4550358826603952, 0.4270540936076803, 0.4289334265225181, 0.4176673844647075, 0.49207896801944073, 0.39330272917150877, 0.45987538877326983, 0.026627014421755857, 0.01971447178877883, 0.04996966378903167, 0.12364262649911906, 0.07072975062149, 0.12749526169496295, 0.03700004568697257, 0.07201935017423533, 0.09259647407104643, 0.13541049004381933, 0.10390912150972542, 0.13092366309601344, 0.09855305120349966, 0.1375594015236007, 0.17323852450848076, 0.131396481764133, 0.18427806030716776, 0.22882035202666284, 0.16050819645668835, 0.14191339046471751, 0.23872562999303482, 0.21420479104886248, 0.17629945365919286, 0.2401282291025264, 0.14702360111324164, 0.20758737078364708, 0.25031446388480494, 0.1278397844860839, 0.16840546761572017, 0.11042357574156392, 0.27017904298088335, 0.07789578395005681, 0.11085554248711849, 0.1362340591825092, 0.10695261449817028, 0.23466216829150688, 0.2319578685333218, 0.19806270292376071, 0.20844473352674198, 0.21705618360683065, 0.22239370931990665, 0.24015297359237853, 0.2894396150619707, 0.2138827950927894, 0.2198131062127886, 0.17693144271123873, 0.1515470469831458, 0.174750704542056, 0.1562647459094143, 0.1692834524967748, 0.18249977725016175, 0.16969767451180628, 0.15706825170631933, 0.1625261167706511, 0.7671975525079154, 0.18143699967903704, 0.18285440116652996, 0.1682945493827237, 0.1207914665021157, 0.11448810678839272, 0.1070176662487543, 0.10899150130310808, 0.1596575689593348, 0.5589749829228507, 0.10267165755511809, 0.2156881728211032, 0.18894432844777598, 0.14410644545311113, 0.1462919902110138, 0.37740011885763214, 0.1412406562734011, 0.09354701096064488, 0.18370188414416333, 0.18215008656846943, 0.18450794640283508, 0.17920246837652065, 0.19238495457864202, 0.19384822867151863, 0.19729004163409558, 0.184725785253271, 0.19501652083407006, 0.1076476112598157, 0.10477757831776746, 0.09701274529705628, 0.10145734463367351, 0.06184947373942273, 0.09657518919494956, 0.06676505780749753, 0.061416368136544386, 0.0920641232827969]}, "mutation_prompt": null}
{"id": "bf0410d7-f618-4387-ab49-4d25fbab9145", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithmEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        return population[np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2)]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithmEnhanced", "description": "A streamlined adaptive genetic algorithm with revised selection and mutation strategies for enhanced diversity management.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "metadata": {"aucs": [0.5434431149991508, 0.5539361961978395, 0.5445345164007165, 0.4881859840816686, 0.4715303732835835, 0.5715570644379415, 0.5123814023740748, 0.48904100786986004, 0.48126833664518376, 0.0001672799171099637, 0.016431712423112144, 9.999999999998899e-05, 9.999999999998899e-05, 0.042765279551932656, 9.999999999998899e-05, 9.999999999998899e-05, 0.04389567957358398, 9.999999999998899e-05, 0.09383707246950068, 0.08429924359285446, 0.0808911553370042, 0.09603800333873314, 0.07035508503716537, 0.11863242539214791, 0.07265626007997139, 0.0556391639262358, 0.09426508420653423, 0.03088502103152846, 0.027800339609724833, 0.036260195195846556, 0.055328249746288916, 0.006374857060383543, 0.026560025201733506, 0.04703277539525441, 0.014776729617261064, 0.019007843814258685, 0.19029331966870844, 0.1429138252029204, 0.19086074153214605, 0.11312608359973075, 0.19926317821883677, 0.11909195454934618, 0.17425301070930166, 0.1252659497394214, 0.14297823939232834, 0.3033693312903897, 0.28134813212736076, 0.25651280335592264, 0.30540067104311375, 0.26554654506356, 0.29048881386155634, 0.3002899659246525, 0.24386730766581444, 0.31301922452088904, 0.17296585684177457, 0.16533167985943054, 0.14155063573327176, 0.13961936671680164, 0.17289744812991215, 0.10363415066354575, 0.1264023275932472, 0.15230733558592624, 0.15814894147769432, 0.15440697564221173, 0.116194442201629, 0.1277113215852147, 0.15841619626303616, 0.1483348679874249, 0.13212662050528146, 0.20426766469802804, 0.3130749190965343, 0.17137466347149855, 0.26482263314704346, 0.1492081630163684, 0.1628013065620647, 0.3072534274756621, 0.17842800464115804, 0.12903304872838506, 0.17953147503842448, 0.13630601515639773, 0.1748912060265031, 0.0016320612907880783, 0.005156572127874126, 0.0035038247658274457, 0.009013832652537301, 0.08168425973964044, 0.025845278440932984, 9.999999999998899e-05, 0.050102332591847154, 0.0646847239573175, 0.09823312895613723, 0.060503021293927484, 0.08000440437280154, 0.04398221650142131, 0.02857316302527202, 0.025407431055362806, 0.13034964449372566, 0.06451582270171252, 0.08564502482262082, 0.003019193415467636, 0.012575860878585088, 0.004698343763922308, 0.008765438280238569, 0.03825528622286145, 0.0019136361372582567, 0.004090717230979646, 0.0382515434178935, 9.999999999998899e-05, 0.13562757179752893, 0.06055760188436854, 0.15258049040208987, 0.10240074490510886, 0.09818368281811851, 0.13158509484718017, 0.10902542351827049, 0.09279316559059447, 0.10505849260827815, 0.45848654264265454, 0.4737017238026273, 0.4550358826603952, 0.4270540936076803, 0.4289334265225181, 0.4176673844647075, 0.49207896801944073, 0.39330272917150877, 0.45987538877326983, 0.026627014421755857, 0.01971447178877883, 0.04996966378903167, 0.12364262649911906, 0.07072975062149, 0.12749526169496295, 0.03700004568697257, 0.07201935017423533, 0.09259647407104643, 0.13541049004381933, 0.10390912150972542, 0.13092366309601344, 0.09855305120349966, 0.1375594015236007, 0.17323852450848076, 0.131396481764133, 0.18427806030716776, 0.22882035202666284, 0.16050819645668835, 0.14191339046471751, 0.23872562999303482, 0.21420479104886248, 0.17629945365919286, 0.2401282291025264, 0.14702360111324164, 0.20758737078364708, 0.25031446388480494, 0.1278397844860839, 0.16840546761572017, 0.11042357574156392, 0.27017904298088335, 0.07789578395005681, 0.11085554248711849, 0.1362340591825092, 0.10695261449817028, 0.23466216829150688, 0.2319578685333218, 0.19806270292376071, 0.20844473352674198, 0.21705618360683065, 0.22239370931990665, 0.24015297359237853, 0.2894396150619707, 0.2138827950927894, 0.2198131062127886, 0.17693144271123873, 0.1515470469831458, 0.174750704542056, 0.1562647459094143, 0.1692834524967748, 0.18249977725016175, 0.16969767451180628, 0.15706825170631933, 0.1625261167706511, 0.7671975525079154, 0.18143699967903704, 0.18285440116652996, 0.1682945493827237, 0.1207914665021157, 0.11448810678839272, 0.1070176662487543, 0.10899150130310808, 0.1596575689593348, 0.5589749829228507, 0.10267165755511809, 0.2156881728211032, 0.18894432844777598, 0.14410644545311113, 0.1462919902110138, 0.37740011885763214, 0.1412406562734011, 0.09354701096064488, 0.18370188414416333, 0.18215008656846943, 0.18450794640283508, 0.17920246837652065, 0.19238495457864202, 0.19384822867151863, 0.19729004163409558, 0.184725785253271, 0.19501652083407006, 0.1076476112598157, 0.10477757831776746, 0.09701274529705628, 0.10145734463367351, 0.06184947373942273, 0.09657518919494956, 0.06676505780749753, 0.061416368136544386, 0.0920641232827969]}, "mutation_prompt": null}
{"id": "efe8a4e4-d2a1-4a67-b49e-dc158f2631f1", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        idx = np.argsort(fitness)\n        return population[idx[:self.population_size // 3]]  # Top third selection\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.uniform(0.3, 0.7, self.dim)\n        return alpha * parent1 + (1 - alpha) * parent2\n\n    def mutate(self, individual):\n        if np.random.rand() < 0.1:\n            mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n            individual += mutation_vector\n        return np.clip(individual, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithmRefined", "description": "A refined adaptive genetic algorithm with enhanced crossover and mutation strategies for improved exploration and exploitation balance.", "configspace": "", "generation": 43, "fitness": 0.1155619152579425, "feedback": "The algorithm AdaptiveGeneticAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.10.", "error": "", "parent_id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "metadata": {"aucs": [0.4654693271120224, 0.4751695752011502, 0.5966038403715042, 0.272342608906633, 0.2212465539199613, 0.36820746501804347, 0.34540172207375996, 0.3802724214048393, 0.276734763243754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05846832454526685, 0.09251764155377928, 0.06493982481236671, 0.08093526099270132, 0.05190001793674548, 0.11181414727479244, 0.08425593671757559, 0.09082974172333347, 0.07947292500581171, 0.0076409204670857545, 0.005539128811570704, 0.05203119073918938, 0.03533176435623442, 0.006161395277372916, 0.015170579002099283, 0.014763392921912755, 0.04098476494630199, 0.009992398372726696, 0.05898886742531051, 0.05380091216799432, 0.05236229974964535, 0.061393499517522265, 0.04880048541211002, 0.05316132127797957, 0.06924803274601332, 0.05107428694130178, 0.06512824897650715, 0.11574182353310791, 0.049366875586987824, 0.07747147930726661, 0.06999877606944427, 0.04649859259947242, 0.07971208052821599, 0.06091996185024362, 0.06142706357645422, 0.0685820093172933, 0.16315666342506951, 0.17261567280358936, 0.1467917290086327, 0.0667108215001172, 0.1096031321729184, 0.05663601095252346, 0.0891841313309133, 0.11774441138481484, 0.12833251506628363, 0.10189117445137219, 0.1026742004703477, 0.0011273570338893313, 9.999999999998899e-05, 0.1930074745032202, 0.03596658919567031, 0.15660993540124946, 0.18864765798540162, 0.09276829406215426, 0.12396269920839109, 0.196615732885827, 0.08180174075477609, 0.09863534750771619, 0.1425393165468054, 0.11076937683554111, 0.1545945692162286, 0.13114692019224605, 0.12886121554041474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001882062355833658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0843387645634992, 0.07600283768446714, 0.1081597459613397, 0.03677229107055824, 0.034107356296767866, 0.033595857253004735, 0.10927866255788143, 0.08699415736650096, 0.07970593552659089, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006058024051650568, 0.01220939570405244, 9.999999999998899e-05, 0.0036142405201818883, 9.999999999998899e-05, 9.999999999998899e-05, 0.028261894958471756, 0.0339363659848122, 0.01913424551212306, 0.049077115302422314, 0.001072169383546484, 0.019886200687514455, 0.09348488391300613, 0.01604521060142927, 0.02587102744164349, 0.04335442399663059, 0.4292641290777357, 0.41398964824960116, 0.36704023802683683, 0.22234274986328495, 0.17954463206990456, 0.2686810900933102, 0.3327104381523798, 0.305624227234612, 0.3965867126170325, 0.013665186929026851, 0.014089068243366976, 0.029353495760995663, 0.09222332698588998, 0.08828783889860947, 0.10732538975436234, 0.06949196493038945, 0.08024681728216077, 0.08756306856693385, 0.11105349532382902, 0.11971406512135285, 0.14353347164999208, 0.1012407544780981, 0.10870506229698218, 0.10798713552628325, 0.1143182661696821, 0.08099219012337167, 0.09610319731363137, 0.1491606500029482, 0.15908009916580668, 0.18354576981706727, 0.1872066160074427, 0.16309955401751686, 0.1820638422197859, 0.15272409491742345, 0.17377774300845283, 0.1582265172998577, 0.08304255287150175, 0.07817593567305581, 0.12059371555389864, 0.14268304871400628, 0.12886159912270245, 0.17100177203459133, 0.09554447306739455, 0.11354226884756624, 0.10549794085700048, 0.22296984162306277, 0.2021239607761134, 0.2267384540391627, 0.21939049672909883, 0.21458626969226857, 0.17174571661633942, 0.214281963494093, 0.1968641635203865, 0.2308023730647284, 0.15630616784327866, 0.1613861062349643, 0.15961367792060077, 0.16165283391630414, 0.16295726621245465, 0.16693544970878083, 0.16695535911763204, 0.15635036234110145, 0.17682539786258877, 0.18010522698459808, 0.1678778765220803, 0.1312892587836746, 0.11631621041937545, 0.1207914665021157, 0.12453313817677503, 0.1070176662487543, 0.10661259052122041, 0.13883356011380743, 0.3985578905605832, 0.10267165755511809, 0.23995226274968795, 0.06356263263135986, 0.056881965929019174, 0.0899684703101582, 0.1562648907590961, 0.1972401048849317, 0.1706175168450722, 0.16968240889620578, 0.18181407100537428, 0.1692380377009124, 0.18803767161480134, 0.1801453497805382, 0.16770812202866126, 0.19072515042141747, 0.18336548924781648, 0.1921719324446881, 0.08061942016545276, 0.0819770631995167, 0.057315935199542034, 0.08963552574268596, 0.08728900826570318, 0.09428336318980057, 0.07074570666451507, 0.07320171822141297, 0.09637203500351132]}, "mutation_prompt": null}
{"id": "b18149f9-a877-4f19-b1ab-91f142227f3f", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithmEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        return population[np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2)]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithmEnhanced", "description": "A streamlined adaptive genetic algorithm with revised selection and mutation strategies for enhanced diversity management.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "metadata": {"aucs": [0.5434431149991508, 0.5539361961978395, 0.5445345164007165, 0.4881859840816686, 0.4715303732835835, 0.5715570644379415, 0.5123814023740748, 0.48904100786986004, 0.48126833664518376, 0.0001672799171099637, 0.016431712423112144, 9.999999999998899e-05, 9.999999999998899e-05, 0.042765279551932656, 9.999999999998899e-05, 9.999999999998899e-05, 0.04389567957358398, 9.999999999998899e-05, 0.09383707246950068, 0.08429924359285446, 0.0808911553370042, 0.09603800333873314, 0.07035508503716537, 0.11863242539214791, 0.07265626007997139, 0.0556391639262358, 0.09426508420653423, 0.03088502103152846, 0.027800339609724833, 0.036260195195846556, 0.055328249746288916, 0.006374857060383543, 0.026560025201733506, 0.04703277539525441, 0.014776729617261064, 0.019007843814258685, 0.19029331966870844, 0.1429138252029204, 0.19086074153214605, 0.11312608359973075, 0.19926317821883677, 0.11909195454934618, 0.17425301070930166, 0.1252659497394214, 0.14297823939232834, 0.3033693312903897, 0.28134813212736076, 0.25651280335592264, 0.30540067104311375, 0.26554654506356, 0.29048881386155634, 0.3002899659246525, 0.24386730766581444, 0.31301922452088904, 0.17296585684177457, 0.16533167985943054, 0.14155063573327176, 0.13961936671680164, 0.17289744812991215, 0.10363415066354575, 0.1264023275932472, 0.15230733558592624, 0.15814894147769432, 0.15440697564221173, 0.116194442201629, 0.1277113215852147, 0.15841619626303616, 0.1483348679874249, 0.13212662050528146, 0.20426766469802804, 0.3130749190965343, 0.17137466347149855, 0.26482263314704346, 0.1492081630163684, 0.1628013065620647, 0.3072534274756621, 0.17842800464115804, 0.12903304872838506, 0.17953147503842448, 0.13630601515639773, 0.1748912060265031, 0.0016320612907880783, 0.005156572127874126, 0.0035038247658274457, 0.009013832652537301, 0.08168425973964044, 0.025845278440932984, 9.999999999998899e-05, 0.050102332591847154, 0.0646847239573175, 0.09823312895613723, 0.060503021293927484, 0.08000440437280154, 0.04398221650142131, 0.02857316302527202, 0.025407431055362806, 0.13034964449372566, 0.06451582270171252, 0.08564502482262082, 0.003019193415467636, 0.012575860878585088, 0.004698343763922308, 0.008765438280238569, 0.03825528622286145, 0.0019136361372582567, 0.004090717230979646, 0.0382515434178935, 9.999999999998899e-05, 0.13562757179752893, 0.06055760188436854, 0.15258049040208987, 0.10240074490510886, 0.09818368281811851, 0.13158509484718017, 0.10902542351827049, 0.09279316559059447, 0.10505849260827815, 0.45848654264265454, 0.4737017238026273, 0.4550358826603952, 0.4270540936076803, 0.4289334265225181, 0.4176673844647075, 0.49207896801944073, 0.39330272917150877, 0.45987538877326983, 0.026627014421755857, 0.01971447178877883, 0.04996966378903167, 0.12364262649911906, 0.07072975062149, 0.12749526169496295, 0.03700004568697257, 0.07201935017423533, 0.09259647407104643, 0.13541049004381933, 0.10390912150972542, 0.13092366309601344, 0.09855305120349966, 0.1375594015236007, 0.17323852450848076, 0.131396481764133, 0.18427806030716776, 0.22882035202666284, 0.16050819645668835, 0.14191339046471751, 0.23872562999303482, 0.21420479104886248, 0.17629945365919286, 0.2401282291025264, 0.14702360111324164, 0.20758737078364708, 0.25031446388480494, 0.1278397844860839, 0.16840546761572017, 0.11042357574156392, 0.27017904298088335, 0.07789578395005681, 0.11085554248711849, 0.1362340591825092, 0.10695261449817028, 0.23466216829150688, 0.2319578685333218, 0.19806270292376071, 0.20844473352674198, 0.21705618360683065, 0.22239370931990665, 0.24015297359237853, 0.2894396150619707, 0.2138827950927894, 0.2198131062127886, 0.17693144271123873, 0.1515470469831458, 0.174750704542056, 0.1562647459094143, 0.1692834524967748, 0.18249977725016175, 0.16969767451180628, 0.15706825170631933, 0.1625261167706511, 0.7671975525079154, 0.18143699967903704, 0.18285440116652996, 0.1682945493827237, 0.1207914665021157, 0.11448810678839272, 0.1070176662487543, 0.10899150130310808, 0.1596575689593348, 0.5589749829228507, 0.10267165755511809, 0.2156881728211032, 0.18894432844777598, 0.14410644545311113, 0.1462919902110138, 0.37740011885763214, 0.1412406562734011, 0.09354701096064488, 0.18370188414416333, 0.18215008656846943, 0.18450794640283508, 0.17920246837652065, 0.19238495457864202, 0.19384822867151863, 0.19729004163409558, 0.184725785253271, 0.19501652083407006, 0.1076476112598157, 0.10477757831776746, 0.09701274529705628, 0.10145734463367351, 0.06184947373942273, 0.09657518919494956, 0.06676505780749753, 0.061416368136544386, 0.0920641232827969]}, "mutation_prompt": null}
{"id": "ef968b67-ad8a-4d07-b121-98147c29618f", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithmEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        return population[np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2)]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithmEnhanced", "description": "A streamlined adaptive genetic algorithm with revised selection and mutation strategies for enhanced diversity management.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "metadata": {"aucs": [0.5434431149991508, 0.5539361961978395, 0.5445345164007165, 0.4881859840816686, 0.4715303732835835, 0.5715570644379415, 0.5123814023740748, 0.48904100786986004, 0.48126833664518376, 0.0001672799171099637, 0.016431712423112144, 9.999999999998899e-05, 9.999999999998899e-05, 0.042765279551932656, 9.999999999998899e-05, 9.999999999998899e-05, 0.04389567957358398, 9.999999999998899e-05, 0.09383707246950068, 0.08429924359285446, 0.0808911553370042, 0.09603800333873314, 0.07035508503716537, 0.11863242539214791, 0.07265626007997139, 0.0556391639262358, 0.09426508420653423, 0.03088502103152846, 0.027800339609724833, 0.036260195195846556, 0.055328249746288916, 0.006374857060383543, 0.026560025201733506, 0.04703277539525441, 0.014776729617261064, 0.019007843814258685, 0.19029331966870844, 0.1429138252029204, 0.19086074153214605, 0.11312608359973075, 0.19926317821883677, 0.11909195454934618, 0.17425301070930166, 0.1252659497394214, 0.14297823939232834, 0.3033693312903897, 0.28134813212736076, 0.25651280335592264, 0.30540067104311375, 0.26554654506356, 0.29048881386155634, 0.3002899659246525, 0.24386730766581444, 0.31301922452088904, 0.17296585684177457, 0.16533167985943054, 0.14155063573327176, 0.13961936671680164, 0.17289744812991215, 0.10363415066354575, 0.1264023275932472, 0.15230733558592624, 0.15814894147769432, 0.15440697564221173, 0.116194442201629, 0.1277113215852147, 0.15841619626303616, 0.1483348679874249, 0.13212662050528146, 0.20426766469802804, 0.3130749190965343, 0.17137466347149855, 0.26482263314704346, 0.1492081630163684, 0.1628013065620647, 0.3072534274756621, 0.17842800464115804, 0.12903304872838506, 0.17953147503842448, 0.13630601515639773, 0.1748912060265031, 0.0016320612907880783, 0.005156572127874126, 0.0035038247658274457, 0.009013832652537301, 0.08168425973964044, 0.025845278440932984, 9.999999999998899e-05, 0.050102332591847154, 0.0646847239573175, 0.09823312895613723, 0.060503021293927484, 0.08000440437280154, 0.04398221650142131, 0.02857316302527202, 0.025407431055362806, 0.13034964449372566, 0.06451582270171252, 0.08564502482262082, 0.003019193415467636, 0.012575860878585088, 0.004698343763922308, 0.008765438280238569, 0.03825528622286145, 0.0019136361372582567, 0.004090717230979646, 0.0382515434178935, 9.999999999998899e-05, 0.13562757179752893, 0.06055760188436854, 0.15258049040208987, 0.10240074490510886, 0.09818368281811851, 0.13158509484718017, 0.10902542351827049, 0.09279316559059447, 0.10505849260827815, 0.45848654264265454, 0.4737017238026273, 0.4550358826603952, 0.4270540936076803, 0.4289334265225181, 0.4176673844647075, 0.49207896801944073, 0.39330272917150877, 0.45987538877326983, 0.026627014421755857, 0.01971447178877883, 0.04996966378903167, 0.12364262649911906, 0.07072975062149, 0.12749526169496295, 0.03700004568697257, 0.07201935017423533, 0.09259647407104643, 0.13541049004381933, 0.10390912150972542, 0.13092366309601344, 0.09855305120349966, 0.1375594015236007, 0.17323852450848076, 0.131396481764133, 0.18427806030716776, 0.22882035202666284, 0.16050819645668835, 0.14191339046471751, 0.23872562999303482, 0.21420479104886248, 0.17629945365919286, 0.2401282291025264, 0.14702360111324164, 0.20758737078364708, 0.25031446388480494, 0.1278397844860839, 0.16840546761572017, 0.11042357574156392, 0.27017904298088335, 0.07789578395005681, 0.11085554248711849, 0.1362340591825092, 0.10695261449817028, 0.23466216829150688, 0.2319578685333218, 0.19806270292376071, 0.20844473352674198, 0.21705618360683065, 0.22239370931990665, 0.24015297359237853, 0.2894396150619707, 0.2138827950927894, 0.2198131062127886, 0.17693144271123873, 0.1515470469831458, 0.174750704542056, 0.1562647459094143, 0.1692834524967748, 0.18249977725016175, 0.16969767451180628, 0.15706825170631933, 0.1625261167706511, 0.7671975525079154, 0.18143699967903704, 0.18285440116652996, 0.1682945493827237, 0.1207914665021157, 0.11448810678839272, 0.1070176662487543, 0.10899150130310808, 0.1596575689593348, 0.5589749829228507, 0.10267165755511809, 0.2156881728211032, 0.18894432844777598, 0.14410644545311113, 0.1462919902110138, 0.37740011885763214, 0.1412406562734011, 0.09354701096064488, 0.18370188414416333, 0.18215008656846943, 0.18450794640283508, 0.17920246837652065, 0.19238495457864202, 0.19384822867151863, 0.19729004163409558, 0.184725785253271, 0.19501652083407006, 0.1076476112598157, 0.10477757831776746, 0.09701274529705628, 0.10145734463367351, 0.06184947373942273, 0.09657518919494956, 0.06676505780749753, 0.061416368136544386, 0.0920641232827969]}, "mutation_prompt": null}
{"id": "5103092a-462f-4308-bc6e-601455eab12b", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithmEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        return population[np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2)]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithmEnhanced", "description": "A streamlined adaptive genetic algorithm with revised selection and mutation strategies for enhanced diversity management.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "metadata": {"aucs": [0.5434431149991508, 0.5539361961978395, 0.5445345164007165, 0.4881859840816686, 0.4715303732835835, 0.5715570644379415, 0.5123814023740748, 0.48904100786986004, 0.48126833664518376, 0.0001672799171099637, 0.016431712423112144, 9.999999999998899e-05, 9.999999999998899e-05, 0.042765279551932656, 9.999999999998899e-05, 9.999999999998899e-05, 0.04389567957358398, 9.999999999998899e-05, 0.09383707246950068, 0.08429924359285446, 0.0808911553370042, 0.09603800333873314, 0.07035508503716537, 0.11863242539214791, 0.07265626007997139, 0.0556391639262358, 0.09426508420653423, 0.03088502103152846, 0.027800339609724833, 0.036260195195846556, 0.055328249746288916, 0.006374857060383543, 0.026560025201733506, 0.04703277539525441, 0.014776729617261064, 0.019007843814258685, 0.19029331966870844, 0.1429138252029204, 0.19086074153214605, 0.11312608359973075, 0.19926317821883677, 0.11909195454934618, 0.17425301070930166, 0.1252659497394214, 0.14297823939232834, 0.3033693312903897, 0.28134813212736076, 0.25651280335592264, 0.30540067104311375, 0.26554654506356, 0.29048881386155634, 0.3002899659246525, 0.24386730766581444, 0.31301922452088904, 0.17296585684177457, 0.16533167985943054, 0.14155063573327176, 0.13961936671680164, 0.17289744812991215, 0.10363415066354575, 0.1264023275932472, 0.15230733558592624, 0.15814894147769432, 0.15440697564221173, 0.116194442201629, 0.1277113215852147, 0.15841619626303616, 0.1483348679874249, 0.13212662050528146, 0.20426766469802804, 0.3130749190965343, 0.17137466347149855, 0.26482263314704346, 0.1492081630163684, 0.1628013065620647, 0.3072534274756621, 0.17842800464115804, 0.12903304872838506, 0.17953147503842448, 0.13630601515639773, 0.1748912060265031, 0.0016320612907880783, 0.005156572127874126, 0.0035038247658274457, 0.009013832652537301, 0.08168425973964044, 0.025845278440932984, 9.999999999998899e-05, 0.050102332591847154, 0.0646847239573175, 0.09823312895613723, 0.060503021293927484, 0.08000440437280154, 0.04398221650142131, 0.02857316302527202, 0.025407431055362806, 0.13034964449372566, 0.06451582270171252, 0.08564502482262082, 0.003019193415467636, 0.012575860878585088, 0.004698343763922308, 0.008765438280238569, 0.03825528622286145, 0.0019136361372582567, 0.004090717230979646, 0.0382515434178935, 9.999999999998899e-05, 0.13562757179752893, 0.06055760188436854, 0.15258049040208987, 0.10240074490510886, 0.09818368281811851, 0.13158509484718017, 0.10902542351827049, 0.09279316559059447, 0.10505849260827815, 0.45848654264265454, 0.4737017238026273, 0.4550358826603952, 0.4270540936076803, 0.4289334265225181, 0.4176673844647075, 0.49207896801944073, 0.39330272917150877, 0.45987538877326983, 0.026627014421755857, 0.01971447178877883, 0.04996966378903167, 0.12364262649911906, 0.07072975062149, 0.12749526169496295, 0.03700004568697257, 0.07201935017423533, 0.09259647407104643, 0.13541049004381933, 0.10390912150972542, 0.13092366309601344, 0.09855305120349966, 0.1375594015236007, 0.17323852450848076, 0.131396481764133, 0.18427806030716776, 0.22882035202666284, 0.16050819645668835, 0.14191339046471751, 0.23872562999303482, 0.21420479104886248, 0.17629945365919286, 0.2401282291025264, 0.14702360111324164, 0.20758737078364708, 0.25031446388480494, 0.1278397844860839, 0.16840546761572017, 0.11042357574156392, 0.27017904298088335, 0.07789578395005681, 0.11085554248711849, 0.1362340591825092, 0.10695261449817028, 0.23466216829150688, 0.2319578685333218, 0.19806270292376071, 0.20844473352674198, 0.21705618360683065, 0.22239370931990665, 0.24015297359237853, 0.2894396150619707, 0.2138827950927894, 0.2198131062127886, 0.17693144271123873, 0.1515470469831458, 0.174750704542056, 0.1562647459094143, 0.1692834524967748, 0.18249977725016175, 0.16969767451180628, 0.15706825170631933, 0.1625261167706511, 0.7671975525079154, 0.18143699967903704, 0.18285440116652996, 0.1682945493827237, 0.1207914665021157, 0.11448810678839272, 0.1070176662487543, 0.10899150130310808, 0.1596575689593348, 0.5589749829228507, 0.10267165755511809, 0.2156881728211032, 0.18894432844777598, 0.14410644545311113, 0.1462919902110138, 0.37740011885763214, 0.1412406562734011, 0.09354701096064488, 0.18370188414416333, 0.18215008656846943, 0.18450794640283508, 0.17920246837652065, 0.19238495457864202, 0.19384822867151863, 0.19729004163409558, 0.184725785253271, 0.19501652083407006, 0.1076476112598157, 0.10477757831776746, 0.09701274529705628, 0.10145734463367351, 0.06184947373942273, 0.09657518919494956, 0.06676505780749753, 0.061416368136544386, 0.0920641232827969]}, "mutation_prompt": null}
{"id": "7ed8045d-c290-42d0-8758-29e2f1748151", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithmEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        return population[np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2)]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithmEnhanced", "description": "A streamlined adaptive genetic algorithm with revised selection and mutation strategies for enhanced diversity management.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "metadata": {"aucs": [0.5434431149991508, 0.5539361961978395, 0.5445345164007165, 0.4881859840816686, 0.4715303732835835, 0.5715570644379415, 0.5123814023740748, 0.48904100786986004, 0.48126833664518376, 0.0001672799171099637, 0.016431712423112144, 9.999999999998899e-05, 9.999999999998899e-05, 0.042765279551932656, 9.999999999998899e-05, 9.999999999998899e-05, 0.04389567957358398, 9.999999999998899e-05, 0.09383707246950068, 0.08429924359285446, 0.0808911553370042, 0.09603800333873314, 0.07035508503716537, 0.11863242539214791, 0.07265626007997139, 0.0556391639262358, 0.09426508420653423, 0.03088502103152846, 0.027800339609724833, 0.036260195195846556, 0.055328249746288916, 0.006374857060383543, 0.026560025201733506, 0.04703277539525441, 0.014776729617261064, 0.019007843814258685, 0.19029331966870844, 0.1429138252029204, 0.19086074153214605, 0.11312608359973075, 0.19926317821883677, 0.11909195454934618, 0.17425301070930166, 0.1252659497394214, 0.14297823939232834, 0.3033693312903897, 0.28134813212736076, 0.25651280335592264, 0.30540067104311375, 0.26554654506356, 0.29048881386155634, 0.3002899659246525, 0.24386730766581444, 0.31301922452088904, 0.17296585684177457, 0.16533167985943054, 0.14155063573327176, 0.13961936671680164, 0.17289744812991215, 0.10363415066354575, 0.1264023275932472, 0.15230733558592624, 0.15814894147769432, 0.15440697564221173, 0.116194442201629, 0.1277113215852147, 0.15841619626303616, 0.1483348679874249, 0.13212662050528146, 0.20426766469802804, 0.3130749190965343, 0.17137466347149855, 0.26482263314704346, 0.1492081630163684, 0.1628013065620647, 0.3072534274756621, 0.17842800464115804, 0.12903304872838506, 0.17953147503842448, 0.13630601515639773, 0.1748912060265031, 0.0016320612907880783, 0.005156572127874126, 0.0035038247658274457, 0.009013832652537301, 0.08168425973964044, 0.025845278440932984, 9.999999999998899e-05, 0.050102332591847154, 0.0646847239573175, 0.09823312895613723, 0.060503021293927484, 0.08000440437280154, 0.04398221650142131, 0.02857316302527202, 0.025407431055362806, 0.13034964449372566, 0.06451582270171252, 0.08564502482262082, 0.003019193415467636, 0.012575860878585088, 0.004698343763922308, 0.008765438280238569, 0.03825528622286145, 0.0019136361372582567, 0.004090717230979646, 0.0382515434178935, 9.999999999998899e-05, 0.13562757179752893, 0.06055760188436854, 0.15258049040208987, 0.10240074490510886, 0.09818368281811851, 0.13158509484718017, 0.10902542351827049, 0.09279316559059447, 0.10505849260827815, 0.45848654264265454, 0.4737017238026273, 0.4550358826603952, 0.4270540936076803, 0.4289334265225181, 0.4176673844647075, 0.49207896801944073, 0.39330272917150877, 0.45987538877326983, 0.026627014421755857, 0.01971447178877883, 0.04996966378903167, 0.12364262649911906, 0.07072975062149, 0.12749526169496295, 0.03700004568697257, 0.07201935017423533, 0.09259647407104643, 0.13541049004381933, 0.10390912150972542, 0.13092366309601344, 0.09855305120349966, 0.1375594015236007, 0.17323852450848076, 0.131396481764133, 0.18427806030716776, 0.22882035202666284, 0.16050819645668835, 0.14191339046471751, 0.23872562999303482, 0.21420479104886248, 0.17629945365919286, 0.2401282291025264, 0.14702360111324164, 0.20758737078364708, 0.25031446388480494, 0.1278397844860839, 0.16840546761572017, 0.11042357574156392, 0.27017904298088335, 0.07789578395005681, 0.11085554248711849, 0.1362340591825092, 0.10695261449817028, 0.23466216829150688, 0.2319578685333218, 0.19806270292376071, 0.20844473352674198, 0.21705618360683065, 0.22239370931990665, 0.24015297359237853, 0.2894396150619707, 0.2138827950927894, 0.2198131062127886, 0.17693144271123873, 0.1515470469831458, 0.174750704542056, 0.1562647459094143, 0.1692834524967748, 0.18249977725016175, 0.16969767451180628, 0.15706825170631933, 0.1625261167706511, 0.7671975525079154, 0.18143699967903704, 0.18285440116652996, 0.1682945493827237, 0.1207914665021157, 0.11448810678839272, 0.1070176662487543, 0.10899150130310808, 0.1596575689593348, 0.5589749829228507, 0.10267165755511809, 0.2156881728211032, 0.18894432844777598, 0.14410644545311113, 0.1462919902110138, 0.37740011885763214, 0.1412406562734011, 0.09354701096064488, 0.18370188414416333, 0.18215008656846943, 0.18450794640283508, 0.17920246837652065, 0.19238495457864202, 0.19384822867151863, 0.19729004163409558, 0.184725785253271, 0.19501652083407006, 0.1076476112598157, 0.10477757831776746, 0.09701274529705628, 0.10145734463367351, 0.06184947373942273, 0.09657518919494956, 0.06676505780749753, 0.061416368136544386, 0.0920641232827969]}, "mutation_prompt": null}
{"id": "4602e399-08b0-449e-9634-f861f837baaf", "solution": "import numpy as np\n\nclass HybridGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        indexes = np.random.permutation(len(population))[:self.population_size // 2]\n        return population[indexes]\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand()\n        return alpha * parent1 + (1 - alpha) * parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "HybridGeneticAlgorithm", "description": "Introducing a hybrid selection and modified crossover strategy to improve diversity and convergence speed.", "configspace": "", "generation": 48, "fitness": 0.06746736055376144, "feedback": "The algorithm HybridGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.07.", "error": "", "parent_id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "metadata": {"aucs": [0.14582092998431195, 0.12360075182777963, 0.15951954774275423, 0.09431231635004056, 0.10750000009520266, 0.11042008850345264, 0.10554868306163112, 0.09165032322093325, 0.08630228233586934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01743776725436197, 0.01467079663371329, 0.012513270008532529, 0.010643411704069683, 0.017353894702350603, 0.019153874682883765, 0.025080596746685835, 0.02089649560747875, 0.010674738340807233, 0.0330919828021935, 0.012736171032840193, 0.028197341996227032, 0.01959972157639278, 0.00647539993667634, 9.999999999998899e-05, 0.02078020871325681, 0.004614338013008812, 9.999999999998899e-05, 0.045179741609489454, 0.045385788542351646, 0.04287777107098589, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.06274794416174423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049623117796325444, 0.024011683844463172, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.1174907579345541, 0.11646037602273496, 0.08237274194129462, 0.0667108215001172, 0.07285119553694963, 9.999999999998899e-05, 0.07244475519522242, 0.05931056463008866, 0.07317758893213044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031645561708928294, 0.016596590975929804, 9.999999999998899e-05, 0.012882371371892631, 0.06130020957486648, 0.0015106734252130494, 0.011141617609352727, 0.02338235439618752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206137671092314, 0.09449636311683574, 0.012846686925387818, 0.06165649951246521, 9.999999999998899e-05, 0.07682050040551147, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15920115020814063, 0.15762793190175794, 0.14838054695461433, 0.13235317270004943, 0.128588548240531, 0.11644106862294701, 0.20056139650341898, 0.17775079198574806, 0.17675809242997798, 9.999999999998899e-05, 9.999999999998899e-05, 0.02198412468535549, 0.03266886175302153, 0.02681916311846655, 0.024756475847004356, 0.013265657103981532, 0.027383189061996882, 0.04526066662690209, 0.1639983048427146, 0.10391104143217977, 0.11842175776965747, 0.10685374877219311, 0.14475407090376358, 0.11490930166546864, 0.08834216948633533, 0.08987639622336241, 0.12031325711944973, 0.12570723938279094, 0.1429498673914117, 0.1613932299901244, 0.13822372556328522, 0.14628410498635802, 0.14952200469848376, 0.12028165949079228, 0.17377774300845283, 0.11523186581795741, 0.05985564337097804, 0.07295127580569294, 0.09566027933142063, 0.08375780062165339, 0.0972706937693334, 0.10285092265804507, 0.0837317855149382, 0.0997711199450243, 0.07174080356178603, 0.19055487649099767, 0.20868675248813073, 0.17880532298007457, 0.2243599366107426, 0.23529158932055338, 0.24363465594203815, 0.20946175980655823, 0.23461416315487005, 0.17411948226646579, 0.13468289357110808, 9.999999999998899e-05, 0.13538508594518828, 0.04908296412415436, 0.15693425906891645, 0.13902653747666793, 9.999999999998899e-05, 0.1303095942284057, 0.13123145502548372, 0.056405131566432454, 0.14204435845143637, 0.10559976452314845, 0.1140855252923415, 0.12176641156763013, 0.11037375317839326, 0.1070176662487543, 0.10511484148144368, 0.08139877098064041, 0.12504472975549485, 0.10267165755511809, 0.15050175573739144, 0.0506857903344724, 0.05452511240333313, 0.07239651121014978, 0.22938751788867162, 0.04979557176736493, 0.16537164838843288, 0.19301290663500237, 0.19351012868232798, 0.17605660007082824, 0.18165034144066772, 0.19561221336684098, 0.18427187029644554, 0.1881089252238659, 0.17759313529678256, 0.1834074061074873, 0.04731739173914995, 0.052951065059846814, 0.06777062363448605, 0.06454907877985949, 0.042724671896645305, 0.06955050099947335, 0.04497890950730876, 0.04765368519793978, 0.07682688805259474]}, "mutation_prompt": null}
{"id": "69f0b4c7-4b98-4a2c-a8d9-a8cf99575044", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithmEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        return population[np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2)]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithmEnhanced", "description": "A streamlined adaptive genetic algorithm with revised selection and mutation strategies for enhanced diversity management.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "metadata": {"aucs": [0.5434431149991508, 0.5539361961978395, 0.5445345164007165, 0.4881859840816686, 0.4715303732835835, 0.5715570644379415, 0.5123814023740748, 0.48904100786986004, 0.48126833664518376, 0.0001672799171099637, 0.016431712423112144, 9.999999999998899e-05, 9.999999999998899e-05, 0.042765279551932656, 9.999999999998899e-05, 9.999999999998899e-05, 0.04389567957358398, 9.999999999998899e-05, 0.09383707246950068, 0.08429924359285446, 0.0808911553370042, 0.09603800333873314, 0.07035508503716537, 0.11863242539214791, 0.07265626007997139, 0.0556391639262358, 0.09426508420653423, 0.03088502103152846, 0.027800339609724833, 0.036260195195846556, 0.055328249746288916, 0.006374857060383543, 0.026560025201733506, 0.04703277539525441, 0.014776729617261064, 0.019007843814258685, 0.19029331966870844, 0.1429138252029204, 0.19086074153214605, 0.11312608359973075, 0.19926317821883677, 0.11909195454934618, 0.17425301070930166, 0.1252659497394214, 0.14297823939232834, 0.3033693312903897, 0.28134813212736076, 0.25651280335592264, 0.30540067104311375, 0.26554654506356, 0.29048881386155634, 0.3002899659246525, 0.24386730766581444, 0.31301922452088904, 0.17296585684177457, 0.16533167985943054, 0.14155063573327176, 0.13961936671680164, 0.17289744812991215, 0.10363415066354575, 0.1264023275932472, 0.15230733558592624, 0.15814894147769432, 0.15440697564221173, 0.116194442201629, 0.1277113215852147, 0.15841619626303616, 0.1483348679874249, 0.13212662050528146, 0.20426766469802804, 0.3130749190965343, 0.17137466347149855, 0.26482263314704346, 0.1492081630163684, 0.1628013065620647, 0.3072534274756621, 0.17842800464115804, 0.12903304872838506, 0.17953147503842448, 0.13630601515639773, 0.1748912060265031, 0.0016320612907880783, 0.005156572127874126, 0.0035038247658274457, 0.009013832652537301, 0.08168425973964044, 0.025845278440932984, 9.999999999998899e-05, 0.050102332591847154, 0.0646847239573175, 0.09823312895613723, 0.060503021293927484, 0.08000440437280154, 0.04398221650142131, 0.02857316302527202, 0.025407431055362806, 0.13034964449372566, 0.06451582270171252, 0.08564502482262082, 0.003019193415467636, 0.012575860878585088, 0.004698343763922308, 0.008765438280238569, 0.03825528622286145, 0.0019136361372582567, 0.004090717230979646, 0.0382515434178935, 9.999999999998899e-05, 0.13562757179752893, 0.06055760188436854, 0.15258049040208987, 0.10240074490510886, 0.09818368281811851, 0.13158509484718017, 0.10902542351827049, 0.09279316559059447, 0.10505849260827815, 0.45848654264265454, 0.4737017238026273, 0.4550358826603952, 0.4270540936076803, 0.4289334265225181, 0.4176673844647075, 0.49207896801944073, 0.39330272917150877, 0.45987538877326983, 0.026627014421755857, 0.01971447178877883, 0.04996966378903167, 0.12364262649911906, 0.07072975062149, 0.12749526169496295, 0.03700004568697257, 0.07201935017423533, 0.09259647407104643, 0.13541049004381933, 0.10390912150972542, 0.13092366309601344, 0.09855305120349966, 0.1375594015236007, 0.17323852450848076, 0.131396481764133, 0.18427806030716776, 0.22882035202666284, 0.16050819645668835, 0.14191339046471751, 0.23872562999303482, 0.21420479104886248, 0.17629945365919286, 0.2401282291025264, 0.14702360111324164, 0.20758737078364708, 0.25031446388480494, 0.1278397844860839, 0.16840546761572017, 0.11042357574156392, 0.27017904298088335, 0.07789578395005681, 0.11085554248711849, 0.1362340591825092, 0.10695261449817028, 0.23466216829150688, 0.2319578685333218, 0.19806270292376071, 0.20844473352674198, 0.21705618360683065, 0.22239370931990665, 0.24015297359237853, 0.2894396150619707, 0.2138827950927894, 0.2198131062127886, 0.17693144271123873, 0.1515470469831458, 0.174750704542056, 0.1562647459094143, 0.1692834524967748, 0.18249977725016175, 0.16969767451180628, 0.15706825170631933, 0.1625261167706511, 0.7671975525079154, 0.18143699967903704, 0.18285440116652996, 0.1682945493827237, 0.1207914665021157, 0.11448810678839272, 0.1070176662487543, 0.10899150130310808, 0.1596575689593348, 0.5589749829228507, 0.10267165755511809, 0.2156881728211032, 0.18894432844777598, 0.14410644545311113, 0.1462919902110138, 0.37740011885763214, 0.1412406562734011, 0.09354701096064488, 0.18370188414416333, 0.18215008656846943, 0.18450794640283508, 0.17920246837652065, 0.19238495457864202, 0.19384822867151863, 0.19729004163409558, 0.184725785253271, 0.19501652083407006, 0.1076476112598157, 0.10477757831776746, 0.09701274529705628, 0.10145734463367351, 0.06184947373942273, 0.09657518919494956, 0.06676505780749753, 0.061416368136544386, 0.0920641232827969]}, "mutation_prompt": null}
{"id": "d88b03b6-4fdd-47ae-9c77-56b869b53aec", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithmEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        return population[np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2)]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithmEnhanced", "description": "A streamlined adaptive genetic algorithm with revised selection and mutation strategies for enhanced diversity management.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "metadata": {"aucs": [0.5434431149991508, 0.5539361961978395, 0.5445345164007165, 0.4881859840816686, 0.4715303732835835, 0.5715570644379415, 0.5123814023740748, 0.48904100786986004, 0.48126833664518376, 0.0001672799171099637, 0.016431712423112144, 9.999999999998899e-05, 9.999999999998899e-05, 0.042765279551932656, 9.999999999998899e-05, 9.999999999998899e-05, 0.04389567957358398, 9.999999999998899e-05, 0.09383707246950068, 0.08429924359285446, 0.0808911553370042, 0.09603800333873314, 0.07035508503716537, 0.11863242539214791, 0.07265626007997139, 0.0556391639262358, 0.09426508420653423, 0.03088502103152846, 0.027800339609724833, 0.036260195195846556, 0.055328249746288916, 0.006374857060383543, 0.026560025201733506, 0.04703277539525441, 0.014776729617261064, 0.019007843814258685, 0.19029331966870844, 0.1429138252029204, 0.19086074153214605, 0.11312608359973075, 0.19926317821883677, 0.11909195454934618, 0.17425301070930166, 0.1252659497394214, 0.14297823939232834, 0.3033693312903897, 0.28134813212736076, 0.25651280335592264, 0.30540067104311375, 0.26554654506356, 0.29048881386155634, 0.3002899659246525, 0.24386730766581444, 0.31301922452088904, 0.17296585684177457, 0.16533167985943054, 0.14155063573327176, 0.13961936671680164, 0.17289744812991215, 0.10363415066354575, 0.1264023275932472, 0.15230733558592624, 0.15814894147769432, 0.15440697564221173, 0.116194442201629, 0.1277113215852147, 0.15841619626303616, 0.1483348679874249, 0.13212662050528146, 0.20426766469802804, 0.3130749190965343, 0.17137466347149855, 0.26482263314704346, 0.1492081630163684, 0.1628013065620647, 0.3072534274756621, 0.17842800464115804, 0.12903304872838506, 0.17953147503842448, 0.13630601515639773, 0.1748912060265031, 0.0016320612907880783, 0.005156572127874126, 0.0035038247658274457, 0.009013832652537301, 0.08168425973964044, 0.025845278440932984, 9.999999999998899e-05, 0.050102332591847154, 0.0646847239573175, 0.09823312895613723, 0.060503021293927484, 0.08000440437280154, 0.04398221650142131, 0.02857316302527202, 0.025407431055362806, 0.13034964449372566, 0.06451582270171252, 0.08564502482262082, 0.003019193415467636, 0.012575860878585088, 0.004698343763922308, 0.008765438280238569, 0.03825528622286145, 0.0019136361372582567, 0.004090717230979646, 0.0382515434178935, 9.999999999998899e-05, 0.13562757179752893, 0.06055760188436854, 0.15258049040208987, 0.10240074490510886, 0.09818368281811851, 0.13158509484718017, 0.10902542351827049, 0.09279316559059447, 0.10505849260827815, 0.45848654264265454, 0.4737017238026273, 0.4550358826603952, 0.4270540936076803, 0.4289334265225181, 0.4176673844647075, 0.49207896801944073, 0.39330272917150877, 0.45987538877326983, 0.026627014421755857, 0.01971447178877883, 0.04996966378903167, 0.12364262649911906, 0.07072975062149, 0.12749526169496295, 0.03700004568697257, 0.07201935017423533, 0.09259647407104643, 0.13541049004381933, 0.10390912150972542, 0.13092366309601344, 0.09855305120349966, 0.1375594015236007, 0.17323852450848076, 0.131396481764133, 0.18427806030716776, 0.22882035202666284, 0.16050819645668835, 0.14191339046471751, 0.23872562999303482, 0.21420479104886248, 0.17629945365919286, 0.2401282291025264, 0.14702360111324164, 0.20758737078364708, 0.25031446388480494, 0.1278397844860839, 0.16840546761572017, 0.11042357574156392, 0.27017904298088335, 0.07789578395005681, 0.11085554248711849, 0.1362340591825092, 0.10695261449817028, 0.23466216829150688, 0.2319578685333218, 0.19806270292376071, 0.20844473352674198, 0.21705618360683065, 0.22239370931990665, 0.24015297359237853, 0.2894396150619707, 0.2138827950927894, 0.2198131062127886, 0.17693144271123873, 0.1515470469831458, 0.174750704542056, 0.1562647459094143, 0.1692834524967748, 0.18249977725016175, 0.16969767451180628, 0.15706825170631933, 0.1625261167706511, 0.7671975525079154, 0.18143699967903704, 0.18285440116652996, 0.1682945493827237, 0.1207914665021157, 0.11448810678839272, 0.1070176662487543, 0.10899150130310808, 0.1596575689593348, 0.5589749829228507, 0.10267165755511809, 0.2156881728211032, 0.18894432844777598, 0.14410644545311113, 0.1462919902110138, 0.37740011885763214, 0.1412406562734011, 0.09354701096064488, 0.18370188414416333, 0.18215008656846943, 0.18450794640283508, 0.17920246837652065, 0.19238495457864202, 0.19384822867151863, 0.19729004163409558, 0.184725785253271, 0.19501652083407006, 0.1076476112598157, 0.10477757831776746, 0.09701274529705628, 0.10145734463367351, 0.06184947373942273, 0.09657518919494956, 0.06676505780749753, 0.061416368136544386, 0.0920641232827969]}, "mutation_prompt": null}
{"id": "7fc18490-c777-4eab-b397-552e8198d2a9", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithmEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        return population[np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2)]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithmEnhanced", "description": "A streamlined adaptive genetic algorithm with revised selection and mutation strategies for enhanced diversity management.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "metadata": {"aucs": [0.5434431149991508, 0.5539361961978395, 0.5445345164007165, 0.4881859840816686, 0.4715303732835835, 0.5715570644379415, 0.5123814023740748, 0.48904100786986004, 0.48126833664518376, 0.0001672799171099637, 0.016431712423112144, 9.999999999998899e-05, 9.999999999998899e-05, 0.042765279551932656, 9.999999999998899e-05, 9.999999999998899e-05, 0.04389567957358398, 9.999999999998899e-05, 0.09383707246950068, 0.08429924359285446, 0.0808911553370042, 0.09603800333873314, 0.07035508503716537, 0.11863242539214791, 0.07265626007997139, 0.0556391639262358, 0.09426508420653423, 0.03088502103152846, 0.027800339609724833, 0.036260195195846556, 0.055328249746288916, 0.006374857060383543, 0.026560025201733506, 0.04703277539525441, 0.014776729617261064, 0.019007843814258685, 0.19029331966870844, 0.1429138252029204, 0.19086074153214605, 0.11312608359973075, 0.19926317821883677, 0.11909195454934618, 0.17425301070930166, 0.1252659497394214, 0.14297823939232834, 0.3033693312903897, 0.28134813212736076, 0.25651280335592264, 0.30540067104311375, 0.26554654506356, 0.29048881386155634, 0.3002899659246525, 0.24386730766581444, 0.31301922452088904, 0.17296585684177457, 0.16533167985943054, 0.14155063573327176, 0.13961936671680164, 0.17289744812991215, 0.10363415066354575, 0.1264023275932472, 0.15230733558592624, 0.15814894147769432, 0.15440697564221173, 0.116194442201629, 0.1277113215852147, 0.15841619626303616, 0.1483348679874249, 0.13212662050528146, 0.20426766469802804, 0.3130749190965343, 0.17137466347149855, 0.26482263314704346, 0.1492081630163684, 0.1628013065620647, 0.3072534274756621, 0.17842800464115804, 0.12903304872838506, 0.17953147503842448, 0.13630601515639773, 0.1748912060265031, 0.0016320612907880783, 0.005156572127874126, 0.0035038247658274457, 0.009013832652537301, 0.08168425973964044, 0.025845278440932984, 9.999999999998899e-05, 0.050102332591847154, 0.0646847239573175, 0.09823312895613723, 0.060503021293927484, 0.08000440437280154, 0.04398221650142131, 0.02857316302527202, 0.025407431055362806, 0.13034964449372566, 0.06451582270171252, 0.08564502482262082, 0.003019193415467636, 0.012575860878585088, 0.004698343763922308, 0.008765438280238569, 0.03825528622286145, 0.0019136361372582567, 0.004090717230979646, 0.0382515434178935, 9.999999999998899e-05, 0.13562757179752893, 0.06055760188436854, 0.15258049040208987, 0.10240074490510886, 0.09818368281811851, 0.13158509484718017, 0.10902542351827049, 0.09279316559059447, 0.10505849260827815, 0.45848654264265454, 0.4737017238026273, 0.4550358826603952, 0.4270540936076803, 0.4289334265225181, 0.4176673844647075, 0.49207896801944073, 0.39330272917150877, 0.45987538877326983, 0.026627014421755857, 0.01971447178877883, 0.04996966378903167, 0.12364262649911906, 0.07072975062149, 0.12749526169496295, 0.03700004568697257, 0.07201935017423533, 0.09259647407104643, 0.13541049004381933, 0.10390912150972542, 0.13092366309601344, 0.09855305120349966, 0.1375594015236007, 0.17323852450848076, 0.131396481764133, 0.18427806030716776, 0.22882035202666284, 0.16050819645668835, 0.14191339046471751, 0.23872562999303482, 0.21420479104886248, 0.17629945365919286, 0.2401282291025264, 0.14702360111324164, 0.20758737078364708, 0.25031446388480494, 0.1278397844860839, 0.16840546761572017, 0.11042357574156392, 0.27017904298088335, 0.07789578395005681, 0.11085554248711849, 0.1362340591825092, 0.10695261449817028, 0.23466216829150688, 0.2319578685333218, 0.19806270292376071, 0.20844473352674198, 0.21705618360683065, 0.22239370931990665, 0.24015297359237853, 0.2894396150619707, 0.2138827950927894, 0.2198131062127886, 0.17693144271123873, 0.1515470469831458, 0.174750704542056, 0.1562647459094143, 0.1692834524967748, 0.18249977725016175, 0.16969767451180628, 0.15706825170631933, 0.1625261167706511, 0.7671975525079154, 0.18143699967903704, 0.18285440116652996, 0.1682945493827237, 0.1207914665021157, 0.11448810678839272, 0.1070176662487543, 0.10899150130310808, 0.1596575689593348, 0.5589749829228507, 0.10267165755511809, 0.2156881728211032, 0.18894432844777598, 0.14410644545311113, 0.1462919902110138, 0.37740011885763214, 0.1412406562734011, 0.09354701096064488, 0.18370188414416333, 0.18215008656846943, 0.18450794640283508, 0.17920246837652065, 0.19238495457864202, 0.19384822867151863, 0.19729004163409558, 0.184725785253271, 0.19501652083407006, 0.1076476112598157, 0.10477757831776746, 0.09701274529705628, 0.10145734463367351, 0.06184947373942273, 0.09657518919494956, 0.06676505780749753, 0.061416368136544386, 0.0920641232827969]}, "mutation_prompt": null}
{"id": "5b50dad5-21db-48d5-af6c-a40f9385fb04", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithmEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        return population[np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2)]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithmEnhanced", "description": "A streamlined adaptive genetic algorithm with revised selection and mutation strategies for enhanced diversity management.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "metadata": {"aucs": [0.5434431149991508, 0.5539361961978395, 0.5445345164007165, 0.4881859840816686, 0.4715303732835835, 0.5715570644379415, 0.5123814023740748, 0.48904100786986004, 0.48126833664518376, 0.0001672799171099637, 0.016431712423112144, 9.999999999998899e-05, 9.999999999998899e-05, 0.042765279551932656, 9.999999999998899e-05, 9.999999999998899e-05, 0.04389567957358398, 9.999999999998899e-05, 0.09383707246950068, 0.08429924359285446, 0.0808911553370042, 0.09603800333873314, 0.07035508503716537, 0.11863242539214791, 0.07265626007997139, 0.0556391639262358, 0.09426508420653423, 0.03088502103152846, 0.027800339609724833, 0.036260195195846556, 0.055328249746288916, 0.006374857060383543, 0.026560025201733506, 0.04703277539525441, 0.014776729617261064, 0.019007843814258685, 0.19029331966870844, 0.1429138252029204, 0.19086074153214605, 0.11312608359973075, 0.19926317821883677, 0.11909195454934618, 0.17425301070930166, 0.1252659497394214, 0.14297823939232834, 0.3033693312903897, 0.28134813212736076, 0.25651280335592264, 0.30540067104311375, 0.26554654506356, 0.29048881386155634, 0.3002899659246525, 0.24386730766581444, 0.31301922452088904, 0.17296585684177457, 0.16533167985943054, 0.14155063573327176, 0.13961936671680164, 0.17289744812991215, 0.10363415066354575, 0.1264023275932472, 0.15230733558592624, 0.15814894147769432, 0.15440697564221173, 0.116194442201629, 0.1277113215852147, 0.15841619626303616, 0.1483348679874249, 0.13212662050528146, 0.20426766469802804, 0.3130749190965343, 0.17137466347149855, 0.26482263314704346, 0.1492081630163684, 0.1628013065620647, 0.3072534274756621, 0.17842800464115804, 0.12903304872838506, 0.17953147503842448, 0.13630601515639773, 0.1748912060265031, 0.0016320612907880783, 0.005156572127874126, 0.0035038247658274457, 0.009013832652537301, 0.08168425973964044, 0.025845278440932984, 9.999999999998899e-05, 0.050102332591847154, 0.0646847239573175, 0.09823312895613723, 0.060503021293927484, 0.08000440437280154, 0.04398221650142131, 0.02857316302527202, 0.025407431055362806, 0.13034964449372566, 0.06451582270171252, 0.08564502482262082, 0.003019193415467636, 0.012575860878585088, 0.004698343763922308, 0.008765438280238569, 0.03825528622286145, 0.0019136361372582567, 0.004090717230979646, 0.0382515434178935, 9.999999999998899e-05, 0.13562757179752893, 0.06055760188436854, 0.15258049040208987, 0.10240074490510886, 0.09818368281811851, 0.13158509484718017, 0.10902542351827049, 0.09279316559059447, 0.10505849260827815, 0.45848654264265454, 0.4737017238026273, 0.4550358826603952, 0.4270540936076803, 0.4289334265225181, 0.4176673844647075, 0.49207896801944073, 0.39330272917150877, 0.45987538877326983, 0.026627014421755857, 0.01971447178877883, 0.04996966378903167, 0.12364262649911906, 0.07072975062149, 0.12749526169496295, 0.03700004568697257, 0.07201935017423533, 0.09259647407104643, 0.13541049004381933, 0.10390912150972542, 0.13092366309601344, 0.09855305120349966, 0.1375594015236007, 0.17323852450848076, 0.131396481764133, 0.18427806030716776, 0.22882035202666284, 0.16050819645668835, 0.14191339046471751, 0.23872562999303482, 0.21420479104886248, 0.17629945365919286, 0.2401282291025264, 0.14702360111324164, 0.20758737078364708, 0.25031446388480494, 0.1278397844860839, 0.16840546761572017, 0.11042357574156392, 0.27017904298088335, 0.07789578395005681, 0.11085554248711849, 0.1362340591825092, 0.10695261449817028, 0.23466216829150688, 0.2319578685333218, 0.19806270292376071, 0.20844473352674198, 0.21705618360683065, 0.22239370931990665, 0.24015297359237853, 0.2894396150619707, 0.2138827950927894, 0.2198131062127886, 0.17693144271123873, 0.1515470469831458, 0.174750704542056, 0.1562647459094143, 0.1692834524967748, 0.18249977725016175, 0.16969767451180628, 0.15706825170631933, 0.1625261167706511, 0.7671975525079154, 0.18143699967903704, 0.18285440116652996, 0.1682945493827237, 0.1207914665021157, 0.11448810678839272, 0.1070176662487543, 0.10899150130310808, 0.1596575689593348, 0.5589749829228507, 0.10267165755511809, 0.2156881728211032, 0.18894432844777598, 0.14410644545311113, 0.1462919902110138, 0.37740011885763214, 0.1412406562734011, 0.09354701096064488, 0.18370188414416333, 0.18215008656846943, 0.18450794640283508, 0.17920246837652065, 0.19238495457864202, 0.19384822867151863, 0.19729004163409558, 0.184725785253271, 0.19501652083407006, 0.1076476112598157, 0.10477757831776746, 0.09701274529705628, 0.10145734463367351, 0.06184947373942273, 0.09657518919494956, 0.06676505780749753, 0.061416368136544386, 0.0920641232827969]}, "mutation_prompt": null}
{"id": "ac8a443d-9211-4ffd-a1d1-99c8a4f79b9a", "solution": "import numpy as np\n\nclass AdaptiveGeneticAlgorithmEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        return population[np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2)]\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveGeneticAlgorithmEnhanced", "description": "A streamlined adaptive genetic algorithm with revised selection and mutation strategies for enhanced diversity management.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "metadata": {"aucs": [0.5434431149991508, 0.5539361961978395, 0.5445345164007165, 0.4881859840816686, 0.4715303732835835, 0.5715570644379415, 0.5123814023740748, 0.48904100786986004, 0.48126833664518376, 0.0001672799171099637, 0.016431712423112144, 9.999999999998899e-05, 9.999999999998899e-05, 0.042765279551932656, 9.999999999998899e-05, 9.999999999998899e-05, 0.04389567957358398, 9.999999999998899e-05, 0.09383707246950068, 0.08429924359285446, 0.0808911553370042, 0.09603800333873314, 0.07035508503716537, 0.11863242539214791, 0.07265626007997139, 0.0556391639262358, 0.09426508420653423, 0.03088502103152846, 0.027800339609724833, 0.036260195195846556, 0.055328249746288916, 0.006374857060383543, 0.026560025201733506, 0.04703277539525441, 0.014776729617261064, 0.019007843814258685, 0.19029331966870844, 0.1429138252029204, 0.19086074153214605, 0.11312608359973075, 0.19926317821883677, 0.11909195454934618, 0.17425301070930166, 0.1252659497394214, 0.14297823939232834, 0.3033693312903897, 0.28134813212736076, 0.25651280335592264, 0.30540067104311375, 0.26554654506356, 0.29048881386155634, 0.3002899659246525, 0.24386730766581444, 0.31301922452088904, 0.17296585684177457, 0.16533167985943054, 0.14155063573327176, 0.13961936671680164, 0.17289744812991215, 0.10363415066354575, 0.1264023275932472, 0.15230733558592624, 0.15814894147769432, 0.15440697564221173, 0.116194442201629, 0.1277113215852147, 0.15841619626303616, 0.1483348679874249, 0.13212662050528146, 0.20426766469802804, 0.3130749190965343, 0.17137466347149855, 0.26482263314704346, 0.1492081630163684, 0.1628013065620647, 0.3072534274756621, 0.17842800464115804, 0.12903304872838506, 0.17953147503842448, 0.13630601515639773, 0.1748912060265031, 0.0016320612907880783, 0.005156572127874126, 0.0035038247658274457, 0.009013832652537301, 0.08168425973964044, 0.025845278440932984, 9.999999999998899e-05, 0.050102332591847154, 0.0646847239573175, 0.09823312895613723, 0.060503021293927484, 0.08000440437280154, 0.04398221650142131, 0.02857316302527202, 0.025407431055362806, 0.13034964449372566, 0.06451582270171252, 0.08564502482262082, 0.003019193415467636, 0.012575860878585088, 0.004698343763922308, 0.008765438280238569, 0.03825528622286145, 0.0019136361372582567, 0.004090717230979646, 0.0382515434178935, 9.999999999998899e-05, 0.13562757179752893, 0.06055760188436854, 0.15258049040208987, 0.10240074490510886, 0.09818368281811851, 0.13158509484718017, 0.10902542351827049, 0.09279316559059447, 0.10505849260827815, 0.45848654264265454, 0.4737017238026273, 0.4550358826603952, 0.4270540936076803, 0.4289334265225181, 0.4176673844647075, 0.49207896801944073, 0.39330272917150877, 0.45987538877326983, 0.026627014421755857, 0.01971447178877883, 0.04996966378903167, 0.12364262649911906, 0.07072975062149, 0.12749526169496295, 0.03700004568697257, 0.07201935017423533, 0.09259647407104643, 0.13541049004381933, 0.10390912150972542, 0.13092366309601344, 0.09855305120349966, 0.1375594015236007, 0.17323852450848076, 0.131396481764133, 0.18427806030716776, 0.22882035202666284, 0.16050819645668835, 0.14191339046471751, 0.23872562999303482, 0.21420479104886248, 0.17629945365919286, 0.2401282291025264, 0.14702360111324164, 0.20758737078364708, 0.25031446388480494, 0.1278397844860839, 0.16840546761572017, 0.11042357574156392, 0.27017904298088335, 0.07789578395005681, 0.11085554248711849, 0.1362340591825092, 0.10695261449817028, 0.23466216829150688, 0.2319578685333218, 0.19806270292376071, 0.20844473352674198, 0.21705618360683065, 0.22239370931990665, 0.24015297359237853, 0.2894396150619707, 0.2138827950927894, 0.2198131062127886, 0.17693144271123873, 0.1515470469831458, 0.174750704542056, 0.1562647459094143, 0.1692834524967748, 0.18249977725016175, 0.16969767451180628, 0.15706825170631933, 0.1625261167706511, 0.7671975525079154, 0.18143699967903704, 0.18285440116652996, 0.1682945493827237, 0.1207914665021157, 0.11448810678839272, 0.1070176662487543, 0.10899150130310808, 0.1596575689593348, 0.5589749829228507, 0.10267165755511809, 0.2156881728211032, 0.18894432844777598, 0.14410644545311113, 0.1462919902110138, 0.37740011885763214, 0.1412406562734011, 0.09354701096064488, 0.18370188414416333, 0.18215008656846943, 0.18450794640283508, 0.17920246837652065, 0.19238495457864202, 0.19384822867151863, 0.19729004163409558, 0.184725785253271, 0.19501652083407006, 0.1076476112598157, 0.10477757831776746, 0.09701274529705628, 0.10145734463367351, 0.06184947373942273, 0.09657518919494956, 0.06676505780749753, 0.061416368136544386, 0.0920641232827969]}, "mutation_prompt": null}
{"id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 54, "fitness": 0.18110069920710006, "feedback": "The algorithm EnhancedAdaptiveGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.14.", "error": "", "parent_id": "be63803e-aa28-43de-9d1a-3daaccde6d04", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "9f46b326-b9d4-4783-a5e7-162f3b4f1eb4", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass EnhancedEfficientGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        weights = 1.0 / (np.argsort(fitness) + 1)\n        selected_indices = np.random.choice(len(fitness), self.population_size // 2 - elite_size, p=weights/weights.sum())\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate_individual(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        with ThreadPoolExecutor(max_workers=4) as executor:\n            for _ in range(self.population_size // 2):\n                parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n                child = self.crossover(parent1, parent2)\n                future = executor.submit(self.mutate_individual, child)\n                new_population.append(future.result())\n                self.current_evals += 1\n                if self.current_evals >= self.budget:\n                    break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedEfficientGeneticAlgorithm", "description": "Enhanced efficiency through refined selection and parallel mutation operations for improved convergence.", "configspace": "", "generation": 55, "fitness": 0.1356255884053191, "feedback": "The algorithm EnhancedEfficientGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.4136416107191966, 0.41723721552631965, 0.42901179658351485, 0.3882123102599213, 0.37849758814245615, 0.40137021641412296, 0.4229142843360265, 0.4318193423743182, 0.33020544147209385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012187782958694715, 9.999999999998899e-05, 9.999999999998899e-05, 0.014134152454860271, 9.999999999998899e-05, 0.05118525684126052, 0.05443373373054583, 0.028114163375834722, 0.04795194097910771, 0.0825125379836229, 0.037107159049791116, 0.061111163524083856, 0.07884462638494116, 0.05557286819691598, 0.033601921153041614, 0.07936015354474091, 0.022475803842754383, 0.028129916188605053, 0.014840242652301994, 0.018512909610211348, 0.014763392921912755, 0.03242139604668626, 0.0062775635840968125, 0.07661897733947809, 0.05792890022836017, 0.0715819620644026, 0.06546395189305709, 0.07452425343556246, 0.0752583671059961, 0.07176449996213907, 0.08311868704591618, 0.08185868637150051, 0.19368089734174343, 0.2577701628194461, 0.07905804216845991, 0.16934346194248262, 0.21111546491854094, 0.1030654781624647, 0.1668082254642762, 0.2086414910332518, 0.21129292271335698, 0.12102735934820708, 0.18933707289384816, 0.16136663639842097, 0.15603717567434594, 0.18920415812765246, 0.05146525717250494, 0.12064377018663996, 0.13326076394644082, 0.13397545522304266, 0.15965754634940854, 0.15095355168119873, 0.11036544828934491, 0.10528003183734291, 0.07812088984679011, 0.15117886341263398, 0.18480091340912808, 0.20142723652567274, 0.12848303184930288, 0.23837249121063553, 0.1280943640142872, 0.11649304685339523, 0.12031972786525313, 0.13217796050131925, 0.16930194080712935, 0.2112953564243153, 0.1462830798058321, 0.17651708716603376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01986821253428317, 9.999999999998899e-05, 0.002858726174495896, 9.999999999998899e-05, 0.025981615885014797, 0.17122486476871468, 0.07189632389597245, 0.07825189949262279, 0.03442541275560673, 0.051567746415452365, 0.04104389708816092, 0.09546170815918742, 0.07586591984306557, 0.06853276467547331, 0.0070303104870872435, 0.010436909185767007, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010334785029435078, 0.11471346720666353, 0.07945660545581579, 0.05569917010633385, 0.04985416280921595, 0.10670839343926675, 0.0770363102489604, 0.053280782095482926, 0.05837346036628255, 0.07328829176628637, 0.37670731042794714, 0.42405348052836056, 0.38986940689134875, 0.33106641309526375, 0.37258420783294466, 0.3984998570649294, 0.40957957086585983, 0.4153350423499853, 0.42798648898729497, 0.010499847302284593, 0.006556836107497799, 0.02198412468535549, 0.04605722014512981, 0.014520465518636949, 0.040410408600229486, 0.04797551215056406, 0.03154890848594971, 0.035076891738314186, 0.1276351286001678, 0.158948658797481, 0.17194502386500354, 0.13094673225268538, 0.19807676603746527, 0.11532667650770889, 0.17482251908712276, 0.1616679265259129, 0.14658419099117814, 0.12535231229614585, 0.18942390971124856, 0.1729593933874214, 0.13800672315110074, 0.24553255340255942, 0.14550050890696165, 0.13031621975408447, 0.17377774300845283, 0.1299089437293136, 0.07528124165771533, 0.06723104609228758, 0.08398582550377798, 0.11667388267985912, 0.14479095847294632, 0.08858819807776785, 0.0837317855149382, 0.10354613470414209, 0.06752313547399458, 0.22567548992854658, 0.19495606314434533, 0.19981985870333818, 0.2271543378708083, 0.20822766792190206, 0.2099427571211876, 0.21659620398652102, 0.2151557531495486, 0.22072403774169402, 0.16267348721197028, 0.16830571314029164, 0.1726474512946785, 0.15443929696455505, 0.1664114941617978, 0.1751857198245802, 0.16966848064745665, 0.1625958226141423, 0.1541068748831642, 0.6019167327638555, 0.17351596841503214, 0.4154153230737331, 0.11523964040737378, 0.16107267591562136, 0.19287418188331784, 0.14869932990325996, 0.10511484148144368, 0.14950806750109114, 0.41004944125278897, 0.1671029827766164, 0.39756015373294584, 0.1600319832513134, 0.1289298619046393, 0.166304026334278, 0.15730974731434832, 0.1613466207817863, 0.2295203223385287, 0.1896192340277303, 0.2057701774642584, 0.19214717776895585, 0.18509300349154678, 0.1790651941334851, 0.17761667477646625, 0.18588551980767754, 0.1991213791509051, 0.1776156378839271, 0.04577638610541657, 0.0958405880373715, 0.09841218538503504, 0.05349205592595352, 0.07022394872711324, 0.06510457224330035, 0.06466380753335821, 0.08024994236827077, 0.0814260939702317]}, "mutation_prompt": null}
{"id": "96a72da5-07ea-4350-9843-9dac3e64ee1f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "51545186-3793-44a7-932d-33f278f205ae", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "8681e250-2942-4bd9-b26f-094437147e6d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "041134fe-7c9b-470a-9381-6f352b302563", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "a695c6ce-eaa4-4822-8e2e-6316beb059b6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "619068fc-90a3-4a6c-80f3-75e9d6137c68", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "d87ccf09-0643-4cd2-ac4d-6bc0b3e0e17c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "6a8293e4-5896-4726-a68d-96af4e97c0cf", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "1da4858c-0c74-499a-abc4-cd31848289d7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "ac708974-f1af-4d29-a44c-4793639a4f44", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "386df778-3b5d-48b2-aa26-669c9ef964ad", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "6c6619a0-3356-4bd9-a3af-b63963a84e49", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "64ff1bc3-252e-48a2-8ebe-556f3e897ec0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "a1b87edb-0e07-40f2-a38c-71a55a9faaec", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        return (parent1 + parent2) / 2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced strategic elitism and dynamic mutation scaling for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.566753115243364, 0.5328266584939376, 0.5697663862435689, 0.49868917984665584, 0.5319826423743539, 0.5131346874395459, 0.5345697432267147, 0.5200636563896137, 0.5140912721166265, 0.0237236849145831, 0.04682347006133347, 9.999999999998899e-05, 9.999999999998899e-05, 0.0923764417444296, 9.999999999998899e-05, 9.999999999998899e-05, 0.017937741898865545, 9.999999999998899e-05, 0.10740766680525016, 0.08662874912994922, 0.09358705945274692, 0.10236151000041283, 0.12644153131620384, 0.1266865052907602, 0.07598581952099126, 0.09387000220950326, 0.10725333203963694, 0.026605197303720907, 0.021480499431239863, 0.026091316310860257, 0.05302105582907368, 0.013055409676422491, 0.025609731975883343, 0.05138630952275147, 0.05288310429833931, 0.021255432751631664, 0.3058533643253496, 0.33372933094254464, 0.40185913971751364, 0.1517208706159765, 0.3590179984420201, 0.281852592798024, 0.43854835288808547, 0.5086813375901696, 0.3987633968410095, 0.315737961794602, 0.2932769215743166, 0.3057183760335126, 0.3149230875443706, 0.2927736173754477, 0.3168343223548836, 0.31804597332440343, 0.29041454484952534, 0.3336105127857464, 0.17122759321681535, 0.13258973507006433, 0.14147908468695858, 0.1952815083113807, 0.25517943430651613, 0.18788211238852204, 0.10038552662557942, 0.15369806542032516, 0.159073368529003, 0.19971227456608853, 0.11857239070659875, 0.13905465683359086, 0.17658170665422657, 0.2877180475232419, 0.18706770791689997, 0.13084692580059476, 0.24494700107342327, 0.21856662123925408, 0.2566081681607547, 0.117243401436394, 0.2026820654739072, 0.21526480102028211, 0.20099378984505678, 0.18189817210361847, 0.2152596060369799, 0.21435895093002943, 0.27583476455064315, 0.04704300778766124, 9.999999999998899e-05, 9.999999999998899e-05, 0.02660245614461021, 0.07151582960215963, 0.005109113517999475, 0.04812261015551955, 0.04051439306771498, 0.049704597906975456, 0.1598470641500631, 0.068882505575942, 0.07456941645736259, 0.03940181414603172, 0.02407125701419266, 0.040995466325064234, 0.10063645872775484, 0.0621799653604892, 0.08165775623619143, 0.001845369124875651, 0.012307392933923578, 0.015818983240332818, 0.003642699390317694, 0.027641742640177158, 0.06664405427916209, 0.013117214971189783, 0.008273471145476607, 0.03556490499970699, 0.1301579288018172, 0.13195221297387505, 0.12116640558903291, 0.10880149787090632, 0.12435513739964277, 0.13709073578749287, 0.14128671678754523, 0.09857397791533495, 0.11006672217242852, 0.44579869810981954, 0.4999111159891034, 0.4820707032161998, 0.45640464162948036, 0.42725884618613086, 0.4391222045935761, 0.5199063159438856, 0.4379452865129917, 0.4682651915832273, 0.03445299838502558, 0.028840672174701654, 0.03257507689464001, 0.08675845862097908, 0.05428848623261584, 0.11266024395378194, 0.059244402945263785, 0.07301455527771228, 0.13346029854370767, 0.13524566677604422, 0.1781867466814936, 0.1842486823071562, 0.10377705603626675, 0.1804665589130029, 0.12508840122082443, 0.1972415795194663, 0.31629715578316886, 0.16477771488907822, 0.13080909323067202, 0.14062507491715492, 0.2971957665767274, 0.3465995883179951, 0.2016202549396353, 0.21274150101986755, 0.1524359223694488, 0.26478208743301435, 0.18936644178850448, 0.13889181867345546, 0.13720486241885665, 0.1361398564794808, 0.2319224752969128, 0.08875043025758855, 0.22281101194243613, 0.1357226183638568, 0.14739395678467548, 0.11355495155250683, 0.22569249234144306, 0.20042371326718533, 0.22118776576974708, 0.2424636931376627, 0.24572239884127745, 0.19713001536899732, 0.23773238413261344, 0.22670247571332824, 0.23178129293801708, 0.16997383647899855, 0.15461269473775097, 0.1628413310280028, 0.1671040969719092, 0.16952417957431354, 0.17104707773962635, 0.16644079635685816, 0.15609173098223095, 0.1585625346808076, 0.18512516459274608, 0.18377402213336813, 0.18693297461013603, 0.1699248778357918, 0.1207914665021157, 0.19617511391987386, 0.10856339744467858, 0.11623837877074461, 0.10886210199353064, 0.6818596145124856, 0.19914099620136694, 0.16341160124902454, 0.16750756220884455, 0.16330415125906672, 0.1533607238201221, 0.09360151581992127, 0.48453390517561823, 0.46329093303674695, 0.17732483242073704, 0.18856571905345176, 0.18446527883695119, 0.18046632520309813, 0.18717451754169134, 0.19469653948074006, 0.1925198689648453, 0.19290388489687227, 0.19869822011982785, 0.09479232640581248, 0.10039297430316496, 0.11053703714551721, 0.0947339531137179, 0.09724162013826321, 0.10017889535024438, 0.0930837507729364, 0.07742051912968184, 0.0896673081447873]}, "mutation_prompt": null}
{"id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Integrated adaptive crossover strategy and enhanced diversity management for efficiency and convergence improvement.", "configspace": "", "generation": 70, "fitness": 0.2018737078446233, "feedback": "The algorithm EnhancedAdaptiveGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "ad906ff9-8674-49bb-8f93-23faa6eef795", "metadata": {"aucs": [0.5480005768410645, 0.5348310074574224, 0.5378704607187934, 0.5013859642396146, 0.5424631461966187, 0.5209489241686898, 0.5289103034425233, 0.5532857043882637, 0.5036290579626777, 0.03766942503816628, 0.059180769900535224, 0.0028310907264105234, 9.999999999998899e-05, 0.0072256299880758545, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026450240556578075, 9.999999999998899e-05, 0.13450651329749141, 0.11898348563130856, 0.09780011814285139, 0.09779195566738674, 0.1272346534393911, 0.11287283679375704, 0.1339710432607144, 0.1351590513870069, 0.11101847821309185, 0.049527374317967054, 0.04997631127656754, 0.03738906424032362, 0.08673548095254868, 0.0461033001973945, 0.06409285206579096, 0.0820266060984659, 0.06478620443511429, 0.01909084493718438, 0.665787678265548, 0.5256575600789496, 0.5141317354434982, 0.291428777829583, 0.528295985405792, 0.530015279138996, 0.524666524973787, 0.24479801852511163, 0.47848131588445675, 0.3186647399283955, 0.30949172119188917, 0.2985868384469643, 0.3247074475610856, 0.2965998431866599, 0.3074256711390929, 0.32998960589005166, 0.27970112083290743, 0.3344803186836397, 0.1536603735373634, 0.16288119335608842, 0.11536034385670846, 0.16897429219126825, 0.5680426895714242, 0.7167712285257442, 0.12086980914870005, 0.15146015897186915, 0.2365238140790491, 0.16892691960049266, 0.23852345521437568, 0.17829819489372822, 0.16951938707974512, 0.2051528541150578, 0.15660054274967283, 0.16864517110194133, 0.13630837094103065, 0.18559168473515641, 0.2025838989389671, 0.30592040907864015, 0.1753942023298246, 0.29847090560903966, 0.21875793505590835, 0.1974171727293137, 0.21264434200429783, 0.18762226647410196, 0.2431012172670738, 0.012713416538151057, 0.007028147780829608, 0.04212294339284506, 0.033204884402054824, 0.05283649647742472, 0.034896067734801695, 9.999999999998899e-05, 0.06548218291362118, 0.10934509899302647, 0.09408927886825313, 0.05220175104433111, 0.10771066490924208, 0.024782455469249398, 0.001435665371398498, 0.027919120526361474, 0.1050730286870567, 0.06328199760247621, 0.06394965311029299, 0.012764393551428332, 0.010217450693585484, 0.08456911358777941, 0.0025875710754126313, 0.018892116855403596, 0.012333408714412464, 0.0652676232239654, 0.023265397634810503, 0.0423660565103372, 0.1207012814441043, 0.08034942612929097, 0.14285960843840384, 0.1195884385110012, 0.17228934279863917, 0.14800239040920493, 0.12069461184095054, 0.10514991487739478, 0.12110900262809843, 0.4783173824144289, 0.4811208425792598, 0.44803255270523346, 0.46391685848689856, 0.4657008634915888, 0.4553161411684262, 0.4801962905371906, 0.4198813453992766, 0.4590070946096678, 0.08778259265893507, 0.09974101116229594, 0.05025702896939288, 0.16183710288845654, 0.0857532752269855, 0.0809910617471774, 0.06260618762073955, 0.09778628005226397, 0.09265448419251476, 0.24849870656647977, 0.20537344838393945, 0.2930127978124629, 0.2033659035641252, 0.194416650859908, 0.13483125653557493, 0.269210261409939, 0.31802552067150247, 0.18389621802271505, 0.158962879956285, 0.147550172721862, 0.227735894837637, 0.2206963035479601, 0.2368848263933161, 0.22011734891272394, 0.17061516091551565, 0.35118364940704705, 0.17684665990720294, 0.09210128532166384, 0.2846252371300759, 0.12986342509015525, 0.2519985659436176, 0.15027197414893212, 0.23942848290484398, 0.1264453351758439, 0.2835252041831441, 0.21204543176511448, 0.2171487597640921, 0.26500858899275703, 0.21525741846451196, 0.22295510791485917, 0.22000490719831045, 0.23873510743497328, 0.21712915801101884, 0.25384468464416987, 0.21952861695435388, 0.16656101483963448, 0.16581118985945742, 0.16289867104305555, 0.15706859789462557, 0.20504790907935677, 0.16753795346004008, 0.17158758207903724, 0.16573107891157068, 0.16284942723146634, 0.1802793025863717, 0.18749433632442847, 0.18568207892103772, 0.8150881162208362, 0.19767881374862717, 0.14825906430759916, 0.1070176662487543, 0.11980106309956662, 0.07815335243081445, 0.5581526768063988, 0.5228868645310611, 0.5883747629964186, 0.16418188771251352, 0.1641823065462742, 0.14879106385850405, 0.09472789125867953, 0.10461299695168635, 0.45554754340933346, 0.19705185825941185, 0.1952533670740152, 0.1903948329788836, 0.19090785217053796, 0.19409580663932957, 0.19301419014506338, 0.18501490028519663, 0.18877114914533433, 0.20829279779450216, 0.1014967772453671, 0.0963763151039293, 0.0949563168240869, 0.09420621531406503, 0.07742417545899793, 0.09318696492203649, 0.10048658930072363, 0.0979042039024638, 0.08938574435067526]}, "mutation_prompt": null}
{"id": "eeffb4f8-c7ea-496a-ad28-a6b1bda4020f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Integrated adaptive crossover strategy and enhanced diversity management for efficiency and convergence improvement.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.5480005768410645, 0.5348310074574224, 0.5378704607187934, 0.5013859642396146, 0.5424631461966187, 0.5209489241686898, 0.5289103034425233, 0.5532857043882637, 0.5036290579626777, 0.03766942503816628, 0.059180769900535224, 0.0028310907264105234, 9.999999999998899e-05, 0.0072256299880758545, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026450240556578075, 9.999999999998899e-05, 0.13450651329749141, 0.11898348563130856, 0.09780011814285139, 0.09779195566738674, 0.1272346534393911, 0.11287283679375704, 0.1339710432607144, 0.1351590513870069, 0.11101847821309185, 0.049527374317967054, 0.04997631127656754, 0.03738906424032362, 0.08673548095254868, 0.0461033001973945, 0.06409285206579096, 0.0820266060984659, 0.06478620443511429, 0.01909084493718438, 0.665787678265548, 0.5256575600789496, 0.5141317354434982, 0.291428777829583, 0.528295985405792, 0.530015279138996, 0.524666524973787, 0.24479801852511163, 0.47848131588445675, 0.3186647399283955, 0.30949172119188917, 0.2985868384469643, 0.3247074475610856, 0.2965998431866599, 0.3074256711390929, 0.32998960589005166, 0.27970112083290743, 0.3344803186836397, 0.1536603735373634, 0.16288119335608842, 0.11536034385670846, 0.16897429219126825, 0.5680426895714242, 0.7167712285257442, 0.12086980914870005, 0.15146015897186915, 0.2365238140790491, 0.16892691960049266, 0.23852345521437568, 0.17829819489372822, 0.16951938707974512, 0.2051528541150578, 0.15660054274967283, 0.16864517110194133, 0.13630837094103065, 0.18559168473515641, 0.2025838989389671, 0.30592040907864015, 0.1753942023298246, 0.29847090560903966, 0.21875793505590835, 0.1974171727293137, 0.21264434200429783, 0.18762226647410196, 0.2431012172670738, 0.012713416538151057, 0.007028147780829608, 0.04212294339284506, 0.033204884402054824, 0.05283649647742472, 0.034896067734801695, 9.999999999998899e-05, 0.06548218291362118, 0.10934509899302647, 0.09408927886825313, 0.05220175104433111, 0.10771066490924208, 0.024782455469249398, 0.001435665371398498, 0.027919120526361474, 0.1050730286870567, 0.06328199760247621, 0.06394965311029299, 0.012764393551428332, 0.010217450693585484, 0.08456911358777941, 0.0025875710754126313, 0.018892116855403596, 0.012333408714412464, 0.0652676232239654, 0.023265397634810503, 0.0423660565103372, 0.1207012814441043, 0.08034942612929097, 0.14285960843840384, 0.1195884385110012, 0.17228934279863917, 0.14800239040920493, 0.12069461184095054, 0.10514991487739478, 0.12110900262809843, 0.4783173824144289, 0.4811208425792598, 0.44803255270523346, 0.46391685848689856, 0.4657008634915888, 0.4553161411684262, 0.4801962905371906, 0.4198813453992766, 0.4590070946096678, 0.08778259265893507, 0.09974101116229594, 0.05025702896939288, 0.16183710288845654, 0.0857532752269855, 0.0809910617471774, 0.06260618762073955, 0.09778628005226397, 0.09265448419251476, 0.24849870656647977, 0.20537344838393945, 0.2930127978124629, 0.2033659035641252, 0.194416650859908, 0.13483125653557493, 0.269210261409939, 0.31802552067150247, 0.18389621802271505, 0.158962879956285, 0.147550172721862, 0.227735894837637, 0.2206963035479601, 0.2368848263933161, 0.22011734891272394, 0.17061516091551565, 0.35118364940704705, 0.17684665990720294, 0.09210128532166384, 0.2846252371300759, 0.12986342509015525, 0.2519985659436176, 0.15027197414893212, 0.23942848290484398, 0.1264453351758439, 0.2835252041831441, 0.21204543176511448, 0.2171487597640921, 0.26500858899275703, 0.21525741846451196, 0.22295510791485917, 0.22000490719831045, 0.23873510743497328, 0.21712915801101884, 0.25384468464416987, 0.21952861695435388, 0.16656101483963448, 0.16581118985945742, 0.16289867104305555, 0.15706859789462557, 0.20504790907935677, 0.16753795346004008, 0.17158758207903724, 0.16573107891157068, 0.16284942723146634, 0.1802793025863717, 0.18749433632442847, 0.18568207892103772, 0.8150881162208362, 0.19767881374862717, 0.14825906430759916, 0.1070176662487543, 0.11980106309956662, 0.07815335243081445, 0.5581526768063988, 0.5228868645310611, 0.5883747629964186, 0.16418188771251352, 0.1641823065462742, 0.14879106385850405, 0.09472789125867953, 0.10461299695168635, 0.45554754340933346, 0.19705185825941185, 0.1952533670740152, 0.1903948329788836, 0.19090785217053796, 0.19409580663932957, 0.19301419014506338, 0.18501490028519663, 0.18877114914533433, 0.20829279779450216, 0.1014967772453671, 0.0963763151039293, 0.0949563168240869, 0.09420621531406503, 0.07742417545899793, 0.09318696492203649, 0.10048658930072363, 0.0979042039024638, 0.08938574435067526]}, "mutation_prompt": null}
{"id": "69d65460-6865-41d1-9e88-dbabdfea8746", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Integrated adaptive crossover strategy and enhanced diversity management for efficiency and convergence improvement.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.5480005768410645, 0.5348310074574224, 0.5378704607187934, 0.5013859642396146, 0.5424631461966187, 0.5209489241686898, 0.5289103034425233, 0.5532857043882637, 0.5036290579626777, 0.03766942503816628, 0.059180769900535224, 0.0028310907264105234, 9.999999999998899e-05, 0.0072256299880758545, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026450240556578075, 9.999999999998899e-05, 0.13450651329749141, 0.11898348563130856, 0.09780011814285139, 0.09779195566738674, 0.1272346534393911, 0.11287283679375704, 0.1339710432607144, 0.1351590513870069, 0.11101847821309185, 0.049527374317967054, 0.04997631127656754, 0.03738906424032362, 0.08673548095254868, 0.0461033001973945, 0.06409285206579096, 0.0820266060984659, 0.06478620443511429, 0.01909084493718438, 0.665787678265548, 0.5256575600789496, 0.5141317354434982, 0.291428777829583, 0.528295985405792, 0.530015279138996, 0.524666524973787, 0.24479801852511163, 0.47848131588445675, 0.3186647399283955, 0.30949172119188917, 0.2985868384469643, 0.3247074475610856, 0.2965998431866599, 0.3074256711390929, 0.32998960589005166, 0.27970112083290743, 0.3344803186836397, 0.1536603735373634, 0.16288119335608842, 0.11536034385670846, 0.16897429219126825, 0.5680426895714242, 0.7167712285257442, 0.12086980914870005, 0.15146015897186915, 0.2365238140790491, 0.16892691960049266, 0.23852345521437568, 0.17829819489372822, 0.16951938707974512, 0.2051528541150578, 0.15660054274967283, 0.16864517110194133, 0.13630837094103065, 0.18559168473515641, 0.2025838989389671, 0.30592040907864015, 0.1753942023298246, 0.29847090560903966, 0.21875793505590835, 0.1974171727293137, 0.21264434200429783, 0.18762226647410196, 0.2431012172670738, 0.012713416538151057, 0.007028147780829608, 0.04212294339284506, 0.033204884402054824, 0.05283649647742472, 0.034896067734801695, 9.999999999998899e-05, 0.06548218291362118, 0.10934509899302647, 0.09408927886825313, 0.05220175104433111, 0.10771066490924208, 0.024782455469249398, 0.001435665371398498, 0.027919120526361474, 0.1050730286870567, 0.06328199760247621, 0.06394965311029299, 0.012764393551428332, 0.010217450693585484, 0.08456911358777941, 0.0025875710754126313, 0.018892116855403596, 0.012333408714412464, 0.0652676232239654, 0.023265397634810503, 0.0423660565103372, 0.1207012814441043, 0.08034942612929097, 0.14285960843840384, 0.1195884385110012, 0.17228934279863917, 0.14800239040920493, 0.12069461184095054, 0.10514991487739478, 0.12110900262809843, 0.4783173824144289, 0.4811208425792598, 0.44803255270523346, 0.46391685848689856, 0.4657008634915888, 0.4553161411684262, 0.4801962905371906, 0.4198813453992766, 0.4590070946096678, 0.08778259265893507, 0.09974101116229594, 0.05025702896939288, 0.16183710288845654, 0.0857532752269855, 0.0809910617471774, 0.06260618762073955, 0.09778628005226397, 0.09265448419251476, 0.24849870656647977, 0.20537344838393945, 0.2930127978124629, 0.2033659035641252, 0.194416650859908, 0.13483125653557493, 0.269210261409939, 0.31802552067150247, 0.18389621802271505, 0.158962879956285, 0.147550172721862, 0.227735894837637, 0.2206963035479601, 0.2368848263933161, 0.22011734891272394, 0.17061516091551565, 0.35118364940704705, 0.17684665990720294, 0.09210128532166384, 0.2846252371300759, 0.12986342509015525, 0.2519985659436176, 0.15027197414893212, 0.23942848290484398, 0.1264453351758439, 0.2835252041831441, 0.21204543176511448, 0.2171487597640921, 0.26500858899275703, 0.21525741846451196, 0.22295510791485917, 0.22000490719831045, 0.23873510743497328, 0.21712915801101884, 0.25384468464416987, 0.21952861695435388, 0.16656101483963448, 0.16581118985945742, 0.16289867104305555, 0.15706859789462557, 0.20504790907935677, 0.16753795346004008, 0.17158758207903724, 0.16573107891157068, 0.16284942723146634, 0.1802793025863717, 0.18749433632442847, 0.18568207892103772, 0.8150881162208362, 0.19767881374862717, 0.14825906430759916, 0.1070176662487543, 0.11980106309956662, 0.07815335243081445, 0.5581526768063988, 0.5228868645310611, 0.5883747629964186, 0.16418188771251352, 0.1641823065462742, 0.14879106385850405, 0.09472789125867953, 0.10461299695168635, 0.45554754340933346, 0.19705185825941185, 0.1952533670740152, 0.1903948329788836, 0.19090785217053796, 0.19409580663932957, 0.19301419014506338, 0.18501490028519663, 0.18877114914533433, 0.20829279779450216, 0.1014967772453671, 0.0963763151039293, 0.0949563168240869, 0.09420621531406503, 0.07742417545899793, 0.09318696492203649, 0.10048658930072363, 0.0979042039024638, 0.08938574435067526]}, "mutation_prompt": null}
{"id": "2a3421a0-3537-4d1d-8d3a-745ca111c206", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Integrated adaptive crossover strategy and enhanced diversity management for efficiency and convergence improvement.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.5480005768410645, 0.5348310074574224, 0.5378704607187934, 0.5013859642396146, 0.5424631461966187, 0.5209489241686898, 0.5289103034425233, 0.5532857043882637, 0.5036290579626777, 0.03766942503816628, 0.059180769900535224, 0.0028310907264105234, 9.999999999998899e-05, 0.0072256299880758545, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026450240556578075, 9.999999999998899e-05, 0.13450651329749141, 0.11898348563130856, 0.09780011814285139, 0.09779195566738674, 0.1272346534393911, 0.11287283679375704, 0.1339710432607144, 0.1351590513870069, 0.11101847821309185, 0.049527374317967054, 0.04997631127656754, 0.03738906424032362, 0.08673548095254868, 0.0461033001973945, 0.06409285206579096, 0.0820266060984659, 0.06478620443511429, 0.01909084493718438, 0.665787678265548, 0.5256575600789496, 0.5141317354434982, 0.291428777829583, 0.528295985405792, 0.530015279138996, 0.524666524973787, 0.24479801852511163, 0.47848131588445675, 0.3186647399283955, 0.30949172119188917, 0.2985868384469643, 0.3247074475610856, 0.2965998431866599, 0.3074256711390929, 0.32998960589005166, 0.27970112083290743, 0.3344803186836397, 0.1536603735373634, 0.16288119335608842, 0.11536034385670846, 0.16897429219126825, 0.5680426895714242, 0.7167712285257442, 0.12086980914870005, 0.15146015897186915, 0.2365238140790491, 0.16892691960049266, 0.23852345521437568, 0.17829819489372822, 0.16951938707974512, 0.2051528541150578, 0.15660054274967283, 0.16864517110194133, 0.13630837094103065, 0.18559168473515641, 0.2025838989389671, 0.30592040907864015, 0.1753942023298246, 0.29847090560903966, 0.21875793505590835, 0.1974171727293137, 0.21264434200429783, 0.18762226647410196, 0.2431012172670738, 0.012713416538151057, 0.007028147780829608, 0.04212294339284506, 0.033204884402054824, 0.05283649647742472, 0.034896067734801695, 9.999999999998899e-05, 0.06548218291362118, 0.10934509899302647, 0.09408927886825313, 0.05220175104433111, 0.10771066490924208, 0.024782455469249398, 0.001435665371398498, 0.027919120526361474, 0.1050730286870567, 0.06328199760247621, 0.06394965311029299, 0.012764393551428332, 0.010217450693585484, 0.08456911358777941, 0.0025875710754126313, 0.018892116855403596, 0.012333408714412464, 0.0652676232239654, 0.023265397634810503, 0.0423660565103372, 0.1207012814441043, 0.08034942612929097, 0.14285960843840384, 0.1195884385110012, 0.17228934279863917, 0.14800239040920493, 0.12069461184095054, 0.10514991487739478, 0.12110900262809843, 0.4783173824144289, 0.4811208425792598, 0.44803255270523346, 0.46391685848689856, 0.4657008634915888, 0.4553161411684262, 0.4801962905371906, 0.4198813453992766, 0.4590070946096678, 0.08778259265893507, 0.09974101116229594, 0.05025702896939288, 0.16183710288845654, 0.0857532752269855, 0.0809910617471774, 0.06260618762073955, 0.09778628005226397, 0.09265448419251476, 0.24849870656647977, 0.20537344838393945, 0.2930127978124629, 0.2033659035641252, 0.194416650859908, 0.13483125653557493, 0.269210261409939, 0.31802552067150247, 0.18389621802271505, 0.158962879956285, 0.147550172721862, 0.227735894837637, 0.2206963035479601, 0.2368848263933161, 0.22011734891272394, 0.17061516091551565, 0.35118364940704705, 0.17684665990720294, 0.09210128532166384, 0.2846252371300759, 0.12986342509015525, 0.2519985659436176, 0.15027197414893212, 0.23942848290484398, 0.1264453351758439, 0.2835252041831441, 0.21204543176511448, 0.2171487597640921, 0.26500858899275703, 0.21525741846451196, 0.22295510791485917, 0.22000490719831045, 0.23873510743497328, 0.21712915801101884, 0.25384468464416987, 0.21952861695435388, 0.16656101483963448, 0.16581118985945742, 0.16289867104305555, 0.15706859789462557, 0.20504790907935677, 0.16753795346004008, 0.17158758207903724, 0.16573107891157068, 0.16284942723146634, 0.1802793025863717, 0.18749433632442847, 0.18568207892103772, 0.8150881162208362, 0.19767881374862717, 0.14825906430759916, 0.1070176662487543, 0.11980106309956662, 0.07815335243081445, 0.5581526768063988, 0.5228868645310611, 0.5883747629964186, 0.16418188771251352, 0.1641823065462742, 0.14879106385850405, 0.09472789125867953, 0.10461299695168635, 0.45554754340933346, 0.19705185825941185, 0.1952533670740152, 0.1903948329788836, 0.19090785217053796, 0.19409580663932957, 0.19301419014506338, 0.18501490028519663, 0.18877114914533433, 0.20829279779450216, 0.1014967772453671, 0.0963763151039293, 0.0949563168240869, 0.09420621531406503, 0.07742417545899793, 0.09318696492203649, 0.10048658930072363, 0.0979042039024638, 0.08938574435067526]}, "mutation_prompt": null}
{"id": "2258b1d7-4bbc-4720-af5d-223ac661975b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Integrated adaptive crossover strategy and enhanced diversity management for efficiency and convergence improvement.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.5480005768410645, 0.5348310074574224, 0.5378704607187934, 0.5013859642396146, 0.5424631461966187, 0.5209489241686898, 0.5289103034425233, 0.5532857043882637, 0.5036290579626777, 0.03766942503816628, 0.059180769900535224, 0.0028310907264105234, 9.999999999998899e-05, 0.0072256299880758545, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026450240556578075, 9.999999999998899e-05, 0.13450651329749141, 0.11898348563130856, 0.09780011814285139, 0.09779195566738674, 0.1272346534393911, 0.11287283679375704, 0.1339710432607144, 0.1351590513870069, 0.11101847821309185, 0.049527374317967054, 0.04997631127656754, 0.03738906424032362, 0.08673548095254868, 0.0461033001973945, 0.06409285206579096, 0.0820266060984659, 0.06478620443511429, 0.01909084493718438, 0.665787678265548, 0.5256575600789496, 0.5141317354434982, 0.291428777829583, 0.528295985405792, 0.530015279138996, 0.524666524973787, 0.24479801852511163, 0.47848131588445675, 0.3186647399283955, 0.30949172119188917, 0.2985868384469643, 0.3247074475610856, 0.2965998431866599, 0.3074256711390929, 0.32998960589005166, 0.27970112083290743, 0.3344803186836397, 0.1536603735373634, 0.16288119335608842, 0.11536034385670846, 0.16897429219126825, 0.5680426895714242, 0.7167712285257442, 0.12086980914870005, 0.15146015897186915, 0.2365238140790491, 0.16892691960049266, 0.23852345521437568, 0.17829819489372822, 0.16951938707974512, 0.2051528541150578, 0.15660054274967283, 0.16864517110194133, 0.13630837094103065, 0.18559168473515641, 0.2025838989389671, 0.30592040907864015, 0.1753942023298246, 0.29847090560903966, 0.21875793505590835, 0.1974171727293137, 0.21264434200429783, 0.18762226647410196, 0.2431012172670738, 0.012713416538151057, 0.007028147780829608, 0.04212294339284506, 0.033204884402054824, 0.05283649647742472, 0.034896067734801695, 9.999999999998899e-05, 0.06548218291362118, 0.10934509899302647, 0.09408927886825313, 0.05220175104433111, 0.10771066490924208, 0.024782455469249398, 0.001435665371398498, 0.027919120526361474, 0.1050730286870567, 0.06328199760247621, 0.06394965311029299, 0.012764393551428332, 0.010217450693585484, 0.08456911358777941, 0.0025875710754126313, 0.018892116855403596, 0.012333408714412464, 0.0652676232239654, 0.023265397634810503, 0.0423660565103372, 0.1207012814441043, 0.08034942612929097, 0.14285960843840384, 0.1195884385110012, 0.17228934279863917, 0.14800239040920493, 0.12069461184095054, 0.10514991487739478, 0.12110900262809843, 0.4783173824144289, 0.4811208425792598, 0.44803255270523346, 0.46391685848689856, 0.4657008634915888, 0.4553161411684262, 0.4801962905371906, 0.4198813453992766, 0.4590070946096678, 0.08778259265893507, 0.09974101116229594, 0.05025702896939288, 0.16183710288845654, 0.0857532752269855, 0.0809910617471774, 0.06260618762073955, 0.09778628005226397, 0.09265448419251476, 0.24849870656647977, 0.20537344838393945, 0.2930127978124629, 0.2033659035641252, 0.194416650859908, 0.13483125653557493, 0.269210261409939, 0.31802552067150247, 0.18389621802271505, 0.158962879956285, 0.147550172721862, 0.227735894837637, 0.2206963035479601, 0.2368848263933161, 0.22011734891272394, 0.17061516091551565, 0.35118364940704705, 0.17684665990720294, 0.09210128532166384, 0.2846252371300759, 0.12986342509015525, 0.2519985659436176, 0.15027197414893212, 0.23942848290484398, 0.1264453351758439, 0.2835252041831441, 0.21204543176511448, 0.2171487597640921, 0.26500858899275703, 0.21525741846451196, 0.22295510791485917, 0.22000490719831045, 0.23873510743497328, 0.21712915801101884, 0.25384468464416987, 0.21952861695435388, 0.16656101483963448, 0.16581118985945742, 0.16289867104305555, 0.15706859789462557, 0.20504790907935677, 0.16753795346004008, 0.17158758207903724, 0.16573107891157068, 0.16284942723146634, 0.1802793025863717, 0.18749433632442847, 0.18568207892103772, 0.8150881162208362, 0.19767881374862717, 0.14825906430759916, 0.1070176662487543, 0.11980106309956662, 0.07815335243081445, 0.5581526768063988, 0.5228868645310611, 0.5883747629964186, 0.16418188771251352, 0.1641823065462742, 0.14879106385850405, 0.09472789125867953, 0.10461299695168635, 0.45554754340933346, 0.19705185825941185, 0.1952533670740152, 0.1903948329788836, 0.19090785217053796, 0.19409580663932957, 0.19301419014506338, 0.18501490028519663, 0.18877114914533433, 0.20829279779450216, 0.1014967772453671, 0.0963763151039293, 0.0949563168240869, 0.09420621531406503, 0.07742417545899793, 0.09318696492203649, 0.10048658930072363, 0.0979042039024638, 0.08938574435067526]}, "mutation_prompt": null}
{"id": "14dfe04b-93d4-4cee-867f-69f7fd49bae3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Integrated adaptive crossover strategy and enhanced diversity management for efficiency and convergence improvement.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.5480005768410645, 0.5348310074574224, 0.5378704607187934, 0.5013859642396146, 0.5424631461966187, 0.5209489241686898, 0.5289103034425233, 0.5532857043882637, 0.5036290579626777, 0.03766942503816628, 0.059180769900535224, 0.0028310907264105234, 9.999999999998899e-05, 0.0072256299880758545, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026450240556578075, 9.999999999998899e-05, 0.13450651329749141, 0.11898348563130856, 0.09780011814285139, 0.09779195566738674, 0.1272346534393911, 0.11287283679375704, 0.1339710432607144, 0.1351590513870069, 0.11101847821309185, 0.049527374317967054, 0.04997631127656754, 0.03738906424032362, 0.08673548095254868, 0.0461033001973945, 0.06409285206579096, 0.0820266060984659, 0.06478620443511429, 0.01909084493718438, 0.665787678265548, 0.5256575600789496, 0.5141317354434982, 0.291428777829583, 0.528295985405792, 0.530015279138996, 0.524666524973787, 0.24479801852511163, 0.47848131588445675, 0.3186647399283955, 0.30949172119188917, 0.2985868384469643, 0.3247074475610856, 0.2965998431866599, 0.3074256711390929, 0.32998960589005166, 0.27970112083290743, 0.3344803186836397, 0.1536603735373634, 0.16288119335608842, 0.11536034385670846, 0.16897429219126825, 0.5680426895714242, 0.7167712285257442, 0.12086980914870005, 0.15146015897186915, 0.2365238140790491, 0.16892691960049266, 0.23852345521437568, 0.17829819489372822, 0.16951938707974512, 0.2051528541150578, 0.15660054274967283, 0.16864517110194133, 0.13630837094103065, 0.18559168473515641, 0.2025838989389671, 0.30592040907864015, 0.1753942023298246, 0.29847090560903966, 0.21875793505590835, 0.1974171727293137, 0.21264434200429783, 0.18762226647410196, 0.2431012172670738, 0.012713416538151057, 0.007028147780829608, 0.04212294339284506, 0.033204884402054824, 0.05283649647742472, 0.034896067734801695, 9.999999999998899e-05, 0.06548218291362118, 0.10934509899302647, 0.09408927886825313, 0.05220175104433111, 0.10771066490924208, 0.024782455469249398, 0.001435665371398498, 0.027919120526361474, 0.1050730286870567, 0.06328199760247621, 0.06394965311029299, 0.012764393551428332, 0.010217450693585484, 0.08456911358777941, 0.0025875710754126313, 0.018892116855403596, 0.012333408714412464, 0.0652676232239654, 0.023265397634810503, 0.0423660565103372, 0.1207012814441043, 0.08034942612929097, 0.14285960843840384, 0.1195884385110012, 0.17228934279863917, 0.14800239040920493, 0.12069461184095054, 0.10514991487739478, 0.12110900262809843, 0.4783173824144289, 0.4811208425792598, 0.44803255270523346, 0.46391685848689856, 0.4657008634915888, 0.4553161411684262, 0.4801962905371906, 0.4198813453992766, 0.4590070946096678, 0.08778259265893507, 0.09974101116229594, 0.05025702896939288, 0.16183710288845654, 0.0857532752269855, 0.0809910617471774, 0.06260618762073955, 0.09778628005226397, 0.09265448419251476, 0.24849870656647977, 0.20537344838393945, 0.2930127978124629, 0.2033659035641252, 0.194416650859908, 0.13483125653557493, 0.269210261409939, 0.31802552067150247, 0.18389621802271505, 0.158962879956285, 0.147550172721862, 0.227735894837637, 0.2206963035479601, 0.2368848263933161, 0.22011734891272394, 0.17061516091551565, 0.35118364940704705, 0.17684665990720294, 0.09210128532166384, 0.2846252371300759, 0.12986342509015525, 0.2519985659436176, 0.15027197414893212, 0.23942848290484398, 0.1264453351758439, 0.2835252041831441, 0.21204543176511448, 0.2171487597640921, 0.26500858899275703, 0.21525741846451196, 0.22295510791485917, 0.22000490719831045, 0.23873510743497328, 0.21712915801101884, 0.25384468464416987, 0.21952861695435388, 0.16656101483963448, 0.16581118985945742, 0.16289867104305555, 0.15706859789462557, 0.20504790907935677, 0.16753795346004008, 0.17158758207903724, 0.16573107891157068, 0.16284942723146634, 0.1802793025863717, 0.18749433632442847, 0.18568207892103772, 0.8150881162208362, 0.19767881374862717, 0.14825906430759916, 0.1070176662487543, 0.11980106309956662, 0.07815335243081445, 0.5581526768063988, 0.5228868645310611, 0.5883747629964186, 0.16418188771251352, 0.1641823065462742, 0.14879106385850405, 0.09472789125867953, 0.10461299695168635, 0.45554754340933346, 0.19705185825941185, 0.1952533670740152, 0.1903948329788836, 0.19090785217053796, 0.19409580663932957, 0.19301419014506338, 0.18501490028519663, 0.18877114914533433, 0.20829279779450216, 0.1014967772453671, 0.0963763151039293, 0.0949563168240869, 0.09420621531406503, 0.07742417545899793, 0.09318696492203649, 0.10048658930072363, 0.0979042039024638, 0.08938574435067526]}, "mutation_prompt": null}
{"id": "655a3e28-e8e1-4b0f-a8ca-6f824f5aebac", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Integrated adaptive crossover strategy and enhanced diversity management for efficiency and convergence improvement.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.5480005768410645, 0.5348310074574224, 0.5378704607187934, 0.5013859642396146, 0.5424631461966187, 0.5209489241686898, 0.5289103034425233, 0.5532857043882637, 0.5036290579626777, 0.03766942503816628, 0.059180769900535224, 0.0028310907264105234, 9.999999999998899e-05, 0.0072256299880758545, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026450240556578075, 9.999999999998899e-05, 0.13450651329749141, 0.11898348563130856, 0.09780011814285139, 0.09779195566738674, 0.1272346534393911, 0.11287283679375704, 0.1339710432607144, 0.1351590513870069, 0.11101847821309185, 0.049527374317967054, 0.04997631127656754, 0.03738906424032362, 0.08673548095254868, 0.0461033001973945, 0.06409285206579096, 0.0820266060984659, 0.06478620443511429, 0.01909084493718438, 0.665787678265548, 0.5256575600789496, 0.5141317354434982, 0.291428777829583, 0.528295985405792, 0.530015279138996, 0.524666524973787, 0.24479801852511163, 0.47848131588445675, 0.3186647399283955, 0.30949172119188917, 0.2985868384469643, 0.3247074475610856, 0.2965998431866599, 0.3074256711390929, 0.32998960589005166, 0.27970112083290743, 0.3344803186836397, 0.1536603735373634, 0.16288119335608842, 0.11536034385670846, 0.16897429219126825, 0.5680426895714242, 0.7167712285257442, 0.12086980914870005, 0.15146015897186915, 0.2365238140790491, 0.16892691960049266, 0.23852345521437568, 0.17829819489372822, 0.16951938707974512, 0.2051528541150578, 0.15660054274967283, 0.16864517110194133, 0.13630837094103065, 0.18559168473515641, 0.2025838989389671, 0.30592040907864015, 0.1753942023298246, 0.29847090560903966, 0.21875793505590835, 0.1974171727293137, 0.21264434200429783, 0.18762226647410196, 0.2431012172670738, 0.012713416538151057, 0.007028147780829608, 0.04212294339284506, 0.033204884402054824, 0.05283649647742472, 0.034896067734801695, 9.999999999998899e-05, 0.06548218291362118, 0.10934509899302647, 0.09408927886825313, 0.05220175104433111, 0.10771066490924208, 0.024782455469249398, 0.001435665371398498, 0.027919120526361474, 0.1050730286870567, 0.06328199760247621, 0.06394965311029299, 0.012764393551428332, 0.010217450693585484, 0.08456911358777941, 0.0025875710754126313, 0.018892116855403596, 0.012333408714412464, 0.0652676232239654, 0.023265397634810503, 0.0423660565103372, 0.1207012814441043, 0.08034942612929097, 0.14285960843840384, 0.1195884385110012, 0.17228934279863917, 0.14800239040920493, 0.12069461184095054, 0.10514991487739478, 0.12110900262809843, 0.4783173824144289, 0.4811208425792598, 0.44803255270523346, 0.46391685848689856, 0.4657008634915888, 0.4553161411684262, 0.4801962905371906, 0.4198813453992766, 0.4590070946096678, 0.08778259265893507, 0.09974101116229594, 0.05025702896939288, 0.16183710288845654, 0.0857532752269855, 0.0809910617471774, 0.06260618762073955, 0.09778628005226397, 0.09265448419251476, 0.24849870656647977, 0.20537344838393945, 0.2930127978124629, 0.2033659035641252, 0.194416650859908, 0.13483125653557493, 0.269210261409939, 0.31802552067150247, 0.18389621802271505, 0.158962879956285, 0.147550172721862, 0.227735894837637, 0.2206963035479601, 0.2368848263933161, 0.22011734891272394, 0.17061516091551565, 0.35118364940704705, 0.17684665990720294, 0.09210128532166384, 0.2846252371300759, 0.12986342509015525, 0.2519985659436176, 0.15027197414893212, 0.23942848290484398, 0.1264453351758439, 0.2835252041831441, 0.21204543176511448, 0.2171487597640921, 0.26500858899275703, 0.21525741846451196, 0.22295510791485917, 0.22000490719831045, 0.23873510743497328, 0.21712915801101884, 0.25384468464416987, 0.21952861695435388, 0.16656101483963448, 0.16581118985945742, 0.16289867104305555, 0.15706859789462557, 0.20504790907935677, 0.16753795346004008, 0.17158758207903724, 0.16573107891157068, 0.16284942723146634, 0.1802793025863717, 0.18749433632442847, 0.18568207892103772, 0.8150881162208362, 0.19767881374862717, 0.14825906430759916, 0.1070176662487543, 0.11980106309956662, 0.07815335243081445, 0.5581526768063988, 0.5228868645310611, 0.5883747629964186, 0.16418188771251352, 0.1641823065462742, 0.14879106385850405, 0.09472789125867953, 0.10461299695168635, 0.45554754340933346, 0.19705185825941185, 0.1952533670740152, 0.1903948329788836, 0.19090785217053796, 0.19409580663932957, 0.19301419014506338, 0.18501490028519663, 0.18877114914533433, 0.20829279779450216, 0.1014967772453671, 0.0963763151039293, 0.0949563168240869, 0.09420621531406503, 0.07742417545899793, 0.09318696492203649, 0.10048658930072363, 0.0979042039024638, 0.08938574435067526]}, "mutation_prompt": null}
{"id": "d509041b-94e4-4f8e-9da8-2d896292dd1c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.7\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(elite_indices, self.population_size // 2 - elite_size, replace=True)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        if np.random.rand() < self.crossover_rate:\n            alpha = np.random.rand(self.dim)\n            return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n        return parent1 if np.random.rand() < 0.5 else parent2\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = [population[np.argmin(fitness)]]\n\n        for _ in range((self.population_size - 1) // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population, fitness):\n        diversity = np.std(population, axis=0).mean()\n        fitness_variance = np.var(fitness)\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.crossover_rate = min(1.0, 0.6 + fitness_variance / 100.0)\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            fitness = self.evaluate_population(population, func)\n            population = self.run_generation(population, func)\n            self.update_parameters(population, fitness)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Introduced adaptive mutation and crossover rates based on fitness diversity and reduced redundant population evaluations for efficiency improvement.", "configspace": "", "generation": 77, "fitness": 0.17856479795135183, "feedback": "The algorithm EnhancedAdaptiveGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.14.", "error": "", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.5275414128155063, 0.49211068649057965, 0.5016500361273273, 0.4739523460997437, 0.49278325386331323, 0.533270317520155, 0.5167808087432979, 0.48253643081592656, 0.5042690367997456, 0.08830109408880293, 0.0023656512448547717, 9.999999999998899e-05, 9.999999999998899e-05, 0.08127006867203057, 9.999999999998899e-05, 9.999999999998899e-05, 0.04463347735570111, 9.999999999998899e-05, 0.09377283042905782, 0.12521222801497134, 0.10100640982652187, 0.10700638926638917, 0.15668714908150394, 0.06249859921888323, 0.07034382613172785, 0.1473907311531506, 0.11652931412510714, 0.04033258907765447, 0.04697973416086809, 0.04592925394254066, 0.057532472193821405, 0.039917294383973734, 0.07989754109061253, 0.1317218140695755, 0.049416354418558184, 0.0396341068010142, 0.38328309532054794, 0.3747938574544397, 0.6127908845197951, 0.37605500494308786, 0.30320661903136714, 0.3947753756058302, 0.43371771647846813, 0.4302420211208836, 0.35407181949220334, 0.31762707321035955, 0.2683559653371138, 0.22148876575394993, 0.3031932592656368, 0.30192453185293955, 0.2998590124581163, 0.37112064985030113, 0.26796991678941784, 0.3597826385796936, 0.1572864599537106, 0.22673694375616127, 0.11538162648072325, 0.18011165348482194, 0.1977395994940001, 0.12357725676102216, 0.10912072051970756, 0.12710098505886325, 0.16179522521104095, 0.2142002659960337, 0.1131467178930805, 0.1601720006003452, 0.16171174165368907, 0.26703714681806445, 0.15964964514626068, 0.20731271709424193, 0.16447006813729492, 0.18084501608978387, 0.13209401235714868, 0.21376941230618918, 0.16233770229212952, 0.16378195678361995, 0.215874087818537, 0.15633988203416505, 0.21136687085594275, 0.18919797122592408, 0.18061580761795415, 9.999999999998899e-05, 0.004181376517802482, 0.042396814452465015, 9.999999999998899e-05, 0.03245825852999895, 0.019098106808332682, 0.017875953491852115, 9.999999999998899e-05, 0.10611995410812347, 0.06339399345649777, 0.039807724201791794, 0.0860626260504409, 0.0696195774157723, 0.01510157387638067, 0.016816180775971024, 0.05257433127840272, 0.047177256078347996, 0.06751054058972661, 0.014743203519921866, 0.04849685015704308, 0.024983878012938665, 0.01277117071671674, 0.010248102036118478, 0.006198426556850212, 9.999999999998899e-05, 0.0337031819171294, 9.999999999998899e-05, 0.08287092261008477, 0.10776490279894957, 0.08783169302917737, 0.13187725484960844, 0.12499377517649224, 0.09078591066003683, 0.08341956364827241, 0.10388358146211618, 0.0818069290828557, 0.4240219094992501, 0.48443202950719255, 0.4449121659704396, 0.45678778910365514, 0.4322598217726845, 0.459410900816121, 0.4732134945921105, 0.43783610908366843, 0.4533433411599256, 0.04998083492326644, 0.063285935485628, 0.052511623866624224, 0.11937233227277522, 0.06316326926735161, 0.11047611799749979, 0.11195381402340221, 0.1016439517347777, 0.08319887198444298, 0.15769184170084993, 0.2038616558568883, 0.20787054913627645, 0.1583006981347369, 0.3302566516670691, 0.3085026906116195, 0.3284060089519175, 0.1410618179518367, 0.1965825639405221, 0.1704975630910972, 0.2335895676442885, 0.23930691375249813, 0.21152378359903978, 0.2108750614372893, 0.24161475044915937, 0.1549658975702134, 0.2391394206960309, 0.2151106757886616, 0.15411310841899595, 0.1080959397715402, 0.11575215836261454, 0.11715733001179962, 0.1184340145232623, 0.2079712881775886, 0.11070641563574612, 0.23606947516822308, 0.21115677408726585, 0.2301003849304447, 0.2494790492878648, 0.1676852447802054, 0.20225670783127703, 0.21805167910598078, 0.19895298320181287, 0.28072116289856963, 0.18889262749919566, 0.25587586235211124, 0.16846358453550214, 0.25288766335537005, 0.16051521151149462, 0.21232433227550607, 0.1742754309708896, 0.17752483704467026, 0.18383507568410173, 0.21760160826860997, 0.1842212494217388, 0.1837046881230331, 0.18120178990272662, 0.1500563317874234, 0.17139867479179705, 0.20080813631962358, 0.19409901032545784, 0.14109140742554083, 0.14758658239116507, 0.19330147850860657, 0.5831830165233919, 0.15662128841213618, 0.07354371969746953, 0.160422129856716, 0.16867311365047388, 0.1365685026805712, 0.09342644276902634, 0.10072549943717801, 0.2762663745506182, 0.16948614210344892, 0.1861914852013724, 0.19501216735329485, 0.21181553965023459, 0.17816394617392084, 0.18631517600463854, 0.19493323504019822, 0.2011092154365779, 0.19448769639969576, 0.07721931919516867, 0.08316566466786102, 0.05875408821314554, 0.07409932052657109, 0.06003189086030147, 0.07269737650255614, 0.0706830786534125, 0.07899484062057383, 0.08219579118913334]}, "mutation_prompt": null}
{"id": "a01d8966-4084-4c69-a94d-796dadfac4ca", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Integrated adaptive crossover strategy and enhanced diversity management for efficiency and convergence improvement.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.5480005768410645, 0.5348310074574224, 0.5378704607187934, 0.5013859642396146, 0.5424631461966187, 0.5209489241686898, 0.5289103034425233, 0.5532857043882637, 0.5036290579626777, 0.03766942503816628, 0.059180769900535224, 0.0028310907264105234, 9.999999999998899e-05, 0.0072256299880758545, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026450240556578075, 9.999999999998899e-05, 0.13450651329749141, 0.11898348563130856, 0.09780011814285139, 0.09779195566738674, 0.1272346534393911, 0.11287283679375704, 0.1339710432607144, 0.1351590513870069, 0.11101847821309185, 0.049527374317967054, 0.04997631127656754, 0.03738906424032362, 0.08673548095254868, 0.0461033001973945, 0.06409285206579096, 0.0820266060984659, 0.06478620443511429, 0.01909084493718438, 0.665787678265548, 0.5256575600789496, 0.5141317354434982, 0.291428777829583, 0.528295985405792, 0.530015279138996, 0.524666524973787, 0.24479801852511163, 0.47848131588445675, 0.3186647399283955, 0.30949172119188917, 0.2985868384469643, 0.3247074475610856, 0.2965998431866599, 0.3074256711390929, 0.32998960589005166, 0.27970112083290743, 0.3344803186836397, 0.1536603735373634, 0.16288119335608842, 0.11536034385670846, 0.16897429219126825, 0.5680426895714242, 0.7167712285257442, 0.12086980914870005, 0.15146015897186915, 0.2365238140790491, 0.16892691960049266, 0.23852345521437568, 0.17829819489372822, 0.16951938707974512, 0.2051528541150578, 0.15660054274967283, 0.16864517110194133, 0.13630837094103065, 0.18559168473515641, 0.2025838989389671, 0.30592040907864015, 0.1753942023298246, 0.29847090560903966, 0.21875793505590835, 0.1974171727293137, 0.21264434200429783, 0.18762226647410196, 0.2431012172670738, 0.012713416538151057, 0.007028147780829608, 0.04212294339284506, 0.033204884402054824, 0.05283649647742472, 0.034896067734801695, 9.999999999998899e-05, 0.06548218291362118, 0.10934509899302647, 0.09408927886825313, 0.05220175104433111, 0.10771066490924208, 0.024782455469249398, 0.001435665371398498, 0.027919120526361474, 0.1050730286870567, 0.06328199760247621, 0.06394965311029299, 0.012764393551428332, 0.010217450693585484, 0.08456911358777941, 0.0025875710754126313, 0.018892116855403596, 0.012333408714412464, 0.0652676232239654, 0.023265397634810503, 0.0423660565103372, 0.1207012814441043, 0.08034942612929097, 0.14285960843840384, 0.1195884385110012, 0.17228934279863917, 0.14800239040920493, 0.12069461184095054, 0.10514991487739478, 0.12110900262809843, 0.4783173824144289, 0.4811208425792598, 0.44803255270523346, 0.46391685848689856, 0.4657008634915888, 0.4553161411684262, 0.4801962905371906, 0.4198813453992766, 0.4590070946096678, 0.08778259265893507, 0.09974101116229594, 0.05025702896939288, 0.16183710288845654, 0.0857532752269855, 0.0809910617471774, 0.06260618762073955, 0.09778628005226397, 0.09265448419251476, 0.24849870656647977, 0.20537344838393945, 0.2930127978124629, 0.2033659035641252, 0.194416650859908, 0.13483125653557493, 0.269210261409939, 0.31802552067150247, 0.18389621802271505, 0.158962879956285, 0.147550172721862, 0.227735894837637, 0.2206963035479601, 0.2368848263933161, 0.22011734891272394, 0.17061516091551565, 0.35118364940704705, 0.17684665990720294, 0.09210128532166384, 0.2846252371300759, 0.12986342509015525, 0.2519985659436176, 0.15027197414893212, 0.23942848290484398, 0.1264453351758439, 0.2835252041831441, 0.21204543176511448, 0.2171487597640921, 0.26500858899275703, 0.21525741846451196, 0.22295510791485917, 0.22000490719831045, 0.23873510743497328, 0.21712915801101884, 0.25384468464416987, 0.21952861695435388, 0.16656101483963448, 0.16581118985945742, 0.16289867104305555, 0.15706859789462557, 0.20504790907935677, 0.16753795346004008, 0.17158758207903724, 0.16573107891157068, 0.16284942723146634, 0.1802793025863717, 0.18749433632442847, 0.18568207892103772, 0.8150881162208362, 0.19767881374862717, 0.14825906430759916, 0.1070176662487543, 0.11980106309956662, 0.07815335243081445, 0.5581526768063988, 0.5228868645310611, 0.5883747629964186, 0.16418188771251352, 0.1641823065462742, 0.14879106385850405, 0.09472789125867953, 0.10461299695168635, 0.45554754340933346, 0.19705185825941185, 0.1952533670740152, 0.1903948329788836, 0.19090785217053796, 0.19409580663932957, 0.19301419014506338, 0.18501490028519663, 0.18877114914533433, 0.20829279779450216, 0.1014967772453671, 0.0963763151039293, 0.0949563168240869, 0.09420621531406503, 0.07742417545899793, 0.09318696492203649, 0.10048658930072363, 0.0979042039024638, 0.08938574435067526]}, "mutation_prompt": null}
{"id": "a6deb5ec-bf23-4f4d-aab0-c63f999f90ef", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Integrated adaptive crossover strategy and enhanced diversity management for efficiency and convergence improvement.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.5480005768410645, 0.5348310074574224, 0.5378704607187934, 0.5013859642396146, 0.5424631461966187, 0.5209489241686898, 0.5289103034425233, 0.5532857043882637, 0.5036290579626777, 0.03766942503816628, 0.059180769900535224, 0.0028310907264105234, 9.999999999998899e-05, 0.0072256299880758545, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026450240556578075, 9.999999999998899e-05, 0.13450651329749141, 0.11898348563130856, 0.09780011814285139, 0.09779195566738674, 0.1272346534393911, 0.11287283679375704, 0.1339710432607144, 0.1351590513870069, 0.11101847821309185, 0.049527374317967054, 0.04997631127656754, 0.03738906424032362, 0.08673548095254868, 0.0461033001973945, 0.06409285206579096, 0.0820266060984659, 0.06478620443511429, 0.01909084493718438, 0.665787678265548, 0.5256575600789496, 0.5141317354434982, 0.291428777829583, 0.528295985405792, 0.530015279138996, 0.524666524973787, 0.24479801852511163, 0.47848131588445675, 0.3186647399283955, 0.30949172119188917, 0.2985868384469643, 0.3247074475610856, 0.2965998431866599, 0.3074256711390929, 0.32998960589005166, 0.27970112083290743, 0.3344803186836397, 0.1536603735373634, 0.16288119335608842, 0.11536034385670846, 0.16897429219126825, 0.5680426895714242, 0.7167712285257442, 0.12086980914870005, 0.15146015897186915, 0.2365238140790491, 0.16892691960049266, 0.23852345521437568, 0.17829819489372822, 0.16951938707974512, 0.2051528541150578, 0.15660054274967283, 0.16864517110194133, 0.13630837094103065, 0.18559168473515641, 0.2025838989389671, 0.30592040907864015, 0.1753942023298246, 0.29847090560903966, 0.21875793505590835, 0.1974171727293137, 0.21264434200429783, 0.18762226647410196, 0.2431012172670738, 0.012713416538151057, 0.007028147780829608, 0.04212294339284506, 0.033204884402054824, 0.05283649647742472, 0.034896067734801695, 9.999999999998899e-05, 0.06548218291362118, 0.10934509899302647, 0.09408927886825313, 0.05220175104433111, 0.10771066490924208, 0.024782455469249398, 0.001435665371398498, 0.027919120526361474, 0.1050730286870567, 0.06328199760247621, 0.06394965311029299, 0.012764393551428332, 0.010217450693585484, 0.08456911358777941, 0.0025875710754126313, 0.018892116855403596, 0.012333408714412464, 0.0652676232239654, 0.023265397634810503, 0.0423660565103372, 0.1207012814441043, 0.08034942612929097, 0.14285960843840384, 0.1195884385110012, 0.17228934279863917, 0.14800239040920493, 0.12069461184095054, 0.10514991487739478, 0.12110900262809843, 0.4783173824144289, 0.4811208425792598, 0.44803255270523346, 0.46391685848689856, 0.4657008634915888, 0.4553161411684262, 0.4801962905371906, 0.4198813453992766, 0.4590070946096678, 0.08778259265893507, 0.09974101116229594, 0.05025702896939288, 0.16183710288845654, 0.0857532752269855, 0.0809910617471774, 0.06260618762073955, 0.09778628005226397, 0.09265448419251476, 0.24849870656647977, 0.20537344838393945, 0.2930127978124629, 0.2033659035641252, 0.194416650859908, 0.13483125653557493, 0.269210261409939, 0.31802552067150247, 0.18389621802271505, 0.158962879956285, 0.147550172721862, 0.227735894837637, 0.2206963035479601, 0.2368848263933161, 0.22011734891272394, 0.17061516091551565, 0.35118364940704705, 0.17684665990720294, 0.09210128532166384, 0.2846252371300759, 0.12986342509015525, 0.2519985659436176, 0.15027197414893212, 0.23942848290484398, 0.1264453351758439, 0.2835252041831441, 0.21204543176511448, 0.2171487597640921, 0.26500858899275703, 0.21525741846451196, 0.22295510791485917, 0.22000490719831045, 0.23873510743497328, 0.21712915801101884, 0.25384468464416987, 0.21952861695435388, 0.16656101483963448, 0.16581118985945742, 0.16289867104305555, 0.15706859789462557, 0.20504790907935677, 0.16753795346004008, 0.17158758207903724, 0.16573107891157068, 0.16284942723146634, 0.1802793025863717, 0.18749433632442847, 0.18568207892103772, 0.8150881162208362, 0.19767881374862717, 0.14825906430759916, 0.1070176662487543, 0.11980106309956662, 0.07815335243081445, 0.5581526768063988, 0.5228868645310611, 0.5883747629964186, 0.16418188771251352, 0.1641823065462742, 0.14879106385850405, 0.09472789125867953, 0.10461299695168635, 0.45554754340933346, 0.19705185825941185, 0.1952533670740152, 0.1903948329788836, 0.19090785217053796, 0.19409580663932957, 0.19301419014506338, 0.18501490028519663, 0.18877114914533433, 0.20829279779450216, 0.1014967772453671, 0.0963763151039293, 0.0949563168240869, 0.09420621531406503, 0.07742417545899793, 0.09318696492203649, 0.10048658930072363, 0.0979042039024638, 0.08938574435067526]}, "mutation_prompt": null}
{"id": "7c19931a-5ce7-451b-a8d0-31f83cb2965c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Integrated adaptive crossover strategy and enhanced diversity management for efficiency and convergence improvement.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.5480005768410645, 0.5348310074574224, 0.5378704607187934, 0.5013859642396146, 0.5424631461966187, 0.5209489241686898, 0.5289103034425233, 0.5532857043882637, 0.5036290579626777, 0.03766942503816628, 0.059180769900535224, 0.0028310907264105234, 9.999999999998899e-05, 0.0072256299880758545, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026450240556578075, 9.999999999998899e-05, 0.13450651329749141, 0.11898348563130856, 0.09780011814285139, 0.09779195566738674, 0.1272346534393911, 0.11287283679375704, 0.1339710432607144, 0.1351590513870069, 0.11101847821309185, 0.049527374317967054, 0.04997631127656754, 0.03738906424032362, 0.08673548095254868, 0.0461033001973945, 0.06409285206579096, 0.0820266060984659, 0.06478620443511429, 0.01909084493718438, 0.665787678265548, 0.5256575600789496, 0.5141317354434982, 0.291428777829583, 0.528295985405792, 0.530015279138996, 0.524666524973787, 0.24479801852511163, 0.47848131588445675, 0.3186647399283955, 0.30949172119188917, 0.2985868384469643, 0.3247074475610856, 0.2965998431866599, 0.3074256711390929, 0.32998960589005166, 0.27970112083290743, 0.3344803186836397, 0.1536603735373634, 0.16288119335608842, 0.11536034385670846, 0.16897429219126825, 0.5680426895714242, 0.7167712285257442, 0.12086980914870005, 0.15146015897186915, 0.2365238140790491, 0.16892691960049266, 0.23852345521437568, 0.17829819489372822, 0.16951938707974512, 0.2051528541150578, 0.15660054274967283, 0.16864517110194133, 0.13630837094103065, 0.18559168473515641, 0.2025838989389671, 0.30592040907864015, 0.1753942023298246, 0.29847090560903966, 0.21875793505590835, 0.1974171727293137, 0.21264434200429783, 0.18762226647410196, 0.2431012172670738, 0.012713416538151057, 0.007028147780829608, 0.04212294339284506, 0.033204884402054824, 0.05283649647742472, 0.034896067734801695, 9.999999999998899e-05, 0.06548218291362118, 0.10934509899302647, 0.09408927886825313, 0.05220175104433111, 0.10771066490924208, 0.024782455469249398, 0.001435665371398498, 0.027919120526361474, 0.1050730286870567, 0.06328199760247621, 0.06394965311029299, 0.012764393551428332, 0.010217450693585484, 0.08456911358777941, 0.0025875710754126313, 0.018892116855403596, 0.012333408714412464, 0.0652676232239654, 0.023265397634810503, 0.0423660565103372, 0.1207012814441043, 0.08034942612929097, 0.14285960843840384, 0.1195884385110012, 0.17228934279863917, 0.14800239040920493, 0.12069461184095054, 0.10514991487739478, 0.12110900262809843, 0.4783173824144289, 0.4811208425792598, 0.44803255270523346, 0.46391685848689856, 0.4657008634915888, 0.4553161411684262, 0.4801962905371906, 0.4198813453992766, 0.4590070946096678, 0.08778259265893507, 0.09974101116229594, 0.05025702896939288, 0.16183710288845654, 0.0857532752269855, 0.0809910617471774, 0.06260618762073955, 0.09778628005226397, 0.09265448419251476, 0.24849870656647977, 0.20537344838393945, 0.2930127978124629, 0.2033659035641252, 0.194416650859908, 0.13483125653557493, 0.269210261409939, 0.31802552067150247, 0.18389621802271505, 0.158962879956285, 0.147550172721862, 0.227735894837637, 0.2206963035479601, 0.2368848263933161, 0.22011734891272394, 0.17061516091551565, 0.35118364940704705, 0.17684665990720294, 0.09210128532166384, 0.2846252371300759, 0.12986342509015525, 0.2519985659436176, 0.15027197414893212, 0.23942848290484398, 0.1264453351758439, 0.2835252041831441, 0.21204543176511448, 0.2171487597640921, 0.26500858899275703, 0.21525741846451196, 0.22295510791485917, 0.22000490719831045, 0.23873510743497328, 0.21712915801101884, 0.25384468464416987, 0.21952861695435388, 0.16656101483963448, 0.16581118985945742, 0.16289867104305555, 0.15706859789462557, 0.20504790907935677, 0.16753795346004008, 0.17158758207903724, 0.16573107891157068, 0.16284942723146634, 0.1802793025863717, 0.18749433632442847, 0.18568207892103772, 0.8150881162208362, 0.19767881374862717, 0.14825906430759916, 0.1070176662487543, 0.11980106309956662, 0.07815335243081445, 0.5581526768063988, 0.5228868645310611, 0.5883747629964186, 0.16418188771251352, 0.1641823065462742, 0.14879106385850405, 0.09472789125867953, 0.10461299695168635, 0.45554754340933346, 0.19705185825941185, 0.1952533670740152, 0.1903948329788836, 0.19090785217053796, 0.19409580663932957, 0.19301419014506338, 0.18501490028519663, 0.18877114914533433, 0.20829279779450216, 0.1014967772453671, 0.0963763151039293, 0.0949563168240869, 0.09420621531406503, 0.07742417545899793, 0.09318696492203649, 0.10048658930072363, 0.0979042039024638, 0.08938574435067526]}, "mutation_prompt": null}
{"id": "122b3c20-f95a-45b9-a77a-743d49f0c035", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.uniform(0.4, 0.6, self.dim)  # Altered range for better exploration\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        scaling_factor = 1.0 - (self.current_evals / self.budget)  # Dynamic scaling for mutation\n        return np.clip(individual + scaling_factor * mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Optimized crossover and mutation strategy with dynamic scaling for improved exploration and convergence.", "configspace": "", "generation": 81, "fitness": 0.1806142091612367, "feedback": "The algorithm EnhancedAdaptiveGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.6010334384305577, 0.586262984192802, 0.5859251073103369, 0.5576550135866651, 0.5640716662286114, 0.611047848650879, 0.5760997943701252, 0.5641255910495055, 0.5506033137827897, 0.015842032659416305, 0.07024338113057893, 9.999999999998899e-05, 9.999999999998899e-05, 0.07443593621218547, 9.999999999998899e-05, 9.999999999998899e-05, 0.03258552976495388, 9.999999999998899e-05, 0.06659207434970904, 0.08746212801072883, 0.08110837859603448, 0.06521127638209923, 0.11263133836265482, 0.11895154106897332, 0.10322003738039187, 0.10218026069498187, 0.13636583261152957, 0.02326618558279736, 0.03726125896360444, 0.040978508504208144, 0.05086957442397211, 0.0279892422506951, 0.02965565637683687, 0.03922247127045908, 0.06552176208268279, 0.026350357561475857, 0.1254330857060033, 0.16151568112058434, 0.10368619608120899, 0.09646786754752301, 0.1231234080387672, 0.12105090338680202, 0.10992453517783396, 0.09509033684388668, 0.1462742816052005, 0.35396878882175864, 0.36398462305594825, 0.35692975929795234, 0.3689690077526546, 0.3459262016506175, 0.3632728839108714, 0.3996629760011855, 0.28950305603799165, 0.3730977170453249, 0.17597788462066677, 0.14166814651635673, 0.14164120312598427, 0.1970091347248174, 0.11576280524442395, 0.0673737593424083, 0.09129738689069633, 0.1510736989801662, 0.180582517440805, 0.17884370574322495, 0.1270832499576311, 0.14413786516660987, 0.16457530044265023, 0.1881851210604445, 0.1605027677076265, 0.20776949480917917, 0.3349666170367366, 0.20699780264018852, 0.31163362520661364, 0.13063545161055212, 0.22839468697019172, 0.13146254915109057, 0.21166492278131022, 0.1297009136294175, 0.20774210572333163, 0.20798845822191558, 0.23698946572653534, 0.028114219963670584, 9.999999999998899e-05, 9.999999999998899e-05, 0.1549370791230904, 0.050168934104074636, 0.023489799871654893, 0.0315295986370524, 0.0744988963180554, 0.059240597832897035, 0.17433951217857335, 0.0805682688940742, 0.08734725055776049, 0.03559860533537107, 0.030850787588760475, 0.04619059182927032, 0.08955580399351981, 0.05853997685871071, 0.09879408082309149, 0.0869885301753951, 0.06854859766682764, 0.09088770161881876, 0.07182062180732651, 0.09441629155030373, 0.0662287844717282, 0.04122601891587796, 0.05988322173729865, 0.04703462698368022, 0.162512267280151, 0.14560328688648372, 0.12116905525546606, 0.11464217382765507, 0.11109133173723917, 0.1520291344994914, 0.13502588149775396, 0.11676227496423308, 0.10712403054279218, 0.48605885021246475, 0.48330321618997285, 0.48034558848007036, 0.4742032919254098, 0.4463348401003958, 0.47136845873572597, 0.5024533735057743, 0.47972248826665187, 0.46303443009756773, 0.03740925358887848, 0.04452496824968766, 0.04469251608470126, 0.11859746702681384, 0.0781194807362301, 0.1077533433554656, 0.09880535996467765, 0.0938570417644976, 0.09032144729646518, 0.15926179737154456, 0.13929988228215173, 0.18741782490120495, 0.20598369270457073, 0.2193505739497953, 0.14081408614210666, 0.1386206504223283, 0.1971281198622704, 0.1937023973926686, 0.17071779290673694, 0.15535895817051182, 0.2432732747198636, 0.19060396061516305, 0.16285866993052223, 0.18448006753683122, 0.1469687366184953, 0.2804410048700883, 0.16467712084453667, 0.13693997808649727, 0.30787642535952975, 0.21878216317639654, 0.1989867586076357, 0.10609005133355254, 0.2705088012895249, 0.13169916709421903, 0.24995595092266376, 0.13706329886431945, 0.2276133615075956, 0.1920373529170174, 0.21833775475920525, 0.29170245208094125, 0.23623369300130126, 0.2095921817815899, 0.24493826444491285, 0.21060518834647868, 0.22208932832334205, 0.16846556809958224, 0.1639915108246438, 0.15361085596458457, 0.15555997215780026, 0.17295161289463135, 0.15635895310748416, 0.15747570939238154, 0.15453797231031696, 0.16750993906339628, 0.18810284957695267, 0.1843994448125552, 0.7873471349761567, 0.1727629462246265, 0.16815655066469248, 0.19508834406280173, 0.1583748067554419, 0.11573105477593815, 0.08295750887321174, 0.6591608785230818, 0.6146087838465826, 0.14863491306269516, 0.16953320598771437, 0.16373167146302725, 0.14600574583501713, 0.09374018218617053, 0.10211578092166274, 0.09261157842025514, 0.19535986302331132, 0.19427341483930793, 0.20133046185647574, 0.2280384378456043, 0.20513945761522223, 0.1987560972880772, 0.20444188205357428, 0.2111980790603729, 0.20853060289663206, 0.09741847406051163, 0.08357127529956143, 0.1026584735978453, 0.08880391387123587, 0.08698659977544099, 0.08947981379164738, 0.07681254612889266, 0.07739246876750583, 0.084266336827856]}, "mutation_prompt": null}
{"id": "2296b92f-948b-4207-b9bb-10d4d623e9d0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Integrated adaptive crossover strategy and enhanced diversity management for efficiency and convergence improvement.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.5480005768410645, 0.5348310074574224, 0.5378704607187934, 0.5013859642396146, 0.5424631461966187, 0.5209489241686898, 0.5289103034425233, 0.5532857043882637, 0.5036290579626777, 0.03766942503816628, 0.059180769900535224, 0.0028310907264105234, 9.999999999998899e-05, 0.0072256299880758545, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026450240556578075, 9.999999999998899e-05, 0.13450651329749141, 0.11898348563130856, 0.09780011814285139, 0.09779195566738674, 0.1272346534393911, 0.11287283679375704, 0.1339710432607144, 0.1351590513870069, 0.11101847821309185, 0.049527374317967054, 0.04997631127656754, 0.03738906424032362, 0.08673548095254868, 0.0461033001973945, 0.06409285206579096, 0.0820266060984659, 0.06478620443511429, 0.01909084493718438, 0.665787678265548, 0.5256575600789496, 0.5141317354434982, 0.291428777829583, 0.528295985405792, 0.530015279138996, 0.524666524973787, 0.24479801852511163, 0.47848131588445675, 0.3186647399283955, 0.30949172119188917, 0.2985868384469643, 0.3247074475610856, 0.2965998431866599, 0.3074256711390929, 0.32998960589005166, 0.27970112083290743, 0.3344803186836397, 0.1536603735373634, 0.16288119335608842, 0.11536034385670846, 0.16897429219126825, 0.5680426895714242, 0.7167712285257442, 0.12086980914870005, 0.15146015897186915, 0.2365238140790491, 0.16892691960049266, 0.23852345521437568, 0.17829819489372822, 0.16951938707974512, 0.2051528541150578, 0.15660054274967283, 0.16864517110194133, 0.13630837094103065, 0.18559168473515641, 0.2025838989389671, 0.30592040907864015, 0.1753942023298246, 0.29847090560903966, 0.21875793505590835, 0.1974171727293137, 0.21264434200429783, 0.18762226647410196, 0.2431012172670738, 0.012713416538151057, 0.007028147780829608, 0.04212294339284506, 0.033204884402054824, 0.05283649647742472, 0.034896067734801695, 9.999999999998899e-05, 0.06548218291362118, 0.10934509899302647, 0.09408927886825313, 0.05220175104433111, 0.10771066490924208, 0.024782455469249398, 0.001435665371398498, 0.027919120526361474, 0.1050730286870567, 0.06328199760247621, 0.06394965311029299, 0.012764393551428332, 0.010217450693585484, 0.08456911358777941, 0.0025875710754126313, 0.018892116855403596, 0.012333408714412464, 0.0652676232239654, 0.023265397634810503, 0.0423660565103372, 0.1207012814441043, 0.08034942612929097, 0.14285960843840384, 0.1195884385110012, 0.17228934279863917, 0.14800239040920493, 0.12069461184095054, 0.10514991487739478, 0.12110900262809843, 0.4783173824144289, 0.4811208425792598, 0.44803255270523346, 0.46391685848689856, 0.4657008634915888, 0.4553161411684262, 0.4801962905371906, 0.4198813453992766, 0.4590070946096678, 0.08778259265893507, 0.09974101116229594, 0.05025702896939288, 0.16183710288845654, 0.0857532752269855, 0.0809910617471774, 0.06260618762073955, 0.09778628005226397, 0.09265448419251476, 0.24849870656647977, 0.20537344838393945, 0.2930127978124629, 0.2033659035641252, 0.194416650859908, 0.13483125653557493, 0.269210261409939, 0.31802552067150247, 0.18389621802271505, 0.158962879956285, 0.147550172721862, 0.227735894837637, 0.2206963035479601, 0.2368848263933161, 0.22011734891272394, 0.17061516091551565, 0.35118364940704705, 0.17684665990720294, 0.09210128532166384, 0.2846252371300759, 0.12986342509015525, 0.2519985659436176, 0.15027197414893212, 0.23942848290484398, 0.1264453351758439, 0.2835252041831441, 0.21204543176511448, 0.2171487597640921, 0.26500858899275703, 0.21525741846451196, 0.22295510791485917, 0.22000490719831045, 0.23873510743497328, 0.21712915801101884, 0.25384468464416987, 0.21952861695435388, 0.16656101483963448, 0.16581118985945742, 0.16289867104305555, 0.15706859789462557, 0.20504790907935677, 0.16753795346004008, 0.17158758207903724, 0.16573107891157068, 0.16284942723146634, 0.1802793025863717, 0.18749433632442847, 0.18568207892103772, 0.8150881162208362, 0.19767881374862717, 0.14825906430759916, 0.1070176662487543, 0.11980106309956662, 0.07815335243081445, 0.5581526768063988, 0.5228868645310611, 0.5883747629964186, 0.16418188771251352, 0.1641823065462742, 0.14879106385850405, 0.09472789125867953, 0.10461299695168635, 0.45554754340933346, 0.19705185825941185, 0.1952533670740152, 0.1903948329788836, 0.19090785217053796, 0.19409580663932957, 0.19301419014506338, 0.18501490028519663, 0.18877114914533433, 0.20829279779450216, 0.1014967772453671, 0.0963763151039293, 0.0949563168240869, 0.09420621531406503, 0.07742417545899793, 0.09318696492203649, 0.10048658930072363, 0.0979042039024638, 0.08938574435067526]}, "mutation_prompt": null}
{"id": "c6c33978-83a3-4be6-bc6b-19bd2a5653ba", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 4], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.std(population, axis=0).mean()\n        self.mutation_rate = max(0.01, 0.2 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(100, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "Integrated adaptive crossover strategy and enhanced diversity management for efficiency and convergence improvement.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.5480005768410645, 0.5348310074574224, 0.5378704607187934, 0.5013859642396146, 0.5424631461966187, 0.5209489241686898, 0.5289103034425233, 0.5532857043882637, 0.5036290579626777, 0.03766942503816628, 0.059180769900535224, 0.0028310907264105234, 9.999999999998899e-05, 0.0072256299880758545, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026450240556578075, 9.999999999998899e-05, 0.13450651329749141, 0.11898348563130856, 0.09780011814285139, 0.09779195566738674, 0.1272346534393911, 0.11287283679375704, 0.1339710432607144, 0.1351590513870069, 0.11101847821309185, 0.049527374317967054, 0.04997631127656754, 0.03738906424032362, 0.08673548095254868, 0.0461033001973945, 0.06409285206579096, 0.0820266060984659, 0.06478620443511429, 0.01909084493718438, 0.665787678265548, 0.5256575600789496, 0.5141317354434982, 0.291428777829583, 0.528295985405792, 0.530015279138996, 0.524666524973787, 0.24479801852511163, 0.47848131588445675, 0.3186647399283955, 0.30949172119188917, 0.2985868384469643, 0.3247074475610856, 0.2965998431866599, 0.3074256711390929, 0.32998960589005166, 0.27970112083290743, 0.3344803186836397, 0.1536603735373634, 0.16288119335608842, 0.11536034385670846, 0.16897429219126825, 0.5680426895714242, 0.7167712285257442, 0.12086980914870005, 0.15146015897186915, 0.2365238140790491, 0.16892691960049266, 0.23852345521437568, 0.17829819489372822, 0.16951938707974512, 0.2051528541150578, 0.15660054274967283, 0.16864517110194133, 0.13630837094103065, 0.18559168473515641, 0.2025838989389671, 0.30592040907864015, 0.1753942023298246, 0.29847090560903966, 0.21875793505590835, 0.1974171727293137, 0.21264434200429783, 0.18762226647410196, 0.2431012172670738, 0.012713416538151057, 0.007028147780829608, 0.04212294339284506, 0.033204884402054824, 0.05283649647742472, 0.034896067734801695, 9.999999999998899e-05, 0.06548218291362118, 0.10934509899302647, 0.09408927886825313, 0.05220175104433111, 0.10771066490924208, 0.024782455469249398, 0.001435665371398498, 0.027919120526361474, 0.1050730286870567, 0.06328199760247621, 0.06394965311029299, 0.012764393551428332, 0.010217450693585484, 0.08456911358777941, 0.0025875710754126313, 0.018892116855403596, 0.012333408714412464, 0.0652676232239654, 0.023265397634810503, 0.0423660565103372, 0.1207012814441043, 0.08034942612929097, 0.14285960843840384, 0.1195884385110012, 0.17228934279863917, 0.14800239040920493, 0.12069461184095054, 0.10514991487739478, 0.12110900262809843, 0.4783173824144289, 0.4811208425792598, 0.44803255270523346, 0.46391685848689856, 0.4657008634915888, 0.4553161411684262, 0.4801962905371906, 0.4198813453992766, 0.4590070946096678, 0.08778259265893507, 0.09974101116229594, 0.05025702896939288, 0.16183710288845654, 0.0857532752269855, 0.0809910617471774, 0.06260618762073955, 0.09778628005226397, 0.09265448419251476, 0.24849870656647977, 0.20537344838393945, 0.2930127978124629, 0.2033659035641252, 0.194416650859908, 0.13483125653557493, 0.269210261409939, 0.31802552067150247, 0.18389621802271505, 0.158962879956285, 0.147550172721862, 0.227735894837637, 0.2206963035479601, 0.2368848263933161, 0.22011734891272394, 0.17061516091551565, 0.35118364940704705, 0.17684665990720294, 0.09210128532166384, 0.2846252371300759, 0.12986342509015525, 0.2519985659436176, 0.15027197414893212, 0.23942848290484398, 0.1264453351758439, 0.2835252041831441, 0.21204543176511448, 0.2171487597640921, 0.26500858899275703, 0.21525741846451196, 0.22295510791485917, 0.22000490719831045, 0.23873510743497328, 0.21712915801101884, 0.25384468464416987, 0.21952861695435388, 0.16656101483963448, 0.16581118985945742, 0.16289867104305555, 0.15706859789462557, 0.20504790907935677, 0.16753795346004008, 0.17158758207903724, 0.16573107891157068, 0.16284942723146634, 0.1802793025863717, 0.18749433632442847, 0.18568207892103772, 0.8150881162208362, 0.19767881374862717, 0.14825906430759916, 0.1070176662487543, 0.11980106309956662, 0.07815335243081445, 0.5581526768063988, 0.5228868645310611, 0.5883747629964186, 0.16418188771251352, 0.1641823065462742, 0.14879106385850405, 0.09472789125867953, 0.10461299695168635, 0.45554754340933346, 0.19705185825941185, 0.1952533670740152, 0.1903948329788836, 0.19090785217053796, 0.19409580663932957, 0.19301419014506338, 0.18501490028519663, 0.18877114914533433, 0.20829279779450216, 0.1014967772453671, 0.0963763151039293, 0.0949563168240869, 0.09420621531406503, 0.07742417545899793, 0.09318696492203649, 0.10048658930072363, 0.0979042039024638, 0.08938574435067526]}, "mutation_prompt": null}
{"id": "aec034be-71a5-4938-9a8c-6c965157283a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 84, "fitness": 0.20382577740459293, "feedback": "The algorithm EnhancedAdaptiveGeneticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "ca714bdd-5b12-4804-b7e3-1b0cbf006092", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "88e327a3-6684-4a4a-9bc7-aa40daf4c4b0", "solution": "import numpy as np\n\nclass OptimizedEnhancedAdaptiveGA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 48\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 8\n        elite_indices = np.argsort(fitness)[:elite_size]\n        remaining_indices = np.argsort(fitness)[elite_size:self.population_size // 3]\n        selected_indices = np.random.choice(remaining_indices, self.population_size // 2 - elite_size, replace=False)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand()\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate / 2, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.12 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.05)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "OptimizedEnhancedAdaptiveGA", "description": "OptimizedEnhancedAdaptiveGA with streamlined parent selection and adaptive mutation adjustment for enhanced efficiency and better convergence.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {}, "mutation_prompt": null}
{"id": "a4ee4cd0-81bb-42fd-afbb-4586b17f7ca7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "b86334ba-13f0-4985-b8ea-c715c5673f00", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "aa151c1e-df1c-438d-a669-40a8a4e75b1d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "fd1d3d7b-313f-43d2-98e2-a23cf037e3d7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "918889ca-0fa7-4e1c-9e81-60bea90c016b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "4dccfa98-ea30-4034-b549-1167d594eb4e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "2c0f8ad5-732d-475d-883d-36181f01a980", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "02d5e8ae-ea51-4d2c-8e85-658d3762150b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "dad0d6f5-0018-4339-b469-9d76a69beddc", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "1139f5c7-397e-4171-b41f-48dc85e41af0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "39b3a392-352d-404b-835c-98c4461e117d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "f2344123-24d8-444e-83f9-c252e140cd3c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "d4754ab0-29ac-4331-be4d-a8a89dd2a667", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
{"id": "e1c8e389-034e-4917-84bf-059789389d54", "solution": "import numpy as np\n\nclass EnhancedAdaptiveGeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.current_evals = 0\n\n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def evaluate_population(self, population, func):\n        return np.apply_along_axis(func, 1, population)\n\n    def select_parents(self, population, fitness):\n        elite_size = self.population_size // 10\n        elite_indices = np.argsort(fitness)[:elite_size]\n        selected_indices = np.random.choice(np.argsort(fitness)[:self.population_size // 5], self.population_size // 2 - elite_size)\n        return np.concatenate((population[selected_indices], population[elite_indices]))\n\n    def crossover(self, parent1, parent2):\n        alpha = np.random.rand(self.dim)\n        return np.clip(alpha * parent1 + (1 - alpha) * parent2, self.lower_bound, self.upper_bound)\n\n    def mutate(self, individual):\n        mutation_vector = np.random.normal(0, self.mutation_rate, self.dim)\n        return np.clip(individual + mutation_vector, self.lower_bound, self.upper_bound)\n\n    def run_generation(self, population, func):\n        fitness = self.evaluate_population(population, func)\n        parents = self.select_parents(population, fitness)\n        new_population = []\n\n        for _ in range(self.population_size // 2):\n            parent1, parent2 = parents[np.random.choice(len(parents), 2, replace=False)]\n            child = self.crossover(parent1, parent2)\n            child = self.mutate(child)\n            new_population.append(child)\n            self.current_evals += 1\n            if self.current_evals >= self.budget:\n                break\n\n        return np.array(new_population)\n\n    def update_parameters(self, population):\n        diversity = np.mean(np.std(population, axis=0))\n        self.mutation_rate = max(0.01, 0.15 / (self.dim * (1 + diversity)))\n        self.population_size = int(max(20, min(80, self.population_size * (1 + 0.1 * (diversity - 0.1)))))\n\n    def __call__(self, func):\n        population = self.initialize_population()\n\n        while self.current_evals < self.budget:\n            population = self.run_generation(population, func)\n            self.update_parameters(population)\n\n        fitness = self.evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "EnhancedAdaptiveGeneticAlgorithm", "description": "EnhancedAdaptiveGeneticAlgorithm with optimized selection and adaptive mutation rate for improved performance.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "aec034be-71a5-4938-9a8c-6c965157283a", "metadata": {"aucs": [0.5301172116354133, 0.5771640665179177, 0.5426612623294591, 0.5542342391986039, 0.5437100378123645, 0.5366817209684844, 0.5497572856203932, 0.5404942159032358, 0.6005292514383396, 0.055668824095205904, 0.003402141962699723, 0.0036755084487291034, 9.999999999998899e-05, 0.10691782829332641, 9.999999999998899e-05, 9.999999999998899e-05, 0.017310534062044414, 9.999999999998899e-05, 0.06773990310789413, 0.14690165102649644, 0.13661928110333432, 0.10222617852965754, 0.1483489134716769, 0.147820154215076, 0.08763615984129502, 0.1190308581397479, 0.10649377523576409, 0.07107045646394894, 0.029030330804333593, 0.03843990802952524, 0.08490088008416918, 0.040246227816279845, 0.06039462691288222, 0.0725942848339518, 0.06612009396163143, 0.02662690996307082, 0.6582679411130938, 0.41727325437803253, 0.6324845740776714, 0.3846423119475497, 0.43456150501823065, 0.31203166906191704, 0.6741647154799628, 0.1409556573407741, 0.6330487263020486, 0.3413387442180361, 0.3199498206087589, 0.34351965645292437, 0.38618728397741287, 0.29604463821989, 0.3214851755894538, 0.348506041923185, 0.3158195897953927, 0.38278762115288, 0.16147479795020447, 0.11749715432290575, 0.3171355739037919, 0.3956110319013606, 0.2388806715896835, 0.28504378327758484, 0.0855729429478812, 0.1721358196133912, 0.20829575916927723, 0.31130020044201745, 0.1788505608400397, 0.23558580735541712, 0.2271383875551357, 0.22613320993515562, 0.1879309865292358, 0.23011420753126477, 0.13642303906318143, 0.25667010890780007, 0.1315288763082263, 0.21950243707930017, 0.17523354794916068, 0.21974106694516105, 0.22149744799589866, 0.2259746990805409, 0.2655220972882084, 0.20644328786573563, 0.15599241272621112, 0.01675154529344014, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101836110457559, 0.058835573763230786, 0.054051460651260874, 0.02432310198043064, 9.999999999998899e-05, 0.06339811822000085, 0.12364121910974679, 0.049940715738481245, 0.09399068313660752, 0.018977179524220844, 0.017445784578558277, 0.02275290492637394, 0.07115827983647538, 0.048892048484488804, 0.05795419756599762, 0.02810211357016268, 0.027612759887333582, 0.07994238607921655, 0.037678451728158535, 0.03467307367919714, 0.023116300521440314, 0.04072192730590485, 0.022111213858171275, 0.015864575813218318, 0.1648894336239045, 0.08330860059889711, 0.14142500735312624, 0.15100639310603003, 0.1460231724256189, 0.15783063114567963, 0.12959359143241178, 0.1415420935818964, 0.10299417105174857, 0.4829939698304413, 0.47287849598146436, 0.4762863167130148, 0.5036488894022979, 0.45746797274257744, 0.4547132126409289, 0.48695732908909917, 0.41725160972371933, 0.48385526789231903, 0.046236717340405575, 0.09769640674553526, 0.044079713798475306, 0.10654669827168761, 0.054548793185076994, 0.09040555827044405, 0.0960560709926771, 0.11208871148686828, 0.11308169459179063, 0.16133146974672874, 0.21419383831179273, 0.20908783427317268, 0.3884690939642731, 0.19515018984490673, 0.3369128919893566, 0.1870684708815532, 0.1333651173963203, 0.1470779521533102, 0.25292941584193396, 0.15916331754270685, 0.20291487300820943, 0.24225493573678403, 0.2193124507958022, 0.20517174716537712, 0.18997905204070886, 0.268122567151281, 0.25875250982888487, 0.1352111418899471, 0.286037664014016, 0.2317205552177548, 0.3051006395897268, 0.0893520353971684, 0.21764234374746738, 0.11453443300065358, 0.1484120704856463, 0.23007338324409332, 0.27791357022052354, 0.2321561687048853, 0.24546245219239038, 0.2127383117708569, 0.23028264665998543, 0.22241386101070582, 0.23112062466719951, 0.21656218475738565, 0.21152699553131504, 0.16428356956450718, 0.17135460856526064, 0.17546968093425053, 0.17985215011591915, 0.17374310090719414, 0.2119982498038151, 0.182816639294201, 0.1717774595420195, 0.1665006627988369, 0.07161745477880266, 0.187442907239472, 0.1544994632372263, 0.7984035177479921, 0.14789312522716103, 0.1482937961513, 0.15350679565708447, 0.12211294486242763, 0.17463573601491067, 0.6563208327137686, 0.20943231967770448, 0.6293462595582309, 0.16531964189859483, 0.16688610122805236, 0.1556257122864224, 0.10422281051864157, 0.4632884598093491, 0.4679005450901821, 0.1933942932006355, 0.19330183316467242, 0.17731506018257936, 0.2117938041549452, 0.19033585960826427, 0.18962836151267448, 0.1955230101595421, 0.18696766159970835, 0.196597753923475, 0.0668602447046156, 0.09253191083774959, 0.09620868884119738, 0.09791157856665411, 0.08927632365410443, 0.10702425115551328, 0.06023697639282377, 0.09750627434368331, 0.09488313945242977]}, "mutation_prompt": null}
