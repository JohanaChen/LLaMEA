{"id": "d81c48d1-0a78-4c10-9809-54527409024a", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + \\\n                                self.cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                self.social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n\n        return best_global_position", "name": "QPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QPSO) algorithm that utilizes quantum behavior to update particle positions for global exploration and exploitation in the search space.", "configspace": "", "generation": 0, "fitness": 0.08791691748279053, "feedback": "The algorithm QPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.09137750332434758, 0.07103498928657248, 0.1073240424159676, 0.12197341445597099, 0.11422313067830725, 0.11407451757059262, 0.14418001474392073, 0.13082295283587497, 0.12674015008030715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016529745265642437, 0.01662047108357545, 0.014166803994230204, 0.027349264576843946, 0.0016873879058666441, 0.022815285935078422, 0.03455179059868607, 0.02001042651012719, 0.01646391573036632, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035557233438047176, 0.027433894584523166, 0.007931459402708785, 0.0031040949208709367, 9.999999999998899e-05, 0.004353181111134141, 9.999999999998899e-05, 0.9932158560891226, 0.9945002051519919, 0.9943867594168835, 0.09983053838946399, 0.9927595780608293, 0.9913659595173947, 0.9943514959611014, 0.9929354393291131, 0.993680479656848, 0.03729272707383757, 0.019726874455586407, 0.029445970242214403, 0.01038911253886221, 0.012268951110596782, 0.11649802462318437, 0.05423080001533165, 0.02377976990428665, 9.999999999998899e-05, 0.13584876674948954, 0.0635193093676506, 0.06384607386750307, 0.09888852717671293, 0.049876603917744955, 0.06166207191373907, 0.04336229468146813, 0.07158791752448379, 0.010771604507380794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009915202622333696, 0.010101506339302624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001425838277096414, 9.999999999998899e-05, 0.0015564664280264262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12708828815770867, 0.16626353705280672, 0.17112939164247654, 0.1741020156114943, 0.16024207645602562, 0.17864278064193062, 0.16330790888304436, 0.10809118803463569, 0.13059807479934826, 0.02427953998770027, 0.015717999942630234, 9.999999999998899e-05, 0.006994154938359642, 9.999999999998899e-05, 0.046211327901703014, 0.028987518026201697, 0.014922801832592647, 0.03561360318242002, 0.07648853520640675, 0.1269863773219173, 0.07666485790599398, 0.10155674749137811, 0.11433915751696966, 0.09149094142707959, 0.09560592516867872, 0.07560822936878375, 0.08469094802287369, 0.11607770896680958, 0.09904723681111571, 0.1449885787600491, 0.14228309015362484, 0.12478496645600534, 0.11291534182183727, 0.14535252595003112, 0.17935655560927188, 0.13785268668722894, 0.04085037250714574, 0.05222829417546049, 0.06492160349151477, 0.06796235216593305, 0.09227325587075752, 0.06360683087624297, 0.14678610712879558, 0.10352733783213841, 0.08514761332265297, 0.11946949554250563, 0.09830789369626658, 0.16127431381182744, 0.11412925079500635, 0.098816001186257, 0.10465513727904985, 0.13199456351744088, 0.10260892280747069, 0.1266812059374537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01481069350735087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908665272758207, 0.10084594153238269, 0.11261363668235003, 0.09673372514611966, 0.12990952534849676, 0.07443679580966522, 0.08023416159460162, 0.10575737901855753, 0.07455588464445195, 0.22445024932857294, 0.10125677192150162, 0.10239269732370826, 0.06615016281253316, 0.04535834973510877, 0.09710304170782369, 0.17316627032057275, 0.04665214500176318, 0.05530724750044069, 0.13541934593761884, 0.16137872602894532, 0.16634544757723957, 0.13979678915088878, 0.14990861899335706, 0.16733100246265198, 0.162157048769904, 0.14708047555118942, 0.18380679680253764, 0.025152641033720835, 0.018113611997777612, 0.03675989084566589, 0.02832386190039493, 0.03455899326600753, 0.028952967480219582, 0.023654401032037642, 0.010369051372390414, 0.01785511947067242]}, "mutation_prompt": null}
{"id": "f00baed5-524a-469a-82b8-d40223aa702c", "solution": "import numpy as np\n\nclass EQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n        cognitive_weight = 2.0\n        social_weight = 2.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                cognitive_weight = 2.0 / (1 + np.exp(-0.1 * (func(particles[i]) - func(best_global_position))))\n                social_weight = 2.0 / (1 + np.exp(-0.1 * (func(particles[i]) - func(best_global_position)))\n\n                velocities[i] = self.inertia_weight * velocities[i] + \\\n                                cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n\n        return best_global_position", "name": "EQPSO", "description": "Enhanced Quantum-Inspired Particle Swarm Optimization (EQPSO) algorithm that incorporates a dynamic adjustment of cognitive and social weights based on particle performance to enhance convergence and exploration capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 33, 17, '                velocities[i] = self.inertia_weight * velocities[i] + \\\\\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 33, 17, '                velocities[i] = self.inertia_weight * velocities[i] + \\\\\\n'))", "parent_id": "d81c48d1-0a78-4c10-9809-54527409024a", "metadata": {}, "mutation_prompt": null}
{"id": "05a4ba0e-e403-4f03-9e2f-a8fb1427a448", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + \\\n                                self.cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                self.social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n\n        return best_global_position", "name": "QPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QPSO) algorithm that utilizes quantum behavior to update particle positions for global exploration and exploitation in the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d81c48d1-0a78-4c10-9809-54527409024a", "metadata": {"aucs": [0.09137750332434758, 0.07103498928657248, 0.1073240424159676, 0.12197341445597099, 0.11422313067830725, 0.11407451757059262, 0.14418001474392073, 0.13082295283587497, 0.12674015008030715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016529745265642437, 0.01662047108357545, 0.014166803994230204, 0.027349264576843946, 0.0016873879058666441, 0.022815285935078422, 0.03455179059868607, 0.02001042651012719, 0.01646391573036632, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035557233438047176, 0.027433894584523166, 0.007931459402708785, 0.0031040949208709367, 9.999999999998899e-05, 0.004353181111134141, 9.999999999998899e-05, 0.9932158560891226, 0.9945002051519919, 0.9943867594168835, 0.09983053838946399, 0.9927595780608293, 0.9913659595173947, 0.9943514959611014, 0.9929354393291131, 0.993680479656848, 0.03729272707383757, 0.019726874455586407, 0.029445970242214403, 0.01038911253886221, 0.012268951110596782, 0.11649802462318437, 0.05423080001533165, 0.02377976990428665, 9.999999999998899e-05, 0.13584876674948954, 0.0635193093676506, 0.06384607386750307, 0.09888852717671293, 0.049876603917744955, 0.06166207191373907, 0.04336229468146813, 0.07158791752448379, 0.010771604507380794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009915202622333696, 0.010101506339302624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001425838277096414, 9.999999999998899e-05, 0.0015564664280264262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12708828815770867, 0.16626353705280672, 0.17112939164247654, 0.1741020156114943, 0.16024207645602562, 0.17864278064193062, 0.16330790888304436, 0.10809118803463569, 0.13059807479934826, 0.02427953998770027, 0.015717999942630234, 9.999999999998899e-05, 0.006994154938359642, 9.999999999998899e-05, 0.046211327901703014, 0.028987518026201697, 0.014922801832592647, 0.03561360318242002, 0.07648853520640675, 0.1269863773219173, 0.07666485790599398, 0.10155674749137811, 0.11433915751696966, 0.09149094142707959, 0.09560592516867872, 0.07560822936878375, 0.08469094802287369, 0.11607770896680958, 0.09904723681111571, 0.1449885787600491, 0.14228309015362484, 0.12478496645600534, 0.11291534182183727, 0.14535252595003112, 0.17935655560927188, 0.13785268668722894, 0.04085037250714574, 0.05222829417546049, 0.06492160349151477, 0.06796235216593305, 0.09227325587075752, 0.06360683087624297, 0.14678610712879558, 0.10352733783213841, 0.08514761332265297, 0.11946949554250563, 0.09830789369626658, 0.16127431381182744, 0.11412925079500635, 0.098816001186257, 0.10465513727904985, 0.13199456351744088, 0.10260892280747069, 0.1266812059374537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01481069350735087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908665272758207, 0.10084594153238269, 0.11261363668235003, 0.09673372514611966, 0.12990952534849676, 0.07443679580966522, 0.08023416159460162, 0.10575737901855753, 0.07455588464445195, 0.22445024932857294, 0.10125677192150162, 0.10239269732370826, 0.06615016281253316, 0.04535834973510877, 0.09710304170782369, 0.17316627032057275, 0.04665214500176318, 0.05530724750044069, 0.13541934593761884, 0.16137872602894532, 0.16634544757723957, 0.13979678915088878, 0.14990861899335706, 0.16733100246265198, 0.162157048769904, 0.14708047555118942, 0.18380679680253764, 0.025152641033720835, 0.018113611997777612, 0.03675989084566589, 0.02832386190039493, 0.03455899326600753, 0.028952967480219582, 0.023654401032037642, 0.010369051372390414, 0.01785511947067242]}, "mutation_prompt": null}
{"id": "2d3863d5-4f6c-4cfb-a8c0-b9dc4b0da077", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + \\\n                                self.cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                self.social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n\n        return best_global_position", "name": "QPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QPSO) algorithm that utilizes quantum behavior to update particle positions for global exploration and exploitation in the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d81c48d1-0a78-4c10-9809-54527409024a", "metadata": {"aucs": [0.09137750332434758, 0.07103498928657248, 0.1073240424159676, 0.12197341445597099, 0.11422313067830725, 0.11407451757059262, 0.14418001474392073, 0.13082295283587497, 0.12674015008030715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016529745265642437, 0.01662047108357545, 0.014166803994230204, 0.027349264576843946, 0.0016873879058666441, 0.022815285935078422, 0.03455179059868607, 0.02001042651012719, 0.01646391573036632, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035557233438047176, 0.027433894584523166, 0.007931459402708785, 0.0031040949208709367, 9.999999999998899e-05, 0.004353181111134141, 9.999999999998899e-05, 0.9932158560891226, 0.9945002051519919, 0.9943867594168835, 0.09983053838946399, 0.9927595780608293, 0.9913659595173947, 0.9943514959611014, 0.9929354393291131, 0.993680479656848, 0.03729272707383757, 0.019726874455586407, 0.029445970242214403, 0.01038911253886221, 0.012268951110596782, 0.11649802462318437, 0.05423080001533165, 0.02377976990428665, 9.999999999998899e-05, 0.13584876674948954, 0.0635193093676506, 0.06384607386750307, 0.09888852717671293, 0.049876603917744955, 0.06166207191373907, 0.04336229468146813, 0.07158791752448379, 0.010771604507380794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009915202622333696, 0.010101506339302624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001425838277096414, 9.999999999998899e-05, 0.0015564664280264262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12708828815770867, 0.16626353705280672, 0.17112939164247654, 0.1741020156114943, 0.16024207645602562, 0.17864278064193062, 0.16330790888304436, 0.10809118803463569, 0.13059807479934826, 0.02427953998770027, 0.015717999942630234, 9.999999999998899e-05, 0.006994154938359642, 9.999999999998899e-05, 0.046211327901703014, 0.028987518026201697, 0.014922801832592647, 0.03561360318242002, 0.07648853520640675, 0.1269863773219173, 0.07666485790599398, 0.10155674749137811, 0.11433915751696966, 0.09149094142707959, 0.09560592516867872, 0.07560822936878375, 0.08469094802287369, 0.11607770896680958, 0.09904723681111571, 0.1449885787600491, 0.14228309015362484, 0.12478496645600534, 0.11291534182183727, 0.14535252595003112, 0.17935655560927188, 0.13785268668722894, 0.04085037250714574, 0.05222829417546049, 0.06492160349151477, 0.06796235216593305, 0.09227325587075752, 0.06360683087624297, 0.14678610712879558, 0.10352733783213841, 0.08514761332265297, 0.11946949554250563, 0.09830789369626658, 0.16127431381182744, 0.11412925079500635, 0.098816001186257, 0.10465513727904985, 0.13199456351744088, 0.10260892280747069, 0.1266812059374537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01481069350735087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908665272758207, 0.10084594153238269, 0.11261363668235003, 0.09673372514611966, 0.12990952534849676, 0.07443679580966522, 0.08023416159460162, 0.10575737901855753, 0.07455588464445195, 0.22445024932857294, 0.10125677192150162, 0.10239269732370826, 0.06615016281253316, 0.04535834973510877, 0.09710304170782369, 0.17316627032057275, 0.04665214500176318, 0.05530724750044069, 0.13541934593761884, 0.16137872602894532, 0.16634544757723957, 0.13979678915088878, 0.14990861899335706, 0.16733100246265198, 0.162157048769904, 0.14708047555118942, 0.18380679680253764, 0.025152641033720835, 0.018113611997777612, 0.03675989084566589, 0.02832386190039493, 0.03455899326600753, 0.028952967480219582, 0.023654401032037642, 0.010369051372390414, 0.01785511947067242]}, "mutation_prompt": null}
{"id": "a240a3d1-4b21-4d32-b7a8-df7ecf7322bd", "solution": "import numpy as np\n\nclass QPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + \\\n                                self.cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                self.social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n\n        return best_global_position", "name": "QPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QPSO) algorithm that utilizes quantum behavior to update particle positions for global exploration and exploitation in the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d81c48d1-0a78-4c10-9809-54527409024a", "metadata": {"aucs": [0.09137750332434758, 0.07103498928657248, 0.1073240424159676, 0.12197341445597099, 0.11422313067830725, 0.11407451757059262, 0.14418001474392073, 0.13082295283587497, 0.12674015008030715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016529745265642437, 0.01662047108357545, 0.014166803994230204, 0.027349264576843946, 0.0016873879058666441, 0.022815285935078422, 0.03455179059868607, 0.02001042651012719, 0.01646391573036632, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035557233438047176, 0.027433894584523166, 0.007931459402708785, 0.0031040949208709367, 9.999999999998899e-05, 0.004353181111134141, 9.999999999998899e-05, 0.9932158560891226, 0.9945002051519919, 0.9943867594168835, 0.09983053838946399, 0.9927595780608293, 0.9913659595173947, 0.9943514959611014, 0.9929354393291131, 0.993680479656848, 0.03729272707383757, 0.019726874455586407, 0.029445970242214403, 0.01038911253886221, 0.012268951110596782, 0.11649802462318437, 0.05423080001533165, 0.02377976990428665, 9.999999999998899e-05, 0.13584876674948954, 0.0635193093676506, 0.06384607386750307, 0.09888852717671293, 0.049876603917744955, 0.06166207191373907, 0.04336229468146813, 0.07158791752448379, 0.010771604507380794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009915202622333696, 0.010101506339302624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001425838277096414, 9.999999999998899e-05, 0.0015564664280264262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12708828815770867, 0.16626353705280672, 0.17112939164247654, 0.1741020156114943, 0.16024207645602562, 0.17864278064193062, 0.16330790888304436, 0.10809118803463569, 0.13059807479934826, 0.02427953998770027, 0.015717999942630234, 9.999999999998899e-05, 0.006994154938359642, 9.999999999998899e-05, 0.046211327901703014, 0.028987518026201697, 0.014922801832592647, 0.03561360318242002, 0.07648853520640675, 0.1269863773219173, 0.07666485790599398, 0.10155674749137811, 0.11433915751696966, 0.09149094142707959, 0.09560592516867872, 0.07560822936878375, 0.08469094802287369, 0.11607770896680958, 0.09904723681111571, 0.1449885787600491, 0.14228309015362484, 0.12478496645600534, 0.11291534182183727, 0.14535252595003112, 0.17935655560927188, 0.13785268668722894, 0.04085037250714574, 0.05222829417546049, 0.06492160349151477, 0.06796235216593305, 0.09227325587075752, 0.06360683087624297, 0.14678610712879558, 0.10352733783213841, 0.08514761332265297, 0.11946949554250563, 0.09830789369626658, 0.16127431381182744, 0.11412925079500635, 0.098816001186257, 0.10465513727904985, 0.13199456351744088, 0.10260892280747069, 0.1266812059374537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01481069350735087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908665272758207, 0.10084594153238269, 0.11261363668235003, 0.09673372514611966, 0.12990952534849676, 0.07443679580966522, 0.08023416159460162, 0.10575737901855753, 0.07455588464445195, 0.22445024932857294, 0.10125677192150162, 0.10239269732370826, 0.06615016281253316, 0.04535834973510877, 0.09710304170782369, 0.17316627032057275, 0.04665214500176318, 0.05530724750044069, 0.13541934593761884, 0.16137872602894532, 0.16634544757723957, 0.13979678915088878, 0.14990861899335706, 0.16733100246265198, 0.162157048769904, 0.14708047555118942, 0.18380679680253764, 0.025152641033720835, 0.018113611997777612, 0.03675989084566589, 0.02832386190039493, 0.03455899326600753, 0.028952967480219582, 0.023654401032037642, 0.010369051372390414, 0.01785511947067242]}, "mutation_prompt": null}
{"id": "38f83733-2de3-472c-be87-a866f6bd22da", "solution": "import numpy as np\n\nclass EnhancedQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                self.cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                self.social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedQPSO", "description": "Enhancing QPSO algorithm with adaptive inertia weight and dynamic particle number adjustment for improved exploration and exploitation capabilities.", "configspace": "", "generation": 5, "fitness": 0.08817377356314758, "feedback": "The algorithm EnhancedQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.19.", "error": "", "parent_id": "d81c48d1-0a78-4c10-9809-54527409024a", "metadata": {"aucs": [0.09137750332434758, 0.07103755797088618, 0.10747206964130562, 0.1219776386763386, 0.11422685242882469, 0.11407451757059262, 0.14419030590573279, 0.13082507227434093, 0.12673871363945033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016452498828398943, 0.016228337905443868, 0.014166803994230204, 0.026067641440187028, 0.0016873879058666441, 0.022815285935078422, 0.034630990612736556, 0.02002237703414489, 0.01646391573036632, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035409286169888476, 0.020950191663557383, 0.007931459402708785, 0.0031040949208709367, 9.999999999998899e-05, 0.004356990221163093, 9.999999999998899e-05, 0.9932158774413057, 0.9945002051519919, 0.9943867594168835, 0.09983053838946399, 0.9927594784353152, 0.9913659511326784, 0.9943514959611014, 0.9929354080870345, 0.9936804463289839, 0.037296059762986444, 0.019731015239286664, 0.029446216638138734, 0.010387977389512693, 0.012274166111926, 0.11649297832742722, 0.0542469484257917, 0.023775950531114143, 9.999999999998899e-05, 0.1503740271071652, 0.0635193093676506, 0.06384607386750307, 0.09888852717671293, 0.049876603917744955, 0.06166207191373907, 0.04336229468146813, 0.07973767717103075, 0.010771604507380794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009941900878242982, 0.01011702530591485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001425838277096414, 9.999999999998899e-05, 0.005011466077118665, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024671724214057056, 0.017471617744302947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12708484405046694, 0.16626353705280672, 0.17111936253314564, 0.1741020156114943, 0.16024207645602562, 0.17864278592582528, 0.1637790410252935, 0.10809139175859872, 0.13059807479934826, 0.02427953998770027, 0.015717999942630234, 9.999999999998899e-05, 0.006986136719968505, 9.999999999998899e-05, 0.04569353990912184, 0.028345034243744016, 0.013983355438577427, 0.03582216183579423, 0.07648853520640675, 0.12904714945358942, 0.07666485790599398, 0.10153474253599504, 0.11435843680182911, 0.10114390902417814, 0.09630560100199603, 0.07658845743556464, 0.08254968394222284, 0.11607770896680958, 0.0990869885593425, 0.14486501879931768, 0.14169151791986756, 0.12497954887735141, 0.1128656153060501, 0.14533795168144859, 0.17859012234292437, 0.13785268668722894, 0.0407964605234995, 0.045437332501534144, 0.06492160349151477, 0.06796235216593305, 0.09214366049697076, 0.08019391733806402, 0.147076716711127, 0.1017947207627401, 0.08514761332265297, 0.11946949554250563, 0.10815730629266496, 0.14544707184675576, 0.10760786811661127, 0.11674266808055422, 0.10367940937683395, 0.1286357655696334, 0.1297637343625624, 0.13068733452306314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015116571210483598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908665272758207, 0.1009391362547094, 0.11261363668235003, 0.09712540324732377, 0.12995147155848008, 0.07443679580966522, 0.08014755992704081, 0.10573647323641422, 0.07455588464445195, 0.22365597043184493, 0.10088363701841441, 0.10241526352692631, 0.0660541785821297, 0.045366085295781566, 0.09711287357602505, 0.17301472871360568, 0.04665214500176318, 0.05527375825445702, 0.1512651944948875, 0.1287261148789598, 0.164410597280519, 0.13979678915088878, 0.14990945666448408, 0.16733100246265198, 0.15480108542775217, 0.14708047555118942, 0.16284778891658425, 0.025152641033720835, 0.025121289892246712, 0.03675989084566589, 0.02823423621749166, 0.038999513669339514, 0.028899053051409496, 0.02352853583405523, 0.010375021605592338, 0.02302389737013233]}, "mutation_prompt": null}
{"id": "facb0b28-451c-4cd2-ac39-ead8a30ff2ad", "solution": "import numpy as np\n\nclass EnhancedQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                self.cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                self.social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedQPSO", "description": "Enhancing QPSO algorithm with adaptive inertia weight and dynamic particle number adjustment for improved exploration and exploitation capabilities.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "38f83733-2de3-472c-be87-a866f6bd22da", "metadata": {"aucs": [0.09137750332434758, 0.07103755797088618, 0.10747206964130562, 0.1219776386763386, 0.11422685242882469, 0.11407451757059262, 0.14419030590573279, 0.13082507227434093, 0.12673871363945033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016452498828398943, 0.016228337905443868, 0.014166803994230204, 0.026067641440187028, 0.0016873879058666441, 0.022815285935078422, 0.034630990612736556, 0.02002237703414489, 0.01646391573036632, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035409286169888476, 0.020950191663557383, 0.007931459402708785, 0.0031040949208709367, 9.999999999998899e-05, 0.004356990221163093, 9.999999999998899e-05, 0.9932158774413057, 0.9945002051519919, 0.9943867594168835, 0.09983053838946399, 0.9927594784353152, 0.9913659511326784, 0.9943514959611014, 0.9929354080870345, 0.9936804463289839, 0.037296059762986444, 0.019731015239286664, 0.029446216638138734, 0.010387977389512693, 0.012274166111926, 0.11649297832742722, 0.0542469484257917, 0.023775950531114143, 9.999999999998899e-05, 0.1503740271071652, 0.0635193093676506, 0.06384607386750307, 0.09888852717671293, 0.049876603917744955, 0.06166207191373907, 0.04336229468146813, 0.07973767717103075, 0.010771604507380794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009941900878242982, 0.01011702530591485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001425838277096414, 9.999999999998899e-05, 0.005011466077118665, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024671724214057056, 0.017471617744302947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12708484405046694, 0.16626353705280672, 0.17111936253314564, 0.1741020156114943, 0.16024207645602562, 0.17864278592582528, 0.1637790410252935, 0.10809139175859872, 0.13059807479934826, 0.02427953998770027, 0.015717999942630234, 9.999999999998899e-05, 0.006986136719968505, 9.999999999998899e-05, 0.04569353990912184, 0.028345034243744016, 0.013983355438577427, 0.03582216183579423, 0.07648853520640675, 0.12904714945358942, 0.07666485790599398, 0.10153474253599504, 0.11435843680182911, 0.10114390902417814, 0.09630560100199603, 0.07658845743556464, 0.08254968394222284, 0.11607770896680958, 0.0990869885593425, 0.14486501879931768, 0.14169151791986756, 0.12497954887735141, 0.1128656153060501, 0.14533795168144859, 0.17859012234292437, 0.13785268668722894, 0.0407964605234995, 0.045437332501534144, 0.06492160349151477, 0.06796235216593305, 0.09214366049697076, 0.08019391733806402, 0.147076716711127, 0.1017947207627401, 0.08514761332265297, 0.11946949554250563, 0.10815730629266496, 0.14544707184675576, 0.10760786811661127, 0.11674266808055422, 0.10367940937683395, 0.1286357655696334, 0.1297637343625624, 0.13068733452306314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015116571210483598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908665272758207, 0.1009391362547094, 0.11261363668235003, 0.09712540324732377, 0.12995147155848008, 0.07443679580966522, 0.08014755992704081, 0.10573647323641422, 0.07455588464445195, 0.22365597043184493, 0.10088363701841441, 0.10241526352692631, 0.0660541785821297, 0.045366085295781566, 0.09711287357602505, 0.17301472871360568, 0.04665214500176318, 0.05527375825445702, 0.1512651944948875, 0.1287261148789598, 0.164410597280519, 0.13979678915088878, 0.14990945666448408, 0.16733100246265198, 0.15480108542775217, 0.14708047555118942, 0.16284778891658425, 0.025152641033720835, 0.025121289892246712, 0.03675989084566589, 0.02823423621749166, 0.038999513669339514, 0.028899053051409496, 0.02352853583405523, 0.010375021605592338, 0.02302389737013233]}, "mutation_prompt": null}
{"id": "4f980a3b-aef8-422c-88bc-d46cf889aee8", "solution": "import numpy as np\n\nclass EnhancedQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                self.cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                self.social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedQPSO", "description": "Enhancing QPSO algorithm with adaptive inertia weight and dynamic particle number adjustment for improved exploration and exploitation capabilities.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "38f83733-2de3-472c-be87-a866f6bd22da", "metadata": {"aucs": [0.09137750332434758, 0.07103755797088618, 0.10747206964130562, 0.1219776386763386, 0.11422685242882469, 0.11407451757059262, 0.14419030590573279, 0.13082507227434093, 0.12673871363945033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016452498828398943, 0.016228337905443868, 0.014166803994230204, 0.026067641440187028, 0.0016873879058666441, 0.022815285935078422, 0.034630990612736556, 0.02002237703414489, 0.01646391573036632, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035409286169888476, 0.020950191663557383, 0.007931459402708785, 0.0031040949208709367, 9.999999999998899e-05, 0.004356990221163093, 9.999999999998899e-05, 0.9932158774413057, 0.9945002051519919, 0.9943867594168835, 0.09983053838946399, 0.9927594784353152, 0.9913659511326784, 0.9943514959611014, 0.9929354080870345, 0.9936804463289839, 0.037296059762986444, 0.019731015239286664, 0.029446216638138734, 0.010387977389512693, 0.012274166111926, 0.11649297832742722, 0.0542469484257917, 0.023775950531114143, 9.999999999998899e-05, 0.1503740271071652, 0.0635193093676506, 0.06384607386750307, 0.09888852717671293, 0.049876603917744955, 0.06166207191373907, 0.04336229468146813, 0.07973767717103075, 0.010771604507380794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009941900878242982, 0.01011702530591485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001425838277096414, 9.999999999998899e-05, 0.005011466077118665, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024671724214057056, 0.017471617744302947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12708484405046694, 0.16626353705280672, 0.17111936253314564, 0.1741020156114943, 0.16024207645602562, 0.17864278592582528, 0.1637790410252935, 0.10809139175859872, 0.13059807479934826, 0.02427953998770027, 0.015717999942630234, 9.999999999998899e-05, 0.006986136719968505, 9.999999999998899e-05, 0.04569353990912184, 0.028345034243744016, 0.013983355438577427, 0.03582216183579423, 0.07648853520640675, 0.12904714945358942, 0.07666485790599398, 0.10153474253599504, 0.11435843680182911, 0.10114390902417814, 0.09630560100199603, 0.07658845743556464, 0.08254968394222284, 0.11607770896680958, 0.0990869885593425, 0.14486501879931768, 0.14169151791986756, 0.12497954887735141, 0.1128656153060501, 0.14533795168144859, 0.17859012234292437, 0.13785268668722894, 0.0407964605234995, 0.045437332501534144, 0.06492160349151477, 0.06796235216593305, 0.09214366049697076, 0.08019391733806402, 0.147076716711127, 0.1017947207627401, 0.08514761332265297, 0.11946949554250563, 0.10815730629266496, 0.14544707184675576, 0.10760786811661127, 0.11674266808055422, 0.10367940937683395, 0.1286357655696334, 0.1297637343625624, 0.13068733452306314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015116571210483598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908665272758207, 0.1009391362547094, 0.11261363668235003, 0.09712540324732377, 0.12995147155848008, 0.07443679580966522, 0.08014755992704081, 0.10573647323641422, 0.07455588464445195, 0.22365597043184493, 0.10088363701841441, 0.10241526352692631, 0.0660541785821297, 0.045366085295781566, 0.09711287357602505, 0.17301472871360568, 0.04665214500176318, 0.05527375825445702, 0.1512651944948875, 0.1287261148789598, 0.164410597280519, 0.13979678915088878, 0.14990945666448408, 0.16733100246265198, 0.15480108542775217, 0.14708047555118942, 0.16284778891658425, 0.025152641033720835, 0.025121289892246712, 0.03675989084566589, 0.02823423621749166, 0.038999513669339514, 0.028899053051409496, 0.02352853583405523, 0.010375021605592338, 0.02302389737013233]}, "mutation_prompt": null}
{"id": "604e17a4-c8d7-4bbb-8f8f-484b534e614c", "solution": "import numpy as np\n\nclass EnhancedQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                self.cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                self.social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedQPSO", "description": "Enhancing QPSO algorithm with adaptive inertia weight and dynamic particle number adjustment for improved exploration and exploitation capabilities.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "38f83733-2de3-472c-be87-a866f6bd22da", "metadata": {"aucs": [0.09137750332434758, 0.07103755797088618, 0.10747206964130562, 0.1219776386763386, 0.11422685242882469, 0.11407451757059262, 0.14419030590573279, 0.13082507227434093, 0.12673871363945033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016452498828398943, 0.016228337905443868, 0.014166803994230204, 0.026067641440187028, 0.0016873879058666441, 0.022815285935078422, 0.034630990612736556, 0.02002237703414489, 0.01646391573036632, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035409286169888476, 0.020950191663557383, 0.007931459402708785, 0.0031040949208709367, 9.999999999998899e-05, 0.004356990221163093, 9.999999999998899e-05, 0.9932158774413057, 0.9945002051519919, 0.9943867594168835, 0.09983053838946399, 0.9927594784353152, 0.9913659511326784, 0.9943514959611014, 0.9929354080870345, 0.9936804463289839, 0.037296059762986444, 0.019731015239286664, 0.029446216638138734, 0.010387977389512693, 0.012274166111926, 0.11649297832742722, 0.0542469484257917, 0.023775950531114143, 9.999999999998899e-05, 0.1503740271071652, 0.0635193093676506, 0.06384607386750307, 0.09888852717671293, 0.049876603917744955, 0.06166207191373907, 0.04336229468146813, 0.07973767717103075, 0.010771604507380794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009941900878242982, 0.01011702530591485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001425838277096414, 9.999999999998899e-05, 0.005011466077118665, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024671724214057056, 0.017471617744302947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12708484405046694, 0.16626353705280672, 0.17111936253314564, 0.1741020156114943, 0.16024207645602562, 0.17864278592582528, 0.1637790410252935, 0.10809139175859872, 0.13059807479934826, 0.02427953998770027, 0.015717999942630234, 9.999999999998899e-05, 0.006986136719968505, 9.999999999998899e-05, 0.04569353990912184, 0.028345034243744016, 0.013983355438577427, 0.03582216183579423, 0.07648853520640675, 0.12904714945358942, 0.07666485790599398, 0.10153474253599504, 0.11435843680182911, 0.10114390902417814, 0.09630560100199603, 0.07658845743556464, 0.08254968394222284, 0.11607770896680958, 0.0990869885593425, 0.14486501879931768, 0.14169151791986756, 0.12497954887735141, 0.1128656153060501, 0.14533795168144859, 0.17859012234292437, 0.13785268668722894, 0.0407964605234995, 0.045437332501534144, 0.06492160349151477, 0.06796235216593305, 0.09214366049697076, 0.08019391733806402, 0.147076716711127, 0.1017947207627401, 0.08514761332265297, 0.11946949554250563, 0.10815730629266496, 0.14544707184675576, 0.10760786811661127, 0.11674266808055422, 0.10367940937683395, 0.1286357655696334, 0.1297637343625624, 0.13068733452306314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015116571210483598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908665272758207, 0.1009391362547094, 0.11261363668235003, 0.09712540324732377, 0.12995147155848008, 0.07443679580966522, 0.08014755992704081, 0.10573647323641422, 0.07455588464445195, 0.22365597043184493, 0.10088363701841441, 0.10241526352692631, 0.0660541785821297, 0.045366085295781566, 0.09711287357602505, 0.17301472871360568, 0.04665214500176318, 0.05527375825445702, 0.1512651944948875, 0.1287261148789598, 0.164410597280519, 0.13979678915088878, 0.14990945666448408, 0.16733100246265198, 0.15480108542775217, 0.14708047555118942, 0.16284778891658425, 0.025152641033720835, 0.025121289892246712, 0.03675989084566589, 0.02823423621749166, 0.038999513669339514, 0.028899053051409496, 0.02352853583405523, 0.010375021605592338, 0.02302389737013233]}, "mutation_prompt": null}
{"id": "b9669b19-1064-4a4d-8f31-90b3f0cc8918", "solution": "import numpy as np\n\nclass EnhancedQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                self.cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                self.social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedQPSO", "description": "Enhancing QPSO algorithm with adaptive inertia weight and dynamic particle number adjustment for improved exploration and exploitation capabilities.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "38f83733-2de3-472c-be87-a866f6bd22da", "metadata": {"aucs": [0.09137750332434758, 0.07103755797088618, 0.10747206964130562, 0.1219776386763386, 0.11422685242882469, 0.11407451757059262, 0.14419030590573279, 0.13082507227434093, 0.12673871363945033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016452498828398943, 0.016228337905443868, 0.014166803994230204, 0.026067641440187028, 0.0016873879058666441, 0.022815285935078422, 0.034630990612736556, 0.02002237703414489, 0.01646391573036632, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035409286169888476, 0.020950191663557383, 0.007931459402708785, 0.0031040949208709367, 9.999999999998899e-05, 0.004356990221163093, 9.999999999998899e-05, 0.9932158774413057, 0.9945002051519919, 0.9943867594168835, 0.09983053838946399, 0.9927594784353152, 0.9913659511326784, 0.9943514959611014, 0.9929354080870345, 0.9936804463289839, 0.037296059762986444, 0.019731015239286664, 0.029446216638138734, 0.010387977389512693, 0.012274166111926, 0.11649297832742722, 0.0542469484257917, 0.023775950531114143, 9.999999999998899e-05, 0.1503740271071652, 0.0635193093676506, 0.06384607386750307, 0.09888852717671293, 0.049876603917744955, 0.06166207191373907, 0.04336229468146813, 0.07973767717103075, 0.010771604507380794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009941900878242982, 0.01011702530591485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001425838277096414, 9.999999999998899e-05, 0.005011466077118665, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024671724214057056, 0.017471617744302947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12708484405046694, 0.16626353705280672, 0.17111936253314564, 0.1741020156114943, 0.16024207645602562, 0.17864278592582528, 0.1637790410252935, 0.10809139175859872, 0.13059807479934826, 0.02427953998770027, 0.015717999942630234, 9.999999999998899e-05, 0.006986136719968505, 9.999999999998899e-05, 0.04569353990912184, 0.028345034243744016, 0.013983355438577427, 0.03582216183579423, 0.07648853520640675, 0.12904714945358942, 0.07666485790599398, 0.10153474253599504, 0.11435843680182911, 0.10114390902417814, 0.09630560100199603, 0.07658845743556464, 0.08254968394222284, 0.11607770896680958, 0.0990869885593425, 0.14486501879931768, 0.14169151791986756, 0.12497954887735141, 0.1128656153060501, 0.14533795168144859, 0.17859012234292437, 0.13785268668722894, 0.0407964605234995, 0.045437332501534144, 0.06492160349151477, 0.06796235216593305, 0.09214366049697076, 0.08019391733806402, 0.147076716711127, 0.1017947207627401, 0.08514761332265297, 0.11946949554250563, 0.10815730629266496, 0.14544707184675576, 0.10760786811661127, 0.11674266808055422, 0.10367940937683395, 0.1286357655696334, 0.1297637343625624, 0.13068733452306314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015116571210483598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908665272758207, 0.1009391362547094, 0.11261363668235003, 0.09712540324732377, 0.12995147155848008, 0.07443679580966522, 0.08014755992704081, 0.10573647323641422, 0.07455588464445195, 0.22365597043184493, 0.10088363701841441, 0.10241526352692631, 0.0660541785821297, 0.045366085295781566, 0.09711287357602505, 0.17301472871360568, 0.04665214500176318, 0.05527375825445702, 0.1512651944948875, 0.1287261148789598, 0.164410597280519, 0.13979678915088878, 0.14990945666448408, 0.16733100246265198, 0.15480108542775217, 0.14708047555118942, 0.16284778891658425, 0.025152641033720835, 0.025121289892246712, 0.03675989084566589, 0.02823423621749166, 0.038999513669339514, 0.028899053051409496, 0.02352853583405523, 0.010375021605592338, 0.02302389737013233]}, "mutation_prompt": null}
{"id": "4b896739-ac43-45fc-8ac7-5d5345c8b3e4", "solution": "import numpy as np\n\nclass EnhancedQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                self.cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                self.social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedQPSO", "description": "Enhancing QPSO algorithm with adaptive inertia weight and dynamic particle number adjustment for improved exploration and exploitation capabilities.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "38f83733-2de3-472c-be87-a866f6bd22da", "metadata": {"aucs": [0.09137750332434758, 0.07103755797088618, 0.10747206964130562, 0.1219776386763386, 0.11422685242882469, 0.11407451757059262, 0.14419030590573279, 0.13082507227434093, 0.12673871363945033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016452498828398943, 0.016228337905443868, 0.014166803994230204, 0.026067641440187028, 0.0016873879058666441, 0.022815285935078422, 0.034630990612736556, 0.02002237703414489, 0.01646391573036632, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035409286169888476, 0.020950191663557383, 0.007931459402708785, 0.0031040949208709367, 9.999999999998899e-05, 0.004356990221163093, 9.999999999998899e-05, 0.9932158774413057, 0.9945002051519919, 0.9943867594168835, 0.09983053838946399, 0.9927594784353152, 0.9913659511326784, 0.9943514959611014, 0.9929354080870345, 0.9936804463289839, 0.037296059762986444, 0.019731015239286664, 0.029446216638138734, 0.010387977389512693, 0.012274166111926, 0.11649297832742722, 0.0542469484257917, 0.023775950531114143, 9.999999999998899e-05, 0.1503740271071652, 0.0635193093676506, 0.06384607386750307, 0.09888852717671293, 0.049876603917744955, 0.06166207191373907, 0.04336229468146813, 0.07973767717103075, 0.010771604507380794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009941900878242982, 0.01011702530591485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001425838277096414, 9.999999999998899e-05, 0.005011466077118665, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024671724214057056, 0.017471617744302947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12708484405046694, 0.16626353705280672, 0.17111936253314564, 0.1741020156114943, 0.16024207645602562, 0.17864278592582528, 0.1637790410252935, 0.10809139175859872, 0.13059807479934826, 0.02427953998770027, 0.015717999942630234, 9.999999999998899e-05, 0.006986136719968505, 9.999999999998899e-05, 0.04569353990912184, 0.028345034243744016, 0.013983355438577427, 0.03582216183579423, 0.07648853520640675, 0.12904714945358942, 0.07666485790599398, 0.10153474253599504, 0.11435843680182911, 0.10114390902417814, 0.09630560100199603, 0.07658845743556464, 0.08254968394222284, 0.11607770896680958, 0.0990869885593425, 0.14486501879931768, 0.14169151791986756, 0.12497954887735141, 0.1128656153060501, 0.14533795168144859, 0.17859012234292437, 0.13785268668722894, 0.0407964605234995, 0.045437332501534144, 0.06492160349151477, 0.06796235216593305, 0.09214366049697076, 0.08019391733806402, 0.147076716711127, 0.1017947207627401, 0.08514761332265297, 0.11946949554250563, 0.10815730629266496, 0.14544707184675576, 0.10760786811661127, 0.11674266808055422, 0.10367940937683395, 0.1286357655696334, 0.1297637343625624, 0.13068733452306314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015116571210483598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908665272758207, 0.1009391362547094, 0.11261363668235003, 0.09712540324732377, 0.12995147155848008, 0.07443679580966522, 0.08014755992704081, 0.10573647323641422, 0.07455588464445195, 0.22365597043184493, 0.10088363701841441, 0.10241526352692631, 0.0660541785821297, 0.045366085295781566, 0.09711287357602505, 0.17301472871360568, 0.04665214500176318, 0.05527375825445702, 0.1512651944948875, 0.1287261148789598, 0.164410597280519, 0.13979678915088878, 0.14990945666448408, 0.16733100246265198, 0.15480108542775217, 0.14708047555118942, 0.16284778891658425, 0.025152641033720835, 0.025121289892246712, 0.03675989084566589, 0.02823423621749166, 0.038999513669339514, 0.028899053051409496, 0.02352853583405523, 0.010375021605592338, 0.02302389737013233]}, "mutation_prompt": null}
{"id": "54ccc897-6d35-46b5-99cd-92f90eeed56b", "solution": "import numpy as np\n\nclass EnhancedQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                self.cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                self.social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedQPSO", "description": "Enhancing QPSO algorithm with adaptive inertia weight and dynamic particle number adjustment for improved exploration and exploitation capabilities.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "38f83733-2de3-472c-be87-a866f6bd22da", "metadata": {"aucs": [0.09137750332434758, 0.07103755797088618, 0.10747206964130562, 0.1219776386763386, 0.11422685242882469, 0.11407451757059262, 0.14419030590573279, 0.13082507227434093, 0.12673871363945033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016452498828398943, 0.016228337905443868, 0.014166803994230204, 0.026067641440187028, 0.0016873879058666441, 0.022815285935078422, 0.034630990612736556, 0.02002237703414489, 0.01646391573036632, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035409286169888476, 0.020950191663557383, 0.007931459402708785, 0.0031040949208709367, 9.999999999998899e-05, 0.004356990221163093, 9.999999999998899e-05, 0.9932158774413057, 0.9945002051519919, 0.9943867594168835, 0.09983053838946399, 0.9927594784353152, 0.9913659511326784, 0.9943514959611014, 0.9929354080870345, 0.9936804463289839, 0.037296059762986444, 0.019731015239286664, 0.029446216638138734, 0.010387977389512693, 0.012274166111926, 0.11649297832742722, 0.0542469484257917, 0.023775950531114143, 9.999999999998899e-05, 0.1503740271071652, 0.0635193093676506, 0.06384607386750307, 0.09888852717671293, 0.049876603917744955, 0.06166207191373907, 0.04336229468146813, 0.07973767717103075, 0.010771604507380794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009941900878242982, 0.01011702530591485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001425838277096414, 9.999999999998899e-05, 0.005011466077118665, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024671724214057056, 0.017471617744302947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12708484405046694, 0.16626353705280672, 0.17111936253314564, 0.1741020156114943, 0.16024207645602562, 0.17864278592582528, 0.1637790410252935, 0.10809139175859872, 0.13059807479934826, 0.02427953998770027, 0.015717999942630234, 9.999999999998899e-05, 0.006986136719968505, 9.999999999998899e-05, 0.04569353990912184, 0.028345034243744016, 0.013983355438577427, 0.03582216183579423, 0.07648853520640675, 0.12904714945358942, 0.07666485790599398, 0.10153474253599504, 0.11435843680182911, 0.10114390902417814, 0.09630560100199603, 0.07658845743556464, 0.08254968394222284, 0.11607770896680958, 0.0990869885593425, 0.14486501879931768, 0.14169151791986756, 0.12497954887735141, 0.1128656153060501, 0.14533795168144859, 0.17859012234292437, 0.13785268668722894, 0.0407964605234995, 0.045437332501534144, 0.06492160349151477, 0.06796235216593305, 0.09214366049697076, 0.08019391733806402, 0.147076716711127, 0.1017947207627401, 0.08514761332265297, 0.11946949554250563, 0.10815730629266496, 0.14544707184675576, 0.10760786811661127, 0.11674266808055422, 0.10367940937683395, 0.1286357655696334, 0.1297637343625624, 0.13068733452306314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015116571210483598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908665272758207, 0.1009391362547094, 0.11261363668235003, 0.09712540324732377, 0.12995147155848008, 0.07443679580966522, 0.08014755992704081, 0.10573647323641422, 0.07455588464445195, 0.22365597043184493, 0.10088363701841441, 0.10241526352692631, 0.0660541785821297, 0.045366085295781566, 0.09711287357602505, 0.17301472871360568, 0.04665214500176318, 0.05527375825445702, 0.1512651944948875, 0.1287261148789598, 0.164410597280519, 0.13979678915088878, 0.14990945666448408, 0.16733100246265198, 0.15480108542775217, 0.14708047555118942, 0.16284778891658425, 0.025152641033720835, 0.025121289892246712, 0.03675989084566589, 0.02823423621749166, 0.038999513669339514, 0.028899053051409496, 0.02352853583405523, 0.010375021605592338, 0.02302389737013233]}, "mutation_prompt": null}
{"id": "bee06bc0-e1dd-4078-81b6-16360397f2a3", "solution": "import numpy as np\n\nclass DynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "DynamicWeightQPSO", "description": "Introducing dynamic cognitive and social weights based on particle performance to enhance exploration and exploitation balance.", "configspace": "", "generation": 12, "fitness": 0.09412785423573701, "feedback": "The algorithm DynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.18.", "error": "", "parent_id": "38f83733-2de3-472c-be87-a866f6bd22da", "metadata": {"aucs": [0.124908446549584, 0.0782016403960375, 0.10654081878699728, 0.11380323106923329, 0.12866859278838616, 0.13290043828420384, 0.12560115115099268, 0.11484715667499024, 0.11205842955646694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004955829473186735, 0.01467079663371329, 0.005375109906600173, 0.019098633031792822, 0.022313148070325806, 0.013318763615160933, 0.023984928953256213, 0.023236143383219998, 0.053801609454869004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029253199000994545, 0.025103707117885454, 9.999999999998899e-05, 0.01292015359094112, 0.007725453584276676, 0.013379353153880946, 0.96672589317517, 0.9727347045928568, 0.979392542823114, 0.09945668022409371, 0.981635242468119, 0.9752574076160883, 0.9832127198275521, 0.9827403246436532, 0.9821984509679612, 0.06252315235824102, 0.07813321510289972, 0.07324374077762164, 0.06434695633754961, 0.01471730553762407, 0.026597151124266527, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15921989271261094, 0.10815105654946788, 0.06285622300497684, 0.1009333320117839, 0.11145577392912565, 0.11126850785231712, 0.039367790056307084, 0.08143376636110844, 0.10006939018322558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017183166336820377, 0.022769981264891936, 0.00821408557197667, 0.009794061943770416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030947593627950853, 9.999999999998899e-05, 9.999999999998899e-05, 0.007236869741317098, 9.999999999998899e-05, 9.999999999998899e-05, 0.017160337682362137, 0.022473346863631005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.13879659513922615, 0.15086443531891836, 0.11249827666960355, 0.12709083683791778, 0.14821342022101724, 0.20622876436120563, 0.1782329301471225, 0.13562227118913284, 0.02977666927132816, 0.022927713277980377, 0.014089806084633727, 0.02617832189210456, 0.006064405099991177, 0.024619871352874356, 0.005180143030432682, 0.027607546609609734, 0.04302332348927462, 0.09739191169194616, 0.13341224012977926, 0.11274394217378991, 0.12265887253719776, 0.10968463845155507, 0.07103050629324259, 0.1083279072911959, 0.09916037626415941, 0.1425298050554158, 0.09606267484187503, 0.0962505644704219, 0.14352810184653642, 0.14300667570424197, 0.12868042642381783, 0.14596789142129185, 0.16169319489253053, 0.1787812434302385, 0.13269016212443363, 0.05162962860121001, 0.06216812290753626, 0.113924624097963, 0.07980307758743532, 0.07183458795630582, 0.09572188769415457, 0.0872690857277908, 0.09992555616241461, 0.09143627396636345, 0.13738865619143648, 0.09388200728521401, 0.16806486582323854, 0.13148944410010388, 0.10107603186330127, 0.12361879265003595, 0.13907968657306613, 0.08872596245552666, 0.15375583083504696, 0.13947851837922476, 9.999999999998899e-05, 0.13304304360820585, 0.1461361767676952, 9.999999999998899e-05, 0.10249741385333178, 0.13968515353495825, 9.999999999998899e-05, 0.1211552721774597, 0.06624370783477229, 0.08647542517243478, 0.09980141735980963, 0.12619158732923275, 0.12796028880734756, 0.16181282454124046, 0.08185771982581791, 0.11428443453507064, 0.08449012850068593, 0.11365601948596049, 0.161428505234413, 0.10231657080799283, 0.09446524922340882, 0.05245312955526715, 0.08714225789863572, 0.04690376827171172, 0.04019044166964181, 0.08672809980503915, 0.16105076299054266, 0.1444422461177437, 0.1654939329184767, 0.14053983698296124, 0.15296254231585915, 0.14388032156517583, 0.16581528675305235, 0.1213078155871552, 0.17139001985018953, 0.02355301385582531, 0.023384439580783845, 0.03539280312267934, 0.03386315032616172, 0.04136429627794658, 0.03283099101023146, 0.02986968632648135, 0.0073653022974221605, 0.022611287294507787]}, "mutation_prompt": null}
{"id": "a87d8363-e234-41f8-a3fc-29cba621cf77", "solution": "import numpy as np\n\nclass DynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "DynamicWeightQPSO", "description": "Introducing dynamic cognitive and social weights based on particle performance to enhance exploration and exploitation balance.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bee06bc0-e1dd-4078-81b6-16360397f2a3", "metadata": {"aucs": [0.124908446549584, 0.0782016403960375, 0.10654081878699728, 0.11380323106923329, 0.12866859278838616, 0.13290043828420384, 0.12560115115099268, 0.11484715667499024, 0.11205842955646694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004955829473186735, 0.01467079663371329, 0.005375109906600173, 0.019098633031792822, 0.022313148070325806, 0.013318763615160933, 0.023984928953256213, 0.023236143383219998, 0.053801609454869004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029253199000994545, 0.025103707117885454, 9.999999999998899e-05, 0.01292015359094112, 0.007725453584276676, 0.013379353153880946, 0.96672589317517, 0.9727347045928568, 0.979392542823114, 0.09945668022409371, 0.981635242468119, 0.9752574076160883, 0.9832127198275521, 0.9827403246436532, 0.9821984509679612, 0.06252315235824102, 0.07813321510289972, 0.07324374077762164, 0.06434695633754961, 0.01471730553762407, 0.026597151124266527, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15921989271261094, 0.10815105654946788, 0.06285622300497684, 0.1009333320117839, 0.11145577392912565, 0.11126850785231712, 0.039367790056307084, 0.08143376636110844, 0.10006939018322558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017183166336820377, 0.022769981264891936, 0.00821408557197667, 0.009794061943770416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030947593627950853, 9.999999999998899e-05, 9.999999999998899e-05, 0.007236869741317098, 9.999999999998899e-05, 9.999999999998899e-05, 0.017160337682362137, 0.022473346863631005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.13879659513922615, 0.15086443531891836, 0.11249827666960355, 0.12709083683791778, 0.14821342022101724, 0.20622876436120563, 0.1782329301471225, 0.13562227118913284, 0.02977666927132816, 0.022927713277980377, 0.014089806084633727, 0.02617832189210456, 0.006064405099991177, 0.024619871352874356, 0.005180143030432682, 0.027607546609609734, 0.04302332348927462, 0.09739191169194616, 0.13341224012977926, 0.11274394217378991, 0.12265887253719776, 0.10968463845155507, 0.07103050629324259, 0.1083279072911959, 0.09916037626415941, 0.1425298050554158, 0.09606267484187503, 0.0962505644704219, 0.14352810184653642, 0.14300667570424197, 0.12868042642381783, 0.14596789142129185, 0.16169319489253053, 0.1787812434302385, 0.13269016212443363, 0.05162962860121001, 0.06216812290753626, 0.113924624097963, 0.07980307758743532, 0.07183458795630582, 0.09572188769415457, 0.0872690857277908, 0.09992555616241461, 0.09143627396636345, 0.13738865619143648, 0.09388200728521401, 0.16806486582323854, 0.13148944410010388, 0.10107603186330127, 0.12361879265003595, 0.13907968657306613, 0.08872596245552666, 0.15375583083504696, 0.13947851837922476, 9.999999999998899e-05, 0.13304304360820585, 0.1461361767676952, 9.999999999998899e-05, 0.10249741385333178, 0.13968515353495825, 9.999999999998899e-05, 0.1211552721774597, 0.06624370783477229, 0.08647542517243478, 0.09980141735980963, 0.12619158732923275, 0.12796028880734756, 0.16181282454124046, 0.08185771982581791, 0.11428443453507064, 0.08449012850068593, 0.11365601948596049, 0.161428505234413, 0.10231657080799283, 0.09446524922340882, 0.05245312955526715, 0.08714225789863572, 0.04690376827171172, 0.04019044166964181, 0.08672809980503915, 0.16105076299054266, 0.1444422461177437, 0.1654939329184767, 0.14053983698296124, 0.15296254231585915, 0.14388032156517583, 0.16581528675305235, 0.1213078155871552, 0.17139001985018953, 0.02355301385582531, 0.023384439580783845, 0.03539280312267934, 0.03386315032616172, 0.04136429627794658, 0.03283099101023146, 0.02986968632648135, 0.0073653022974221605, 0.022611287294507787]}, "mutation_prompt": null}
{"id": "b60023f2-0374-42e2-82c2-6af5f6e06265", "solution": "import numpy as np\n\nclass DynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "DynamicWeightQPSO", "description": "Introducing dynamic cognitive and social weights based on particle performance to enhance exploration and exploitation balance.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bee06bc0-e1dd-4078-81b6-16360397f2a3", "metadata": {"aucs": [0.124908446549584, 0.0782016403960375, 0.10654081878699728, 0.11380323106923329, 0.12866859278838616, 0.13290043828420384, 0.12560115115099268, 0.11484715667499024, 0.11205842955646694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004955829473186735, 0.01467079663371329, 0.005375109906600173, 0.019098633031792822, 0.022313148070325806, 0.013318763615160933, 0.023984928953256213, 0.023236143383219998, 0.053801609454869004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029253199000994545, 0.025103707117885454, 9.999999999998899e-05, 0.01292015359094112, 0.007725453584276676, 0.013379353153880946, 0.96672589317517, 0.9727347045928568, 0.979392542823114, 0.09945668022409371, 0.981635242468119, 0.9752574076160883, 0.9832127198275521, 0.9827403246436532, 0.9821984509679612, 0.06252315235824102, 0.07813321510289972, 0.07324374077762164, 0.06434695633754961, 0.01471730553762407, 0.026597151124266527, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15921989271261094, 0.10815105654946788, 0.06285622300497684, 0.1009333320117839, 0.11145577392912565, 0.11126850785231712, 0.039367790056307084, 0.08143376636110844, 0.10006939018322558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017183166336820377, 0.022769981264891936, 0.00821408557197667, 0.009794061943770416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030947593627950853, 9.999999999998899e-05, 9.999999999998899e-05, 0.007236869741317098, 9.999999999998899e-05, 9.999999999998899e-05, 0.017160337682362137, 0.022473346863631005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.13879659513922615, 0.15086443531891836, 0.11249827666960355, 0.12709083683791778, 0.14821342022101724, 0.20622876436120563, 0.1782329301471225, 0.13562227118913284, 0.02977666927132816, 0.022927713277980377, 0.014089806084633727, 0.02617832189210456, 0.006064405099991177, 0.024619871352874356, 0.005180143030432682, 0.027607546609609734, 0.04302332348927462, 0.09739191169194616, 0.13341224012977926, 0.11274394217378991, 0.12265887253719776, 0.10968463845155507, 0.07103050629324259, 0.1083279072911959, 0.09916037626415941, 0.1425298050554158, 0.09606267484187503, 0.0962505644704219, 0.14352810184653642, 0.14300667570424197, 0.12868042642381783, 0.14596789142129185, 0.16169319489253053, 0.1787812434302385, 0.13269016212443363, 0.05162962860121001, 0.06216812290753626, 0.113924624097963, 0.07980307758743532, 0.07183458795630582, 0.09572188769415457, 0.0872690857277908, 0.09992555616241461, 0.09143627396636345, 0.13738865619143648, 0.09388200728521401, 0.16806486582323854, 0.13148944410010388, 0.10107603186330127, 0.12361879265003595, 0.13907968657306613, 0.08872596245552666, 0.15375583083504696, 0.13947851837922476, 9.999999999998899e-05, 0.13304304360820585, 0.1461361767676952, 9.999999999998899e-05, 0.10249741385333178, 0.13968515353495825, 9.999999999998899e-05, 0.1211552721774597, 0.06624370783477229, 0.08647542517243478, 0.09980141735980963, 0.12619158732923275, 0.12796028880734756, 0.16181282454124046, 0.08185771982581791, 0.11428443453507064, 0.08449012850068593, 0.11365601948596049, 0.161428505234413, 0.10231657080799283, 0.09446524922340882, 0.05245312955526715, 0.08714225789863572, 0.04690376827171172, 0.04019044166964181, 0.08672809980503915, 0.16105076299054266, 0.1444422461177437, 0.1654939329184767, 0.14053983698296124, 0.15296254231585915, 0.14388032156517583, 0.16581528675305235, 0.1213078155871552, 0.17139001985018953, 0.02355301385582531, 0.023384439580783845, 0.03539280312267934, 0.03386315032616172, 0.04136429627794658, 0.03283099101023146, 0.02986968632648135, 0.0073653022974221605, 0.022611287294507787]}, "mutation_prompt": null}
{"id": "801346e6-c3b2-4fae-b5f4-31a7a0733186", "solution": "import numpy as np\n\nclass DynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i])\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "DynamicWeightQPSO", "description": "Introducing dynamic cognitive and social weights based on particle performance to enhance exploration and exploitation balance.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bee06bc0-e1dd-4078-81b6-16360397f2a3", "metadata": {"aucs": [0.124908446549584, 0.0782016403960375, 0.10654081878699728, 0.11380323106923329, 0.12866859278838616, 0.13290043828420384, 0.12560115115099268, 0.11484715667499024, 0.11205842955646694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004955829473186735, 0.01467079663371329, 0.005375109906600173, 0.019098633031792822, 0.022313148070325806, 0.013318763615160933, 0.023984928953256213, 0.023236143383219998, 0.053801609454869004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029253199000994545, 0.025103707117885454, 9.999999999998899e-05, 0.01292015359094112, 0.007725453584276676, 0.013379353153880946, 0.96672589317517, 0.9727347045928568, 0.979392542823114, 0.09945668022409371, 0.981635242468119, 0.9752574076160883, 0.9832127198275521, 0.9827403246436532, 0.9821984509679612, 0.06252315235824102, 0.07813321510289972, 0.07324374077762164, 0.06434695633754961, 0.01471730553762407, 0.026597151124266527, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.15921989271261094, 0.10815105654946788, 0.06285622300497684, 0.1009333320117839, 0.11145577392912565, 0.11126850785231712, 0.039367790056307084, 0.08143376636110844, 0.10006939018322558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017183166336820377, 0.022769981264891936, 0.00821408557197667, 0.009794061943770416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030947593627950853, 9.999999999998899e-05, 9.999999999998899e-05, 0.007236869741317098, 9.999999999998899e-05, 9.999999999998899e-05, 0.017160337682362137, 0.022473346863631005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.13879659513922615, 0.15086443531891836, 0.11249827666960355, 0.12709083683791778, 0.14821342022101724, 0.20622876436120563, 0.1782329301471225, 0.13562227118913284, 0.02977666927132816, 0.022927713277980377, 0.014089806084633727, 0.02617832189210456, 0.006064405099991177, 0.024619871352874356, 0.005180143030432682, 0.027607546609609734, 0.04302332348927462, 0.09739191169194616, 0.13341224012977926, 0.11274394217378991, 0.12265887253719776, 0.10968463845155507, 0.07103050629324259, 0.1083279072911959, 0.09916037626415941, 0.1425298050554158, 0.09606267484187503, 0.0962505644704219, 0.14352810184653642, 0.14300667570424197, 0.12868042642381783, 0.14596789142129185, 0.16169319489253053, 0.1787812434302385, 0.13269016212443363, 0.05162962860121001, 0.06216812290753626, 0.113924624097963, 0.07980307758743532, 0.07183458795630582, 0.09572188769415457, 0.0872690857277908, 0.09992555616241461, 0.09143627396636345, 0.13738865619143648, 0.09388200728521401, 0.16806486582323854, 0.13148944410010388, 0.10107603186330127, 0.12361879265003595, 0.13907968657306613, 0.08872596245552666, 0.15375583083504696, 0.13947851837922476, 9.999999999998899e-05, 0.13304304360820585, 0.1461361767676952, 9.999999999998899e-05, 0.10249741385333178, 0.13968515353495825, 9.999999999998899e-05, 0.1211552721774597, 0.06624370783477229, 0.08647542517243478, 0.09980141735980963, 0.12619158732923275, 0.12796028880734756, 0.16181282454124046, 0.08185771982581791, 0.11428443453507064, 0.08449012850068593, 0.11365601948596049, 0.161428505234413, 0.10231657080799283, 0.09446524922340882, 0.05245312955526715, 0.08714225789863572, 0.04690376827171172, 0.04019044166964181, 0.08672809980503915, 0.16105076299054266, 0.1444422461177437, 0.1654939329184767, 0.14053983698296124, 0.15296254231585915, 0.14388032156517583, 0.16581528675305235, 0.1213078155871552, 0.17139001985018953, 0.02355301385582531, 0.023384439580783845, 0.03539280312267934, 0.03386315032616172, 0.04136429627794658, 0.03283099101023146, 0.02986968632648135, 0.0073653022974221605, 0.022611287294507787]}, "mutation_prompt": null}
{"id": "820e7237-9d38-43a0-a642-1db75413e66e", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 16, "fitness": 0.10135311034058096, "feedback": "The algorithm EnhancedDynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.19.", "error": "", "parent_id": "bee06bc0-e1dd-4078-81b6-16360397f2a3", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "c91acadc-d325-405b-a655-3910942ae40a", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "dfddefa6-3f57-467c-aad9-aa2a0657f39b", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "828bd75d-edb1-4188-9c74-60d4244482a0", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "61ecf995-841d-482d-8204-0023279f9de9", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "6a991eaa-27ca-46a6-9cff-265f0913ca5b", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, neighborhood_size=3):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.neighborhood_size = neighborhood_size\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n            \n            # Adaptive neighborhood search\n            best_fitness = func(best_global_position)\n            for i in range(self.num_particles):\n                if np.linalg.norm(particles[i] - best_global_position) < self.neighborhood_size:\n                    particles[i] = np.clip(particles[i] + np.random.normal(0, 0.1, self.dim), -5.0, 5.0)\n                    if func(particles[i]) < best_fitness:\n                        best_global_position = particles[i]\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior and adaptive neighborhood search to improve exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": 0.10135311034058096, "feedback": "The algorithm EnhancedDynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.19.", "error": "", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "d1d83ac5-a65f-4068-9990-6f6dceafe1f8", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "f76944a0-1bac-40b9-8fdd-bf09cb84e3d2", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "5fb2545a-d567-4574-ba9c-fbe537b6e73c", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "d08946b3-049d-4d7e-aca5-638532ad37ae", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "e16318a5-cf85-4e8f-96e4-e5c69a304fbd", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "3bae228f-34b5-420e-96cb-d0b35e6f1fbf", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "34569987-95e2-4fba-9703-9adb7873b758", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "a39c3c12-dea4-4ef5-8c92-1793629267f6", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "8569e7a9-a6d5-4497-afa7-008fa12a9649", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "63aa1d7c-37ae-4ec4-9f98-8b9bc1a13ffe", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "decfd8b5-0599-4dae-a364-d2ff761e43c6", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "1df56b32-d071-43ba-a971-5a80c013d007", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "a776e4aa-b59d-416e-9b2b-2ba4ab72edbe", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * (1 + 0.5 * np.tanh(2 * performance_ratio - 1))\n                dynamic_social_weight = self.social_weight * (1 - 0.5 * np.tanh(2 * performance_ratio - 1))\n\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Introducing dynamic adaptation of cognitive and social weight ratios based on particle performance to enhance exploration-exploitation trade-off.", "configspace": "", "generation": 34, "fitness": 0.09491407878643393, "feedback": "The algorithm EnhancedDynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.19.", "error": "", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.13606270790905328, 0.08002371486217907, 0.09169502728636048, 0.1396206513520747, 0.12983582430882057, 0.12552599127149422, 0.12382344898026398, 0.11518005542473952, 0.11740788911029754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01455074481916585, 0.019534523291246275, 0.027570422552122498, 0.02739965297374869, 0.0014486320569343514, 0.017460502273092815, 0.018248263482334326, 0.009296878660022267, 0.01399068231178302, 0.006855826514507002, 9.999999999998899e-05, 9.999999999998899e-05, 0.03350788853232456, 0.009366511967288216, 0.006081032943897169, 9.999999999998899e-05, 0.009995494071317834, 0.005013066129891941, 0.9858979346152177, 0.9852661746229953, 0.9834385048250445, 0.9747487772451257, 0.9824701652737822, 0.9659032338522376, 0.9846878877969797, 0.9831098075678828, 0.9745048538872434, 0.025969187881867528, 0.02282378013212183, 0.028785523713909966, 0.029128068639923232, 0.016000812295581035, 0.006948294982808134, 0.061628292023317544, 0.034822654313349855, 0.0045658832943968886, 0.12483481253880802, 0.07334837331460753, 0.052233822106523387, 0.10906344693594805, 0.05441078794194287, 0.07974532580162852, 0.05795204325917125, 0.07037487366594541, 0.042657726223090164, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012421414764065997, 0.008813042356291434, 0.005425354836459673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006248710339968877, 0.004185897490005641, 0.009130159091448875, 0.02818261269312028, 0.0003313899469152837, 0.007106215405120575, 0.005728092731871803, 0.007382904134656365, 0.014393233521618809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11368315534295503, 0.14877024781553738, 0.1510366081372354, 0.11746968950450698, 0.1256017919508331, 0.10799376466367794, 0.16725969762436887, 0.11197843161570797, 0.13028260616044496, 0.032350614823162704, 0.016936350353863205, 0.029872592112666796, 0.016994523128938677, 0.0002151169627503391, 0.03336980059087369, 0.005351318129709348, 0.004069989996990486, 0.04363436558734013, 0.11709737068996473, 0.09705687151886289, 0.11629008699426724, 0.11205369414384259, 0.13295961334708517, 0.10781260237920776, 0.13055603588486142, 0.10295763217888776, 0.10325807404315002, 0.10369915147586184, 0.12073323295767513, 0.14758853188197285, 0.13800672315110074, 0.11406763886855731, 0.14629429248627002, 0.15762966719930682, 0.18219365283976297, 0.14212745327136656, 0.057766457631408974, 0.0468209604485863, 0.06416003545968108, 0.07449569878606777, 0.08604541600101023, 0.07779931491119696, 0.10666492739648581, 0.0997711199450243, 0.08289169108354633, 0.1212309901989651, 0.10935080055452362, 0.13345086981233123, 0.12885521849502735, 0.0919918200658858, 0.12119965628243623, 0.12245976138762271, 0.09772734719205367, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 0.10197169131788797, 0.14834107314476008, 9.999999999998899e-05, 0.12187579997504272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.094898638725469, 0.11105834947501403, 0.10870444883086816, 0.10660118006204189, 0.12121268431768206, 0.1092983682016978, 0.08132623548849494, 0.10257293923028299, 0.13533868081131406, 0.16906341905314382, 0.11403867323995276, 0.10629465459126985, 0.09704534021075306, 0.11442122997758564, 0.08433203192889738, 0.14752872540230344, 0.08193935050397472, 0.07344758036189125, 0.16518002246329944, 0.16390764855711493, 0.17036313442660123, 0.15528489730878714, 0.15841999199619983, 0.15770966570341005, 0.16880716979164168, 0.16592658274819316, 0.17423087400581738, 0.019912602415112945, 0.01695363358272739, 0.031393493129599714, 0.037188793338214565, 0.03425093938292756, 0.02519088653828727, 0.016228383701229143, 0.009051793032102795, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "46e4c62e-53ad-470d-b395-9e65e16b7be5", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "ba9a7fb3-70b9-4562-bf13-43a54fc84ef5", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "1c0490b4-01e1-41f4-a83b-29ff622768f8", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "b6ef02dc-1e5d-42ac-b6be-74118f1c2010", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "63e0681b-0c87-457b-9e2e-5702b5ef9b8d", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "6ede771b-4713-4f0a-9627-d8450cbcab2e", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "7d0d43ca-e27a-4fef-a6c2-c23beb6d398e", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "f097a87f-dae1-4b6e-b389-d4192de23e17", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "67930122-a787-4823-9a65-d06cd57e7314", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "d96eacf1-0b8d-450e-aeb1-3e2e088a62bb", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "6c082dfc-ef00-4b67-9c0f-9bb3fcac733d", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhancing particle diversity by introducing Levy flight behavior to explore the search space more effectively.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.10239617723253813, 0.0904037175772221, 0.11235152649985825, 0.16283942519935013, 0.12323613817760437, 0.1413898418028151, 0.1290084878259704, 0.11142161179939758, 0.12283554120385687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004252794863431109, 0.02090050117182707, 0.006694482138551616, 0.030899552623301685, 0.00976232436699953, 0.026923393211934266, 0.02573400167383466, 0.018171229707641068, 0.02578719313184885, 0.0003286698525644116, 9.999999999998899e-05, 0.00011031766895952533, 0.023647018786849383, 0.011393517899971117, 0.02502036430262433, 9.999999999998899e-05, 0.010312382854493762, 0.0014122948252254242, 0.9650860335257202, 0.915009074366423, 0.9794788151486317, 0.974535389355112, 0.9778702168020703, 0.9743930141856432, 0.9787640507887484, 0.9821281202363799, 0.9728528198825266, 0.07348027696646986, 0.06084106958976576, 0.05074623984495452, 0.06514132911560577, 0.043531226963570924, 0.015594236447403986, 0.03672164132590894, 0.0392221509650712, 9.999999999998899e-05, 0.1096463238408607, 0.05539564071518377, 0.052233822106523387, 0.13746980468796532, 0.052449672062447994, 0.14182978301306426, 0.057638725188601914, 0.11187295840407185, 0.06617692047934798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010127626337205542, 0.010301345300845921, 0.015734190857752406, 9.999999999998899e-05, 9.999999999998899e-05, 0.01244437916381047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010574047547407095, 0.0008176690911295692, 0.018206696616657636, 0.008917750064404206, 0.026478377867972802, 0.008703903501802945, 0.015350692182596104, 0.0839618783675875, 0.04624812383588928, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11176683500257345, 0.13879659513922615, 0.16748776031498747, 0.11315673168616414, 0.12029510477122352, 0.11985814446036036, 0.18465484182227687, 0.12415358787741881, 0.14923159650979745, 0.019788102327414903, 0.030090760827391594, 0.02575708814468236, 0.04070639901977102, 0.02181917861326932, 0.032440442799442804, 0.047806457910689604, 0.049925004883708435, 0.02865348899606257, 0.11913144140988674, 0.09238521674780609, 0.10488799683193517, 0.1253337435726164, 0.12187686722261182, 0.10293037275713501, 0.1320995248583542, 0.09753041836695264, 0.12518626521135212, 0.10981866181502031, 0.09943362037625103, 0.14758853188197285, 0.13800672315110074, 0.1139569278133209, 0.15375675758579876, 0.13792304360503516, 0.18688128971929086, 0.13744783584829112, 0.06625727239594037, 0.056950258403137166, 0.07417624427394054, 0.08875707585447179, 0.1015489413666264, 0.10363185219366455, 0.10515729689984077, 0.0997711199450243, 0.08731538141633577, 0.11943364695601921, 0.10935080055452362, 0.13345086981233123, 0.1291389687115181, 0.11709423188993773, 0.12029674525083012, 0.14320366925442707, 0.10379928339903566, 0.1261963614278906, 0.153133040447213, 0.12620970367253026, 0.08502972968842581, 0.11574483318544337, 9.999999999998899e-05, 0.02057998160262009, 0.07526981864460303, 0.17860629445195952, 0.15304640346827691, 0.10618009211420121, 0.10985762762281959, 0.11265057100100839, 0.17317828249283806, 0.15886420495849762, 0.12066277219708244, 0.1038445714879972, 0.10300803478677811, 0.18107733697709627, 0.1201957139703207, 0.11964657085902364, 0.09513380066316235, 0.07504644459341447, 0.0737640435877609, 0.07397804183542467, 0.1039028250320303, 0.11041644709324061, 0.07365089784245649, 0.17059454405887242, 0.18767904929534507, 0.16938068617341284, 0.17402714595794655, 0.18785805512544806, 0.1814951263737219, 0.164165141127256, 0.16632197655906478, 0.15376106152507452, 0.026463182597712187, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.06738098912177015, 0.04046452723125893, 0.022981125802867264, 0.006537731559829396, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "03e95898-a68d-4c11-826e-e25d2f622e6f", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Introducing a mutation operator to enhance exploration capability by adding random noise to particle positions.", "configspace": "", "generation": 46, "fitness": 0.10214108645391454, "feedback": "The algorithm EnhancedDynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.19.", "error": "", "parent_id": "820e7237-9d38-43a0-a642-1db75413e66e", "metadata": {"aucs": [0.12282793935057912, 0.14631433795631765, 0.11134754406448322, 0.1403019409593591, 0.14143424479315525, 0.1442341417316415, 0.16016099199379774, 0.11829125756826309, 0.12170226478267776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555604547541011, 0.0190497762499634, 0.010721802282294468, 0.02423177556851175, 0.014287074559838908, 0.053114183050310015, 0.027732360018303925, 0.019301443337211843, 0.023529867247009673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0394093620576601, 0.011922316559109691, 0.0003693769771538902, 0.011936001303641364, 0.01829557652186109, 0.0074235449343481585, 0.9577165415912066, 0.9799786780285531, 0.972984801960669, 0.9734519409133414, 0.9849714003092255, 0.9745942668657323, 0.9751227133326519, 0.9753322385087472, 0.975209063714958, 0.030412230868509527, 0.044959787883447455, 0.056774710260567685, 0.02038216330005138, 0.06491256843864845, 0.059039658942361295, 0.05201450597872004, 0.06107383671226707, 0.0007990956667252025, 0.14514617102619942, 0.06238953014169657, 0.1324733192313996, 0.15478237022021224, 0.0881279483358356, 0.09514976824636867, 0.06286021852307988, 0.11887877646581879, 0.04770605044437448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021380560613876165, 0.02276800647356436, 0.019487427389102252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05239537595986388, 0.004972679155894388, 0.012381895078839467, 0.031004404864878987, 0.002225645643453178, 0.005186290856002751, 0.0157064017710129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11139118819551808, 0.13879659513922615, 0.17817322017790016, 0.12220321903138887, 0.11953496948080411, 0.09580441870675127, 0.16112956940342849, 0.12581414915648603, 0.13673514574579426, 0.031981678941481184, 0.02529718262273639, 0.031595948344251834, 0.031032640700386804, 0.01001573128244182, 0.022153065792651305, 0.022924633547871, 0.04345736952358181, 0.04958386007517235, 0.13294623423951413, 0.13630440768136576, 0.12969352042031623, 0.183493365552319, 0.10852972522114013, 0.11566174250271255, 0.11750343146792275, 0.10678156984393028, 0.1170344688294177, 0.09887393683591783, 0.12433576855907302, 0.14593094690203712, 0.13882829841932276, 0.1286511529535037, 0.11942280511144399, 0.13430902168838788, 0.18374335983353962, 0.1352909578968241, 0.055235507436284026, 0.07346740719929457, 0.0612472203368134, 0.10481673591400031, 0.06786506964421113, 0.07872094986500744, 0.09674330459018587, 0.11311864191631849, 0.08623964602818746, 0.11943364695601921, 0.10339677647628465, 0.13345086981233123, 0.12942428388149252, 0.11954148428590872, 0.118794776170564, 0.12245976138762271, 0.09563170071113358, 0.1261963614278906, 9.999999999998899e-05, 0.14156768335937575, 0.14110290856616758, 0.14509971846484937, 0.06346770188231343, 0.14274315737840204, 0.13876957264641265, 0.07794536731260071, 0.13670381158275557, 0.11328327432933061, 0.09833409725518649, 0.11125299994575111, 0.10463620597702139, 0.16847831120870527, 0.1365028072831519, 0.0855296742428302, 0.15504542182786352, 0.11317180911051383, 0.13868504251311775, 0.11752939983777, 0.0980599910395673, 0.09175550995395987, 0.07155396980940165, 0.10948103102344808, 0.054037366389759534, 0.0870464558016456, 0.10107691652860962, 0.16397183387332603, 0.17498676300695748, 0.16233321435154302, 0.17246304334006235, 0.16323262764907065, 0.1714817027587211, 0.15747304172706322, 0.1502466004312537, 0.1694500086695705, 0.022837727684951514, 0.025098257655510547, 0.04123872141677798, 0.027015293023570086, 0.06236714086266271, 0.04382603141090913, 0.023986059553582018, 0.009340728397216669, 0.022816520587900957]}, "mutation_prompt": null}
{"id": "ef403e17-19b5-45e1-9b75-1dd37b3f0798", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Introducing a mutation operator to enhance exploration capability by adding random noise to particle positions.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "03e95898-a68d-4c11-826e-e25d2f622e6f", "metadata": {"aucs": [0.12282793935057912, 0.14631433795631765, 0.11134754406448322, 0.1403019409593591, 0.14143424479315525, 0.1442341417316415, 0.16016099199379774, 0.11829125756826309, 0.12170226478267776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555604547541011, 0.0190497762499634, 0.010721802282294468, 0.02423177556851175, 0.014287074559838908, 0.053114183050310015, 0.027732360018303925, 0.019301443337211843, 0.023529867247009673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0394093620576601, 0.011922316559109691, 0.0003693769771538902, 0.011936001303641364, 0.01829557652186109, 0.0074235449343481585, 0.9577165415912066, 0.9799786780285531, 0.972984801960669, 0.9734519409133414, 0.9849714003092255, 0.9745942668657323, 0.9751227133326519, 0.9753322385087472, 0.975209063714958, 0.030412230868509527, 0.044959787883447455, 0.056774710260567685, 0.02038216330005138, 0.06491256843864845, 0.059039658942361295, 0.05201450597872004, 0.06107383671226707, 0.0007990956667252025, 0.14514617102619942, 0.06238953014169657, 0.1324733192313996, 0.15478237022021224, 0.0881279483358356, 0.09514976824636867, 0.06286021852307988, 0.11887877646581879, 0.04770605044437448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021380560613876165, 0.02276800647356436, 0.019487427389102252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05239537595986388, 0.004972679155894388, 0.012381895078839467, 0.031004404864878987, 0.002225645643453178, 0.005186290856002751, 0.0157064017710129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11139118819551808, 0.13879659513922615, 0.17817322017790016, 0.12220321903138887, 0.11953496948080411, 0.09580441870675127, 0.16112956940342849, 0.12581414915648603, 0.13673514574579426, 0.031981678941481184, 0.02529718262273639, 0.031595948344251834, 0.031032640700386804, 0.01001573128244182, 0.022153065792651305, 0.022924633547871, 0.04345736952358181, 0.04958386007517235, 0.13294623423951413, 0.13630440768136576, 0.12969352042031623, 0.183493365552319, 0.10852972522114013, 0.11566174250271255, 0.11750343146792275, 0.10678156984393028, 0.1170344688294177, 0.09887393683591783, 0.12433576855907302, 0.14593094690203712, 0.13882829841932276, 0.1286511529535037, 0.11942280511144399, 0.13430902168838788, 0.18374335983353962, 0.1352909578968241, 0.055235507436284026, 0.07346740719929457, 0.0612472203368134, 0.10481673591400031, 0.06786506964421113, 0.07872094986500744, 0.09674330459018587, 0.11311864191631849, 0.08623964602818746, 0.11943364695601921, 0.10339677647628465, 0.13345086981233123, 0.12942428388149252, 0.11954148428590872, 0.118794776170564, 0.12245976138762271, 0.09563170071113358, 0.1261963614278906, 9.999999999998899e-05, 0.14156768335937575, 0.14110290856616758, 0.14509971846484937, 0.06346770188231343, 0.14274315737840204, 0.13876957264641265, 0.07794536731260071, 0.13670381158275557, 0.11328327432933061, 0.09833409725518649, 0.11125299994575111, 0.10463620597702139, 0.16847831120870527, 0.1365028072831519, 0.0855296742428302, 0.15504542182786352, 0.11317180911051383, 0.13868504251311775, 0.11752939983777, 0.0980599910395673, 0.09175550995395987, 0.07155396980940165, 0.10948103102344808, 0.054037366389759534, 0.0870464558016456, 0.10107691652860962, 0.16397183387332603, 0.17498676300695748, 0.16233321435154302, 0.17246304334006235, 0.16323262764907065, 0.1714817027587211, 0.15747304172706322, 0.1502466004312537, 0.1694500086695705, 0.022837727684951514, 0.025098257655510547, 0.04123872141677798, 0.027015293023570086, 0.06236714086266271, 0.04382603141090913, 0.023986059553582018, 0.009340728397216669, 0.022816520587900957]}, "mutation_prompt": null}
{"id": "0c92c0ba-692d-4dc9-8d3f-5a0ebf740ab6", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Introducing a mutation operator to enhance exploration capability by adding random noise to particle positions.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "03e95898-a68d-4c11-826e-e25d2f622e6f", "metadata": {"aucs": [0.12282793935057912, 0.14631433795631765, 0.11134754406448322, 0.1403019409593591, 0.14143424479315525, 0.1442341417316415, 0.16016099199379774, 0.11829125756826309, 0.12170226478267776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555604547541011, 0.0190497762499634, 0.010721802282294468, 0.02423177556851175, 0.014287074559838908, 0.053114183050310015, 0.027732360018303925, 0.019301443337211843, 0.023529867247009673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0394093620576601, 0.011922316559109691, 0.0003693769771538902, 0.011936001303641364, 0.01829557652186109, 0.0074235449343481585, 0.9577165415912066, 0.9799786780285531, 0.972984801960669, 0.9734519409133414, 0.9849714003092255, 0.9745942668657323, 0.9751227133326519, 0.9753322385087472, 0.975209063714958, 0.030412230868509527, 0.044959787883447455, 0.056774710260567685, 0.02038216330005138, 0.06491256843864845, 0.059039658942361295, 0.05201450597872004, 0.06107383671226707, 0.0007990956667252025, 0.14514617102619942, 0.06238953014169657, 0.1324733192313996, 0.15478237022021224, 0.0881279483358356, 0.09514976824636867, 0.06286021852307988, 0.11887877646581879, 0.04770605044437448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021380560613876165, 0.02276800647356436, 0.019487427389102252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05239537595986388, 0.004972679155894388, 0.012381895078839467, 0.031004404864878987, 0.002225645643453178, 0.005186290856002751, 0.0157064017710129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11139118819551808, 0.13879659513922615, 0.17817322017790016, 0.12220321903138887, 0.11953496948080411, 0.09580441870675127, 0.16112956940342849, 0.12581414915648603, 0.13673514574579426, 0.031981678941481184, 0.02529718262273639, 0.031595948344251834, 0.031032640700386804, 0.01001573128244182, 0.022153065792651305, 0.022924633547871, 0.04345736952358181, 0.04958386007517235, 0.13294623423951413, 0.13630440768136576, 0.12969352042031623, 0.183493365552319, 0.10852972522114013, 0.11566174250271255, 0.11750343146792275, 0.10678156984393028, 0.1170344688294177, 0.09887393683591783, 0.12433576855907302, 0.14593094690203712, 0.13882829841932276, 0.1286511529535037, 0.11942280511144399, 0.13430902168838788, 0.18374335983353962, 0.1352909578968241, 0.055235507436284026, 0.07346740719929457, 0.0612472203368134, 0.10481673591400031, 0.06786506964421113, 0.07872094986500744, 0.09674330459018587, 0.11311864191631849, 0.08623964602818746, 0.11943364695601921, 0.10339677647628465, 0.13345086981233123, 0.12942428388149252, 0.11954148428590872, 0.118794776170564, 0.12245976138762271, 0.09563170071113358, 0.1261963614278906, 9.999999999998899e-05, 0.14156768335937575, 0.14110290856616758, 0.14509971846484937, 0.06346770188231343, 0.14274315737840204, 0.13876957264641265, 0.07794536731260071, 0.13670381158275557, 0.11328327432933061, 0.09833409725518649, 0.11125299994575111, 0.10463620597702139, 0.16847831120870527, 0.1365028072831519, 0.0855296742428302, 0.15504542182786352, 0.11317180911051383, 0.13868504251311775, 0.11752939983777, 0.0980599910395673, 0.09175550995395987, 0.07155396980940165, 0.10948103102344808, 0.054037366389759534, 0.0870464558016456, 0.10107691652860962, 0.16397183387332603, 0.17498676300695748, 0.16233321435154302, 0.17246304334006235, 0.16323262764907065, 0.1714817027587211, 0.15747304172706322, 0.1502466004312537, 0.1694500086695705, 0.022837727684951514, 0.025098257655510547, 0.04123872141677798, 0.027015293023570086, 0.06236714086266271, 0.04382603141090913, 0.023986059553582018, 0.009340728397216669, 0.022816520587900957]}, "mutation_prompt": null}
{"id": "9b0d8048-64b1-46c1-a0ad-43e2184d9bf4", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Introducing a mutation operator to enhance exploration capability by adding random noise to particle positions.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "03e95898-a68d-4c11-826e-e25d2f622e6f", "metadata": {"aucs": [0.12282793935057912, 0.14631433795631765, 0.11134754406448322, 0.1403019409593591, 0.14143424479315525, 0.1442341417316415, 0.16016099199379774, 0.11829125756826309, 0.12170226478267776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555604547541011, 0.0190497762499634, 0.010721802282294468, 0.02423177556851175, 0.014287074559838908, 0.053114183050310015, 0.027732360018303925, 0.019301443337211843, 0.023529867247009673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0394093620576601, 0.011922316559109691, 0.0003693769771538902, 0.011936001303641364, 0.01829557652186109, 0.0074235449343481585, 0.9577165415912066, 0.9799786780285531, 0.972984801960669, 0.9734519409133414, 0.9849714003092255, 0.9745942668657323, 0.9751227133326519, 0.9753322385087472, 0.975209063714958, 0.030412230868509527, 0.044959787883447455, 0.056774710260567685, 0.02038216330005138, 0.06491256843864845, 0.059039658942361295, 0.05201450597872004, 0.06107383671226707, 0.0007990956667252025, 0.14514617102619942, 0.06238953014169657, 0.1324733192313996, 0.15478237022021224, 0.0881279483358356, 0.09514976824636867, 0.06286021852307988, 0.11887877646581879, 0.04770605044437448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021380560613876165, 0.02276800647356436, 0.019487427389102252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05239537595986388, 0.004972679155894388, 0.012381895078839467, 0.031004404864878987, 0.002225645643453178, 0.005186290856002751, 0.0157064017710129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11139118819551808, 0.13879659513922615, 0.17817322017790016, 0.12220321903138887, 0.11953496948080411, 0.09580441870675127, 0.16112956940342849, 0.12581414915648603, 0.13673514574579426, 0.031981678941481184, 0.02529718262273639, 0.031595948344251834, 0.031032640700386804, 0.01001573128244182, 0.022153065792651305, 0.022924633547871, 0.04345736952358181, 0.04958386007517235, 0.13294623423951413, 0.13630440768136576, 0.12969352042031623, 0.183493365552319, 0.10852972522114013, 0.11566174250271255, 0.11750343146792275, 0.10678156984393028, 0.1170344688294177, 0.09887393683591783, 0.12433576855907302, 0.14593094690203712, 0.13882829841932276, 0.1286511529535037, 0.11942280511144399, 0.13430902168838788, 0.18374335983353962, 0.1352909578968241, 0.055235507436284026, 0.07346740719929457, 0.0612472203368134, 0.10481673591400031, 0.06786506964421113, 0.07872094986500744, 0.09674330459018587, 0.11311864191631849, 0.08623964602818746, 0.11943364695601921, 0.10339677647628465, 0.13345086981233123, 0.12942428388149252, 0.11954148428590872, 0.118794776170564, 0.12245976138762271, 0.09563170071113358, 0.1261963614278906, 9.999999999998899e-05, 0.14156768335937575, 0.14110290856616758, 0.14509971846484937, 0.06346770188231343, 0.14274315737840204, 0.13876957264641265, 0.07794536731260071, 0.13670381158275557, 0.11328327432933061, 0.09833409725518649, 0.11125299994575111, 0.10463620597702139, 0.16847831120870527, 0.1365028072831519, 0.0855296742428302, 0.15504542182786352, 0.11317180911051383, 0.13868504251311775, 0.11752939983777, 0.0980599910395673, 0.09175550995395987, 0.07155396980940165, 0.10948103102344808, 0.054037366389759534, 0.0870464558016456, 0.10107691652860962, 0.16397183387332603, 0.17498676300695748, 0.16233321435154302, 0.17246304334006235, 0.16323262764907065, 0.1714817027587211, 0.15747304172706322, 0.1502466004312537, 0.1694500086695705, 0.022837727684951514, 0.025098257655510547, 0.04123872141677798, 0.027015293023570086, 0.06236714086266271, 0.04382603141090913, 0.023986059553582018, 0.009340728397216669, 0.022816520587900957]}, "mutation_prompt": null}
{"id": "0babe452-fd55-40c2-ae9f-8e721593fb08", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Introducing a mutation operator to enhance exploration capability by adding random noise to particle positions.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "03e95898-a68d-4c11-826e-e25d2f622e6f", "metadata": {"aucs": [0.12282793935057912, 0.14631433795631765, 0.11134754406448322, 0.1403019409593591, 0.14143424479315525, 0.1442341417316415, 0.16016099199379774, 0.11829125756826309, 0.12170226478267776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555604547541011, 0.0190497762499634, 0.010721802282294468, 0.02423177556851175, 0.014287074559838908, 0.053114183050310015, 0.027732360018303925, 0.019301443337211843, 0.023529867247009673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0394093620576601, 0.011922316559109691, 0.0003693769771538902, 0.011936001303641364, 0.01829557652186109, 0.0074235449343481585, 0.9577165415912066, 0.9799786780285531, 0.972984801960669, 0.9734519409133414, 0.9849714003092255, 0.9745942668657323, 0.9751227133326519, 0.9753322385087472, 0.975209063714958, 0.030412230868509527, 0.044959787883447455, 0.056774710260567685, 0.02038216330005138, 0.06491256843864845, 0.059039658942361295, 0.05201450597872004, 0.06107383671226707, 0.0007990956667252025, 0.14514617102619942, 0.06238953014169657, 0.1324733192313996, 0.15478237022021224, 0.0881279483358356, 0.09514976824636867, 0.06286021852307988, 0.11887877646581879, 0.04770605044437448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021380560613876165, 0.02276800647356436, 0.019487427389102252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05239537595986388, 0.004972679155894388, 0.012381895078839467, 0.031004404864878987, 0.002225645643453178, 0.005186290856002751, 0.0157064017710129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11139118819551808, 0.13879659513922615, 0.17817322017790016, 0.12220321903138887, 0.11953496948080411, 0.09580441870675127, 0.16112956940342849, 0.12581414915648603, 0.13673514574579426, 0.031981678941481184, 0.02529718262273639, 0.031595948344251834, 0.031032640700386804, 0.01001573128244182, 0.022153065792651305, 0.022924633547871, 0.04345736952358181, 0.04958386007517235, 0.13294623423951413, 0.13630440768136576, 0.12969352042031623, 0.183493365552319, 0.10852972522114013, 0.11566174250271255, 0.11750343146792275, 0.10678156984393028, 0.1170344688294177, 0.09887393683591783, 0.12433576855907302, 0.14593094690203712, 0.13882829841932276, 0.1286511529535037, 0.11942280511144399, 0.13430902168838788, 0.18374335983353962, 0.1352909578968241, 0.055235507436284026, 0.07346740719929457, 0.0612472203368134, 0.10481673591400031, 0.06786506964421113, 0.07872094986500744, 0.09674330459018587, 0.11311864191631849, 0.08623964602818746, 0.11943364695601921, 0.10339677647628465, 0.13345086981233123, 0.12942428388149252, 0.11954148428590872, 0.118794776170564, 0.12245976138762271, 0.09563170071113358, 0.1261963614278906, 9.999999999998899e-05, 0.14156768335937575, 0.14110290856616758, 0.14509971846484937, 0.06346770188231343, 0.14274315737840204, 0.13876957264641265, 0.07794536731260071, 0.13670381158275557, 0.11328327432933061, 0.09833409725518649, 0.11125299994575111, 0.10463620597702139, 0.16847831120870527, 0.1365028072831519, 0.0855296742428302, 0.15504542182786352, 0.11317180911051383, 0.13868504251311775, 0.11752939983777, 0.0980599910395673, 0.09175550995395987, 0.07155396980940165, 0.10948103102344808, 0.054037366389759534, 0.0870464558016456, 0.10107691652860962, 0.16397183387332603, 0.17498676300695748, 0.16233321435154302, 0.17246304334006235, 0.16323262764907065, 0.1714817027587211, 0.15747304172706322, 0.1502466004312537, 0.1694500086695705, 0.022837727684951514, 0.025098257655510547, 0.04123872141677798, 0.027015293023570086, 0.06236714086266271, 0.04382603141090913, 0.023986059553582018, 0.009340728397216669, 0.022816520587900957]}, "mutation_prompt": null}
{"id": "22ec533f-6014-4a85-a013-42f683286af9", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Introducing a mutation operator to enhance exploration capability by adding random noise to particle positions.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "03e95898-a68d-4c11-826e-e25d2f622e6f", "metadata": {"aucs": [0.12282793935057912, 0.14631433795631765, 0.11134754406448322, 0.1403019409593591, 0.14143424479315525, 0.1442341417316415, 0.16016099199379774, 0.11829125756826309, 0.12170226478267776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555604547541011, 0.0190497762499634, 0.010721802282294468, 0.02423177556851175, 0.014287074559838908, 0.053114183050310015, 0.027732360018303925, 0.019301443337211843, 0.023529867247009673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0394093620576601, 0.011922316559109691, 0.0003693769771538902, 0.011936001303641364, 0.01829557652186109, 0.0074235449343481585, 0.9577165415912066, 0.9799786780285531, 0.972984801960669, 0.9734519409133414, 0.9849714003092255, 0.9745942668657323, 0.9751227133326519, 0.9753322385087472, 0.975209063714958, 0.030412230868509527, 0.044959787883447455, 0.056774710260567685, 0.02038216330005138, 0.06491256843864845, 0.059039658942361295, 0.05201450597872004, 0.06107383671226707, 0.0007990956667252025, 0.14514617102619942, 0.06238953014169657, 0.1324733192313996, 0.15478237022021224, 0.0881279483358356, 0.09514976824636867, 0.06286021852307988, 0.11887877646581879, 0.04770605044437448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021380560613876165, 0.02276800647356436, 0.019487427389102252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05239537595986388, 0.004972679155894388, 0.012381895078839467, 0.031004404864878987, 0.002225645643453178, 0.005186290856002751, 0.0157064017710129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11139118819551808, 0.13879659513922615, 0.17817322017790016, 0.12220321903138887, 0.11953496948080411, 0.09580441870675127, 0.16112956940342849, 0.12581414915648603, 0.13673514574579426, 0.031981678941481184, 0.02529718262273639, 0.031595948344251834, 0.031032640700386804, 0.01001573128244182, 0.022153065792651305, 0.022924633547871, 0.04345736952358181, 0.04958386007517235, 0.13294623423951413, 0.13630440768136576, 0.12969352042031623, 0.183493365552319, 0.10852972522114013, 0.11566174250271255, 0.11750343146792275, 0.10678156984393028, 0.1170344688294177, 0.09887393683591783, 0.12433576855907302, 0.14593094690203712, 0.13882829841932276, 0.1286511529535037, 0.11942280511144399, 0.13430902168838788, 0.18374335983353962, 0.1352909578968241, 0.055235507436284026, 0.07346740719929457, 0.0612472203368134, 0.10481673591400031, 0.06786506964421113, 0.07872094986500744, 0.09674330459018587, 0.11311864191631849, 0.08623964602818746, 0.11943364695601921, 0.10339677647628465, 0.13345086981233123, 0.12942428388149252, 0.11954148428590872, 0.118794776170564, 0.12245976138762271, 0.09563170071113358, 0.1261963614278906, 9.999999999998899e-05, 0.14156768335937575, 0.14110290856616758, 0.14509971846484937, 0.06346770188231343, 0.14274315737840204, 0.13876957264641265, 0.07794536731260071, 0.13670381158275557, 0.11328327432933061, 0.09833409725518649, 0.11125299994575111, 0.10463620597702139, 0.16847831120870527, 0.1365028072831519, 0.0855296742428302, 0.15504542182786352, 0.11317180911051383, 0.13868504251311775, 0.11752939983777, 0.0980599910395673, 0.09175550995395987, 0.07155396980940165, 0.10948103102344808, 0.054037366389759534, 0.0870464558016456, 0.10107691652860962, 0.16397183387332603, 0.17498676300695748, 0.16233321435154302, 0.17246304334006235, 0.16323262764907065, 0.1714817027587211, 0.15747304172706322, 0.1502466004312537, 0.1694500086695705, 0.022837727684951514, 0.025098257655510547, 0.04123872141677798, 0.027015293023570086, 0.06236714086266271, 0.04382603141090913, 0.023986059553582018, 0.009340728397216669, 0.022816520587900957]}, "mutation_prompt": null}
{"id": "215ac945-967c-4c05-ad4e-700e41653713", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 52, "fitness": 0.10317743938764655, "feedback": "The algorithm ImprovedEnhancedDynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.19.", "error": "", "parent_id": "03e95898-a68d-4c11-826e-e25d2f622e6f", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "e4a0c3bf-55e4-4037-a252-a5c23f192653", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO_Change:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        mutation_rate_adaptive = self.mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce chaos-based diversity maintenance\n                chaos_map = np.sin(particles[i]) * np.cos(particles[i])\n                particles[i] = update_position(particles[i] + chaos_map, velocities[i])\n\n                # Mutation operator with adaptive rate adjustment\n                if np.random.rand() < mutation_rate_adaptive:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n            mutation_rate_adaptive *= 1.05  # Increase mutation rate adaptively\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO_Change", "description": "Enhance the Improved EnhancedDynamicWeightQPSO algorithm by incorporating a chaotic map for diversity maintenance and adaptive adjustment of mutation rate for better exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": 0.10160206610143936, "feedback": "The algorithm ImprovedEnhancedDynamicWeightQPSO_Change got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.19.", "error": "", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.08774815958588056, 0.13070331570350047, 0.09926362312106396, 0.15710773341015416, 0.15955098928369826, 0.14933221320237533, 0.12611876953984846, 0.140129481193498, 0.11510925529264604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008616356411381587, 0.01467079663371329, 0.005375109906600173, 0.023336582826036456, 0.014234159616089759, 0.015086432527165017, 0.018697395948754303, 0.034072108047020766, 0.048909946009716765, 0.006585674908036743, 9.999999999998899e-05, 9.999999999998899e-05, 0.026098638796178797, 0.02005903525323771, 0.005276453590616126, 0.000397161728702522, 0.0004960940468677899, 0.006951487528419786, 0.9557320970930911, 0.964987324938868, 0.9797445220632215, 0.9642961042813977, 0.981926741673032, 0.9769721499360073, 0.975291806005359, 0.9755173337995743, 0.9749166851858325, 0.05804148124023889, 0.04832959932090908, 0.03335618605156432, 0.08953104759562824, 0.02586516787159998, 0.12472441034122295, 0.028549708571731558, 0.02644975097338842, 9.999999999998899e-05, 0.10449209474516175, 0.06634323485717619, 0.1029074268366923, 0.12091545911780943, 0.10113879411345661, 0.12726635640456352, 0.06912174259263715, 0.10575082565041449, 0.06073693852901996, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021028738847962414, 0.012285571151895769, 0.03386128014334522, 0.011115641854297587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01271780526631805, 0.0008951825638672251, 0.02401085806773573, 9.999999999998899e-05, 9.999999999998899e-05, 0.00545939789842198, 0.010547091766997974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002731254545139228, 0.1333036240879002, 0.13879659513922615, 0.18770800299612833, 0.14977998360944422, 0.1331190556070191, 0.09719839146294029, 0.16112956940342849, 0.12292498347740655, 0.15186524870104245, 0.033635290956497754, 0.03831886096083659, 0.026710105799534367, 0.010723660673762625, 0.0077402422313253005, 0.02856741052156686, 0.01681626438322914, 0.008725719199755844, 0.030187090815583906, 0.12764763699376214, 0.12697912709982717, 0.10387802683786906, 0.14310171174577102, 0.12310388400536487, 0.09836787246134848, 0.12987668627815074, 0.12481358816789156, 0.1369990994406649, 0.10138788526373721, 0.11524624386284099, 0.14352810184653642, 0.14499808584370477, 0.12289581623068824, 0.12496954508699076, 0.17155915550780942, 0.17377774300845283, 0.13016196090787124, 0.05671344091965891, 0.05332987586044202, 0.07550975184896214, 0.07345503437544632, 0.07512915005461995, 0.08777490943096977, 0.09729028549589436, 0.0997711199450243, 0.08727836956154567, 0.11943364695601921, 0.10107970834724633, 0.13345086981233123, 0.11395997245276579, 0.09659485730946304, 0.12677567739900075, 0.12245976138762271, 0.09925119752859524, 0.1261963614278906, 0.14256010722330337, 0.1398122621825174, 0.1404598515982871, 0.13230817520834337, 0.08021982125135241, 0.13287638090734888, 0.1416763275029318, 0.13239833197426054, 0.12612189774384264, 0.09827469309569825, 0.14291659893504982, 0.12096365736035064, 0.0992200778171971, 0.1576260065517041, 0.09974605443068829, 0.08781643235617065, 0.09822236452187261, 0.0947680241490787, 0.11040265245322212, 0.10051730792859848, 0.09986902251352148, 0.06093449290680697, 0.08769212440025187, 0.06836954173186316, 0.09601681308028998, 0.08422565149558559, 0.11300455984472879, 0.165265158028435, 0.1643243149540745, 0.15903724312489265, 0.18269281342031496, 0.16791099078754035, 0.18843738822672962, 0.18339533275213848, 0.16029845745575821, 0.18205899140036508, 0.015759101347890048, 0.015916393435176368, 0.0402556640680668, 0.027015293023570086, 0.03953114268110036, 0.03693798907326995, 0.016228383701229143, 0.015286524709614113, 0.03359481781968421]}, "mutation_prompt": null}
{"id": "11a2b29d-69b3-4dcf-b7ba-fbe887308a07", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "7e652f75-28d2-40af-abbd-ca88af32dd7b", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "d93d753a-4e45-4285-a8e0-edc287345128", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "91a017bc-7482-461e-90b9-318b9b3d7308", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "3baafe38-d478-4f8b-ab3e-a612fde310f3", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "e2435eb9-0bec-4bfc-8f5c-239c9d56b2d3", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "3b99b32b-466f-42ed-ba9b-1f9be4cc30ad", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "a7e4cea0-1f35-4e2c-8b7b-3f8ec6fa2c2b", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "00c0c218-9853-43f1-8d3b-5e925ff9ba71", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "7fb8299e-9fd9-42fb-9a57-728a62e1293a", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "e87a1528-4c6c-4776-9521-a03ac7597e2e", "solution": "# import chaospy as cp\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, chaos_seed=42):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.rng = np.random.default_rng(chaos_seed)  # Initialize random number generator for chaos map\n\n    def __call__(self, func):\n        def chaotic_map(dim):\n            return cp.tent_map(self.rng.random(dim))\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = chaotic_map(self.dim)\n                rand2 = chaotic_map(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n\n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Enhance exploration by incorporating a chaotic map for generating diverse search trajectories.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_particles' is not defined\").", "error": "NameError(\"name 'initialize_particles' is not defined\")", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {}, "mutation_prompt": null}
{"id": "5ac28fbd-dd49-4e24-9d29-cb841c7e44c2", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "c68d420a-53be-4726-b7aa-364a1572f812", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n                \n                # Introduce adaptive mutation rate\n                adaptive_mutation_rate = self.mutation_rate + 0.01 * performance_ratio\n\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + adaptive_mutation_rate * levy_flight\n                                \n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                if np.random.rand() < adaptive_mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO with adaptive mutation rate and variable cognitive and social weights.", "configspace": "", "generation": 66, "fitness": 0.09933059992784707, "feedback": "The algorithm ImprovedEnhancedDynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.19.", "error": "", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.0984920885795082, 0.10150307345507337, 0.10625598519917889, 0.15432747909090871, 0.14679799142463767, 0.1359152938720788, 0.1304333347768949, 0.13100566228716348, 0.11633194532604574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028113401557088635, 0.01795277826286379, 0.021710639107436536, 0.016849231246532703, 0.02920182427978668, 0.02513214486372073, 0.038827268787818836, 0.021928973991939715, 0.02746502903189063, 9.999999999998899e-05, 9.999999999998899e-05, 0.009604987230938278, 0.0206703735696947, 0.010408361484773976, 0.002645518025011895, 9.999999999998899e-05, 0.01143100615214987, 0.014142824836181345, 0.9552266928219681, 0.996542959925488, 0.9869957826690706, 0.9162449909994268, 0.984582467296002, 0.9707702747155634, 0.9859883952479334, 0.9835823877128779, 0.9851782618795889, 0.02614273349401608, 0.02979824784706886, 0.04813366122149654, 0.054681525616139925, 0.034785226110469414, 0.06233246806097892, 0.08194971778762594, 0.08744360175638033, 0.02165451859309575, 0.10027683525177622, 0.05632007533225403, 0.09439591215996057, 0.07383226694449319, 0.08646102128117672, 0.06949923844090022, 0.06846636211146306, 0.0852650482800218, 0.09581709627925938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03588349072581476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030022424159886762, 0.029354879131256117, 9.999999999998899e-05, 9.999999999998899e-05, 0.0059948561423621705, 0.025387256964715887, 0.016095248044866284, 0.010897117340075924, 0.018506739407185724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.16554962441354215, 0.17591118869535016, 0.09425923977458062, 0.1620544298811143, 0.09580441870675127, 0.16112956940342849, 0.1257503682597877, 0.1577183365974193, 0.046286400500400116, 0.030727846519577162, 0.03006893263507937, 0.007072523993648994, 0.01846001773457906, 0.033297205929908924, 0.020552019379622255, 0.02887428463349173, 0.037891028914443625, 0.10410444911219452, 0.20816672402840608, 0.0989672785879604, 0.12757474761365106, 0.11744284979639308, 0.12145282360817233, 0.1393194440551795, 0.12343608937954798, 0.11290039510352456, 0.13413236973288023, 0.15787145335196928, 0.14352810184653642, 0.13889400272821695, 0.1322799649881905, 0.14115551370276969, 0.151258871896516, 0.17377774300845283, 0.1380273148417509, 0.0717069819008922, 0.08221868601239057, 0.08470315832112996, 0.0737241489114997, 0.06406947898089654, 0.07611924895416233, 0.13231886352030064, 0.0997711199450243, 0.08328758042999218, 0.11943364695601921, 0.09631409231794119, 0.13345086981233123, 0.12176494758225853, 0.11557811600024903, 0.1387589860632199, 0.12245976138762271, 0.11275415739435879, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 0.12099014213130344, 0.14594683688165644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11961721139454562, 0.14812597031660935, 0.12040442568666332, 0.13601774450535598, 0.11729793851255321, 0.1161568539829062, 0.1672395312475704, 0.08950878505764026, 0.07954446485172162, 0.10091668582477864, 0.0937866562728994, 0.11211799340880568, 0.10538280785685916, 0.09064798186248813, 0.06498070762727404, 0.04460187173567698, 0.07376649194207452, 0.11072362153524606, 0.10765492560947698, 0.08602093415110235, 0.16644860257572858, 0.17100220433074464, 0.16764138850404287, 0.16823741381100832, 0.17750517788988218, 0.16500724037760373, 0.16644405136467177, 0.1643255561239495, 0.17179953897729316, 0.025395046258546605, 0.0235704728394035, 0.03179280804977913, 0.027015293023570086, 0.03425093938292756, 0.027282783012650857, 0.016228383701229143, 0.025390713308210633, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "74a1fb9e-faa5-41b2-88e1-6a61a8fa6d73", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "d3cd4f24-4ced-45dc-991d-74a14fb9753d", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "1d4c27fa-549b-4bf8-84f2-279cf9a2ca90", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "347a0970-d5eb-4430-9cc4-d4b70790d502", "solution": "# import numpy as np\n\nclass MultiSwarmEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, num_swarms=3, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.num_swarms = num_swarms\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_swarms, self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([[func(p) for p in swarm] for swarm in particles])\n\n        particles = initialize_particles()\n        best_global_positions = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for s in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    rand1 = np.random.rand(self.dim)\n                    rand2 = np.random.rand(self.dim)\n                    adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                    performance_ratio = func(best_global_positions[s]) / func(particles[s][i])\n                    dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                    dynamic_social_weight = self.social_weight * performance_ratio\n\n                    levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                    velocities[s][i] = adaptive_inertia * velocities[s][i] + \\\n                                      dynamic_cognitive_weight * rand1 * (best_global_positions[s] - particles[s][i]) + \\\n                                      dynamic_social_weight * rand2 * (best_global_positions[s] - particles[s][i]) + 0.01 * levy_flight\n\n                    opposite_particle = 2 * best_global_positions[s] - particles[s][i]\n                    if func(opposite_particle) < func(particles[s][i]):\n                        particles[s][i] = opposite_particle\n\n                    particles[s][i] = update_position(particles[s][i], velocities[s][i])\n\n                    if np.random.rand() < self.mutation_rate:\n                        particles[s][i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n                swarm_fitness = evaluate_fitness(particles[s])\n                best_particle_index = np.argmin(swarm_fitness)\n                if swarm_fitness[best_particle_index] < func(best_global_positions[s]):\n                    best_global_positions[s] = particles[s][best_particle_index]\n\n            if _ % 10 == 0 and _ != 0:\n                self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_positions[np.argmin(evaluate_fitness(particles))]", "name": "MultiSwarmEnhancedDynamicWeightQPSO", "description": "Enhancing diversity through multi-swarm optimization to improve global search capabilities.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 37 is out of bounds for axis 0 with size 3').", "error": "IndexError('index 37 is out of bounds for axis 0 with size 3')", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {}, "mutation_prompt": null}
{"id": "2328757d-540f-485b-a6a7-ddcd330ca629", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "43ec26f5-b7e5-4940-8c10-716d67dbb2e5", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            if _ % 100 == 0:  # Dynamic population resizing every 100 iterations\n                self.num_particles = np.clip(int(self.num_particles * 1.1), 1, 100)  # Restrict particle number within a range\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm with dynamic population resizing for better exploration and exploitation.", "configspace": "", "generation": 72, "fitness": 0.10317743938764655, "feedback": "The algorithm ImprovedEnhancedDynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.19.", "error": "", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "e697a08c-3c68-4469-b6ca-ac6392acf246", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "2baa852b-386d-4317-a452-c318d5bfcad1", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "db46d067-a825-4ac8-b4cf-27c0103eb8d1", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "33021768-dd2b-4582-9a15-78c239eed347", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "f8b9a54b-e2cd-4668-888a-adf7f9486751", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "0d8c710a-4232-4deb-903e-f86dad384d6c", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Enhanced Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm with enhanced Levy flight behavior and adaptive population size for dynamic optimization.", "configspace": "", "generation": 78, "fitness": 0.10317743938764655, "feedback": "The algorithm EnhancedDynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.19.", "error": "", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "02a8745c-a816-407a-90cb-7c1c9601d3c4", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "af3c40fc-6716-4f8e-babf-161e1aa20e02", "solution": "import numpy as np\n\nclass ImprovedEnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce opposition-based learning for better exploration\n                opposite_particle = 2 * best_global_position - particles[i]\n                if func(opposite_particle) < func(particles[i]):\n                    particles[i] = opposite_particle\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedEnhancedDynamicWeightQPSO", "description": "Improved EnhancedDynamicWeightQPSO algorithm by incorporating opposition-based learning to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12570523630203656, 0.14581673593419642, 0.11123320304063378, 0.14027234995370075, 0.13785456947118635, 0.16581173515848802, 0.15314598653510114, 0.15003662446225607, 0.13350687214286228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015483296806461433, 0.02555661292085354, 0.020674453431317463, 0.025299914619714925, 0.00574305808157205, 0.032980642649430014, 0.04158711706011731, 0.02704803483188556, 0.03223788042783238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039369054194538844, 0.015769455485573403, 0.0007428139368071962, 0.006878190893784053, 0.005259199076299237, 0.0073791328971483106, 0.98337865030613, 0.996542959925488, 0.9865287636997647, 0.865941571852372, 0.984541394951331, 0.9823151462494566, 0.9838839541058774, 0.9834770635662423, 0.9833228235482229, 0.036813353482441746, 0.08825983561388673, 0.03770020773124272, 0.057153259557134684, 0.05319275305126703, 0.0963750882676413, 0.07428026741545402, 0.07021581045959735, 9.999999999998899e-05, 0.10259127352804531, 0.0892196340055168, 0.13198678832304123, 0.12407658265069588, 0.10104813244568545, 0.0752547320392376, 0.05611525263518358, 0.09164196897744092, 0.05655422190422854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013108361479808761, 9.999999999998899e-05, 0.013659885550596274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046953548680353, 0.00050418449185341, 0.016588731922008493, 0.03882965191818566, 0.0019135451178829976, 0.005671838354120884, 0.003586182164559748, 0.01127163233916817, 0.017018912049855728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11396688285534695, 0.13879659513922615, 0.16485358173504738, 0.11751999326053231, 0.15476234847624815, 0.10724947253009032, 0.1803798621513859, 0.12489953841120971, 0.13663998434718982, 0.027158742312263007, 0.04135393265054044, 0.031170493691046408, 0.03081231688024688, 0.019265342413693598, 0.022929248619197984, 0.0266311765610604, 0.02608191046187658, 0.04931327817076436, 0.13122143619789584, 0.12623086869790878, 0.16106437967894527, 0.10149286401680602, 0.10852972522114013, 0.1050789403661222, 0.11897609962324296, 0.11524290039122986, 0.1500773095495913, 0.10332249228938839, 0.12296229147288085, 0.14591932140433983, 0.1388233211862776, 0.1285611906653168, 0.11932033184211521, 0.13422403241416192, 0.18368548715363886, 0.13515950118397813, 0.05536814552635294, 0.054039017041092485, 0.06637289988591388, 0.10521529268649032, 0.11538557596029808, 0.07862828128185395, 0.09666447078785256, 0.0997711199450243, 0.08610559633185566, 0.11943364695601921, 0.09618593238609208, 0.13345086981233123, 0.15396718788667418, 0.11802168882930442, 0.12595105110026728, 0.12245976138762271, 0.11769124801566155, 0.1261963614278906, 0.12874707085700643, 9.999999999998899e-05, 0.12551848681350508, 0.13360051657737493, 0.13703731471780245, 0.14186790819779216, 0.13707175112640912, 0.1355301644789768, 0.13928870194834853, 0.11728347646682236, 0.1615731900156625, 0.11256431169548198, 0.15288826690832247, 0.1680139936988566, 0.13616135965434628, 0.0846369274982055, 0.10009661995901042, 0.07364877230764266, 0.11040265245322212, 0.13923036343386352, 0.09987323790464286, 0.07229210008189779, 0.07450662342082381, 0.07165871319113992, 0.05941987981911678, 0.10230687275767192, 0.06448130681901842, 0.17252658905758866, 0.15820937547192004, 0.16748119804377037, 0.16454474733031366, 0.1702045142884142, 0.16060756281168564, 0.15678625458004625, 0.1600723729843705, 0.17754930061658813, 0.03919090071852038, 0.025042623934596664, 0.0411790171821671, 0.027015293023570086, 0.06219641198008197, 0.04369948978988847, 0.016228383701229143, 0.025375431806751836, 0.023427976793505167]}, "mutation_prompt": null}
{"id": "96fa6fda-9a29-43f3-b110-a8d0c3781200", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < self.de_cross_prob\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhance the algorithm by introducing a differential evolution strategy to improve exploration and exploitation capabilities.", "configspace": "", "generation": 81, "fitness": 0.10663111378314315, "feedback": "The algorithm EnhancedDynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "215ac945-967c-4c05-ad4e-700e41653713", "metadata": {"aucs": [0.12425590994497249, 0.10362139382782898, 0.09878566679010004, 0.1489051415791277, 0.1684826600875976, 0.14064611496231105, 0.13810805586323072, 0.12242691782296022, 0.12259712537609524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01750228590727132, 0.02390470051659599, 0.014853905915688248, 0.02787476454873905, 0.021787678031524815, 0.038496314819799426, 0.02406565858688592, 0.019187551540991943, 0.05234156752699759, 0.012595090232955242, 0.002810428952337296, 0.0010870258773045816, 0.0449713491783581, 0.030035596330934222, 0.030577926129761734, 0.019867817726848314, 0.026401533549727407, 0.01993570949174195, 0.7690585078298601, 0.9571251607487842, 0.9563756964231733, 0.9463202512506449, 0.9581086870766116, 0.9702901496763959, 0.9727742071360257, 0.9745600153047428, 0.9716179479316128, 0.08377605188490966, 0.04056759244752761, 0.05519906576819045, 0.05975735875478205, 0.07533431089197073, 0.041120358791779665, 0.06212085211402352, 0.035032863567495576, 0.062005875539254185, 0.16184008028350705, 0.056480200271319725, 0.07153127342754084, 0.14172293118633894, 0.08172505397499175, 0.13945668089973462, 0.07374127494873917, 0.08988434746291674, 0.10913263344910606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04812943337551023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010370993210778612, 9.999999999998899e-05, 0.013147756122860899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032245937784322054, 0.0020278173594401316, 0.007802383158834192, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021159473364502968, 0.027324993148868604, 0.011255797669765033, 9.999999999998899e-05, 0.009129184327356432, 9.999999999998899e-05, 9.999999999998899e-05, 0.05371919292122862, 0.033174635287548715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11070611533384767, 0.13879659513922615, 0.1789593487638762, 0.1207471374532415, 0.12819715016142286, 0.15873803340359338, 0.21398401531174005, 0.17312338539105, 0.16177111994369775, 0.05232832671802212, 0.0353877573043726, 0.0383468847794598, 0.029456737037186986, 0.03952466835125146, 0.027002048612015273, 0.03452621985076021, 0.02019353330270901, 0.04413653813257401, 0.10345849505944149, 0.1218555077083383, 0.12645118458522864, 0.14604502480663317, 0.1183678226760343, 0.12349284334095645, 0.12392061423775891, 0.10920574005712447, 0.10650299477081404, 0.1119226444105974, 0.11563373354158157, 0.14352810184653642, 0.15806374951874458, 0.14747743529545787, 0.12639319009321748, 0.14924247600203366, 0.17377774300845283, 0.13864721899084764, 0.062208187550190974, 0.07261165315147011, 0.12482750039289237, 0.1005487793127453, 0.09883777194487098, 0.0899402247077189, 0.09379339646868778, 0.104241348256074, 0.0730157513060844, 0.24536645665594903, 0.11220457609315104, 0.13345086981233123, 0.14552461053644095, 0.12757378356957905, 0.12631310258329198, 0.12276328408418669, 0.09548522541988935, 0.1261963614278906, 0.1309138285129695, 0.1457147542615168, 0.14175399403950306, 0.14792431333920975, 0.13573686787718575, 0.11885377842180023, 0.14752746686408158, 0.14939784774736453, 0.15237007809604397, 0.12134857399373122, 0.1253050741072782, 0.1172992702111445, 0.10903479028448693, 0.16705185614440965, 0.14046363966202657, 0.08961338548331987, 0.11984838779988438, 0.11485826616995876, 0.15918786250176276, 0.10528227719222616, 0.04531764239039748, 0.06234377510764533, 0.09642324039827577, 0.08229282037598495, 0.10221991325072943, 0.14457592690528476, 0.16544428895769803, 0.187293395720751, 0.1664233316768312, 0.17057906102202725, 0.17380699310294878, 0.19070884770141716, 0.17025707921847555, 0.17408493972069083, 0.17122900823169496, 0.17115953638653614, 0.023409619819208083, 0.025263842032323014, 0.04172753497978554, 0.027015293023570086, 0.03425093938292756, 0.028975055507159952, 0.02576525357181103, 0.026184903475503618, 0.022915430390258784]}, "mutation_prompt": null}
{"id": "ca9a3dab-9dc0-43f6-9916-1fce20b19d5f", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < self.de_cross_prob\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Improve the algorithm by incorporating a dynamic mechanism to adjust the mutation rate based on the fitness improvement of the best particle.", "configspace": "", "generation": 82, "fitness": 0.10857054800469218, "feedback": "The algorithm EnhancedDynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "96fa6fda-9a29-43f3-b110-a8d0c3781200", "metadata": {"aucs": [0.1272976178849511, 0.1081541064017163, 0.16075668613191607, 0.1844621123162009, 0.16374666099812207, 0.15271526257888257, 0.1488704637831505, 0.14043537107679316, 0.12645343018087385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006176074584262059, 0.02387218418736725, 0.013451130592859739, 0.03727546306809215, 0.022596604505715545, 0.030497141138994266, 0.019221743504522992, 0.018767019342182722, 0.03702480185553503, 0.03055608533062426, 0.002803321423061833, 9.999999999998899e-05, 0.034373495363043904, 0.019634465267905576, 0.012281437283609753, 0.005382248092762554, 0.026688402704490355, 0.01574817864644429, 0.9324443079326203, 0.9403638293274453, 0.9453944615915104, 0.9588356981365169, 0.9594577216134724, 0.9713289898250552, 0.9759448914362002, 0.9655834511072757, 0.97090858638252, 0.08667155588928577, 0.0442682249674613, 0.05587950822893306, 0.04264679538048899, 0.13245017986587604, 0.055090482865333024, 0.05561604728823455, 0.06573675674852253, 0.05045353869201352, 0.12229369174854798, 0.08803407697466625, 0.08278016103478625, 0.1685444960987259, 0.06729492407517468, 0.12044832727219368, 0.08690907608288767, 0.1075894963654993, 0.096049285286393, 0.00469903585473308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02044986589127984, 0.022285182976966467, 9.999999999998899e-05, 9.999999999998899e-05, 0.026851726268138587, 0.007573473494639993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04403552899229923, 0.0010915858469728867, 0.028228573800839873, 0.08615598811807668, 9.999999999998899e-05, 9.999999999998899e-05, 0.02208937110072906, 0.0047868904876399165, 0.011509482122253778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025112869847510044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11596183681383532, 0.13879659513922615, 0.1788611228045729, 0.11591569845776772, 0.1272410428655829, 0.13357532034032027, 0.16923769723033, 0.129858730061727, 0.16175497177222553, 0.04260682606598132, 0.033388308426173574, 0.03392137023920405, 0.02943310483895134, 0.03259234508990738, 0.05341695738726082, 0.03557257458273233, 0.04042903604081949, 0.030545566977778105, 0.13172750409058753, 0.09939989463393595, 0.1371672532079461, 0.14601640656402837, 0.13364067376215405, 0.11169737374805078, 0.12314005550984475, 0.11372933814266994, 0.12873064105728593, 0.11694366215509111, 0.12084477143106087, 0.14352810184653642, 0.14855026003214844, 0.13155629125855306, 0.13111191461353733, 0.15878400446374474, 0.17675665239275362, 0.1528163121262598, 0.0736513201120007, 0.10715079467956623, 0.12957458725447435, 0.12170657594526324, 0.11936620901030726, 0.09806495311550056, 0.11285876869412004, 0.0997711199450243, 0.11156659286030224, 0.11943364695601921, 0.11541740900131958, 0.13345086981233123, 0.13864339772226963, 0.13530459243213977, 0.14823136829969807, 0.12245976138762271, 0.12470422345419208, 0.13678681630314227, 0.13194579110911386, 0.1392486247724104, 0.14240718450937506, 0.03805041327761938, 0.14388515804899216, 0.14928736430503398, 0.14040421445019258, 0.1615937303946806, 0.15647585363260497, 0.10589188307823483, 0.15236447677354337, 0.12024478726355592, 0.1360966101996539, 0.16708961886927498, 0.1662639722415341, 0.09027104022982235, 0.11965713819630619, 0.11504591755056537, 0.1589973494673559, 0.14024131994581024, 0.10762475089664436, 0.09919606558323235, 0.07390025722430493, 0.07139787577274237, 0.10305870529153272, 0.08754935084714821, 0.10867420311450238, 0.19980742712909616, 0.16173683495245694, 0.173431899445473, 0.1628955124307202, 0.16076098658452032, 0.16586827499644785, 0.17987615452908334, 0.16662165812135388, 0.1915368463106668, 0.022926435034326453, 0.017711620092227376, 0.034692134005245734, 0.027015293023570086, 0.04862762706974244, 0.03260641249460883, 0.02739560736491753, 0.02617966712029407, 0.03906145284329432]}, "mutation_prompt": null}
{"id": "7cf49deb-e2ff-4324-bb42-e9692a574b74", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < self.de_cross_prob\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Improve the algorithm by incorporating a dynamic mechanism to adjust the mutation rate based on the fitness improvement of the best particle.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a3dab-9dc0-43f6-9916-1fce20b19d5f", "metadata": {"aucs": [0.1272976178849511, 0.1081541064017163, 0.16075668613191607, 0.1844621123162009, 0.16374666099812207, 0.15271526257888257, 0.1488704637831505, 0.14043537107679316, 0.12645343018087385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006176074584262059, 0.02387218418736725, 0.013451130592859739, 0.03727546306809215, 0.022596604505715545, 0.030497141138994266, 0.019221743504522992, 0.018767019342182722, 0.03702480185553503, 0.03055608533062426, 0.002803321423061833, 9.999999999998899e-05, 0.034373495363043904, 0.019634465267905576, 0.012281437283609753, 0.005382248092762554, 0.026688402704490355, 0.01574817864644429, 0.9324443079326203, 0.9403638293274453, 0.9453944615915104, 0.9588356981365169, 0.9594577216134724, 0.9713289898250552, 0.9759448914362002, 0.9655834511072757, 0.97090858638252, 0.08667155588928577, 0.0442682249674613, 0.05587950822893306, 0.04264679538048899, 0.13245017986587604, 0.055090482865333024, 0.05561604728823455, 0.06573675674852253, 0.05045353869201352, 0.12229369174854798, 0.08803407697466625, 0.08278016103478625, 0.1685444960987259, 0.06729492407517468, 0.12044832727219368, 0.08690907608288767, 0.1075894963654993, 0.096049285286393, 0.00469903585473308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02044986589127984, 0.022285182976966467, 9.999999999998899e-05, 9.999999999998899e-05, 0.026851726268138587, 0.007573473494639993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04403552899229923, 0.0010915858469728867, 0.028228573800839873, 0.08615598811807668, 9.999999999998899e-05, 9.999999999998899e-05, 0.02208937110072906, 0.0047868904876399165, 0.011509482122253778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025112869847510044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11596183681383532, 0.13879659513922615, 0.1788611228045729, 0.11591569845776772, 0.1272410428655829, 0.13357532034032027, 0.16923769723033, 0.129858730061727, 0.16175497177222553, 0.04260682606598132, 0.033388308426173574, 0.03392137023920405, 0.02943310483895134, 0.03259234508990738, 0.05341695738726082, 0.03557257458273233, 0.04042903604081949, 0.030545566977778105, 0.13172750409058753, 0.09939989463393595, 0.1371672532079461, 0.14601640656402837, 0.13364067376215405, 0.11169737374805078, 0.12314005550984475, 0.11372933814266994, 0.12873064105728593, 0.11694366215509111, 0.12084477143106087, 0.14352810184653642, 0.14855026003214844, 0.13155629125855306, 0.13111191461353733, 0.15878400446374474, 0.17675665239275362, 0.1528163121262598, 0.0736513201120007, 0.10715079467956623, 0.12957458725447435, 0.12170657594526324, 0.11936620901030726, 0.09806495311550056, 0.11285876869412004, 0.0997711199450243, 0.11156659286030224, 0.11943364695601921, 0.11541740900131958, 0.13345086981233123, 0.13864339772226963, 0.13530459243213977, 0.14823136829969807, 0.12245976138762271, 0.12470422345419208, 0.13678681630314227, 0.13194579110911386, 0.1392486247724104, 0.14240718450937506, 0.03805041327761938, 0.14388515804899216, 0.14928736430503398, 0.14040421445019258, 0.1615937303946806, 0.15647585363260497, 0.10589188307823483, 0.15236447677354337, 0.12024478726355592, 0.1360966101996539, 0.16708961886927498, 0.1662639722415341, 0.09027104022982235, 0.11965713819630619, 0.11504591755056537, 0.1589973494673559, 0.14024131994581024, 0.10762475089664436, 0.09919606558323235, 0.07390025722430493, 0.07139787577274237, 0.10305870529153272, 0.08754935084714821, 0.10867420311450238, 0.19980742712909616, 0.16173683495245694, 0.173431899445473, 0.1628955124307202, 0.16076098658452032, 0.16586827499644785, 0.17987615452908334, 0.16662165812135388, 0.1915368463106668, 0.022926435034326453, 0.017711620092227376, 0.034692134005245734, 0.027015293023570086, 0.04862762706974244, 0.03260641249460883, 0.02739560736491753, 0.02617966712029407, 0.03906145284329432]}, "mutation_prompt": null}
{"id": "b3ab3a10-aead-4c22-8fb9-1947a546ccac", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < self.de_cross_prob\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Improve the algorithm by incorporating a dynamic mechanism to adjust the mutation rate based on the fitness improvement of the best particle.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "ca9a3dab-9dc0-43f6-9916-1fce20b19d5f", "metadata": {"aucs": [0.1272976178849511, 0.1081541064017163, 0.16075668613191607, 0.1844621123162009, 0.16374666099812207, 0.15271526257888257, 0.1488704637831505, 0.14043537107679316, 0.12645343018087385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006176074584262059, 0.02387218418736725, 0.013451130592859739, 0.03727546306809215, 0.022596604505715545, 0.030497141138994266, 0.019221743504522992, 0.018767019342182722, 0.03702480185553503, 0.03055608533062426, 0.002803321423061833, 9.999999999998899e-05, 0.034373495363043904, 0.019634465267905576, 0.012281437283609753, 0.005382248092762554, 0.026688402704490355, 0.01574817864644429, 0.9324443079326203, 0.9403638293274453, 0.9453944615915104, 0.9588356981365169, 0.9594577216134724, 0.9713289898250552, 0.9759448914362002, 0.9655834511072757, 0.97090858638252, 0.08667155588928577, 0.0442682249674613, 0.05587950822893306, 0.04264679538048899, 0.13245017986587604, 0.055090482865333024, 0.05561604728823455, 0.06573675674852253, 0.05045353869201352, 0.12229369174854798, 0.08803407697466625, 0.08278016103478625, 0.1685444960987259, 0.06729492407517468, 0.12044832727219368, 0.08690907608288767, 0.1075894963654993, 0.096049285286393, 0.00469903585473308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02044986589127984, 0.022285182976966467, 9.999999999998899e-05, 9.999999999998899e-05, 0.026851726268138587, 0.007573473494639993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04403552899229923, 0.0010915858469728867, 0.028228573800839873, 0.08615598811807668, 9.999999999998899e-05, 9.999999999998899e-05, 0.02208937110072906, 0.0047868904876399165, 0.011509482122253778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025112869847510044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11596183681383532, 0.13879659513922615, 0.1788611228045729, 0.11591569845776772, 0.1272410428655829, 0.13357532034032027, 0.16923769723033, 0.129858730061727, 0.16175497177222553, 0.04260682606598132, 0.033388308426173574, 0.03392137023920405, 0.02943310483895134, 0.03259234508990738, 0.05341695738726082, 0.03557257458273233, 0.04042903604081949, 0.030545566977778105, 0.13172750409058753, 0.09939989463393595, 0.1371672532079461, 0.14601640656402837, 0.13364067376215405, 0.11169737374805078, 0.12314005550984475, 0.11372933814266994, 0.12873064105728593, 0.11694366215509111, 0.12084477143106087, 0.14352810184653642, 0.14855026003214844, 0.13155629125855306, 0.13111191461353733, 0.15878400446374474, 0.17675665239275362, 0.1528163121262598, 0.0736513201120007, 0.10715079467956623, 0.12957458725447435, 0.12170657594526324, 0.11936620901030726, 0.09806495311550056, 0.11285876869412004, 0.0997711199450243, 0.11156659286030224, 0.11943364695601921, 0.11541740900131958, 0.13345086981233123, 0.13864339772226963, 0.13530459243213977, 0.14823136829969807, 0.12245976138762271, 0.12470422345419208, 0.13678681630314227, 0.13194579110911386, 0.1392486247724104, 0.14240718450937506, 0.03805041327761938, 0.14388515804899216, 0.14928736430503398, 0.14040421445019258, 0.1615937303946806, 0.15647585363260497, 0.10589188307823483, 0.15236447677354337, 0.12024478726355592, 0.1360966101996539, 0.16708961886927498, 0.1662639722415341, 0.09027104022982235, 0.11965713819630619, 0.11504591755056537, 0.1589973494673559, 0.14024131994581024, 0.10762475089664436, 0.09919606558323235, 0.07390025722430493, 0.07139787577274237, 0.10305870529153272, 0.08754935084714821, 0.10867420311450238, 0.19980742712909616, 0.16173683495245694, 0.173431899445473, 0.1628955124307202, 0.16076098658452032, 0.16586827499644785, 0.17987615452908334, 0.16662165812135388, 0.1915368463106668, 0.022926435034326453, 0.017711620092227376, 0.034692134005245734, 0.027015293023570086, 0.04862762706974244, 0.03260641249460883, 0.02739560736491753, 0.02617966712029407, 0.03906145284329432]}, "mutation_prompt": null}
{"id": "980a863e-4a56-4e97-bfc2-4942479f1d78", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < self.de_cross_prob\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Improve the algorithm by incorporating a dynamic mechanism to adjust the mutation rate based on the fitness improvement of the best particle.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a3dab-9dc0-43f6-9916-1fce20b19d5f", "metadata": {"aucs": [0.1272976178849511, 0.1081541064017163, 0.16075668613191607, 0.1844621123162009, 0.16374666099812207, 0.15271526257888257, 0.1488704637831505, 0.14043537107679316, 0.12645343018087385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006176074584262059, 0.02387218418736725, 0.013451130592859739, 0.03727546306809215, 0.022596604505715545, 0.030497141138994266, 0.019221743504522992, 0.018767019342182722, 0.03702480185553503, 0.03055608533062426, 0.002803321423061833, 9.999999999998899e-05, 0.034373495363043904, 0.019634465267905576, 0.012281437283609753, 0.005382248092762554, 0.026688402704490355, 0.01574817864644429, 0.9324443079326203, 0.9403638293274453, 0.9453944615915104, 0.9588356981365169, 0.9594577216134724, 0.9713289898250552, 0.9759448914362002, 0.9655834511072757, 0.97090858638252, 0.08667155588928577, 0.0442682249674613, 0.05587950822893306, 0.04264679538048899, 0.13245017986587604, 0.055090482865333024, 0.05561604728823455, 0.06573675674852253, 0.05045353869201352, 0.12229369174854798, 0.08803407697466625, 0.08278016103478625, 0.1685444960987259, 0.06729492407517468, 0.12044832727219368, 0.08690907608288767, 0.1075894963654993, 0.096049285286393, 0.00469903585473308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02044986589127984, 0.022285182976966467, 9.999999999998899e-05, 9.999999999998899e-05, 0.026851726268138587, 0.007573473494639993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04403552899229923, 0.0010915858469728867, 0.028228573800839873, 0.08615598811807668, 9.999999999998899e-05, 9.999999999998899e-05, 0.02208937110072906, 0.0047868904876399165, 0.011509482122253778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025112869847510044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11596183681383532, 0.13879659513922615, 0.1788611228045729, 0.11591569845776772, 0.1272410428655829, 0.13357532034032027, 0.16923769723033, 0.129858730061727, 0.16175497177222553, 0.04260682606598132, 0.033388308426173574, 0.03392137023920405, 0.02943310483895134, 0.03259234508990738, 0.05341695738726082, 0.03557257458273233, 0.04042903604081949, 0.030545566977778105, 0.13172750409058753, 0.09939989463393595, 0.1371672532079461, 0.14601640656402837, 0.13364067376215405, 0.11169737374805078, 0.12314005550984475, 0.11372933814266994, 0.12873064105728593, 0.11694366215509111, 0.12084477143106087, 0.14352810184653642, 0.14855026003214844, 0.13155629125855306, 0.13111191461353733, 0.15878400446374474, 0.17675665239275362, 0.1528163121262598, 0.0736513201120007, 0.10715079467956623, 0.12957458725447435, 0.12170657594526324, 0.11936620901030726, 0.09806495311550056, 0.11285876869412004, 0.0997711199450243, 0.11156659286030224, 0.11943364695601921, 0.11541740900131958, 0.13345086981233123, 0.13864339772226963, 0.13530459243213977, 0.14823136829969807, 0.12245976138762271, 0.12470422345419208, 0.13678681630314227, 0.13194579110911386, 0.1392486247724104, 0.14240718450937506, 0.03805041327761938, 0.14388515804899216, 0.14928736430503398, 0.14040421445019258, 0.1615937303946806, 0.15647585363260497, 0.10589188307823483, 0.15236447677354337, 0.12024478726355592, 0.1360966101996539, 0.16708961886927498, 0.1662639722415341, 0.09027104022982235, 0.11965713819630619, 0.11504591755056537, 0.1589973494673559, 0.14024131994581024, 0.10762475089664436, 0.09919606558323235, 0.07390025722430493, 0.07139787577274237, 0.10305870529153272, 0.08754935084714821, 0.10867420311450238, 0.19980742712909616, 0.16173683495245694, 0.173431899445473, 0.1628955124307202, 0.16076098658452032, 0.16586827499644785, 0.17987615452908334, 0.16662165812135388, 0.1915368463106668, 0.022926435034326453, 0.017711620092227376, 0.034692134005245734, 0.027015293023570086, 0.04862762706974244, 0.03260641249460883, 0.02739560736491753, 0.02617966712029407, 0.03906145284329432]}, "mutation_prompt": null}
{"id": "ecfa1ef8-8ad7-49a7-b336-7d9b5369520c", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < self.de_cross_prob\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with adaptive mutation rates per dimension\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                mutation_rates = np.maximum(0.1, np.minimum(self.mutation_rate * (1 + improvement_ratio), 0.9))\n                particles[i] += np.random.normal(0, mutation_rates, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Enhance the algorithm by introducing a mutation operator that explores the search space more effectively using a Gaussian mutation with adaptive mutation rates for each dimension.", "configspace": "", "generation": 86, "fitness": 0.10428412054260575, "feedback": "The algorithm EnhancedDynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.18.", "error": "", "parent_id": "ca9a3dab-9dc0-43f6-9916-1fce20b19d5f", "metadata": {"aucs": [0.12051927403412266, 0.08711203960891922, 0.1430693896932158, 0.14402588720373788, 0.14427833367822118, 0.16236415650333624, 0.1327497226438612, 0.2066126420411073, 0.13566935094714283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019138207482324643, 0.031939479579396135, 0.026506294135430708, 0.04106718218530914, 0.027454488196675286, 0.03305287442721072, 0.028948662263679537, 0.025299336227212033, 0.03231654189254496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042337587546171895, 0.021232178541139568, 0.008070067372460632, 9.999999999998899e-05, 0.022937694473276093, 0.012827528937410015, 0.5147132091653064, 0.9525071446860732, 0.9574757695872306, 0.8415971753055607, 0.9762323505218882, 0.9766851288991408, 0.959299042183623, 0.9685172983182763, 0.9554572859221044, 0.07614934652518712, 0.055227306863371406, 0.048660943103343235, 0.08851193234014176, 0.04494468847421629, 0.058634353296603825, 0.043320611144072596, 0.06320417602739781, 0.0581943390693781, 0.13436913519320948, 0.061384836647750296, 0.0933465916906534, 0.1439892057081371, 0.09237082078671521, 0.10945792819821432, 0.07146902771884744, 0.0941510076059967, 0.049215105036288564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0078024931384493845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003359070274893017, 0.00600660961643007, 0.00812342949113476, 0.003641511779119533, 9.999999999998899e-05, 0.06299203539977438, 0.002058509758468663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027161757226496275, 0.035913919609228295, 0.006176820967770946, 0.016764396750229227, 0.0028388012590853107, 0.0025680873642811575, 0.04392121204498922, 0.014197044436075834, 0.049860313722092764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362400426401021, 0.15775321142639298, 0.16376695105188532, 0.16792998120897662, 0.11771755683735441, 0.1088001223867554, 0.21721832224254878, 0.12078477508791552, 0.13569448160633035, 0.044710271280395286, 0.039402223548454685, 0.0436267681598802, 0.034999915975550744, 0.008246290347433516, 0.06350418485646425, 0.024318127328756933, 0.04196686287548568, 0.08026824417813772, 0.14273124826480232, 0.09808599612760338, 0.1103244202108995, 0.11052249842461825, 0.11373266077470601, 0.1257647778122566, 0.12746463225163607, 0.13548987330676632, 0.12347179293088861, 0.12552761109103028, 0.11472511532158625, 0.1486131835630249, 0.14269993698343164, 0.1264052960959272, 0.12266798704034032, 0.1595482761875996, 0.18193183567992566, 0.14772673200693065, 0.07987201215959883, 0.08860689855451076, 0.08957861762281394, 0.14109354913760785, 0.12569678053804068, 0.10494582521399787, 0.0837317855149382, 0.0997711199450243, 0.08978780301881784, 0.11943364695601921, 0.11833628433603949, 0.13345086981233123, 0.1598341602605875, 0.12885170158946457, 0.12124629951858656, 0.1302280884858914, 0.11526497813593939, 0.1261963614278906, 0.1407487106270643, 0.1433077681261148, 0.1631251633464853, 0.1618143228096871, 0.1534621646576947, 0.14476660826722887, 0.1212817218652652, 0.14457397434183783, 0.13870190000036653, 0.09788135142956123, 0.10030436029327616, 0.12402519867474038, 0.14509427319193513, 0.1688618512185569, 0.11460798040465958, 0.08697485337421662, 0.10998982587660866, 0.1087304770005263, 0.12429663060221752, 0.10080122021569915, 0.08596798808018902, 0.0582313221943479, 0.06897962877290087, 0.08133973527255034, 0.09932796075442751, 0.07095944722142666, 0.11105870258597783, 0.16446231183763016, 0.171677385903247, 0.1780947191316553, 0.16952891267466308, 0.1598263580205237, 0.1615796737737143, 0.1992198269979344, 0.18254260314467297, 0.16410702478761918, 0.022926435034326453, 0.026231324690987323, 0.0512290294389941, 0.027015293023570086, 0.043155749715746206, 0.030130462474462938, 0.024902814565340825, 0.01598499576133272, 0.018746331584899578]}, "mutation_prompt": null}
{"id": "97f27a7c-604c-4eaa-b47e-100b637b5178", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < self.de_cross_prob\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Improve the algorithm by incorporating a dynamic mechanism to adjust the mutation rate based on the fitness improvement of the best particle.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a3dab-9dc0-43f6-9916-1fce20b19d5f", "metadata": {"aucs": [0.1272976178849511, 0.1081541064017163, 0.16075668613191607, 0.1844621123162009, 0.16374666099812207, 0.15271526257888257, 0.1488704637831505, 0.14043537107679316, 0.12645343018087385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006176074584262059, 0.02387218418736725, 0.013451130592859739, 0.03727546306809215, 0.022596604505715545, 0.030497141138994266, 0.019221743504522992, 0.018767019342182722, 0.03702480185553503, 0.03055608533062426, 0.002803321423061833, 9.999999999998899e-05, 0.034373495363043904, 0.019634465267905576, 0.012281437283609753, 0.005382248092762554, 0.026688402704490355, 0.01574817864644429, 0.9324443079326203, 0.9403638293274453, 0.9453944615915104, 0.9588356981365169, 0.9594577216134724, 0.9713289898250552, 0.9759448914362002, 0.9655834511072757, 0.97090858638252, 0.08667155588928577, 0.0442682249674613, 0.05587950822893306, 0.04264679538048899, 0.13245017986587604, 0.055090482865333024, 0.05561604728823455, 0.06573675674852253, 0.05045353869201352, 0.12229369174854798, 0.08803407697466625, 0.08278016103478625, 0.1685444960987259, 0.06729492407517468, 0.12044832727219368, 0.08690907608288767, 0.1075894963654993, 0.096049285286393, 0.00469903585473308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02044986589127984, 0.022285182976966467, 9.999999999998899e-05, 9.999999999998899e-05, 0.026851726268138587, 0.007573473494639993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04403552899229923, 0.0010915858469728867, 0.028228573800839873, 0.08615598811807668, 9.999999999998899e-05, 9.999999999998899e-05, 0.02208937110072906, 0.0047868904876399165, 0.011509482122253778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025112869847510044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11596183681383532, 0.13879659513922615, 0.1788611228045729, 0.11591569845776772, 0.1272410428655829, 0.13357532034032027, 0.16923769723033, 0.129858730061727, 0.16175497177222553, 0.04260682606598132, 0.033388308426173574, 0.03392137023920405, 0.02943310483895134, 0.03259234508990738, 0.05341695738726082, 0.03557257458273233, 0.04042903604081949, 0.030545566977778105, 0.13172750409058753, 0.09939989463393595, 0.1371672532079461, 0.14601640656402837, 0.13364067376215405, 0.11169737374805078, 0.12314005550984475, 0.11372933814266994, 0.12873064105728593, 0.11694366215509111, 0.12084477143106087, 0.14352810184653642, 0.14855026003214844, 0.13155629125855306, 0.13111191461353733, 0.15878400446374474, 0.17675665239275362, 0.1528163121262598, 0.0736513201120007, 0.10715079467956623, 0.12957458725447435, 0.12170657594526324, 0.11936620901030726, 0.09806495311550056, 0.11285876869412004, 0.0997711199450243, 0.11156659286030224, 0.11943364695601921, 0.11541740900131958, 0.13345086981233123, 0.13864339772226963, 0.13530459243213977, 0.14823136829969807, 0.12245976138762271, 0.12470422345419208, 0.13678681630314227, 0.13194579110911386, 0.1392486247724104, 0.14240718450937506, 0.03805041327761938, 0.14388515804899216, 0.14928736430503398, 0.14040421445019258, 0.1615937303946806, 0.15647585363260497, 0.10589188307823483, 0.15236447677354337, 0.12024478726355592, 0.1360966101996539, 0.16708961886927498, 0.1662639722415341, 0.09027104022982235, 0.11965713819630619, 0.11504591755056537, 0.1589973494673559, 0.14024131994581024, 0.10762475089664436, 0.09919606558323235, 0.07390025722430493, 0.07139787577274237, 0.10305870529153272, 0.08754935084714821, 0.10867420311450238, 0.19980742712909616, 0.16173683495245694, 0.173431899445473, 0.1628955124307202, 0.16076098658452032, 0.16586827499644785, 0.17987615452908334, 0.16662165812135388, 0.1915368463106668, 0.022926435034326453, 0.017711620092227376, 0.034692134005245734, 0.027015293023570086, 0.04862762706974244, 0.03260641249460883, 0.02739560736491753, 0.02617966712029407, 0.03906145284329432]}, "mutation_prompt": null}
{"id": "86b34e36-9dea-4411-931a-fd2559d8e158", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < self.de_cross_prob\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Improve the algorithm by incorporating a dynamic mechanism to adjust the mutation rate based on the fitness improvement of the best particle.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a3dab-9dc0-43f6-9916-1fce20b19d5f", "metadata": {"aucs": [0.1272976178849511, 0.1081541064017163, 0.16075668613191607, 0.1844621123162009, 0.16374666099812207, 0.15271526257888257, 0.1488704637831505, 0.14043537107679316, 0.12645343018087385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006176074584262059, 0.02387218418736725, 0.013451130592859739, 0.03727546306809215, 0.022596604505715545, 0.030497141138994266, 0.019221743504522992, 0.018767019342182722, 0.03702480185553503, 0.03055608533062426, 0.002803321423061833, 9.999999999998899e-05, 0.034373495363043904, 0.019634465267905576, 0.012281437283609753, 0.005382248092762554, 0.026688402704490355, 0.01574817864644429, 0.9324443079326203, 0.9403638293274453, 0.9453944615915104, 0.9588356981365169, 0.9594577216134724, 0.9713289898250552, 0.9759448914362002, 0.9655834511072757, 0.97090858638252, 0.08667155588928577, 0.0442682249674613, 0.05587950822893306, 0.04264679538048899, 0.13245017986587604, 0.055090482865333024, 0.05561604728823455, 0.06573675674852253, 0.05045353869201352, 0.12229369174854798, 0.08803407697466625, 0.08278016103478625, 0.1685444960987259, 0.06729492407517468, 0.12044832727219368, 0.08690907608288767, 0.1075894963654993, 0.096049285286393, 0.00469903585473308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02044986589127984, 0.022285182976966467, 9.999999999998899e-05, 9.999999999998899e-05, 0.026851726268138587, 0.007573473494639993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04403552899229923, 0.0010915858469728867, 0.028228573800839873, 0.08615598811807668, 9.999999999998899e-05, 9.999999999998899e-05, 0.02208937110072906, 0.0047868904876399165, 0.011509482122253778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025112869847510044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11596183681383532, 0.13879659513922615, 0.1788611228045729, 0.11591569845776772, 0.1272410428655829, 0.13357532034032027, 0.16923769723033, 0.129858730061727, 0.16175497177222553, 0.04260682606598132, 0.033388308426173574, 0.03392137023920405, 0.02943310483895134, 0.03259234508990738, 0.05341695738726082, 0.03557257458273233, 0.04042903604081949, 0.030545566977778105, 0.13172750409058753, 0.09939989463393595, 0.1371672532079461, 0.14601640656402837, 0.13364067376215405, 0.11169737374805078, 0.12314005550984475, 0.11372933814266994, 0.12873064105728593, 0.11694366215509111, 0.12084477143106087, 0.14352810184653642, 0.14855026003214844, 0.13155629125855306, 0.13111191461353733, 0.15878400446374474, 0.17675665239275362, 0.1528163121262598, 0.0736513201120007, 0.10715079467956623, 0.12957458725447435, 0.12170657594526324, 0.11936620901030726, 0.09806495311550056, 0.11285876869412004, 0.0997711199450243, 0.11156659286030224, 0.11943364695601921, 0.11541740900131958, 0.13345086981233123, 0.13864339772226963, 0.13530459243213977, 0.14823136829969807, 0.12245976138762271, 0.12470422345419208, 0.13678681630314227, 0.13194579110911386, 0.1392486247724104, 0.14240718450937506, 0.03805041327761938, 0.14388515804899216, 0.14928736430503398, 0.14040421445019258, 0.1615937303946806, 0.15647585363260497, 0.10589188307823483, 0.15236447677354337, 0.12024478726355592, 0.1360966101996539, 0.16708961886927498, 0.1662639722415341, 0.09027104022982235, 0.11965713819630619, 0.11504591755056537, 0.1589973494673559, 0.14024131994581024, 0.10762475089664436, 0.09919606558323235, 0.07390025722430493, 0.07139787577274237, 0.10305870529153272, 0.08754935084714821, 0.10867420311450238, 0.19980742712909616, 0.16173683495245694, 0.173431899445473, 0.1628955124307202, 0.16076098658452032, 0.16586827499644785, 0.17987615452908334, 0.16662165812135388, 0.1915368463106668, 0.022926435034326453, 0.017711620092227376, 0.034692134005245734, 0.027015293023570086, 0.04862762706974244, 0.03260641249460883, 0.02739560736491753, 0.02617966712029407, 0.03906145284329432]}, "mutation_prompt": null}
{"id": "7c40f07f-b5c1-452e-9901-54b06fb50d07", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < self.de_cross_prob\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Improve the algorithm by incorporating a dynamic mechanism to adjust the mutation rate based on the fitness improvement of the best particle.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a3dab-9dc0-43f6-9916-1fce20b19d5f", "metadata": {"aucs": [0.1272976178849511, 0.1081541064017163, 0.16075668613191607, 0.1844621123162009, 0.16374666099812207, 0.15271526257888257, 0.1488704637831505, 0.14043537107679316, 0.12645343018087385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006176074584262059, 0.02387218418736725, 0.013451130592859739, 0.03727546306809215, 0.022596604505715545, 0.030497141138994266, 0.019221743504522992, 0.018767019342182722, 0.03702480185553503, 0.03055608533062426, 0.002803321423061833, 9.999999999998899e-05, 0.034373495363043904, 0.019634465267905576, 0.012281437283609753, 0.005382248092762554, 0.026688402704490355, 0.01574817864644429, 0.9324443079326203, 0.9403638293274453, 0.9453944615915104, 0.9588356981365169, 0.9594577216134724, 0.9713289898250552, 0.9759448914362002, 0.9655834511072757, 0.97090858638252, 0.08667155588928577, 0.0442682249674613, 0.05587950822893306, 0.04264679538048899, 0.13245017986587604, 0.055090482865333024, 0.05561604728823455, 0.06573675674852253, 0.05045353869201352, 0.12229369174854798, 0.08803407697466625, 0.08278016103478625, 0.1685444960987259, 0.06729492407517468, 0.12044832727219368, 0.08690907608288767, 0.1075894963654993, 0.096049285286393, 0.00469903585473308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02044986589127984, 0.022285182976966467, 9.999999999998899e-05, 9.999999999998899e-05, 0.026851726268138587, 0.007573473494639993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04403552899229923, 0.0010915858469728867, 0.028228573800839873, 0.08615598811807668, 9.999999999998899e-05, 9.999999999998899e-05, 0.02208937110072906, 0.0047868904876399165, 0.011509482122253778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025112869847510044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11596183681383532, 0.13879659513922615, 0.1788611228045729, 0.11591569845776772, 0.1272410428655829, 0.13357532034032027, 0.16923769723033, 0.129858730061727, 0.16175497177222553, 0.04260682606598132, 0.033388308426173574, 0.03392137023920405, 0.02943310483895134, 0.03259234508990738, 0.05341695738726082, 0.03557257458273233, 0.04042903604081949, 0.030545566977778105, 0.13172750409058753, 0.09939989463393595, 0.1371672532079461, 0.14601640656402837, 0.13364067376215405, 0.11169737374805078, 0.12314005550984475, 0.11372933814266994, 0.12873064105728593, 0.11694366215509111, 0.12084477143106087, 0.14352810184653642, 0.14855026003214844, 0.13155629125855306, 0.13111191461353733, 0.15878400446374474, 0.17675665239275362, 0.1528163121262598, 0.0736513201120007, 0.10715079467956623, 0.12957458725447435, 0.12170657594526324, 0.11936620901030726, 0.09806495311550056, 0.11285876869412004, 0.0997711199450243, 0.11156659286030224, 0.11943364695601921, 0.11541740900131958, 0.13345086981233123, 0.13864339772226963, 0.13530459243213977, 0.14823136829969807, 0.12245976138762271, 0.12470422345419208, 0.13678681630314227, 0.13194579110911386, 0.1392486247724104, 0.14240718450937506, 0.03805041327761938, 0.14388515804899216, 0.14928736430503398, 0.14040421445019258, 0.1615937303946806, 0.15647585363260497, 0.10589188307823483, 0.15236447677354337, 0.12024478726355592, 0.1360966101996539, 0.16708961886927498, 0.1662639722415341, 0.09027104022982235, 0.11965713819630619, 0.11504591755056537, 0.1589973494673559, 0.14024131994581024, 0.10762475089664436, 0.09919606558323235, 0.07390025722430493, 0.07139787577274237, 0.10305870529153272, 0.08754935084714821, 0.10867420311450238, 0.19980742712909616, 0.16173683495245694, 0.173431899445473, 0.1628955124307202, 0.16076098658452032, 0.16586827499644785, 0.17987615452908334, 0.16662165812135388, 0.1915368463106668, 0.022926435034326453, 0.017711620092227376, 0.034692134005245734, 0.027015293023570086, 0.04862762706974244, 0.03260641249460883, 0.02739560736491753, 0.02617966712029407, 0.03906145284329432]}, "mutation_prompt": null}
{"id": "3fb88222-afb5-4daa-a4a2-e689b44db0b9", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < self.de_cross_prob\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Improve the algorithm by incorporating a dynamic mechanism to adjust the mutation rate based on the fitness improvement of the best particle.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a3dab-9dc0-43f6-9916-1fce20b19d5f", "metadata": {"aucs": [0.1272976178849511, 0.1081541064017163, 0.16075668613191607, 0.1844621123162009, 0.16374666099812207, 0.15271526257888257, 0.1488704637831505, 0.14043537107679316, 0.12645343018087385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006176074584262059, 0.02387218418736725, 0.013451130592859739, 0.03727546306809215, 0.022596604505715545, 0.030497141138994266, 0.019221743504522992, 0.018767019342182722, 0.03702480185553503, 0.03055608533062426, 0.002803321423061833, 9.999999999998899e-05, 0.034373495363043904, 0.019634465267905576, 0.012281437283609753, 0.005382248092762554, 0.026688402704490355, 0.01574817864644429, 0.9324443079326203, 0.9403638293274453, 0.9453944615915104, 0.9588356981365169, 0.9594577216134724, 0.9713289898250552, 0.9759448914362002, 0.9655834511072757, 0.97090858638252, 0.08667155588928577, 0.0442682249674613, 0.05587950822893306, 0.04264679538048899, 0.13245017986587604, 0.055090482865333024, 0.05561604728823455, 0.06573675674852253, 0.05045353869201352, 0.12229369174854798, 0.08803407697466625, 0.08278016103478625, 0.1685444960987259, 0.06729492407517468, 0.12044832727219368, 0.08690907608288767, 0.1075894963654993, 0.096049285286393, 0.00469903585473308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02044986589127984, 0.022285182976966467, 9.999999999998899e-05, 9.999999999998899e-05, 0.026851726268138587, 0.007573473494639993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04403552899229923, 0.0010915858469728867, 0.028228573800839873, 0.08615598811807668, 9.999999999998899e-05, 9.999999999998899e-05, 0.02208937110072906, 0.0047868904876399165, 0.011509482122253778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025112869847510044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11596183681383532, 0.13879659513922615, 0.1788611228045729, 0.11591569845776772, 0.1272410428655829, 0.13357532034032027, 0.16923769723033, 0.129858730061727, 0.16175497177222553, 0.04260682606598132, 0.033388308426173574, 0.03392137023920405, 0.02943310483895134, 0.03259234508990738, 0.05341695738726082, 0.03557257458273233, 0.04042903604081949, 0.030545566977778105, 0.13172750409058753, 0.09939989463393595, 0.1371672532079461, 0.14601640656402837, 0.13364067376215405, 0.11169737374805078, 0.12314005550984475, 0.11372933814266994, 0.12873064105728593, 0.11694366215509111, 0.12084477143106087, 0.14352810184653642, 0.14855026003214844, 0.13155629125855306, 0.13111191461353733, 0.15878400446374474, 0.17675665239275362, 0.1528163121262598, 0.0736513201120007, 0.10715079467956623, 0.12957458725447435, 0.12170657594526324, 0.11936620901030726, 0.09806495311550056, 0.11285876869412004, 0.0997711199450243, 0.11156659286030224, 0.11943364695601921, 0.11541740900131958, 0.13345086981233123, 0.13864339772226963, 0.13530459243213977, 0.14823136829969807, 0.12245976138762271, 0.12470422345419208, 0.13678681630314227, 0.13194579110911386, 0.1392486247724104, 0.14240718450937506, 0.03805041327761938, 0.14388515804899216, 0.14928736430503398, 0.14040421445019258, 0.1615937303946806, 0.15647585363260497, 0.10589188307823483, 0.15236447677354337, 0.12024478726355592, 0.1360966101996539, 0.16708961886927498, 0.1662639722415341, 0.09027104022982235, 0.11965713819630619, 0.11504591755056537, 0.1589973494673559, 0.14024131994581024, 0.10762475089664436, 0.09919606558323235, 0.07390025722430493, 0.07139787577274237, 0.10305870529153272, 0.08754935084714821, 0.10867420311450238, 0.19980742712909616, 0.16173683495245694, 0.173431899445473, 0.1628955124307202, 0.16076098658452032, 0.16586827499644785, 0.17987615452908334, 0.16662165812135388, 0.1915368463106668, 0.022926435034326453, 0.017711620092227376, 0.034692134005245734, 0.027015293023570086, 0.04862762706974244, 0.03260641249460883, 0.02739560736491753, 0.02617966712029407, 0.03906145284329432]}, "mutation_prompt": null}
{"id": "387db88e-9a84-4d68-bf20-e5fff17e147a", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < self.de_cross_prob\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Improve the algorithm by incorporating a dynamic mechanism to adjust the mutation rate based on the fitness improvement of the best particle.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca9a3dab-9dc0-43f6-9916-1fce20b19d5f", "metadata": {"aucs": [0.1272976178849511, 0.1081541064017163, 0.16075668613191607, 0.1844621123162009, 0.16374666099812207, 0.15271526257888257, 0.1488704637831505, 0.14043537107679316, 0.12645343018087385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006176074584262059, 0.02387218418736725, 0.013451130592859739, 0.03727546306809215, 0.022596604505715545, 0.030497141138994266, 0.019221743504522992, 0.018767019342182722, 0.03702480185553503, 0.03055608533062426, 0.002803321423061833, 9.999999999998899e-05, 0.034373495363043904, 0.019634465267905576, 0.012281437283609753, 0.005382248092762554, 0.026688402704490355, 0.01574817864644429, 0.9324443079326203, 0.9403638293274453, 0.9453944615915104, 0.9588356981365169, 0.9594577216134724, 0.9713289898250552, 0.9759448914362002, 0.9655834511072757, 0.97090858638252, 0.08667155588928577, 0.0442682249674613, 0.05587950822893306, 0.04264679538048899, 0.13245017986587604, 0.055090482865333024, 0.05561604728823455, 0.06573675674852253, 0.05045353869201352, 0.12229369174854798, 0.08803407697466625, 0.08278016103478625, 0.1685444960987259, 0.06729492407517468, 0.12044832727219368, 0.08690907608288767, 0.1075894963654993, 0.096049285286393, 0.00469903585473308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02044986589127984, 0.022285182976966467, 9.999999999998899e-05, 9.999999999998899e-05, 0.026851726268138587, 0.007573473494639993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04403552899229923, 0.0010915858469728867, 0.028228573800839873, 0.08615598811807668, 9.999999999998899e-05, 9.999999999998899e-05, 0.02208937110072906, 0.0047868904876399165, 0.011509482122253778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025112869847510044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11596183681383532, 0.13879659513922615, 0.1788611228045729, 0.11591569845776772, 0.1272410428655829, 0.13357532034032027, 0.16923769723033, 0.129858730061727, 0.16175497177222553, 0.04260682606598132, 0.033388308426173574, 0.03392137023920405, 0.02943310483895134, 0.03259234508990738, 0.05341695738726082, 0.03557257458273233, 0.04042903604081949, 0.030545566977778105, 0.13172750409058753, 0.09939989463393595, 0.1371672532079461, 0.14601640656402837, 0.13364067376215405, 0.11169737374805078, 0.12314005550984475, 0.11372933814266994, 0.12873064105728593, 0.11694366215509111, 0.12084477143106087, 0.14352810184653642, 0.14855026003214844, 0.13155629125855306, 0.13111191461353733, 0.15878400446374474, 0.17675665239275362, 0.1528163121262598, 0.0736513201120007, 0.10715079467956623, 0.12957458725447435, 0.12170657594526324, 0.11936620901030726, 0.09806495311550056, 0.11285876869412004, 0.0997711199450243, 0.11156659286030224, 0.11943364695601921, 0.11541740900131958, 0.13345086981233123, 0.13864339772226963, 0.13530459243213977, 0.14823136829969807, 0.12245976138762271, 0.12470422345419208, 0.13678681630314227, 0.13194579110911386, 0.1392486247724104, 0.14240718450937506, 0.03805041327761938, 0.14388515804899216, 0.14928736430503398, 0.14040421445019258, 0.1615937303946806, 0.15647585363260497, 0.10589188307823483, 0.15236447677354337, 0.12024478726355592, 0.1360966101996539, 0.16708961886927498, 0.1662639722415341, 0.09027104022982235, 0.11965713819630619, 0.11504591755056537, 0.1589973494673559, 0.14024131994581024, 0.10762475089664436, 0.09919606558323235, 0.07390025722430493, 0.07139787577274237, 0.10305870529153272, 0.08754935084714821, 0.10867420311450238, 0.19980742712909616, 0.16173683495245694, 0.173431899445473, 0.1628955124307202, 0.16076098658452032, 0.16586827499644785, 0.17987615452908334, 0.16662165812135388, 0.1915368463106668, 0.022926435034326453, 0.017711620092227376, 0.034692134005245734, 0.027015293023570086, 0.04862762706974244, 0.03260641249460883, 0.02739560736491753, 0.02617966712029407, 0.03906145284329432]}, "mutation_prompt": null}
{"id": "13415fe4-31b6-409e-a8ad-d51d8d1a9ed0", "solution": "import numpy as np\n\nclass EnhancedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9, de_adaptive_prob=0.5):  # Change: Added de_adaptive_prob\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n        self.de_adaptive_prob = de_adaptive_prob  # Change: Added de_adaptive_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution with adaptive crossover probability\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < (self.de_cross_prob * (1 - _ / self.budget) + self.de_adaptive_prob * (_ / self.budget))  # Change: Adaptive crossover probability\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "EnhancedDynamicWeightQPSO", "description": "Introduce a differential evolution mutation strategy with adaptive crossover probability.", "configspace": "", "generation": 92, "fitness": 0.10869707140132087, "feedback": "The algorithm EnhancedDynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "ca9a3dab-9dc0-43f6-9916-1fce20b19d5f", "metadata": {"aucs": [0.1272976178849511, 0.1081541064017163, 0.16075668613191607, 0.1844621123162009, 0.16374666099812207, 0.15271526257888257, 0.1488704637831505, 0.14043537107679316, 0.12645343018087385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006176074584262059, 0.02387218418736725, 0.013451130592859739, 0.03727546306809215, 0.02207434094981542, 0.030497141138994266, 0.019221743504522992, 0.018767019342182722, 0.03702480185553503, 0.03055608533062426, 0.002803321423061833, 9.999999999998899e-05, 0.034373495363043904, 0.019634465267905576, 0.012281437283609753, 0.005382248092762554, 0.026688402704490355, 0.01574817864644429, 0.9324443079326203, 0.9403638293274453, 0.9453944615915104, 0.9588356981365169, 0.9594577216134724, 0.9713289898250552, 0.9759448914362002, 0.9655834511072757, 0.97090858638252, 0.08667155588928577, 0.0442682249674613, 0.05587950822893306, 0.04899786754363644, 0.13245017986587604, 0.055095649618986275, 0.05561604728823455, 0.06573675674852253, 0.05045353869201352, 0.12229369174854798, 0.08803407697466625, 0.08278016103478625, 0.1685444960987259, 0.06729492407517468, 0.12044832727219368, 0.08690907608288767, 0.1075894963654993, 0.096049285286393, 0.00469903585473308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02044986589127984, 0.022285182976966467, 9.999999999998899e-05, 9.999999999998899e-05, 0.026851726268138587, 0.007573473494639993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04403552899229923, 0.0010915858469728867, 0.028228573800839873, 0.08615598811807668, 9.999999999998899e-05, 9.999999999998899e-05, 0.023487561252843125, 0.0047868904876399165, 0.011509482122253778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025112869847510044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11596183681383532, 0.13879659513922615, 0.1788611228045729, 0.12890730752708646, 0.1272410428655829, 0.13357532034032027, 0.16923769723033, 0.129858730061727, 0.16175497177222553, 0.04260682606598132, 0.033295463266066916, 0.03392137023920405, 0.02943310483895134, 0.03259234508990738, 0.05341695738726082, 0.03557257458273233, 0.04042903604081949, 0.030545566977778105, 0.13172750409058753, 0.1006004796892177, 0.1371672532079461, 0.14601640656402837, 0.13364067376215405, 0.11169737374805078, 0.12314005550984475, 0.11372933814266994, 0.1287198866013205, 0.11694366215509111, 0.12084477143106087, 0.14352810184653642, 0.14855026003214844, 0.13155629125855306, 0.13111191461353733, 0.15878400446374474, 0.17675665239275362, 0.1528163121262598, 0.0736513201120007, 0.10715079467956623, 0.12957458725447435, 0.12170657594526324, 0.11936620901030726, 0.09806495311550056, 0.11285876869412004, 0.0997711199450243, 0.11156659286030224, 0.11943364695601921, 0.11541740900131958, 0.13345086981233123, 0.13864339772226963, 0.13530459243213977, 0.14823136829969807, 0.12245976138762271, 0.12470422345419208, 0.13678681630314227, 0.13194579110911386, 0.1392486247724104, 0.14240718450937506, 0.03805041327761938, 0.14388515804899216, 0.14928736430503398, 0.14040421445019258, 0.1615937303946806, 0.15647585363260497, 0.10589188307823483, 0.15236447677354337, 0.1214630883608202, 0.1360966101996539, 0.16708961886927498, 0.16640641457056227, 0.09027104022982235, 0.11965713819630619, 0.11504591755056537, 0.1589973494673559, 0.14024131994581024, 0.11023807143216613, 0.09919606558323235, 0.07390025722430493, 0.07172979655351941, 0.10305870529153272, 0.08754935084714821, 0.10867420311450238, 0.19980742712909616, 0.1609368979747784, 0.17334302386184286, 0.1628955124307202, 0.16173014046825684, 0.16634018961040764, 0.17987615452908334, 0.16846984252185504, 0.19083871488144, 0.022926435034326453, 0.017711620092227376, 0.034692134005245734, 0.027015293023570086, 0.04862762706974244, 0.03260641249460883, 0.02739560736491753, 0.02617966712029407, 0.03906145284329432]}, "mutation_prompt": null}
{"id": "637fcd5f-8dfe-4e98-b640-28eb49563639", "solution": "import numpy as np\n\nclass ImprovedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9, de_adaptive_prob=0.5):  # Change: Added de_adaptive_prob\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n        self.de_adaptive_prob = de_adaptive_prob  # Change: Added de_adaptive_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            chaotic_map = lambda x: 4 * x * (1 - x)\n            initial_positions = np.zeros((self.num_particles, self.dim))\n            for i in range(self.num_particles):\n                initial_positions[i] = chaotic_map(np.random.rand(self.dim))\n            return initial_positions\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution with adaptive crossover probability\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < (self.de_cross_prob * (1 - _ / self.budget) + self.de_adaptive_prob * (_ / self.budget))  # Change: Adaptive crossover probability\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Change: Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedDynamicWeightQPSO", "description": "Improve the exploration capability by incorporating a chaotic map for diversity enhancement and population initialization.", "configspace": "", "generation": 93, "fitness": 0.11716974843199923, "feedback": "The algorithm ImprovedDynamicWeightQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "13415fe4-31b6-409e-a8ad-d51d8d1a9ed0", "metadata": {"aucs": [0.18985124773795925, 0.1975576278052782, 0.1593119571633007, 0.14625499065371406, 0.1668057911558135, 0.1681085585633687, 0.12985653167941402, 0.11666859636861915, 0.1549661520598149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093607611827078, 0.06534936438083072, 0.051130096193137575, 0.028190014251871287, 0.02080972197843023, 0.042158592188767385, 0.03868354283202047, 0.014309051516046223, 0.015374920740782505, 0.02453499167276807, 0.039257783660923806, 0.035553419885643645, 0.03617111473304335, 0.010573402417242694, 0.01535722310523202, 0.013696937697805889, 0.034651684579038555, 0.03170130200965382, 0.8980394702585041, 0.8700087935614904, 0.8992566681188582, 0.9059813279146051, 0.9395240181237055, 0.9358296705845205, 0.9207845554224644, 0.9373069038844317, 0.9272494441250919, 0.08301676782766809, 0.10734163180738365, 0.03611165275575545, 0.014058744864491546, 0.1379597665278548, 0.03329128406843884, 0.04605623369461265, 0.06982343708249372, 0.027741939554249084, 0.15301215660413925, 0.1659472745970737, 0.14093698491737228, 0.11186925723195162, 0.12362283982957656, 0.07569774210973224, 0.07370349325535752, 0.1582355204155903, 0.09904437880995642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003631687313362386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005003839655451925, 0.08146439975975917, 0.05587894287603212, 0.07647597594428623, 0.10388323905234642, 0.046425087217917604, 0.08003259902628523, 0.06088819285833924, 0.0650291892285868, 0.055579080691495975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009860487024590081, 0.06235407727090436, 0.02950438748227424, 0.058182132403799325, 0.05404889755326325, 0.05690341158219292, 0.010733766757814567, 0.0046405224702457115, 0.013768144357202416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010336883653028428, 9.999999999998899e-05, 0.13400157195361262, 0.13730977970843106, 0.10605986869830031, 0.21950875926857238, 0.175138425086112, 0.13069001544519399, 0.1624482118777283, 0.16996021267691108, 0.27957516048316433, 0.0448422988682311, 0.047381064830787856, 0.037660595819094644, 0.03909017523581193, 0.03534786064067352, 0.027639044696077475, 0.03832607355366613, 0.026034956745910165, 0.009148892291879984, 0.12386880973381054, 0.10194626252624461, 0.1039599227271727, 0.1010382995566359, 0.10889564678141328, 0.12414015309359694, 0.15052575497331633, 0.1038338169799532, 0.11793405876466201, 0.16395778098182723, 0.16641482202982438, 0.12349741400578773, 0.19922589197026874, 0.16614898822282598, 0.18454035300499672, 0.1509108409744655, 0.19792144832905623, 0.15143385121297837, 0.09361711615833068, 0.10527816252273692, 0.09576459417454464, 0.10745223941606907, 0.1001279538851626, 0.11678890262266417, 0.0709954073421677, 0.056929712146957856, 0.0815159429830783, 0.17219027509829998, 0.15953446265255822, 0.20885881799808415, 0.1694154149984175, 0.17874555019661498, 0.15343004919901593, 0.17571816358105274, 0.15766414099527226, 0.14539161883969332, 0.1380490516634476, 0.1479028207971793, 0.12889730074532002, 0.15286541310483104, 0.16290618446959182, 0.15593663057005047, 0.15695520565774423, 0.15952871184303052, 0.16143418971677748, 0.15749894301940204, 0.13062871258847986, 0.11639911201236774, 0.11247204015800816, 0.10893689943746176, 0.10510521312893051, 0.10688084230276329, 0.09221559957270276, 0.10171540502867216, 0.22659711914951708, 0.11771697528467684, 0.1667387429008731, 0.07509751237121232, 0.09642497656675064, 0.11223664496738495, 0.2163568046036941, 0.12582785109488848, 0.16795059206363838, 0.18851554819248983, 0.17935565129523223, 0.17607070555710902, 0.19328288241260894, 0.1743783118241239, 0.16763374128482555, 0.1643102790562485, 0.17726498235358268, 0.16736045301797553, 0.04506263776112829, 0.04262619437719628, 0.05277409465859617, 0.06052076373041204, 0.06330993489434822, 0.05736006566428675, 0.05269546355336241, 0.04472700676771779, 0.05553676483816494]}, "mutation_prompt": null}
{"id": "2dc9135d-9572-4120-b8ac-686c2cd5c01a", "solution": "import numpy as np\n\nclass ImprovedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9, de_adaptive_prob=0.5):  # Change: Added de_adaptive_prob\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n        self.de_adaptive_prob = de_adaptive_prob  # Change: Added de_adaptive_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            chaotic_map = lambda x: 4 * x * (1 - x)\n            initial_positions = np.zeros((self.num_particles, self.dim))\n            for i in range(self.num_particles):\n                initial_positions[i] = chaotic_map(np.random.rand(self.dim))\n            return initial_positions\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution with adaptive crossover probability\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < (self.de_cross_prob * (1 - _ / self.budget) + self.de_adaptive_prob * (_ / self.budget))  # Change: Adaptive crossover probability\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Change: Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedDynamicWeightQPSO", "description": "Improve the exploration capability by incorporating a chaotic map for diversity enhancement and population initialization.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "637fcd5f-8dfe-4e98-b640-28eb49563639", "metadata": {"aucs": [0.18985124773795925, 0.1975576278052782, 0.1593119571633007, 0.14625499065371406, 0.1668057911558135, 0.1681085585633687, 0.12985653167941402, 0.11666859636861915, 0.1549661520598149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093607611827078, 0.06534936438083072, 0.051130096193137575, 0.028190014251871287, 0.02080972197843023, 0.042158592188767385, 0.03868354283202047, 0.014309051516046223, 0.015374920740782505, 0.02453499167276807, 0.039257783660923806, 0.035553419885643645, 0.03617111473304335, 0.010573402417242694, 0.01535722310523202, 0.013696937697805889, 0.034651684579038555, 0.03170130200965382, 0.8980394702585041, 0.8700087935614904, 0.8992566681188582, 0.9059813279146051, 0.9395240181237055, 0.9358296705845205, 0.9207845554224644, 0.9373069038844317, 0.9272494441250919, 0.08301676782766809, 0.10734163180738365, 0.03611165275575545, 0.014058744864491546, 0.1379597665278548, 0.03329128406843884, 0.04605623369461265, 0.06982343708249372, 0.027741939554249084, 0.15301215660413925, 0.1659472745970737, 0.14093698491737228, 0.11186925723195162, 0.12362283982957656, 0.07569774210973224, 0.07370349325535752, 0.1582355204155903, 0.09904437880995642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003631687313362386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005003839655451925, 0.08146439975975917, 0.05587894287603212, 0.07647597594428623, 0.10388323905234642, 0.046425087217917604, 0.08003259902628523, 0.06088819285833924, 0.0650291892285868, 0.055579080691495975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009860487024590081, 0.06235407727090436, 0.02950438748227424, 0.058182132403799325, 0.05404889755326325, 0.05690341158219292, 0.010733766757814567, 0.0046405224702457115, 0.013768144357202416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010336883653028428, 9.999999999998899e-05, 0.13400157195361262, 0.13730977970843106, 0.10605986869830031, 0.21950875926857238, 0.175138425086112, 0.13069001544519399, 0.1624482118777283, 0.16996021267691108, 0.27957516048316433, 0.0448422988682311, 0.047381064830787856, 0.037660595819094644, 0.03909017523581193, 0.03534786064067352, 0.027639044696077475, 0.03832607355366613, 0.026034956745910165, 0.009148892291879984, 0.12386880973381054, 0.10194626252624461, 0.1039599227271727, 0.1010382995566359, 0.10889564678141328, 0.12414015309359694, 0.15052575497331633, 0.1038338169799532, 0.11793405876466201, 0.16395778098182723, 0.16641482202982438, 0.12349741400578773, 0.19922589197026874, 0.16614898822282598, 0.18454035300499672, 0.1509108409744655, 0.19792144832905623, 0.15143385121297837, 0.09361711615833068, 0.10527816252273692, 0.09576459417454464, 0.10745223941606907, 0.1001279538851626, 0.11678890262266417, 0.0709954073421677, 0.056929712146957856, 0.0815159429830783, 0.17219027509829998, 0.15953446265255822, 0.20885881799808415, 0.1694154149984175, 0.17874555019661498, 0.15343004919901593, 0.17571816358105274, 0.15766414099527226, 0.14539161883969332, 0.1380490516634476, 0.1479028207971793, 0.12889730074532002, 0.15286541310483104, 0.16290618446959182, 0.15593663057005047, 0.15695520565774423, 0.15952871184303052, 0.16143418971677748, 0.15749894301940204, 0.13062871258847986, 0.11639911201236774, 0.11247204015800816, 0.10893689943746176, 0.10510521312893051, 0.10688084230276329, 0.09221559957270276, 0.10171540502867216, 0.22659711914951708, 0.11771697528467684, 0.1667387429008731, 0.07509751237121232, 0.09642497656675064, 0.11223664496738495, 0.2163568046036941, 0.12582785109488848, 0.16795059206363838, 0.18851554819248983, 0.17935565129523223, 0.17607070555710902, 0.19328288241260894, 0.1743783118241239, 0.16763374128482555, 0.1643102790562485, 0.17726498235358268, 0.16736045301797553, 0.04506263776112829, 0.04262619437719628, 0.05277409465859617, 0.06052076373041204, 0.06330993489434822, 0.05736006566428675, 0.05269546355336241, 0.04472700676771779, 0.05553676483816494]}, "mutation_prompt": null}
{"id": "cab36eca-77ff-4378-80c7-11b603f21289", "solution": "import numpy as np\n\nclass ImprovedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9, de_adaptive_prob=0.5):  # Change: Added de_adaptive_prob\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n        self.de_adaptive_prob = de_adaptive_prob  # Change: Added de_adaptive_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            chaotic_map = lambda x: 4 * x * (1 - x)\n            initial_positions = np.zeros((self.num_particles, self.dim))\n            for i in range(self.num_particles):\n                initial_positions[i] = chaotic_map(np.random.rand(self.dim))\n            return initial_positions\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution with adaptive crossover probability\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < (self.de_cross_prob * (1 - _ / self.budget) + self.de_adaptive_prob * (_ / self.budget))  # Change: Adaptive crossover probability\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Change: Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedDynamicWeightQPSO", "description": "Improve the exploration capability by incorporating a chaotic map for diversity enhancement and population initialization.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "637fcd5f-8dfe-4e98-b640-28eb49563639", "metadata": {"aucs": [0.18985124773795925, 0.1975576278052782, 0.1593119571633007, 0.14625499065371406, 0.1668057911558135, 0.1681085585633687, 0.12985653167941402, 0.11666859636861915, 0.1549661520598149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093607611827078, 0.06534936438083072, 0.051130096193137575, 0.028190014251871287, 0.02080972197843023, 0.042158592188767385, 0.03868354283202047, 0.014309051516046223, 0.015374920740782505, 0.02453499167276807, 0.039257783660923806, 0.035553419885643645, 0.03617111473304335, 0.010573402417242694, 0.01535722310523202, 0.013696937697805889, 0.034651684579038555, 0.03170130200965382, 0.8980394702585041, 0.8700087935614904, 0.8992566681188582, 0.9059813279146051, 0.9395240181237055, 0.9358296705845205, 0.9207845554224644, 0.9373069038844317, 0.9272494441250919, 0.08301676782766809, 0.10734163180738365, 0.03611165275575545, 0.014058744864491546, 0.1379597665278548, 0.03329128406843884, 0.04605623369461265, 0.06982343708249372, 0.027741939554249084, 0.15301215660413925, 0.1659472745970737, 0.14093698491737228, 0.11186925723195162, 0.12362283982957656, 0.07569774210973224, 0.07370349325535752, 0.1582355204155903, 0.09904437880995642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003631687313362386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005003839655451925, 0.08146439975975917, 0.05587894287603212, 0.07647597594428623, 0.10388323905234642, 0.046425087217917604, 0.08003259902628523, 0.06088819285833924, 0.0650291892285868, 0.055579080691495975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009860487024590081, 0.06235407727090436, 0.02950438748227424, 0.058182132403799325, 0.05404889755326325, 0.05690341158219292, 0.010733766757814567, 0.0046405224702457115, 0.013768144357202416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010336883653028428, 9.999999999998899e-05, 0.13400157195361262, 0.13730977970843106, 0.10605986869830031, 0.21950875926857238, 0.175138425086112, 0.13069001544519399, 0.1624482118777283, 0.16996021267691108, 0.27957516048316433, 0.0448422988682311, 0.047381064830787856, 0.037660595819094644, 0.03909017523581193, 0.03534786064067352, 0.027639044696077475, 0.03832607355366613, 0.026034956745910165, 0.009148892291879984, 0.12386880973381054, 0.10194626252624461, 0.1039599227271727, 0.1010382995566359, 0.10889564678141328, 0.12414015309359694, 0.15052575497331633, 0.1038338169799532, 0.11793405876466201, 0.16395778098182723, 0.16641482202982438, 0.12349741400578773, 0.19922589197026874, 0.16614898822282598, 0.18454035300499672, 0.1509108409744655, 0.19792144832905623, 0.15143385121297837, 0.09361711615833068, 0.10527816252273692, 0.09576459417454464, 0.10745223941606907, 0.1001279538851626, 0.11678890262266417, 0.0709954073421677, 0.056929712146957856, 0.0815159429830783, 0.17219027509829998, 0.15953446265255822, 0.20885881799808415, 0.1694154149984175, 0.17874555019661498, 0.15343004919901593, 0.17571816358105274, 0.15766414099527226, 0.14539161883969332, 0.1380490516634476, 0.1479028207971793, 0.12889730074532002, 0.15286541310483104, 0.16290618446959182, 0.15593663057005047, 0.15695520565774423, 0.15952871184303052, 0.16143418971677748, 0.15749894301940204, 0.13062871258847986, 0.11639911201236774, 0.11247204015800816, 0.10893689943746176, 0.10510521312893051, 0.10688084230276329, 0.09221559957270276, 0.10171540502867216, 0.22659711914951708, 0.11771697528467684, 0.1667387429008731, 0.07509751237121232, 0.09642497656675064, 0.11223664496738495, 0.2163568046036941, 0.12582785109488848, 0.16795059206363838, 0.18851554819248983, 0.17935565129523223, 0.17607070555710902, 0.19328288241260894, 0.1743783118241239, 0.16763374128482555, 0.1643102790562485, 0.17726498235358268, 0.16736045301797553, 0.04506263776112829, 0.04262619437719628, 0.05277409465859617, 0.06052076373041204, 0.06330993489434822, 0.05736006566428675, 0.05269546355336241, 0.04472700676771779, 0.05553676483816494]}, "mutation_prompt": null}
{"id": "e4062e4a-56c8-427d-9bbc-fe71b5553b75", "solution": "import numpy as np\n\nclass ImprovedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9, de_adaptive_prob=0.5):  # Change: Added de_adaptive_prob\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n        self.de_adaptive_prob = de_adaptive_prob  # Change: Added de_adaptive_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            chaotic_map = lambda x: 4 * x * (1 - x)\n            initial_positions = np.zeros((self.num_particles, self.dim))\n            for i in range(self.num_particles):\n                initial_positions[i] = chaotic_map(np.random.rand(self.dim))\n            return initial_positions\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution with adaptive crossover probability\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < (self.de_cross_prob * (1 - _ / self.budget) + self.de_adaptive_prob * (_ / self.budget))  # Change: Adaptive crossover probability\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Change: Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedDynamicWeightQPSO", "description": "Improve the exploration capability by incorporating a chaotic map for diversity enhancement and population initialization.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "637fcd5f-8dfe-4e98-b640-28eb49563639", "metadata": {"aucs": [0.18985124773795925, 0.1975576278052782, 0.1593119571633007, 0.14625499065371406, 0.1668057911558135, 0.1681085585633687, 0.12985653167941402, 0.11666859636861915, 0.1549661520598149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093607611827078, 0.06534936438083072, 0.051130096193137575, 0.028190014251871287, 0.02080972197843023, 0.042158592188767385, 0.03868354283202047, 0.014309051516046223, 0.015374920740782505, 0.02453499167276807, 0.039257783660923806, 0.035553419885643645, 0.03617111473304335, 0.010573402417242694, 0.01535722310523202, 0.013696937697805889, 0.034651684579038555, 0.03170130200965382, 0.8980394702585041, 0.8700087935614904, 0.8992566681188582, 0.9059813279146051, 0.9395240181237055, 0.9358296705845205, 0.9207845554224644, 0.9373069038844317, 0.9272494441250919, 0.08301676782766809, 0.10734163180738365, 0.03611165275575545, 0.014058744864491546, 0.1379597665278548, 0.03329128406843884, 0.04605623369461265, 0.06982343708249372, 0.027741939554249084, 0.15301215660413925, 0.1659472745970737, 0.14093698491737228, 0.11186925723195162, 0.12362283982957656, 0.07569774210973224, 0.07370349325535752, 0.1582355204155903, 0.09904437880995642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003631687313362386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005003839655451925, 0.08146439975975917, 0.05587894287603212, 0.07647597594428623, 0.10388323905234642, 0.046425087217917604, 0.08003259902628523, 0.06088819285833924, 0.0650291892285868, 0.055579080691495975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009860487024590081, 0.06235407727090436, 0.02950438748227424, 0.058182132403799325, 0.05404889755326325, 0.05690341158219292, 0.010733766757814567, 0.0046405224702457115, 0.013768144357202416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010336883653028428, 9.999999999998899e-05, 0.13400157195361262, 0.13730977970843106, 0.10605986869830031, 0.21950875926857238, 0.175138425086112, 0.13069001544519399, 0.1624482118777283, 0.16996021267691108, 0.27957516048316433, 0.0448422988682311, 0.047381064830787856, 0.037660595819094644, 0.03909017523581193, 0.03534786064067352, 0.027639044696077475, 0.03832607355366613, 0.026034956745910165, 0.009148892291879984, 0.12386880973381054, 0.10194626252624461, 0.1039599227271727, 0.1010382995566359, 0.10889564678141328, 0.12414015309359694, 0.15052575497331633, 0.1038338169799532, 0.11793405876466201, 0.16395778098182723, 0.16641482202982438, 0.12349741400578773, 0.19922589197026874, 0.16614898822282598, 0.18454035300499672, 0.1509108409744655, 0.19792144832905623, 0.15143385121297837, 0.09361711615833068, 0.10527816252273692, 0.09576459417454464, 0.10745223941606907, 0.1001279538851626, 0.11678890262266417, 0.0709954073421677, 0.056929712146957856, 0.0815159429830783, 0.17219027509829998, 0.15953446265255822, 0.20885881799808415, 0.1694154149984175, 0.17874555019661498, 0.15343004919901593, 0.17571816358105274, 0.15766414099527226, 0.14539161883969332, 0.1380490516634476, 0.1479028207971793, 0.12889730074532002, 0.15286541310483104, 0.16290618446959182, 0.15593663057005047, 0.15695520565774423, 0.15952871184303052, 0.16143418971677748, 0.15749894301940204, 0.13062871258847986, 0.11639911201236774, 0.11247204015800816, 0.10893689943746176, 0.10510521312893051, 0.10688084230276329, 0.09221559957270276, 0.10171540502867216, 0.22659711914951708, 0.11771697528467684, 0.1667387429008731, 0.07509751237121232, 0.09642497656675064, 0.11223664496738495, 0.2163568046036941, 0.12582785109488848, 0.16795059206363838, 0.18851554819248983, 0.17935565129523223, 0.17607070555710902, 0.19328288241260894, 0.1743783118241239, 0.16763374128482555, 0.1643102790562485, 0.17726498235358268, 0.16736045301797553, 0.04506263776112829, 0.04262619437719628, 0.05277409465859617, 0.06052076373041204, 0.06330993489434822, 0.05736006566428675, 0.05269546355336241, 0.04472700676771779, 0.05553676483816494]}, "mutation_prompt": null}
{"id": "95a0ac20-dafa-4dfa-b562-89e87c4a696e", "solution": "import numpy as np\n\nclass ImprovedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9, de_adaptive_prob=0.5):  # Change: Added de_adaptive_prob\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n        self.de_adaptive_prob = de_adaptive_prob  # Change: Added de_adaptive_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            chaotic_map = lambda x: 4 * x * (1 - x)\n            initial_positions = np.zeros((self.num_particles, self.dim))\n            for i in range(self.num_particles):\n                initial_positions[i] = chaotic_map(np.random.rand(self.dim))\n            return initial_positions\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution with adaptive crossover probability\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < (self.de_cross_prob * (1 - _ / self.budget) + self.de_adaptive_prob * (_ / self.budget))  # Change: Adaptive crossover probability\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Change: Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedDynamicWeightQPSO", "description": "Improve the exploration capability by incorporating a chaotic map for diversity enhancement and population initialization.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "637fcd5f-8dfe-4e98-b640-28eb49563639", "metadata": {"aucs": [0.18985124773795925, 0.1975576278052782, 0.1593119571633007, 0.14625499065371406, 0.1668057911558135, 0.1681085585633687, 0.12985653167941402, 0.11666859636861915, 0.1549661520598149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093607611827078, 0.06534936438083072, 0.051130096193137575, 0.028190014251871287, 0.02080972197843023, 0.042158592188767385, 0.03868354283202047, 0.014309051516046223, 0.015374920740782505, 0.02453499167276807, 0.039257783660923806, 0.035553419885643645, 0.03617111473304335, 0.010573402417242694, 0.01535722310523202, 0.013696937697805889, 0.034651684579038555, 0.03170130200965382, 0.8980394702585041, 0.8700087935614904, 0.8992566681188582, 0.9059813279146051, 0.9395240181237055, 0.9358296705845205, 0.9207845554224644, 0.9373069038844317, 0.9272494441250919, 0.08301676782766809, 0.10734163180738365, 0.03611165275575545, 0.014058744864491546, 0.1379597665278548, 0.03329128406843884, 0.04605623369461265, 0.06982343708249372, 0.027741939554249084, 0.15301215660413925, 0.1659472745970737, 0.14093698491737228, 0.11186925723195162, 0.12362283982957656, 0.07569774210973224, 0.07370349325535752, 0.1582355204155903, 0.09904437880995642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003631687313362386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005003839655451925, 0.08146439975975917, 0.05587894287603212, 0.07647597594428623, 0.10388323905234642, 0.046425087217917604, 0.08003259902628523, 0.06088819285833924, 0.0650291892285868, 0.055579080691495975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009860487024590081, 0.06235407727090436, 0.02950438748227424, 0.058182132403799325, 0.05404889755326325, 0.05690341158219292, 0.010733766757814567, 0.0046405224702457115, 0.013768144357202416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010336883653028428, 9.999999999998899e-05, 0.13400157195361262, 0.13730977970843106, 0.10605986869830031, 0.21950875926857238, 0.175138425086112, 0.13069001544519399, 0.1624482118777283, 0.16996021267691108, 0.27957516048316433, 0.0448422988682311, 0.047381064830787856, 0.037660595819094644, 0.03909017523581193, 0.03534786064067352, 0.027639044696077475, 0.03832607355366613, 0.026034956745910165, 0.009148892291879984, 0.12386880973381054, 0.10194626252624461, 0.1039599227271727, 0.1010382995566359, 0.10889564678141328, 0.12414015309359694, 0.15052575497331633, 0.1038338169799532, 0.11793405876466201, 0.16395778098182723, 0.16641482202982438, 0.12349741400578773, 0.19922589197026874, 0.16614898822282598, 0.18454035300499672, 0.1509108409744655, 0.19792144832905623, 0.15143385121297837, 0.09361711615833068, 0.10527816252273692, 0.09576459417454464, 0.10745223941606907, 0.1001279538851626, 0.11678890262266417, 0.0709954073421677, 0.056929712146957856, 0.0815159429830783, 0.17219027509829998, 0.15953446265255822, 0.20885881799808415, 0.1694154149984175, 0.17874555019661498, 0.15343004919901593, 0.17571816358105274, 0.15766414099527226, 0.14539161883969332, 0.1380490516634476, 0.1479028207971793, 0.12889730074532002, 0.15286541310483104, 0.16290618446959182, 0.15593663057005047, 0.15695520565774423, 0.15952871184303052, 0.16143418971677748, 0.15749894301940204, 0.13062871258847986, 0.11639911201236774, 0.11247204015800816, 0.10893689943746176, 0.10510521312893051, 0.10688084230276329, 0.09221559957270276, 0.10171540502867216, 0.22659711914951708, 0.11771697528467684, 0.1667387429008731, 0.07509751237121232, 0.09642497656675064, 0.11223664496738495, 0.2163568046036941, 0.12582785109488848, 0.16795059206363838, 0.18851554819248983, 0.17935565129523223, 0.17607070555710902, 0.19328288241260894, 0.1743783118241239, 0.16763374128482555, 0.1643102790562485, 0.17726498235358268, 0.16736045301797553, 0.04506263776112829, 0.04262619437719628, 0.05277409465859617, 0.06052076373041204, 0.06330993489434822, 0.05736006566428675, 0.05269546355336241, 0.04472700676771779, 0.05553676483816494]}, "mutation_prompt": null}
{"id": "94b89682-9df2-4888-9107-fce63a1aa214", "solution": "import numpy as np\n\nclass ImprovedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9, de_adaptive_prob=0.5):  # Change: Added de_adaptive_prob\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n        self.de_adaptive_prob = de_adaptive_prob  # Change: Added de_adaptive_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            chaotic_map = lambda x: 4 * x * (1 - x)\n            initial_positions = np.zeros((self.num_particles, self.dim))\n            for i in range(self.num_particles):\n                initial_positions[i] = chaotic_map(np.random.rand(self.dim))\n            return initial_positions\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution with adaptive crossover probability\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < (self.de_cross_prob * (1 - _ / self.budget) + self.de_adaptive_prob * (_ / self.budget))  # Change: Adaptive crossover probability\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Change: Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedDynamicWeightQPSO", "description": "Improve the exploration capability by incorporating a chaotic map for diversity enhancement and population initialization.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "637fcd5f-8dfe-4e98-b640-28eb49563639", "metadata": {"aucs": [0.18985124773795925, 0.1975576278052782, 0.1593119571633007, 0.14625499065371406, 0.1668057911558135, 0.1681085585633687, 0.12985653167941402, 0.11666859636861915, 0.1549661520598149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093607611827078, 0.06534936438083072, 0.051130096193137575, 0.028190014251871287, 0.02080972197843023, 0.042158592188767385, 0.03868354283202047, 0.014309051516046223, 0.015374920740782505, 0.02453499167276807, 0.039257783660923806, 0.035553419885643645, 0.03617111473304335, 0.010573402417242694, 0.01535722310523202, 0.013696937697805889, 0.034651684579038555, 0.03170130200965382, 0.8980394702585041, 0.8700087935614904, 0.8992566681188582, 0.9059813279146051, 0.9395240181237055, 0.9358296705845205, 0.9207845554224644, 0.9373069038844317, 0.9272494441250919, 0.08301676782766809, 0.10734163180738365, 0.03611165275575545, 0.014058744864491546, 0.1379597665278548, 0.03329128406843884, 0.04605623369461265, 0.06982343708249372, 0.027741939554249084, 0.15301215660413925, 0.1659472745970737, 0.14093698491737228, 0.11186925723195162, 0.12362283982957656, 0.07569774210973224, 0.07370349325535752, 0.1582355204155903, 0.09904437880995642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003631687313362386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005003839655451925, 0.08146439975975917, 0.05587894287603212, 0.07647597594428623, 0.10388323905234642, 0.046425087217917604, 0.08003259902628523, 0.06088819285833924, 0.0650291892285868, 0.055579080691495975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009860487024590081, 0.06235407727090436, 0.02950438748227424, 0.058182132403799325, 0.05404889755326325, 0.05690341158219292, 0.010733766757814567, 0.0046405224702457115, 0.013768144357202416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010336883653028428, 9.999999999998899e-05, 0.13400157195361262, 0.13730977970843106, 0.10605986869830031, 0.21950875926857238, 0.175138425086112, 0.13069001544519399, 0.1624482118777283, 0.16996021267691108, 0.27957516048316433, 0.0448422988682311, 0.047381064830787856, 0.037660595819094644, 0.03909017523581193, 0.03534786064067352, 0.027639044696077475, 0.03832607355366613, 0.026034956745910165, 0.009148892291879984, 0.12386880973381054, 0.10194626252624461, 0.1039599227271727, 0.1010382995566359, 0.10889564678141328, 0.12414015309359694, 0.15052575497331633, 0.1038338169799532, 0.11793405876466201, 0.16395778098182723, 0.16641482202982438, 0.12349741400578773, 0.19922589197026874, 0.16614898822282598, 0.18454035300499672, 0.1509108409744655, 0.19792144832905623, 0.15143385121297837, 0.09361711615833068, 0.10527816252273692, 0.09576459417454464, 0.10745223941606907, 0.1001279538851626, 0.11678890262266417, 0.0709954073421677, 0.056929712146957856, 0.0815159429830783, 0.17219027509829998, 0.15953446265255822, 0.20885881799808415, 0.1694154149984175, 0.17874555019661498, 0.15343004919901593, 0.17571816358105274, 0.15766414099527226, 0.14539161883969332, 0.1380490516634476, 0.1479028207971793, 0.12889730074532002, 0.15286541310483104, 0.16290618446959182, 0.15593663057005047, 0.15695520565774423, 0.15952871184303052, 0.16143418971677748, 0.15749894301940204, 0.13062871258847986, 0.11639911201236774, 0.11247204015800816, 0.10893689943746176, 0.10510521312893051, 0.10688084230276329, 0.09221559957270276, 0.10171540502867216, 0.22659711914951708, 0.11771697528467684, 0.1667387429008731, 0.07509751237121232, 0.09642497656675064, 0.11223664496738495, 0.2163568046036941, 0.12582785109488848, 0.16795059206363838, 0.18851554819248983, 0.17935565129523223, 0.17607070555710902, 0.19328288241260894, 0.1743783118241239, 0.16763374128482555, 0.1643102790562485, 0.17726498235358268, 0.16736045301797553, 0.04506263776112829, 0.04262619437719628, 0.05277409465859617, 0.06052076373041204, 0.06330993489434822, 0.05736006566428675, 0.05269546355336241, 0.04472700676771779, 0.05553676483816494]}, "mutation_prompt": null}
{"id": "5e0b2513-48a9-4d28-b0ce-0cf046ea2547", "solution": "import numpy as np\n\nclass ImprovedDynamicWeightQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.9, cognitive_weight=2.0, social_weight=2.0, mutation_rate=0.1, de_weight=0.5, de_cross_prob=0.9, de_adaptive_prob=0.5):  # Change: Added de_adaptive_prob\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n        self.de_weight = de_weight\n        self.de_cross_prob = de_cross_prob\n        self.de_adaptive_prob = de_adaptive_prob  # Change: Added de_adaptive_prob\n\n    def __call__(self, func):\n        def initialize_particles():\n            chaotic_map = lambda x: 4 * x * (1 - x)\n            initial_positions = np.zeros((self.num_particles, self.dim))\n            for i in range(self.num_particles):\n                initial_positions[i] = chaotic_map(np.random.rand(self.dim))\n            return initial_positions\n\n        def update_position(particles, velocities):\n            return np.clip(particles + velocities, -5.0, 5.0)\n\n        def evaluate_fitness(particles):\n            return np.array([func(p) for p in particles])\n\n        particles = initialize_particles()\n        best_global_position = particles[np.argmin(evaluate_fitness(particles))]\n        velocities = np.zeros_like(particles)\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                rand1 = np.random.rand(self.dim)\n                rand2 = np.random.rand(self.dim)\n                adaptive_inertia = self.inertia_weight - (self.inertia_weight / self.budget) * _\n                performance_ratio = func(best_global_position) / func(particles[i])\n                dynamic_cognitive_weight = self.cognitive_weight * performance_ratio\n                dynamic_social_weight = self.social_weight * performance_ratio\n\n                # Introduce Levy flight behavior\n                levy_flight = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                velocities[i] = adaptive_inertia * velocities[i] + \\\n                                dynamic_cognitive_weight * rand1 * (best_global_position - particles[i]) + \\\n                                dynamic_social_weight * rand2 * (best_global_position - particles[i]) + 0.01 * levy_flight\n                                \n                # Introduce differential evolution with adaptive crossover probability\n                r1, r2, r3 = np.random.choice(range(self.num_particles), 3, replace=False)\n                diff_vector = particles[r2] - particles[r3]\n                mutated_vector = particles[i] + self.de_weight * diff_vector\n                crossover_mask = np.random.rand(self.dim) < (self.de_cross_prob * (1 - _ / self.budget) + self.de_adaptive_prob * (_ / self.budget))  # Change: Adaptive crossover probability\n                trial_vector = np.where(crossover_mask, mutated_vector, particles[i])\n                if func(trial_vector) < func(particles[i]):\n                    particles[i] = trial_vector\n\n                particles[i] = update_position(particles[i], velocities[i])\n\n                # Mutation operator with dynamic mutation rate adjustment\n                improvement_ratio = func(particles[i]) / func(best_global_position)\n                self.mutation_rate = max(0.1, min(self.mutation_rate * (1 + improvement_ratio), 0.9)) if improvement_ratio > 1 else self.mutation_rate\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] += np.random.uniform(-0.5, 0.5, self.dim)\n\n            fitness_values = evaluate_fitness(particles)\n            best_particle_index = np.argmin(fitness_values)\n            if fitness_values[best_particle_index] < func(best_global_position):\n                best_global_position = particles[best_particle_index]\n        \n        if _ % 10 == 0 and _ != 0:\n            self.num_particles = int(self.num_particles * 1.1)  # Change: Increase particle number dynamically every 10 iterations\n\n        return best_global_position", "name": "ImprovedDynamicWeightQPSO", "description": "Improve the exploration capability by incorporating a chaotic map for diversity enhancement and population initialization.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "637fcd5f-8dfe-4e98-b640-28eb49563639", "metadata": {"aucs": [0.18985124773795925, 0.1975576278052782, 0.1593119571633007, 0.14625499065371406, 0.1668057911558135, 0.1681085585633687, 0.12985653167941402, 0.11666859636861915, 0.1549661520598149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05093607611827078, 0.06534936438083072, 0.051130096193137575, 0.028190014251871287, 0.02080972197843023, 0.042158592188767385, 0.03868354283202047, 0.014309051516046223, 0.015374920740782505, 0.02453499167276807, 0.039257783660923806, 0.035553419885643645, 0.03617111473304335, 0.010573402417242694, 0.01535722310523202, 0.013696937697805889, 0.034651684579038555, 0.03170130200965382, 0.8980394702585041, 0.8700087935614904, 0.8992566681188582, 0.9059813279146051, 0.9395240181237055, 0.9358296705845205, 0.9207845554224644, 0.9373069038844317, 0.9272494441250919, 0.08301676782766809, 0.10734163180738365, 0.03611165275575545, 0.014058744864491546, 0.1379597665278548, 0.03329128406843884, 0.04605623369461265, 0.06982343708249372, 0.027741939554249084, 0.15301215660413925, 0.1659472745970737, 0.14093698491737228, 0.11186925723195162, 0.12362283982957656, 0.07569774210973224, 0.07370349325535752, 0.1582355204155903, 0.09904437880995642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003631687313362386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005003839655451925, 0.08146439975975917, 0.05587894287603212, 0.07647597594428623, 0.10388323905234642, 0.046425087217917604, 0.08003259902628523, 0.06088819285833924, 0.0650291892285868, 0.055579080691495975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009860487024590081, 0.06235407727090436, 0.02950438748227424, 0.058182132403799325, 0.05404889755326325, 0.05690341158219292, 0.010733766757814567, 0.0046405224702457115, 0.013768144357202416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010336883653028428, 9.999999999998899e-05, 0.13400157195361262, 0.13730977970843106, 0.10605986869830031, 0.21950875926857238, 0.175138425086112, 0.13069001544519399, 0.1624482118777283, 0.16996021267691108, 0.27957516048316433, 0.0448422988682311, 0.047381064830787856, 0.037660595819094644, 0.03909017523581193, 0.03534786064067352, 0.027639044696077475, 0.03832607355366613, 0.026034956745910165, 0.009148892291879984, 0.12386880973381054, 0.10194626252624461, 0.1039599227271727, 0.1010382995566359, 0.10889564678141328, 0.12414015309359694, 0.15052575497331633, 0.1038338169799532, 0.11793405876466201, 0.16395778098182723, 0.16641482202982438, 0.12349741400578773, 0.19922589197026874, 0.16614898822282598, 0.18454035300499672, 0.1509108409744655, 0.19792144832905623, 0.15143385121297837, 0.09361711615833068, 0.10527816252273692, 0.09576459417454464, 0.10745223941606907, 0.1001279538851626, 0.11678890262266417, 0.0709954073421677, 0.056929712146957856, 0.0815159429830783, 0.17219027509829998, 0.15953446265255822, 0.20885881799808415, 0.1694154149984175, 0.17874555019661498, 0.15343004919901593, 0.17571816358105274, 0.15766414099527226, 0.14539161883969332, 0.1380490516634476, 0.1479028207971793, 0.12889730074532002, 0.15286541310483104, 0.16290618446959182, 0.15593663057005047, 0.15695520565774423, 0.15952871184303052, 0.16143418971677748, 0.15749894301940204, 0.13062871258847986, 0.11639911201236774, 0.11247204015800816, 0.10893689943746176, 0.10510521312893051, 0.10688084230276329, 0.09221559957270276, 0.10171540502867216, 0.22659711914951708, 0.11771697528467684, 0.1667387429008731, 0.07509751237121232, 0.09642497656675064, 0.11223664496738495, 0.2163568046036941, 0.12582785109488848, 0.16795059206363838, 0.18851554819248983, 0.17935565129523223, 0.17607070555710902, 0.19328288241260894, 0.1743783118241239, 0.16763374128482555, 0.1643102790562485, 0.17726498235358268, 0.16736045301797553, 0.04506263776112829, 0.04262619437719628, 0.05277409465859617, 0.06052076373041204, 0.06330993489434822, 0.05736006566428675, 0.05269546355336241, 0.04472700676771779, 0.05553676483816494]}, "mutation_prompt": null}
