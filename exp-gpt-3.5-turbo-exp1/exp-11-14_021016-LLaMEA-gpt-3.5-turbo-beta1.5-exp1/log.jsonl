{"id": "785032f1-46e7-4e60-8b08-69123fc925e2", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 0, "fitness": 0.08405074326702745, "feedback": "The algorithm FireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "a70daae7-5aea-4e20-9b6a-c3e11977a594", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "5d621af3-5775-4351-a2f6-02b816b65650", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                    else:\n                        step = 0.1 * np.random.standard_cauchy(self.dim) / np.abs(np.random.normal(0, 1, self.dim))  # Levy flight step\n                        new_population[i] += step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for improved exploration capability", "configspace": "", "generation": 2, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "09245bd3-41f1-4885-9489-b7a80d59b9e6", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        de_vector = np.random.choice(self.population, 3, replace=False)  # Differential evolution strategy\n                        mutant_vector = de_vector[0] + 0.5 * (de_vector[1] - de_vector[2])\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(mutant_vector - self.population[i]) ** 2) * (mutant_vector - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating differential evolution strategy for better exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {}, "mutation_prompt": null}
{"id": "19968c7d-d334-4c1d-9d4f-0ed697699e65", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                        levy = 0.01 * np.random.standard_cauchy(self.dim)\n                        new_population[i] += step + levy\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for improved exploration capability.", "configspace": "", "generation": 4, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "62d20dce-0362-4a99-9270-34bb541893c8", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "4f468ea6-e628-4085-844f-2292ad738056", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_alpha = 0.5 + 0.5 * np.exp(-0.01 * _)\n                        new_beta = 0.2 + 0.5 * np.exp(-0.005 * _)\n                        new_population[i] += new_alpha * np.exp(-new_beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Improved Firefly Algorithm with dynamic alpha and beta values for better convergence speed.", "configspace": "", "generation": 6, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "f414e151-f4de-4779-bd13-f11d93a86273", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = levy_flight(self.dim)\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Improve the Firefly Algorithm by introducing Levy flights for enhanced exploration capability.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {}, "mutation_prompt": null}
{"id": "ce284d0f-4343-4fe7-8e29-cef8c34ea8e6", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "8daa16ce-7844-4a83-91a9-35c4bb7295d8", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def levy_flight(self):\n        return np.random.standard_cauchy(size=self.dim) / (np.random.randn() ** (1 / self.dim))\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * self.levy_flight()\n                        new_population[i] += step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing the Firefly Algorithm by incorporating Levy flight for improved exploration capabilities.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: UFuncTypeError(<ufunc 'add'>, 'same_kind', dtype('complex128'), dtype('float64'), 2).", "error": "UFuncTypeError(<ufunc 'add'>, 'same_kind', dtype('complex128'), dtype('float64'), 2)", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {}, "mutation_prompt": null}
{"id": "376e90d8-9f78-47a3-a027-aff00927a270", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5, delta=0.1):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                step_size = delta * np.random.uniform(0, 1, self.dim)  # Dynamic step size adjustment\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * step_size\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm with Dynamic Step Size Adjustment for Improved Convergence Speed", "configspace": "", "generation": 10, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "351d1260-982c-48ff-a198-ff3c1f1ceff4", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                    else:\n                        step = 0.1 * np.random.standard_cauchy(self.dim) / np.abs(np.random.standard_cauchy(self.dim))  # Levy flight\n                    new_population[i] += step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for more exploratory behavior.", "configspace": "", "generation": 11, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "7d3bc2e9-8eae-49e9-bf34-1f9025895aac", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "3e39c140-5a28-41d1-a72a-0d16e2d794b9", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "f0de3771-899e-4201-a8b7-5a85181aaaed", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j, iter_num, max_iter):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r) * np.exp(-iter_num / max_iter)\n\n        def move_fireflies(iter_num, max_iter):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                alpha = 1.0 - iter_num / max_iter\n                beta = 1.0 - iter_num / max_iter\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        max_iterations = self.budget\n        for iter_num in range(max_iterations):\n            move_fireflies(iter_num, max_iterations)\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Refining the Firefly Algorithm by incorporating dynamic alpha and beta values based on the iteration progress to balance exploration and exploitation.", "configspace": "", "generation": 14, "fitness": 0.08405074326702745, "feedback": "The algorithm FireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "93287f2b-9185-4bc0-8fdc-25111ebd0668", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def levy_flight(self, size):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1 / beta))\n        return step\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = self.levy_flight(self.dim)\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for better exploration abilities.", "configspace": "", "generation": 15, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "d9e08f9c-ef0b-4b25-afa1-44d0e2b33c80", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "716e5bb6-f7e8-4a28-8ed7-ef2b160498e8", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    step_size = 1 / np.sqrt(1 + func(self.population[j]) - func(self.population[i]))\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * step_size * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing the Firefly Algorithm by incorporating a dynamic step size adaptation for better exploration-exploitation balance.", "configspace": "", "generation": 17, "fitness": 0.07680953919919604, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16582051940414877, 0.17063305154347475, 0.14815066319962822, 0.15288236216478068, 0.15318508617387727, 0.1512567461850165, 0.15704350754320007, 0.12860770211182282, 0.14311848788770587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02997815034030904, 0.04096358948928647, 0.02625527030442698, 0.026377336091624737, 0.03268773106601197, 0.03507737820092627, 0.037864664327806, 0.048169894321108186, 0.03762930856033675, 0.018146937888304127, 0.014425866936901177, 0.025420424280138798, 0.019558739375321377, 0.025095824075418216, 0.03811712165616521, 0.03182211783252564, 0.02085754985108601, 0.024413707972539167, 0.0628230900097898, 0.06651182922114696, 0.06961946808995068, 0.07346660923188086, 0.07894568964531223, 0.06969139250838363, 0.0763765957612974, 0.07210479109157109, 0.07645820548923077, 0.0626914332218026, 0.06327076179471247, 0.09716623694220539, 0.044265489468351404, 0.06033227796587748, 0.029143280230529478, 0.08404204651744895, 0.03162888828679278, 0.08572936426242073, 0.11450156786864352, 0.1817606692902246, 0.13208931535449442, 0.08554317505261078, 0.0805873284401688, 0.10650062629974433, 0.07777260224519256, 0.1026940360871853, 0.09859027551816579, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010633944506435733, 9.999999999998899e-05, 0.03737511484647438, 9.999999999998899e-05, 9.999999999998899e-05, 0.031468020241120165, 0.00468940999317724, 0.01702036437924037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01176778739971962, 0.060858898455657284, 0.03996727143155132, 0.04232893816224348, 0.020212551836688353, 0.026477389000538643, 9.999999999998899e-05, 0.028263388684621304, 0.01011466827905183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1994750047595676, 0.18602854912197764, 0.17477250473055406, 0.1971153879215678, 0.17148641669823228, 0.18690170956677843, 0.1912443747932957, 0.1528504924419496, 0.17896239111288725, 0.025290389409548197, 0.034407346346182255, 0.021727052136341296, 0.032340557442174234, 0.02920809893923837, 0.03609353097434653, 0.028882032464026652, 0.02540939438869405, 0.0403856258487022, 0.13426306816038613, 0.11225677118169919, 0.11772454667209475, 0.13754178115997706, 0.13524029266089233, 0.10817697289446793, 0.1436844945616398, 0.13668045512765603, 0.11307858371889523, 0.1580047207171532, 0.1471152314983123, 0.1661219198879753, 0.1541610143478056, 0.14900048738357763, 0.16048129449454884, 0.14719531171302702, 0.1734070820922622, 0.13599536170374793, 0.09674544729706103, 0.08543877479648676, 0.10519570517332633, 0.09305052828848626, 0.11064976748977728, 0.09951448671849705, 0.09526358087982756, 0.12180258075438521, 0.10424744704877653, 0.12899572023248496, 0.1389236510520574, 0.1385539084750752, 0.14541402750175603, 0.12755967633639864, 0.14706722275263096, 0.13964020070391503, 0.13245293788307722, 0.16381574359923867, 0.10971861625287316, 0.1331917346448569, 0.12106622841241244, 0.11379560687826984, 0.12987177995675225, 0.13378344205402715, 0.10370390153333553, 0.12275209296700818, 0.15731858043976898, 0.12108232985296563, 0.15733869994259697, 0.1548562777231054, 0.14842480418741144, 0.1275755706985976, 0.11472608795759676, 0.13832872544733532, 0.13497112004940937, 0.15096359432042095, 0.13178389635079313, 0.12206198279351921, 0.11997667537482615, 0.1165568664258726, 0.10554956080853939, 0.12587811113203862, 0.1567057767973361, 0.14678515352216293, 0.1068284201994949, 0.16192585306121166, 0.18241962367012476, 0.16517538924265995, 0.17912395058209518, 0.1961814526991038, 0.16503142321951325, 0.16950684377865743, 0.17067127406271376, 0.1971857840064808, 0.0385210182225495, 0.04551084318247245, 0.06026448862011824, 0.047430459535355074, 0.05740862876013175, 0.04472065535678682, 0.06553417798920069, 0.04950840117467292, 0.03805837518818711]}, "mutation_prompt": null}
{"id": "dc670b2b-75f0-4223-96f5-efb088840f99", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_step_size = self.step_size / np.sqrt(_+1)\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) * new_step_size + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by introducing an adaptive step size control mechanism to dynamically adjust the exploration and exploitation balance during the optimization process.", "configspace": "", "generation": 18, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "24633dcf-a28d-414a-8125-a12c2a3e467a", "solution": "import numpy as np\n\nclass RefinedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                        levy = 0.01 * np.random.standard_cauchy(self.dim)\n                        new_population[i] += step + levy\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "RefinedFireflyAlgorithm", "description": "Refining Firefly Algorithm by introducing Levy flights for enhanced exploration capability.", "configspace": "", "generation": 19, "fitness": 0.08405074326702745, "feedback": "The algorithm RefinedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "304712e6-98c8-4a08-b6de-c6d6b361786d", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def levy_flight(self):\n        sigma = (np.math.gamma(1 + 1.5) * np.sin(np.pi * 1.5 / 2) / (np.math.gamma((1 + 1.5) / 2) * 1.5 * 2 ** ((1 - 1.5) / 2))) ** (1 / 1.5)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / abs(v) ** (1 / 1.5)\n        return 0.01 * step\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * self.levy_flight()\n                        new_population[i] += step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for improved exploration capability.", "configspace": "", "generation": 20, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "ea6d11a7-b5a0-41ee-8106-19f1e18d3a1c", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm(FireflyAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.attractiveness_scaling = 1.0\n\n    def __call__(self, func):\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        attractiveness_value = self.attractiveness(i, j)\n                        new_population[i] += alpha * attractiveness_value * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = self.initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n            self.attractiveness_scaling = 1.0 - (_ / self.budget)  # Adaptive attractiveness scaling\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Improving Firefly Algorithm by incorporating adaptive attractiveness scaling for better convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedFireflyAlgorithm' object has no attribute 'initialize_population'\").", "error": "AttributeError(\"'ImprovedFireflyAlgorithm' object has no attribute 'initialize_population'\")", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {}, "mutation_prompt": null}
{"id": "74720a09-2cda-4ad2-b4bf-472a943c33ae", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step_size = 1.0 / (1 + np.exp(-np.linalg.norm(self.population[j] - self.population[i])))\n                        new_population[i] += alpha * step_size * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Improved Firefly Algorithm with adaptive step size for better exploration-exploitation balance.", "configspace": "", "generation": 22, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "55e495e1-be2f-4cc2-8341-cc302c8c1011", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            step_size = 1 / np.sqrt(1 + func_counter)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * step_size * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        func_counter = 0\n        for _ in range(self.budget):\n            move_fireflies()\n            func_counter += 1\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Implementing dynamic step size adaptation for Firefly Algorithm to enhance exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "c78989be-b5c2-46bd-9201-7ca1379c7dc2", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            \n            return new_population\n        \n        self.population = initialize_population()\n        for _ in range(self.budget):\n            new_population = move_fireflies()\n            if func(min(new_population, key=lambda x: func(x))) < func(min(self.population, key=lambda x: func(x))):\n                self.population = new_population\n            else:\n                self.population = initialize_population()  # Random restart to escape local optima\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by introducing random restarts to escape local optima.", "configspace": "", "generation": 24, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "1badbdd7-e817-42af-9cf6-f010c83f45df", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "9f49fc25-3941-4a9e-a9b7-002eb421c43b", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "1c99ba26-3527-4de2-ae43-3290b9032c5a", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r ** 2)  # Enhancing attractiveness calculation\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        move_step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                        new_population[i] += move_step * attractiveness(i, j)  # Selective movement based on attractiveness\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Improved Firefly Algorithm with enhanced attractiveness calculation and selective movement of fireflies towards better solutions.", "configspace": "", "generation": 27, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "446a7875-87a2-4232-a8da-3b7897a6ddf3", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step_size = 1 / (1 + np.exp(-np.linalg.norm(self.population[j] - self.population[i])))\n                        new_population[i] += alpha * step_size * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Improved Firefly Algorithm with adaptive step size control for better convergence and exploration.", "configspace": "", "generation": 28, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "0f7cd905-acf9-4fd6-aeff-8924d731867d", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies(gamma=0.8)  # Increased randomness for improved exploration\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Improved Firefly Algorithm with enhanced exploration by adding a randomization factor to escape local optima.", "configspace": "", "generation": 29, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "c4431801-b46d-4afa-8c93-a21df7161345", "solution": "import numpy as np\n\nclass FireflyAlgorithmOppositionBased:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        def opposition_based_learning(solution):\n            return 2.0 * np.mean(solution) - solution\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n            self.population = np.array([opposition_based_learning(sol) if func(opposition_based_learning(sol)) < func(sol) else sol for sol in self.population])\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithmOppositionBased", "description": "Enhancing Firefly Algorithm by incorporating Opposition-Based Learning to improve exploration-exploitation balance in search space.", "configspace": "", "generation": 30, "fitness": 0.08405074326702745, "feedback": "The algorithm FireflyAlgorithmOppositionBased got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "166f6929-8fc2-46d6-912c-8a3a1d826d77", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "fb24197b-b168-44dd-952f-85a93432a293", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        s = np.random.normal(0, sigma, self.dim)\n        u = np.random.normal(0, 1, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = s / (abs(u) ** (1 / beta))\n\n        return step * v\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * self.levy_flight()\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for more efficient exploration in the search space.", "configspace": "", "generation": 32, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "baa1c50c-141a-43fd-877b-fcb90838a4eb", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5, levy_scale=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        levy = np.random.standard_cauchy(self.dim) * levy_scale\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * levy\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for improved exploration capability.", "configspace": "", "generation": 33, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "832cad9a-ac9f-4e19-823f-ec4e4c129f85", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "bee2986b-4e61-44c4-8dc3-113cc03bc8a2", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5, levy_beta=1.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                    else:\n                        levy = np.random.standard_cauchy(self.dim) / np.power(np.linalg.norm(np.random.uniform(-5.0, 5.0, self.dim)), 1/levy_beta)\n                        step = alpha * levy\n                    new_population[i] += step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for increased exploration capability while maintaining the core firefly interaction mechanism.", "configspace": "", "generation": 35, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "311ced9d-0c8c-4474-b8d9-519dba144321", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "212b1507-aa48-493c-9cd3-8667641d9972", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                        levy = np.random.normal(0, 1, self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))\n                        new_population[i] += step + 0.01 * levy\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for improved exploration in the search space.", "configspace": "", "generation": 37, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "2ee96db8-b870-43c5-8339-acf63877bfec", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "dbe2deca-ee6c-4a05-a402-63269b924d3b", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "288cd3b3-9214-4639-8361-79b240a6f4ab", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5, step_size=0.1):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        levy = np.random.standard_cauchy(size=self.dim)\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * step_size * levy\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies(step_size=0.1)  # Incorporating Levy flights\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing the Firefly Algorithm by incorporating Levy flights for improved exploration capabilities.", "configspace": "", "generation": 40, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "c494a4ce-5a96-4669-a164-8947280ecae5", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.power(np.abs(v), 1 / beta)\n        return 0.01 * step\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * self.levy_flight()\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Refinement of the Firefly Algorithm by incorporating Levy Flight behavior for enhanced exploration capability.", "configspace": "", "generation": 41, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "763c7f12-284b-4054-9ea8-89a7b45df6e6", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * levy_flight(self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flight for improved exploration.", "configspace": "", "generation": 42, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "76de33c1-21d0-47de-a5c8-35b6bd799557", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return 0.01 * step\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * self.levy_flight()\n                        new_population[i] += step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for improved exploration capability.", "configspace": "", "generation": 43, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "fe2a59e1-9a65-45af-8bd0-ef20afe9513c", "solution": "import numpy as np\n\nclass RefinedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def levy_flight(self, size):\n        sigma = (np.math.gamma(1 + 1.5) * np.sin(np.pi * 1.5 / 2) / (np.math.gamma((1 + 1.5) / 2) * 1.5 * 2 ** ((1.5 - 1) / 2))) ** (1 / 1.5)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / np.absolute(v) ** (1 / 1.5)\n        return step\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = self.levy_flight(self.dim)\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "RefinedFireflyAlgorithm", "description": "Refining the firefly algorithm by incorporating Levy flight for enhanced exploration capability.", "configspace": "", "generation": 44, "fitness": 0.08405074326702745, "feedback": "The algorithm RefinedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "35953733-c916-4835-81fa-588e975eab32", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "b24ca7e8-fec8-45d5-a5c5-e9d8e32760e7", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = levy_flight(self.dim)\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing the Firefly Algorithm by incorporating Levy flights for more diverse exploration capabilities.", "configspace": "", "generation": 46, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "f6577a73-3880-468c-ae4e-fa97dadfa14f", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                alpha = 1.0 / (1 + func(self.population[i]))  # Dynamic alpha update\n                for j in range(self.budget):\n                    beta = 1.0 / (1 + func(self.population[j]))  # Dynamic beta update\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhanced Firefly Algorithm with dynamic alpha and beta values based on function evaluations.", "configspace": "", "generation": 47, "fitness": 0.07980828307456249, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16751690792254736, 0.1723369707924043, 0.1555077816973881, 0.15395179701830164, 0.16483096913210737, 0.15893665631673082, 0.16267398435189462, 0.1394202022481873, 0.14874064809085796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03068444817667626, 0.04229214280387228, 0.02870385795840702, 0.03014305763052294, 0.03422816556088348, 0.03558902122471741, 0.04262816280126225, 0.05444738351733103, 0.044650004127251175, 0.019739669328932896, 0.015342711598906322, 0.029557154039153266, 0.019694376765330923, 0.03314740700405472, 0.04441400589642619, 0.03353227726784158, 0.026075400011245753, 0.026193936326512235, 0.06626288875044317, 0.06680538021358062, 0.0765733973021474, 0.07648678398490205, 0.07939941143138551, 0.07524990254033803, 0.07831785510509837, 0.07351992603500479, 0.07733364550569055, 0.0632645597803192, 0.06720907875810933, 0.09867345226636504, 0.04681772505180237, 0.06097406262203209, 0.031310814041630164, 0.08759307004122552, 0.03242587579150891, 0.08687566227668397, 0.11481614012228825, 0.18551622728468342, 0.13743921164526074, 0.08977533600968968, 0.08298842765281189, 0.11261860702068405, 0.087499134579342, 0.10609877518465327, 0.10268661051137895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371120814539828, 9.999999999998899e-05, 0.04809963142700324, 9.999999999998899e-05, 9.999999999998899e-05, 0.03276237612937272, 0.007078224075435902, 0.01734284790407714, 0.0022061836597858653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02166617407288829, 0.06342835677162695, 0.04160916634926548, 0.04941933878071125, 0.02182888404666683, 0.036235199772642, 0.013139900432412088, 0.030140709993475512, 0.02742426515408769, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20656817731637733, 0.1883262869612352, 0.17578668660941932, 0.19992278770729988, 0.17738275580718854, 0.1886708912266346, 0.19323981723815709, 0.15645546481156902, 0.18233994764441608, 0.025814180980927137, 0.03498666952519802, 0.02530245937198583, 0.032520930853704666, 0.03229206664951212, 0.03939398552698581, 0.037706736821948694, 0.03148737580991179, 0.04230734951564319, 0.13519356955397122, 0.11515513401879995, 0.11795055316206304, 0.13870168746464273, 0.1371972541726313, 0.10972806923846634, 0.14565252216450464, 0.140646360572947, 0.11738165704624537, 0.16059921710531566, 0.14929096645313855, 0.1667862938559439, 0.15869822393060662, 0.15251623939546022, 0.16218769102309394, 0.151273632491558, 0.17351985584716445, 0.1404669519409294, 0.09989100403615392, 0.08909005455719887, 0.10715081048049546, 0.09499507592949519, 0.11431190659077017, 0.1010858859317203, 0.09811692690117724, 0.12243738467825349, 0.11045824419140393, 0.12990759839960464, 0.14671173105561663, 0.14035688049927664, 0.1471106921127463, 0.13167546919550388, 0.14783763267862504, 0.14262627362457336, 0.13454363641305334, 0.1701248873950857, 0.12044718760073903, 0.13613028263686555, 0.12738478083539506, 0.1228540628769611, 0.13288146058892014, 0.14011372957493984, 0.11381279957705248, 0.12772040333814694, 0.15888896684308185, 0.12532765065457407, 0.1604749375576643, 0.1580776016639278, 0.15132416301060825, 0.13535888138500485, 0.12034448113927088, 0.1455598704790334, 0.14443673544104385, 0.15293526631057053, 0.14008346662354654, 0.134049484225786, 0.13347045209341413, 0.11956822454431326, 0.11991998101162082, 0.13673476288551845, 0.15809360020214336, 0.15457909999203934, 0.1083238062055214, 0.16322361897759274, 0.1829716801661826, 0.16795846823784633, 0.18168632244593452, 0.20196430472564075, 0.1689590561474904, 0.17164031829010307, 0.17291671839605538, 0.2000065492149583, 0.04512221884050338, 0.04727237095402148, 0.06212106915296989, 0.04860137952754562, 0.057871829254440676, 0.046366843859782625, 0.06879040316125429, 0.05048986208730899, 0.03944391904815436]}, "mutation_prompt": null}
{"id": "ec2554b2-c463-4f35-af14-12157ed69559", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = levy_flight(self.dim)\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by introducing Levy flights for more diverse exploration and exploitation capabilities.", "configspace": "", "generation": 48, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "99aea942-87cd-4ec1-ac1d-7479cb67b247", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                        levy = 0.01 * np.random.standard_cauchy(self.dim)\n                        new_population[i] += step + levy\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for more diverse exploration during optimization.", "configspace": "", "generation": 49, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "14e51c6f-98c1-444c-aa17-39ced3507736", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "8d1277e6-13eb-47e7-9e9c-14f96a5ead40", "solution": "import numpy as np\n\nclass FireflyAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def levy_flight(self, loc, scale=1.0):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / (abs(v) ** (1 / beta))\n        return loc + scale * step\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                        new_population[i] += self.levy_flight(step)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithmLevy", "description": "Introducing Levy flight behavior to enhance exploration capability in the Firefly Algorithm.", "configspace": "", "generation": 51, "fitness": 0.08405074326702745, "feedback": "The algorithm FireflyAlgorithmLevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "8885989c-2923-4a70-9553-d495cb34087d", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            return u / (abs(v) ** (1 / beta))\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * levy_flight(self.dim)\n                        new_population[i] += step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Improving Firefly Algorithm by incorporating Levy flights for enhanced exploration capability.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {}, "mutation_prompt": null}
{"id": "e4ca45c7-f25b-427a-90b6-1480319b9db0", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "81273814-c8f4-4993-9c3d-ea2a7880f847", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        # Introducing Levy flights for improved diversity\n                        levy = np.random.standard_cauchy(self.dim)\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * levy\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Enhancing fireflies' movement diversity by introducing Levy flights for exploring the search space more effectively.", "configspace": "", "generation": 54, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "aaa2a2f1-2059-46ec-8f49-ae3735fa0fbd", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / (abs(v) ** (1 / beta))\n        return 0.01 * step\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim) + self.levy_flight()\n                        new_population[i] += step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for improved exploration capability.", "configspace": "", "generation": 55, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "60e04167-5895-416a-b3ff-8017097abdcc", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                        step += np.random.normal(0, 1, self.dim) / np.sqrt(np.abs(np.random.gamma(1.5, 2.0, self.dim)))\n                        new_population[i] += step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for improved exploration capability.", "configspace": "", "generation": 56, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "45b5e9e5-643c-417b-af2e-5dd2db769ee9", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "4deed90f-0972-4ba8-9d1a-15f3647c1b74", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "01eaf54b-8e06-4227-95bf-6225f0a1d92b", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies():\n            new_population = np.copy(self.population)\n            alpha = 1.0 - 0.1 * np.random.rand()\n            beta = 1.0 - 0.1 * np.random.rand()\n            gamma = 0.5 + 0.2 * np.random.rand()\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Implement Firefly Algorithm with dynamic alpha, beta, and gamma values for more effective exploration and exploitation.", "configspace": "", "generation": 59, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "606c546f-8ba5-4511-9157-9d0e81bc1982", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "0542c36d-7e77-4ca5-926d-d0905bf7e1bf", "solution": "# import numpy as np\n\nclass FireflyAlgorithmLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.power(np.abs(v), 1 / beta)\n        return 0.01 * step\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * self.levy_flight()\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithmLevy", "description": "Enhancing Firefly Algorithm with Levy Flight for improved exploration capabilities.", "configspace": "", "generation": 61, "fitness": 0.08405074326702745, "feedback": "The algorithm FireflyAlgorithmLevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "4344637a-cf30-4250-a16d-c7af24341a2b", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "ae09b651-860c-4c57-80c4-bed912450c7a", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                        new_population[i] += np.where(np.abs(step) > 0.01, step, self.levy_flight())\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by introducing Levy Flight for improved exploration capabilities.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {}, "mutation_prompt": null}
{"id": "14b2d4f4-7b40-401f-826e-f9086e2083d1", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def levy_flight(self):\n        beta = 1.5\n        sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.power(np.abs(v), 1 / beta)\n        return 0.01 * step\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                        step += self.levy_flight()\n                        new_population[i] += step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing convergence by incorporating Levy flight for more efficient exploration.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {}, "mutation_prompt": null}
{"id": "ef54a37a-2304-4b31-97fb-f4eb66fb8a22", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "658da6c2-f896-4672-bceb-1bc5d8bb5761", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def dynamic_attractiveness(i, j):\n            f_i = func(self.population[i])\n            f_j = func(self.population[j])\n            if f_j < f_i:\n                return 1 / (1 + np.abs(f_j - f_i))\n            else:\n                return 1\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    attract = dynamic_attractiveness(i, j)\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * attract * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating dynamic attractiveness scaling based on function values to improve convergence speed and solution quality.", "configspace": "", "generation": 66, "fitness": 0.07680236458671418, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.1658102677911436, 0.17061861636655506, 0.14813887686818283, 0.15286747999274686, 0.15316553433941338, 0.15124106957773165, 0.15702877368098722, 0.12859514190132793, 0.1431049057480679, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029974878370155222, 0.04095896939896648, 0.026251673543954523, 0.026373591413641595, 0.03268385418066477, 0.03507367395377314, 0.03786069301667361, 0.04816257267517465, 0.03762274406900834, 0.018144494880435236, 0.014424066712230288, 0.02541623545139282, 0.01955678784193715, 0.02509010099830067, 0.0381107980284896, 0.03181825962786611, 0.020853646837166395, 0.024410562937882796, 0.06281589103812224, 0.06650522965630301, 0.06961128434305086, 0.07345806022655366, 0.07893901367083778, 0.06968232545714714, 0.07636818739379991, 0.07209851532765932, 0.0764503931378433, 0.06268494158203708, 0.06326286544357207, 0.09715592227504799, 0.04426004930508953, 0.06032601644311142, 0.029139580782801433, 0.08403222699362578, 0.031625414866252144, 0.08572033829380454, 0.11449322975293708, 0.18174099116103315, 0.13207396879116118, 0.08553343126322965, 0.08057831476080013, 0.1064875324979252, 0.07776093854018185, 0.10268341651264568, 0.0985802138245484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010631659063808141, 9.999999999998899e-05, 0.037367093517693184, 9.999999999998899e-05, 9.999999999998899e-05, 0.03146436386855456, 0.004687994818957986, 0.017018542438422046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01176265870196147, 0.060851791228871854, 0.03996262562353692, 0.04232440278063443, 0.02020989271906204, 0.026470844865261967, 9.999999999998899e-05, 0.028259819632703298, 0.01010673900883885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1994530707717359, 0.18600902741107428, 0.17476701085588653, 0.19710125753845176, 0.1714669097674536, 0.18688231202438665, 0.19123390841627697, 0.15283804324062078, 0.17894473218517815, 0.025287659489018344, 0.034403682050128004, 0.021724854935067595, 0.03233728928570634, 0.029203952469025185, 0.036088608978430026, 0.028878420114277104, 0.0254044297743794, 0.04038082619682459, 0.13424989193891668, 0.1122482511533528, 0.1177181494628754, 0.137527941266264, 0.13522670423748928, 0.10817013319698343, 0.1436702244897522, 0.13666778206338837, 0.11306555811839225, 0.15799700384816806, 0.1471070579952879, 0.1661105802878161, 0.1541540538424928, 0.14898908806424094, 0.16047150360073648, 0.14719089858452916, 0.17339630220843405, 0.13598495029011448, 0.09673655211734677, 0.08542929522559028, 0.10518440791205552, 0.09304524309563478, 0.11063734148804383, 0.09950674650172708, 0.09525912726731856, 0.12179067019307899, 0.10423454153245637, 0.12899161732027586, 0.13890811399986103, 0.13854613233897128, 0.14540793461838164, 0.12754699121880453, 0.14705644225732772, 0.13963728677385, 0.13244126780227305, 0.163804386848721, 0.1097033553322484, 0.1331772428062763, 0.12105159705292223, 0.1137806064349608, 0.12985759181243162, 0.13376753364060678, 0.10368959938495659, 0.12273783330373134, 0.1573022222480679, 0.12107131955385941, 0.157322912143939, 0.15484099707130805, 0.148413312680859, 0.12756099912635943, 0.11471501406306184, 0.13831538537600407, 0.13495949245000938, 0.1509497670029526, 0.13176873599355454, 0.12204894247735742, 0.11996007923193286, 0.11654554185680077, 0.1055342259605252, 0.12586246279707358, 0.15669074450895915, 0.14676926268366752, 0.10681876353540831, 0.16191493279887748, 0.182413175163475, 0.16516586249367537, 0.17911574460711233, 0.1961664762795453, 0.16502666833090585, 0.16949422553204008, 0.17065808058649978, 0.19717220832183202, 0.038514532397567525, 0.045505594862885634, 0.06025871436089769, 0.04742525551939669, 0.05740270972147132, 0.04471553225429892, 0.06552669711259973, 0.04950315014875961, 0.03805448923041499]}, "mutation_prompt": null}
{"id": "06be5694-6bf7-40e8-a1e2-e0625c23f16d", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        alpha = 1.0 - i / self.budget  # Dynamic alpha value\n                        beta = 1.0 + j / self.budget   # Dynamic beta value\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating dynamic alpha and beta values during population movement.", "configspace": "", "generation": 67, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "1d3e351a-6b97-4462-a3f1-280aa5342106", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "1d9cf676-9c7d-4e74-b4b8-fb129f118fa8", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step_size = 1 / (1 + func(self.population[j]) - func(self.population[i]))\n                        new_population[i] += alpha * step_size * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Enhance fireflies' movement with a dynamic step size adjustment based on function landscape exploration.", "configspace": "", "generation": 69, "fitness": 0.08077691391051552, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.168957356742223, 0.1727991662367684, 0.16090656310983464, 0.15406632136464726, 0.1649570187026469, 0.1637282123805116, 0.16664266135628403, 0.1473955163312105, 0.15133016987382508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033185423438058415, 0.04124104201218415, 0.029116276744173275, 0.03335037152950393, 0.03476780285647729, 0.03589218494680613, 0.04495758099063607, 0.0569625486296631, 0.046805791382404816, 0.021418206551923502, 0.015340650889165919, 0.03439835640391242, 0.020402749503241058, 0.033280632615795946, 0.048929184037544315, 0.034242688884528416, 0.026257947873754683, 0.027307858283813546, 0.06759679535627039, 0.0668780347324458, 0.07600820073023551, 0.07678238553792449, 0.07970833009481082, 0.07627567197929752, 0.07848702101386829, 0.07448637252854229, 0.07752654526893932, 0.06364913887805956, 0.06725905328770865, 0.09938472535831189, 0.046216158554190034, 0.061615784311706556, 0.033261836854030835, 0.08880797499104576, 0.0317090584821208, 0.08800402810502805, 0.11660665569421746, 0.18625855984300765, 0.1399776573846786, 0.0950409696666813, 0.08228403002136386, 0.11266581207556214, 0.0962544986467212, 0.1047359701317131, 0.10024110390236762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016088736409649362, 9.999999999998899e-05, 0.045428528942850654, 9.999999999998899e-05, 0.002110257281312089, 0.03165815161453578, 0.008742468957388727, 0.017647112020730105, 0.001052323699942792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017799135963266988, 0.06229812849867156, 0.04181501473472926, 0.05932805236295047, 0.021811577321722897, 0.03881748416613484, 0.028705824402140423, 0.03184671681026663, 0.014539201057920392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20676145385991918, 0.18742192372455746, 0.17674243258464362, 0.20180485879100507, 0.17449305345996202, 0.1874970376561701, 0.1949408323641516, 0.15658459758936094, 0.1812851155157782, 0.02813575745836372, 0.034743887919961525, 0.024345105592203264, 0.033926084647676324, 0.03188836306890319, 0.04141022184504417, 0.047875049493987576, 0.03547506944863199, 0.0430349937071276, 0.13507160842935684, 0.11728152646184842, 0.12043787404194428, 0.13847824730120484, 0.13694895664119944, 0.11476090650365078, 0.1457670778151371, 0.14239993641582038, 0.11430422610974311, 0.16259634794087507, 0.15103651117312655, 0.16673914072981733, 0.16247139566333157, 0.14987998012498194, 0.1618966667449675, 0.15658997348631387, 0.1735740895695319, 0.13888819934747976, 0.10193008087896982, 0.08908553267155728, 0.10688974373306459, 0.0998890438577098, 0.1114423085880748, 0.10284871417892827, 0.10128292626240853, 0.12258389994490515, 0.10931073925149415, 0.1321739327883199, 0.14290353873800943, 0.14146287393385648, 0.1521596745946372, 0.13005719172526065, 0.1479186288319888, 0.14559523889684156, 0.13394115304011134, 0.17462016042400919, 0.12551670829763095, 0.1343604404341433, 0.12954660808004903, 0.13058226073936585, 0.13444724063684677, 0.14402055253740842, 0.12104656863525398, 0.12321737049478121, 0.15915069791030056, 0.127505022676202, 0.15816832979465312, 0.15683035339025342, 0.15359360343887274, 0.12980334862612875, 0.11826616541762525, 0.15033596811219507, 0.15262580291903416, 0.15325925675922025, 0.14344737194732005, 0.1453738397302815, 0.12724920146460228, 0.1193193317160971, 0.11634414432858253, 0.13891448364035353, 0.158028021304655, 0.15537428623233573, 0.12387162778829752, 0.16254379439844002, 0.18348876360701238, 0.16893350121504114, 0.18390242088019293, 0.2017318539966546, 0.1759450875228391, 0.17022243531629433, 0.1711698665317546, 0.19996988159147255, 0.048435037119914925, 0.04619714805848052, 0.0637455150597439, 0.04943638209903678, 0.05771327715917052, 0.04711332361514797, 0.07128984545387462, 0.050224519303849746, 0.041216887775411326]}, "mutation_prompt": null}
{"id": "706d3992-ab56-426e-bf2d-afb5e4d7042e", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "a6cb1992-5adb-41f5-8534-90ad9dfdc467", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "b58be239-d9d5-480c-98c0-c1b04df53e8d", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        # Incorporating Levy flights for improved exploration\n                        levy = np.random.standard_cauchy(self.dim) * 0.1\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * levy\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for improved exploration capability.", "configspace": "", "generation": 72, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "13ae10c4-d46a-4029-89b9-44c452d7813a", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "5cdb89de-faca-41e5-8567-c264121d6dd0", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5, levy_mu=0.5, levy_scale=0.1):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        # Integrate Levy flights for diverse exploration\n                        levy = np.random.standard_cauchy(size=self.dim)\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim) + levy_mu * levy / (1 + levy_scale * np.linalg.norm(levy) ** 2)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing the Firefly Algorithm by incorporating Levy flights for more diverse exploration in the search space.", "configspace": "", "generation": 74, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "387a3ea4-89e6-4d4d-8e70-cb0e2213b09a", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "57ee8bdc-eb67-4860-9a6e-6048f76cab64", "solution": "import numpy as np\n\nclass DynamicFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        attractiveness_i = func(self.population[i])\n                        attractiveness_j = func(self.population[j])\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * (attractiveness_j - attractiveness_i) * (self.population[j] - self.population[i])\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "DynamicFireflyAlgorithm", "description": "Enhancing Firefly Algorithm with dynamic attractiveness based on function values to drive fireflies towards better regions efficiently.", "configspace": "", "generation": 76, "fitness": 0.08077691391051552, "feedback": "The algorithm DynamicFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.168957356742223, 0.1727991662367684, 0.16090656310983464, 0.15406632136464726, 0.1649570187026469, 0.1637282123805116, 0.16664266135628403, 0.1473955163312105, 0.15133016987382508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033185423438058415, 0.04124104201218415, 0.029116276744173275, 0.03335037152950393, 0.03476780285647729, 0.03589218494680613, 0.04495758099063607, 0.0569625486296631, 0.046805791382404816, 0.021418206551923502, 0.015340650889165919, 0.03439835640391242, 0.020402749503241058, 0.033280632615795946, 0.048929184037544315, 0.034242688884528416, 0.026257947873754683, 0.027307858283813546, 0.06759679535627039, 0.0668780347324458, 0.07600820073023551, 0.07678238553792449, 0.07970833009481082, 0.07627567197929752, 0.07848702101386829, 0.07448637252854229, 0.07752654526893932, 0.06364913887805956, 0.06725905328770865, 0.09938472535831189, 0.046216158554190034, 0.061615784311706556, 0.033261836854030835, 0.08880797499104576, 0.0317090584821208, 0.08800402810502805, 0.11660665569421746, 0.18625855984300765, 0.1399776573846786, 0.0950409696666813, 0.08228403002136386, 0.11266581207556214, 0.0962544986467212, 0.1047359701317131, 0.10024110390236762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016088736409649362, 9.999999999998899e-05, 0.045428528942850654, 9.999999999998899e-05, 0.002110257281312089, 0.03165815161453578, 0.008742468957388727, 0.017647112020730105, 0.001052323699942792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017799135963266988, 0.06229812849867156, 0.04181501473472926, 0.05932805236295047, 0.021811577321722897, 0.03881748416613484, 0.028705824402140423, 0.03184671681026663, 0.014539201057920392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20676145385991918, 0.18742192372455746, 0.17674243258464362, 0.20180485879100507, 0.17449305345996202, 0.1874970376561701, 0.1949408323641516, 0.15658459758936094, 0.1812851155157782, 0.02813575745836372, 0.034743887919961525, 0.024345105592203264, 0.033926084647676324, 0.03188836306890319, 0.04141022184504417, 0.047875049493987576, 0.03547506944863199, 0.0430349937071276, 0.13507160842935684, 0.11728152646184842, 0.12043787404194428, 0.13847824730120484, 0.13694895664119944, 0.11476090650365078, 0.1457670778151371, 0.14239993641582038, 0.11430422610974311, 0.16259634794087507, 0.15103651117312655, 0.16673914072981733, 0.16247139566333157, 0.14987998012498194, 0.1618966667449675, 0.15658997348631387, 0.1735740895695319, 0.13888819934747976, 0.10193008087896982, 0.08908553267155728, 0.10688974373306459, 0.0998890438577098, 0.1114423085880748, 0.10284871417892827, 0.10128292626240853, 0.12258389994490515, 0.10931073925149415, 0.1321739327883199, 0.14290353873800943, 0.14146287393385648, 0.1521596745946372, 0.13005719172526065, 0.1479186288319888, 0.14559523889684156, 0.13394115304011134, 0.17462016042400919, 0.12551670829763095, 0.1343604404341433, 0.12954660808004903, 0.13058226073936585, 0.13444724063684677, 0.14402055253740842, 0.12104656863525398, 0.12321737049478121, 0.15915069791030056, 0.127505022676202, 0.15816832979465312, 0.15683035339025342, 0.15359360343887274, 0.12980334862612875, 0.11826616541762525, 0.15033596811219507, 0.15262580291903416, 0.15325925675922025, 0.14344737194732005, 0.1453738397302815, 0.12724920146460228, 0.1193193317160971, 0.11634414432858253, 0.13891448364035353, 0.158028021304655, 0.15537428623233573, 0.12387162778829752, 0.16254379439844002, 0.18348876360701238, 0.16893350121504114, 0.18390242088019293, 0.2017318539966546, 0.1759450875228391, 0.17022243531629433, 0.1711698665317546, 0.19996988159147255, 0.048435037119914925, 0.04619714805848052, 0.0637455150597439, 0.04943638209903678, 0.05771327715917052, 0.04711332361514797, 0.07128984545387462, 0.050224519303849746, 0.041216887775411326]}, "mutation_prompt": null}
{"id": "f28d8483-fd15-413e-ba93-9c273ebabddd", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j, t):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r) * np.exp(-t / self.budget)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for t in range(self.budget):\n            move_fireflies(beta=1.0 - t / self.budget)\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Improving Firefly Algorithm by incorporating dynamic attractiveness scaling for better exploration-exploitation balance.", "configspace": "", "generation": 77, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "4382e634-2f11-4f17-bc65-9fa8649cb482", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "767bdde4-373c-4740-b385-9a3b80075962", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                        # Incorporating Levy flights for enhanced exploration\n                        levy = 0.01 * np.random.standard_cauchy(self.dim)\n                        new_population[i] += step + levy\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhance Firefly Algorithm by incorporating Levy flights to introduce more randomness and exploration into the search process.", "configspace": "", "generation": 79, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "f4963f62-2339-41a4-a0a7-ef454011468d", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i])\n                        # Introducing a levy flight step\n                        levy_step = 0.01 * np.random.normal(0, 1, self.dim) / np.power(np.abs(step), 1.5) \n                        new_population[i] += step + gamma * levy_step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Enhancing the exploration and exploitation balance by adding a levy flight step to the movement of fireflies.", "configspace": "", "generation": 80, "fitness": 0.08405074326702745, "feedback": "The algorithm FireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "b3dd8a80-06ef-4e9e-893d-63b543fc8e6d", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5, de_factor=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        de_vector = self.population[np.random.choice(np.delete(np.arange(self.budget), i, axis=0))] - self.population[np.random.choice(np.delete(np.arange(self.budget), i, axis=0))]\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim) + de_factor * de_vector\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating differential evolution for improved exploration-exploitation balance.", "configspace": "", "generation": 81, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "4dc199cc-42ae-4486-adf0-dd3744b47358", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step_size = 1 / np.log10(2 + 1 + _)\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) * step_size + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing the Firefly Algorithm by incorporating a dynamic step size adaptation mechanism during the movement phase.", "configspace": "", "generation": 82, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "45dbc03a-dcb1-4d4c-969d-05130687dcae", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "1d940e10-4260-4393-8e44-a44bb42ed910", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    attractiveness_scaling = func(self.population[j]) / func(self.population[i])\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) * attractiveness_scaling + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating a dynamic attractiveness scaling factor based on function values to improve convergence speed.", "configspace": "", "generation": 84, "fitness": 0.07680953919919604, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16582051940414877, 0.17063305154347475, 0.14815066319962822, 0.15288236216478068, 0.15318508617387727, 0.1512567461850165, 0.15704350754320007, 0.12860770211182282, 0.14311848788770587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02997815034030904, 0.04096358948928647, 0.02625527030442698, 0.026377336091624737, 0.03268773106601197, 0.03507737820092627, 0.037864664327806, 0.048169894321108186, 0.03762930856033675, 0.018146937888304127, 0.014425866936901177, 0.025420424280138798, 0.019558739375321377, 0.025095824075418216, 0.03811712165616521, 0.03182211783252564, 0.02085754985108601, 0.024413707972539167, 0.0628230900097898, 0.06651182922114696, 0.06961946808995068, 0.07346660923188086, 0.07894568964531223, 0.06969139250838363, 0.0763765957612974, 0.07210479109157109, 0.07645820548923077, 0.0626914332218026, 0.06327076179471247, 0.09716623694220539, 0.044265489468351404, 0.06033227796587748, 0.029143280230529478, 0.08404204651744895, 0.03162888828679278, 0.08572936426242073, 0.11450156786864352, 0.1817606692902246, 0.13208931535449442, 0.08554317505261078, 0.0805873284401688, 0.10650062629974433, 0.07777260224519256, 0.1026940360871853, 0.09859027551816579, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010633944506435733, 9.999999999998899e-05, 0.03737511484647438, 9.999999999998899e-05, 9.999999999998899e-05, 0.031468020241120165, 0.00468940999317724, 0.01702036437924037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01176778739971962, 0.060858898455657284, 0.03996727143155132, 0.04232893816224348, 0.020212551836688353, 0.026477389000538643, 9.999999999998899e-05, 0.028263388684621304, 0.01011466827905183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1994750047595676, 0.18602854912197764, 0.17477250473055406, 0.1971153879215678, 0.17148641669823228, 0.18690170956677843, 0.1912443747932957, 0.1528504924419496, 0.17896239111288725, 0.025290389409548197, 0.034407346346182255, 0.021727052136341296, 0.032340557442174234, 0.02920809893923837, 0.03609353097434653, 0.028882032464026652, 0.02540939438869405, 0.0403856258487022, 0.13426306816038613, 0.11225677118169919, 0.11772454667209475, 0.13754178115997706, 0.13524029266089233, 0.10817697289446793, 0.1436844945616398, 0.13668045512765603, 0.11307858371889523, 0.1580047207171532, 0.1471152314983123, 0.1661219198879753, 0.1541610143478056, 0.14900048738357763, 0.16048129449454884, 0.14719531171302702, 0.1734070820922622, 0.13599536170374793, 0.09674544729706103, 0.08543877479648676, 0.10519570517332633, 0.09305052828848626, 0.11064976748977728, 0.09951448671849705, 0.09526358087982756, 0.12180258075438521, 0.10424744704877653, 0.12899572023248496, 0.1389236510520574, 0.1385539084750752, 0.14541402750175603, 0.12755967633639864, 0.14706722275263096, 0.13964020070391503, 0.13245293788307722, 0.16381574359923867, 0.10971861625287316, 0.1331917346448569, 0.12106622841241244, 0.11379560687826984, 0.12987177995675225, 0.13378344205402715, 0.10370390153333553, 0.12275209296700818, 0.15731858043976898, 0.12108232985296563, 0.15733869994259697, 0.1548562777231054, 0.14842480418741144, 0.1275755706985976, 0.11472608795759676, 0.13832872544733532, 0.13497112004940937, 0.15096359432042095, 0.13178389635079313, 0.12206198279351921, 0.11997667537482615, 0.1165568664258726, 0.10554956080853939, 0.12587811113203862, 0.1567057767973361, 0.14678515352216293, 0.1068284201994949, 0.16192585306121166, 0.18241962367012476, 0.16517538924265995, 0.17912395058209518, 0.1961814526991038, 0.16503142321951325, 0.16950684377865743, 0.17067127406271376, 0.1971857840064808, 0.0385210182225495, 0.04551084318247245, 0.06026448862011824, 0.047430459535355074, 0.05740862876013175, 0.04472065535678682, 0.06553417798920069, 0.04950840117467292, 0.03805837518818711]}, "mutation_prompt": null}
{"id": "496f91b3-0614-4261-90f7-8ad185d1d029", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                        step += 0.01 * np.random.standard_cauchy(self.dim) / (np.abs(np.random.standard_cauchy(self.dim)) ** (1 / beta))\n                        new_population[i] += step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Refinement of the Firefly Algorithm by introducing Levy flights for improved exploration capability.", "configspace": "", "generation": 85, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "20d7ce85-6511-4743-ad30-129593a1840f", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "09c41b3e-3d92-42f4-ac6a-c04b7892ade9", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm(FireflyAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def levy_flight(self):\n        return np.random.standard_cauchy(size=self.dim) / np.random.gamma(1.5, 1.0, size=self.dim)\n\n    def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5, step_size=0.1):\n        new_population = np.copy(self.population)\n        for i in range(self.budget):\n            for j in range(self.budget):\n                if func(self.population[j]) < func(self.population[i]):\n                    step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * self.levy_flight()\n                    new_population[i] += step_size * step\n        self.population = new_population", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for improved exploration capabilities.", "configspace": "", "generation": 87, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "c70dc3c2-4cf7-495d-b065-78b725c5ad09", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "0eb345d2-6afd-499c-ad28-9b2e95e1333c", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * levy_flight()\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Introducing Levy flights to enhance exploration capability and escape local optima in the Firefly Algorithm.", "configspace": "", "generation": 89, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "8ef38b89-b6e9-4873-a31e-e19eea84de54", "solution": "import numpy as np\n\nclass FireflyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r ** 2)  # Enhanced attractiveness function\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i])\n                        step += gamma * np.random.uniform(-1, 1, self.dim)\n                        # Introduce Levy flight for better exploration\n                        levy = 0.01 * np.random.standard_cauchy(self.dim)\n                        new_population[i] += step + levy\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithmRefined", "description": "Refining Firefly Algorithm by enhancing the attractiveness function and introducing levy flights for better exploration-exploitation balance.", "configspace": "", "generation": 90, "fitness": 0.08405074326702745, "feedback": "The algorithm FireflyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "2a684d22-2ba5-4081-a7a1-2620e960a64b", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "19ecc2e5-e76b-49bf-9ef2-9da24e9874f7", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n                        # Introducing Levy flights for exploration\n                        levy = np.random.normal(0, 1, self.dim) / np.sqrt(np.abs(np.random.normal(0, 1)))\n                        new_population[i] += 0.01 * step + 0.99 * levy\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Enhancing the Firefly Algorithm by introducing Levy flights for improved exploration capability.", "configspace": "", "generation": 92, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "9e145514-0942-4a17-aa92-e1a4186e0af0", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "FireflyAlgorithm", "description": "Firefly Algorithm is a metaheuristic optimization algorithm inspired by the flashing behavior of fireflies to find optimal solutions in a noisy environment.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "42827342-0fb3-4743-af2a-2a44c15b8781", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            levy = np.random.standard_cauchy((self.budget, self.dim))\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * levy[i]\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing the Firefly Algorithm by introducing Levy flights for efficient exploration in search space.", "configspace": "", "generation": 94, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "ef869ed8-6829-470d-9dee-c8431251d79f", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def levy_flight(dim):\n            sigma = (np.math.gamma(1 + dim) * np.sin(np.pi * dim / 2)) / (np.math.gamma((1 + dim) / 2) * dim * 2 ** ((dim - 1) / 2))\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / dim)\n            return step\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step = levy_flight(self.dim)\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * step\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Improved Firefly Algorithm with enhanced exploration by incorporating Levy flight for better global search capability.", "configspace": "", "generation": 95, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "aa1843a9-15ee-4708-96e4-05ff05897f35", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies():\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                alpha = 1.0 / (1 + i)\n                gamma = 0.5 / (1 + i)\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        new_population[i] += alpha * np.exp(-1 * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Improved Firefly Algorithm with dynamic alpha and gamma values for better exploration and exploitation balance.", "configspace": "", "generation": 96, "fitness": 0.08405074326702745, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
{"id": "158272ac-07f6-4373-a381-59479cd21ba0", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm(FireflyAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def levy_flight(self):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / (abs(v) ** (1 / beta))\n        return step\n\n    def move_fireflies(self, alpha=1.0, beta=1.0, gamma=0.5):\n        new_population = np.copy(self.population)\n        for i in range(self.budget):\n            for j in range(self.budget):\n                if func(self.population[j]) < func(self.population[i]):\n                    step = alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * self.levy_flight()\n                    new_population[i] += step\n        self.population = new_population\n\nenhanced_algorithm = EnhancedFireflyAlgorithm(budget, dim)\nbest_solution = enhanced_algorithm(func)", "name": "EnhancedFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by incorporating Levy flights for improved exploration capabilities", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'budget' is not defined\").", "error": "NameError(\"name 'budget' is not defined\")", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {}, "mutation_prompt": null}
{"id": "24eb31e4-8b2a-4444-881c-5daa303d7dd7", "solution": "import numpy as np\n\nclass DynamicFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        dynamic_alpha = alpha / (1 + func(self.population[j]) - func(self.population[i]))\n                        new_population[i] += dynamic_alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "DynamicFireflyAlgorithm", "description": "Enhancing Firefly Algorithm by introducing a dynamic alpha to adaptively control the attractiveness influence in the movement of fireflies towards brighter solutions.", "configspace": "", "generation": 98, "fitness": 0.08077691391051552, "feedback": "The algorithm DynamicFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.168957356742223, 0.1727991662367684, 0.16090656310983464, 0.15406632136464726, 0.1649570187026469, 0.1637282123805116, 0.16664266135628403, 0.1473955163312105, 0.15133016987382508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033185423438058415, 0.04124104201218415, 0.029116276744173275, 0.03335037152950393, 0.03476780285647729, 0.03589218494680613, 0.04495758099063607, 0.0569625486296631, 0.046805791382404816, 0.021418206551923502, 0.015340650889165919, 0.03439835640391242, 0.020402749503241058, 0.033280632615795946, 0.048929184037544315, 0.034242688884528416, 0.026257947873754683, 0.027307858283813546, 0.06759679535627039, 0.0668780347324458, 0.07600820073023551, 0.07678238553792449, 0.07970833009481082, 0.07627567197929752, 0.07848702101386829, 0.07448637252854229, 0.07752654526893932, 0.06364913887805956, 0.06725905328770865, 0.09938472535831189, 0.046216158554190034, 0.061615784311706556, 0.033261836854030835, 0.08880797499104576, 0.0317090584821208, 0.08800402810502805, 0.11660665569421746, 0.18625855984300765, 0.1399776573846786, 0.0950409696666813, 0.08228403002136386, 0.11266581207556214, 0.0962544986467212, 0.1047359701317131, 0.10024110390236762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016088736409649362, 9.999999999998899e-05, 0.045428528942850654, 9.999999999998899e-05, 0.002110257281312089, 0.03165815161453578, 0.008742468957388727, 0.017647112020730105, 0.001052323699942792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017799135963266988, 0.06229812849867156, 0.04181501473472926, 0.05932805236295047, 0.021811577321722897, 0.03881748416613484, 0.028705824402140423, 0.03184671681026663, 0.014539201057920392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20676145385991918, 0.18742192372455746, 0.17674243258464362, 0.20180485879100507, 0.17449305345996202, 0.1874970376561701, 0.1949408323641516, 0.15658459758936094, 0.1812851155157782, 0.02813575745836372, 0.034743887919961525, 0.024345105592203264, 0.033926084647676324, 0.03188836306890319, 0.04141022184504417, 0.047875049493987576, 0.03547506944863199, 0.0430349937071276, 0.13507160842935684, 0.11728152646184842, 0.12043787404194428, 0.13847824730120484, 0.13694895664119944, 0.11476090650365078, 0.1457670778151371, 0.14239993641582038, 0.11430422610974311, 0.16259634794087507, 0.15103651117312655, 0.16673914072981733, 0.16247139566333157, 0.14987998012498194, 0.1618966667449675, 0.15658997348631387, 0.1735740895695319, 0.13888819934747976, 0.10193008087896982, 0.08908553267155728, 0.10688974373306459, 0.0998890438577098, 0.1114423085880748, 0.10284871417892827, 0.10128292626240853, 0.12258389994490515, 0.10931073925149415, 0.1321739327883199, 0.14290353873800943, 0.14146287393385648, 0.1521596745946372, 0.13005719172526065, 0.1479186288319888, 0.14559523889684156, 0.13394115304011134, 0.17462016042400919, 0.12551670829763095, 0.1343604404341433, 0.12954660808004903, 0.13058226073936585, 0.13444724063684677, 0.14402055253740842, 0.12104656863525398, 0.12321737049478121, 0.15915069791030056, 0.127505022676202, 0.15816832979465312, 0.15683035339025342, 0.15359360343887274, 0.12980334862612875, 0.11826616541762525, 0.15033596811219507, 0.15262580291903416, 0.15325925675922025, 0.14344737194732005, 0.1453738397302815, 0.12724920146460228, 0.1193193317160971, 0.11634414432858253, 0.13891448364035353, 0.158028021304655, 0.15537428623233573, 0.12387162778829752, 0.16254379439844002, 0.18348876360701238, 0.16893350121504114, 0.18390242088019293, 0.2017318539966546, 0.1759450875228391, 0.17022243531629433, 0.1711698665317546, 0.19996988159147255, 0.048435037119914925, 0.04619714805848052, 0.0637455150597439, 0.04943638209903678, 0.05771327715917052, 0.04711332361514797, 0.07128984545387462, 0.050224519303849746, 0.041216887775411326]}, "mutation_prompt": null}
{"id": "e9c6167e-47ee-4faa-8c11-c410c0648314", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population = None\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.budget, self.dim))\n\n        def attractiveness(i, j):\n            r = np.linalg.norm(self.population[i] - self.population[j])\n            return 1 / (1 + r)\n\n        def move_fireflies(alpha=1.0, beta=1.0, gamma=0.5):\n            new_population = np.copy(self.population)\n            for i in range(self.budget):\n                for j in range(self.budget):\n                    if func(self.population[j]) < func(self.population[i]):\n                        step_size = 1 / np.sqrt(1 + np.linalg.norm(self.population[j] - self.population[i]) ** 2)\n                        new_population[i] += alpha * np.exp(-beta * np.linalg.norm(self.population[j] - self.population[i]) ** 2) * (self.population[j] - self.population[i]) * step_size + gamma * np.random.uniform(-1, 1, self.dim)\n            self.population = new_population\n\n        self.population = initialize_population()\n        for _ in range(self.budget):\n            move_fireflies()\n        best_solution = min(self.population, key=lambda x: func(x))\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhanced Firefly Algorithm with dynamic step size adjustment for improved convergence performance", "configspace": "", "generation": 99, "fitness": 0.08405074326702745, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "785032f1-46e7-4e60-8b08-69123fc925e2", "metadata": {"aucs": [0.16923379966690721, 0.1740697603951723, 0.16288847285803965, 0.1571443808810984, 0.17651595575919543, 0.1666479196630447, 0.17027566034580432, 0.15025782280546296, 0.16322054914097694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035145316198319065, 0.04429158823241797, 0.031539315614268926, 0.034753030187547274, 0.03577635382643041, 0.03610807274281547, 0.04773884652879823, 0.06073951600542238, 0.05168382867676369, 0.02166411678167368, 0.022831034906327097, 0.03786990281694924, 0.02110971339259826, 0.04121043608692676, 0.050723537392029505, 0.03525015311244517, 0.033001578895014094, 0.02798045474978883, 0.07373525733745989, 0.06768540524363742, 0.08372875438383376, 0.07952405674858487, 0.0798664851664076, 0.08082654667469091, 0.08027593118386778, 0.07627124936481355, 0.07829995901284714, 0.06385066961836305, 0.0711631884237871, 0.10020129692483848, 0.05010094578669033, 0.061628370323719484, 0.03716437050840282, 0.09116373261264799, 0.037079275805374734, 0.08944997280013045, 0.11706566611419422, 0.18931114153752326, 0.14281980106271042, 0.0963378516022172, 0.0854075542242081, 0.11876277534531177, 0.09919677829728257, 0.11773704624869841, 0.10814270389076663, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007944946629040439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016793042669613345, 9.999999999998899e-05, 0.05884019066503243, 9.999999999998899e-05, 0.002175298559437211, 0.034064044762756596, 0.009469868506133405, 0.01766897531054945, 0.004387619056253289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03295962031799993, 0.06601202954109775, 0.04326035288300789, 0.059423165762722774, 0.023647751117461313, 0.04600609881529838, 0.03149173068428013, 0.03202516940616529, 0.045797489406525727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025385883385932173, 9.999999999998899e-05, 0.2137052178488621, 0.1906630682223377, 0.17681185623761553, 0.2027584482592636, 0.18331810877770405, 0.195652183579753, 0.195447978392862, 0.16395627727230744, 0.18575282203137478, 0.029759064155669868, 0.03557332129632362, 0.03466332956503759, 0.03624685006370165, 0.035384327300326146, 0.04270428407149307, 0.0537012725091518, 0.03769194195303571, 0.045291632073598875, 0.13615042339049543, 0.11807053691263503, 0.12092350954353392, 0.1398892735567142, 0.13918139253116002, 0.11646492930211061, 0.14764908991114223, 0.14463761214677429, 0.12209353641585474, 0.163209147231422, 0.15440386030892472, 0.1674733470242381, 0.16324935452401823, 0.16734070447283533, 0.16784347159491153, 0.15686319723105102, 0.17365418936972254, 0.14495936500544648, 0.10305435113463113, 0.09646141277432163, 0.10912851031022652, 0.10103895225059423, 0.12521631490759433, 0.10667026397114732, 0.10143132858473147, 0.12309600972473433, 0.11669485236661181, 0.13263659210657242, 0.1545308851635907, 0.14217540479564017, 0.1528245148474896, 0.13627875514160737, 0.15359005840484463, 0.14561817440523506, 0.1524308844011203, 0.17645674469190364, 0.13120628078998575, 0.14082228911479489, 0.13373259597735865, 0.13194251976228422, 0.13685123848067848, 0.1464758339227561, 0.12540317771914156, 0.13337533122548761, 0.16049206962979679, 0.13795645497244036, 0.16364275077004609, 0.16186866068384187, 0.15424650484691305, 0.14317133521585967, 0.12903285037063672, 0.15344862720382058, 0.15392560603141425, 0.1549345929356547, 0.14841335761077679, 0.14606306629034027, 0.1469974210977889, 0.1340366413049685, 0.13432107091074885, 0.1483436096240941, 0.16203560720296606, 0.1639894612482945, 0.14411502088407102, 0.16476919777895038, 0.18353663367553996, 0.17156193147400756, 0.18426510625974468, 0.20777710959130802, 0.17639505591391558, 0.173799029294739, 0.1788117863059795, 0.20285446579271327, 0.05173639110827133, 0.04904439536474381, 0.06398919820426396, 0.05011862543602075, 0.05861306740348882, 0.04907539819523432, 0.07206159008652135, 0.05270608138412369, 0.04220513814432181]}, "mutation_prompt": null}
