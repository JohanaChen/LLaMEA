{"id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 0, "fitness": 0.41566468037020693, "feedback": "The algorithm HybridGADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.30.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "ac646071-e6ea-4b7d-b030-8a563bd53f12", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "27ef0ead-ceaa-4657-9f74-aafb5d8cfcf5", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "a42bccc6-66bc-482c-a39d-7dfc33c52b1f", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "0b0d3c51-6eec-4f3b-8ca9-86d20d76a622", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "032e756b-8082-4d25-ae7c-742789f6ec2d", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "0c3be14d-6886-4c43-a3e9-8e0d8abc73a5", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
{"id": "5fd5e517-07e4-4d55-9db9-e97807a87a83", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.population_size = 50\n        self.crossover_rate = 0.7\n        self.mutation_factor = 0.5\n        self.population = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.fitness[i] == np.inf:\n                self.fitness[i] = func(self.population[i])\n\n    def select_parents(self):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        return self.population[indices[:2]]\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) < self.crossover_rate\n        child = np.where(mask, parent1, parent2)\n        return child\n\n    def mutate(self, target, best):\n        r1, r2, r3 = self.population[np.random.choice(self.population_size, 3, replace=False)]\n        mutant = target + self.mutation_factor * (best - target) + self.mutation_factor * (r1 - r2) + self.mutation_factor * (r2 - r3)\n        return np.clip(mutant, self.lb, self.ub)\n\n    def __call__(self, func):\n        num_evaluations = 0\n        self.evaluate_population(func)\n        num_evaluations += self.population_size\n\n        while num_evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            best_idx = np.argmin(self.fitness)\n            best = self.population[best_idx]\n\n            for i in range(self.population_size):\n                target = self.population[i]\n                parent1, parent2 = self.select_parents()\n                child = self.crossover(parent1, parent2)\n                mutant = self.mutate(target, best)\n\n                if np.random.rand() < self.crossover_rate:\n                    trial_vector = mutant\n                else:\n                    trial_vector = child\n\n                trial_fitness = func(trial_vector)\n                num_evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    new_population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                else:\n                    new_population[i] = target\n\n                if num_evaluations >= self.budget:\n                    break\n\n            self.population = new_population\n\n        return self.population[np.argmin(self.fitness)]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution for diverse search strategies combining population diversity and adaptive mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "75d8d1ca-fcc3-41df-b715-0fdda4183b60", "metadata": {"aucs": [0.8958060833675489, 0.8945912403445409, 0.9043633540486157, 0.8982531849494897, 0.9007822417755602, 0.9002572234545831, 0.892697638451417, 0.8970608737713828, 0.8972213783331262, 0.5294609925200318, 0.2370302473620154, 0.1522917800514868, 0.807931284882737, 0.8106791384205068, 0.11025603532341044, 0.7641851144460096, 0.7723148185070092, 0.810050538152645, 0.15757332496850063, 0.1809547587219904, 0.13038457585344454, 0.13172291755215848, 0.18372209995105837, 0.7676786823362829, 0.1580390909264412, 0.1811470121982085, 0.31327180941354504, 0.14527316121508282, 0.13180881539598666, 0.13954872310543798, 0.15902948303798714, 0.14543474803390233, 0.11366060167632208, 0.15390433968657868, 0.11871237297214321, 0.1384880766863984, 0.8783987322296112, 0.8400015905947369, 0.7534184882360268, 0.2094474039900066, 0.2006052898707974, 0.2018098144737055, 0.9124690119948, 0.9385840069971383, 0.9391634892085275, 0.3713937338244515, 0.5610642806669077, 0.28716856724297923, 0.5153797990687177, 0.2474143044924666, 0.5323713212769485, 0.5944685274888748, 0.3671411433058639, 0.4373461930528564, 0.9058066319701374, 0.9136236884701326, 0.9121262024443573, 0.9072228368566481, 0.9240741253869278, 0.2788969507912469, 0.24552672596588732, 0.9094526960914364, 0.9065756512548624, 0.16822684588253, 0.10624285391039268, 0.16480336779464688, 0.20448225676973675, 0.23610841338484367, 0.1697570374746833, 0.565825564294695, 0.21051405888747055, 0.16074074778428382, 0.2293147442373873, 0.13065762895209065, 0.13844654436621273, 0.15405610189631302, 0.14685076775002903, 0.13923592386057504, 0.16398570836276738, 0.15028924800888122, 0.17511558504868552, 0.1796600340751402, 0.11924784721810011, 0.07946941910340122, 0.06498732741966928, 0.7427802348223724, 0.1392202286262858, 0.7670128360452, 0.7188996322721117, 0.2479690772646791, 0.8044641534691533, 0.8208880432103567, 0.8149661492681576, 0.7637948148234319, 0.16811735063555022, 0.13892330920521945, 0.8163044062291642, 0.7692397009034391, 0.8186861419864554, 0.1837508824111872, 0.5068966806698245, 0.13954624512668412, 0.27490799153303447, 0.09450084798605951, 0.09685279590985751, 0.15901632841013402, 0.2040110711065004, 0.12261604225235045, 0.6427348438290164, 0.45814324247556415, 0.6987269782423924, 0.6872616687318145, 0.21401246341635016, 0.6530879604460846, 0.361638579005507, 0.5864295938014225, 0.4094955110949482, 0.8584298791574336, 0.7947858643391746, 0.8760861345676321, 0.864053533031008, 0.7433320362158229, 0.7263001728005515, 0.7328570379568249, 0.8670483588318918, 0.7799023409771808, 0.13466718506025788, 0.13048529682863408, 0.1290413984840505, 0.12966065356200906, 0.14681350751475952, 0.13528993888523333, 0.13954205462033553, 0.15024542483440306, 0.1751992200635355, 0.22502223222009776, 0.2682931971703755, 0.28523733106097693, 0.16109265745253687, 0.19549449777623784, 0.19566841260096735, 0.7354042311365043, 0.2847978353921712, 0.5132170130746982, 0.6078471344643362, 0.7034534723123175, 0.7207793424491487, 0.6951686099965709, 0.6701998346501477, 0.7139412737669513, 0.5908508238781023, 0.7209951818109956, 0.7330694753786631, 0.581608789379804, 0.6236019218546107, 0.6558142012075283, 0.5442015518978467, 0.6246653898150052, 0.5773784922496354, 0.23958430055357827, 0.5702807497204714, 0.29516670022960434, 0.19396512554404433, 0.1888063230899366, 0.2716406387718534, 0.2244206307333172, 0.2263790405552203, 0.2187725595727842, 0.20795519581332556, 0.19571722875134623, 0.18977594142834442, 0.20848104792027167, 0.2043232465797481, 0.20550915039426643, 0.21787722388891284, 0.21903874764655706, 0.19840693731704873, 0.19592464484219319, 0.19700308970800318, 0.19096750125101758, 0.18590258984152563, 0.18553347706788648, 0.15285312452725708, 0.8881255344802184, 0.19912522775322772, 0.19801441123179053, 0.14178414247362048, 0.17084246825164828, 0.8717945369760797, 0.9055356724974866, 0.7656055710073223, 0.8885022224400614, 0.9124842357491083, 0.5406989149497614, 0.16703971329961242, 0.104227538670288, 0.8729398982758023, 0.8550480740213804, 0.20073408225526745, 0.2292681206536954, 0.19742260153608127, 0.20540904131019144, 0.18310886674005944, 0.19060303148877178, 0.18756139737593447, 0.19104898241731438, 0.2090772866102859, 0.1010607727510624, 0.10922088240330008, 0.10462313801012568, 0.08687889794733694, 0.112925203810044, 0.07032571117068875, 0.08559110604377673, 0.10638250915091141, 0.10528020890346501]}, "mutation_prompt": null}
