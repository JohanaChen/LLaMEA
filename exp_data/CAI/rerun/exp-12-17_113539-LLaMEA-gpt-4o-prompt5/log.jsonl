{"id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "A hybrid Particle-Swarm and Differential Evolution algorithm (PSO-DE) that adaptively combines exploration and exploitation strategies for efficient optimization.", "configspace": "", "generation": 0, "fitness": 0.3636941960443437, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8882490433803721, 0.8886812168197753, 0.8756484508310929, 0.879845380980669, 0.887621312597673, 0.879023458528948, 0.8854757889937731, 0.8823164400539896, 0.877842894069337, 0.7783232852217414, 0.7631233074771934, 0.7522762266725351, 0.7606524320279903, 0.04767172642977169, 0.7672281691864804, 0.5523494689568504, 0.7648352100554479, 0.05021706721832908, 0.1442597601973814, 0.1818415076502362, 0.12704433381802804, 0.11745674927300565, 0.1303939756527971, 0.12677119038285778, 0.15685143739414942, 0.15516235920208932, 0.17665653973883344, 0.13826655061622295, 0.13034837842953106, 0.13191666807009483, 0.12125627853424503, 0.13632481919460882, 0.11172716365174784, 0.11506056853862445, 0.13063007168219432, 0.11831308196130408, 0.9906208246499979, 0.9859810912373715, 0.9891239033144558, 0.9807530468257812, 0.9753130159899198, 0.9754977794512648, 0.9809334761753365, 0.9827559255790027, 0.9855753490928311, 0.41399557165652534, 0.4017039691569747, 0.47143629464939363, 0.43827044483830846, 0.46526732483640043, 0.43504136864550735, 0.43219869720015314, 0.3976359450846617, 0.29592981815817865, 0.7938555978264374, 0.7631410203302386, 0.3741809516950707, 0.8624305313622544, 0.8501502369748275, 0.7997641600611144, 0.6911227716987458, 0.6847562231792835, 0.7038681231169466, 0.4899507612011452, 0.3423228451014847, 0.37945673849898987, 0.3444960069107771, 0.35605496008041504, 0.12962050029233763, 0.1309077461574477, 0.28368377105389764, 0.35613448928517033, 0.35598197091444406, 0.12273108980201664, 0.3640623946007965, 0.3325210564427945, 0.12002486736317808, 0.3370986815489544, 0.3942791893394737, 0.2605245026547276, 0.338430494072111, 0.13813974401435902, 0.15103743094025945, 0.16662043838612717, 0.18050456172606066, 0.12187912992029837, 0.1308035311133552, 0.14265914905468324, 0.16292752381148057, 0.15106793235661808, 0.29747257143162953, 0.28922073566069073, 0.2663888958676275, 0.26869955667695167, 0.21741894879805446, 0.13348998754527697, 0.28441508511645774, 0.20647962813841692, 0.32843222851930554, 0.20713307200612363, 0.5084352486050154, 0.15388291531320142, 0.1839029135895658, 0.07803802310179908, 0.1236343927010426, 0.11015112198444532, 0.07055199373530652, 0.10803437571402463, 0.20851718241371153, 0.21133579178284112, 0.20123493356628608, 0.1952944780710243, 0.24548873127616289, 0.3165299765583244, 0.2670879632792398, 0.1670447180184177, 0.08280962537513947, 0.6596469246506325, 0.6308984466231773, 0.6222676419676048, 0.6541496536451932, 0.6199903472264303, 0.5721177925503795, 0.5932271305932271, 0.6232109170870231, 0.6074785712424511, 0.11883650085037512, 0.13121743918939643, 0.12622265324852522, 0.1142373658229735, 0.10638894905552676, 0.16266897375317735, 0.08915681526249208, 0.12249278877298642, 0.18210198004805378, 0.17296661805350866, 0.2064578171380732, 0.18777438823058323, 0.2972324835553267, 0.17393157537401915, 0.14514462096424174, 0.2180945951997031, 0.18933284213838886, 0.2065606568691596, 0.5392640609510768, 0.591463133374389, 0.543743090545656, 0.4876374883892307, 0.4767782791448023, 0.6011765418993208, 0.43859844860928565, 0.5432543122618441, 0.5639576100182608, 0.40444646685264474, 0.4071208657198163, 0.307285904478795, 0.30540166635811916, 0.27121043705081027, 0.2750996115424006, 0.3991231463595146, 0.44663948542410103, 0.3958468753872523, 0.2061982451509432, 0.18801268659330195, 0.20305328698800262, 0.1864115807394916, 0.20461371243413373, 0.20166183131444837, 0.18920937907498014, 0.20375623881635585, 0.18980284468592934, 0.23117341771203437, 0.24357888841782316, 0.5616633478753695, 0.7245807688599282, 0.19876072473301787, 0.4725760477448362, 0.2170392418289292, 0.22488040403333465, 0.24474991330741624, 0.1872240155394156, 0.1867624250094252, 0.15371934101053752, 0.8977824692702083, 0.20140949446374778, 0.20151383576028536, 0.1687242096968422, 0.1698085110068167, 0.9009695949888991, 0.793607979829145, 0.15618087589175633, 0.5790522853345408, 0.2091343531541764, 0.8279950726153031, 0.6948161451718415, 0.1042405536783837, 0.21040097723893803, 0.8218739800021347, 0.18000962891408545, 0.19971119814906757, 0.20023193503577996, 0.18392455739768265, 0.1749874012571503, 0.1910916852737281, 0.1839346904964082, 0.1768775708027015, 0.16982169041801043, 0.08458934680252228, 0.06999082145035229, 0.09044835841508159, 0.07506705577736705, 0.08947882154037157, 0.09875748936845663, 0.08212096859263307, 0.07436919440615153, 0.07572896026167686]}, "mutation_prompt": null}
{"id": "3b022fb2-5693-4373-ab5b-a1b2ed99495e", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Adaptive inertia weight\n            self.w = 0.9 - (0.5 * evals / self.budget)\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSO-DE by introducing adaptive inertia weight for improved convergence rate.", "configspace": "", "generation": 1, "fitness": 0.27487044760374063, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6450066357348168, 0.6556741162725426, 0.6641880074114157, 0.6422782636982811, 0.6837012742981247, 0.6288656623397595, 0.6457423114107598, 0.686447327617414, 0.6795191179213853, 0.46959284827885317, 0.4672678617578847, 0.4822802397034275, 0.4681490104785152, 0.44592178129903537, 0.05686573915991955, 0.4205404704892546, 0.4820715741789676, 0.46016836213987167, 0.1274074872381008, 0.10126566633121892, 0.1038465189389699, 0.07776497958186246, 0.0864463053236999, 0.08068468386295158, 0.08123215447427778, 0.1083906587871839, 0.08629907829289019, 0.10187080424416073, 0.10184439293328018, 0.07204304954442708, 0.07308075664940372, 0.07779315403584097, 0.07906274869634067, 0.08741585669053753, 0.06919051603792281, 0.09657649731850071, 0.9868409305302925, 0.9866682706662133, 0.9913363341508226, 0.9835210938526167, 0.9855327703130672, 0.973615109061198, 0.9863503262284242, 0.9830938663083006, 0.9858046325155919, 0.2622022322675507, 0.05843608801785505, 0.2849986447151951, 0.14240250165237844, 0.32635552602486273, 0.14640312243878906, 0.2866716206022165, 0.2704184411460242, 0.2670858643358235, 0.4961527161269229, 0.43227976661236367, 0.632913516706842, 0.5222814703499539, 0.6064003719964626, 0.5632596550606709, 0.5580897911038232, 0.4973468338700666, 0.6066679836352784, 0.17610239007886708, 0.1800553250391851, 0.18168534677475334, 0.2249876164185174, 0.2116700931179134, 0.18332231834049728, 0.17781577022563866, 0.1715071569932921, 0.2086131993784024, 0.20344555110703866, 0.010156320201082591, 0.21188094803497604, 0.22507303375026733, 0.18758973833584214, 0.1891757108630714, 0.19427305250777205, 0.15829803315851443, 0.17226605503218362, 0.13200545528525176, 0.12853313639061348, 0.10993094351373567, 0.21086680260109802, 0.09203937757173042, 0.08986405994989743, 0.11457048472521314, 0.08788455187916788, 0.10722561877909298, 0.27210228919053137, 0.2280526592335026, 0.24162163145586468, 0.24585204894118406, 0.22821164071309608, 0.17751215660023467, 0.3137334531433996, 0.30328725022914627, 0.23938286409241127, 0.004231373418962514, 0.02445876733026109, 0.023262211055195214, 0.04538974940081153, 0.05817600356560182, 0.023323393870384512, 0.013576145997712064, 0.017025631721576118, 0.024800210991984595, 0.1238065217292571, 0.12872697873966843, 0.14268594879549779, 0.13351096076345714, 0.1392115374306956, 0.13172349301705888, 0.14604595671011378, 0.14193485787773474, 0.1503241884764882, 0.4547489726412206, 0.4612377397023524, 0.4299468136852027, 0.4878846790200072, 0.4588990844243477, 0.46332058665545217, 0.448879485681551, 0.45938875824339886, 0.4674807534074562, 0.0827840018828343, 0.09354141382168657, 0.08806462858972863, 0.0848204273819183, 0.08626802578892456, 0.08770235627218048, 0.09042180583612047, 0.08274225592619111, 0.08288630982027878, 0.1760546581536333, 0.2466812005341371, 0.1631925492768641, 0.29018257502652456, 0.2089036822220932, 0.16374828705721334, 0.269937126542528, 0.1759527383141134, 0.15073488203697416, 0.3065979407362257, 0.3139883683428646, 0.33708903784341304, 0.2680470436109479, 0.32346481318371356, 0.31589387950560344, 0.36595490145002163, 0.3398407549495932, 0.35040097427326977, 0.2028725647366909, 0.21928842561382, 0.19434655452192562, 0.1822184881359462, 0.21900258017235041, 0.20310775218405075, 0.24574452029226546, 0.22042535260500573, 0.2076965789430878, 0.17745502626206167, 0.171704388009988, 0.1815776941109759, 0.16930379732376855, 0.1752524647784689, 0.18359907666304132, 0.17736187882391385, 0.22021983378984122, 0.17271265650490408, 0.1794161464127868, 0.17702227524250647, 0.1728478772705634, 0.1830206189279021, 0.1781575905289141, 0.17841830019941518, 0.17791690807727156, 0.1852532253118495, 0.17391260209917314, 0.17769741859966237, 0.6440241426424878, 0.15351688686965992, 0.17573775471347086, 0.6055965473197636, 0.1967195566028942, 0.19185291773948587, 0.16799243717922474, 0.5798557071563748, 0.637996833560678, 0.5624854527547768, 0.5700951242919331, 0.20309081485400315, 0.6251807709177855, 0.5954625891550535, 0.10496358504407566, 0.21083731946877393, 0.6698090480180248, 0.19250057586772795, 0.1914882253118837, 0.1851151806685195, 0.17949910862620855, 0.2085238304983723, 0.18248445302684835, 0.18037091633264113, 0.1946861884246337, 0.1810978538800494, 0.06981811570456087, 0.0621765345855021, 0.06200749303123032, 0.0733775608391597, 0.061444150923368746, 0.06838771772573304, 0.0641266503429142, 0.07494239281949955, 0.07708272952106088]}, "mutation_prompt": null}
{"id": "aa1e4dca-ba95-4487-b5d8-9cbb2141c344", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        iter_count = 0\n\n        while evals < self.budget:\n            # Adaptive inertia weight\n            self.w = 0.9 - 0.5 * (evals / self.budget)\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "A refined PSO-DE hybrid algorithm incorporating adaptive inertia weight for improved convergence.", "configspace": "", "generation": 2, "fitness": 0.27487044760374063, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6450066357348168, 0.6556741162725426, 0.6641880074114157, 0.6422782636982811, 0.6837012742981247, 0.6288656623397595, 0.6457423114107598, 0.686447327617414, 0.6795191179213853, 0.46959284827885317, 0.4672678617578847, 0.4822802397034275, 0.4681490104785152, 0.44592178129903537, 0.05686573915991955, 0.4205404704892546, 0.4820715741789676, 0.46016836213987167, 0.1274074872381008, 0.10126566633121892, 0.1038465189389699, 0.07776497958186246, 0.0864463053236999, 0.08068468386295158, 0.08123215447427778, 0.1083906587871839, 0.08629907829289019, 0.10187080424416073, 0.10184439293328018, 0.07204304954442708, 0.07308075664940372, 0.07779315403584097, 0.07906274869634067, 0.08741585669053753, 0.06919051603792281, 0.09657649731850071, 0.9868409305302925, 0.9866682706662133, 0.9913363341508226, 0.9835210938526167, 0.9855327703130672, 0.973615109061198, 0.9863503262284242, 0.9830938663083006, 0.9858046325155919, 0.2622022322675507, 0.05843608801785505, 0.2849986447151951, 0.14240250165237844, 0.32635552602486273, 0.14640312243878906, 0.2866716206022165, 0.2704184411460242, 0.2670858643358235, 0.4961527161269229, 0.43227976661236367, 0.632913516706842, 0.5222814703499539, 0.6064003719964626, 0.5632596550606709, 0.5580897911038232, 0.4973468338700666, 0.6066679836352784, 0.17610239007886708, 0.1800553250391851, 0.18168534677475334, 0.2249876164185174, 0.2116700931179134, 0.18332231834049728, 0.17781577022563866, 0.1715071569932921, 0.2086131993784024, 0.20344555110703866, 0.010156320201082591, 0.21188094803497604, 0.22507303375026733, 0.18758973833584214, 0.1891757108630714, 0.19427305250777205, 0.15829803315851443, 0.17226605503218362, 0.13200545528525176, 0.12853313639061348, 0.10993094351373567, 0.21086680260109802, 0.09203937757173042, 0.08986405994989743, 0.11457048472521314, 0.08788455187916788, 0.10722561877909298, 0.27210228919053137, 0.2280526592335026, 0.24162163145586468, 0.24585204894118406, 0.22821164071309608, 0.17751215660023467, 0.3137334531433996, 0.30328725022914627, 0.23938286409241127, 0.004231373418962514, 0.02445876733026109, 0.023262211055195214, 0.04538974940081153, 0.05817600356560182, 0.023323393870384512, 0.013576145997712064, 0.017025631721576118, 0.024800210991984595, 0.1238065217292571, 0.12872697873966843, 0.14268594879549779, 0.13351096076345714, 0.1392115374306956, 0.13172349301705888, 0.14604595671011378, 0.14193485787773474, 0.1503241884764882, 0.4547489726412206, 0.4612377397023524, 0.4299468136852027, 0.4878846790200072, 0.4588990844243477, 0.46332058665545217, 0.448879485681551, 0.45938875824339886, 0.4674807534074562, 0.0827840018828343, 0.09354141382168657, 0.08806462858972863, 0.0848204273819183, 0.08626802578892456, 0.08770235627218048, 0.09042180583612047, 0.08274225592619111, 0.08288630982027878, 0.1760546581536333, 0.2466812005341371, 0.1631925492768641, 0.29018257502652456, 0.2089036822220932, 0.16374828705721334, 0.269937126542528, 0.1759527383141134, 0.15073488203697416, 0.3065979407362257, 0.3139883683428646, 0.33708903784341304, 0.2680470436109479, 0.32346481318371356, 0.31589387950560344, 0.36595490145002163, 0.3398407549495932, 0.35040097427326977, 0.2028725647366909, 0.21928842561382, 0.19434655452192562, 0.1822184881359462, 0.21900258017235041, 0.20310775218405075, 0.24574452029226546, 0.22042535260500573, 0.2076965789430878, 0.17745502626206167, 0.171704388009988, 0.1815776941109759, 0.16930379732376855, 0.1752524647784689, 0.18359907666304132, 0.17736187882391385, 0.22021983378984122, 0.17271265650490408, 0.1794161464127868, 0.17702227524250647, 0.1728478772705634, 0.1830206189279021, 0.1781575905289141, 0.17841830019941518, 0.17791690807727156, 0.1852532253118495, 0.17391260209917314, 0.17769741859966237, 0.6440241426424878, 0.15351688686965992, 0.17573775471347086, 0.6055965473197636, 0.1967195566028942, 0.19185291773948587, 0.16799243717922474, 0.5798557071563748, 0.637996833560678, 0.5624854527547768, 0.5700951242919331, 0.20309081485400315, 0.6251807709177855, 0.5954625891550535, 0.10496358504407566, 0.21083731946877393, 0.6698090480180248, 0.19250057586772795, 0.1914882253118837, 0.1851151806685195, 0.17949910862620855, 0.2085238304983723, 0.18248445302684835, 0.18037091633264113, 0.1946861884246337, 0.1810978538800494, 0.06981811570456087, 0.0621765345855021, 0.06200749303123032, 0.0733775608391597, 0.061444150923368746, 0.06838771772573304, 0.0641266503429142, 0.07494239281949955, 0.07708272952106088]}, "mutation_prompt": null}
{"id": "4ade1171-a19b-4789-afa3-0e113940b1aa", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Adaptive inertia weight\n            self.w = 0.9 - 0.5 * (evals / self.budget)\n            \n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                # Adaptive mutation strategy\n                self.CR = 0.9 * (1 - evals / self.budget) + 0.1\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by incorporating adaptive inertia weight and mutation strategy for improved convergence.", "configspace": "", "generation": 3, "fitness": 0.26238997191337243, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6482199004525748, 0.6626920756529614, 0.6743816203437631, 0.6523402479573208, 0.6828825307176583, 0.7034579806457048, 0.677589246868723, 0.6689742967931667, 0.6943568941857386, 0.47907549169147234, 0.4430931719222777, 0.4897176723793446, 0.44540609318379587, 0.46938901714694214, 0.502790544786909, 0.5065916498596323, 0.4759730041959893, 0.5092243569068964, 0.10195377646807124, 0.1114791399040832, 0.09464568700803844, 0.1406696002280442, 0.13259035313663992, 0.10442002717251964, 0.09069993135969667, 0.13065642703725044, 0.09807225878305925, 0.11496682823852356, 0.10081530233266511, 0.0984783462372929, 0.08932922518147046, 0.10219740649975284, 0.09217649985138321, 0.08543909668907324, 0.08402707795773245, 0.11976944528766631, 0.9860682223404079, 0.9864382473514827, 0.9913360744092493, 0.9835568706208471, 0.9854692907359378, 0.9718442032617126, 0.9864254542537673, 0.9814302363221067, 0.9839099389237757, 0.30557292183181184, 0.2934823854311026, 0.2929382976220477, 0.3181852283571247, 0.15626394687544765, 0.3512016846874191, 0.2935105628240342, 0.3219610494661671, 0.31297395959125596, 0.4572450248631612, 0.4630857020555461, 0.3006176837859612, 0.33471711421361094, 0.5799104867907272, 0.2742011625941829, 0.5104005798642683, 0.47289562338360847, 0.29099839147405626, 0.13694291151731053, 0.1568412957158103, 0.14114539043524388, 0.15718315844968278, 0.1367576626700009, 0.15315265498530695, 0.16519473798749618, 0.13718671133288896, 0.15892513216957416, 0.1671166464401651, 0.015987441288667137, 0.12767329748032696, 0.17762343924129687, 0.14337161355607264, 0.1625430832838134, 0.16926687652677297, 0.18344667550252702, 0.154409580916969, 0.023497133935299286, 0.004884250352776842, 0.011099525659600262, 0.05161712427253351, 0.009167577153373019, 9.999999999998899e-05, 0.022134542170293536, 0.009992263510794852, 0.009785764653268636, 0.17133848155118991, 0.10814561383658217, 0.11985857513364229, 0.09921437037141201, 0.1176490280227066, 0.104052235085215, 0.165409507802732, 0.17103610425732318, 0.16916501769819992, 0.032916936182089906, 0.015092960601217786, 0.07334260204827425, 0.03517155753946777, 0.02379358866754555, 0.03310108730587291, 0.07579161131423551, 0.04411596432376719, 0.045103515952642725, 0.1376052916834093, 0.1343404036705057, 0.11310021113182411, 0.11702251056365132, 0.1758184629422882, 0.18700537249617255, 0.18995140387221243, 0.12518439583893648, 0.11426162036207299, 0.4342646616337684, 0.45553792619068645, 0.44579240519553776, 0.46792603970070135, 0.4635687700400608, 0.45549077113681213, 0.452989340235461, 0.448765789449766, 0.4541869618330313, 0.08589874457104452, 0.09315007313612367, 0.0833029718746513, 0.09127892998919906, 0.08730663063556898, 0.10575409787436618, 0.07959878536141474, 0.08598840363511717, 0.09043398657311186, 0.18314013322949863, 0.16582044285958442, 0.15472713302595498, 0.16214405952935318, 0.14663136909671481, 0.1641964591997077, 0.18017193937845588, 0.17705025667310526, 0.19180533163715174, 0.277481747888667, 0.28293555124837133, 0.3248033731278398, 0.2742172244245482, 0.32642822993382403, 0.3073277475821117, 0.33923997279295415, 0.3404916192788304, 0.37151598962223287, 0.2577844303693232, 0.22552024872464183, 0.231565512358183, 0.21494474417499598, 0.19465344766505244, 0.25792166191777555, 0.2716685436895496, 0.20897832298641794, 0.2540693188182426, 0.22125168686432317, 0.1789467420060069, 0.17802518022309255, 0.18782083105000458, 0.17364693654278796, 0.18247306988019663, 0.1883127810849301, 0.17559059207992667, 0.18307140390538157, 0.18924738990328172, 0.20228272186309937, 0.18247482443721286, 0.2029465037590079, 0.19087918115090075, 0.19331354848336646, 0.17916275930697378, 0.2053609955593232, 0.18764297279167452, 0.46892531312072827, 0.2501076437312465, 0.15342894476105207, 0.5716201582979054, 0.19533526101288112, 0.1970556171921075, 0.5419273754322346, 0.16788611933889186, 0.6630956156553662, 0.41907370542757094, 0.15604451748309678, 0.3521972686762982, 0.43252318243583276, 0.46710941959557273, 0.5726234982661242, 0.10495011571521151, 0.20474144345160983, 0.4711072731599455, 0.1937642365996255, 0.18432775661511358, 0.203234743954547, 0.1964736429602043, 0.18855536589685207, 0.1771558112086774, 0.2060032665622472, 0.18758359600328245, 0.1900646947232555, 0.07605443465606043, 0.06669280595005345, 0.06724192195731471, 0.07493582119450093, 0.07862709124168654, 0.07001042771894339, 0.0636693984396185, 0.07293791755200296, 0.06741081565207552]}, "mutation_prompt": null}
{"id": "d3210f3b-b074-4a0c-97fc-5984690e2840", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n            \n            # Random restart mechanism\n            if evals == self.budget // 2:  # Triggers restart halfway through budget\n                pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n                vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n                pbest_pos = np.copy(pos)\n                pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n                gbest_pos = pbest_pos[np.argmin(pbest_val)]\n                gbest_val = np.min(pbest_val)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced a random restart mechanism to enhance exploration and avoid local optima.", "configspace": "", "generation": 4, "fitness": 0.3636941960443437, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.8882490433803721, 0.8886812168197753, 0.8756484508310929, 0.879845380980669, 0.887621312597673, 0.879023458528948, 0.8854757889937731, 0.8823164400539896, 0.877842894069337, 0.7783232852217414, 0.7631233074771934, 0.7522762266725351, 0.7606524320279903, 0.04767172642977169, 0.7672281691864804, 0.5523494689568504, 0.7648352100554479, 0.05021706721832908, 0.1442597601973814, 0.1818415076502362, 0.12704433381802804, 0.11745674927300565, 0.1303939756527971, 0.12677119038285778, 0.15685143739414942, 0.15516235920208932, 0.17665653973883344, 0.13826655061622295, 0.13034837842953106, 0.13191666807009483, 0.12125627853424503, 0.13632481919460882, 0.11172716365174784, 0.11506056853862445, 0.13063007168219432, 0.11831308196130408, 0.9906208246499979, 0.9859810912373715, 0.9891239033144558, 0.9807530468257812, 0.9753130159899198, 0.9754977794512648, 0.9809334761753365, 0.9827559255790027, 0.9855753490928311, 0.41399557165652534, 0.4017039691569747, 0.47143629464939363, 0.43827044483830846, 0.46526732483640043, 0.43504136864550735, 0.43219869720015314, 0.3976359450846617, 0.29592981815817865, 0.7938555978264374, 0.7631410203302386, 0.3741809516950707, 0.8624305313622544, 0.8501502369748275, 0.7997641600611144, 0.6911227716987458, 0.6847562231792835, 0.7038681231169466, 0.4899507612011452, 0.3423228451014847, 0.37945673849898987, 0.3444960069107771, 0.35605496008041504, 0.12962050029233763, 0.1309077461574477, 0.28368377105389764, 0.35613448928517033, 0.35598197091444406, 0.12273108980201664, 0.3640623946007965, 0.3325210564427945, 0.12002486736317808, 0.3370986815489544, 0.3942791893394737, 0.2605245026547276, 0.338430494072111, 0.13813974401435902, 0.15103743094025945, 0.16662043838612717, 0.18050456172606066, 0.12187912992029837, 0.1308035311133552, 0.14265914905468324, 0.16292752381148057, 0.15106793235661808, 0.29747257143162953, 0.28922073566069073, 0.2663888958676275, 0.26869955667695167, 0.21741894879805446, 0.13348998754527697, 0.28441508511645774, 0.20647962813841692, 0.32843222851930554, 0.20713307200612363, 0.5084352486050154, 0.15388291531320142, 0.1839029135895658, 0.07803802310179908, 0.1236343927010426, 0.11015112198444532, 0.07055199373530652, 0.10803437571402463, 0.20851718241371153, 0.21133579178284112, 0.20123493356628608, 0.1952944780710243, 0.24548873127616289, 0.3165299765583244, 0.2670879632792398, 0.1670447180184177, 0.08280962537513947, 0.6596469246506325, 0.6308984466231773, 0.6222676419676048, 0.6541496536451932, 0.6199903472264303, 0.5721177925503795, 0.5932271305932271, 0.6232109170870231, 0.6074785712424511, 0.11883650085037512, 0.13121743918939643, 0.12622265324852522, 0.1142373658229735, 0.10638894905552676, 0.16266897375317735, 0.08915681526249208, 0.12249278877298642, 0.18210198004805378, 0.17296661805350866, 0.2064578171380732, 0.18777438823058323, 0.2972324835553267, 0.17393157537401915, 0.14514462096424174, 0.2180945951997031, 0.18933284213838886, 0.2065606568691596, 0.5392640609510768, 0.591463133374389, 0.543743090545656, 0.4876374883892307, 0.4767782791448023, 0.6011765418993208, 0.43859844860928565, 0.5432543122618441, 0.5639576100182608, 0.40444646685264474, 0.4071208657198163, 0.307285904478795, 0.30540166635811916, 0.27121043705081027, 0.2750996115424006, 0.3991231463595146, 0.44663948542410103, 0.3958468753872523, 0.2061982451509432, 0.18801268659330195, 0.20305328698800262, 0.1864115807394916, 0.20461371243413373, 0.20166183131444837, 0.18920937907498014, 0.20375623881635585, 0.18980284468592934, 0.23117341771203437, 0.24357888841782316, 0.5616633478753695, 0.7245807688599282, 0.19876072473301787, 0.4725760477448362, 0.2170392418289292, 0.22488040403333465, 0.24474991330741624, 0.1872240155394156, 0.1867624250094252, 0.15371934101053752, 0.8977824692702083, 0.20140949446374778, 0.20151383576028536, 0.1687242096968422, 0.1698085110068167, 0.9009695949888991, 0.793607979829145, 0.15618087589175633, 0.5790522853345408, 0.2091343531541764, 0.8279950726153031, 0.6948161451718415, 0.1042405536783837, 0.21040097723893803, 0.8218739800021347, 0.18000962891408545, 0.19971119814906757, 0.20023193503577996, 0.18392455739768265, 0.1749874012571503, 0.1910916852737281, 0.1839346904964082, 0.1768775708027015, 0.16982169041801043, 0.08458934680252228, 0.06999082145035229, 0.09044835841508159, 0.07506705577736705, 0.08947882154037157, 0.09875748936845663, 0.08212096859263307, 0.07436919440615153, 0.07572896026167686]}, "mutation_prompt": null}
{"id": "cf69607d-d8be-4e9c-8d85-4049957fc8b7", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w = 0.4 + 0.5 * (1 - evals / self.budget) # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                np.random.shuffle(idxs) # Randomize order for mutation vector selection\n                a, b, c = idxs[:3]\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by introducing adaptive inertia weight and randomization in DE mutation vector selection to improve convergence.", "configspace": "", "generation": 5, "fitness": 0.27487040480269737, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6450066355861344, 0.6556741163774875, 0.6641880074353804, 0.6422782639348015, 0.6837012744708874, 0.6288656621043682, 0.6457423114090126, 0.6864473277364144, 0.6795191179664808, 0.469592724743366, 0.4672672374637338, 0.4822802485806458, 0.46814449494730126, 0.4459209057458162, 0.05686573915992654, 0.42053725028511757, 0.4820716533937328, 0.46016841343154635, 0.1274074872381008, 0.10126566633121892, 0.1038465189389699, 0.07776497958186246, 0.0864463053236999, 0.08068468386295158, 0.08123215447428866, 0.1083906587871839, 0.08629907829289019, 0.10187080424416073, 0.10184439293328018, 0.07204304954442708, 0.07308075664940372, 0.07779315403583864, 0.0790627486963571, 0.08741585669053753, 0.06919051603792281, 0.09657649731864204, 0.9868409305302925, 0.9866682706662133, 0.9913363341508226, 0.9835210938526167, 0.9855327703130672, 0.973615109061198, 0.9863503262284242, 0.9830938663083006, 0.9858046325155919, 0.26220223228323336, 0.058436088017871035, 0.2849986447166536, 0.1424025016524565, 0.32635552519306243, 0.14640312243898046, 0.28667162049701245, 0.27041844137963267, 0.26708586426908454, 0.4961527161269229, 0.43227976661236367, 0.632913516706842, 0.5222814703499539, 0.6064003719964626, 0.5632596550606709, 0.5580897911038232, 0.4973468338700666, 0.6066679836352784, 0.1761023901159675, 0.18005532519515932, 0.18168534680902926, 0.22498761643217613, 0.21167009309200036, 0.18332231841824187, 0.17781577022488726, 0.17150715698335484, 0.2086131993888639, 0.20344555112110962, 0.010156320201082591, 0.211880948031003, 0.22507303369617337, 0.18758973835681692, 0.18917571087000273, 0.1942730525088875, 0.15829803315387125, 0.17226605504070935, 0.1320054552686596, 0.12853313639714303, 0.10993094350550003, 0.21086680261315816, 0.09203937762775805, 0.08986405995261115, 0.11457048472377429, 0.08788455187378807, 0.10722561878474712, 0.27210228919262314, 0.22805265912918016, 0.24162163144936977, 0.24585204891857837, 0.22821164068834565, 0.17751215660054365, 0.3137334531893705, 0.303287250144075, 0.23938286415391763, 0.004231373419280482, 0.024458767328710884, 0.02326221104723647, 0.04538974939828766, 0.05817600371248177, 0.023323393869865372, 0.013576145998325462, 0.01702563170713034, 0.024800210989966542, 0.12380652173400508, 0.12872697873570282, 0.14268594876748497, 0.1335109607427929, 0.1392115373943743, 0.1317234930201283, 0.14604595679790522, 0.14193485788495508, 0.15032418847842233, 0.4547489727584231, 0.4612377390056144, 0.4299468166181888, 0.4878846789075395, 0.4588990649574415, 0.46332058486084315, 0.4488794853731466, 0.4593887576156074, 0.4674807578662281, 0.0827840018828343, 0.09354141382168657, 0.08806462858980235, 0.0848204273819183, 0.08626802578892456, 0.08770235627218048, 0.09042180583612047, 0.08274225592619111, 0.08288630982027878, 0.17605465815360744, 0.2466812005340948, 0.1631925492768811, 0.2901825752680066, 0.20890368222229094, 0.1637482870572038, 0.2699371265426973, 0.17595273831412883, 0.1507348820514136, 0.3065979407525061, 0.3139883683416491, 0.33708903785024835, 0.26804704361097687, 0.32346481317527775, 0.315893879503776, 0.36595489137796755, 0.33984075499432176, 0.3504009743284383, 0.20287256473642024, 0.21928842561381745, 0.19434655452229543, 0.18221848813599273, 0.219002580172464, 0.20310775218381572, 0.24574452029376193, 0.2204253526042056, 0.20769657894320548, 0.17745502626206144, 0.17170438800998522, 0.18157769411097613, 0.1693037973237711, 0.1752524647781769, 0.18359907666304942, 0.17736187882391352, 0.2202198337903043, 0.17271265650490386, 0.17941614641278647, 0.17702227524250136, 0.1728478772705634, 0.1830206189279021, 0.1781575905289141, 0.17841830019941518, 0.17791690807727156, 0.1852532253118495, 0.17391260209917314, 0.17769741859966237, 0.6440241426424299, 0.15351688686965992, 0.17573775471347086, 0.6055965473193025, 0.1967195566028942, 0.19185291773951763, 0.1679924371792224, 0.5798557071552728, 0.637996833567089, 0.562485452770467, 0.5700951242920229, 0.20309081485400315, 0.6251807709284827, 0.5954625891546582, 0.10496358504407566, 0.21083731946876694, 0.6698090480188692, 0.19250057586772795, 0.1914882253118837, 0.18511518066840404, 0.17949910862623697, 0.2085238304790339, 0.18248445302684835, 0.18037091633264046, 0.1946861884246326, 0.1810978538800494, 0.06981811570456087, 0.0621765345855021, 0.06200749303123032, 0.0733775608391597, 0.061444150923368746, 0.06838771772573304, 0.0641266503429142, 0.07494239281949955, 0.07708272952106088]}, "mutation_prompt": null}
{"id": "56e65b32-823e-41a1-bdcf-2214f9f0dc3a", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.9, c1=1.5, c2=1.5, F=0.8, CR=0.9):  # Line 3\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Update inertia weight\n            self.w = 0.4 + 0.5 * (self.budget - evals) / self.budget  # Line 26\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSO-DE with dynamic inertia weight to balance exploration and exploitation adaptively.", "configspace": "", "generation": 6, "fitness": 0.27487040479631186, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6450066355864006, 0.6556741163776845, 0.6641880074347549, 0.642278263933141, 0.6837012744711561, 0.6288656621045207, 0.6457423114100536, 0.6864473277363383, 0.6795191179670612, 0.4695927247403954, 0.46726723609902976, 0.4822802485830835, 0.4681444949557704, 0.4459209057433864, 0.05686573915992654, 0.4205372502274203, 0.4820716534376476, 0.4601684135940932, 0.1274074872381008, 0.10126566633121892, 0.1038465189389699, 0.07776497958186246, 0.0864463053236999, 0.08068468386295158, 0.08123215447428866, 0.1083906587871839, 0.08629907829289019, 0.10187080424416095, 0.10184439293328018, 0.07204304954442708, 0.07308075664940372, 0.07779315403583864, 0.0790627486963571, 0.08741585669053753, 0.06919051603792281, 0.09657649731864204, 0.9868409305302925, 0.9866682706662133, 0.9913363341508226, 0.9835210938526167, 0.9855327703130672, 0.973615109061198, 0.9863503262284242, 0.9830938663083006, 0.9858046325155919, 0.2622022322834624, 0.058436088017871035, 0.2849986447167657, 0.1424025016524565, 0.32635552519256494, 0.14640312243898201, 0.2866716204955524, 0.2704184413754075, 0.2670858642690208, 0.4961527161269229, 0.43227976661236367, 0.632913516706842, 0.5222814703499539, 0.6064003719964626, 0.5632596550606709, 0.5580897911038232, 0.4973468338700666, 0.6066679836352784, 0.1761023901159302, 0.1800553251922924, 0.18168534680572646, 0.22498761643284815, 0.2116700930919282, 0.18332231841512614, 0.17781577022486839, 0.17150715698335028, 0.20861319938845957, 0.20344555112117024, 0.010156320201082591, 0.2118809480295616, 0.22507303369528875, 0.1875897383507792, 0.18917571087054352, 0.19427305250888838, 0.15829803315444535, 0.17226605504074055, 0.13200545526800145, 0.12853313639714303, 0.10993094350541721, 0.21086680261315816, 0.09203937762789971, 0.08986405995261115, 0.11457048472376341, 0.087884551873604, 0.10722561878474712, 0.27210228919262314, 0.22805265912962047, 0.24162163144936977, 0.24585204891857837, 0.22821164068834565, 0.17751215660054365, 0.3137334531893705, 0.3032872501440068, 0.23938286415389598, 0.004231373419280482, 0.024458767328710884, 0.02326221104723647, 0.0453897493980121, 0.05817600371253262, 0.023323393869865372, 0.013576145998325462, 0.017025631707018096, 0.0248002109899087, 0.12380652173402107, 0.12872697873584127, 0.14268594876720941, 0.13351096074282665, 0.13921153739475245, 0.13172349301999786, 0.1460459567978576, 0.14193485788495508, 0.15032418847827644, 0.45474897275777326, 0.461237738999812, 0.42994681663698164, 0.4878846789054113, 0.45889906492346, 0.4633205848482841, 0.4488794852462372, 0.4593887576192477, 0.4674807578926863, 0.0827840018828343, 0.09354141382168657, 0.08806462858980235, 0.0848204273819183, 0.08626802578892456, 0.08770235627218048, 0.09042180583612047, 0.08274225592619111, 0.08288630982027878, 0.17605465815361554, 0.24668120053649611, 0.1631925492768811, 0.29018257526812696, 0.20890368222254185, 0.1637482870572038, 0.2699371265427508, 0.1759527383140923, 0.1507348820514186, 0.3065979407524827, 0.31398836834163524, 0.3370890378501381, 0.268047043610953, 0.3234648131763789, 0.3158938795018752, 0.36595489137345316, 0.33984075498291, 0.3504009743287768, 0.20287256473660842, 0.21928842561381412, 0.19434655452229543, 0.18221848813599273, 0.21900258017243568, 0.20310775218381627, 0.24574452029378968, 0.2204253526042086, 0.20769657894320548, 0.17745502626206144, 0.17170438800998522, 0.1815776941110031, 0.1693037973237711, 0.17525246477826018, 0.18359907666304942, 0.17736187882391352, 0.2202198337903043, 0.17271265650490386, 0.17941614641278647, 0.17702227524250136, 0.1728478772705634, 0.1830206189279021, 0.1781575905289141, 0.17841830019941518, 0.17791690807727156, 0.1852532253118495, 0.17391260209917314, 0.17769741859966237, 0.6440241426424276, 0.15351688686965992, 0.17573775471347086, 0.6055965473193093, 0.1967195566028942, 0.19185291773951763, 0.1679924371792224, 0.5798557071553472, 0.6379968335670892, 0.5624854527706844, 0.5700951242920502, 0.20309081485400315, 0.6251807709288466, 0.5954625891546577, 0.10496358504407566, 0.21083731946876694, 0.6698090480188574, 0.19250057586772795, 0.1914882253118837, 0.18511518066840404, 0.17949910862623697, 0.2085238304790582, 0.18248445302684835, 0.18037091633264046, 0.1946861884246326, 0.1810978538800494, 0.06981811570456087, 0.0621765345855021, 0.06200749303123032, 0.0733775608391597, 0.061444150923368746, 0.06838771772573304, 0.0641266503429142, 0.07494239281949955, 0.07708272952106088]}, "mutation_prompt": null}
{"id": "2f0922b8-305f-41ff-a38c-9151152c044a", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = 0.7 * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)  # Change 1\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < (self.CR + 0.1)  # Change 2\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "A refined PSO-DE algorithm with improved velocity update and diversity enhancement for better convergence and exploration balance.", "configspace": "", "generation": 7, "fitness": 0.3292701530820307, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.7504145715917554, 0.7765270575289123, 0.7377013484294261, 0.7367350294195618, 0.7735799339476139, 0.7491587451458276, 0.7573783505691458, 0.7619037152728243, 0.7293172026648955, 0.5033552409009302, 0.5604725883159861, 0.5545899723772683, 0.48869715212968345, 0.49848796005080853, 0.5031362366649783, 0.5818201754795347, 0.5116096206386027, 0.4953822460832481, 0.08954559095830994, 0.10380902548891902, 0.08646276940925801, 0.0957622990532273, 0.09718032659476361, 0.10252898045264791, 0.09315263178782662, 0.14955699387121624, 0.07836741893588894, 0.08606430239449148, 0.09569115979327869, 0.13237268204425, 0.09554317225702602, 0.08577956245637774, 0.08773228431308722, 0.09863377511238758, 0.08667258163176417, 0.0787416505737043, 0.9860547702300542, 0.9863828397288532, 0.9867346285426801, 0.9834731685018245, 0.9751032371702667, 0.9733058184216205, 0.9835364766322496, 0.9814224298894435, 0.9853771728880012, 0.27932587332498793, 0.31436931666129353, 0.37584884665085827, 0.3495611640021795, 0.1499975038168042, 0.33565485419245455, 0.3328017334378621, 0.32163627866007494, 0.31991984462686174, 0.5458159476446229, 0.6085072453615012, 0.715766150273407, 0.7056760223278989, 0.6824945245922693, 0.6954751736653038, 0.600517226323103, 0.6920744631759319, 0.7356172622884674, 0.3673168539931898, 0.25903180496995937, 0.3942470290859229, 0.25965974594933805, 0.29631569137924985, 0.2668955266605785, 0.2900322897802772, 0.4389252093027437, 0.3759827672162116, 0.280671050297427, 0.01613228478772366, 0.28411443540085124, 0.2956833356865033, 0.2867246427785368, 0.35568165537156105, 0.2783515504944667, 0.27717412549904397, 0.25418743447584435, 0.2708340153277823, 0.21657030234264885, 0.2483739872397287, 0.31959294853350506, 0.3144392980307673, 0.2813207932055972, 0.24949556102190473, 0.21395586720590998, 0.23132828169022568, 0.4070103526103831, 0.3786097355129615, 0.3746635077858752, 0.4100066934459211, 0.3919447147599664, 0.4077466128786784, 0.44960567437733157, 0.45093623301258967, 0.41151647442413464, 0.060701596167227034, 0.06299852613543733, 0.11105623340982274, 0.0696014332047955, 0.1704109315788852, 0.13814339789298014, 0.09652486766510504, 0.08060826004694077, 0.09064005918270501, 0.22582520202397394, 0.2138201035273709, 0.21861444165182964, 0.22681315067783292, 0.23190488601942016, 0.25331409790742154, 0.25507725570232753, 0.2568334354852885, 0.2640658474304475, 0.5522646323735483, 0.5807170949167726, 0.5758043838784915, 0.6162718585215969, 0.5956271200779941, 0.6051705581830681, 0.5920889708839769, 0.5446285970052996, 0.6261674186808572, 0.08950960938814767, 0.08628376930559012, 0.08262635727098244, 0.10355678464961926, 0.08771884542146358, 0.0884728408973342, 0.10931323162739404, 0.08153469978748529, 0.08575576749171565, 0.22138427148281958, 0.1590969373700013, 0.21513268631390114, 0.22433667396278512, 0.1448410098396813, 0.17100114787107845, 0.1626361042260701, 0.18147817658389898, 0.17231375080351097, 0.3127049914452197, 0.32412332365585395, 0.344393167332929, 0.2964260148411806, 0.29917999907410375, 0.32107308298054804, 0.347971038621922, 0.3891177048084219, 0.3301609609684306, 0.24565320426503012, 0.2583464005974714, 0.27607223232738864, 0.2858923280809117, 0.25593868599077474, 0.2444398436677051, 0.25195648485300726, 0.28135530561823774, 0.2761820517706294, 0.19287502349764762, 0.17315906208851606, 0.1739207330146112, 0.17987955979886316, 0.1757520374036703, 0.1692855748064217, 0.19457927234028316, 0.18310467594104052, 0.18950526890737263, 0.1705932196517006, 0.1983520901181287, 0.1781534010371073, 0.22075992703482405, 0.1798356406711178, 0.19559886874982046, 0.17634558028124614, 0.40988585119230103, 0.18330335795706187, 0.7101359419042415, 0.18627416869612334, 0.15402408918368404, 0.7513299244168522, 0.20061376520580665, 0.19907936373533885, 0.18069920353966695, 0.19454592316918573, 0.21011368917766626, 0.7492627853362441, 0.15598105778361693, 0.16679700200804037, 0.20798111440384592, 0.6904775275229443, 0.7215994149410097, 0.1051609634946552, 0.6867472053476852, 0.7295687447131077, 0.19577433449200143, 0.17886957531278136, 0.19103566506738556, 0.197030119262806, 0.1884733706309365, 0.18031723165608504, 0.1794883133539419, 0.17764600771248296, 0.18965392757557453, 0.06715161683346327, 0.0767092363015045, 0.07116220758603231, 0.0715618984800378, 0.07225692734160916, 0.0746133860329633, 0.08035295767257122, 0.07475259690203606, 0.06515600510267161]}, "mutation_prompt": null}
{"id": "c12b3caf-a504-4332-9f53-25744fb97081", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Adaptive inertia weight adjustment\n            self.w = 0.9 - (evals / self.budget) * 0.5\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "An enhanced PSO-DE algorithm that adaptively adjusts the inertia weight for improved convergence and diversity management.", "configspace": "", "generation": 8, "fitness": 0.27487044760374063, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6450066357348168, 0.6556741162725426, 0.6641880074114157, 0.6422782636982811, 0.6837012742981247, 0.6288656623397595, 0.6457423114107598, 0.686447327617414, 0.6795191179213853, 0.46959284827885317, 0.4672678617578847, 0.4822802397034275, 0.4681490104785152, 0.44592178129903537, 0.05686573915991955, 0.4205404704892546, 0.4820715741789676, 0.46016836213987167, 0.1274074872381008, 0.10126566633121892, 0.1038465189389699, 0.07776497958186246, 0.0864463053236999, 0.08068468386295158, 0.08123215447427778, 0.1083906587871839, 0.08629907829289019, 0.10187080424416073, 0.10184439293328018, 0.07204304954442708, 0.07308075664940372, 0.07779315403584097, 0.07906274869634067, 0.08741585669053753, 0.06919051603792281, 0.09657649731850071, 0.9868409305302925, 0.9866682706662133, 0.9913363341508226, 0.9835210938526167, 0.9855327703130672, 0.973615109061198, 0.9863503262284242, 0.9830938663083006, 0.9858046325155919, 0.2622022322675507, 0.05843608801785505, 0.2849986447151951, 0.14240250165237844, 0.32635552602486273, 0.14640312243878906, 0.2866716206022165, 0.2704184411460242, 0.2670858643358235, 0.4961527161269229, 0.43227976661236367, 0.632913516706842, 0.5222814703499539, 0.6064003719964626, 0.5632596550606709, 0.5580897911038232, 0.4973468338700666, 0.6066679836352784, 0.17610239007886708, 0.1800553250391851, 0.18168534677475334, 0.2249876164185174, 0.2116700931179134, 0.18332231834049728, 0.17781577022563866, 0.1715071569932921, 0.2086131993784024, 0.20344555110703866, 0.010156320201082591, 0.21188094803497604, 0.22507303375026733, 0.18758973833584214, 0.1891757108630714, 0.19427305250777205, 0.15829803315851443, 0.17226605503218362, 0.13200545528525176, 0.12853313639061348, 0.10993094351373567, 0.21086680260109802, 0.09203937757173042, 0.08986405994989743, 0.11457048472521314, 0.08788455187916788, 0.10722561877909298, 0.27210228919053137, 0.2280526592335026, 0.24162163145586468, 0.24585204894118406, 0.22821164071309608, 0.17751215660023467, 0.3137334531433996, 0.30328725022914627, 0.23938286409241127, 0.004231373418962514, 0.02445876733026109, 0.023262211055195214, 0.04538974940081153, 0.05817600356560182, 0.023323393870384512, 0.013576145997712064, 0.017025631721576118, 0.024800210991984595, 0.1238065217292571, 0.12872697873966843, 0.14268594879549779, 0.13351096076345714, 0.1392115374306956, 0.13172349301705888, 0.14604595671011378, 0.14193485787773474, 0.1503241884764882, 0.4547489726412206, 0.4612377397023524, 0.4299468136852027, 0.4878846790200072, 0.4588990844243477, 0.46332058665545217, 0.448879485681551, 0.45938875824339886, 0.4674807534074562, 0.0827840018828343, 0.09354141382168657, 0.08806462858972863, 0.0848204273819183, 0.08626802578892456, 0.08770235627218048, 0.09042180583612047, 0.08274225592619111, 0.08288630982027878, 0.1760546581536333, 0.2466812005341371, 0.1631925492768641, 0.29018257502652456, 0.2089036822220932, 0.16374828705721334, 0.269937126542528, 0.1759527383141134, 0.15073488203697416, 0.3065979407362257, 0.3139883683428646, 0.33708903784341304, 0.2680470436109479, 0.32346481318371356, 0.31589387950560344, 0.36595490145002163, 0.3398407549495932, 0.35040097427326977, 0.2028725647366909, 0.21928842561382, 0.19434655452192562, 0.1822184881359462, 0.21900258017235041, 0.20310775218405075, 0.24574452029226546, 0.22042535260500573, 0.2076965789430878, 0.17745502626206167, 0.171704388009988, 0.1815776941109759, 0.16930379732376855, 0.1752524647784689, 0.18359907666304132, 0.17736187882391385, 0.22021983378984122, 0.17271265650490408, 0.1794161464127868, 0.17702227524250647, 0.1728478772705634, 0.1830206189279021, 0.1781575905289141, 0.17841830019941518, 0.17791690807727156, 0.1852532253118495, 0.17391260209917314, 0.17769741859966237, 0.6440241426424878, 0.15351688686965992, 0.17573775471347086, 0.6055965473197636, 0.1967195566028942, 0.19185291773948587, 0.16799243717922474, 0.5798557071563748, 0.637996833560678, 0.5624854527547768, 0.5700951242919331, 0.20309081485400315, 0.6251807709177855, 0.5954625891550535, 0.10496358504407566, 0.21083731946877393, 0.6698090480180248, 0.19250057586772795, 0.1914882253118837, 0.1851151806685195, 0.17949910862620855, 0.2085238304983723, 0.18248445302684835, 0.18037091633264113, 0.1946861884246337, 0.1810978538800494, 0.06981811570456087, 0.0621765345855021, 0.06200749303123032, 0.0733775608391597, 0.061444150923368746, 0.06838771772573304, 0.0641266503429142, 0.07494239281949955, 0.07708272952106088]}, "mutation_prompt": null}
{"id": "ca810471-a9ba-4daa-aaea-a5190cb9f9bc", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.7, c1=2.0, c2=2.0, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            self.w = 0.9 - (evals / self.budget) * (0.9 - 0.4)  # Dynamic inertia weight adjustment\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSO-DE by dynamically adjusting parameters to maintain a balance between exploration and exploitation.", "configspace": "", "generation": 9, "fitness": 0.22829104899711367, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.4854138135781313, 0.553746760929589, 0.4768161036416868, 0.5253707469555662, 0.580099355709954, 0.5488846562819875, 0.5539222152237777, 0.5392528997097523, 0.5523188055342463, 0.28269017264097673, 0.29954180322903656, 0.25349382899912054, 0.2663574720522204, 0.2590855603944535, 0.2728459020724804, 0.2651578318613884, 0.26834044028579496, 0.3340036608383229, 0.06845829301254047, 0.07530362423454773, 0.07872121332744952, 0.07802851599647143, 0.08000242449743888, 0.07620338331882326, 0.08839983554179887, 0.07327003024866896, 0.0789599359708173, 0.06119966264062571, 0.0653039035983547, 0.08130769985267938, 0.07748531876088705, 0.06317041827402814, 0.07527947219368925, 0.06740449755147493, 0.07537977811732288, 0.0719838869812024, 0.9863433308603201, 0.9915420065785432, 0.9916876526575557, 0.9860230467808939, 0.9763395083444456, 0.9814052707662554, 0.9862942386340297, 0.9860093280066012, 0.9861370395644831, 0.23140107588159953, 0.21625384396911773, 0.2096998563374256, 0.2262841621184707, 0.21835590839050223, 0.22422849257736044, 0.0889865705101478, 0.2599213786907102, 0.08471966674369091, 0.4502080481980172, 0.456032089807476, 0.3575181778904606, 0.38103488923172857, 0.5125873617981245, 0.5607099368953536, 0.33457191396553065, 0.41678665284142646, 0.42645671245616446, 0.129750951015001, 0.14513999057454274, 0.1356674550416277, 0.17585402390272575, 0.16080265814522443, 0.11086328538492285, 0.1042996674982356, 0.15075396826290233, 0.1381195938790012, 0.1722942829502725, 0.010121197544062266, 0.015520804897497742, 0.13362084982574196, 0.1466693775355039, 0.15081798581770522, 0.14529635503374516, 0.14665448392529956, 0.13303422829846856, 0.11260527614015714, 0.10950283542619477, 0.12691101394953253, 0.19665746988711352, 0.1383556991114928, 0.08776936882251962, 0.10206917683368011, 0.13837669294766897, 0.11613103909859657, 0.24905425696096062, 0.23770907262693464, 0.29250494384136916, 0.20128280926225117, 0.19525743475046364, 0.1941623499322206, 0.24210226426438786, 0.23415590356286797, 0.28002934885396225, 0.022894753381829336, 0.02547680952369924, 0.015082282326798646, 0.03478627135097745, 0.014569197487940944, 0.009030277208816329, 0.009288409846674783, 0.03075643070838774, 0.015186176665086148, 0.12961372167251306, 0.11353709547496293, 0.1342528395338377, 0.11645639558827114, 0.10519743084040623, 0.11027854460334618, 0.1535354040132153, 0.11096163215207722, 0.12189614253081504, 0.41025282248426853, 0.38800029626956756, 0.4254624173632585, 0.42751307166636854, 0.42623125924193483, 0.4200553889494544, 0.4361765093350386, 0.3908232774005994, 0.39888984927326643, 0.06978236713244479, 0.07366514070997421, 0.07749656006940131, 0.08312678602377, 0.07595539031065712, 0.0864200735316879, 0.08613995878430614, 0.07499947741730317, 0.07644765855254732, 0.20385304860941167, 0.2428774553062394, 0.14375824672467374, 0.14630896576022878, 0.20707622344079424, 0.18513730339811219, 0.16586851613506404, 0.15617156129017717, 0.1866476989485486, 0.23356182863183628, 0.25965314574248954, 0.24107202835128783, 0.24582142512921856, 0.24482449375265036, 0.262361907600394, 0.23798874066509246, 0.300969342595909, 0.25655049610770664, 0.18457698826399538, 0.19364702765499042, 0.1807035745463762, 0.18915763955461984, 0.17351974130918446, 0.1700880613625808, 0.1942025393881297, 0.18698411132366077, 0.1910828817166853, 0.16374457967051437, 0.17474503458444146, 0.17446649953726612, 0.18646668040023862, 0.17206319497340206, 0.17001668935843606, 0.17423843482650214, 0.1589512573748152, 0.18866601027226493, 0.17224435750937084, 0.1621164647114447, 0.16938164789160637, 0.17300364108849986, 0.16553973139640854, 0.1762424032111649, 0.1746510042488968, 0.16254264404589247, 0.17282759778167078, 0.16387119518595883, 0.16638720259379747, 0.15319464404607674, 0.46184099917212784, 0.18477178051254983, 0.18689221988220162, 0.15346779768484653, 0.1683592320649805, 0.21034680244094472, 0.47673999853911353, 0.15378513013504103, 0.16204062074968406, 0.19449542645133455, 0.16439129577506406, 0.18751874433146076, 0.20656593673061163, 0.19685705092135963, 0.2103588062896039, 0.2125767075613103, 0.18690370389198174, 0.20612394028704184, 0.1959639625408014, 0.19835199593030428, 0.2002000789291728, 0.1797559112084529, 0.18720673643864105, 0.22344876057665386, 0.06689470173098255, 0.05677763522992496, 0.06677484086825425, 0.07384621938932778, 0.0629358312358328, 0.06676991609183747, 0.07530184112967708, 0.058193609954733216, 0.0736841208978738]}, "mutation_prompt": null}
{"id": "772712ec-c857-47bd-a671-68488d84f0c6", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.9, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        iter_count = 0  # New: Track iteration count\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w = 0.9 - (0.5 * evals / self.budget)  # New: Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            if iter_count % 50 == 0:  # New: Periodic reset mechanism\n                pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n                fitness = np.apply_along_axis(func, 1, pos)\n                evals += self.pop_size\n                better_idx = fitness < pbest_val\n                pbest_pos[better_idx] = pos[better_idx]\n                pbest_val[better_idx] = fitness[better_idx]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n            iter_count += 1  # New: Increment iteration count\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by incorporating adaptive inertia weight and a periodic reset mechanism to balance exploration and exploitation.", "configspace": "", "generation": 10, "fitness": 0.2676984999738149, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6245115308574287, 0.629409199805404, 0.6350681961318796, 0.6151924194606287, 0.6497431508443321, 0.6315163847367481, 0.6703298373659445, 0.6014812228906457, 0.6257614197441419, 0.4260737198149577, 0.412849397096099, 0.4195585676189667, 0.42199113649488607, 0.4439220296330888, 0.4226397416100719, 0.44683638509205603, 0.4516289464820886, 0.4486655229920531, 0.10045981346635513, 0.09377128710933924, 0.0901247337413632, 0.07563357765544731, 0.08626913356648713, 0.08640057118863731, 0.08297848847409373, 0.10130384043352059, 0.15859671012766552, 0.08678693507890112, 0.09910840352275285, 0.09693224993289773, 0.0845108155331411, 0.07694321669507642, 0.08953558176218612, 0.07438406038729717, 0.09292918816822215, 0.07830825873322012, 0.9836126422746362, 0.9869607399017237, 0.987747364706508, 0.9724703451035394, 0.9849623544902619, 0.9833447582845135, 0.9884632123718109, 0.983364598325484, 0.985028115277821, 0.22331525719614087, 0.2554361537427955, 0.2542004990168446, 0.2990474893530374, 0.28528249920402626, 0.31350999770885724, 0.27507733709541193, 0.2855636099190154, 0.26653199407034367, 0.39355360680554696, 0.4228076582072202, 0.46328601877316355, 0.5090473407460512, 0.488651964976493, 0.5317123079453348, 0.4731650707637175, 0.46346243662320175, 0.5374568728209421, 0.14362527144070736, 0.1736160253518314, 0.20545855269368873, 0.21243343829561534, 0.19670534185123756, 0.20369512479144236, 0.1821101268032046, 0.16722970088416755, 0.1596946429868502, 0.1991002241235672, 0.0516656485710999, 0.17879746819851883, 0.1859442999293155, 0.15937671586920021, 0.15480358011049045, 0.18005470435772442, 0.20396825108645633, 0.18936787299109814, 0.10363250598512608, 0.14745937840151258, 0.09887094737680269, 0.14274610722355596, 0.00039112818402586846, 0.10305142211645435, 0.09490822736828086, 0.13390444886217212, 0.13254901376512385, 0.26774730730797003, 0.23110703693982237, 0.2170691283950773, 0.2900634396425076, 0.24328985184951668, 0.2221872531359601, 0.2912864975509678, 0.2501018622585066, 0.24924155933962233, 0.018784475368750275, 0.015317333137493727, 0.01715787007177494, 0.06233584378221746, 0.013030366365176627, 0.009472033889299403, 0.035635856013546796, 0.0281878322801955, 0.028653568147356978, 0.12795456542762984, 0.12992464147207483, 0.13318337022767557, 0.1457667007278476, 0.14354536420872466, 0.14991882648846022, 0.1463945915285787, 0.14586029232302877, 0.14730828171917987, 0.4204022293136428, 0.454545342104257, 0.4231408220940093, 0.4443490143532618, 0.44544477952801964, 0.43082943234754856, 0.41482319504988374, 0.4220170944709212, 0.4560220174610631, 0.09815873051177038, 0.07865666137056582, 0.05812387308825151, 0.09281455965780605, 0.08746067199736296, 0.07317296320079347, 0.09524536462830835, 0.08432400983343635, 0.07510119947546523, 0.16203042550732694, 0.1293105200153628, 0.1433575334054099, 0.1405600238642104, 0.25194057469827214, 0.20931495832730895, 0.2534430936476354, 0.17627382793567836, 0.1556070488829695, 0.2807436186693506, 0.31011425347141575, 0.31428602224120394, 0.25184832576976746, 0.27945253588231644, 0.31185281808013143, 0.3477126016676333, 0.33737786937267833, 0.3194359365971915, 0.21517895076546278, 0.19086140593658807, 0.2225233110431728, 0.1809672876449282, 0.20340085113286122, 0.1908226903039325, 0.2674667295626998, 0.25956688486687984, 0.2106710285301283, 0.185268279054854, 0.18534263823614183, 0.19551111440139268, 0.18243328936345993, 0.17930087261520566, 0.17616442059161896, 0.1693410189102137, 0.1730335551859744, 0.1785191843894347, 0.1757656725927773, 0.18355038023169812, 0.17244617184062028, 0.16955903554746343, 0.1842959151857615, 0.17549822624875178, 0.1720867989144541, 0.17320027931119253, 0.2601308585077816, 0.6885114842352689, 0.18204737979770602, 0.15297610187388422, 0.42974514768257166, 0.18587797544924545, 0.19186812567774136, 0.17068411136612072, 0.1601517335669822, 0.6482913443518771, 0.41493279225627844, 0.40412953230305293, 0.49937252131416066, 0.558098778107108, 0.5635916479978357, 0.3193127154857168, 0.2065077136690855, 0.2098347572419783, 0.5907278258712052, 0.1916221104577226, 0.17542904960066896, 0.18905785127645336, 0.18110039130385291, 0.1729440911656278, 0.19636944656004596, 0.18610691478385466, 0.19174511476577671, 0.18315194577258687, 0.06635399462806235, 0.0783599654887428, 0.0682952532015364, 0.06299699782377266, 0.07192629486738622, 0.0747992844379769, 0.06872949208024148, 0.06944566791981921, 0.060675801353692105]}, "mutation_prompt": null}
{"id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by dynamically adjusting w based on current global best improvement to balance exploration and exploitation.", "configspace": "", "generation": 11, "fitness": 0.3821597244824712, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.28.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.8976627984817259, 0.900679042630697, 0.9047603206907348, 0.9032210193967743, 0.9034608639553506, 0.893664509072308, 0.9072740310101929, 0.8991037774881, 0.9002837212593576, 0.8191611768101784, 0.04327956799885324, 0.8017816973941697, 0.8142171734378046, 0.7909426150915393, 0.8137161055254557, 0.0542532805074003, 0.7558451940407257, 0.04883536963176771, 0.13678649196655557, 0.1812133969865316, 0.527863256212165, 0.11458528389803269, 0.7553390364988165, 0.579888760407568, 0.11878981430573621, 0.12929760897124742, 0.11716818741788271, 0.14330010357900103, 0.13419187678280664, 0.6232197432489969, 0.1387937887032593, 0.14622848977961223, 0.11759857270270402, 0.14527981119797173, 0.13151108578718596, 0.1710915709538442, 0.990621673698254, 0.9859713103744767, 0.9869354412601571, 0.980749547442894, 0.9753125361526322, 0.9728789936445917, 0.980448498351832, 0.9827762552581847, 0.9855618897034406, 0.6663274036486845, 0.6449698815745025, 0.6761191432299809, 0.6926876213379053, 0.6797883901741939, 0.7041675044032627, 0.6682184295652203, 0.6937719811707712, 0.593341682726324, 0.7588793349060555, 0.35840273485302965, 0.8070114751717754, 0.21406296662276414, 0.8212749373475359, 0.8166145587542921, 0.36751867888364553, 0.8211794128170457, 0.815990057764315, 0.13258648906467296, 0.4188204899655419, 0.47996042665198224, 0.4527268324598259, 0.4085586557673281, 0.17044276423869764, 0.13131209203271443, 0.45127534346410425, 0.4842194258769025, 0.43942198745873906, 0.12253203287528669, 0.4999069456260965, 0.45356461990053953, 0.46933661285921247, 0.5199204243324507, 0.45063450820093753, 0.10233404926862788, 0.18470183738098844, 0.1549793825539637, 0.14325414616010512, 0.13825267298797406, 0.07859998258290357, 0.10575020828145443, 0.12645808166821426, 0.13587027597628054, 0.1142754885181696, 0.15100512502907004, 0.2749026137029438, 0.29319801880214025, 0.2582646400073527, 0.24375137927976653, 0.19412678439931685, 0.18595724623893506, 0.31569658133861744, 0.2858563567920288, 0.3084427194209929, 0.1602362467305014, 0.3565665645790984, 0.24348848769884834, 0.1434985893160603, 0.10509110077880979, 0.09559394034303459, 0.10000128525949603, 0.11035188041568433, 0.1738487007087246, 0.22446411947946476, 0.2194942568530951, 0.25229488929101584, 0.23865732929613526, 0.27622820704138995, 0.2470342902626803, 0.2342115309178745, 0.04835122907728451, 0.267600933770314, 0.661507450570592, 0.6399644698943623, 0.6347776464056889, 0.7030634010192685, 0.6810293042689335, 0.6627620927473417, 0.6268566628303904, 0.650977282028578, 0.6662794737663724, 0.11158547101577732, 0.11889721650746776, 0.13963627774135734, 0.15404684203248253, 0.08956327892463778, 0.1358994791228062, 0.11919820710523932, 0.0964551694009369, 0.1413773798729373, 0.2290538568167947, 0.2275338696713327, 0.22517488869416336, 0.26895277269171536, 0.19219471725153614, 0.22286525281541436, 0.19880495171489554, 0.2017580532287624, 0.21684872692745571, 0.4611831244820229, 0.5011532319923953, 0.3932915782964649, 0.2989366998560641, 0.5365385737627774, 0.46653215978351614, 0.44774334418473205, 0.43958468076310475, 0.3528547383999284, 0.3181883900556227, 0.28525014033152707, 0.33012708638067867, 0.37684355186818275, 0.24575883747730576, 0.2342127975556635, 0.32515395646529766, 0.34903070007462855, 0.36789352123845664, 0.20851951430050286, 0.19809351311664614, 0.18995014661606657, 0.20125190867504295, 0.19674200559804544, 0.18770310799571355, 0.20547178774602504, 0.1940862429510286, 0.20029608962419032, 0.22105733423555884, 0.24034288849370578, 0.24287936755598327, 0.2484419458832805, 0.24814952773196952, 0.19120478964265852, 0.2440734895100911, 0.7868353607133192, 0.21865662852270817, 0.1873932537031544, 0.18686436571648224, 0.1537941256205504, 0.913268554240099, 0.20167671751878724, 0.2011668824614692, 0.16996281349749298, 0.16989983394988017, 0.9226504820120847, 0.8205796441864804, 0.7201845432781369, 0.74199252535647, 0.2098304971533187, 0.8301617052229306, 0.8032215187851968, 0.1053141945064835, 0.21067784898974962, 0.8723606254172448, 0.18698611017786138, 0.1859603960289129, 0.18540684625872061, 0.1883670122849449, 0.1740557491814998, 0.1920794258086327, 0.18946810964236005, 0.17625257644424586, 0.190395648289172, 0.10727869549205427, 0.10269179115066451, 0.080821292118051, 0.07678401015880132, 0.0829739277742545, 0.0846929859988923, 0.08619248430959414, 0.09227159534729346, 0.08794243553845948]}, "mutation_prompt": null}
{"id": "015a2811-2f44-489e-9d89-e46feb3d5b45", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            adaptive_c1 = 1.5 + 0.5 * np.abs(np.tanh(gbest_val))\n            adaptive_c2 = 1.5 + 0.5 * np.abs(np.tanh(gbest_val))\n            vel = self.w * vel + adaptive_c1 * r1 * (pbest_pos - pos) + adaptive_c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE by introducing adaptive learning rates for acceleration coefficients to enhance balance between exploration and exploitation.", "configspace": "", "generation": 12, "fitness": 0.3126659315472208, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "metadata": {"aucs": [0.8359024492528304, 0.8422480007251643, 0.8273006151881467, 0.8356999811064495, 0.8308083636207393, 0.8619434052785045, 0.8550710292690105, 0.8457740580640757, 0.8646974070814897, 0.041193907539401, 0.7415866267596247, 0.7063120977127152, 0.6899641444249426, 0.7058236130118113, 0.044090857162833896, 0.7297022978823469, 0.717112616666129, 0.0517289494900941, 0.09879539385566294, 0.1311581120321209, 0.11603819426922457, 0.1169055611589449, 0.12575583312450123, 0.13238501894148447, 0.0999077882289483, 0.12625174951582008, 0.10585641020284653, 0.10979356143279762, 0.11953117682178449, 0.10760231345666638, 0.13622407578292017, 0.12424858103904457, 0.10471536119174019, 0.09718372114216878, 0.10892733099628127, 0.09694579479093679, 0.9872676465457011, 0.9898063724500237, 0.9913596992939719, 0.9858523448190821, 0.9749931060210806, 0.9810355575557024, 0.981504662080267, 0.9818351349343769, 0.9851975712222343, 0.3832768998529995, 0.39091072549018735, 0.38140519649630267, 0.14971834304073384, 0.39973433559610716, 0.3572871206822329, 0.3656014361493882, 0.3843889674371457, 0.08827662452044371, 0.6769363271168233, 0.6208054630109836, 0.6818284710359348, 0.6956618115133582, 0.61741758622947, 0.6181231415977955, 0.12535483753148746, 0.6203583844639953, 0.6657119899986992, 0.36972028389163325, 0.11583400672135014, 0.30848066095105187, 0.3168032452848627, 0.3336026072367062, 0.31589955424184735, 0.32263965186129673, 0.32758431471068183, 0.3106711856060561, 0.3301088748739861, 0.05419498823195101, 0.2380825587372618, 0.327256256735303, 0.2842895038372655, 0.3517227579874961, 0.28476354240062396, 0.23770743319451793, 0.3011327619508918, 0.1467046431615281, 0.13882692475976055, 0.09497422365043673, 0.1230773301798701, 0.11106260182572347, 0.10634909904360235, 0.15005019828774568, 0.14223793121513084, 0.13118923893007628, 0.2590235357653937, 0.1765475493513854, 0.22785939730101112, 0.2294441073120118, 0.21313765351732217, 0.21367099706932635, 0.28135424576974877, 0.2698818250688354, 0.270503914072729, 0.15481363900366973, 0.07422971642379184, 0.024747825112063082, 0.11853920795762785, 0.07514534157300734, 0.10105113567479274, 0.10837676415044384, 0.09440263268505589, 0.02296054175446094, 0.18071998697591607, 0.20740479417930613, 0.20575197416526536, 0.006298690820964126, 0.20917811584581325, 0.18004597350578566, 0.18271498269793618, 0.16711131176671457, 0.19870009706962277, 0.5838985013628766, 0.5320322641097185, 0.5678410773030576, 0.5890918172196619, 0.606367553327579, 0.5553067948597668, 0.5741089356869983, 0.6103271443263598, 0.592211036125105, 0.08873196838235997, 0.11686231872787689, 0.09000861435990115, 0.09239417393891602, 0.12238268696955912, 0.07987981292385138, 0.07157254249383638, 0.10756007180828187, 0.08061004426186169, 0.2834767807023756, 0.1840490136579711, 0.1622132652862741, 0.2255837952605798, 0.25734078399826876, 0.16371540312472366, 0.2305916602891187, 0.14665102358711468, 0.1882743427521425, 0.3168193824735833, 0.4236276642326299, 0.34527245590208644, 0.3752129030606489, 0.33354782097320435, 0.45123137262020374, 0.3635473261386374, 0.40018516372338653, 0.47181866583157406, 0.2604501997602814, 0.3009256245575691, 0.3123525353227423, 0.21893407745760873, 0.2055889734309274, 0.30141284596887286, 0.31389936257607376, 0.3170160504239974, 0.24269923273423333, 0.18234995458750158, 0.1769867772228212, 0.18834720901684854, 0.18824290758566908, 0.17842978826439138, 0.18483654270030214, 0.17922230095446667, 0.20159975003583452, 0.18447903347480543, 0.22573313681771823, 0.18367158298356745, 0.2134553367031865, 0.19087603236047124, 0.1873961945748881, 0.18404874286190953, 0.21000658331878108, 0.19229158323778606, 0.18539583302012175, 0.17051346123338007, 0.1607405317943359, 0.11496637856512593, 0.8754751390553963, 0.20070183463376168, 0.1979856795147339, 0.12318081152144933, 0.16901430899249914, 0.8168621079934317, 0.728295715362964, 0.15525632980269455, 0.6337922856886555, 0.20995922777082643, 0.6138473296379885, 0.208341666732609, 0.10503559462083234, 0.19825908425354233, 0.20552129428609434, 0.19473793168056985, 0.19294611489613211, 0.1982520779223108, 0.18660465752399935, 0.20680037523374595, 0.1925284049554934, 0.20618377352918693, 0.20131838248902145, 0.18550617138610925, 0.07994694822842208, 0.0754052065873062, 0.06653554367076908, 0.08416151250881032, 0.07602673868865384, 0.09102559178357428, 0.07820415260657487, 0.07354091548102004, 0.06795506880680646]}, "mutation_prompt": null}
{"id": "3c4836fe-1e90-4498-b5a4-ddb5f03edb7a", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            progress = evals / self.budget\n            adaptive_F = self.F * (1 - progress)\n            adaptive_CR = self.CR * (1 - progress)\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < adaptive_CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "PSODE with adaptive mutation factor and crossover rate based on iteration progress to enhance exploration-exploitation trade-off.", "configspace": "", "generation": 13, "fitness": 0.3527891186815363, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "metadata": {"aucs": [0.9080560456594619, 0.9006717293957791, 0.8957272005827369, 0.9044090206202245, 0.9036966470824221, 0.8956375757197348, 0.9109338045935629, 0.89624270871255, 0.9021970958800118, 0.785141862805239, 0.8157262870693116, 0.7811145929376049, 0.8211658586952085, 0.7944893515432385, 0.8227589146968679, 0.8208864577669256, 0.8119221601722117, 0.763894823557829, 0.1705021405746615, 0.10995908255194808, 0.12012038051019791, 0.1632838750477409, 0.17748235863069217, 0.13934325931186287, 0.596963199091374, 0.17810958579476122, 0.17201874263506967, 0.10632490817128915, 0.11801937210730962, 0.14010060978289895, 0.13620736458346105, 0.1312750926022842, 0.14909120643467433, 0.13253364602173134, 0.15556496343661352, 0.13782349760552626, 0.9906198757787337, 0.985971922514943, 0.9870271269655537, 0.9788989296555772, 0.9747432281708801, 0.975510598167706, 0.9812752389725323, 0.9824626254348485, 0.9855619106760392, 0.727720601751396, 0.6968415326922318, 0.6583125344406409, 0.7145951710987386, 0.6940111508112967, 0.7304662924862404, 0.6913861808082018, 0.6874384999322545, 0.6075466381452836, 0.8299152214342663, 0.37392265421143167, 0.37639307639722097, 0.8600659403543713, 0.27489218507261715, 0.21425597356775739, 0.6842073093432346, 0.3474985270214064, 0.8113755572454132, 0.13300347496692133, 0.18579390195097112, 0.19383293790981648, 0.20419685076026106, 0.20572031790948409, 0.18397948812270548, 0.1333471626016186, 0.1874218201475063, 0.26870812360264085, 0.25843716588730814, 0.12302931476928225, 0.14760397627999977, 0.19478556150468707, 0.1247978334175357, 0.26080894500117047, 0.2567607052754839, 0.10300008349161838, 0.15893962215537571, 0.03954802333892471, 0.049021438677743556, 0.04556310749648673, 0.02449668543249084, 0.006507924564718048, 0.0376101367563495, 0.02464285901900043, 0.061872404686098115, 0.0922233122062629, 0.1645852899508924, 0.14344365983523588, 0.137103441037154, 0.12895150597541416, 0.09216455247455402, 0.0604887486813519, 0.13682609994875816, 0.16614148433233822, 0.16476500492704638, 0.0498317398300101, 0.16687711546744144, 0.19708394849315025, 0.22335224762787964, 0.19816169290008834, 0.09465136169043675, 0.10094081005463029, 0.1022245440296119, 0.07312832635832578, 0.10382530186211114, 0.09238743831223106, 0.2012799729491419, 0.1213884971815038, 0.13358029046633457, 0.2531672764404598, 0.05760089506822985, 0.058228796098169, 0.15088150538264233, 0.6403552025975421, 0.5931305278858925, 0.6790549765655253, 0.5859031919688794, 0.5564637075737822, 0.5936729705967518, 0.5999548171196114, 0.566785846820482, 0.6159408945816428, 0.10420003475514639, 0.17657392798020932, 0.17190273537264855, 0.13361032840428178, 0.08938340866043726, 0.123199355483681, 0.1558685409278905, 0.12259642222173972, 0.12133875799358351, 0.2049058268845908, 0.16125811987191352, 0.18516207267928253, 0.27466498624415825, 0.23773846890155714, 0.20285066623586445, 0.2733188461104258, 0.18962995114387182, 0.27481873359954545, 0.33335685048994756, 0.40304933288254086, 0.2950491151647189, 0.36041680839314405, 0.5473726086648352, 0.4280584443116979, 0.6006226031430543, 0.464634386639048, 0.4917569111220038, 0.29121362828268893, 0.26079540611787433, 0.2419753884068978, 0.2604295815330502, 0.21970468573758173, 0.32375836060163365, 0.4033997480451549, 0.4098020088685528, 0.2558393560109008, 0.20682529482452783, 0.23445343539392283, 0.19369018509343727, 0.20990888775652194, 0.20715748887368668, 0.2019943575014843, 0.21355514741119497, 0.2089507343093603, 0.20976599126249906, 0.20208924067112255, 0.22905457539037954, 0.2275789225759397, 0.2550271663779162, 0.19782635259030856, 0.1982166243153779, 0.6749347519197577, 0.8050718730172036, 0.2420592566479718, 0.1876677786446338, 0.18709326319369934, 0.15392807641783146, 0.9187071948313733, 0.20165324117022287, 0.20151690880831064, 0.14665616072661358, 0.16989945870561862, 0.9276733695707267, 0.8677827144878842, 0.15622757459745373, 0.8687042603390287, 0.20907816851298167, 0.8368722993943762, 0.851484287699995, 0.10530520135165733, 0.20691587098258113, 0.8543496862387385, 0.19703484648176994, 0.21493274345191127, 0.19783878716188852, 0.19606825289070662, 0.19429812908490318, 0.1865067675356168, 0.17956783475423743, 0.19392496366643996, 0.18452343088224166, 0.09851255108010026, 0.08359834644404818, 0.09191281371639903, 0.09179907023219258, 0.08961235709975879, 0.08085165400131156, 0.08197986316633687, 0.08304573840496654, 0.0902204891109657]}, "mutation_prompt": null}
{"id": "e9f351ad-1438-4ced-a7ae-c84d26b48592", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.98  # Adjusted inertia weight decay rate\n\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n\n                if evals < self.budget / 2:  # Adaptive CR for early exploration\n                    self.CR = 0.6\n                else:\n                    self.CR = 0.9\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE with adaptive parameters for enhanced convergence and diversity management.", "configspace": "", "generation": 14, "fitness": 0.35213499814432275, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "metadata": {"aucs": [0.9088874544545975, 0.9060067566126384, 0.9085982651878358, 0.905102823118568, 0.9106368870909107, 0.9052195066994363, 0.908731152204173, 0.9084814663731297, 0.9114396173638932, 0.8261957741523747, 0.8264268595041303, 0.834262906515552, 0.8359698259616376, 0.8182402294993727, 0.8246957074323218, 0.8204844672321229, 0.832187054237397, 0.8397459200204689, 0.14183674870081409, 0.820048850355032, 0.16821780180156387, 0.17879291878601378, 0.15413354735701212, 0.15730814752790845, 0.682714409940241, 0.730659212574976, 0.6462095552360614, 0.15401661723524374, 0.13108928501117512, 0.12380798559238937, 0.1331747789975405, 0.1459394158127303, 0.17267904219568975, 0.1685263049934923, 0.11406549665647492, 0.18215938327430137, 0.9806360298835047, 0.9866226904154228, 0.9912228615199128, 0.9835276812467038, 0.9735558328633244, 0.9719636125538309, 0.9859150633700426, 0.9863475730689426, 0.9855890013834745, 0.6698933529910525, 0.7316898975349406, 0.682700454656602, 0.7126348302284085, 0.7075769325150124, 0.7373039099475602, 0.7462674437517096, 0.6081347491884235, 0.5667698930214516, 0.7996600671367928, 0.36411413052227837, 0.3720895112988011, 0.21402815464473102, 0.1918332741657458, 0.20554821597331374, 0.22472755542535794, 0.8210900474080874, 0.2317708534607491, 0.15855924671022148, 0.1903958676190336, 0.13367210017065023, 0.17817048857098472, 0.19958679497649578, 0.1881692659523514, 0.14802077435795724, 0.13235546767852813, 0.42172294745046424, 0.1694827934581088, 0.14064804886432214, 0.13186905482562394, 0.18769538525872154, 0.40507105799899046, 0.14464565029619103, 0.3090137378394081, 0.18242450822062206, 0.3314554988348588, 0.08709930028163981, 0.14324065641472594, 0.09362982864169955, 0.04017268283449216, 0.06575333874894818, 0.01909247352783572, 0.08283387007340193, 0.13600211833003117, 0.11666833271560995, 0.17359359658422513, 0.15848345397122976, 0.14637552590339087, 0.17635675821498076, 0.13538076692672252, 0.15006791201239922, 0.16969020814956315, 0.17892745678089828, 0.14620547005276696, 0.05208789740901232, 0.036994507605064286, 0.06219138882110742, 0.08050342077002404, 0.08037645882492839, 0.09530724385766376, 0.15449356793185176, 0.24600135685539237, 0.1895766355742734, 0.1283396538946865, 0.10297344787490803, 0.2935903243501852, 0.06137508273713721, 0.17051339566035772, 0.15941754807149267, 0.05347342833175339, 0.19655127729927913, 0.08366627464431964, 0.6670927612051889, 0.6481923062514496, 0.6715055864807459, 0.6195490904306407, 0.6321724482114837, 0.6970060151936683, 0.6907051426545624, 0.7301140258777439, 0.6752101435438493, 0.13025222678433934, 0.1186529906214171, 0.11789989494515252, 0.10324595402824943, 0.11707731238509, 0.10131414468025346, 0.10899161687054948, 0.11077681201915435, 0.15851151663914376, 0.15353596856050444, 0.20468591950822246, 0.28625306803725825, 0.20852862879230305, 0.38109549808641163, 0.21682457822163326, 0.2613623266377084, 0.29834774269934616, 0.21051419085552547, 0.3125565618000179, 0.5323993613090068, 0.30279082985980943, 0.26147252160347634, 0.4196497968217492, 0.42956521807900816, 0.5122431305350963, 0.3433291744030599, 0.44197742395169426, 0.2266627614668456, 0.26018289374029346, 0.30459622633741545, 0.23704715588410974, 0.23852612700725262, 0.25314257287164776, 0.22692391832187653, 0.3729986015084501, 0.2339994996791891, 0.19903507629634198, 0.18743322087646863, 0.19621777402190377, 0.21408334982743804, 0.22549831635336626, 0.19836224016471515, 0.21260945618502958, 0.20238504814970681, 0.22384068608056318, 0.20530257635472693, 0.18584084745725482, 0.2258932515558828, 0.24884873654637818, 0.20084015383018394, 0.24834450603328806, 0.21202019861320853, 0.8577316886512171, 0.23891465633333464, 0.18565555206454443, 0.1755906457825548, 0.15354401526862527, 0.9179859776590341, 0.2013191083479503, 0.20139787631720463, 0.13097881020355706, 0.16971600710110635, 0.21154164667901865, 0.8467348242985189, 0.1562781138463868, 0.67527188750069, 0.2106976576773093, 0.4610921518813037, 0.787682648145994, 0.10534034629754097, 0.10493539681204422, 0.860243007085483, 0.17915579809081372, 0.19754465810127486, 0.17778524544673002, 0.19131120560487525, 0.21604396573335316, 0.1748523831968738, 0.19304986579618266, 0.1913724862159487, 0.19616356762897735, 0.07867003292079955, 0.08594384017396861, 0.08947573883679927, 0.08733471311525642, 0.0996148231599977, 0.0823966603184837, 0.08584857067839746, 0.08414551135256021, 0.09189024545403313]}, "mutation_prompt": null}
{"id": "3d16d903-16be-4394-818a-c9d10634c4dd", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            diversity = np.std(pos, axis=0)  # Measure the diversity of the swarm\n            self.c1 = 1.5 + 0.5 * diversity.mean()  # Adaptive learning rate for cognitive component\n            self.c2 = 1.5 + 0.5 * diversity.mean()  # Adaptive learning rate for social component\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE by introducing adaptive learning rates based on swarm diversity to enhance convergence speed and stability.", "configspace": "", "generation": 15, "fitness": 0.31285172260505056, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "metadata": {"aucs": [0.8466530989189461, 0.8394984081532181, 0.8726060379467808, 0.8789263257768074, 0.8817181184000776, 0.882923476480865, 0.8746417854497996, 0.8766562673871086, 0.8737029061461998, 0.7535745170025455, 0.746486353757094, 0.7263008075849069, 0.7249256979068848, 0.753338596648163, 0.03419511486741522, 0.7476569551807984, 0.017959116718536783, 0.055054679425263764, 0.08459202102388863, 0.12026643317447583, 0.10586236310227581, 0.12867907433271997, 0.11725599110673646, 0.12425837912788595, 0.10832053413433529, 0.13340104860139523, 0.12268138012502883, 0.09408833283332718, 0.11424790140100738, 0.10450636595402463, 0.09912284158081963, 0.10647463471279439, 0.10123266590926905, 0.11675910904927478, 0.09265034790615223, 0.09374389070793021, 0.9856837441601124, 0.9949189687599141, 0.9919770661415821, 0.9546015599181237, 0.9858486497200705, 0.98082074837619, 0.9917605116220837, 0.9864783862530826, 0.9893906416128722, 0.5190869398264593, 0.5405382516881534, 0.5455999166044039, 0.5374622624640091, 0.5745323948987912, 0.5749112546243409, 0.08811637449571286, 0.5757422559458232, 0.5912351877261206, 0.6211349365101132, 0.6144789960984427, 0.6027898449548803, 0.651486877774516, 0.7374800696679658, 0.6247954518580854, 0.6486790989611382, 0.5975910858496188, 0.6132800886710106, 0.09652639731291746, 0.3431036459377982, 0.31598758605126775, 0.2074066229875391, 0.3611724994285981, 0.41043372897684316, 0.3915809935144684, 0.37158487559797937, 0.3461868495462149, 0.009830798585781508, 0.12194847795227437, 0.12114602790880968, 0.40335860674213986, 0.3317751844977337, 0.49682063581714153, 0.2944014363976635, 0.09779847225818827, 0.16560176986268538, 0.12125729353463688, 0.11223747530464367, 0.0623704672941765, 0.19529721405025335, 0.14711714342758664, 0.06580292437454005, 0.09467770355896843, 0.13433468167724805, 0.11557506030611109, 0.23437369718110646, 0.17530979916608413, 0.07897264323288056, 0.21296678589218732, 0.22449817226298074, 0.21314800537513967, 0.2848894012859958, 0.26232530225077266, 0.21181790421116042, 0.048931418929821335, 0.013751840826509931, 0.07096695884403403, 0.07791119818161785, 0.02602930089950184, 0.07619406056001721, 0.09962985080744025, 0.018682649790694117, 0.1800963096025826, 0.17289984162776362, 0.12630734009606226, 0.2453470462882822, 0.18685513889708838, 0.1834045634309619, 0.1704052418013885, 0.21007788681620776, 0.06177491638890187, 0.13699491204773406, 0.6081123893703331, 0.5849257550141224, 0.603148965298492, 0.6392760194417944, 0.6995918254808446, 0.20822563064026456, 0.6470603942471186, 0.5724069515019361, 0.639260383625573, 0.09079724469945483, 0.09875526111026922, 0.07798480652329542, 0.07931683339770534, 0.08137900477247162, 0.08053591751363542, 0.09162134789642751, 0.10549013437386512, 0.07810088590368414, 0.20422071240800943, 0.14619076365526928, 0.13641090170537828, 0.1726314579185355, 0.16737847739642198, 0.134955094992247, 0.20042479566151805, 0.1655988897293561, 0.19038967039585297, 0.43728890922404695, 0.5165885161893741, 0.36331012057724577, 0.3434767038090587, 0.3506169900839671, 0.3334790933076124, 0.46890096222484556, 0.5451856623423315, 0.6689879081513153, 0.29702297056584226, 0.2956367877633834, 0.26440343637381736, 0.18504702292035657, 0.204053564235255, 0.24925130668935302, 0.3478709688745981, 0.35241097040048763, 0.2698748993050598, 0.20024277583130934, 0.17235645622340434, 0.18280375053320763, 0.16836047825948375, 0.16966195533800565, 0.15897757849277128, 0.1803030992749407, 0.17156107022908895, 0.17664999684415705, 0.1741943480367445, 0.19682507129362137, 0.18534243064525058, 0.41677152029279363, 0.17754227695571845, 0.17707757035822047, 0.17518082603410623, 0.2097477731017574, 0.17818409098024512, 0.16326723589514547, 0.18137788330007742, 0.15400927030785838, 0.5139997309147831, 0.18489486567656888, 0.17053407907238638, 0.09927165087992562, 0.16824007012748277, 0.20661928524337403, 0.4575665206595517, 0.20109347743527628, 0.3860832689088134, 0.19688735750125508, 0.579711378269957, 0.15861325891332168, 0.21034759902649625, 0.1863353725780128, 0.2035043982497321, 0.18264439125804754, 0.1906571944344435, 0.1906778940485433, 0.1845917649686869, 0.2081480805337823, 0.17971379664495546, 0.19063735166211815, 0.1789871127076884, 0.19328175735626052, 0.0702479443867271, 0.060011839992155536, 0.067682821726325, 0.05728351948520072, 0.0680656798957634, 0.06458583604192425, 0.061150144264648265, 0.06455543359935545, 0.056032536970132774]}, "mutation_prompt": null}
{"id": "fb403d7d-75f1-4314-ac91-864d700603bc", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                # Adaptive learning factors\n                self.c1 = 1.5 + 0.5 * np.random.rand()\n                self.c2 = 1.5 + 0.5 * np.random.rand()\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by introducing adaptive learning factors inspired by the Lévy flight mechanism to improve exploration and convergence.", "configspace": "", "generation": 16, "fitness": 0.35549568501383744, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "metadata": {"aucs": [0.881223365317704, 0.8904693918275709, 0.874789477749334, 0.8851967448073161, 0.8782701229739103, 0.8732001028470243, 0.8890439386864928, 0.8867388314948255, 0.8700830027134164, 0.7500716658278634, 0.7769525185402189, 0.768041058821473, 0.8013800412777303, 0.7546934926913034, 0.7608739523115589, 0.7465491935902595, 0.7662474274542598, 9.999999999998899e-05, 0.1325374666380974, 0.1487315647938603, 0.1252211732071875, 0.135961579632897, 0.16141067289197453, 0.1340753737122794, 0.1419210296204808, 0.11029642929325567, 0.17270319100211762, 0.11509315622623872, 0.13941920017466947, 0.1324872988245579, 0.12350578503960208, 0.13622882927131208, 0.12406001691657298, 0.1376298566786519, 0.11198831524342479, 0.13782151174285884, 0.978726074974191, 0.9863960087819358, 0.9815504717186809, 0.9797100464523877, 0.9645143820874696, 0.9810568479406984, 0.9886802439887361, 0.9828234071406118, 0.9815663465885736, 0.5824249012243994, 0.5441764143186355, 0.5354656711834076, 0.5534869465821992, 0.5362427046856773, 0.14972228820041167, 0.5465444815406078, 0.49768909922750504, 0.5168703502364222, 0.6569156085713955, 0.22458955283854198, 0.7228665326060699, 0.8308765019232647, 0.21240999775870628, 0.1932780156258478, 0.7355044337732825, 0.7777181649592109, 0.718616112377434, 0.4197084860697483, 0.3813616896443063, 0.3910408827286197, 0.377049573610016, 0.3793364221691612, 0.4113606494918344, 0.4263616349657856, 0.350069011722429, 0.386953237674843, 0.3368502394293701, 0.05112039156515824, 0.33787532807822185, 0.41617617401088913, 0.3819460011927517, 0.42904325412731736, 0.4093956697900831, 0.39063945941561506, 0.4134566682962283, 0.08240933950185336, 0.12983376594428586, 0.1430810245604227, 0.13690718525245016, 0.14872605068275246, 0.1056852272959351, 0.12886619178790992, 0.12185745115985902, 0.15453557263336193, 0.245827903803027, 0.2513079114927198, 0.25731655051596025, 0.24680514828836608, 0.23558893199136866, 0.2879602590413496, 0.3034573586183045, 0.3039732889121466, 0.2511344012081701, 0.12805230703525394, 0.0164881626088631, 0.16391727276833246, 0.0792434696311688, 0.07605064118819116, 0.13145438965650114, 0.07594432175817312, 0.07612955438367663, 0.08989324280778144, 0.24249004382383588, 0.18975978081930867, 0.1979680168818444, 0.2220869746374623, 0.21636533784145495, 0.19550837286677458, 0.4452893689658519, 0.2118637278054203, 0.1469177852404726, 0.6004792212555203, 0.6195371357356549, 0.6522169040213034, 0.6058986785502167, 0.6345770860935194, 0.6131634778725451, 0.6201895831426593, 0.6429365123255995, 0.6188690408368511, 0.1394509838205913, 0.1325092372727269, 0.1033948760261697, 0.12827135009278046, 0.10213137870814848, 0.10147721363828732, 0.11483093665308497, 0.17761603495790745, 0.11440016895684679, 0.2023334186538447, 0.22284539507260848, 0.17831236892545188, 0.14191424212361958, 0.21899636107557774, 0.18326813053409297, 0.41101632772118624, 0.145351355880873, 0.18576175072729728, 0.4810653874615415, 0.47821173672077466, 0.4925021486412393, 0.48955810107398334, 0.6002156759652547, 0.4359604305262509, 0.2864498998523276, 0.30718262866057144, 0.5665100193512635, 0.26616454990809835, 0.31439521415934946, 0.34295723449100546, 0.22368051867919436, 0.20749867629997176, 0.3018397112192228, 0.3197090016619957, 0.3730904112494794, 0.32441621413683974, 0.2700107875763239, 0.18458414156331937, 0.1904509197574733, 0.2204640900060263, 0.22918412292934098, 0.20816963468208294, 0.2059022393135186, 0.17826253185223195, 0.17976039500393448, 0.21738580001537267, 0.24331774111858562, 0.2090711105017199, 0.5265346906321964, 0.20054187288965286, 0.5815985295016017, 0.21831849860173358, 0.4667366728049622, 0.6257708260712542, 0.17184158400106175, 0.1864366309885176, 0.15348650110555517, 0.17286250493029787, 0.8107581023706822, 0.20008265368011757, 0.1661221047050192, 0.16990874878053852, 0.2115488549900013, 0.6853059262047931, 0.15602611348392015, 0.2074377033782131, 0.15362620383896997, 0.7060488514842369, 0.7432737118763326, 0.10521713730120807, 0.1630691998261392, 0.6189226121148692, 0.17200680148400316, 0.18643398686066281, 0.18731328673022185, 0.17626889728449568, 0.18678511979086732, 0.24930968821068022, 0.18687630492910556, 0.1803831530201736, 0.18236949007762238, 0.13618351337540968, 0.0806663088587839, 0.07556658752587042, 0.07515924771783322, 0.07757205652378962, 0.06593743286264653, 0.07232848877860376, 0.08347015047967576, 0.08536147332171207]}, "mutation_prompt": null}
{"id": "158fd13c-8c17-4c84-8016-ce37eea758a2", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.99  # New line: Introduce velocity reduction to enhance convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Implement velocity reduction based on fitness to refine search precision around promising solutions.", "configspace": "", "generation": 17, "fitness": 0.38520611235982394, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.29.", "error": "", "parent_id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "metadata": {"aucs": [0.9026909406293997, 0.8973867054237664, 0.9032836718565286, 0.9075918182595681, 0.9068361805127212, 0.9052801269200287, 0.9005749065455383, 0.8964374270611749, 0.9024128339270027, 0.8136136003496969, 0.8177899504596915, 0.7408530003667183, 0.722577550745084, 0.7161957969104282, 0.04612376548813413, 0.5408183195589922, 0.8266823270836767, 0.046314307738594684, 0.1743378453951393, 0.12297586997539767, 0.17386036516421643, 0.6876100958139462, 0.12492546915941805, 0.16438111980806047, 0.148186841203911, 0.15772710960863912, 0.12459869046215388, 0.14977281215089844, 0.11686933128373544, 0.09263991136010696, 0.12993546207007767, 0.13382379904965924, 0.1380596844539128, 0.13537802679283106, 0.11968690769258883, 0.11255769400172266, 0.990621640231956, 0.9859680600843977, 0.9868936033892356, 0.9807477279502924, 0.9753125733346363, 0.9728113999760699, 0.980406363342882, 0.982787977265531, 0.9855549888862261, 0.6810232603175986, 0.6589048156953984, 0.6778627087431961, 0.6766267685466736, 0.6755958551845698, 0.6806895624907595, 0.6744480792120382, 0.6359820325856091, 0.574443846188935, 0.826624607800553, 0.7952259938410355, 0.8141916260261913, 0.795720475252802, 0.8580548147709441, 0.8445550369005409, 0.12525684064656195, 0.8382782218330459, 0.7834187387173774, 0.1329832856619081, 0.4672086844984873, 0.4690151646774845, 0.4979159365826171, 0.17185488440301866, 0.4353180998904098, 0.13114515506154767, 0.1587107959947509, 0.44014358477694704, 0.4037782647544256, 0.11924791829785775, 0.39906637660034183, 0.5052046127732308, 0.5700293434867025, 0.13200281670403546, 0.5174291502351127, 0.11364479822051232, 0.5036860319413474, 0.11338982823257193, 0.12909848981776217, 0.16975145367848432, 0.1695171777317941, 0.17953366196389342, 0.11802679291838214, 0.11063716663483736, 0.11929425098654178, 0.12150204077065296, 0.24387039291688695, 0.25463117669180646, 0.28434814371542694, 0.27267460354232353, 0.24544981380552522, 0.23642619351516758, 0.32596721636276393, 0.2948154826551529, 0.2746593334198161, 0.19853279161110415, 0.28976449752482203, 0.04029371196639586, 0.23754681725852977, 0.09901775781282651, 0.23715984885384855, 0.1146417365856649, 0.10315194005886152, 0.2328247003790591, 0.2823887588689923, 0.31819027978782977, 0.30630117689546466, 0.2565143504245486, 0.2390654788257287, 0.28440990783514175, 0.23419177842743255, 0.15852159755276074, 0.23004135787035862, 0.7033322897772287, 0.6628879244057132, 0.6327016530510914, 0.6687938085520295, 0.6531635656079214, 0.7074371372690356, 0.6844833448928672, 0.6565184859502107, 0.6760559143384526, 0.11319703492877164, 0.1717776481366271, 0.10390199853746196, 0.18070149129034419, 0.11053920459444322, 0.12406869343781601, 0.108472428468251, 0.12643947354459995, 0.1438949066647217, 0.15512601030216555, 0.17003420052780016, 0.17366914227902397, 0.19354786247131794, 0.36833029413182083, 0.2029005578687445, 0.2011806101169623, 0.22612748453928055, 0.19050531680456595, 0.5462894376399456, 0.42571616191975414, 0.3851709422798667, 0.4966817825925667, 0.412306811389484, 0.6069774257234075, 0.5692821178945942, 0.5760728117249228, 0.4566999512503782, 0.22535492200743024, 0.22663224469576315, 0.29853825104517995, 0.26096243442775247, 0.2912193946922058, 0.29348708946190405, 0.28561509039523203, 0.530243464578289, 0.25980348733420466, 0.21678937550167043, 0.21087459084680904, 0.18578072732696083, 0.2063606166339952, 0.22183225161077214, 0.20200861015405203, 0.20139594849563525, 0.20544721003387112, 0.2243032371468372, 0.21843441542955555, 0.6807780264779648, 0.6386993344875398, 0.7044120112778707, 0.22593841418741145, 0.19699984767558354, 0.191258028351881, 0.2526970238987517, 0.20739170973694232, 0.1872890487495431, 0.18678163472750164, 0.15383654720686013, 0.9068330711092863, 0.2016996262076256, 0.20148190316515213, 0.12834691712749247, 0.1699109043124557, 0.9145592829299307, 0.8347817423230631, 0.15590052293803924, 0.7296004643100304, 0.2093918445259365, 0.8339964223923986, 0.7785742869483682, 0.10516307316988893, 0.21048640882990155, 0.8296049845310715, 0.18015314370578583, 0.19474899367312337, 0.19385985584913445, 0.18651493384665085, 0.18242704090261963, 0.1835721895711072, 0.18501625155002877, 0.19301711621712925, 0.19253860743135442, 0.10789023538439446, 0.09155398135590931, 0.08527976446434371, 0.08911426821466062, 0.08476743516412011, 0.07763936002400296, 0.07464532692447867, 0.0780302779450116, 0.08393462221918724]}, "mutation_prompt": null}
{"id": "8d3c2c36-5e84-46d2-bf7a-91d2ca5210a1", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            # Changes start here\n            if evals / self.budget < 0.5: \n                self.c1 *= 1.01  \n                self.c2 *= 0.99  \n            else:  \n                self.c1 *= 0.99  \n                self.c2 *= 1.01  \n            # Changes end here\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce adaptive learning rates for enhanced exploration and exploitation balance in PSODE.", "configspace": "", "generation": 18, "fitness": 0.3851393541938427, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "158fd13c-8c17-4c84-8016-ce37eea758a2", "metadata": {"aucs": [0.9050037183907038, 0.8992075204489068, 0.9077371513630793, 0.9023941748966322, 0.8975915517939851, 0.8943914055265357, 0.9086606189521089, 0.8968268691442783, 0.9067691097545096, 0.8061363905285517, 0.8203424663904013, 0.0430753130476742, 0.8243731234234762, 0.8042813116178464, 0.8077540699547812, 0.8112745203943235, 0.8215876635283306, 0.04999948821098221, 0.11174936276961289, 0.15422965533443278, 0.46586099248890456, 0.14668713182784354, 0.12628961316373566, 0.7506574555249345, 0.15573333485727614, 0.1570169693426844, 0.1534579476748491, 0.1630841745080932, 0.1409092161076836, 0.16381024570697933, 0.12880377718158598, 0.13307764823375168, 0.12892421627635575, 0.10696350021875078, 0.13942489315055284, 0.13166019314301958, 0.9906215480813237, 0.9859735681037427, 0.9869298529006411, 0.9807591817089061, 0.9747689078079, 0.971826915968489, 0.9804023452497053, 0.9827301898120077, 0.9855536514732076, 0.5240652313642826, 0.6951444667223687, 0.7030262895560796, 0.6197851744137053, 0.7119433094512843, 0.6675533664884093, 0.5827567254664155, 0.5565043336713817, 0.5310955459573377, 0.7566373136456428, 0.7764570406545266, 0.7706723212934675, 0.8949820918869682, 0.3652745955524336, 0.8510383120498963, 0.7690966039207673, 0.8018352349141608, 0.7477130153047684, 0.3809348496661138, 0.16470764288671635, 0.46464234929083925, 0.43887544220158814, 0.35131413600169836, 0.40574668373519784, 0.13265857029760753, 0.5189851842310385, 0.4457550935149027, 0.4660780799693329, 0.12258322757068818, 0.13200884949847735, 0.45999234722867655, 0.5038492330102078, 0.495562948329231, 0.45124848094216274, 0.11825138018527137, 0.21272098778185122, 0.14358000619173994, 0.14094878428062452, 0.17361317705484092, 0.0527537439101623, 0.20148447327463048, 0.1498219408935616, 0.15363995163370148, 0.10984885962191471, 0.13724259209024947, 0.2796806262392114, 0.2820296466107133, 0.24615063399278225, 0.27281623433018465, 0.29144829073265144, 0.21905290836711167, 0.2676296529631337, 0.34724583464233705, 0.2717704695028218, 0.23009422233854582, 0.2123946892311448, 0.25330128423508025, 0.14950779070875797, 0.128419838918286, 0.09650906201853648, 0.13031406361862485, 0.10557062292744324, 0.2462803038701733, 0.2526714919530999, 0.17867691865695468, 0.2543805438246691, 0.20966782127258077, 0.23792147568106392, 0.2704353484123976, 0.18361239681284913, 0.04921229919995951, 0.20946393843702826, 0.6636489996619415, 0.6811004883974983, 0.6292943498403009, 0.7120686749916267, 0.6576208168046256, 0.6569165041483633, 0.691143260601208, 0.6469005116444437, 0.6672584845499567, 0.11415671090816815, 0.09615343762637507, 0.17502449295731226, 0.11019794080498868, 0.12317592736140981, 0.12005107272571713, 0.0972707674503479, 0.09970763990699838, 0.0806581881452556, 0.1863954208661115, 0.3167807549729639, 0.20128320027144508, 0.20574298949070147, 0.18141863328320984, 0.14806530687861774, 0.3497991515681319, 0.2620581860730218, 0.2093187445701774, 0.39910308484486545, 0.5599310706135097, 0.48310409693951384, 0.25866167727870804, 0.5468965571368103, 0.6363038968323677, 0.5699560557295351, 0.5553749423865996, 0.5189115262080229, 0.3395559736062159, 0.27291815252343676, 0.2707552722608594, 0.38587371365614576, 0.36952741275669443, 0.24450845617096506, 0.3317789390136173, 0.3848842141253668, 0.46670940156562013, 0.21591694988479726, 0.2261492180577287, 0.19899411000049028, 0.20510087869710636, 0.20468163178234833, 0.21303697429021962, 0.2203178699847923, 0.2059767580227161, 0.1990180706011463, 0.22318045458298807, 0.21060688500472946, 0.24733924822592812, 0.21570609762442494, 0.18499310577474992, 0.5331200280997697, 0.22482751415069402, 0.24877890008531, 0.22101521567371607, 0.18720680256239908, 0.1871830247978662, 0.1539143322693559, 0.9184251874633265, 0.20133622212433566, 0.20140836340317703, 0.14273481599852966, 0.1698801627643004, 0.9258633799686856, 0.8109038642041819, 0.15625128937792465, 0.7463047886056766, 0.20972250653186253, 0.854053763977282, 0.7970649683288005, 0.10530526126019046, 0.2104063801316105, 0.8238262912236409, 0.17730425676533412, 0.19569827919538196, 0.1818786205074523, 0.22412073415689215, 0.199670264075562, 0.18850661295887738, 0.21006209986968838, 0.21095938249449786, 0.19781095400865312, 0.12337687151353471, 0.07594474920608119, 0.08248913220445897, 0.09165496219489322, 0.08047226015163089, 0.07795005482966522, 0.08307593336481423, 0.08767607805069111, 0.0869314915461904]}, "mutation_prompt": null}
{"id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # New change: Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce adaptive learning factors and enhanced velocity damping to improve convergence speed and accuracy.", "configspace": "", "generation": 19, "fitness": 0.388940725265131, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.29.", "error": "", "parent_id": "158fd13c-8c17-4c84-8016-ce37eea758a2", "metadata": {"aucs": [0.895773606590808, 0.8959741597242066, 0.9017031671763315, 0.8979630696602303, 0.8996678411215336, 0.902448253710998, 0.8989726395352848, 0.9051096376156722, 0.89541675167885, 0.8119349300731833, 0.7981606249384263, 0.7616026463551184, 0.8137177448915426, 0.807953492799294, 0.8118015321529313, 0.05434451673311447, 0.8140110392669334, 0.7448215007263455, 0.15053383663231068, 0.13027126055238092, 0.1420985260513804, 0.1380147272815564, 0.17732084366953982, 0.12252600651567191, 0.11329537470402973, 0.14630905328477006, 0.15049933421240114, 0.11491210414582309, 0.09083761838511328, 0.1133688710725641, 0.13165397753022756, 0.1376104843525685, 0.10693823641757938, 0.13364327294838385, 0.12854183506182804, 0.15560582786338673, 0.9906204865576496, 0.985952730776258, 0.9868179945423846, 0.9807036175887472, 0.9756363151136046, 0.970972893728917, 0.9790053331902868, 0.9829499721744805, 0.9820371201259132, 0.6287413025627102, 0.6437329859484474, 0.6438903122828521, 0.6688258675091007, 0.6717245453918541, 0.6367406162997706, 0.7049341047671074, 0.6023312515924106, 0.6273071946827503, 0.8641937472089644, 0.8150821430373243, 0.8259923428500127, 0.8846499562446233, 0.8113572098961994, 0.8207841220842952, 0.12546936409907283, 0.8664889101319948, 0.8320930065161639, 0.45581958685500334, 0.487156675131876, 0.4423678575744441, 0.5823048447858492, 0.13353407658984418, 0.45766606644609475, 0.43181274071225373, 0.4716564656836336, 0.45727812524707556, 0.4077868276987142, 0.11970743414832974, 0.3878470092187062, 0.5293435054886864, 0.40891694848116533, 0.46958059358657933, 0.49507147526776263, 0.22317430724253695, 0.437885414657026, 0.14518623517036866, 0.13734633058607848, 0.17654923780552179, 0.18351730866627092, 0.15267054385952616, 0.14190948864062536, 0.16395761958714505, 0.1322498345949762, 0.165284719705586, 0.279446601808392, 0.2584052347219067, 0.2382617800531842, 0.2846060579863444, 0.2544060474393519, 0.19081882174441467, 0.3151887089673562, 0.24901722850074226, 0.2707300647643216, 0.26648704214546237, 0.04606327706965352, 0.22018449706357568, 0.33687287238278685, 0.09810524161148992, 0.1522465293241525, 0.10218170193974896, 0.10789554464783957, 0.07361089618978744, 0.25397151099328164, 0.25263358001533043, 0.24947216601671895, 0.2550897622033226, 0.26942224938033554, 0.2851737065300858, 0.2495985285437744, 0.20298777064153606, 0.22277628920978987, 0.6939321816322073, 0.6772782213333727, 0.6867583562166487, 0.6664559488825453, 0.6811152632695231, 0.20949140392237176, 0.6714859638642929, 0.6740222014354389, 0.6769619317610562, 0.11157130579956143, 0.12596033579551313, 0.14174624996759155, 0.089129478000464, 0.14635610601063875, 0.1381432162197973, 0.13518269078006928, 0.1275214752283218, 0.11849352802841329, 0.2531259548541972, 0.23616653594998505, 0.15703758208447582, 0.19537819859732586, 0.4684810623929043, 0.2227653410778172, 0.26900706110078876, 0.19506944241826418, 0.22499858379783544, 0.6645292894342292, 0.5566620737105632, 0.3949949872395855, 0.5888106901496579, 0.35749528451081647, 0.4155420291152254, 0.5865377104834715, 0.6227645501847591, 0.7131789951923353, 0.29719976619157873, 0.3268282557967582, 0.2933792309791571, 0.26872296859099665, 0.2829895839975798, 0.2520819338364402, 0.27963618887447683, 0.34128830929012843, 0.29800955109125915, 0.20043883162506482, 0.19061701397071673, 0.20786927407813904, 0.18864487050643175, 0.20044754757082162, 0.18924300923389825, 0.21681863884393637, 0.2026744287671085, 0.20005921925401693, 0.18457062845294125, 0.20924599251075482, 0.19878920362391317, 0.25233803368389285, 0.24812543130262155, 0.2092871644228811, 0.7417271276940992, 0.2466355321278677, 0.24576785982096372, 0.18770515048459835, 0.18696442335217267, 0.15397973202006376, 0.17284943650049478, 0.2016843591140952, 0.2014491089778705, 0.14686604374513157, 0.16995864055020815, 0.2089012942339571, 0.8406479792627557, 0.1560579647320628, 0.7504275667124422, 0.6879324500097856, 0.822204301176295, 0.8437708156622667, 0.10527542207769314, 0.815178539885724, 0.83097242751378, 0.17443601183618151, 0.19481967362871588, 0.1942589009451886, 0.19519555441086944, 0.18350869708361184, 0.18496896574664157, 0.1982813822646755, 0.18561298509366964, 0.18478164552780896, 0.08214466718207036, 0.09558741287842842, 0.08634355793634807, 0.09307246431921667, 0.09358743735022124, 0.07618982111372441, 0.08116202720509302, 0.08900627498489522, 0.0801979175064611]}, "mutation_prompt": null}
{"id": "890d8814-5a94-4def-a78f-b7be05964806", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.9 - (0.5 * evals / self.budget)  # Dynamic inertia weight adjustment\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # New change: Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce dynamic inertia weight adjustment to enhance exploration and exploitation balance.", "configspace": "", "generation": 20, "fitness": 0.3170871728956942, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.7727830927515343, 0.7646282344045825, 0.743068691998576, 0.7849476695203853, 0.7530445986500536, 0.7558533140586995, 0.7760639088152352, 0.7765456564326972, 0.7751276057302277, 0.603739598527302, 0.5804084972820891, 0.6236555426484597, 0.5948517720710853, 0.5771584178482643, 0.5760309881154784, 0.6272262087029045, 0.6314630051954986, 0.5968152423622215, 0.12207088710348457, 0.12433181963954543, 0.13865526320392307, 0.27577480956966416, 0.09410417747852129, 0.14211802847362853, 0.10698190746112868, 0.11141274443937399, 0.123082672733556, 0.10728381398106379, 0.12166408990372168, 0.09550371844702332, 0.12062493483275216, 0.09963061946076346, 0.11683889002763026, 0.1179980864466399, 0.1222777783525002, 0.0925531894223326, 0.9867606509487775, 0.9865652985331032, 0.9906899008642893, 0.9834721793144688, 0.985545958813236, 0.975388484058099, 0.9841505230163579, 0.9848251550571219, 0.9857830617565178, 0.3796237293925062, 0.38670359923311803, 0.38589365396291897, 0.4006770671501806, 0.1403219039789807, 0.3675871804776393, 0.4122788416385321, 0.4156855139333364, 0.08038899804809074, 0.6101237111770832, 0.6339783245813257, 0.572625972409667, 0.6586910144683189, 0.6629651291887015, 0.19155124247111677, 0.6254284862611643, 0.607310265453818, 0.6458410174250433, 0.2707050190046908, 0.3055990534267349, 0.31577792710983876, 0.24099289255461454, 0.3402494878594705, 0.337262512415747, 0.2772181744201725, 0.32112120449406567, 0.3406738130540653, 0.2685232443005937, 0.15230081087804592, 0.2979312792099932, 0.3144774358509378, 0.28686337927052596, 0.3013375145915568, 0.30488281679188856, 0.2774258523913009, 0.274110502286107, 0.13926196943868185, 0.08576857822401107, 0.06170948953354127, 0.16543340230082337, 0.11885253000593399, 0.094920993271298, 0.08428045340434587, 0.10299558766671713, 0.15151093391491322, 0.28503277376697056, 0.25911498022238644, 0.23682576988133064, 0.22902505488588287, 0.24695285129666245, 0.19879607501644692, 0.25962388689707105, 0.24832387189442484, 0.23786637061621463, 0.05347306852751499, 0.05712229027633531, 0.042704506687509136, 0.04714687203569867, 0.11439182363418532, 0.02697376720078115, 0.07463893662580978, 0.025481032393897873, 0.03032993341182555, 0.1502193849311787, 0.15454463110306804, 0.1462336489602145, 0.17533729976026247, 0.17327180823416988, 0.1954611155139776, 0.1407577689672409, 0.15253985091803102, 0.16481971232875292, 0.5299279482905068, 0.5102364805735868, 0.5742865089964937, 0.5276105529500255, 0.5534467730062428, 0.5625868931270672, 0.5639886642806151, 0.533355725413537, 0.5387193734632163, 0.26059325737165817, 0.10324626641010215, 0.09354814892653707, 0.09182388305984002, 0.10701285908879765, 0.10229850396267315, 0.10933870129039625, 0.09624403008085314, 0.10758816154145612, 0.13916003250217857, 0.14821492443317053, 0.3281816251315115, 0.16076455970921055, 0.4599078839659835, 0.15222330881895707, 0.25026434969663136, 0.18113329745363516, 0.18179315108557526, 0.46759574660422476, 0.42809401162011707, 0.40277520404331124, 0.4244787620381255, 0.35456011261871023, 0.42816490499508786, 0.46089500071162515, 0.5129236201001139, 0.4851953288331706, 0.30850030330619194, 0.22696316272186134, 0.23945402335705235, 0.21069771783312286, 0.29911834661605996, 0.2320628600682112, 0.3043446796227045, 0.29311063305242546, 0.34290572499432603, 0.20958935030167558, 0.16529197665909412, 0.1862602191892958, 0.19326221812945654, 0.16616500903217746, 0.18006875661981925, 0.21787581492209962, 0.19365845999134068, 0.17958218648099633, 0.3756820061299613, 0.20769122067277634, 0.21360401896244596, 0.20968087392801837, 0.22888526383950158, 0.20715769605359446, 0.20821381553770002, 0.18457333236272633, 0.20948183067498416, 0.18725069773725367, 0.1833782689160437, 0.1128838661381234, 0.18895229718185846, 0.19847417160811598, 0.19786636635267296, 0.1425604839867377, 0.16871924390328097, 0.20817154536609828, 0.6946461591638406, 0.6158934406033696, 0.20623485021990695, 0.2070020461973925, 0.6625781913622151, 0.7034142015477033, 0.10510839504810232, 0.6173595483418431, 0.634327793709444, 0.19203266669624208, 0.19174239845367103, 0.17632630267638016, 0.18622628946215647, 0.17472705070487793, 0.18037924768931857, 0.21750264011053855, 0.18530637106626657, 0.1808207559035886, 0.0727543978932208, 0.0824825735398017, 0.08910196632529754, 0.0763350858991877, 0.0748107199117416, 0.07559195499668891, 0.07785341010187241, 0.08193419446949879, 0.0676474115665151]}, "mutation_prompt": null}
{"id": "78426cbe-e3a6-4ad9-8eb3-905b9af73111", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.4 + 0.5 * (1 - evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # New change: Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce adaptive inertia weight and hybrid mutation strategy to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": 0.3170871730415864, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.7727830927517271, 0.7646282344038822, 0.7430686919966301, 0.7849476695258514, 0.7530445986452539, 0.7558533140612336, 0.7760639088225252, 0.7765456564304515, 0.7751276057302088, 0.6037395911833803, 0.5804084749978333, 0.6236555425520747, 0.5948517718730661, 0.5771584173256883, 0.5760309883628647, 0.6272262054087525, 0.6314630045744039, 0.5968152373103763, 0.12207088710348313, 0.12433181963954543, 0.13865526320392307, 0.27577480956963474, 0.09410417747852129, 0.1421180284736241, 0.10698190746112868, 0.11141274443937399, 0.123082672733556, 0.10728381398106379, 0.12166408990372168, 0.09550371844702332, 0.12062493483275216, 0.09963061946076346, 0.11683889002763026, 0.11799808644662735, 0.1222777783525002, 0.0925531894223326, 0.9867606509487775, 0.9865652985331032, 0.9906899008642893, 0.9834721793144688, 0.985545958813236, 0.975388484058099, 0.9841505230163579, 0.9848251550571219, 0.9857830617565178, 0.3796237295252948, 0.3867035996755166, 0.38589365497777717, 0.400677067989722, 0.14032190397908617, 0.36758718056289374, 0.41227884178747654, 0.4156855142740953, 0.08038899804809074, 0.6101237111770832, 0.6339783245813257, 0.572625972409667, 0.6586910144683189, 0.6629651291887015, 0.19155124247111677, 0.6254284862611643, 0.607310265453818, 0.6458410174250433, 0.27070501903213107, 0.30559905338684756, 0.31577792708675356, 0.24099289258475876, 0.3402494878717325, 0.3372625130393332, 0.27721817439060414, 0.3211212044023689, 0.3406738129745259, 0.2685232443005032, 0.15230081177759403, 0.29793127920707707, 0.3144774359913458, 0.28686337935044026, 0.3013375146312005, 0.3048828183693576, 0.277425852407323, 0.27411050229009737, 0.1392619695586862, 0.08576857821756989, 0.06170948953347999, 0.16543340229660786, 0.11885252999964047, 0.09492099327296577, 0.08428045340422508, 0.10299558766584138, 0.15151093412833894, 0.2850327737682028, 0.25911498021765766, 0.23682576988149273, 0.2290250549483548, 0.24695285177325077, 0.1987960750247163, 0.25962388691036364, 0.2483238718972528, 0.2378663706153571, 0.05347306852734324, 0.057122290274950305, 0.04270450668772552, 0.047146872036163745, 0.1143918236272724, 0.026973767199778398, 0.07463893662559073, 0.02548103240205668, 0.030329933415976118, 0.1502193849201514, 0.15454463110226224, 0.14623364895756152, 0.17533729970795098, 0.17327180829810873, 0.1954611162077684, 0.14075776896876357, 0.1525398510176319, 0.1648197123766122, 0.5299279486782476, 0.510236478894467, 0.5742865533966239, 0.5276105533512297, 0.5534467747316194, 0.5625868895826546, 0.5639886594621525, 0.5333557268916748, 0.538719372166627, 0.2605932573615092, 0.10324626641010215, 0.09354814892653707, 0.09182388305984002, 0.10701285908879765, 0.10229850396267315, 0.10933870129034073, 0.09624403008085314, 0.10758816154146156, 0.13916003250219433, 0.14821492443321205, 0.32818162513192706, 0.1607645597091858, 0.4599078841028198, 0.15222330881895707, 0.2502643496965917, 0.1811332974535751, 0.1817931510855978, 0.4675957388558517, 0.4280940233805882, 0.40277520384751386, 0.4244787624561981, 0.35456011261272746, 0.4281649048200936, 0.4608949999385181, 0.5129236216502451, 0.4851953495949193, 0.3085003033232451, 0.22696316272167427, 0.23945402335699906, 0.21069771783309754, 0.29911834661343584, 0.2320628600683048, 0.30434467962429324, 0.29311063305241103, 0.3429057249726405, 0.20958935030167714, 0.16529197665909012, 0.18626021918935554, 0.19326221812968547, 0.166165009032198, 0.18006875661981925, 0.21787581492209962, 0.19365845999122444, 0.17958218648111268, 0.37568200612728464, 0.20769122067277634, 0.21360401896244596, 0.20968087392801837, 0.22888526383950158, 0.20715769605359446, 0.20821381553770002, 0.18457333236272622, 0.20948183067498416, 0.18725069773725367, 0.1833782689160437, 0.1128838661381234, 0.18895229718185846, 0.19847417160811598, 0.19786636635267296, 0.1425604839867377, 0.16871924390328097, 0.20817154536609828, 0.6946461591635575, 0.6158934406015178, 0.20623485021990695, 0.2070020461973925, 0.6625781913619541, 0.703414201547711, 0.10510839504810232, 0.6173595483431099, 0.6343277937095644, 0.19203266669624208, 0.1917423984536748, 0.17632630267638016, 0.18622628946216369, 0.17472705070487793, 0.18037924768932567, 0.217502640110533, 0.18530637106626657, 0.1808207559035886, 0.0727543978932208, 0.0824825735398017, 0.08910196632530365, 0.07633508589920934, 0.0748107199117416, 0.07559195499668891, 0.07785341010187241, 0.08193419446949879, 0.06764741156651422]}, "mutation_prompt": null}
{"id": "a6b06fc6-8f4b-4c42-93ec-449c9eb9cc4c", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.9 - 0.5 * (evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel += np.random.uniform(-0.1, 0.1, vel.shape)  # Stochastic perturbation to velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # New change: Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Integrate adaptive inertia weight and stochastic velocity perturbation to enhance exploration and exploitation balance.", "configspace": "", "generation": 22, "fitness": 0.2704812257022035, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.5765658836277316, 0.5190435655206265, 0.5668770435433765, 0.5723430212066501, 0.59254570510742, 0.5367872776934536, 0.5906471697581572, 0.5697869429219822, 0.5402579191456729, 0.22980292888691545, 0.22804646639699155, 0.23882273138143228, 0.2217030621076549, 0.23879982371129105, 0.24167109370028472, 0.26169462423757006, 0.2563368004998857, 0.23112200858916498, 0.10826651686778421, 0.09338174490371509, 0.11040653134187783, 0.10805344012128948, 0.1335334238024134, 0.09879260215066299, 0.11358218630664618, 0.10422971365556855, 0.11234041281829654, 0.08713604604496106, 0.09853831123532342, 0.10672063740643623, 0.1154729737474347, 0.10865133529126891, 0.08278806437540298, 0.09747992139594153, 0.08886432701174873, 0.08904669646389463, 0.9857168172639996, 0.9866550472576521, 0.9868521460657129, 0.9846368917756853, 0.9842507979682519, 0.9846536219237769, 0.984053550713032, 0.9812597433441416, 0.9854490376582599, 0.29454624346782443, 0.2560467807095007, 0.28507770082788453, 0.3031250374020813, 0.2826825360800592, 0.27809752094451656, 0.30261401698276436, 0.29190726548494383, 0.30456479336800235, 0.6327261432417619, 0.5536163720252587, 0.5296111421487584, 0.6546477097719137, 0.5853642452936303, 0.6203218037744567, 0.5069449239567363, 0.4804993605156245, 0.5404562452313817, 0.23530225611268596, 0.21092690913128054, 0.24780438688654194, 0.2964622425630171, 0.24586802372853322, 0.23949337067280263, 0.21325181254379189, 0.21419778817469248, 0.26127217038504436, 0.23926712546928264, 0.13842765043751803, 0.19911790160162368, 0.24303557029161205, 0.24719874251363594, 0.1853956726162782, 0.19792865780083746, 0.21711691846794712, 0.2281821831529185, 0.10729973162362638, 0.11832375122406646, 0.15599253187013473, 0.15089346056776798, 0.11695258650651463, 0.12389320354421984, 0.145498486087262, 0.10114456861803922, 0.08252777041698778, 0.20337222320488124, 0.24073194356619854, 0.2570365578765086, 0.2879135829899139, 0.29555005974351056, 0.221816071640628, 0.27103057886557147, 0.2610580402123518, 0.20760029935836988, 0.06307145299444905, 0.018773594648723302, 0.015363271119640198, 0.078467419332088, 0.06153475883568449, 0.005277805726350171, 0.055406200171584374, 0.034628136701607026, 0.04734328430720269, 0.16929722348461695, 0.15174122704367055, 0.14183568604162733, 0.14768784433744708, 0.13996965389882043, 0.150857857087632, 0.13979758881926407, 0.16727444870894492, 0.15665760736539236, 0.5012708609988837, 0.4790477903499809, 0.4773952155994019, 0.49839564423222626, 0.4781933405636625, 0.49279372933463517, 0.47831743446972497, 0.49801622913700716, 0.5024279292838061, 0.10394826222066422, 0.10461947205525102, 0.09523050600994776, 0.09056727090480832, 0.09801145929897426, 0.09314953703662099, 0.09132479624949541, 0.09103474845362491, 0.10288215071102591, 0.17691233327898515, 0.16073276794347457, 0.16920443111767203, 0.1945044224673267, 0.16167000107161233, 0.23193194482194335, 0.20359045043523627, 0.2512113093196906, 0.2259593231633149, 0.30793766228206665, 0.3271805061960057, 0.3026966784379105, 0.30676506610531995, 0.2908405419637232, 0.3107624364392074, 0.30519474537023683, 0.30190660042210793, 0.3100865782482791, 0.22585082181047966, 0.2126404125745487, 0.22776573807400258, 0.21561375290777218, 0.2153873029741198, 0.22619434454117238, 0.2416552885063865, 0.2275346551631472, 0.22683288640421795, 0.208404019633196, 0.18620413464029684, 0.19136850999674548, 0.18950633700012964, 0.17679956252936102, 0.17760649859423105, 0.1829241352050912, 0.21578108673788465, 0.21527263198749502, 0.19728023100345615, 0.2634521326244903, 0.18478610869528, 0.24950008859095174, 0.259410718082563, 0.19339209295736914, 0.2668180028120142, 0.2088378779797475, 0.225098277223302, 0.7518988703592114, 0.20458220808888028, 0.15351985724897932, 0.17757258921112684, 0.19556768873568786, 0.19851784286117957, 0.18058739300653903, 0.1668295392817255, 0.6874495074494036, 0.6843493799653, 0.16727998551876955, 0.483695882918048, 0.1998214712715487, 0.19288050802153, 0.5267190951265703, 0.20834052280263693, 0.2085728225742961, 0.20982630364371657, 0.19473865073008811, 0.1868298014307963, 0.18176160996794744, 0.18751068205398247, 0.2191215372245522, 0.19801961118849487, 0.17951669280171478, 0.18705839658069867, 0.17285056803611953, 0.08694988230421008, 0.07982748103520498, 0.07516631561101217, 0.07705600769781906, 0.08334823935730451, 0.07995842852683821, 0.07157388166611656, 0.06959789145162598, 0.07702944141709644]}, "mutation_prompt": null}
{"id": "b021e064-e78a-4598-a551-a9d986815490", "solution": "import numpy as np\n\nclass PSODE_Improved:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Adaptive inertia weight\n            self.w = 0.9 - 0.5 * (evals / self.budget)\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                # Chaotic local search\n                if np.random.rand() < 0.1:\n                    trial = pos[i] + np.random.uniform(-0.1, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                    trial_fitness = func(trial)\n                    evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # New change: Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE_Improved", "description": "Introduce adaptive inertia weight and chaotic local search to improve exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": 0.3182417544030974, "feedback": "The algorithm PSODE_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.7734536761880246, 0.7525349623186106, 0.772500111545978, 0.7832512110969456, 0.7790287692773319, 0.8048245678458561, 0.7754893786950998, 0.744787470886406, 0.764502920696952, 0.587027215582534, 0.3848127321172162, 0.5921455163343565, 0.585139748559325, 0.5985452708113717, 0.022555324489481277, 0.606077499055515, 0.6104621732098872, 0.547095369830895, 0.11570351213410901, 0.12427347153578283, 0.12820413919246654, 0.10810909703161165, 0.11155900034835375, 0.12981867651951073, 0.0942976552346525, 0.11366846958063814, 0.11641737552134546, 0.12502029332273812, 0.11698608828654267, 0.09325647313331287, 0.11207241533342127, 0.11510775587738609, 0.12160447123478424, 0.10507044892308737, 0.12242943039716703, 0.11799599029362029, 0.9860127273398454, 0.9860160887157938, 0.9902572360606433, 0.9799950334586579, 0.9804566265377442, 0.984757897549245, 0.9805905462804195, 0.9840385533358184, 0.9905225034479294, 0.4118894999485002, 0.3796468105225055, 0.3654950693847462, 0.4056650487715626, 0.4199711244553921, 0.40787701914808705, 0.38532542616885945, 0.34617577164496083, 0.3527586953195956, 0.5884696645372189, 0.5889661739417082, 0.6566606516276949, 0.6323371255092105, 0.3206890507864827, 0.6381969230190829, 0.5905402804607118, 0.6284901199538555, 0.5880247874395588, 0.32177864030606984, 0.3045401553024638, 0.3042505192566407, 0.2472102231549418, 0.2830895024950806, 0.2786724541862097, 0.27592649490885857, 0.26156558609524017, 0.2967584907796952, 0.2837850637304704, 0.2753007750818668, 0.28627266854856637, 0.2751583413504963, 0.2787847930492776, 0.344430970639784, 0.10649601000505116, 0.2628619085819891, 0.24211793169009643, 0.08371286917669418, 0.07917691798606807, 0.07923799127368314, 0.15048401396037026, 0.09276405426822787, 0.08720109442640078, 0.06085151867974292, 0.11251095838762826, 0.10338461323838732, 0.20332587713057493, 0.24999273850158044, 0.23430894325842033, 0.1770387802526293, 0.18524392331390394, 0.17709885391472158, 0.24648829181918164, 0.19565036201133723, 0.2780230897458901, 0.03404796608705751, 0.039632049549773174, 0.06023624800033045, 0.11311905320846705, 0.03652411062609795, 0.025285706418946563, 0.07710933770703465, 0.08599902719506569, 0.0072858339550085915, 0.14067562273266798, 0.14345950147325603, 0.17783678315254003, 0.16348529649605303, 0.14850870336771949, 0.20555875090338482, 0.1431051224015255, 0.1556932402695067, 0.0787346785841313, 0.5099389328956282, 0.5434293951931171, 0.5285246176295443, 0.5522718862998306, 0.516195420686118, 0.5448962755807436, 0.531426767116679, 0.5355168065500955, 0.5188600987893139, 0.12951226200088772, 0.12466578417823071, 0.11303475789509287, 0.10935641738754953, 0.20480987510526716, 0.1067187817563634, 0.13698006139846564, 0.09239165193109633, 0.10038091929430681, 0.16061807550614537, 0.13939460905906653, 0.21823935404968198, 0.15949266265690798, 0.2579481994051067, 0.18670299323889727, 0.20011015410974642, 0.21731844479317075, 0.19957708673270158, 0.40355863215076326, 0.4310968972511766, 0.46477477246891796, 0.31885373267008676, 0.3985211808013359, 0.34786379649007926, 0.2743125547791764, 0.45056631795628554, 0.4855604757109657, 0.22865518321294287, 0.2586731143601817, 0.2815637574353078, 0.22883194661417539, 0.23971672488342632, 0.24130656772132653, 0.37320879902588744, 0.2931316960565936, 0.2645695950505317, 0.2056344813916735, 0.19200265008071093, 0.18346508671624429, 0.18348646966444393, 0.18866448823870619, 0.1757930573062636, 0.1924286888410891, 0.18808533534992355, 0.19111229405800478, 0.3414307012397655, 0.18576991392644526, 0.1917918723279609, 0.41320386843358126, 0.2259195377103167, 0.1792399279971687, 0.21741211436313368, 0.2046860710064341, 0.1968740579659105, 0.7845286265840975, 0.1841352806486467, 0.7690904889923529, 0.7677489180333146, 0.19727732382953367, 0.7620341608262067, 0.6999795952996721, 0.16887478996691063, 0.7930476527836865, 0.6880267205366817, 0.5628800577081927, 0.20343580164160047, 0.2054231344168953, 0.19843909096333368, 0.64804875970715, 0.10518009276232299, 0.2107455165065637, 0.210469855476774, 0.1918556524632311, 0.1912859336933852, 0.17827770851688096, 0.20218218609216554, 0.19385655823265135, 0.18881403561373888, 0.1740581586777571, 0.19870539026576262, 0.20291860686718033, 0.07176723997955725, 0.08303711356198051, 0.08016119228162555, 0.07599918467894073, 0.0728832365094686, 0.07958962998105013, 0.07784437798831845, 0.07042407669947737, 0.07966655934027]}, "mutation_prompt": null}
{"id": "0c4e998e-bca7-419c-89ed-71cbc1baf03f", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.7, c2=1.3, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c2 *= 1.01  # Dynamic adjustment of social coefficient c2\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n            vel *= 0.85  # Hybrid velocity adjustment to balance exploitation and exploration\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhance adaptive learning and introduce a hybrid velocity adjustment to improve exploration and convergence.", "configspace": "", "generation": 24, "fitness": 0.34509928229592174, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.27.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.9113454797590661, 0.9075274860750975, 0.8985754308706145, 0.9023113075678485, 0.895562894030736, 0.9050868150404525, 0.8928446606562902, 0.9048093931570343, 0.8950629729602612, 0.7728068904781593, 0.75889743203906, 0.7395340473303934, 0.7458459149638117, 0.6753325186324615, 0.7862996946396084, 0.05956487867444793, 0.7864991406654394, 0.767908953500954, 0.11684373211494381, 0.10402154258942753, 0.14622773793292654, 0.26276005716681516, 0.09727516010845516, 0.13258031728671216, 0.11504619203957578, 0.13353112214583596, 0.15464639746007613, 0.13537394011617065, 0.13497296609434906, 0.09423130000657642, 0.11360853525902237, 0.12331521013528213, 0.10411560918335871, 0.1029349763379549, 0.14134812899725713, 0.12510611876353273, 0.9814764855536907, 0.9857781633204638, 0.9850753923624683, 0.9847933627006356, 0.9809148237868549, 0.9741691891426019, 0.9807883300940043, 0.9824625605059367, 0.9836747171700626, 0.23502905349846748, 0.3541648636604853, 0.33467956120459397, 0.373983023655829, 0.35867290748576575, 0.44329340382442506, 0.40563457147261084, 0.363842907545471, 0.34952487595981374, 0.6510506287662956, 0.5365196583425647, 0.6881255748960542, 0.8631672407252016, 0.7317349950002718, 0.8039054284669891, 0.7633489676112486, 0.8044947460901501, 0.7297977223243783, 0.1308741080826128, 0.3644858152157434, 0.3345829705396586, 0.1336998395689072, 0.3689724547817216, 0.37565100766663895, 0.3911764089369901, 0.5220345120046046, 0.34275761649321, 0.3757644998418638, 0.1672963143360524, 0.3345770331224287, 0.1355103892526084, 0.377780850671097, 0.3912712310955271, 0.40301299680860336, 0.3108338555513418, 0.1247010453825882, 9.999999999998899e-05, 0.11025509560135793, 0.13137032285895367, 0.0002760183803697247, 0.1563570389010649, 0.11419885496217752, 0.1303162546861386, 0.13046974471450135, 0.15631657403121424, 0.27192035524895464, 0.24862829488742633, 0.23760567785691766, 0.2657178735672302, 0.22938025255965722, 0.20607283178981584, 0.2900883289442432, 0.29862336113957144, 0.33415415786989855, 0.05132525207288052, 0.09199176233025352, 0.2571977382691285, 0.16418276375336305, 0.18800132350187715, 0.11086611247730671, 0.10152528293361118, 0.1970637555512531, 0.07398628852942024, 0.2036733501189094, 0.33193264896928354, 0.22301222530153741, 0.3277145143013507, 0.23151870907535932, 0.20105316777623716, 0.08353045722765928, 0.17758745577765989, 0.08385066134118824, 0.6213331560305946, 0.6516254923803566, 0.6292342365527357, 0.6251029385969735, 0.6281797624412875, 0.6036792022963102, 0.6416216951289626, 0.6684023511484207, 0.6665226488218086, 0.11434960334727151, 0.0976265992402876, 0.10475477747362016, 0.1125725995646113, 0.0850241544375252, 0.14215885686185703, 0.1166339117024292, 0.10306451434524788, 0.18617739453243365, 0.1351176132427827, 0.16687875819218656, 0.15034657410165653, 0.20844974236233693, 0.15816548982494327, 0.1892716821877286, 0.2032606869135648, 0.1593553543144215, 0.23043037645134168, 0.40223672022615076, 0.4119013586185508, 0.4205208217721832, 0.43549236648212664, 0.49038053810522986, 0.3880955444673623, 0.5213962317886417, 0.5181596364985264, 0.5086582025718418, 0.29048517336104307, 0.3116949205795271, 0.30410126590218334, 0.20426776875598118, 0.24445022914419146, 0.28073021394976383, 0.2828869339512011, 0.3124158567267671, 0.254427272108914, 0.1942694011298558, 0.1922009567349915, 0.2143000790310392, 0.1918646916038207, 0.17667237688278747, 0.18059805227503234, 0.1760683835343836, 0.1893883883412253, 0.18613756780846058, 0.22739085392832303, 0.23242752267056632, 0.22011329221947196, 0.21648312037168038, 0.21918184691878528, 0.24665106944792037, 0.22594516390308916, 0.22002451570579484, 0.21181441035949777, 0.18692087339722552, 0.16514677078613094, 0.1529664386729337, 0.9132054620402861, 0.2018999493880147, 0.20102666274161862, 0.14400676592879613, 0.17009419748910637, 0.21250275305333566, 0.7701461342365575, 0.1565515145441032, 0.7545865943326177, 0.21148090283270016, 0.7870045494772148, 0.8413876424557909, 0.10535829256923301, 0.209264111423627, 0.1048764995106074, 0.17867062769841158, 0.16952533342941678, 0.18357933195574283, 0.17635765597071074, 0.22339736289706236, 0.2034621199759571, 0.1857989578717194, 0.18581051084388178, 0.18695424283551798, 0.07702376129394639, 0.08627102160598732, 0.07650763383791981, 0.0765807053627412, 0.07007222107798294, 0.0789090403922812, 0.0722023058885044, 0.0766931146658193, 0.07132442645767512]}, "mutation_prompt": null}
{"id": "24ea5ed1-59b4-42ce-a957-ba4d55cf26b2", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.4 + 0.5 * (self.budget - evals) / self.budget  # Dynamic inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel + np.random.normal(0, 0.1, pos.shape)  # Add jitter noise\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Implement a dynamic inertia weight and jitter noise to improve exploration and exploitation balance.", "configspace": "", "generation": 25, "fitness": 0.2664479606471999, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.5599631294321898, 0.5388437471868921, 0.5285514700327301, 0.5767566729230293, 0.5745486346343884, 0.5381060123359138, 0.5514679817628401, 0.5323791969045644, 0.5511522241059218, 0.2316914238162363, 0.20787993612664257, 0.22107968766201347, 0.23148494471476788, 0.2118825146304537, 0.25106690850792635, 0.22488701462392569, 0.2638702047178, 0.22093667044155296, 0.11234316023625657, 0.09985529428917106, 0.09139359664788937, 0.09464346095981824, 0.0847279832827591, 0.08533654398384027, 0.09899502530364057, 0.09352255635809592, 0.09850411522041702, 0.09767269719183347, 0.08792140535735138, 0.08293847428465706, 0.08353925912729532, 0.08489029984823859, 0.10263555624990017, 0.08114708292087869, 0.07430014816544483, 0.09162329672267555, 0.9864339854827705, 0.9913887214307366, 0.9870373042081338, 0.9845161446881123, 0.9861495854261281, 0.9807024325246539, 0.9813983988974109, 0.985166623718087, 0.9808899642497754, 0.27747081108125127, 0.2669754517579205, 0.24498442380137386, 0.28362906149919365, 0.2653366930038943, 0.2715378204135861, 0.2819089976383625, 0.26886355712012944, 0.2761764882496832, 0.563122854403048, 0.5118544164283969, 0.4804377729755436, 0.5718823703920533, 0.5619168432680466, 0.5678102895836632, 0.46145648887498847, 0.592466167664971, 0.5208316496047087, 0.20875007673252988, 0.16620929969812592, 0.1929594723460638, 0.18720257818361175, 0.22868494061151212, 0.1168314585379352, 0.25145968540317576, 0.18047763842723308, 0.1979288889206825, 0.24779926005977737, 0.16908242555883368, 0.20113269451074678, 0.23945985932204894, 0.21295236569156284, 0.23450735715142856, 0.20594541174738534, 0.18305399058258098, 0.18168616422761752, 0.1285839550687311, 0.09578126728752634, 0.08212706861848851, 0.08476282765104626, 0.13757995612924134, 0.12116202790355923, 0.1041152877538194, 0.13083644710798636, 0.11362749014056894, 0.24781888751830516, 0.26410772131263205, 0.23018440874273927, 0.20856038678143274, 0.19916301736123943, 0.19336857800973617, 0.2610267112485499, 0.2504929419452283, 0.27005910379820064, 0.009792525406149943, 0.01408693592584076, 0.03441101555249482, 0.06907220206835085, 0.061253284498521854, 0.025576239919654076, 0.01497118006285092, 0.045918789551138484, 0.03469456799424042, 0.1780009256256324, 0.13576301660139323, 0.11836792770135529, 0.16245722451609368, 0.1600746613844809, 0.14331615716651436, 0.162497724301211, 0.14536185537193325, 0.15421303010444876, 0.44978086849233545, 0.4750059853897306, 0.46755737235634476, 0.4823295212016153, 0.46401898396078367, 0.5071436855647802, 0.5150708010223245, 0.47150586196785016, 0.4823758587504574, 0.09079405439207511, 0.08284198423189626, 0.08869571068979454, 0.09295135928180864, 0.100340078613959, 0.1040286530982375, 0.0992069196505807, 0.08830377681949686, 0.08209735012133224, 0.24194351234451683, 0.1885775725610097, 0.24663744878568616, 0.2626808238400239, 0.2112012076003008, 0.14179137294487554, 0.1682568967080983, 0.23347023727554117, 0.20642073152527807, 0.2871358021723951, 0.2887886837813346, 0.29133433575512235, 0.2889414583282087, 0.30003781157159637, 0.2878587466249163, 0.3013760823361046, 0.29973219566468357, 0.3102091511243058, 0.20894616461541748, 0.21808904286649688, 0.23008532156694173, 0.22756198635994396, 0.22310771716292843, 0.19794805312686992, 0.23953239209624388, 0.24503047399764033, 0.24314689379862586, 0.1949268245472886, 0.19651958167065076, 0.18684740885124318, 0.19461914771113586, 0.17457769251164845, 0.18971949245892383, 0.1872126883694476, 0.18196464853390049, 0.2066487904922315, 0.18956663865704848, 0.18025674133709468, 0.1904994871592769, 0.18585796410612787, 0.19777934115971607, 0.20587861668783802, 0.1921989020235788, 0.19517353239229374, 0.1822099653600725, 0.7912989959308174, 0.18691311206405248, 0.1533727676805895, 0.7301044891714292, 0.6766035701913287, 0.19707656167444887, 0.1602767106066273, 0.16911981117323538, 0.6964712298697691, 0.6489779581160853, 0.5862399319652027, 0.19401619541492798, 0.20702119549075837, 0.16484412083201094, 0.6427367146997394, 0.209088481808671, 0.2110922050845041, 0.20751205130935346, 0.20103611595114812, 0.19916168909659349, 0.18826875267395626, 0.1757418355641721, 0.18115150937391644, 0.1943198088575716, 0.17932529554703447, 0.1761229091904799, 0.17609660894698376, 0.07131955682607583, 0.07985650364583052, 0.07976828544287451, 0.07302423857751361, 0.0785953874849511, 0.07189578845045164, 0.07018826116034393, 0.0836492862336663, 0.07992859257727702]}, "mutation_prompt": null}
{"id": "23772ad2-f173-43ce-9df1-2a0776253b99", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        w_min, w_max = 0.4, 0.9  # New change: Introduce dynamic velocity inertia weight\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = w_max - (w_max - w_min) * (evals / self.budget)  # Adjust inertia weight dynamically\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # Keep existing velocity damping for convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce a dynamic velocity inertia weight to balance exploration and exploitation more effectively.", "configspace": "", "generation": 26, "fitness": 0.3170871728956942, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.7727830927515343, 0.7646282344045825, 0.743068691998576, 0.7849476695203853, 0.7530445986500536, 0.7558533140586995, 0.7760639088152352, 0.7765456564326972, 0.7751276057302277, 0.603739598527302, 0.5804084972820891, 0.6236555426484597, 0.5948517720710853, 0.5771584178482643, 0.5760309881154784, 0.6272262087029045, 0.6314630051954986, 0.5968152423622215, 0.12207088710348457, 0.12433181963954543, 0.13865526320392307, 0.27577480956966416, 0.09410417747852129, 0.14211802847362853, 0.10698190746112868, 0.11141274443937399, 0.123082672733556, 0.10728381398106379, 0.12166408990372168, 0.09550371844702332, 0.12062493483275216, 0.09963061946076346, 0.11683889002763026, 0.1179980864466399, 0.1222777783525002, 0.0925531894223326, 0.9867606509487775, 0.9865652985331032, 0.9906899008642893, 0.9834721793144688, 0.985545958813236, 0.975388484058099, 0.9841505230163579, 0.9848251550571219, 0.9857830617565178, 0.3796237293925062, 0.38670359923311803, 0.38589365396291897, 0.4006770671501806, 0.1403219039789807, 0.3675871804776393, 0.4122788416385321, 0.4156855139333364, 0.08038899804809074, 0.6101237111770832, 0.6339783245813257, 0.572625972409667, 0.6586910144683189, 0.6629651291887015, 0.19155124247111677, 0.6254284862611643, 0.607310265453818, 0.6458410174250433, 0.2707050190046908, 0.3055990534267349, 0.31577792710983876, 0.24099289255461454, 0.3402494878594705, 0.337262512415747, 0.2772181744201725, 0.32112120449406567, 0.3406738130540653, 0.2685232443005937, 0.15230081087804592, 0.2979312792099932, 0.3144774358509378, 0.28686337927052596, 0.3013375145915568, 0.30488281679188856, 0.2774258523913009, 0.274110502286107, 0.13926196943868185, 0.08576857822401107, 0.06170948953354127, 0.16543340230082337, 0.11885253000593399, 0.094920993271298, 0.08428045340434587, 0.10299558766671713, 0.15151093391491322, 0.28503277376697056, 0.25911498022238644, 0.23682576988133064, 0.22902505488588287, 0.24695285129666245, 0.19879607501644692, 0.25962388689707105, 0.24832387189442484, 0.23786637061621463, 0.05347306852751499, 0.05712229027633531, 0.042704506687509136, 0.04714687203569867, 0.11439182363418532, 0.02697376720078115, 0.07463893662580978, 0.025481032393897873, 0.03032993341182555, 0.1502193849311787, 0.15454463110306804, 0.1462336489602145, 0.17533729976026247, 0.17327180823416988, 0.1954611155139776, 0.1407577689672409, 0.15253985091803102, 0.16481971232875292, 0.5299279482905068, 0.5102364805735868, 0.5742865089964937, 0.5276105529500255, 0.5534467730062428, 0.5625868931270672, 0.5639886642806151, 0.533355725413537, 0.5387193734632163, 0.26059325737165817, 0.10324626641010215, 0.09354814892653707, 0.09182388305984002, 0.10701285908879765, 0.10229850396267315, 0.10933870129039625, 0.09624403008085314, 0.10758816154145612, 0.13916003250217857, 0.14821492443317053, 0.3281816251315115, 0.16076455970921055, 0.4599078839659835, 0.15222330881895707, 0.25026434969663136, 0.18113329745363516, 0.18179315108557526, 0.46759574660422476, 0.42809401162011707, 0.40277520404331124, 0.4244787620381255, 0.35456011261871023, 0.42816490499508786, 0.46089500071162515, 0.5129236201001139, 0.4851953288331706, 0.30850030330619194, 0.22696316272186134, 0.23945402335705235, 0.21069771783312286, 0.29911834661605996, 0.2320628600682112, 0.3043446796227045, 0.29311063305242546, 0.34290572499432603, 0.20958935030167558, 0.16529197665909412, 0.1862602191892958, 0.19326221812945654, 0.16616500903217746, 0.18006875661981925, 0.21787581492209962, 0.19365845999134068, 0.17958218648099633, 0.3756820061299613, 0.20769122067277634, 0.21360401896244596, 0.20968087392801837, 0.22888526383950158, 0.20715769605359446, 0.20821381553770002, 0.18457333236272633, 0.20948183067498416, 0.18725069773725367, 0.1833782689160437, 0.1128838661381234, 0.18895229718185846, 0.19847417160811598, 0.19786636635267296, 0.1425604839867377, 0.16871924390328097, 0.20817154536609828, 0.6946461591638406, 0.6158934406033696, 0.20623485021990695, 0.2070020461973925, 0.6625781913622151, 0.7034142015477033, 0.10510839504810232, 0.6173595483418431, 0.634327793709444, 0.19203266669624208, 0.19174239845367103, 0.17632630267638016, 0.18622628946215647, 0.17472705070487793, 0.18037924768931857, 0.21750264011053855, 0.18530637106626657, 0.1808207559035886, 0.0727543978932208, 0.0824825735398017, 0.08910196632529754, 0.0763350858991877, 0.0748107199117416, 0.07559195499668891, 0.07785341010187241, 0.08193419446949879, 0.0676474115665151]}, "mutation_prompt": null}
{"id": "467864a1-2c68-4ed3-845e-26c38e10bacc", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel += np.random.normal(0, 0.1, vel.shape)  # Added stochasticity in velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial *= np.random.uniform(0.9, 1.1)  # Adaptive position scaling\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # New change: Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Integrate velocity stochasticity and adaptive position scaling to enhance exploration and exploitation balance.", "configspace": "", "generation": 27, "fitness": 0.24939732838709427, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.48149224604314433, 0.49094505749359696, 0.47080966525613077, 0.46102168891650175, 0.4551618022270746, 0.4581542273330198, 0.4795865885759233, 0.47562351783498125, 0.4550035323612579, 0.047998126184928824, 0.04816344610544365, 0.059419871294506654, 0.10859905628311595, 0.10204293630798422, 0.08397825085412447, 0.03717726939266808, 0.05711799203321155, 0.04851907190203697, 0.1201614199177613, 0.09823368430027002, 0.11188066754960913, 0.09473882376383713, 0.09173297802014824, 0.10846285248892729, 0.11452711058065068, 0.11390667207439531, 0.10129175631861531, 0.09923858573696764, 0.10581279353945305, 0.1005504978954721, 0.09964782476352796, 0.1022963749820357, 0.10153777585295776, 0.09495659744602414, 0.10199475177417294, 0.14934845583411238, 0.9818931649661592, 0.9863558364647764, 0.9860548771163452, 0.980657366286692, 0.9806948316815042, 0.9807255977412115, 0.9848915467501079, 0.9800259265016649, 0.9813084280883065, 0.27632422989248195, 0.30469088540810785, 0.2806305434800117, 0.30922955325016377, 0.2973197176252472, 0.2859095437001361, 0.2968881100115113, 0.30376695118009633, 0.2823826040691416, 0.766534150368332, 0.7366905425418097, 0.7281122015082062, 0.3200977714678457, 0.333246199204279, 0.46670552576549584, 0.4174653325604084, 0.5303812975702613, 0.33448172024436473, 0.12872565179672257, 0.16845186596938944, 0.19739667600680455, 0.17369872495517924, 0.1764764454392307, 0.17921178907878732, 0.19815634577494157, 0.21880154709939592, 0.18143676046868662, 0.26864608441078686, 0.2420490722611417, 0.2393199055721943, 0.23071981672458697, 0.24750005281160803, 0.26278502003860926, 0.15432777037527756, 0.12301582241474862, 0.2346791156486372, 0.006758334152978218, 0.002693182546417705, 0.025887615293204713, 0.01482033026449392, 0.006634760339771284, 9.999999999998899e-05, 0.12808104062552372, 0.09830374779368012, 0.08355375331801429, 0.11531983216720343, 0.06527673686411617, 0.09713883012124913, 0.08451534795818638, 0.03380752915418073, 0.06588341957576138, 0.1035132749590455, 0.09951138687404859, 0.08126935935662982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12107551343529432, 0.10497801457112788, 0.13920960006121552, 0.11042022982468502, 0.12533297962477918, 0.1253970673331718, 0.08174958216771533, 0.07086130664357593, 0.0816726424476596, 0.4642236564426775, 0.45908973886777826, 0.4622850441263494, 0.428621916550731, 0.41184377837358765, 0.42880878095430763, 0.427277630152722, 0.4354759419891717, 0.4342496087673602, 0.10736387260019042, 0.10936032067544532, 0.10468401615538236, 0.10725396139424825, 0.09083998286436967, 0.10046662777356707, 0.123709488045597, 0.12788884509713194, 0.09959482519664054, 0.19127664557870194, 0.18198385389099314, 0.19026616213463687, 0.2463405823902487, 0.26385464101039147, 0.1557747445062292, 0.2911032862657248, 0.19485559612679793, 0.21708258591420238, 0.3192798086164471, 0.30357264923798344, 0.30329875162033193, 0.30987756293055346, 0.2949506337197344, 0.30170380872680747, 0.2976637499846645, 0.29998803315172606, 0.29725689735722727, 0.24052287304413922, 0.24475089649417336, 0.2333261429173763, 0.22592777275317222, 0.24286606111480746, 0.24588680214806768, 0.24286399693667904, 0.24709054631517002, 0.22790970494736118, 0.20608754914328542, 0.20812391587655998, 0.20851432524249602, 0.21900912048415544, 0.2264395801415512, 0.20577512242157436, 0.20832580932866718, 0.1871935053053141, 0.2339806442237603, 0.20485579220651284, 0.2093542855355608, 0.2352225163362759, 0.21701095889370658, 0.21100559088439375, 0.1950584619508896, 0.1991606416795162, 0.23637925078157462, 0.21257819198766148, 0.7108601788426502, 0.17730611736615143, 0.15318217856214666, 0.7015256740293756, 0.20012894143288618, 0.642935833494689, 0.1644491232059434, 0.16981578410370912, 0.6748991515181395, 0.6698528398022091, 0.16882091581482928, 0.5970993126780725, 0.20913991413514288, 0.6003094098029188, 0.609335689687607, 0.10529907799595473, 0.10504700170300896, 0.5812346166720497, 0.19081845186377744, 0.193477639245202, 0.18560392123453917, 0.18224212880702928, 0.21423890992603178, 0.19165677420088134, 0.18759775841276138, 0.18930022887191, 0.18365055225135507, 0.09593822099822358, 0.08472155691096728, 0.09110407264849474, 0.09091778545287343, 0.07419063429010564, 0.08867021432000854, 0.10819222915130744, 0.09717373726059608, 0.07603595763004034]}, "mutation_prompt": null}
{"id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by adapting velocity damping based on fitness diversity, aiming for better convergence precision.", "configspace": "", "generation": 28, "fitness": 0.39774574307717736, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.9083921202972852, 0.9011209009492638, 0.9044960539351309, 0.892913803638225, 0.890488833714419, 0.9033203437063102, 0.9026761252243944, 0.8941952095937931, 0.9057879993032152, 0.7743317922507876, 0.79563882921022, 0.5852025676282926, 0.8139554564755875, 0.7999875259136886, 0.8030070458090436, 0.8078535599086566, 0.054413930545018196, 0.7704130606369575, 0.13656181162241376, 0.69336481706447, 0.6716667516613705, 0.11179209281734714, 0.14002985282743252, 0.15776242355811976, 0.1777804377708, 0.11767645197884957, 0.1442261818533006, 0.1095213146277716, 0.14072582021544877, 0.13326940913787444, 0.11018749453287224, 0.0928817056201886, 0.1280651087631992, 0.12448423739928671, 0.15529481517971966, 0.13084895095942362, 0.9906205571898162, 0.9859570120492911, 0.9868402774752513, 0.9807039530070538, 0.9756364241050943, 0.9709754659155376, 0.9790323300374494, 0.982894142419722, 0.9841727365883958, 0.6137489391640982, 0.6083102544728951, 0.6524967604830828, 0.6257824048150729, 0.6541600786739993, 0.6432323458676807, 0.6266088210552496, 0.3289321910088603, 0.6048845889347709, 0.22738456656608408, 0.8125687417508061, 0.7914020097778058, 0.8390057029347855, 0.8608903394758541, 0.8567547322360237, 0.7836768410992868, 0.8105967950748354, 0.8677195232689991, 0.4861546222773332, 0.4412755853553515, 0.5015821713081505, 0.49057504940220564, 0.4734484339099452, 0.5131371163885912, 0.4092813058206197, 0.5214553683868942, 0.5008918054384282, 0.4445827242449232, 0.05492229649009972, 0.38669212406174547, 0.5070093101298365, 0.47045279480028235, 0.13292527379668062, 0.4452784688301331, 0.13417376725931407, 0.12545606466380355, 0.16887802177003663, 0.11006730500706186, 0.16313104119715427, 0.24728070778852562, 0.11339358011333223, 0.14736900856798607, 0.13296904219189876, 0.11768430014096543, 0.1495999824567924, 0.26939323119275305, 0.21940202767337447, 0.22949136891424948, 0.2948788832278071, 0.2576309659286471, 0.20200179433697296, 0.32191897878762443, 0.3082660588587256, 0.3137716455196856, 0.12869786400613326, 0.03164655793551896, 0.04060627644835624, 0.2909434842016304, 0.09627408606674148, 0.1545888386088583, 0.11368299392133574, 0.10683962341210396, 0.16574308839430196, 0.26508263349340133, 0.25423234217782487, 0.41067745716829973, 0.25845597840307377, 0.30225450668153786, 0.24895735553195664, 0.2683943983166919, 0.33603675700235336, 0.38285344717436975, 0.6456357383209838, 0.6873609321257105, 0.7242978183937963, 0.6719453649699074, 0.6531792199487627, 0.54270312692504, 0.7001406253812441, 0.6875149000366452, 0.6816553872861324, 0.14113243500133, 0.1378500886302383, 0.10469869636374785, 0.5990511354462899, 0.1560323818623015, 0.12043331701439852, 0.14595556657491093, 0.10931738890185538, 0.08712357562237916, 0.15985118747023153, 0.1730772204020422, 0.15205577410689042, 0.22674510990758023, 0.2553072569799417, 0.2523169133442321, 0.2006012817183409, 0.1689291453538071, 0.20622814790322108, 0.5721104707304411, 0.7060330100201904, 0.3702859109680541, 0.4719942440235346, 0.30488375061753237, 0.5800686190228517, 0.4795128657265879, 0.7485627757587671, 0.5726425455537179, 0.35651610912975906, 0.2367283693989185, 0.4516044353410995, 0.27495409749604516, 0.2065990690148456, 0.3500073362588576, 0.42294063734700227, 0.35796870511709344, 0.3289729458644757, 0.2060510656898279, 0.19228546860882878, 0.1859631903985286, 0.20101092601602433, 0.2614339363434163, 0.2127063071982055, 0.19616688386500314, 0.22128431596439513, 0.23835332569232492, 0.6345652621248954, 0.24006873312192878, 0.24479544751054705, 0.6228457192951675, 0.6883000571004683, 0.24762043493627406, 0.7564647869566417, 0.2238702158002347, 0.19310223948012173, 0.18796209562146537, 0.18694260123425144, 0.1540034800240606, 0.9074787199756579, 0.2015485098638936, 0.2014587999318922, 0.14687304935486156, 0.16997518568925207, 0.2122196960271644, 0.8384671097070031, 0.15607413559900085, 0.7561810843211623, 0.2102426063785957, 0.8057148176638464, 0.8326201044725821, 0.10525518840506864, 0.10434195698592208, 0.8384094532690622, 0.1763549658878304, 0.17242748324534785, 0.18379564198161713, 0.18096061226318738, 0.1844525362424948, 0.1991042249806998, 0.18836827890217656, 0.16978945612200846, 0.17780660583351326, 0.1384038722929034, 0.08855754525904158, 0.09491357888808649, 0.08152208191774368, 0.08457866366071098, 0.08472932787387855, 0.08788283458164081, 0.0667076903393301, 0.09482927342838177]}, "mutation_prompt": null}
{"id": "a411d674-3e80-4b6b-9d35-8dcd068d3381", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.9 - 0.5 * (evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / (np.max(fitness) + 1e-12)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by introducing adaptive inertia weight and diversity promotion for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": 0.3253823487211788, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.7468024806116573, 0.7493351311771993, 0.7682736412407505, 0.7738806573312419, 0.7752892482429077, 0.7486404762489735, 0.734848787551067, 0.7759028354230895, 0.7787801243150754, 0.629811869009591, 0.6063030334218793, 0.5885907413016986, 0.6207016150429154, 0.6029045581786646, 0.6054432865509366, 0.6145169312150424, 0.5931836841467106, 0.5776674015990322, 0.1908720059787553, 0.129608018702843, 0.22352500457517044, 0.12079476986725513, 0.11156777587876276, 0.13055149485475814, 0.13838005372176554, 0.13764323570716297, 0.12192253709457113, 0.1144011808000629, 0.08765206878591547, 0.10127760333599467, 0.1119506208749601, 0.10872396411122898, 0.11691331715787312, 0.11383120073254305, 0.10765805852448262, 0.12129604308752862, 0.9867749743133067, 0.9865832288285227, 0.9907003564414031, 0.9834727210230647, 0.985545323622549, 0.975389078974583, 0.9841544850072527, 0.9848273046160749, 0.9857850928468594, 0.35164554495265454, 0.33637718031534736, 0.381502464699353, 0.3657117308575203, 0.35670664618204806, 0.3786564134398118, 0.3795292286096631, 0.4220573918810572, 0.08153475005719735, 0.6170274313805719, 0.32537759329209726, 0.5268649971868891, 0.6453290178716243, 0.6015729278607076, 0.5590933099311284, 0.5739610938580111, 0.6269890227490884, 0.623353770465062, 0.3272042666371122, 0.2731151251489139, 0.29692407354793204, 0.2982409262978055, 0.28138994924296945, 0.3038444981837207, 0.2717386357185999, 0.29628252494872487, 0.28605535907621427, 0.2941814217535148, 0.05100027718277633, 0.26907437776647447, 0.31861272031797483, 0.23431187857855407, 0.11914473078524401, 0.2906180608766463, 0.25404693191746996, 0.29456026067425345, 0.1579793419180272, 0.11919170496098053, 0.0899763666301997, 0.18935874346000325, 0.14172781431000514, 0.08777498885098645, 0.15675607908990974, 0.10307694117585231, 0.1076257826947522, 0.25925724563697417, 0.2499648729609849, 0.23397015419742495, 0.20334526315192547, 0.2095221081580736, 0.2067632880871404, 0.29321596789225723, 0.2765475018642747, 0.2524559572369687, 0.061277938422870326, 0.040535698013081656, 0.04082740995418899, 0.06032389609274813, 0.09061893533698562, 0.02713589169915176, 0.01904530028122009, 0.04341512682272519, 0.04621711648506044, 0.16330854708537512, 0.15820714126332203, 0.16383198186552528, 0.15316775451918052, 0.1568265156310681, 0.17457605053578884, 0.14962134332459243, 0.13914616543553548, 0.16990083283075696, 0.5744169875417859, 0.5584629848809464, 0.5388621183818767, 0.5475605758215212, 0.5440765144112947, 0.5429555430981892, 0.5483078209439172, 0.5236054707616487, 0.5454697233717742, 0.12298246521221645, 0.12390286252315841, 0.12805945356098436, 0.09044300673097039, 0.09442891470414738, 0.10445012709368506, 0.08815206774245088, 0.1214151667826684, 0.08784391429988514, 0.14703847673037818, 0.14243202347189376, 0.339912376834105, 0.3310282396963614, 0.16415992402226343, 0.14867294301655742, 0.308060086477953, 0.14399003857130044, 0.18576309540294522, 0.3693647835029161, 0.3791706784667602, 0.4284346494377351, 0.4461222380708344, 0.3897725493456222, 0.3298469289924346, 0.4607526296895821, 0.4945458050491428, 0.3880301214090568, 0.2952390616639826, 0.20779809777622482, 0.30273626049441005, 0.28378874820638444, 0.24680841114667573, 0.283257622695539, 0.32417598916656354, 0.2746402531420984, 0.35402871955773585, 0.18157279758021205, 0.18108671728618675, 0.19226493370219544, 0.2031682447562586, 0.1780505146654332, 0.18433563718942103, 0.19610219885501678, 0.188340063314545, 0.20989308245854532, 0.1907190590861183, 0.1910191219988353, 0.21127107772628495, 0.19103271093119023, 0.3002604755191447, 0.18366467314465218, 0.3215645504947626, 0.18617644058445137, 0.19596712523209803, 0.18645401573034814, 0.6932612914875045, 0.11287767346193578, 0.6603242362382834, 0.7303321934813064, 0.19793611569337055, 0.14357836346253738, 0.1690535784026953, 0.7226848746467025, 0.6719979622443194, 0.6119085199881447, 0.5996697047936541, 0.2063255670112739, 0.6635087581767602, 0.6933591939762755, 0.10496448010009951, 0.7235321043860103, 0.6660637303214832, 0.20484670493108625, 0.19129740893444858, 0.21549441118086365, 0.20365680935826724, 0.18421433222293715, 0.180774825553484, 0.17880545406105974, 0.18662552540685307, 0.20398849024300147, 0.08095495424977839, 0.08411329276512547, 0.07956308138335211, 0.0745414619976229, 0.07598243295018714, 0.07701539229399479, 0.0674534146065463, 0.07392728735762322, 0.06723546205543174]}, "mutation_prompt": null}
{"id": "ae6e55c8-82bf-40d2-9cc2-f43d3fb129b2", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n                \n                # Local search step added\n                if evals < self.budget:\n                    perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n                    new_solution = np.clip(pos[i] + perturbation, self.lower_bound, self.upper_bound)\n                    new_fitness = func(new_solution)\n                    evals += 1\n                    if new_fitness < fitness[i]:\n                        pos[i] = new_solution\n                        fitness[i] = new_fitness\n                        if new_fitness < pbest_val[i]:\n                            pbest_pos[i] = new_solution\n                            pbest_val[i] = new_fitness\n                            if new_fitness < gbest_val:\n                                gbest_val = new_fitness\n                                gbest_pos = new_solution\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Further enhanced PSODE by adding a local search phase using a simple hill climbing strategy to refine solutions.", "configspace": "", "generation": 30, "fitness": 0.35400933534436296, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.27.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.8645446449142699, 0.8491674772716048, 0.8490840983881832, 0.8731582439956879, 0.8398265256971262, 0.8671252591753575, 0.8579585081580189, 0.8567868825216152, 0.8433882320676385, 0.691667807407764, 0.7405426363432315, 0.7077662278796675, 0.722360268142476, 0.04710778689390194, 0.7396013375470962, 0.6721742367845547, 0.7106544072655298, 0.052076527334820266, 0.15354235851621612, 0.1802688511137427, 0.16966445329653201, 0.1559362301516436, 0.1472894684777053, 0.14103568008661715, 0.14286617128964174, 0.12133092653546806, 0.1739194547495263, 0.12333989547859059, 0.1559165701118591, 0.09214544672721481, 0.15271787346015064, 0.10376122629001983, 0.12874029410518628, 0.11167016386999307, 0.14172102751547122, 0.11116622057170678, 0.9723489750430808, 0.9816428345648055, 0.9815833886014838, 0.9836309235544494, 0.9589073829296395, 0.9663111288701325, 0.9731472953543198, 0.9733392857635619, 0.9706315476101459, 0.4133073929691594, 0.430484378412057, 0.430341147593046, 0.4859015041329884, 0.4335354993604337, 0.5032635963132266, 0.4854182610380695, 0.463722633292284, 0.49381065406300495, 0.8028460710990322, 0.8286180694311835, 0.7398418703709224, 0.7736002581548769, 0.7091830026545545, 0.21152283184451026, 0.6556328403962819, 0.7117051871383294, 0.6867861331763644, 0.3997606732001385, 0.3173779785072641, 0.3047821369201863, 0.32206216745826, 0.12954721172876837, 0.33666203626028934, 0.34008696795113347, 0.31624159607298385, 0.3294517973716503, 0.37544209615615787, 0.1304733710047059, 0.37166042214766126, 0.3913401290988364, 0.3554186901279992, 0.37305363443508577, 0.13096541908220694, 0.21999831416965587, 0.29778073146648554, 0.08534978593445153, 0.09299020549287595, 0.13231102887308677, 0.11814421915793116, 0.07368139511622573, 0.05575715058904207, 0.1156088294206129, 0.09727612527353613, 0.12105993769623569, 0.21007113132012378, 0.21863843956641982, 0.2267442207989997, 0.1886833906823009, 0.17569043541058016, 0.16753130602230226, 0.24598463488250266, 0.2629847923087254, 0.23260016983679488, 0.036717269106342765, 0.042523435159746104, 0.18153772207744245, 0.08821342584870506, 0.07355941590876469, 0.06689782543695177, 0.10687264895391457, 0.1004445552498886, 0.07050238291219191, 0.19354403746028404, 0.22958185501988893, 0.1875475322317206, 0.25616357402557044, 0.21057373619303021, 0.3068312098059449, 0.15876574573240865, 0.17164726399918595, 0.221901115274313, 0.5339867944912642, 0.5870599825152261, 0.6008549359425321, 0.5683350056520976, 0.5944917231967617, 0.6196186559318391, 0.6024027290238643, 0.6033984984127465, 0.5800572223656664, 0.1067120385642798, 0.11139933447249262, 0.14088663110266209, 0.14626949100590814, 0.127917338909456, 0.12440468418618944, 0.14813635995979346, 0.13245884807533925, 0.09834632710446767, 0.14021597287994414, 0.17187539300728605, 0.17548434943393, 0.5038749457617637, 0.23313474515295274, 0.1603908800999263, 0.4048792960839731, 0.23463557578326166, 0.25422363018156524, 0.27218384928830186, 0.3850642442265272, 0.39482611725692396, 0.45369225326852636, 0.43312226842036516, 0.4343585187186926, 0.5419040834928879, 0.5715614359327887, 0.5070149282757125, 0.284562495710875, 0.22950899991777218, 0.29370323717070945, 0.29784885788177595, 0.21232433399986417, 0.23441175592105223, 0.4404340147995155, 0.4384796398366433, 0.23672260043816662, 0.20903056213437354, 0.21805143510902325, 0.1981246609878946, 0.19902986805161083, 0.18900263206735757, 0.19789235347928502, 0.20603914147132596, 0.20046639413429135, 0.2062487965787274, 0.2440666335530648, 0.2032575445926531, 0.2476513556872615, 0.22351313312016707, 0.21953152220011674, 0.20532237721666502, 0.617123606773675, 0.6521889323449972, 0.6844489617590608, 0.8939209656417817, 0.17506216426719112, 0.15455084363696392, 0.913706642968742, 0.2010055308400167, 0.200316771695341, 0.1303664403403585, 0.16911982008088977, 0.21158215977443473, 0.8338605538648983, 0.1553573697379954, 0.20357590134911652, 0.7105642830883263, 0.6902583759309704, 0.8126354814583054, 0.2067734720800255, 0.7396149098444418, 0.8049945926424932, 0.18031033144020037, 0.20409674846941217, 0.18250936578633503, 0.17054638248962783, 0.20185506006695952, 0.2151537309738688, 0.180278070638755, 0.1824526949638534, 0.17849599430033014, 0.10168883637699166, 0.10014607407523124, 0.07623292865307996, 0.09183232190548352, 0.07843241803053991, 0.09409820594701446, 0.09616237095987035, 0.07744767384731732, 0.07872117529311384]}, "mutation_prompt": null}
{"id": "2ce436cf-d572-4228-9b1e-82648b1c1a85", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Dynamic inertia weight adaptation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved velocity damping by dynamically adjusting the inertia weight based on fitness diversity for enhanced convergence.", "configspace": "", "generation": 31, "fitness": 0.39774574307717736, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.9083921202972852, 0.9011209009492638, 0.9044960539351309, 0.892913803638225, 0.890488833714419, 0.9033203437063102, 0.9026761252243944, 0.8941952095937931, 0.9057879993032152, 0.7743317922507876, 0.79563882921022, 0.5852025676282926, 0.8139554564755875, 0.7999875259136886, 0.8030070458090436, 0.8078535599086566, 0.054413930545018196, 0.7704130606369575, 0.13656181162241376, 0.69336481706447, 0.6716667516613705, 0.11179209281734714, 0.14002985282743252, 0.15776242355811976, 0.1777804377708, 0.11767645197884957, 0.1442261818533006, 0.1095213146277716, 0.14072582021544877, 0.13326940913787444, 0.11018749453287224, 0.0928817056201886, 0.1280651087631992, 0.12448423739928671, 0.15529481517971966, 0.13084895095942362, 0.9906205571898162, 0.9859570120492911, 0.9868402774752513, 0.9807039530070538, 0.9756364241050943, 0.9709754659155376, 0.9790323300374494, 0.982894142419722, 0.9841727365883958, 0.6137489391640982, 0.6083102544728951, 0.6524967604830828, 0.6257824048150729, 0.6541600786739993, 0.6432323458676807, 0.6266088210552496, 0.3289321910088603, 0.6048845889347709, 0.22738456656608408, 0.8125687417508061, 0.7914020097778058, 0.8390057029347855, 0.8608903394758541, 0.8567547322360237, 0.7836768410992868, 0.8105967950748354, 0.8677195232689991, 0.4861546222773332, 0.4412755853553515, 0.5015821713081505, 0.49057504940220564, 0.4734484339099452, 0.5131371163885912, 0.4092813058206197, 0.5214553683868942, 0.5008918054384282, 0.4445827242449232, 0.05492229649009972, 0.38669212406174547, 0.5070093101298365, 0.47045279480028235, 0.13292527379668062, 0.4452784688301331, 0.13417376725931407, 0.12545606466380355, 0.16887802177003663, 0.11006730500706186, 0.16313104119715427, 0.24728070778852562, 0.11339358011333223, 0.14736900856798607, 0.13296904219189876, 0.11768430014096543, 0.1495999824567924, 0.26939323119275305, 0.21940202767337447, 0.22949136891424948, 0.2948788832278071, 0.2576309659286471, 0.20200179433697296, 0.32191897878762443, 0.3082660588587256, 0.3137716455196856, 0.12869786400613326, 0.03164655793551896, 0.04060627644835624, 0.2909434842016304, 0.09627408606674148, 0.1545888386088583, 0.11368299392133574, 0.10683962341210396, 0.16574308839430196, 0.26508263349340133, 0.25423234217782487, 0.41067745716829973, 0.25845597840307377, 0.30225450668153786, 0.24895735553195664, 0.2683943983166919, 0.33603675700235336, 0.38285344717436975, 0.6456357383209838, 0.6873609321257105, 0.7242978183937963, 0.6719453649699074, 0.6531792199487627, 0.54270312692504, 0.7001406253812441, 0.6875149000366452, 0.6816553872861324, 0.14113243500133, 0.1378500886302383, 0.10469869636374785, 0.5990511354462899, 0.1560323818623015, 0.12043331701439852, 0.14595556657491093, 0.10931738890185538, 0.08712357562237916, 0.15985118747023153, 0.1730772204020422, 0.15205577410689042, 0.22674510990758023, 0.2553072569799417, 0.2523169133442321, 0.2006012817183409, 0.1689291453538071, 0.20622814790322108, 0.5721104707304411, 0.7060330100201904, 0.3702859109680541, 0.4719942440235346, 0.30488375061753237, 0.5800686190228517, 0.4795128657265879, 0.7485627757587671, 0.5726425455537179, 0.35651610912975906, 0.2367283693989185, 0.4516044353410995, 0.27495409749604516, 0.2065990690148456, 0.3500073362588576, 0.42294063734700227, 0.35796870511709344, 0.3289729458644757, 0.2060510656898279, 0.19228546860882878, 0.1859631903985286, 0.20101092601602433, 0.2614339363434163, 0.2127063071982055, 0.19616688386500314, 0.22128431596439513, 0.23835332569232492, 0.6345652621248954, 0.24006873312192878, 0.24479544751054705, 0.6228457192951675, 0.6883000571004683, 0.24762043493627406, 0.7564647869566417, 0.2238702158002347, 0.19310223948012173, 0.18796209562146537, 0.18694260123425144, 0.1540034800240606, 0.9074787199756579, 0.2015485098638936, 0.2014587999318922, 0.14687304935486156, 0.16997518568925207, 0.2122196960271644, 0.8384671097070031, 0.15607413559900085, 0.7561810843211623, 0.2102426063785957, 0.8057148176638464, 0.8326201044725821, 0.10525518840506864, 0.10434195698592208, 0.8384094532690622, 0.1763549658878304, 0.17242748324534785, 0.18379564198161713, 0.18096061226318738, 0.1844525362424948, 0.1991042249806998, 0.18836827890217656, 0.16978945612200846, 0.17780660583351326, 0.1384038722929034, 0.08855754525904158, 0.09491357888808649, 0.08152208191774368, 0.08457866366071098, 0.08472932787387855, 0.08788283458164081, 0.0667076903393301, 0.09482927342838177]}, "mutation_prompt": null}
{"id": "8f937443-effa-4792-a9e9-765f2392715b", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            convergence_rate = np.std(pos) / np.mean(np.abs(pos))  # Measure convergence rate\n            vel *= 0.9 + 0.1 * np.std(fitness) / (np.max(fitness) + convergence_rate)  # Adaptive damping based on fitness diversity and convergence rate\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by incorporating adaptive velocity update based on both fitness diversity and convergence rate, aiming for improved exploration-exploitation balance.", "configspace": "", "generation": 32, "fitness": 0.38779245328288964, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.9058297518908616, 0.8991288063645645, 0.9016668494181522, 0.8936979803188028, 0.8991950308791115, 0.9030111213890265, 0.9033001350767509, 0.9001368292456483, 0.9040113824215249, 0.7643511191086254, 0.7972076818868634, 0.6660182147996252, 0.8088779596859904, 0.8050733970773014, 0.8046027326306016, 0.7980420000030131, 0.6702194968676578, 0.7877336543670445, 0.1473635602643244, 0.11366987983614485, 0.18192615506397247, 0.11179338536990602, 0.1513972430912891, 0.15776017646882878, 0.1768135919571454, 0.1297083386037886, 0.46776388575331096, 0.13245932781114056, 0.11672333431193604, 0.10604225044737436, 0.11018769505292181, 0.09288023031449988, 0.12805644243684167, 0.12448150086151, 0.15529607808468537, 0.13084978685806237, 0.9906205558651916, 0.9859569322566429, 0.9868398728380064, 0.9807039525373832, 0.9756364239316776, 0.9709754617282769, 0.9790320643875338, 0.9828944052803824, 0.9841722423923704, 0.6480826406725189, 0.5816141055303137, 0.6267956701755766, 0.6195001416330239, 0.6584341344240681, 0.6540872827584221, 0.6122177962732882, 0.24871369310478098, 0.636480718282084, 0.22738456656608408, 0.7620781201426817, 0.3811838955088138, 0.3676923642876574, 0.8580609699651445, 0.8537367412027805, 0.774503503160408, 0.808427783503596, 0.8408279084735253, 0.45981946152035114, 0.47497710335388055, 0.4300293493932026, 0.4881912970349924, 0.4571345885081344, 0.46965904222249977, 0.44445891623543954, 0.5057494309156203, 0.45095878973263537, 0.4246337782609404, 0.0549223005744196, 0.4020744558466991, 0.4848399740004984, 0.4515810797543014, 0.13293635667078252, 0.4949609106334294, 0.13240096769609822, 0.12544984514716595, 0.16826102891801742, 0.11000839090974546, 0.16117039033525615, 0.2434069537882435, 0.11415164318960391, 0.14287979221065017, 0.13538408870148466, 0.1111285736551787, 0.15060752619640028, 0.26940757293538353, 0.2204279280644661, 0.2316464809531179, 0.29043265856701805, 0.2587007744306685, 0.20312989213671018, 0.309145424872588, 0.31567690728504216, 0.2909274423798973, 0.12796449471117122, 0.03164685603344408, 0.04060470808073802, 0.2769746528625834, 0.09627430891817113, 0.15740082646389797, 0.11594460054500633, 0.10683925995559218, 0.16561781676487441, 0.2686511879299144, 0.24619853579197615, 0.3981239399287728, 0.2573599208569747, 0.16737383890582036, 0.23863900679198613, 0.18338644427337703, 0.32429740497081916, 0.24129514872512914, 0.7062075704759576, 0.7093710004529312, 0.6540537347734209, 0.713419805042073, 0.6806652010965035, 0.5524535456679406, 0.6801222431246439, 0.7061853417546058, 0.6948449799321099, 0.14113234594337465, 0.137854657110561, 0.10469827962402489, 0.5935841340953573, 0.1557429840282366, 0.14226356566401188, 0.14493911870084408, 0.11886264311711436, 0.09863658504548567, 0.19230562019620434, 0.17528068572505873, 0.1437419459967315, 0.22725685725877687, 0.18455356683745672, 0.22731922938676485, 0.20104701418444582, 0.17451016322983104, 0.20702087099614797, 0.29786058448555863, 0.5386242030705097, 0.5491936118258152, 0.5502337787614708, 0.4765000894513981, 0.6668425591623091, 0.7288707638361707, 0.5638796177448353, 0.5090280953583504, 0.19984263379686873, 0.18639318540045668, 0.34016637514756043, 0.249960554439425, 0.27375971898115836, 0.3086237770363931, 0.39260382070459454, 0.34723794073360814, 0.5228353804207548, 0.19559103505311803, 0.19076712719669464, 0.19396943916436682, 0.18887717595743903, 0.22104986595538012, 0.1840793934598548, 0.22847172650242298, 0.19418800318554696, 0.19969958086471862, 0.23534387826373238, 0.20840555139555073, 0.24473566278747394, 0.6236120371713382, 0.689854706366152, 0.24762061027492077, 0.7544402214061281, 0.22386992964154007, 0.19310218397937662, 0.18796364217813577, 0.18694286207333388, 0.15400307361874987, 0.9184211278955027, 0.2015820393311354, 0.2014552101778786, 0.14687344835833815, 0.1699731874719419, 0.2122202278771501, 0.8387596629135737, 0.15607415098247424, 0.7560552381215666, 0.210242644454816, 0.8085997699730137, 0.832615145832528, 0.10528609706870029, 0.104354499650127, 0.8303679971244314, 0.19817297316399796, 0.18871523273535495, 0.18107847653486464, 0.1745564100283309, 0.24644424403623988, 0.1913299676932655, 0.18896902327487552, 0.18434381692700508, 0.18772630989868389, 0.1230555150571192, 0.08998506103786219, 0.08548836935814486, 0.08723801494865524, 0.09253155620825759, 0.0845028130749168, 0.0836758382084859, 0.08653589968404463, 0.0790268312451573]}, "mutation_prompt": null}
{"id": "639f724e-613b-415f-b6c4-7c26a2ca7ecd", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        stagnation_counter = 0\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n                stagnation_counter = 0  # Reset stagnation\n            else:\n                stagnation_counter += 1\n\n            if stagnation_counter > 5:  # Check stagnation\n                self.w = 0.9  # Increase inertia weight for exploration\n            else:\n                self.w = 0.5  # Reset inertia weight\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "PSODE refinement through adaptive inertia weight based on stagnation detection to enhance exploration-exploitation balance.", "configspace": "", "generation": 33, "fitness": 0.3713956952270388, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.28.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.9083921202972852, 0.9011209009492638, 0.9044960539351309, 0.892913803638225, 0.890488833714419, 0.9033203437063102, 0.9026761252243944, 0.8941952095937931, 0.9057879993032152, 0.7743317922507876, 0.79563882921022, 0.5852025676282926, 0.8139554564755875, 0.639965703326585, 0.8030070458090436, 0.7220084230111203, 0.054413930545018196, 0.7704130606369575, 0.1034645066596126, 0.1443188885233756, 0.5048190448993839, 0.11179209281734714, 0.1397788989393255, 0.17967715548117025, 0.15688867080979685, 0.09478671653850579, 0.09380696634053931, 0.1095213146277716, 0.13777584443678803, 0.10915932127763683, 0.11018749453287224, 0.14819570208976496, 0.12768363821961393, 0.11467111370483796, 0.1399479739560633, 0.13084895095942362, 0.9906205571898162, 0.9859570120492911, 0.9868402774752513, 0.9807039530070538, 0.9756364241050943, 0.9709754659155376, 0.9790323300374494, 0.982894142419722, 0.9841727365883958, 0.5466766516309756, 0.5781379804672662, 0.6524967604830828, 0.617096300169627, 0.6419436283846336, 0.6603479091253924, 0.6313916038209242, 0.3067329091436365, 0.5275107382708941, 0.23984258310565376, 0.6169874779636361, 0.8189008102150963, 0.7478035010896222, 0.8608903394758541, 0.8600574394044785, 0.7836768410992868, 0.7794164749675422, 0.8677195232689991, 0.4394674616816202, 0.37748348713433943, 0.44695712042867664, 0.4205459181206683, 0.38499691541888603, 0.4026568871404794, 0.35211723644785053, 0.5033152822279818, 0.41655708757255094, 0.43156535443295674, 0.05492229649009972, 0.4127104464576612, 0.42555091382642307, 0.3744548960485373, 0.13292513958916352, 0.44885033475872527, 0.1338094238391544, 0.24133650648046379, 0.0897449630546242, 0.1352921635811557, 0.1844557127430495, 0.22276930715989196, 0.10984841218676467, 0.1420275348749237, 0.12907868355977703, 0.15581371775042485, 0.13608751362069382, 0.29678660823304337, 0.229609231941872, 0.25709076346441995, 0.25283260061694934, 0.264061874899167, 0.1746240577267767, 0.28712303077665013, 0.2678810559963386, 0.32425993245162976, 0.13646158162464672, 0.03164655793551896, 0.05825497363054233, 0.2636104479521636, 0.09627408606674148, 0.1540181122607357, 0.11131129895506198, 0.12022132078416947, 0.04989822864507243, 0.2544154958761847, 0.16600715025625012, 0.41067745716829973, 0.24389302686879477, 0.269973742323681, 0.2094622068219011, 0.24468727740894936, 0.33603675700235336, 0.38285344717436975, 0.6477984927263711, 0.6822394518036159, 0.7326519938613957, 0.6733660537015022, 0.6408019032494103, 0.5455982108634132, 0.6605582304623494, 0.6948941456966583, 0.6716615691424952, 0.14113243500133, 0.09533138232561744, 0.1816610731427496, 0.13432288468996845, 0.1560323818623015, 0.1058232572989346, 0.0937931669809563, 0.09880232844098269, 0.08526317549046014, 0.14478041708371348, 0.500875091543728, 0.15955376255027676, 0.24175758695641758, 0.18663626047065596, 0.1892928376834906, 0.20060662984683464, 0.1564635757649243, 0.15773356970088903, 0.5721103228023965, 0.675997871756552, 0.3702876484588371, 0.4718918415190876, 0.3050694495282188, 0.5800686190228517, 0.3768496304216099, 0.38114757297147117, 0.5727724693219125, 0.2752996596246341, 0.24141665337344476, 0.4557083116331627, 0.2747404816993353, 0.22506780954987782, 0.2553437967038126, 0.3356341526687556, 0.3578864631572104, 0.3286328962734678, 0.18662239698553829, 0.18772914985509703, 0.17520394317465127, 0.1786292350967944, 0.1930457740079089, 0.17166925984219872, 0.1743374537038579, 0.1817843771889679, 0.18705985088563037, 0.1748044333625991, 0.24006873312192878, 0.2428477803883573, 0.19676851859777977, 0.18862236069753036, 0.7586249808527613, 0.22889972790724922, 0.26207823402096475, 0.19310223948012173, 0.18796209562146537, 0.18694260123425144, 0.1540034800240606, 0.9074787199756579, 0.2015485098638936, 0.2014587999318922, 0.14687304935486156, 0.16997518568925207, 0.2122196960271644, 0.8116521001130769, 0.15607413559900085, 0.6117523422848574, 0.2102426063785957, 0.8103448371736042, 0.8370394674948107, 0.10525518840506864, 0.10434195698592208, 0.6858309872996873, 0.18338198288821628, 0.1809453155445031, 0.19982752610648413, 0.19544699089430462, 0.18563367418156562, 0.1991042249806998, 0.19339528409825024, 0.1823175570394162, 0.18867074413884, 0.13715096952869477, 0.07996307484952958, 0.0758653359733038, 0.07861154446357654, 0.07650978592338742, 0.08670928639958819, 0.07216288365840262, 0.07549154919178835, 0.07860280529117625]}, "mutation_prompt": null}
{"id": "f4886256-aabc-4d8d-9026-77dea70b6054", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.std(fitness) / np.mean(fitness)  # Adjust F based on population diversity\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved exploration-exploitation balance by dynamically adjusting DE parameters to enhance convergence in diverse landscapes.", "configspace": "", "generation": 34, "fitness": 0.37965905918195153, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.31.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.9110678093319942, 0.9136421626468978, 0.9086418304447618, 0.921055901349862, 0.9144366259382074, 0.9153720798518838, 0.9204571698749824, 0.9029304997948984, 0.9112109164032408, 0.813223595083082, 0.8217351409440978, 0.759049621230854, 0.8134031824742238, 0.04819476822061808, 0.8063419700153928, 0.8111588878864563, 0.05939252490538893, 0.8059524573208217, 0.12225280752245093, 0.14011383061668348, 0.1591121100545475, 0.18451273068201002, 0.1574074010737031, 0.1520107176340807, 0.14328271417627692, 0.13799275698243163, 0.17531440396556008, 0.10317104902075247, 0.09582562750936974, 0.13220282029690555, 0.11009270194238285, 0.11362209494991038, 0.0892836956914842, 0.1398379261282533, 0.08507341276527947, 0.11353167944096898, 0.9903410320468317, 0.9859708281422211, 0.9861393339041806, 0.9809572803744913, 0.9699382025393164, 0.9659080403805185, 0.9762910604928023, 0.9760546267928147, 0.9820624809744617, 0.6622141725408961, 0.6014681572598448, 0.6270187954908399, 0.6228601781392985, 0.6351931711792917, 0.6685576554058863, 0.1264743563715116, 0.09751548983900449, 0.6226440685328223, 0.2290195562123497, 0.8162547915328283, 0.9138082768343546, 0.8850182365815495, 0.8413627291712134, 0.8631445237594002, 0.7297596188885024, 0.8591851072245185, 0.8155851788269958, 0.5963027893582022, 0.13016659567771582, 0.583567938431742, 0.560329003897226, 0.13501224878227258, 0.5315334588068351, 0.1317660070368586, 0.6193197421135184, 0.497438111396612, 0.45132273965730463, 0.05402202506802756, 0.5845189800094289, 0.20803564798145247, 0.1442063312119939, 0.13298725846203274, 0.19938475151732826, 0.136798563483589, 0.42199166588134407, 0.04427519158940918, 0.06371971945907384, 0.07365740508866836, 0.07232762823349326, 0.04961423642795815, 0.049536133836662, 0.08200593900807251, 0.03918037590208645, 0.054514530595400124, 0.11188922700840098, 0.1574605403160877, 0.18055314345908924, 0.1968631102987275, 0.1413743204429425, 0.1250899389821285, 0.1862658131852606, 0.17840429458225937, 0.16693516268089592, 0.07526267053073787, 0.03641612781320003, 0.28902175154532106, 0.078572905001143, 0.3431737223803405, 0.20673880691601632, 0.09938561601062301, 0.0996765560276015, 0.08569222197646464, 0.4212769928434692, 0.2925754904034854, 0.2803906519118914, 0.22368003335911113, 0.21213229862039962, 0.2956124412610136, 0.20385929243028877, 0.2821319255750152, 0.08408505509609276, 0.8060822129084165, 0.8040966162940582, 0.7696541719977297, 0.6700068977669149, 0.7772296091257069, 0.7743826113729919, 0.8128433914745369, 0.794991058827149, 0.7998064499109705, 0.13493568130130684, 0.12826140145627685, 0.07070355184989274, 0.12797175980477327, 0.1273129057229213, 0.15398351965312396, 0.12163989355799876, 0.12414231131446163, 0.10277954860697869, 0.27045831476202653, 0.3028546549020936, 0.15452157072508999, 0.23521051849818486, 0.354325699407555, 0.203274633759559, 0.20165345909976706, 0.17939270561315257, 0.23190867763804623, 0.5755966398460746, 0.6465892185831644, 0.3377299394239264, 0.4917493164694514, 0.5293801947961225, 0.5895063151904307, 0.5891538433719764, 0.6073507926325735, 0.5622955835256469, 0.25009068832774894, 0.25369924540335587, 0.2688833645744453, 0.4435527224003828, 0.21136178274819795, 0.4487766567282262, 0.2591467647362723, 0.29968970997133626, 0.5105867135510036, 0.21555227694083656, 0.20951267810266894, 0.24517920210674682, 0.20064949643903096, 0.20382717142003226, 0.18566993272283616, 0.21857879537881042, 0.2011400189852942, 0.20106321419930462, 0.22614172823512846, 0.7851087124604711, 0.24857392697075842, 0.2393230283145109, 0.19549638493349153, 0.20905638904400625, 0.22741950128098343, 0.24480803149726682, 0.19689271962142485, 0.8975114904808137, 0.18698597601793432, 0.1536519623731155, 0.9241525560536443, 0.20142649791978906, 0.2010203917286565, 0.13126270416194097, 0.1704046185586401, 0.1871917804904265, 0.8956329964487169, 0.15635871574911342, 0.8287714629596552, 0.7363821403915206, 0.8046115739461106, 0.8674199993392642, 0.21164321772129702, 0.1043392850970486, 0.8517664510328709, 0.18395845996497306, 0.18135364084181016, 0.18000824068085275, 0.17504859627357472, 0.18666518224946738, 0.17580335659824198, 0.17625605884505746, 0.1934706348604367, 0.19949242571037995, 0.13089693854126416, 0.0865380648252827, 0.07810878608929162, 0.08826076741712863, 0.09532431600485958, 0.08630024780541334, 0.10065541330873384, 0.08003066539319947, 0.08938493595361485]}, "mutation_prompt": null}
{"id": "f0dc0fb0-df2f-454e-bae9-b5c39a5b4b66", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n            # Dynamic inertia weight based on evaluation ratio\n            self.w = 0.9 - ((0.9 - 0.4) * (evals / self.budget))\n\n            # Random restart for escaping stagnation\n            if evals % (self.pop_size * 10) == 0:\n                pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE by introducing dynamic inertia weight and random restart to escape stagnation.", "configspace": "", "generation": 35, "fitness": 0.3152715361425627, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.7932633355854326, 0.7436822214324585, 0.7598413824622976, 0.7823080621610399, 0.7757588561119768, 0.7713369225865151, 0.7960659590216395, 0.7922836163893052, 0.7677460395679835, 0.616827377747929, 0.603346871485537, 0.5914301252324727, 0.6028240345458376, 0.6261038791895002, 0.5492049039121152, 0.5900591296669023, 0.5833588458877885, 0.5854318925682458, 0.10751353218685178, 0.10321867035901777, 0.12612073519613354, 0.12638115171879305, 0.12442601074886861, 0.11492986686732931, 0.11115886930947272, 0.10921759523982477, 0.10517325062806449, 0.09004322476119886, 0.11910334426133162, 0.10128599247602887, 0.12765047023548337, 0.10269046750027866, 0.11350663659709248, 0.11831981804208169, 0.11654963989086464, 0.11692428510916486, 0.9904122510516555, 0.9865445501727262, 0.9911016452934291, 0.9825441393948288, 0.981294506981335, 0.9752023360709096, 0.9837690971607574, 0.9848688081670774, 0.9861439473283641, 0.35299745139574057, 0.33890583652421424, 0.3794035008853064, 0.4286650015121284, 0.38270521019222214, 0.14816123740617027, 0.08742441403615775, 0.3822342220415711, 0.38006345189160906, 0.6339079115304236, 0.63339646354613, 0.5925139159055444, 0.7130143091783987, 0.6019184335351242, 0.5919648602795219, 0.5992340353869463, 0.681546087668714, 0.5614497925579718, 0.2749443314163621, 0.29558817529669756, 0.3206158707792446, 0.2759943468445266, 0.3035457962481717, 0.2970430832368127, 0.31794703663086643, 0.2707403301590261, 0.28356321201638557, 0.24892913649310344, 0.016844480659194194, 0.12412174359586403, 0.3195242897329196, 0.30581088667047773, 0.3291065273439411, 0.30369479782918163, 0.24208438810051935, 0.2713006244428049, 0.11260466841881056, 0.13018727495649585, 0.10904394551025087, 0.1992617516340358, 0.11949232881525951, 0.1264855029409313, 0.10418107598165194, 0.11377183615124054, 0.1250698788821244, 0.22169647375166435, 0.22955732379697624, 0.21357581578435147, 0.2523509469638814, 0.26343965781402634, 0.22296285602642807, 0.2973308370238842, 0.25651262157458, 0.24909801258754194, 0.021607030348413714, 0.02653289141247006, 0.028921094950930315, 0.03293365086206945, 0.027168979842316365, 0.07711460397006231, 0.02227616999680071, 0.04604632172391465, 0.06379874025688881, 0.14822231622357085, 0.17596797069047276, 0.16725677051408128, 0.18394277656616675, 0.15291684907711423, 0.16827367260338466, 0.17865948372051155, 0.16227830830826373, 0.16945813097398899, 0.5583178287198853, 0.5406905502684075, 0.5171917320828046, 0.525189047261579, 0.5458196322844728, 0.5537729710624466, 0.5506817343706363, 0.519182098787959, 0.5428789309927824, 0.09533888577749461, 0.11215308619626252, 0.11202869123837778, 0.11572610362587699, 0.11368196055975588, 0.089730036300537, 0.10881534709460117, 0.10991875400432605, 0.0976553953453837, 0.16281430926048002, 0.19323473834938276, 0.19402246540653134, 0.1901908501027818, 0.16884322769867488, 0.4155181896852036, 0.17397714261800445, 0.16582307417404407, 0.2211427423050003, 0.40682159965996245, 0.25142974071180013, 0.5130980518837401, 0.44399230759588915, 0.3945302930315242, 0.4332653916057675, 0.44527662034819726, 0.4336415793863948, 0.4390778884664984, 0.2892662348799654, 0.2560469918509901, 0.28645650698016545, 0.27769867885308763, 0.25425881604983247, 0.25110386264947504, 0.23312769136459188, 0.26979737115065405, 0.36267489068294545, 0.19460049062838747, 0.17393412900516292, 0.2057189123805967, 0.18041154345421584, 0.2057430920739669, 0.1875588624387854, 0.18027901468671748, 0.19005285061505217, 0.18486847925934013, 0.1952298857578687, 0.1883152661336167, 0.33907212152028976, 0.2971855235250964, 0.18030619076067267, 0.19235313578380864, 0.1995491988422562, 0.22522257335947293, 0.1796097094332163, 0.1816046493934751, 0.6910098820113254, 0.15365586373341578, 0.7901758769911629, 0.19936130234028937, 0.19844309166130025, 0.128953348086581, 0.1945559336049012, 0.20868797435264452, 0.5858834924999317, 0.1560747458461088, 0.19729520213474672, 0.20298591954744405, 0.6478526650739849, 0.6455351060557151, 0.20783311529167947, 0.20785818164894743, 0.7164973264016326, 0.18075159253719653, 0.21404142283032712, 0.19260069809395441, 0.19948797352231662, 0.1947571636643518, 0.17277951364151267, 0.18663269332387034, 0.23494729140853743, 0.17511158034931873, 0.07486845983239532, 0.07886481332391182, 0.07648160881172572, 0.07265148193518012, 0.08005853058192502, 0.0678688575920533, 0.08079442923818625, 0.07376031869547661, 0.07414261642282383]}, "mutation_prompt": null}
{"id": "c72a2d9c-34b1-428a-8de9-4ce84036c555", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 = 1.5 - 1.0 * (evals / self.budget)  # Adaptive c1 decreasing linearly\n            self.w = 0.9 - 0.4 * (evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE with adaptive cognitive coefficient and velocity inertia for improved exploration-exploitation balance.", "configspace": "", "generation": 36, "fitness": 0.2975056457774201, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.7175852768106132, 0.7114064671771783, 0.7110506064178518, 0.7768921907098928, 0.7165561426481843, 0.7387015330126436, 0.7336381858153525, 0.7472305179027403, 0.7519707524125686, 0.5688155538192332, 0.5505712113245396, 0.5599322767444472, 0.5167617698483957, 0.5585752255800933, 0.5299927488675291, 0.5751593172623054, 0.5730053298676807, 0.5742297239928673, 0.11960838970658005, 0.17147338494791708, 0.12224273120363383, 0.12142235087770792, 0.09930229492512321, 0.20406502409563176, 0.1070552009144532, 0.14149918618487922, 0.1042060842754381, 0.08845452131021592, 0.0953655432896856, 0.07645575911540714, 0.09372292041342511, 0.0923359074112925, 0.10872341290627574, 0.09084257121175598, 0.08276671721974982, 0.07955525952817422, 0.9867754430801485, 0.9865839985982978, 0.9907009470532301, 0.9834731377108041, 0.9855450480235246, 0.9753894138884077, 0.9841624331496607, 0.9848279595541363, 0.9857853385317281, 0.3008422068278157, 0.23963703952972493, 0.29845981321554993, 0.3368844319439078, 0.1405898436539259, 0.319603182763338, 0.31451841862519647, 0.34150151862249056, 0.08056758927725494, 0.5588973572301523, 0.5123337678823694, 0.5887529372596527, 0.5390182561380894, 0.5735314486916625, 0.560836912378505, 0.5646034784235676, 0.5628464226367178, 0.5507421194979325, 0.2404263503900027, 0.22378285816383336, 0.25850770065617157, 0.2730974262395074, 0.23857149874698302, 0.2610122316826925, 0.2129022335644617, 0.28158679849998913, 0.2846740512776289, 0.18599516547729023, 0.11274430547103342, 0.2020475141498317, 0.2803037517793455, 0.23472631685162137, 0.3143774056652614, 0.2673383322589249, 0.22764040711441347, 0.1895018725733657, 0.08002754616226959, 0.09582321662458926, 0.1015188316379757, 0.16353279837563828, 0.15271734620571698, 0.13260224496146822, 0.09363224099866752, 0.1221801351526628, 0.09227795457262078, 0.30307194439321594, 0.2016109595545268, 0.23970350425271847, 0.25111554021984683, 0.19135629819788658, 0.23522469620975484, 0.2880993213737254, 0.2896775104474171, 0.26094541893235423, 0.021254212231266556, 0.03349151616973556, 0.00021528351723176797, 0.040418244487906985, 0.0882807750116601, 0.02157028200264499, 0.02753945249432077, 0.019291451020028605, 0.019576855956715766, 0.1365515341099066, 0.14029628128469973, 0.14097302609476448, 0.15946293935606815, 0.14746083392961173, 0.17353938804154678, 0.1638442417324324, 0.16011832002900916, 0.15273844378344714, 0.5380797978854743, 0.4947360468288463, 0.49909072995130277, 0.5166204264495305, 0.5128631361189447, 0.5003353725883746, 0.5072521866177802, 0.515433521478097, 0.5279314469948629, 0.0940499955663383, 0.1505012893076455, 0.10014960656507088, 0.08803502175238609, 0.10655671440536407, 0.09241532484624781, 0.09147821150384772, 0.08821930832800895, 0.0911013584940592, 0.1747257761830826, 0.16809245149573326, 0.1469659240252913, 0.26426869319776314, 0.2525719977106191, 0.15636158058277816, 0.2121777455463304, 0.13561939179193816, 0.17271586901620217, 0.38940104522749364, 0.3585205352254459, 0.34288518121257594, 0.31790311564193197, 0.3734083978083711, 0.3380583920081125, 0.3910587678413756, 0.421392913597358, 0.38963368730638237, 0.22009230004391334, 0.20709326309583287, 0.2791244557397241, 0.22550996846445348, 0.24636128928444245, 0.2634515956691609, 0.2582933347126153, 0.2773850089047314, 0.3040403975222836, 0.19351274935797969, 0.1999213320734743, 0.2031581245106161, 0.2291475635013197, 0.17084522099788302, 0.18547861195687887, 0.1713271666977806, 0.1975755602054564, 0.19451836247508514, 0.1856649737231576, 0.18165932280924557, 0.19758041321599185, 0.182490371189878, 0.1982006148599066, 0.18897288498853504, 0.2362157636397908, 0.18287302184728815, 0.18739572233558177, 0.6335274441242975, 0.17308962854685783, 0.11287808958027268, 0.5747907705520376, 0.19806351213743123, 0.19760334398307267, 0.14138721218954475, 0.1690309765677913, 0.20718657744749724, 0.6606907318076173, 0.1536484862485964, 0.2047352635839511, 0.2068728547807257, 0.6429335919493051, 0.6354994182572321, 0.207522111210674, 0.6476381025945361, 0.6687204182273133, 0.19391490847612625, 0.20914251723188249, 0.19491061829753087, 0.19837440199233025, 0.20270208548535462, 0.19098664981704083, 0.20488579302110177, 0.19746962803778445, 0.19663255005559954, 0.06244704048574201, 0.08209826045378288, 0.06698795112272982, 0.06881774731015378, 0.07259280420984937, 0.07327634091314716, 0.07750184699284424, 0.07567277776091164, 0.0789273135184474]}, "mutation_prompt": null}
{"id": "f242a54a-ec4b-4ebb-b537-548791506112", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR * (1 - np.std(fitness) / np.mean(fitness))  # Adaptive crossover rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE by introducing adaptive crossover based on population diversity to enhance exploration-exploitation balance.", "configspace": "", "generation": 37, "fitness": 0.3594809114905106, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.9007255855063425, 0.9006160915297583, 0.8913546885882933, 0.900253886654977, 0.9115078200980475, 0.898823491134745, 0.9075191567119318, 0.9002234980638567, 0.9102232990367833, 0.7877315447202891, 0.7922966594905144, 0.8059197231334707, 0.7880515632812891, 0.7569758416815148, 0.7648605221370453, 0.7405540058198975, 0.7919614667193372, 0.8061702824804178, 0.17970794422135972, 0.10868500473908094, 0.15647029572219984, 0.14370157922314608, 0.13802859900374465, 0.1591413133840024, 0.16058224527897125, 0.17599567245985948, 0.16966452500133422, 0.11259220652110491, 0.12193765427161363, 0.13277210023784158, 0.09433969784931195, 0.11740357034557614, 0.11504711883693985, 0.12936639080314472, 0.13095875476149943, 0.14707370118790952, 0.9771350495182036, 0.9865588673316107, 0.9844012456068898, 0.9794345195138603, 0.9753312831255495, 0.9667555466146146, 0.981109959018412, 0.9806260285965211, 0.9855682249169295, 0.789476595806999, 0.687950788181444, 0.7261366305824666, 0.15252056847783968, 0.7451536208190958, 0.6748428612831279, 0.6918567499307751, 0.6492969126612511, 0.7121312410544558, 0.8526207936939315, 0.22023446827949233, 0.22906733385784406, 0.343319876498846, 0.19283056498367246, 0.20383793245068116, 0.15020808010236708, 0.22458562671214855, 0.8563409245065549, 0.13167574226734136, 0.39656096140697183, 0.4925197413598168, 0.5185696341753343, 0.45992082559703173, 0.47043094068464375, 0.13547113916196285, 0.4506334592145328, 0.13411397154981564, 0.2917096414457111, 0.17180726683054182, 0.12301308967088587, 0.4524538241980097, 0.49062693848861527, 0.45654855076380385, 0.3759967141908518, 0.4132383560134134, 0.13140670245259245, 0.07046496261297364, 9.999999999998899e-05, 0.09251582834280758, 0.005399438524662625, 9.999999999998899e-05, 0.02783571752211833, 0.04942170714063454, 0.06323065998101318, 0.23785810065679758, 0.05165316280403964, 0.04327424111321265, 0.09074713973020321, 0.08496774623300785, 0.011650877596525944, 0.03206341556111969, 0.1870426826997229, 0.06995853727905288, 0.0623983851711557, 0.05170732236069775, 0.17455589289302476, 0.11825654314028611, 0.08000762304267228, 0.07893352839825563, 0.14719523382950428, 0.2307153801570545, 0.2633675849374649, 0.11398897143933173, 0.2826751653880859, 0.17534560802160126, 0.2365865098587575, 0.22197296140234413, 0.006629236057705379, 0.29584339757951816, 0.2596010485765373, 0.2873677290614782, 0.25296716753966253, 0.6751717377866637, 0.6423801197717708, 0.6765807070804142, 0.672161926684782, 0.6739685519701332, 0.6235791486462481, 0.6716598683491011, 0.7070660336264809, 0.6701627766644012, 0.10767903298274273, 0.11928048413393899, 0.13871080778029576, 0.1463392560620046, 0.11748956306092206, 0.1373363138920709, 0.0920791787402917, 0.07929389664972275, 0.10872364658874778, 0.1623270229100956, 0.3533136888125752, 0.5865698344150554, 0.1593945500936903, 0.2751889216324721, 0.22150243210265985, 0.26865494224768616, 0.15902903402655577, 0.2608507317493096, 0.35748197963521655, 0.4473665706177571, 0.4623285925199121, 0.47843013702102555, 0.5569488061192873, 0.5652151698507075, 0.5588687693342851, 0.6437091616304631, 0.5344411410774524, 0.4098908677310591, 0.2475439667749023, 0.39023917476656533, 0.21799712131142268, 0.19967863568289945, 0.3761319265445724, 0.34997504160068926, 0.4799002159452874, 0.3046620804575826, 0.19518703964827266, 0.2354963580073619, 0.1936619627606332, 0.23582701611667944, 0.22574297456232195, 0.18912573771522423, 0.19573903302625195, 0.21987803707998987, 0.21362730155703824, 0.24938229589343408, 0.2415333408415835, 0.24986434923149003, 0.2506779813110721, 0.21577594993864713, 0.19782528365853924, 0.22319141762478034, 0.20365760049974146, 0.2078544938932707, 0.16583497988513773, 0.17494925222614877, 0.15381599277377667, 0.9360753245832281, 0.20125757098345498, 0.20150503967384226, 0.14717472187752068, 0.17001385263458324, 0.8886445544523318, 0.8745569666198664, 0.15680906918617932, 0.20775905114374404, 0.21005258908331748, 0.8378869232285068, 0.8291670170051344, 0.10533438020233521, 0.8648685184310174, 0.8315776310559502, 0.175481077184221, 0.1782382706347183, 0.17325615921568172, 0.17604928155880228, 0.20409570310060587, 0.18254255110797535, 0.22620051079386172, 0.21379631444409708, 0.18414957148905642, 0.11139385918679667, 0.09279810180447179, 0.0838600112786475, 0.07737466342321009, 0.0899060395181257, 0.10230325382552952, 0.08428964187519572, 0.08501893722932907, 0.09482095789798017]}, "mutation_prompt": null}
{"id": "9a10fcdf-78e2-4a4b-b37e-6cff7b5603df", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                diversity_factor = np.std(pos) / np.sqrt(self.dim)\n                adaptive_F = self.F * (1 + diversity_factor)  # Adaptive mutation factor\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced adaptive mutation factor in DE step based on population diversity to improve exploration-exploitation balance.", "configspace": "", "generation": 38, "fitness": 0.3283520326671572, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.29.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.8916137845445056, 0.8835800148639945, 0.8859889256966871, 0.8710479086243537, 0.901078400551588, 0.8967148338425236, 0.8932946415003155, 0.8899560081080404, 0.8933098462120201, 0.04245584899039445, 0.7747562268018486, 0.7832092271349604, 9.999999999998899e-05, 0.04787445688015868, 0.06673188886111625, 0.05828569277174189, 0.7676876168462328, 0.7701765031831264, 0.15072666225800135, 0.18091204532328353, 0.10083737673335003, 0.10996605541248883, 0.1318972798993545, 0.15805761925650108, 0.13241112567021007, 0.08807617996015216, 0.10577069742031286, 0.11928130488678834, 0.14394130035400776, 0.13262094939668134, 0.7357289132418934, 0.124046248026492, 0.11288016081823404, 0.11704285619570942, 0.10554164607764593, 0.11227306355230215, 0.9857172157749982, 0.985522550956587, 0.9866286141208046, 0.9863503974816554, 0.9827323519172082, 0.9816756187517043, 0.9870737064513052, 0.9872923398048874, 0.9819035495540551, 0.5277093787298055, 0.05928676703871261, 0.5880761159354841, 0.579951349224351, 0.5338187262612091, 0.5954659787019746, 0.565711805885496, 0.08860562962881557, 0.5243535025373194, 0.1722019953828101, 0.8264251767084398, 0.3361334966442634, 0.27851117989182406, 0.2099800341985676, 0.20455030640056648, 0.21580473986293758, 0.685155504789366, 0.6866052932687229, 0.3353985617819122, 0.4194742050606802, 0.13275187143918032, 0.3278467046390702, 0.10698193192838734, 0.13153972133940806, 0.1298768113522365, 0.30426390330252295, 0.3766303552141822, 0.3726046204178599, 0.054032869648879545, 0.3215498688472397, 0.48098340874979095, 0.3678634943699043, 0.4844870422978884, 0.5605760665729919, 9.999999999998899e-05, 0.2295068664840315, 0.054471047232840686, 9.999999999998899e-05, 0.0634325428403194, 9.999999999998899e-05, 0.0003937971606110535, 0.0002327561118511401, 0.02985925908933551, 0.031904289006112974, 0.014838061563600569, 0.07312534390528158, 0.09656777167178099, 0.09364916327665485, 0.07679355851727976, 0.04433443457521058, 0.07148091201009743, 0.08001850875861294, 0.10205921245938643, 0.07631332094689602, 0.18559087129588248, 0.03623080491648434, 0.14940844267348674, 0.07969085539195475, 0.09613199966133756, 0.1797943038998142, 0.10168257297244487, 0.20687399736718282, 0.0781620296089226, 0.18316159700860124, 0.25631270586464705, 0.2935776161071232, 0.11443791873977893, 0.006455773298264411, 0.3547121733202441, 0.056984270967305406, 0.1247831816003181, 0.09255913869069188, 0.5842357600517476, 0.5547383130238075, 0.597332825591331, 0.5792834528540172, 0.5929731072772363, 0.5829686134193295, 0.5858277068370783, 0.6243570413356614, 0.635463569358742, 0.07790005371484421, 0.09165643654420819, 0.06931094277660399, 0.12106130620219269, 0.13545169096048615, 0.09756579998241466, 0.15385822023097862, 0.10655722705589765, 0.13321717025775903, 0.1707056944396087, 0.1479627694034924, 0.1480491773450816, 0.21456476943225467, 0.25281837497790705, 0.2110292914662114, 0.26670571101800056, 0.1489930203056372, 0.19630573446826438, 0.3881263422895471, 0.45472000022976655, 0.3956014867778912, 0.4703467039980984, 0.41063454181928083, 0.39541857167792704, 0.7076985796198422, 0.44695032535340806, 0.49294387637921644, 0.24035676185542976, 0.2583628028277043, 0.21336737456283728, 0.27466971838971344, 0.220167070194226, 0.2833126990466506, 0.334455689123458, 0.3294528171626694, 0.281059451946997, 0.20812004724129507, 0.17173646677255416, 0.23847024938415484, 0.19099632170375536, 0.2172764668929601, 0.23585127553994967, 0.20764153115975414, 0.19017374737882298, 0.19748921503035566, 0.20078935614542948, 0.7746906674570028, 0.2241181610878119, 0.25273168855965156, 0.22212171945697956, 0.18595402060352828, 0.2408731204063681, 0.20650879955116086, 0.21122854883468922, 0.8648370158556982, 0.1654755207517552, 0.7006942066165875, 0.9121578557007747, 0.2013258101983405, 0.20147152773627752, 0.14649940843839937, 0.17002791340050627, 0.9056780619698639, 0.8438805464125436, 0.1559491090551528, 0.6595304585960537, 0.7493237706445246, 0.7478126462143655, 0.8009674560719613, 0.210976216810566, 0.7631104270660063, 0.7210122566469515, 0.17639112184362604, 0.19722905133669422, 0.17503128241187893, 0.20805692385250107, 0.21455117809808733, 0.21757954453684114, 0.2296683343719308, 0.17894439415920793, 0.1930575446221542, 0.1032353866429454, 0.07598588602620981, 0.08762128040762274, 0.07628984905500147, 0.0869658385668961, 0.08068466486757608, 0.09563047113606993, 0.08426233911845649, 0.10100458831683568]}, "mutation_prompt": null}
{"id": "aea5518c-c3dd-4b48-b2bb-d1c59d5f7fe2", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.9 - 0.4 * (evals / self.budget)  # Dynamic inertia weight adjustment\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by integrating dynamic inertia weight adjustment based on iteration progress, improving convergence speed.", "configspace": "", "generation": 39, "fitness": 0.3165838043664906, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.7333032429278694, 0.7353903755850841, 0.7326812229647883, 0.7558435711387262, 0.772347105514844, 0.7298422082456512, 0.7637150991630692, 0.7617041309425363, 0.7462989841712465, 0.6051606028469291, 0.5581355287467424, 0.5660512425143694, 0.5877886409922499, 0.5785649696432337, 0.5474251353781725, 0.6012320723842977, 0.5656591218812328, 0.5718446122377053, 0.15578114537391008, 0.13695111425048911, 0.12824261847628426, 0.1227018364652449, 0.10767281517779625, 0.12645956342590503, 0.11559542556580005, 0.10399410621461125, 0.11664890758295254, 0.10864739944246615, 0.09550293036278146, 0.10633068132553813, 0.11280305166453963, 0.09140873398018012, 0.10143912161409119, 0.11869791750385772, 0.09757974310847639, 0.10541115148891145, 0.9867754430801485, 0.9865839985982978, 0.9907009470532301, 0.9834731377121639, 0.9855450480235246, 0.9753894136641351, 0.9841624338557328, 0.9848279595541363, 0.9857853385317281, 0.33481943796521785, 0.3050169340745672, 0.3265146145559059, 0.3409501468594396, 0.30169451470966335, 0.3720315556622438, 0.330016699961313, 0.3893799244157381, 0.0811579285348677, 0.6871107739392226, 0.5167644080302514, 0.6200936820525011, 0.7120686695212619, 0.6205264833592642, 0.6346515343821706, 0.6358429346196246, 0.5242827859010508, 0.6092086379444543, 0.2735343923039837, 0.3016258493817351, 0.2769889333710023, 0.2754853660788834, 0.2583291823246213, 0.29151305696572527, 0.24026230904228563, 0.24664163138469097, 0.26149263029787084, 0.2100050530561055, 0.050872321552785094, 0.21710433690244746, 0.27082279603499015, 0.2517218065557687, 0.28162835091489447, 0.2581619775829207, 0.2274222034034885, 0.3023737361846808, 0.13252875872123349, 0.10805353171500498, 0.064868301335542, 0.17672803839425089, 0.11555512929857614, 0.13240405222772533, 0.0752460858129178, 0.08336661489567743, 0.09484640880335027, 0.25029347342924957, 0.27002077209922326, 0.2333028417265629, 0.19807218527356052, 0.20450235391320093, 0.18934968949775355, 0.24388257807032165, 0.26780757749202055, 0.2376947480869528, 0.03567985230775417, 0.027575306346042106, 0.02469587698187714, 0.02128823465282037, 0.1156817938822311, 0.01428569251670675, 0.020332227377253154, 0.012945675046270089, 0.01645696922517159, 0.14488959149702674, 0.17018877143553435, 0.1912370798482218, 0.1564665592401585, 0.14797705567598862, 0.15396839782285965, 0.1495493843376111, 0.16208087504346602, 0.15249207417936927, 0.5513837634957377, 0.5357778701095555, 0.5152690191782408, 0.5442151690195486, 0.5262493471686398, 0.5262761264812351, 0.5454840908739663, 0.5351932321156458, 0.52758732884187, 0.09271891285790501, 0.11054875778429829, 0.10346972218899209, 0.08140813852307782, 0.10840520659936703, 0.10757407786659734, 0.1000371756506856, 0.10761898980555396, 0.11352285416432606, 0.15886851186156037, 0.2713368681394992, 0.15494136862125996, 0.32360851897965226, 0.30015910476550156, 0.22792304747617909, 0.28586519492610984, 0.14277607978022877, 0.21104181244438625, 0.4233978000704014, 0.37731550113800794, 0.42657969136941953, 0.4304746307084891, 0.38687319327218606, 0.40075403859064307, 0.4384071531668584, 0.39764844427926427, 0.4189400809054524, 0.26251127812236164, 0.26123449442655766, 0.303240607621751, 0.2232184082449773, 0.2290939634285889, 0.25760622731099725, 0.2641862761559969, 0.294315182035051, 0.2735324959348434, 0.18863859347544654, 0.1716286452495035, 0.17376441955915833, 0.17156265636592705, 0.19000547786585487, 0.1710923974084082, 0.2033248008199614, 0.16925128965165315, 0.18809517095259876, 0.26137283766807706, 0.2141108538234956, 0.1934953295341889, 0.19124727186450263, 0.2972343104804377, 0.20898097339908617, 0.1855129541056728, 0.17541882011714427, 0.18944747258764527, 0.18651423221106922, 0.6906888583867288, 0.11287678304572468, 0.6479533150313166, 0.19771748035957137, 0.7135517224164059, 0.14306540927011935, 0.169136545395852, 0.7399971399704146, 0.6838783835097467, 0.578078729429842, 0.20435097481423115, 0.2066100466088756, 0.6626626403613325, 0.6915588978231739, 0.10485829683898151, 0.6869291566981577, 0.6888291738354423, 0.19391490847612625, 0.17879795554531008, 0.18275759168511385, 0.20622081289832928, 0.20454559484414492, 0.16855998343935807, 0.18178528866813393, 0.18550982132711324, 0.18876048809743284, 0.08066958351278952, 0.08292144971242088, 0.07041844962449051, 0.08426989753217118, 0.07216951792114068, 0.07534165419450889, 0.07979414566541798, 0.07712803601956641, 0.07397273814837169]}, "mutation_prompt": null}
{"id": "19283a2e-73de-493e-b381-d65d730ddafe", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w = 0.9 - (0.5 * evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.random.rand()  # Stochastic velocity damping\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE by incorporating adaptive inertia weight and stochastic selection for DE, enhancing exploration and exploitation.", "configspace": "", "generation": 40, "fitness": 0.2868516851569782, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.6954548863562056, 0.6900861650653467, 0.691566121712993, 0.6951751073741268, 0.7091731134635344, 0.6944083882969947, 0.7163296798931535, 0.685795157301601, 0.686268292064872, 0.5262629343979066, 0.5246334389079632, 0.47838063296359246, 0.5239546341382149, 0.524177565537866, 0.48412501475242387, 0.5109440657322314, 0.5473921249335363, 0.4900090019674146, 0.08827558593104712, 0.10012469206179997, 0.1095914269137529, 0.1038361598886417, 0.09344559498599514, 0.10965848805901202, 0.09635406082747977, 0.09024838657608147, 0.09847270138366582, 0.10227292587965253, 0.07999815583805392, 0.08506468645453025, 0.09508623596218191, 0.07971879455349573, 0.08671614989341814, 0.07728266346691981, 0.10243904234404455, 0.09661560757064802, 0.986766033323899, 0.9863980130054366, 0.9888824144859438, 0.9799326095879864, 0.9867890809988406, 0.981270632963094, 0.9866539730909754, 0.9808660223795519, 0.9859575635151535, 0.30315832890048655, 0.05846463949502145, 0.29913610390498624, 0.311417781671112, 0.2947201033952338, 0.31062023977363507, 0.2812339861376941, 0.2864877787471096, 0.08474516131819398, 0.4708840333616138, 0.4403056626660087, 0.6112531947537855, 0.5696231166961832, 0.5712142055048485, 0.5810939544986236, 0.5664454043031304, 0.5180161997351216, 0.5040343792890605, 0.2196061978839562, 0.22677214449521876, 0.25210335898222325, 0.208834615963309, 0.22158236253552055, 0.20671978833285853, 0.22929662436145315, 0.21127902853696545, 0.21764969657130906, 0.2085507123396768, 0.10936457896308216, 0.1935503118087848, 0.23770191153839182, 0.1739695137041548, 0.2386852377504779, 0.19993292118582107, 0.21470347648964616, 0.0990676669105669, 0.14090834014479492, 0.05472405188695828, 0.08205785845820102, 0.13053512797995193, 0.15091230857454285, 0.10160739166395016, 0.15162990482060468, 0.1180264819398733, 0.11623375252419177, 0.2606214851484029, 0.2737797986909942, 0.2275830591260226, 0.250894063425695, 0.17204814754272157, 0.19092323870278782, 0.2992794482041311, 0.25863855732595, 0.24205387677849788, 0.027577477512531146, 0.03188799516087859, 0.032791413252902246, 0.05051382366214674, 0.022402624715836983, 0.018379842372006405, 0.06910601568157348, 0.055805783396872366, 0.035402600212220525, 0.13697391206748832, 0.1441372093703025, 0.14660614570270047, 0.15530234326248138, 0.12958932557852132, 0.139530107311443, 0.13259047624682296, 0.12743375818532332, 0.1631351573707207, 0.45192456621425103, 0.4754538131493574, 0.4768522768587188, 0.488448005979609, 0.4878184229922268, 0.48271439240129477, 0.4860440968569999, 0.47812814644961543, 0.5022636923261988, 0.10702873829383008, 0.08758743698636628, 0.0894298540627595, 0.09711273780291485, 0.08893202902987507, 0.08097965665531903, 0.09213554747658437, 0.07093433876935562, 0.08537507699260927, 0.171322391287676, 0.18179032981695298, 0.20988106999970813, 0.24369891091286677, 0.13549962308372487, 0.16239055918164136, 0.19938474646823912, 0.2688073007648083, 0.20972136024303745, 0.31274296136227386, 0.35580778827359194, 0.27874148542296984, 0.29325150717151205, 0.33836794751963784, 0.3039628701767604, 0.324349952505137, 0.3659168253652756, 0.3881003917575855, 0.19612021386967748, 0.2231898548885881, 0.2553248971496783, 0.2100808347587031, 0.20249209092944243, 0.23365785497217406, 0.239007865985157, 0.26926598644924604, 0.26460792280436995, 0.18483081926190714, 0.17490269934351965, 0.1796531061785307, 0.18569374840949693, 0.18563918142518965, 0.1726202787892831, 0.17856113679010754, 0.1745976644946482, 0.18487469196776762, 0.18144573982755463, 0.17805299278505082, 0.17666185124355527, 0.18640583818561918, 0.18450587253532724, 0.17807204151893707, 0.18414471014298606, 0.18375379443944873, 0.18989825489534262, 0.676003108755457, 0.6962921005123124, 0.1147435185510105, 0.6789595914335808, 0.19705790666929823, 0.19451374346999095, 0.19417448945304017, 0.16990031718802578, 0.6575062418174227, 0.6423809950746002, 0.1544994746996956, 0.5667706873839623, 0.19592151519797385, 0.52118272269305, 0.6489568023426278, 0.20802867412188475, 0.20627438532424558, 0.6115928150388381, 0.1916221104577226, 0.18314477658454975, 0.18282378114193654, 0.2188178921342756, 0.22141336793791877, 0.18829152920839143, 0.19671910896099276, 0.18755933277700798, 0.20188724609259612, 0.06419756349732231, 0.06896783639223358, 0.06856825781811227, 0.06750090972562361, 0.06688099893600541, 0.071481832461187, 0.05825798384352987, 0.06300617674221554, 0.08640005150846608]}, "mutation_prompt": null}
{"id": "88817647-cf92-4f21-8157-35e64b6b8223", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w = 0.9 - 0.5 * (evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            elite_idx = np.argsort(fitness)[:self.pop_size//5]  # Elite selection\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(elite_idx, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by integrating adaptive inertia weight and elite selection for improved exploration and exploitation balance.", "configspace": "", "generation": 41, "fitness": 0.3226444395715606, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.7996748672995313, 0.7837685655556044, 0.794992575298742, 0.8005264377343206, 0.8079922284708516, 0.7858405458718654, 0.7906996962453652, 0.7955157020559244, 0.7957389698035398, 0.6207809852689392, 0.6254101756955616, 0.631281763374772, 0.6107107253856714, 0.04243713171713592, 0.6113430942504842, 0.6251725258877474, 0.6193637882739625, 0.6448645102096657, 0.11639520500905853, 0.3671008673057917, 0.11241987598677883, 0.1011134555565395, 0.24874607234544188, 0.1028977781200332, 0.10581577244518281, 0.10057676605977195, 0.09912435227369476, 0.09261335643398905, 0.08843843210275315, 0.07646921434866727, 0.11713742082605527, 0.09476592979408682, 0.1105732823381873, 0.09404049440387585, 0.09261470286484308, 0.0887534916477738, 0.9862020577053737, 0.9894668905705065, 0.9848849609196172, 0.9812607384949046, 0.9762197637349487, 0.9753374901136437, 0.9898953325926528, 0.9853856285941859, 0.9858663569135234, 0.37202043016867414, 0.058607226658974665, 0.4077011948406043, 0.3394591099154457, 0.34203279836558287, 0.3763389959313953, 0.38392495405769045, 0.3567333056629526, 0.4056269448384624, 0.7460506525215356, 0.6462848108003741, 0.7240775736213774, 0.741371888602723, 0.20032770113035903, 0.1996577482866243, 0.7074884039262863, 0.7357712802529781, 0.67563487570435, 0.35978525255277327, 0.37183071212024665, 0.42118101308739797, 0.35143738280766734, 0.12439554770296057, 0.22791732108966478, 0.25763207361993234, 0.3626164749268904, 0.3508773157145896, 0.27636457559213046, 0.11374633270303913, 0.18485170400374495, 0.20646746707297314, 0.29939491477075775, 0.3028705354442184, 0.2944260293959716, 0.09630992058064514, 9.999999999998899e-05, 0.04767036081619902, 9.999999999998899e-05, 0.07838899401408672, 9.999999999998899e-05, 0.153966242142211, 0.12162690958201583, 0.05759325255104342, 0.18127714538687534, 9.999999999998899e-05, 0.2989728861729376, 0.3676820002904043, 0.3048918618679882, 0.2637606875438542, 0.11602125286155063, 0.21913415549408832, 0.30140604045646613, 0.27244545726506153, 0.3383046070930371, 0.04175835758453883, 9.999999999998899e-05, 0.056233347213445084, 0.06567502921553714, 0.16184129580677786, 0.12326650184169852, 0.09934563275484687, 0.0609458749155769, 0.05828100535303804, 0.21897088637234974, 0.179371322834604, 0.17944284592052717, 0.3017676483318501, 0.0058209823527951565, 0.21792047094864941, 0.04842347240937561, 0.20822836628916852, 0.08014166391562472, 0.6090411948265104, 0.5616559625883382, 0.5633318934811153, 0.6166429949260823, 0.5830227150261014, 0.2092747692003576, 0.6391682613795676, 0.5452206304339995, 0.5625497346014217, 0.08632947857062567, 0.08721059179154378, 0.08081377828081238, 0.12561665911943565, 0.09057952620699083, 0.10770233857697187, 0.08122153823852474, 0.09837382907601966, 0.10020397010668369, 0.3872421489260529, 0.1694448634794269, 0.1768279345106739, 0.1643002986530806, 0.2226446307114951, 0.11546309135395127, 0.2235369194644159, 0.2046443915623275, 0.12990932995489324, 0.47702638951098586, 0.24501260030180605, 0.4610173473701543, 0.48369230175079114, 0.35997312825192473, 0.46241789692791335, 0.4066136178668095, 0.4453348255677403, 0.4587223838855825, 0.27795185557962176, 0.209063560667332, 0.2753821096883541, 0.32226106159706547, 0.27875863562059877, 0.28961918321505875, 0.31765456914053336, 0.4006269741783105, 0.38589583685891904, 0.20734821608546927, 0.18489897909951414, 0.1923742981739479, 0.17243991592970775, 0.18549639100915827, 0.1943061598686805, 0.19428058424957162, 0.18461082794686368, 0.1985296978660721, 0.1837890962228378, 0.181265924800043, 0.214065560615759, 0.19398541962244442, 0.17964881880296002, 0.1878672031997215, 0.2820656034724133, 0.1904791176181797, 0.1834628056086336, 0.8396315251356314, 0.18109170683184062, 0.15305093346646592, 0.8138553995867603, 0.19761165648064039, 0.1994090526368989, 0.8031658418290953, 0.1688993514499978, 0.8637498345284553, 0.6130027222772318, 0.157148797697929, 0.20775823889755685, 0.7307377693516428, 0.5339184520783808, 0.7628357601810496, 0.20167999273421733, 0.21117643715050538, 0.5912717847096758, 0.1916221104577226, 0.17372554024653897, 0.18327533787902162, 0.21499093233999567, 0.20159329288749128, 0.1844689902041119, 0.1772208440242512, 0.18144685237446934, 0.17308375977593426, 0.0714003477988836, 0.06641564655569077, 0.0731493104199713, 0.07901928547317072, 0.08173809117769038, 0.06913509494156511, 0.07578034904526854, 0.07262810131783226, 0.07807642632280509]}, "mutation_prompt": null}
{"id": "0ed801fb-98c3-4759-bda4-3ba17e419689", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.7 + 0.3 * np.std(fitness) / np.max(fitness)  # Dynamic adjustment of CR based on fitness diversity\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE by dynamically adjusting both velocity damping and crossover rates based on fitness diversity to enhance exploration.", "configspace": "", "generation": 42, "fitness": 0.35140275320779585, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.9023293000472288, 0.8886282531666406, 0.9043491428709941, 0.9035485147163839, 0.8986860395221681, 0.9033062542013565, 0.9016284148157497, 0.9016925958318284, 0.9056717026214356, 0.7431258938943285, 0.8224708571256176, 0.8094726209012086, 0.7928899511038006, 0.7579342337444563, 0.7682651688747821, 0.05359026919978238, 0.7894928749689776, 0.7941913110607571, 0.15659981628989894, 0.14504625081097344, 0.15301652040728697, 0.18290687431981223, 0.1749678049684228, 0.13003281514904497, 0.13436456902700955, 0.1518349043363283, 0.1476861278229289, 0.1596698694304075, 0.12013144268476317, 0.13854653131971995, 0.11997467474752943, 0.1319475213067408, 0.12906539178264098, 0.14069329403158992, 0.14697238853759065, 0.15858754637874295, 0.9878220699460716, 0.9859327777989303, 0.9868428929364043, 0.9814435009661068, 0.9751225361450847, 0.9758967179408098, 0.981125160048312, 0.9824497686640622, 0.9855682471708039, 0.6854927178414396, 0.6428046007917072, 0.701331771578535, 0.7056862596933433, 0.616157889298713, 0.6759747141750838, 0.6632535358754645, 0.6715914362731137, 0.6010798251653491, 0.8816031265450305, 0.37774482412273613, 0.8232075049959183, 0.27973467040733413, 0.27892652446889576, 0.32312180270254354, 0.2170459533663902, 0.7925845192012376, 0.8574886806567105, 0.41722640595103444, 0.36229176474243563, 0.20509124441234272, 0.40292396929079655, 0.5119410054993617, 0.20785023330940322, 0.13199966402026198, 0.18698035883501785, 0.1998502201078428, 0.1335533965888186, 0.11761034896429079, 0.3570587472025277, 0.3737201556755686, 0.13346953747943735, 0.21149427955699507, 0.42025518732155864, 0.12397707712388095, 0.3830515834772604, 0.08616676637184317, 0.05581757365697648, 0.101908521206592, 0.05223264025438834, 0.048200025932286894, 0.04043494771389777, 0.08475006058692325, 0.05888028184709804, 0.06266486169611596, 0.11034112474174729, 0.15536998514061584, 0.17279680157472155, 0.1904159576026907, 0.14838457134604865, 0.09393506625362336, 0.18770785613364283, 0.19811078026843265, 0.16332806753850837, 0.050070843323273606, 0.03662148179175473, 0.12986996768844905, 0.08121840941873015, 0.10431725133374581, 0.18759145574636793, 0.10286059055762775, 0.09831964176967245, 0.11275063268753238, 0.24337090896814484, 0.11901549591109395, 0.21768368857959153, 0.2544813450989153, 0.0066067924476570505, 0.20417004882652157, 0.09304703657880586, 0.09992103099167815, 0.08372780751695641, 0.6173624910616728, 0.6158363974631548, 0.5997611157490716, 0.6364944786847249, 0.5922912181031523, 0.6215581657965128, 0.6428544456703731, 0.6320211112218727, 0.6312559254859731, 0.11580195053765618, 0.13837709349085858, 0.10923420502416481, 0.11621921773711075, 0.1418537238255636, 0.12802634705377036, 0.15678139376631495, 0.11707373715818736, 0.11994737684654067, 0.14341301857017297, 0.16022502665467164, 0.27032901251168195, 0.2443987502465177, 0.30802530063993705, 0.2406036421389024, 0.1993400339240905, 0.3077772421797744, 0.2479948770943433, 0.2999392952633637, 0.5758564378976303, 0.23951761818164707, 0.5637756277398901, 0.406767281496187, 0.33706326235284934, 0.5616742405332202, 0.5350887921628975, 0.4877906764629223, 0.42690597980684775, 0.26978276341135254, 0.34111969561542177, 0.1886915997932801, 0.21958035200719772, 0.31162268772130786, 0.191574379661405, 0.4599524630367594, 0.25533787262511576, 0.20644648243701869, 0.20056202627929098, 0.20488348901876563, 0.1887639506910228, 0.20362021715362555, 0.20313698009395642, 0.2353188576117562, 0.21050098276458007, 0.19101689755967244, 0.22445226664124052, 0.21032259944782206, 0.19715278338830855, 0.2222973718251091, 0.21233653564351795, 0.19534714199598835, 0.20839684182378715, 0.7932621169650702, 0.24311326755736007, 0.16573264237003882, 0.8498286320840961, 0.1529961903206447, 0.9139455037343281, 0.20136731681694542, 0.20130530828823323, 0.16617203123794133, 0.16996344528766527, 0.21192878915840607, 0.8314326170373445, 0.15544890343407192, 0.8256792718351125, 0.2082978255004303, 0.813630562200568, 0.8317248850289429, 0.10418948905865533, 0.10439998802815953, 0.8498139456410906, 0.17600952169953343, 0.17934238917724765, 0.174512224867148, 0.18242822368803868, 0.20718038894026602, 0.18445200073459744, 0.19090543065215992, 0.17743633058440245, 0.18223028336482583, 0.10442281377637208, 0.08647471157930264, 0.09148508527227173, 0.08433886363434517, 0.08717199652814156, 0.0885072348900181, 0.0812443050282261, 0.08501012319562107, 0.08636901544819342]}, "mutation_prompt": null}
{"id": "fcad029d-8615-41c8-b874-e5e7420e90d2", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            mean_fitness = np.mean(pbest_val)\n            self.w = 0.9 - 0.4 * (gbest_val / mean_fitness)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Refined PSODE with adaptive inertia weight based on mean fitness to enhance exploration-exploitation balance.", "configspace": "", "generation": 43, "fitness": 0.36193033825733467, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.8890825818671485, 0.895262292079821, 0.9074663487310772, 0.9068645467959026, 0.9073263978501006, 0.8957992007135458, 0.9075913391988104, 0.8956127859137841, 0.9024765239764967, 0.6841816959265655, 0.6062561753755028, 0.6346195837145198, 0.6511702850666705, 0.6204283404867617, 0.6514970874561588, 0.6613409669633092, 0.6568550784506847, 0.6184363670697259, 0.14401164312301984, 0.17894918594169995, 0.16205345713945063, 0.16135526183141902, 0.15228541601762047, 0.1120836031192668, 0.15119915403872786, 0.10560562268064244, 0.1242079776294921, 0.1095860184345222, 0.13400956905832373, 0.12472002801161741, 0.11837003080364517, 0.0824861498102828, 0.104361094219099, 0.09620048484953658, 0.1391917379728047, 0.10958235443448028, 0.9823327598312658, 0.9864837369183584, 0.986982352427131, 0.9856037534906514, 0.9756262793824694, 0.9717661376816377, 0.9800869048465147, 0.9826563549989251, 0.9855671262926061, 0.5955520672686417, 0.5572473163696949, 0.57575080188392, 0.5751338475828983, 0.5738215575029346, 0.6398580736673993, 0.6163160311104094, 0.681475906399751, 0.6275180843429761, 0.8206696976650165, 0.8168311178896996, 0.7878634026645122, 0.750648161331105, 0.7693070940719777, 0.2116628650793274, 0.7023060349908044, 0.7582723196898318, 0.7358648200593139, 0.33040016931809224, 0.12653418481043466, 0.42794159745176097, 0.39468443413124354, 0.39888077787985976, 0.47356520873572994, 0.3458825723568272, 0.4191748372405536, 0.45801863853200586, 0.35004428349626737, 0.09117651834356544, 0.3266847643281502, 0.12885365304685314, 0.41073413642344203, 0.43647014436228404, 0.3711088847670925, 0.10294796640025938, 0.39035081326897736, 0.12338909471074822, 0.09485620231116587, 0.09369558545308632, 0.1587129419429253, 0.1661378126950418, 0.10153787808994419, 0.13243045871490977, 0.106225716500709, 0.09338027999469922, 0.23806513026701648, 0.26052989903134316, 0.24816196181712835, 0.19175573452619588, 0.2243567124261222, 0.24174824084801738, 0.2991598012924924, 0.29994352795186785, 0.2639284096959532, 0.02061886017141601, 0.02800536246740737, 0.02316356031466782, 0.02476533280801918, 0.03179912305029464, 0.0434470360398751, 0.04563637051571501, 0.022821710625652636, 0.014140948575685042, 0.17956964628997452, 0.20026949220455303, 0.21943657368597158, 0.21737155879903414, 0.17057845335595445, 0.24854877267930853, 0.20877232309574756, 0.24757522615973548, 0.3781480269732832, 0.6813817658646637, 0.6481297842687348, 0.6476848364546184, 0.6749202342894107, 0.6388795223065461, 0.6601147071021177, 0.6788964456830465, 0.6537472775518025, 0.6498749680426089, 0.11291046153955409, 0.10640633704979596, 0.13324921385363542, 0.12290935818456639, 0.1296267596356302, 0.10637958558529714, 0.12138699988972024, 0.0920778035904739, 0.11124111318177288, 0.15519877031388463, 0.18569431128778158, 0.1807821516015119, 0.24578111473903264, 0.16738245653712347, 0.6897797415153692, 0.2023000866511765, 0.19610213613498928, 0.3376054489186867, 0.25312525944752584, 0.2976748528016877, 0.4300134047829254, 0.672171267278618, 0.36923188758903236, 0.5237880985637184, 0.7350552680801141, 0.39736709880562116, 0.5342286818027426, 0.20276959262894134, 0.39402210986021835, 0.3694930208431225, 0.3741561355945455, 0.18922030909303578, 0.3763185023931931, 0.523019381568971, 0.403682324750153, 0.32710979753569913, 0.23805513206475404, 0.1947820916348646, 0.2351808970153817, 0.1948680028565527, 0.20650510359551666, 0.20966291598503073, 0.18796965016414047, 0.2228186543972709, 0.23769688571058334, 0.20714930709915935, 0.2037414383588353, 0.19887705679663203, 0.23985130461521886, 0.20203696667132742, 0.22426895448801587, 0.21175510357815797, 0.6066243806923823, 0.23910429262814537, 0.16861749449299746, 0.18650135034602333, 0.1538076955509825, 0.6536532342609994, 0.19735339345540137, 0.7491820510896985, 0.16435795751164028, 0.16992589450430606, 0.18685611133681257, 0.8525670630438902, 0.15604280485279431, 0.7492212822662827, 0.2094374949179042, 0.20875931326346775, 0.8224006875043601, 0.21212245916027428, 0.20796596642658782, 0.20261629378481172, 0.211500199429135, 0.19053464605030723, 0.18209419349043499, 0.20367739508796767, 0.1894739864059698, 0.17632684962847145, 0.18709546881912897, 0.17786294759772592, 0.17992098940995926, 0.08714422945627609, 0.09004253218355318, 0.10664032228604736, 0.0799728633220721, 0.08077501503348627, 0.08576638903566525, 0.07785818806503286, 0.08779268430773735, 0.08537874949363555]}, "mutation_prompt": null}
{"id": "23ec3db8-a9b3-49ca-af6f-b19912c8150c", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            elites = pos[np.argsort(pbest_val)[:max(1, self.pop_size // 5)]] # Select elite particles\n            elite_pos = elites[np.random.choice(len(elites))] # Learn from a random elite\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos) + 0.1 * (elite_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by introducing learning from elite particles, improving convergence and exploration balance.", "configspace": "", "generation": 44, "fitness": 0.3882055964550406, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.29.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.8962275423984655, 0.9040113309425996, 0.8921348454243936, 0.9078991297298856, 0.8947041474274728, 0.9070717956036259, 0.9017099866996456, 0.8951421799527532, 0.902474053606072, 0.8020149634902249, 0.7991043534722856, 0.7917662462726681, 0.8025359013251606, 0.8159474201485527, 9.999999999998899e-05, 0.7956161147488356, 0.7933052647549306, 0.8048697432589167, 0.409392514731607, 0.1343532771503928, 0.11468775906502959, 0.11985394726945486, 0.11031319163048159, 0.14280864583639818, 0.17927574562735626, 0.13997868809574587, 0.10391035587928676, 0.10400143294106201, 0.12487536771789931, 0.12404311656304712, 0.11121848348357088, 0.11032516737268161, 0.160532283377668, 0.12014276186604822, 0.11023204249137453, 0.10458681644798073, 0.9867287535121597, 0.9862549788483206, 0.986078513666553, 0.9757879290480239, 0.9753034120096293, 0.9809381037378533, 0.9810905971304503, 0.9847375850800684, 0.9843334012805068, 0.4400246943641538, 0.2636159942061641, 0.6195333475504398, 0.5893018308486431, 0.15233954305972053, 0.6679017613031134, 0.6471096622543331, 0.6637890840903342, 0.6199852512751161, 0.8150180033811462, 0.38302724948705824, 0.7044899154642836, 0.8649707176779069, 0.37106022825719764, 0.8666601060049022, 0.1261477522214265, 0.8485109258613068, 0.7772905211737955, 0.4883550303213363, 0.4662122467213162, 0.5089461524185548, 0.4273675390162609, 0.12958324731094162, 0.3863565852864762, 0.4475791888408588, 0.4145765342985481, 0.5057988151825596, 0.426509426587508, 0.11920888197566126, 0.39471380112711174, 0.4678740890797105, 0.4629617267228575, 0.5006416869531434, 0.44481405769890814, 0.3876486245697337, 0.4392331228769626, 0.13253449881174817, 0.1469582884256364, 0.13246837707595205, 9.999999999998899e-05, 0.16661983589334795, 0.07072490143758003, 0.14156022291365045, 0.13261717432158893, 0.1732454027061474, 0.27114618327561857, 0.2776833128779712, 0.305381057072007, 0.2643411182992921, 0.2361631306342089, 0.23856138974982244, 0.2614229835306323, 0.2326691996610174, 0.276593907680024, 0.036092368881047165, 0.06760325665868916, 0.06354265011073434, 0.07961963170101483, 0.19702405834518055, 0.09402924767569598, 0.10154639655280995, 0.0735525131331819, 0.07524652596025061, 0.2446452435168902, 0.20442714114868754, 0.5671190136232257, 0.23130297541338884, 0.3174287492434238, 0.32988988235612915, 0.23341615993915443, 0.22263516497047653, 0.22590485123801296, 0.6819005469129862, 0.6416640314587838, 0.6755235290745008, 0.6705589400699847, 0.6937975292893137, 0.6730813165135651, 0.702511822527478, 0.6516069269430294, 0.6916808857523524, 0.17198521460970229, 0.13061738445454918, 0.13531792851220403, 0.12358308791599415, 0.13854597995664442, 0.1345340105991799, 0.12244748089407131, 0.1439070390897692, 0.14072859329774, 0.27363323321301736, 0.1494334281454689, 0.23150755916775767, 0.14752763870883423, 0.5675055117836582, 0.2469999608590805, 0.6087458765571963, 0.20197409753553552, 0.17728534603181056, 0.6594404501383178, 0.5477810256739578, 0.3830204710114732, 0.5667265403558019, 0.3616796890775077, 0.5666125687425716, 0.5396660748692854, 0.5862553103130803, 0.701483818749348, 0.359021331461432, 0.2678531079229295, 0.32848797824431464, 0.3636502349608953, 0.29153836314720205, 0.27414136837582515, 0.40908479464711234, 0.2794615124746449, 0.4627586046531368, 0.23819135398109992, 0.22248083595622425, 0.19690902927371257, 0.201900057355341, 0.18442354986464726, 0.185914885339716, 0.23695100941055758, 0.2115671469238447, 0.1967322434274461, 0.6492694516747308, 0.6954425887192233, 0.2206985247815939, 0.6085069737837119, 0.7645121495591871, 0.20798425099980034, 0.24572765473778058, 0.24377661094037406, 0.21866454298240823, 0.18839608124715257, 0.18677310051251772, 0.15345718312139378, 0.9135601268354264, 0.2006748820973424, 0.2005846279381588, 0.14660874668471024, 0.1705077624956155, 0.889726581989223, 0.8214973776498262, 0.1578178772793104, 0.8192427813293033, 0.2117513256007716, 0.16884967264255302, 0.8391348476202228, 0.10554237870462002, 0.10497749217813002, 0.8013185131621563, 0.19298739369665263, 0.18391804418763913, 0.1852347972655085, 0.174099843001842, 0.34885506181622217, 0.1892758678438924, 0.17781958888350236, 0.19719685220565109, 0.1859903027066382, 0.0816303701082981, 0.08960768949776177, 0.08713209210743666, 0.09228520118879935, 0.08713927138882704, 0.08196624260707908, 0.10279934144264558, 0.08178215950989454, 0.08795229991672837]}, "mutation_prompt": null}
{"id": "d673f524-d8d0-4a61-a4ea-79cf5a4c6cf7", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.c2 *= 0.99  # Dynamic adjustment of social coefficient c2\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            self.F = 0.8 + 0.2 * np.random.rand()  # Adaptive mutation factor\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by dynamically adjusting both cognitive and social coefficients and incorporating adaptive mutation strategies for improved exploration.", "configspace": "", "generation": 45, "fitness": 0.37196016278731797, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.29.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.903229854449019, 0.9009478008124615, 0.9080292236351674, 0.9126471949429694, 0.8800784868625645, 0.9019412368982277, 0.9042977517675481, 0.9075761777927236, 0.9075691511960047, 0.8167456454893329, 0.8195124434073666, 0.7780756267542224, 0.8195006270998288, 0.8114624400770715, 0.796293682852732, 0.76470103161369, 0.8165527304872566, 0.7740471307602925, 0.1587176524518844, 0.24869510533573091, 0.5498606259011815, 0.1498584912572618, 0.10564885197156293, 0.5202647746367689, 0.1494899742198582, 0.16928388722925114, 0.24319380283284808, 0.13643406955272908, 0.13501901275243944, 0.1300248330271575, 0.15147151061840736, 0.13569198419626427, 0.12845782839499242, 0.10427767507551067, 0.1348295700076957, 0.18294993925260528, 0.9903728527863738, 0.9809949703602379, 0.9880161471945665, 0.980488127475236, 0.9800980839996191, 0.9764556737081277, 0.982437007439327, 0.9829733820247103, 0.9808660852881456, 0.6800388049548396, 0.059573342693368225, 0.7440870485900222, 0.7284492222342596, 0.7065409545596926, 0.7381627462164377, 0.7295791294460008, 0.7167657621475381, 0.08722752211396745, 0.3691111892153913, 0.828817434179095, 0.8500772054811864, 0.27608223164397216, 0.8405913483781591, 0.27237917448362836, 0.8309257499531331, 0.8533960671278262, 0.78859405828323, 0.5400878763695349, 0.13241252992135755, 0.23517933191625173, 0.5573429589234378, 0.3419542767583249, 0.20869802754988664, 0.16297045677421607, 0.5279292349967037, 0.6128418090291267, 0.37419639530195614, 0.11837610499483087, 0.15381937514406874, 0.22440589060117255, 0.5356983395974659, 0.21918664816418143, 0.21513798927926164, 0.11855813969158535, 0.2124770070623977, 0.10609819852752556, 0.05470019068529908, 0.11900842468738615, 9.999999999998899e-05, 0.11863563962758994, 0.0884219085098279, 0.15158429234534065, 0.08595597474268524, 0.1409853552345246, 0.24306539366393132, 0.1965058392029444, 0.2429636507680074, 0.2402359117326781, 0.1692521298662648, 0.15760689268502048, 0.2240998756556365, 0.2548045319238571, 0.21476037063671127, 0.13235882201421612, 0.05223634779972797, 0.16896553470296172, 0.18410276546484627, 0.2835715963116665, 0.1644034620656759, 0.1517318276165288, 0.2831102375868789, 0.07635323943447714, 0.37711265232960545, 0.042974564612094035, 0.22465448087122863, 0.27071577126131174, 0.0066351727710692865, 0.1891765029199146, 0.05853729920887085, 0.20953406893882243, 0.08401546683721117, 0.6896606406289739, 0.6291336326507353, 0.655862143441426, 0.6530743009269266, 0.6504385297368855, 0.7252297689880951, 0.6841330021691043, 0.6804687653855125, 0.6679530402052378, 0.13573096772583082, 0.1332001931492186, 0.13504424826811678, 0.12431417695242342, 0.15640351944947284, 0.12690922337835586, 0.13290308175302112, 0.10969867340249495, 0.13366795505796947, 0.1761387538516247, 0.20007292292022893, 0.1700562132791723, 0.2406627255829591, 0.21205259704382184, 0.14677505455537487, 0.2810016849381015, 0.2000856205415219, 0.262671428901886, 0.3790458505694394, 0.552140339463692, 0.3922130170211523, 0.4804605860626896, 0.4280321377531009, 0.3107888715710668, 0.7709526184985234, 0.451354572950455, 0.45945792771876537, 0.3740126459667297, 0.3001646860053774, 0.3006528432868846, 0.3346982801124646, 0.21649831561256772, 0.236230652354527, 0.501440432856795, 0.2995777047687215, 0.33129485003900083, 0.19643085767469814, 0.1854865077133221, 0.17167306474788635, 0.19009515431004786, 0.19936479052168488, 0.18959989362320084, 0.21738947322689184, 0.18560418004463974, 0.1853577055264457, 0.20551229137621008, 0.2227051538068876, 0.22457794547945276, 0.21049935313914192, 0.2169630747412178, 0.1756764816437122, 0.22303665509211845, 0.21199977220576516, 0.18036873815988597, 0.18767412905562408, 0.1868072241147638, 0.15404055724668542, 0.9067810121641352, 0.2008695391275943, 0.20110789129142004, 0.14258346416662848, 0.1673019685394178, 0.8918745517483481, 0.8919989746606408, 0.1558904758928389, 0.834231016236316, 0.8017543840648585, 0.20963417805717355, 0.852961458452313, 0.10534023904904732, 0.2077101239540572, 0.8374473855399742, 0.1970076999795941, 0.19214926036606061, 0.20256992007295904, 0.19049950825585205, 0.18701334561362892, 0.19621776980073746, 0.18064493903011514, 0.18282635733830577, 0.18691357590571578, 0.09811013054105155, 0.08133048563709577, 0.08123163016395007, 0.09634975754033237, 0.09127265326038958, 0.08314531676527082, 0.09715016750099925, 0.08680412747472388, 0.09072372001358986]}, "mutation_prompt": null}
{"id": "46350b44-1b93-4f49-934e-01d65c03d24b", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.9, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            inertia_weight = 0.5 + np.random.rand() / 2  # Adaptive inertia weight\n            vel = inertia_weight * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.7 + 0.3 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE by incorporating adaptive inertia weight and enhanced position updating for increased convergence speed.", "configspace": "", "generation": 46, "fitness": 0.36990977949460335, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.28.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.8779103460960453, 0.8863761105150241, 0.8906778527023991, 0.8912018293877734, 0.8834697643577638, 0.8899596048658086, 0.8863905602223376, 0.8784205419389038, 0.8839097175234987, 0.7465942683755943, 0.7522461081786338, 0.7573480221228829, 0.753721148721413, 0.7485842553601099, 0.7514125003174155, 0.05826240531862714, 0.4448809185151482, 0.7064653903988538, 0.1701590573425803, 0.12850090980266782, 0.1255953177839081, 0.5070500353851477, 0.13525686826254602, 0.17735717486179037, 0.1423993300887465, 0.11607714342696496, 0.141128287523978, 0.12963009289966265, 0.14388637907629986, 0.16072109941723833, 0.1480388017431553, 0.10921895526345271, 0.0901018940427939, 0.14372596384857783, 0.11413156115661272, 0.12949947260841776, 0.99037265718222, 0.9864017961307198, 0.9866627446133053, 0.9855943846642821, 0.9751648324221903, 0.9735936344466901, 0.9762144032263447, 0.9829428499968466, 0.9858170698370825, 0.49476015827853237, 0.059604956996251346, 0.4571960642917301, 0.56481313216658, 0.14787719918750042, 0.4975880096397962, 0.5384880971918136, 0.47320628650078556, 0.5118507827061315, 0.7400433509367673, 0.6235437487975155, 0.7583889204986889, 0.7961841491841978, 0.7876568206778138, 0.8106330175301047, 0.6842367908652133, 0.7758087622856732, 0.6993814028842544, 0.5062583033224213, 0.4392957612360415, 0.3803960994886605, 0.1280249606958732, 0.4242743502707511, 0.3973348812174752, 0.3575706169081898, 0.42334605744614906, 0.39457435638489347, 0.43994689963046674, 0.05220571273491692, 0.12333274038660824, 0.13189611269300439, 0.437089713518396, 0.43688585254439294, 0.45707659971690606, 0.10952576935528191, 0.3803468625061216, 0.08689822838848726, 0.08990006181659826, 0.13519066619070885, 0.09728372764137316, 0.133315440612085, 0.14738821087683773, 0.14777779252788803, 0.14363400031313145, 0.13239829320092245, 0.26863691764238806, 0.2513693250031701, 0.2410405922176727, 0.24826007718974208, 0.20475662581727827, 0.23015096784930422, 0.30659300860451044, 0.3205479052661968, 0.2818045431595688, 0.048388566066737804, 0.03329305088260459, 0.12493110594105306, 0.07164230867697019, 0.09052321355348814, 0.12440668321675441, 0.14892655993362136, 0.09638960174965283, 0.08895618753595425, 0.20135165758364393, 0.1919349182945974, 0.19433193380627933, 0.25288772551739214, 0.20335494974139545, 0.3349828970626909, 0.27239737055164137, 0.05654694039537955, 0.21870907713926413, 0.5914038105019666, 0.6456102415563627, 0.6601904167742019, 0.6309112970983505, 0.6597361166185429, 0.644688003979744, 0.6657443053495153, 0.6339063909058884, 0.6455864200513364, 0.08773672765550877, 0.14145545067595888, 0.10697293804253372, 0.145379683496488, 0.14250563750401468, 0.10459190420776499, 0.15251553571868626, 0.10078051986047742, 0.11316622810182231, 0.26319183662322, 0.1651270645163062, 0.19428786520575936, 0.21209335702606036, 0.2308654370676897, 0.28673034393156926, 0.7109403605948983, 0.16869392079875745, 0.2000118108650999, 0.5091450614791513, 0.6241906995995121, 0.40341374216579884, 0.48389342330942586, 0.4415412199556501, 0.5632399407320114, 0.47856487272764503, 0.5439699851165045, 0.49900990841556636, 0.3334660152229715, 0.3772720234702931, 0.346812804177828, 0.41788403903435956, 0.25255866946858274, 0.288995941037525, 0.3583663700657813, 0.405548329248159, 0.2695783081669483, 0.2317510712829921, 0.22905003427241277, 0.19989448259078035, 0.18432441771302588, 0.18898630281758155, 0.19632398134103768, 0.20351399249505608, 0.20494318920758492, 0.2106515916283419, 0.5591775855051428, 0.19503574920149547, 0.19762764968703872, 0.22417663314345493, 0.2463056969837717, 0.6451816088590581, 0.23825399831768512, 0.5528670076929241, 0.22120059136728787, 0.18581076746867942, 0.18569239109717206, 0.15423214425480658, 0.8828954853698733, 0.20065511796567526, 0.20033607072632686, 0.867918216657381, 0.1691394032901058, 0.21205987900295986, 0.8527035338681359, 0.1566571045378834, 0.11160545356469576, 0.7057612671650825, 0.7963388897369359, 0.826462644477245, 0.10518200434134051, 0.20122352400121624, 0.7304100310566292, 0.18704066776839823, 0.20063967240870395, 0.2031672618569761, 0.23295581390065012, 0.19781676631533918, 0.20692028460823741, 0.18163739300556814, 0.1899894587315928, 0.1882071682037878, 0.0762875475001259, 0.0813017258319012, 0.08541666701511696, 0.08674015521632261, 0.0864815824027877, 0.0721786673273711, 0.08146872310224784, 0.08010878096978191, 0.0809110492430265]}, "mutation_prompt": null}
{"id": "5e8af6e1-9444-4cda-925c-c5f6b1bdd2ef", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight adaptively\n            self.w = 0.9 - (0.5 * (evals / self.budget))  # Adjust inertia weight based on evaluations\n\n            # Boundary correction mechanism\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)  # Ensure position within bounds\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Refined PSODE by adaptively adjusting inertia weight and incorporating a boundary correction mechanism for better exploration and exploitation balance.", "configspace": "", "generation": 47, "fitness": 0.31881235825419046, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.7635772468663091, 0.7701139140061874, 0.7365560610384125, 0.7648598781427258, 0.761985246031453, 0.758316228607075, 0.7605677619240496, 0.7575800306181925, 0.7516789231307197, 0.5962731396686843, 0.5826350142884036, 0.5864344146121538, 0.5720551162857876, 0.6357379012350796, 0.5864526431464891, 0.6147927954135971, 0.5780921754980927, 0.5716290012585128, 0.1354499074396841, 0.11296795773174562, 0.12945792443659998, 0.13938429631576332, 0.17291430983600187, 0.1362464421096089, 0.11580410172683964, 0.11314765663986914, 0.12283340112824626, 0.11667498834516521, 0.11015856435999394, 0.10689892588855943, 0.10294423236230488, 0.1070712708842404, 0.11362806240783885, 0.10415580484577258, 0.10676976605154398, 0.0971920088839342, 0.9904114405853216, 0.9865469374814685, 0.9911017112088953, 0.9815552520163827, 0.9825993474314678, 0.9752040460826249, 0.9837718256932068, 0.9848704483832882, 0.9861444522415882, 0.3727386844508448, 0.05886562569073994, 0.33815199896624804, 0.3842386463776176, 0.4059443813770779, 0.40889768143388117, 0.3922240288169121, 0.36987027876732814, 0.34351299198242824, 0.5577410946299317, 0.5400403456474172, 0.57843643994909, 0.6240293779163426, 0.6038108908817572, 0.6662815290563566, 0.5570550223812223, 0.5962259008175486, 0.5957331748962607, 0.2667090269347322, 0.2999870674841151, 0.30861883006366686, 0.3243825298479903, 0.2940356207220992, 0.3422787437920064, 0.2748516100110767, 0.305763749653737, 0.30533634678877597, 0.2502598928022811, 0.11496337522392608, 0.2633342731049976, 0.3374165901925822, 0.30797250401854404, 0.29384492539569895, 0.23465521629230657, 0.24126305570806228, 0.292123021928302, 0.11339835395733566, 0.10420764985280206, 0.07818371822580505, 0.19453468725152545, 0.0006284016261163261, 0.08672738726867246, 0.11099491045043519, 0.1121729610882578, 0.11095348081483558, 0.25222471408832703, 0.23869896081172715, 0.23448533345844602, 0.255104317982236, 0.19569235676298535, 0.23058333981582668, 0.3046738259899614, 0.26550813800396933, 0.2663968954817486, 0.03758295505914444, 0.05346181947885087, 0.0483259388187236, 0.035278425333399754, 0.07587317518886871, 0.07800519665431438, 0.054413666017108175, 0.019616711281002952, 0.04337273604554481, 0.17002997946191867, 0.15528533752254392, 0.16597699314973302, 0.17297761543043177, 0.14887634932551752, 0.17232031129909353, 0.17990027149404997, 0.1753810439886816, 0.14684806178176202, 0.5121121626438707, 0.5634764018973695, 0.5464241181603193, 0.5586475235803745, 0.5553103097526689, 0.5195027087456418, 0.5431760486969452, 0.5388399529199039, 0.5543825057184438, 0.09405851209765403, 0.09936150313326564, 0.09385694846912374, 0.10247535071201253, 0.10962588580713051, 0.09830704016350811, 0.09636331775022133, 0.07821098613527888, 0.08726780628028086, 0.15520744672789333, 0.215528365696938, 0.15731026240913049, 0.25428362137036176, 0.23523701160002053, 0.260502926700917, 0.1979269715330123, 0.1753955806146329, 0.1958100743358645, 0.48123067736822667, 0.364064061821497, 0.4234993797801897, 0.37924383122778704, 0.4545015387239211, 0.4117096380365486, 0.45851935191516624, 0.4831210181107758, 0.48766192820929777, 0.31301468015837286, 0.294801749210731, 0.2748946434819821, 0.25531506259697845, 0.2778922885083711, 0.2971689496945963, 0.26672645619744373, 0.28550075282936416, 0.2997928193814092, 0.1874369361541368, 0.1848271341415888, 0.18011920208353094, 0.18402669036677743, 0.21932030462905028, 0.1682312329767972, 0.18584502362132238, 0.20172224243825398, 0.2024323574605047, 0.2099765368962948, 0.2007554051762892, 0.19302301749448247, 0.4082680067262411, 0.20771056102290864, 0.2067818462052592, 0.19112779766897192, 0.19065411921360442, 0.192718520559377, 0.6658958720247842, 0.7436811529872368, 0.15375368896418928, 0.7795902729400946, 0.1995344862798124, 0.19857963352440156, 0.19382443133926586, 0.19532893984694777, 0.20899163731829795, 0.6776390023772549, 0.15574064396300058, 0.19522151402095, 0.2000500246946052, 0.6658323935749864, 0.5520048085606377, 0.1980379795456051, 0.20754285101756154, 0.7325887152739761, 0.19757140659080585, 0.19273525743941522, 0.17497490497070378, 0.19267866517128163, 0.24011295775330155, 0.1826624729537225, 0.18923166883189657, 0.17808442382370537, 0.20732409023883425, 0.07360775971722855, 0.07327890170197171, 0.07263250785330488, 0.06702021122660384, 0.07183046136326443, 0.07363950142023845, 0.08198629460456652, 0.06559354148104557, 0.08689613321331324]}, "mutation_prompt": null}
{"id": "87ffee88-0fa7-4c2e-99ad-ee5bfc63d444", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.9 - 0.5 * (evals / self.budget)  # Dynamic inertia weight adjustment\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                self.CR = 0.8 + 0.1 * (evals / self.budget)  # Dynamic crossover rate adjustment\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE with dynamically adjusted inertia weight and crossover rate to better balance exploration and exploitation.", "configspace": "", "generation": 48, "fitness": 0.31161471596941986, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.7514240384555351, 0.7531763634514275, 0.7322978996839447, 0.7843935660693593, 0.7818439153780135, 0.7758753323335854, 0.7896586112232553, 0.7811678195749765, 0.7658439950043495, 0.5876420260054732, 0.6158108560808275, 0.5849330724001737, 0.061053882057451436, 0.5752469425882998, 0.5446183996626093, 0.5592186216637589, 0.5807056052688924, 0.6142788485672557, 0.09460886561409165, 0.10888607664100369, 0.10127834270026925, 0.11430313609814091, 0.10140882048811217, 0.10490422307407898, 0.09627616046547827, 0.1062428252112475, 0.1152273713959685, 0.12073589072466129, 0.09257337209450633, 0.10285562594388997, 0.11972231634314756, 0.10366852242417501, 0.1138269007878826, 0.10172696359982802, 0.11431730858357547, 0.09646260439306575, 0.9858582225414966, 0.9865820685185911, 0.991083565125389, 0.9837824724030514, 0.982623610175842, 0.9731561106365159, 0.9864195874026879, 0.9859608225067564, 0.9854158343902865, 0.36489226779309225, 0.3464124683392823, 0.3400861575818024, 0.36840148213192636, 0.41701409289046265, 0.35729709679629273, 0.406271647914192, 0.34778755346900414, 0.08774510921220113, 0.6456067611018463, 0.6121341216310139, 0.5435697684611075, 0.6343516864999934, 0.657213264034004, 0.19051242684409775, 0.7148753417840734, 0.6349123550823641, 0.5676385292060877, 0.3403232695487275, 0.288072931907179, 0.26992711453864726, 0.2428802005459918, 0.26821297609401973, 0.11854565913020776, 0.33143899924856457, 0.30707655298664227, 0.2876581187918845, 0.27984191278500925, 0.021985046974674738, 0.21397034488624345, 0.3177791358830431, 0.27546107632105565, 0.29533247904509385, 0.31994480318368224, 0.33819316149255196, 0.09723130491579357, 0.07833598889653404, 0.04508603382930343, 0.06898867594362923, 0.024964138987858542, 9.999999999998899e-05, 0.05393136686474265, 0.07225447180910582, 0.05684327570234893, 0.06698408094972985, 0.2110345469207573, 0.16921214677090646, 0.22541031112960042, 0.16777934033777742, 0.21299048928918274, 0.1536778861775685, 0.21456575501573627, 0.21021008522265283, 0.21045203429614434, 0.014771234857322457, 0.01142255141377646, 0.16554592063072082, 0.06908855228946487, 0.06103162545609542, 0.049650270615804626, 0.025048666404289488, 0.028573544873048973, 0.051844130349887774, 0.16246217529451912, 0.1511331466789838, 0.17016952151492137, 0.15780920133064524, 0.20120783665539, 0.2204056075110612, 0.18691131277307493, 0.20288126845801457, 0.15905326168258138, 0.5383767236638968, 0.5159548993066159, 0.530582687045113, 0.5439960562230763, 0.5268915339984708, 0.5542981860884237, 0.5708925333493757, 0.5586060812605187, 0.5420465975659428, 0.11149840484469964, 0.10296837164897732, 0.08261149705845205, 0.10873444158443057, 0.0829690795847251, 0.12042936843417884, 0.11220163082435286, 0.13819470105531584, 0.10674462998321599, 0.1683979948259937, 0.2042283945879917, 0.16174365584145, 0.22066172503215054, 0.23542474238870092, 0.15159343080329124, 0.15226809147572729, 0.1830304597298693, 0.18535106577567095, 0.426887616262117, 0.38208039201280797, 0.335116076757906, 0.32076609686296564, 0.33374702930242084, 0.40856687705810046, 0.3645181953555131, 0.5407377598532683, 0.5093984889076735, 0.2607052499645415, 0.216848517228309, 0.23329373724365154, 0.29951461207461627, 0.18394525798268646, 0.2764650327362209, 0.3451989108837876, 0.3649921334764442, 0.3411783833143114, 0.21254447438359658, 0.22548282103795714, 0.21407264531280268, 0.18470666262510016, 0.1897801251446818, 0.19012022284546815, 0.19708105574976142, 0.17516268523379008, 0.18831885162803907, 0.320793188586446, 0.2018279971628859, 0.19030241928472325, 0.2079410728595502, 0.20785635806490999, 0.20505386287189808, 0.19071707131653093, 0.2035885244842579, 0.18937964948010944, 0.18588642776098718, 0.7535481323177725, 0.15273186214652412, 0.7022513635713523, 0.19869909024689125, 0.19808988060697408, 0.14206824047607292, 0.16952168038752224, 0.7686342363305021, 0.639959498488754, 0.641756697900712, 0.6280906573536782, 0.20380043218488408, 0.6392966718107802, 0.6464491936098429, 0.10414083790830375, 0.589514306870595, 0.6165327523367468, 0.1916221104577226, 0.1763242280540257, 0.1896942237738063, 0.17840009098663778, 0.1957029115099984, 0.1762843733109074, 0.19842715364961172, 0.17758910263713445, 0.20086905125658527, 0.08212551929933454, 0.07942650766671666, 0.07191504575421459, 0.0787942575890258, 0.078808845326651, 0.08654957563379573, 0.07591690686658781, 0.07094228320902729, 0.07750236903556995]}, "mutation_prompt": null}
{"id": "aa23290c-65e8-4af5-a545-63207b6f6b17", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w *= 0.99  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                self.CR *= 0.98  # Dynamic adjustment of crossover rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE by introducing adaptive inertia weight and dynamic crossover rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": 0.3055243933854887, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.9160114882638766, 0.9015887894893819, 0.912840165834836, 0.9174646417153827, 0.9024506200198585, 0.9118112079528743, 0.911280075137848, 0.9155660737821354, 0.9119419130786414, 0.8194955014339546, 0.82196807989686, 0.8153978219633583, 0.8294830031518066, 0.8259251426161013, 0.7826032516163695, 0.8110282094361918, 0.821272475595418, 0.7938651647379303, 0.18610294096624536, 0.16043485174254168, 0.14420682134366125, 0.17884526317719462, 0.15493275973470844, 0.6554430793334454, 0.13348026662942647, 0.1802139954856935, 0.13364753982010913, 0.18143020092310302, 0.14015810932944062, 0.15801963601822155, 0.15605630968297923, 0.12883574586305568, 0.07945983075068341, 0.15550483970429718, 0.12235638259905623, 0.1408388123317087, 0.9841497633756907, 0.9864891226222521, 0.9812024393449547, 0.9821578885160405, 0.980956425449913, 0.9810318670058011, 0.9862550127195795, 0.9829531679105967, 0.9808696215974658, 0.5145732547472024, 0.5309145878750907, 0.7860096875311242, 0.19518288665593597, 0.15174959127701282, 0.5734417555444036, 0.5662813163561073, 0.5274897191386064, 0.5099342845227897, 0.23188604282340197, 0.1308898560019608, 0.1719270234807726, 0.28298028713664003, 0.192534702552708, 0.2055897095832162, 0.06856469532656806, 0.34586118214271744, 0.1392231769875878, 0.4096585037153704, 0.16740386732294077, 0.16028120325371875, 0.16477830772168578, 0.13583902201459064, 0.16550029368838637, 0.13342539196441994, 0.11178792032029561, 0.1787086836631384, 0.19731937545615919, 0.16626270100276708, 0.23787611947290777, 0.1657995521480944, 0.1497127493842776, 0.15122774982585652, 0.13001221588722034, 0.1019148830978307, 0.12021655415409571, 9.999999999998899e-05, 0.0858097069834961, 9.999999999998899e-05, 0.00016339990428004825, 0.13839271871307868, 0.039824007049653165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08887311053249525, 0.029959124106933577, 0.09656054012144155, 0.06252411875525121, 0.00796630617832439, 0.012373629383565232, 0.08854132033249695, 0.03464729460375349, 0.03539110916645094, 0.05088914908932585, 0.036291549255432765, 0.051013407303179714, 0.080398795735252, 0.15835348348376976, 0.1253448904400788, 0.10159453478969316, 0.11929639083629862, 0.08638039602792091, 0.37244035677761944, 0.04982529588606521, 0.11587977975899266, 0.3243031700579907, 0.26123896695754534, 0.11934991606613188, 0.049553426663100586, 0.06083970446191256, 0.08370516059884703, 0.5012414748851474, 0.5584166959925341, 0.5045899746422664, 0.5688963788195437, 0.5310655472580958, 0.20945376236223634, 0.5572712750890056, 0.6448054250692852, 0.5752233143155014, 0.13185929518389128, 0.09176449125989761, 0.08057120665897677, 0.08094018830359584, 0.13945536892870425, 0.10960079357290065, 0.17425479274070022, 0.11236729034102588, 0.08982637427808204, 0.17447742357209395, 0.18344666443593882, 0.15373353251667554, 0.18571803245452745, 0.18067828850814216, 0.19447894069573257, 0.26504216588349727, 0.17436068753840406, 0.2263109657414739, 0.4910857501817284, 0.31710178663214816, 0.21255620357389826, 0.5518940611282575, 0.45854596029577643, 0.271491286051202, 0.42828139245826446, 0.3571656187826825, 0.6146095924460873, 0.20684423830924548, 0.32291911894376146, 0.3889474274110667, 0.1905910620247374, 0.22396176273200796, 0.2423911964977853, 0.28382643918917916, 0.41901660089459747, 0.2912705642477388, 0.23575439000342158, 0.18143050694101615, 0.39747361696200434, 0.25141376321557873, 0.1652992545145111, 0.21605460955721179, 0.24665223920337453, 0.23564282577437656, 0.2243717682112054, 0.8534291698168989, 0.21530986728629664, 0.21084175833052, 0.21095463149716476, 0.19899372769805723, 0.73944677120688, 0.21267969080805715, 0.2504775163812014, 0.22266373320309107, 0.16597572203683097, 0.17750459017550313, 0.15398461890220283, 0.9266292935383893, 0.20166675138936552, 0.20104892434738075, 0.12285404996057858, 0.16937774640999936, 0.2108054774874415, 0.37413689771410363, 0.14603291226873827, 0.11116503396587463, 0.25008938834077665, 0.2691546325423715, 0.45294048094122297, 0.10526360997820139, 0.10500847574797156, 0.5423824473703195, 0.1959123228758527, 0.18571695715958336, 0.1932025972770942, 0.1886514586909902, 0.2113714599675589, 0.18792422475542003, 0.17863714234798067, 0.22146843357132673, 0.19337305159794627, 0.15275619033999432, 0.10203024901380087, 0.09856078961272763, 0.09842863238436894, 0.08494680512837516, 0.10466289364967052, 0.08690437324196532, 0.0974582227555999, 0.08499192682045109]}, "mutation_prompt": null}
{"id": "af3fabb5-44b5-4d95-8863-0a1d0ef7e074", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.4 + 0.5 * (1 - evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced adaptive inertia weight in PSODE to better balance exploration and exploitation for improved convergence.", "configspace": "", "generation": 50, "fitness": 0.3253313657348535, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.7468024806140787, 0.7493351311782415, 0.7682736412363007, 0.7738806573302381, 0.7752892482432865, 0.74864047624699, 0.7348487875476487, 0.775902835424433, 0.7787801243171462, 0.6298118700547068, 0.6063030329382099, 0.5885907408203694, 0.6207016259660727, 0.6029045596926398, 0.6054432858186953, 0.6145169324372377, 0.5931837008632068, 0.5776673697711379, 0.1908720059879241, 0.12960801870204008, 0.22352500457533764, 0.12079476986725513, 0.11156777587876276, 0.13055149485481266, 0.13838005372176554, 0.13764323570716297, 0.12192253709457113, 0.1144011808000559, 0.08765206878591547, 0.10127760333598923, 0.1119506208749601, 0.10872396411122898, 0.11691331715787312, 0.11383120073252262, 0.10765805852448262, 0.12129604308752862, 0.9867749743133067, 0.9865832288285227, 0.9907003564414031, 0.9834727210230647, 0.985545323622549, 0.975389078974583, 0.9841544850072527, 0.9848273046160749, 0.9857850928468594, 0.35164554486545396, 0.336377180227469, 0.3815024647335107, 0.3657117306844616, 0.356706644750891, 0.37865641343583534, 0.379529228714777, 0.42205718200103226, 0.08153475005719735, 0.6170274313805719, 0.32537759329209726, 0.5268649971868891, 0.6453290178716243, 0.6015729278607076, 0.5590933099311284, 0.5739610938580111, 0.6269890227490884, 0.623353770465062, 0.32720426648202783, 0.27311512511977776, 0.2969240735649866, 0.2982409263532654, 0.281389949839147, 0.3038444978449448, 0.2717386354651463, 0.29628252488269213, 0.2860553591758498, 0.2941814217716784, 0.05100027718277633, 0.2690743777539433, 0.31861272032561105, 0.23431187857256164, 0.11914473078524401, 0.29061806094725895, 0.2540469319118568, 0.2945602608391018, 0.1579793418816362, 0.11919170495956566, 0.08997636667580955, 0.18935874345975057, 0.14172781431834724, 0.087774988850427, 0.1567560790907666, 0.10307694117832611, 0.10762578268324474, 0.2592572456376111, 0.24996487296192105, 0.23397015419948208, 0.20334526314828616, 0.2095221080822942, 0.2067632880898811, 0.29321596893137714, 0.2765475018289745, 0.2524559572517592, 0.06127793842217266, 0.04053569800257151, 0.04082740995101741, 0.06032389600173649, 0.0906189353249991, 0.027135891699050396, 0.019045300282565236, 0.04341512681990867, 0.046217116499899236, 0.16330853789682842, 0.15820714125737156, 0.1638319818784808, 0.15304283044444977, 0.1568319985614891, 0.1745760471580836, 0.1496213430311678, 0.139146169513936, 0.1699008289967192, 0.574417079195235, 0.5584640995431667, 0.5388632366583415, 0.5475605754209577, 0.5440765158378915, 0.5429555420761922, 0.5483078232284826, 0.5236054646003638, 0.5454697232022903, 0.12298246521221645, 0.12390286252315841, 0.12805945356097814, 0.09044300673097039, 0.09442891470414738, 0.10445012709368506, 0.08815206774245088, 0.12141516678266795, 0.08784391429988514, 0.14703847623011168, 0.13864739842926388, 0.3399318193219346, 0.26377943114052527, 0.16160001001399138, 0.17127953843952415, 0.23301554774562905, 0.14400723304494245, 0.18576309563053472, 0.36980604869574496, 0.5122463728541042, 0.41864353235604124, 0.4461222391238978, 0.38977254936571415, 0.32984692899052004, 0.4607526296871861, 0.4945458035941319, 0.3880301214084082, 0.29523917088218576, 0.20749897340461199, 0.3068954199702002, 0.283788748193994, 0.2468084111466522, 0.28325762269555776, 0.32417598796263514, 0.2746402531372364, 0.35402871956354887, 0.19677250112483313, 0.19407023632263276, 0.19258023199570184, 0.19258916106942414, 0.17058233735819173, 0.20017817779793612, 0.19661740683904838, 0.1883401459456011, 0.19351065534345357, 0.1907190590861183, 0.1910191219988423, 0.21127107772628495, 0.19103271093119023, 0.30026047550918933, 0.18366467314465218, 0.3215645505254183, 0.18617644058445137, 0.19596712523209803, 0.18645401573034814, 0.6932612914874671, 0.11287767346193578, 0.6603242362382902, 0.7303321934856565, 0.19793611569337055, 0.14357836346253738, 0.1690535784026953, 0.7226848746466386, 0.6719979622442711, 0.6119085199888442, 0.5996697047939907, 0.2063255670112739, 0.6635087581766685, 0.6933591939761676, 0.10496448010009951, 0.7235321057515547, 0.6660637303209989, 0.1929020963132969, 0.19129740893444136, 0.21659475883968649, 0.1895517923153911, 0.1862487117898619, 0.18077674956476986, 0.17880545402800707, 0.18662552376791652, 0.20398849073544423, 0.08095495424977839, 0.08411329276512547, 0.07956308138335211, 0.0745414619976229, 0.0759824329502431, 0.07701539229399479, 0.0674534146065463, 0.07392728735762322, 0.06723546205543174]}, "mutation_prompt": null}
{"id": "943a136d-0e32-47b6-b357-a94b74e7d047", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-5:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.1] = np.random.uniform(-1, 1)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by incorporating adaptive mutation scaling and probabilistic velocity reset for improved exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": 0.39808497725420566, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.897875074917359, 0.9134962344770035, 0.9021477034570226, 0.8956542743931616, 0.896690190126695, 0.8971208713689458, 0.9093549757499253, 0.9026900386854769, 0.8981071878333183, 0.8188831256294126, 0.7726823838962441, 0.0540429934275779, 0.8083844824671639, 0.7979567839836209, 0.06599320347237203, 0.7943736904434309, 0.08087410212893997, 0.6897711876805195, 0.13142670214608498, 0.13727275309170295, 0.11495151836545703, 0.15546464659171888, 0.1345824459736017, 0.12917214345486716, 0.14797024497209244, 0.5989944242417724, 0.2125684348358774, 0.1310971927158029, 0.10638328211161785, 0.1315796994256785, 0.1128256695400589, 0.1211995170242306, 0.13872872560586091, 0.107294874943202, 0.1323301164398647, 0.15232977962575955, 0.9906183698036509, 0.9859573243106043, 0.9868163701276458, 0.9806601076278414, 0.9756232945543498, 0.971748406806857, 0.97899085783384, 0.982800744960506, 0.984174182271662, 0.6535972019350225, 0.6469906861807122, 0.6779498427459085, 0.6917408505428355, 0.6598035237566808, 0.6973529968739622, 0.6676536229558981, 0.609970654949493, 0.6726326561847251, 0.8595809807186914, 0.7724103028808569, 0.846253833996569, 0.8568897353586915, 0.8720220667716856, 0.2140483044699265, 0.7080282385286565, 0.8278988091694102, 0.8280772175895373, 0.7075271026665426, 0.6635718307246881, 0.6470738629360084, 0.6479771520165825, 0.5696443283151316, 0.4067825473213805, 0.13250370356115604, 0.1320530639938503, 0.5417166381677765, 0.44708055713992234, 0.11938733032909454, 0.46338399352199267, 0.5806222857950795, 0.5058373555791593, 0.1315780007223264, 0.5028658861576545, 0.1360747012403828, 0.4221460238712691, 0.1457751903990595, 0.16197916343516205, 0.14240776628133334, 0.27993469069206156, 0.21744560153534842, 0.2594890747983327, 0.34510218575293583, 0.01669500193996043, 0.30021694047555025, 0.3455255755053692, 0.34903211473713225, 0.231700471260759, 0.1929980947419725, 0.3919911247604637, 0.36275036647028946, 0.45305124598181346, 0.42657453357894326, 0.413536568910138, 0.10629984466878883, 0.036975268591024735, 0.16394728070093423, 0.11710643028459566, 0.09678225197102552, 0.15828000022019462, 0.10119844855524895, 0.12067359143978851, 0.07217399081673725, 0.31801944808381966, 0.3036743223087214, 0.3871407403766567, 0.31070975487256736, 0.29689197920177235, 0.2329639523936785, 0.2738547576352529, 0.22836680152598365, 0.08365752421892703, 0.7331576489103417, 0.7305799897815362, 0.7731407662229626, 0.7358153925511782, 0.6667133317514963, 0.75132565827542, 0.6709085256084255, 0.6566452200662921, 0.7761282153909566, 0.14513648914934385, 0.12970994455327112, 0.151055453244186, 0.148808891463858, 0.10957405283688293, 0.1409569774367032, 0.13754739938246696, 0.10882484028875461, 0.14485766587950766, 0.15936888967149354, 0.20733853452031115, 0.2490558879984356, 0.4071455553637632, 0.29526853165379763, 0.14146419136519417, 0.2749437594856605, 0.192662419050746, 0.20096372335589296, 0.4103988254252211, 0.44257729820769987, 0.4468826119790228, 0.5933083487630447, 0.3859240654355862, 0.47951886404169475, 0.6875046795009762, 0.6013225423519583, 0.5082295644969168, 0.45734883689322736, 0.27962869652175526, 0.4240254317947276, 0.36300768698875197, 0.21854581653446736, 0.42694118749332555, 0.3339020322597085, 0.3869675158262491, 0.30507512590461083, 0.2301897416626233, 0.20003803444057144, 0.2176605320514231, 0.19979162832985398, 0.2108195207366007, 0.1932037872037523, 0.2159373505551092, 0.21213962200473102, 0.2063644478347213, 0.22251347666635246, 0.21134013453911316, 0.21024198690602613, 0.1933771372495543, 0.24357745824443433, 0.2168658652120422, 0.7705658456760658, 0.2256858546401046, 0.22465338689170766, 0.1876389597300704, 0.8803060074561744, 0.15403815845032665, 0.9162786423701405, 0.20163261674064648, 0.20145236386790688, 0.1257539319478279, 0.16997763661880305, 0.2120905520959554, 0.8421466800091029, 0.156176540829284, 0.8211478576778488, 0.20949461185058726, 0.8634257423166682, 0.8371276605296853, 0.10526214107399245, 0.10434515604015526, 0.8461204361740028, 0.17450936987929633, 0.1816102774645606, 0.1846061397837191, 0.18958820630983864, 0.19755970081289365, 0.1937217833612498, 0.17713942956934625, 0.17787465700064042, 0.19481585429626636, 0.10358741315056796, 0.08789747228792999, 0.08890283363653084, 0.0852235612832628, 0.0781680276648945, 0.08739136129679959, 0.0844141570807676, 0.08647223026690531, 0.08797369712915426]}, "mutation_prompt": null}
{"id": "84a6bf0e-fc36-4b71-8442-9dd4ae48c881", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w = 0.9 - (0.9 - 0.4) * (evals / self.budget)  # Dynamic inertia weight adjustment\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n            \n            vel *= 0.9 + 0.1 * np.std(fitness) / (np.max(fitness) + 1e-10)  # Modified damping based on fitness diversity (adjusted denominator)\n            if np.std(fitness) < 1e-5:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.1] = np.random.uniform(-1, 1)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE with dynamic inertia weight adjustment and enhanced mutation strategy for better convergence.", "configspace": "", "generation": 52, "fitness": 0.3395424123983191, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.25.", "error": "", "parent_id": "943a136d-0e32-47b6-b357-a94b74e7d047", "metadata": {"aucs": [0.7621782865324224, 0.7699067478656956, 0.7368280211252349, 0.7688906375297778, 0.7447760799461861, 0.7471426848736626, 0.7678549717829612, 0.7623521156688547, 0.7578227501321102, 0.585497758619587, 0.6159036432817853, 0.6014767710365285, 0.6075154865232543, 0.5917036979383041, 0.5799997816125584, 0.5968615313072607, 0.6102691675530145, 0.5833634434146461, 0.10002275868995325, 0.10643462606219378, 0.09683622988367624, 0.10889154179448834, 0.11021488956187586, 0.0963922101840744, 0.11534281855889716, 0.0873461437340376, 0.13749836778121172, 0.10257779666868116, 0.08946002113158902, 0.08788846737588052, 0.11793596196510592, 0.1017264962545662, 0.10630804332315458, 0.09439981069083736, 0.08683486982155975, 0.09446014027621874, 0.9867734809861781, 0.9865831452452452, 0.990700567360836, 0.9834709323665444, 0.9855447779045546, 0.9753510570670547, 0.9841417779729716, 0.9848207444548666, 0.9857855527655933, 0.4829783434512537, 0.4880993639371761, 0.4695421599481485, 0.4740808284937428, 0.4860268284718312, 0.49525104534483966, 0.5068259625953953, 0.5102432858990187, 0.09061376443771263, 0.7033565250057865, 0.671241040559479, 0.6345152518646635, 0.686231319457918, 0.6949645029230751, 0.7243985951843606, 0.685611844378144, 0.6557300106372781, 0.6431212686512505, 0.28755448422216257, 0.24634586077484588, 0.38805792743536693, 0.3088009989353394, 0.24134009921116317, 0.29577857622420545, 0.29415565908302965, 0.2846003587645475, 0.24000247150421694, 0.23999160888715454, 0.0717151145161693, 0.24739223466379012, 0.2635869376243879, 0.2328627227683444, 0.2926384504333732, 0.25375792854963986, 0.22069776004273367, 0.23610416739357887, 0.1713519966848691, 0.29009030320045015, 0.1307757181541649, 0.177402520982046, 0.23632856817788384, 0.15817266729897617, 0.243670821961551, 0.3124128061966781, 0.265896785318951, 0.4207807264418173, 0.30161734156665243, 0.3857812886809109, 0.3376648370587283, 0.17978639447732325, 0.4229416150634715, 0.4179946112436247, 0.3194131332084068, 0.43910693190303196, 0.08334823641595046, 0.05821769723535797, 0.05614073656146157, 0.10592625765416375, 0.06396147819940812, 0.10564074121082123, 0.07057568714354878, 0.10878261417344404, 0.11289324008801138, 0.27500171530984907, 0.2555231342622627, 0.2797687994329946, 0.2245560058577617, 0.19759009301906172, 0.2516129047060325, 0.24958740554521286, 0.2744471656235601, 0.17749709372757994, 0.6386229645205455, 0.6596977703341507, 0.5592341941242185, 0.5572559002326207, 0.5918309749946224, 0.5765489605993259, 0.5882199871667182, 0.6312456797814537, 0.6131640096397103, 0.08882082260191915, 0.11661218319266942, 0.08486971596248716, 0.10570376874970311, 0.123821426898446, 0.10200261479817851, 0.12296663541694319, 0.09958271151674047, 0.09036890421574695, 0.13734942692540264, 0.146707341927252, 0.15912772701498812, 0.27846346248873854, 0.15198930344231065, 0.15521958497321398, 0.2828467538592969, 0.19215999123572636, 0.20700802663159767, 0.3666483829007149, 0.39483731025734736, 0.3834281489170406, 0.4212381552448935, 0.3974534701978346, 0.40758475034460584, 0.452001390730027, 0.45354050442992655, 0.4480408587789757, 0.288879703940367, 0.21369760359873546, 0.29039026246816024, 0.27835634675481236, 0.25478731933885834, 0.2922406371545542, 0.35689765845266497, 0.33839337968365313, 0.27592062246264837, 0.20519854533714177, 0.19063933940834354, 0.18691439616885241, 0.17304406651296578, 0.17909757492403022, 0.19858755504637526, 0.1829095434873952, 0.19351697981954674, 0.20602739859107932, 0.202621251042865, 0.21066668383808806, 0.25267439596171903, 0.2061843652476325, 0.19842727791234682, 0.1951563957169542, 0.1928554831340359, 0.19195145826028004, 0.2687619453764002, 0.7997558898813792, 0.20269441782929942, 0.13060924783620265, 0.15868106022089012, 0.19844671937323732, 0.19804733465433477, 0.16518782199719995, 0.1690791646946742, 0.7742722946207531, 0.7411301799077237, 0.15532631196813962, 0.7581412784327676, 0.20616407580702967, 0.6511510239914827, 0.7270408180178303, 0.10500185882054625, 0.20033279188295805, 0.7177905300588003, 0.1916221104577226, 0.17933278350218373, 0.18042034582438315, 0.19088358366440727, 0.2407926479373712, 0.17972865661011805, 0.19772671680017695, 0.194926102759019, 0.18650658329806324, 0.07878434592684791, 0.0871674704165889, 0.08520496165997515, 0.07717172992050114, 0.07341661126985366, 0.07761781830044079, 0.08442813314755837, 0.07754139066034638, 0.08346207851269172]}, "mutation_prompt": null}
{"id": "54e6a1f5-05d2-4dc1-be55-4528ebc0711c", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.9 - 0.5 * (evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-5:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.1] = np.random.uniform(-1, 1)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE with adaptive inertia weight and focused mutation for improved convergence and exploration.", "configspace": "", "generation": 53, "fitness": 0.3557393512199279, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "943a136d-0e32-47b6-b357-a94b74e7d047", "metadata": {"aucs": [0.7800016014414077, 0.7847382854821896, 0.7531325607374786, 0.7912919079169247, 0.7933008609397848, 0.7844079807260022, 0.77521930006603, 0.7848440864873094, 0.7936578280126173, 0.6206508151561789, 0.5297213887113488, 0.6303375058463805, 0.6376008108890956, 0.625306847415472, 0.6131860003998528, 0.6094549276070258, 0.6290510161767481, 0.620323703872129, 0.10689174744031338, 0.1159771876264113, 0.11519335238189121, 0.1638422261094039, 0.10438342584029758, 0.11802661549059212, 0.11532267148156283, 0.11292389655538226, 0.14396369706685053, 0.11439832477494061, 0.1130825520947969, 0.12675714828985274, 0.11132268939170009, 0.11762173408839394, 0.11079183715245289, 0.0950129447475283, 0.11064622282141523, 0.11755966534620288, 0.9867734809861781, 0.9865831452452452, 0.990700567360836, 0.9834709323684572, 0.9855447779045546, 0.9753510567601185, 0.9841417780196462, 0.9848207444548666, 0.9857855527655933, 0.5087476248230088, 0.5212260121681848, 0.49095645182295555, 0.5363056093500765, 0.47843733801446753, 0.524601267812018, 0.5134279844120813, 0.5228656413315508, 0.09167659573466713, 0.7251716051001107, 0.71341134806385, 0.663209593892442, 0.7220888240586749, 0.6995444789949495, 0.20066327016550778, 0.6739907867151711, 0.674843329159869, 0.7758178973754563, 0.4866382479473058, 0.288474931546422, 0.3587917004596872, 0.36691552392810034, 0.4300025312763379, 0.11585240752759163, 0.3927392301311272, 0.3360015320526696, 0.3944776943152152, 0.2852898644829448, 0.1069974403380578, 0.26670490922730183, 0.33258963845850875, 0.2532599450096191, 0.3881629698123765, 0.31180611276034165, 0.3108346546283641, 0.3565437770240023, 0.22966722246320037, 0.21283256331413536, 0.15770057210498145, 0.07546271525931791, 0.31007921910832137, 0.016139288339005686, 0.2030845847927789, 0.30836054994241624, 0.19518905665127695, 0.338233174442817, 0.2705638137704419, 0.37471581825901357, 0.34844992586541, 0.36700625107609963, 0.3382705950599637, 0.3292835426161951, 0.3281789097514034, 0.40567208797570276, 0.13378968138051517, 0.04328654275166388, 0.11421870224101272, 0.12130070423063555, 0.08840969197342363, 0.10196271962601344, 0.08853905699706754, 0.10095609692535745, 0.1096936833659573, 0.17489113265904632, 0.2730728938813608, 0.2551956921068824, 0.2227989184097321, 0.27584865785937307, 0.17648343420996682, 0.2733959818889764, 0.24521671937389622, 0.25797512744129625, 0.6202926421110404, 0.5771406543297655, 0.6091115947194619, 0.6287204901320049, 0.6143669893766528, 0.6405467076458298, 0.58916517334767, 0.554566474048108, 0.6368158428991806, 0.12900126686549884, 0.11190257940746728, 0.07857453032857431, 0.10591657695973156, 0.11190005825022686, 0.09610706747884035, 0.08734267009320573, 0.10333072851572356, 0.185130438845864, 0.14662460606315142, 0.2752947760047316, 0.13892507182719727, 0.3959026553543388, 0.15721581450039812, 0.2916251960854289, 0.18048044519207473, 0.2215238402279247, 0.1893087519652985, 0.465293505784941, 0.43337566715604403, 0.4442178622603873, 0.49729048159602485, 0.4105167748324863, 0.5235347520693756, 0.5696143789985096, 0.5050042082892443, 0.4978552022303476, 0.2852472945919411, 0.23593215464071304, 0.3533914309308832, 0.31870248676163904, 0.3668552952517512, 0.340775907368717, 0.36053074234341487, 0.4051489811889668, 0.35174345047112143, 0.19697333206260692, 0.2005033088839876, 0.18048998061617205, 0.1839670811184827, 0.18131969223663214, 0.22371027203381832, 0.20887693033013255, 0.19142466067981434, 0.18552528436266036, 0.3663927923739758, 0.19358388126224013, 0.18855703101330878, 0.47704829318769637, 0.19047445658372442, 0.1879862789318636, 0.37117029313614447, 0.19907001131313806, 0.20439557262155061, 0.7777326639329059, 0.17937719336174174, 0.14027465142858475, 0.16897460693236166, 0.1983157017816336, 0.1981018644243251, 0.12116764236255784, 0.16888156297255486, 0.20822030959146298, 0.7887354468564388, 0.686100524171327, 0.7668643038794123, 0.2086183392319123, 0.7338110990931219, 0.7624409053826199, 0.1051479982324709, 0.27742803872946475, 0.7547328122044286, 0.19191049779155311, 0.19901421997685198, 0.18967022057864047, 0.18804199267769905, 0.20590961191788115, 0.17785084933195772, 0.18063625583865217, 0.17488000875864362, 0.17772897533677, 0.09538260613794958, 0.08012950573713751, 0.08006605055670335, 0.07758591741292709, 0.07278967500248923, 0.0854368851339159, 0.0785076279965633, 0.07806131626874302, 0.06972710990503783]}, "mutation_prompt": null}
{"id": "04c820d3-a63a-41d8-a50b-2e6fa28e89ec", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w *= 0.99  # Line 1: Introduce inertia weight decay\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-5:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.1] = np.random.uniform(-1, 1)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced inertia weight decay and adaptive exploration-exploitation balance for enhanced convergence rate.", "configspace": "", "generation": 54, "fitness": 0.3840596027775312, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.29.", "error": "", "parent_id": "943a136d-0e32-47b6-b357-a94b74e7d047", "metadata": {"aucs": [0.9132467020221271, 0.9102782876480295, 0.9124331599913286, 0.9096566533056087, 0.9112121872367528, 0.9011943884961845, 0.9160465427478961, 0.9098695142691775, 0.9061308653533058, 0.8138963144603654, 0.8295075398647942, 0.8120960319124672, 0.8423685370444876, 0.8371817942847654, 0.8305338890729135, 0.10716666037086564, 0.8328306090380544, 0.49592636700409387, 0.7975340265017161, 0.12822345611544828, 0.18022481518213795, 0.15847016154689286, 0.12061383772245227, 0.16933075754544646, 0.14050435084391155, 0.14883242709663624, 0.11572960551484612, 0.1312357500596658, 0.12616204478341897, 0.11023502100995497, 0.13089571456312865, 0.10851948334070671, 0.10723551475261706, 0.12530311530654747, 0.10416481919868803, 0.12046352573229158, 0.9906191938472039, 0.9859531112823513, 0.9868047966098878, 0.9806598994704713, 0.9756208233633681, 0.966845756996897, 0.9789650921025268, 0.9828283808052741, 0.9818305821536851, 0.73980404962431, 0.7292266860239451, 0.752021275357024, 0.15294587393922066, 0.1536929849576032, 0.7711123656794967, 0.772339846708177, 0.7426155760538296, 0.7689786452102376, 0.23015449557568324, 0.8479062311192154, 0.8662318468321099, 0.8313209853900883, 0.8345871637503436, 0.21414272609895124, 0.38253231115873043, 0.8945069214977903, 0.8253381133118584, 0.5080442320318077, 0.17287629377075353, 0.18940195113427816, 0.20289588846536621, 0.19379030616237114, 0.19513598927652764, 0.19067290103239543, 0.4197852428950163, 0.6508054407606337, 0.1442180753802339, 0.13315216011910125, 0.16432282015017885, 0.5567970518063229, 0.1497618470720179, 0.31229435744368816, 0.4306587454397839, 0.439620658974491, 0.12753888976480376, 0.2716844522320301, 0.20180748108434787, 0.1086585442681629, 0.08867478599175538, 0.2295546700773572, 0.0813911420978366, 0.27344358744789243, 0.3221418077908267, 0.281860683699969, 0.4564800282897058, 0.2993975537977006, 0.3335018670210127, 0.30578286598991755, 0.30852350599427214, 0.37828269450045005, 0.38884154241559854, 0.44017409410106445, 0.3679489663871094, 0.1174574321354297, 0.03698403515177162, 0.1426692008749837, 0.21129295906927525, 0.10146541345190419, 0.13407211954625997, 0.10228310722045575, 0.16748010396770896, 0.08773183152895259, 0.33310822194694745, 0.25618039502311596, 0.37019937423653493, 0.3331691712553715, 0.38118611395315005, 0.30760163298977317, 0.2849681772165492, 0.2628730117945409, 0.12451875156841452, 0.8079751741790115, 0.7641247191676384, 0.7280670444917374, 0.726930816294701, 0.7912601563050373, 0.33538188641987987, 0.8111577399630214, 0.7322617430934142, 0.8091971098441139, 0.07921741080596889, 0.11182617355429958, 0.1323759210628136, 0.15546596476043173, 0.1505466444839989, 0.13411445388089538, 0.14075456244102347, 0.10958384257344933, 0.14325944198589746, 0.15933710859453354, 0.186148534909793, 0.15016891903071805, 0.2815726069741541, 0.17484150104218865, 0.24393199099036034, 0.7701778327225361, 0.18686605776872434, 0.21570219980734295, 0.4429902547921325, 0.3921965024762073, 0.5224446808107104, 0.5738452384444286, 0.5519411857197376, 0.44773144424431255, 0.38823431007867004, 0.6440839793034803, 0.4926557661498153, 0.23547180097978349, 0.38170008891276663, 0.24992128500333477, 0.34820560540844203, 0.1967187302425375, 0.3102985998405208, 0.2765181323890419, 0.41962312175261485, 0.39471815122238485, 0.21060482682520487, 0.19862990729021324, 0.2054263022319367, 0.20479949474655246, 0.21784271342975603, 0.22514192833559676, 0.22339225480571478, 0.22472206317591448, 0.19786224760339766, 0.2237396279074686, 0.22465400699895754, 0.22772710139656438, 0.22681548478070812, 0.1957111898495788, 0.21406054058196533, 0.8033389933061736, 0.2277295408360368, 0.20024381507236633, 0.18779043888554314, 0.18708558311592882, 0.1540916569298575, 0.17286351814444245, 0.2016858588453918, 0.2011848256423543, 0.1666503024319722, 0.17002985170964025, 0.21121427428677908, 0.8681985813273833, 0.15637474374164395, 0.8544613065802154, 0.21104904309571926, 0.8656966936242072, 0.8642496939574769, 0.10527302618894774, 0.10430709232697633, 0.8900009474886764, 0.1762105338035439, 0.19505132668476022, 0.1909655508216227, 0.18694379417599394, 0.2017188449123205, 0.18123473739984564, 0.18718855840017778, 0.18331715075667354, 0.22423228746633284, 0.12479527426815329, 0.09066188022836863, 0.08517239410028066, 0.09452449791234885, 0.09758615586173214, 0.09311792105068051, 0.08909968328805229, 0.10040307462603326, 0.09845023811602804]}, "mutation_prompt": null}
{"id": "671c36e6-39ff-45f4-bc23-4066886082da", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * ((1 - evals / self.budget) ** 2)  # Adjusted adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-5:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.1] = np.random.uniform(-1, 1)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Adjusted the adaptive mutation scaling formula in the Differential Evolution step for smoother convergence dynamics.", "configspace": "", "generation": 55, "fitness": 0.3880086847648018, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.29.", "error": "", "parent_id": "943a136d-0e32-47b6-b357-a94b74e7d047", "metadata": {"aucs": [0.9008995126128411, 0.9140805257949893, 0.8978108523114121, 0.901357916468383, 0.9010589011594498, 0.8896914996683056, 0.9135540331590457, 0.9083692160366904, 0.9029597975608279, 0.7960194195412517, 0.8085549122868865, 0.7979840499186909, 0.8217066121548863, 0.8100374181506127, 0.6616967971653471, 0.7945451487993542, 0.8013948492869979, 0.8092548059366769, 0.1747730270078911, 0.15857663846135073, 0.18185297562438696, 0.40376042157578873, 0.1758062478927228, 0.13949059233548977, 0.15487956382873458, 0.14748700234879908, 0.17031757135036696, 0.14234450960920753, 0.13590938078812065, 0.11767110124562785, 0.15042008867107126, 0.14796641660193943, 0.13921177781237748, 0.13572923850177576, 0.09456267503171789, 0.15035387506673725, 0.9906162492711523, 0.9859576400922077, 0.9867947770124663, 0.980632113409274, 0.975597268522129, 0.9707756101825745, 0.9789740484638219, 0.9827479941155206, 0.9826227882520507, 0.7038260242181069, 0.7063740227541824, 0.696632943868851, 0.7436012663259126, 0.7342112639651003, 0.7492889043066708, 0.7170953461224507, 0.5795902555662971, 0.7089312184436511, 0.22255592733072127, 0.3705788123820559, 0.8768572144493472, 0.887467606563618, 0.845517832926955, 0.8736604461943092, 0.8215479244131205, 0.8680453687510786, 0.231406022271896, 0.13362942335916816, 0.36240750197340177, 0.1907547513399488, 0.5092009198107988, 0.2533356502080092, 0.20901232134097814, 0.5740012942112256, 0.323631304708788, 0.2167780679018534, 0.3640810999044146, 0.09706561089561905, 0.20117860965034196, 0.19343547217943502, 0.48082931091429004, 0.13317375033694656, 0.2837068312891603, 0.1377284086149546, 0.3092554729059629, 0.07303444043621166, 0.14506966588564196, 0.10191146966748388, 0.13767010095950427, 0.06844737329538697, 0.319025189072104, 0.07950284608796265, 0.15831896912035137, 0.35472230520856807, 0.340772492588056, 0.38857993033637483, 0.33248052376667514, 0.16813274693862745, 0.20220650735735612, 0.37701166648995177, 0.371780171241345, 0.4080141008365419, 0.41148107550727864, 0.06484321819143823, 0.03562838540531155, 0.1926077873285279, 0.13040467427446778, 0.09693558486518783, 0.10510815326992817, 0.10192999103731248, 0.1220309143577375, 0.07441695228246203, 0.15782459964316586, 0.1733354537802403, 0.3460682005883332, 0.3910580069389359, 0.25037246190630347, 0.21131926226246023, 0.2738605082068085, 0.06676909411119325, 0.08376694775337978, 0.6432631057343653, 0.6958862022412808, 0.6823504631179149, 0.6461479052735957, 0.6829492548206637, 0.6847955310266641, 0.6177689289675735, 0.6754227980817404, 0.8052375469833097, 0.10894373854089956, 0.14134156979643098, 0.14590725011501782, 0.1128014806160903, 0.09377332665439209, 0.13559086241631246, 0.11264387595701597, 0.11383213598823716, 0.08426640050647927, 0.2025015486041709, 0.158681503245372, 0.18802537011807452, 0.4826836286059154, 0.2577185226492371, 0.26136311634550613, 0.4098427385148784, 0.2688568966543613, 0.30267051832442404, 0.5154264326934107, 0.5219943114998125, 0.5518986146109395, 0.24242303313311675, 0.507113055132393, 0.3408687067094983, 0.5569515991144891, 0.5419129635918258, 0.5974352108713339, 0.23740086042404773, 0.45250512676879107, 0.341990544901001, 0.31229927324957785, 0.1938233300268175, 0.43317847839039414, 0.39278349444141536, 0.41717815915790857, 0.44134041678087066, 0.2122331594237279, 0.21237004722524755, 0.19624942595486494, 0.19408253914617113, 0.2211476650697718, 0.2345264406034927, 0.2260125392376825, 0.21099719992698363, 0.20323247474585804, 0.19461110677006, 0.2080608053149664, 0.24921640206463158, 0.24218456729357363, 0.19810116135402422, 0.22520175502208217, 0.24648899053609163, 0.20912975385360988, 0.776008383191187, 0.8801162235614519, 0.18709976083772684, 0.15399958728514795, 0.9171302098638594, 0.20164298494858146, 0.20148439324575151, 0.14696404734004043, 0.17002952160531914, 0.20770352024109262, 0.8334604403937445, 0.15643968600021219, 0.8385428992265512, 0.21083995554371826, 0.8415169405611583, 0.8528135593462112, 0.10514928503605803, 0.10436280619306093, 0.8709423453886413, 0.19121304815310047, 0.18748795306617694, 0.18884345305042738, 0.18461616634747013, 0.18426981387407715, 0.18311736263686218, 0.1973427998819669, 0.18555008763112413, 0.19685783307179927, 0.10889788121955513, 0.09790729283638844, 0.08500997580131642, 0.09655601635967836, 0.0909250515668446, 0.08959616573906204, 0.09079362953259718, 0.09343685937226709, 0.0899282698203675]}, "mutation_prompt": null}
{"id": "87fa2901-3737-4938-9d4f-9867116b18d3", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            \n            # Non-linear inertia weight adjustment\n            self.w = 0.9 - (0.9 - 0.4) * (evals / self.budget)**2\n            \n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                \n                # Adaptive crossover rate adjustment\n                self.CR = 0.9 * (1 - np.exp(-0.05 * evals))\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-5:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.1] = np.random.uniform(-1, 1)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE by integrating non-linear inertia weight and self-adaptive crossover rate adjustments for better convergence.", "configspace": "", "generation": 56, "fitness": 0.3417753139712022, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.25.", "error": "", "parent_id": "943a136d-0e32-47b6-b357-a94b74e7d047", "metadata": {"aucs": [0.7561239149965058, 0.7171702089654601, 0.7281066942258252, 0.7462303407957028, 0.7554895823626938, 0.7334910901440908, 0.7484410711727927, 0.7370317353809748, 0.7376577283204586, 0.5726923457372355, 0.5282038284320311, 0.5516170820111811, 0.5819754394893271, 0.5682704634087423, 0.5643103557836541, 0.5435056452616709, 0.5637169821376316, 0.06256844627733482, 0.1359398464138123, 0.11346539147563395, 0.12406883971004357, 0.1162138173751679, 0.0913167378645603, 0.09776879872917166, 0.12655012118486209, 0.11296539383397197, 0.1111526914521892, 0.11651682844499389, 0.10015017368220092, 0.0862532758517125, 0.11089233560946576, 0.11217916942678896, 0.09307385690427505, 0.08766477755423308, 0.08152466641820322, 0.09439551911729016, 0.9862140074617761, 0.9895402410236036, 0.9907036099586162, 0.980546784712591, 0.9804012162501713, 0.9756688309198623, 0.984494288567692, 0.9811764605793039, 0.9839331983065445, 0.43858552604518597, 0.4705767062238764, 0.4584764319573772, 0.48963232781400323, 0.4587018250406133, 0.47050454683017173, 0.47233763138963625, 0.4477444694839343, 0.43487385875160234, 0.6620437118356649, 0.6495657020155357, 0.6160552582921434, 0.7142947447333565, 0.6908777981800176, 0.6910062871251363, 0.6657581657323939, 0.6557961168553704, 0.6985396848822352, 0.29428364292256715, 0.23720358803096186, 0.32479536403160103, 0.24064360628439452, 0.28923048759534475, 0.2488552831924954, 0.2847686287426541, 0.2849575993278831, 0.317030316932862, 0.30291615773384084, 0.05623357269014617, 0.20530620173141945, 0.26587663785257, 0.28939782081611654, 0.24943002332060782, 0.3120853352212343, 0.21007713332515732, 0.2733542964629986, 0.24129341244522462, 0.16718454989597198, 0.17585570986901766, 0.11755563585243511, 0.35837632914017403, 0.2511412658991117, 0.20105232743087997, 0.2503556587893352, 0.25114476966880483, 0.48808197328473046, 0.3455256513674724, 0.3390450960945167, 0.43662351260095256, 0.3615200337662565, 0.3379134139626111, 0.3623249707010313, 0.3184093000625947, 0.36744470709596877, 0.09411314011623795, 0.02909494815962277, 0.09625435238617153, 0.15968922773847394, 0.06300642938009549, 0.0910764739450809, 0.10618583269365667, 0.08460674978204463, 0.09187153433932094, 0.2252248395825841, 0.208722764662016, 0.2341572483788701, 0.237423429047121, 0.21692355353185655, 0.2803456583189511, 0.261941692750868, 0.21666483250865642, 0.21959290621810978, 0.6361239989488665, 0.5285945411066519, 0.5459728516015973, 0.6553468586252935, 0.6044644123343981, 0.6233113191006456, 0.6154813615634391, 0.5162259407475722, 0.5904848174857804, 0.10539928988747393, 0.09227889422548574, 0.12523661203815717, 0.09231158476345358, 0.08822027132457755, 0.09500919789142404, 0.10646483781530147, 0.09750884522764136, 0.11852610192063096, 0.20261420874695124, 0.18003763243114468, 0.17555034689818294, 0.16109829191116387, 0.17698384292995684, 0.19684417025798628, 0.24290183511915597, 0.19771223563868068, 0.20122726316829265, 0.41354898191955913, 0.42447479853623404, 0.40090583668083113, 0.44432844564139773, 0.40757265865932946, 0.4389823680712972, 0.4474167025475261, 0.40682771441335075, 0.4194946103686328, 0.24160611410446076, 0.32788920748118255, 0.2907023706802493, 0.26292317750965744, 0.3144202703717287, 0.3264988710621425, 0.29504825188399597, 0.3496557357888166, 0.3656732062134779, 0.1890993507431622, 0.17962342528627484, 0.18712274951966745, 0.1879821418131381, 0.18136775498217428, 0.192046865748427, 0.18489495912462273, 0.1836707239601647, 0.21282844692188063, 0.1932865322520092, 0.1882278874888641, 0.1875430986596669, 0.2087077224871703, 0.21761787770884622, 0.19761857243099223, 0.1985099685574352, 0.2305547401197473, 0.23509827294561925, 0.7498209777852478, 0.1771319443954077, 0.1385465266586935, 0.7384862963230745, 0.1990722850630916, 0.7153617422022125, 0.1438530911272301, 0.133697042694516, 0.21083226711812397, 0.7826402132473964, 0.7313038388797044, 0.7420266670682608, 0.20784441286519917, 0.7013783457100029, 0.7234997640436431, 0.10509911610949985, 0.21059815193873954, 0.6658765635536517, 0.20231005263174606, 0.21373127167551043, 0.20125473134199523, 0.2056055429308299, 0.1831279530682326, 0.2013564914815531, 0.18411270786274103, 0.19715826312096973, 0.21057370228081895, 0.07109774575313399, 0.07993957991923795, 0.08175081604625867, 0.07765279799545166, 0.07834780830149068, 0.07741150942337138, 0.09502941951059307, 0.07711527814465102, 0.08218666851177336]}, "mutation_prompt": null}
{"id": "f81ebc1a-6473-40e8-b432-3b24d005299d", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w = 0.4 + 0.5 * (1 - evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < 0.1:  # Enhanced selection strategy\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-5:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.1] = np.random.uniform(-1, 1)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introducing adaptive inertia weight and enhanced selection strategy to PSODE for better convergence and exploration balance.", "configspace": "", "generation": 57, "fitness": 0.3374824445975869, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "943a136d-0e32-47b6-b357-a94b74e7d047", "metadata": {"aucs": [0.739718001447448, 0.7128839742801256, 0.7335981453853037, 0.752876298898226, 0.7496564193545578, 0.7478721136157636, 0.7388972013922275, 0.7540951504333596, 0.732754157640591, 0.5694128009061314, 0.5605649515400148, 0.5685997661047864, 0.312854722198756, 0.5695475792901954, 0.5646829273618267, 0.5786442905093532, 0.5730617107510874, 0.5883276002632529, 0.12997806845350368, 0.11818700939471416, 0.10287292932690617, 0.10703255603877593, 0.13282658545543713, 0.20862453126590508, 0.1211738899485092, 0.1922302323595675, 0.0998912305193893, 0.07707720757125402, 0.09759857154385077, 0.11030906955816155, 0.10372224009411002, 0.09469571718856329, 0.09539185070049039, 0.09926364762605877, 0.11894712983396583, 0.09903114900576526, 0.9862017212563959, 0.9881423979334842, 0.9904780494809389, 0.9805959779464698, 0.9809919518325161, 0.9754938077593215, 0.984227475580137, 0.9858049074353405, 0.9854366820559927, 0.45882881789708296, 0.40760882800217324, 0.45888812717469885, 0.46983234005356533, 0.4703566390858426, 0.4626725903871093, 0.5128793883718383, 0.47369264513606746, 0.45629918327438335, 0.7026137796936651, 0.7035088916738503, 0.6635069719854085, 0.6954955980601277, 0.7165922051147865, 0.6547441555342399, 0.6263802274038097, 0.6710372280721701, 0.6747338187279983, 0.24652786146524763, 0.2544024573728144, 0.2533263857927667, 0.24073228645078482, 0.23359967350181055, 0.09593986095231044, 0.19038057094337224, 0.18002418349327598, 0.2430027382178399, 0.2463645011150577, 0.11482644476346704, 0.16127884966222517, 0.31047805508623283, 0.24281976720688692, 0.35209174493153383, 0.2528062234885028, 0.09011267533947176, 0.2567641914631241, 0.1730428594315847, 0.19201490398907473, 0.14510898337529055, 0.0007102679912044385, 0.18384862473061325, 0.2688840741646723, 0.2022973083442262, 0.2200948527036245, 0.21329455518030804, 0.3434177918515051, 0.42733538833960294, 0.41437506886045017, 0.3279172320412097, 0.28357826474905223, 0.2968468132410391, 0.5331029926368311, 0.44718984231107295, 0.3542050322553547, 0.12974133555472778, 0.06243534351740199, 0.10300715022792573, 0.11314130567773661, 0.11415319368300536, 0.09686009169391652, 0.11909023623903436, 0.07670205233320648, 0.13228117872588885, 0.197397986870544, 0.2319968884278384, 0.21517444690257348, 0.2363293416684602, 0.27148732141951515, 0.2836523122233947, 0.26574550200319436, 0.2358220008734424, 0.21248581552494283, 0.6140661642088105, 0.5636105178949041, 0.5842965717377017, 0.624653676635709, 0.5678722245880728, 0.6137114883260256, 0.5697297617856814, 0.6437324578598518, 0.5241540044761004, 0.0962876280769468, 0.10668859598258529, 0.1195691785690195, 0.09769241299796028, 0.09533302996896131, 0.10825060124690844, 0.10110717848469153, 0.10104020091091848, 0.0977157960981343, 0.149519756079028, 0.1774897726796436, 0.14552796683712932, 0.4410072768012937, 0.23763683561805005, 0.16036158829754676, 0.2065710940550216, 0.16166226521933136, 0.18494719126187076, 0.40717862900677804, 0.4095228241896939, 0.4363280193505087, 0.35328591536778964, 0.3869680747973149, 0.4039921833605312, 0.39207484552362715, 0.41261047529489936, 0.4419023362437313, 0.25696041215778465, 0.2665451548985919, 0.26243810098992915, 0.2856528349297457, 0.3012526582679331, 0.29419518917639575, 0.37261824426221646, 0.31699695045930854, 0.30622939885462974, 0.19977948275834634, 0.1832398540141641, 0.2071631957935084, 0.19062825598020494, 0.18084335183957756, 0.2046826390198856, 0.1920466103024967, 0.17903243646585743, 0.18889250123075907, 0.18761355545821323, 0.22253689739612115, 0.3643185309192486, 0.18482781821855887, 0.20999605822235112, 0.3870927365399376, 0.20173826043119958, 0.19614988220341412, 0.18598412651286056, 0.7501881728742614, 0.6795731415078881, 0.15245648082549923, 0.7359544424733226, 0.19036837023823572, 0.19871380195647204, 0.7271686184756456, 0.16793455091443887, 0.20888536769566057, 0.7635877888271984, 0.19810288351876026, 0.19513858380545923, 0.19477073142087853, 0.6561454749159614, 0.788026411134337, 0.20813303592989607, 0.2099703919237551, 0.20987222074592715, 0.19269268830298913, 0.17741160577724202, 0.18924228109744579, 0.1840651598450075, 0.21002223702848422, 0.21504889289473783, 0.20325831239732473, 0.22037466490867486, 0.1844695212095684, 0.0802054026857364, 0.0771910469481163, 0.08931305199160866, 0.07175301827912284, 0.07962357029240652, 0.0838161543640048, 0.08056632797919538, 0.0815688168110732, 0.08884846874889296]}, "mutation_prompt": null}
{"id": "a863b6f3-9365-4264-9b66-98ab28ec0218", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.5 + 0.4 * (np.sin(evals / self.budget * np.pi) + 1) / 2  # Dynamic adjustment of inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-5:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.1] = np.random.uniform(-1, 1)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Refined PSODE with enhanced inertia weight dynamic adjustment for improved convergence.", "configspace": "", "generation": 58, "fitness": 0.34893984780652726, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "943a136d-0e32-47b6-b357-a94b74e7d047", "metadata": {"aucs": [0.8110228826475774, 0.8000093412449112, 0.775831650948096, 0.8052651751163132, 0.8100851298551902, 0.8069475711625118, 0.8004872991046217, 0.8292004198489569, 0.7979909336028206, 0.5962773315199594, 0.5260986217034366, 0.6264520860650875, 0.607762372975196, 0.6164893933437408, 0.5996756302105348, 0.5820922718966629, 0.5889823287988409, 0.5677711052805834, 0.10778331406575237, 0.12385603757253427, 0.12039513136949431, 0.11721950491588817, 0.10786742893009416, 0.09397563842898848, 0.12221350665736774, 0.15250509058361983, 0.26031840109421833, 0.10328949410655275, 0.10576832575643313, 0.09587770920950711, 0.11117270624532916, 0.10030723278794262, 0.10957567509245358, 0.10295092424394137, 0.0998457325529365, 0.088555310102855, 0.9870458230811473, 0.9864448609332493, 0.9866801834553817, 0.9796988539186685, 0.9764156581086854, 0.9736263067525408, 0.981804173890262, 0.9847775208467893, 0.9853434371318249, 0.42355276560336996, 0.42269214134679955, 0.4341599180030594, 0.43085198466038244, 0.28433150710386945, 0.4319093802332242, 0.4308181630112278, 0.46382258000698706, 0.4408286683211895, 0.7024435423670847, 0.6635970797309647, 0.7537018790230464, 0.7382778615670178, 0.7352759831177575, 0.72085176987941, 0.677958878693065, 0.7239082003834658, 0.6932510067602748, 0.31335575526264814, 0.25560582919034447, 0.2991390037517484, 0.27213511436107096, 0.3363486445744386, 0.37237224959684256, 0.3055595946237919, 0.29096376058406836, 0.29619344509652923, 0.2380617466876075, 0.11954548582137381, 0.22455603994441353, 0.3082688631729572, 0.30301023270831395, 0.2732306976041827, 0.2808484176768016, 0.0910955060776043, 0.3169462694811196, 0.1994647361823959, 0.23861742540361486, 0.2963758570724546, 0.04522286898961414, 0.2610801445407994, 0.24667792327536608, 0.2816088066414971, 0.18871950652648872, 0.20903187349960184, 0.37159164098959685, 0.3649859729312679, 0.38122131597067277, 0.361141531665919, 0.4023350456838609, 0.32423805652861915, 0.4540257918579659, 0.43943584198609564, 0.2959107172694655, 0.037286072919336166, 0.040268123259694755, 0.14596544327531735, 0.13134962426973906, 0.15662949357684997, 0.10097346396911167, 0.09238383191901955, 0.18597295840571748, 0.08150807873901866, 0.2573262931243345, 0.2573377776354493, 0.2073441413952597, 0.27262262266541337, 0.2688918932150577, 0.2423929730480845, 0.22621023114172345, 0.2580943538873759, 0.2492069960241846, 0.590571431988405, 0.6893544577247649, 0.6360369293230898, 0.6684648621407479, 0.6088584271987155, 0.6297152474046677, 0.5888517057183364, 0.6980065760608865, 0.6849881792635377, 0.10495553234485977, 0.10380358614914187, 0.11074530663708426, 0.09033921958783453, 0.1031951304208033, 0.1409044969902299, 0.10890925897855508, 0.10556399583380649, 0.09216838573118058, 0.14713970575591906, 0.28043903310174456, 0.1703874995136212, 0.22134845753302812, 0.16784243510432406, 0.16208086681136413, 0.25200046825346867, 0.20229997143523237, 0.18678444436382602, 0.48062326542023104, 0.4058031744824433, 0.40862292641810805, 0.44812191248003586, 0.3855538922093342, 0.43688389842168673, 0.4611733701911639, 0.44091803763818505, 0.4099585569116113, 0.28012156685680256, 0.2861935801296205, 0.299888019555935, 0.28485926466790923, 0.32124882682825395, 0.33606973375311977, 0.2686737529682236, 0.33646974142495245, 0.32002537398911113, 0.19960673733960244, 0.18061266764269945, 0.20223839295120372, 0.17032222057990198, 0.23308410737668672, 0.18252310150438578, 0.18901822457735729, 0.1964743132447282, 0.19849209729293593, 0.19858184846355664, 0.19619546316487912, 0.17783721541967767, 0.18260042568060597, 0.2380709946132008, 0.21757619460786537, 0.1860611032114412, 0.34462705705443253, 0.21489382071066576, 0.18752859791374232, 0.18666032068456484, 0.15413199251497867, 0.17927664519925823, 0.2007831819644439, 0.19986309848695372, 0.14185205216013708, 0.169272553246144, 0.21111104045317786, 0.7804795031869284, 0.7279727367478285, 0.5111327380943278, 0.20600309641778225, 0.7092580844691866, 0.7597644697157333, 0.10526595938755257, 0.7485531068980276, 0.750216045577244, 0.18885750932696754, 0.1812236798011827, 0.17104741265087964, 0.20569944533292572, 0.17809858417924385, 0.20491135626396584, 0.20059982332854231, 0.1817482509187064, 0.18867704471828595, 0.09741371943223898, 0.07325654067922294, 0.07699766036104516, 0.08168486827957244, 0.08133497496315267, 0.08730711351797016, 0.06676636417253778, 0.06958301317311211, 0.08421912816704968]}, "mutation_prompt": null}
{"id": "663b23db-63f2-4de7-a8c6-0922817181fc", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99\n            self.w = 0.4 + 0.5 * np.random.rand()  # Stochastic inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                adaptive_CR = self.CR * (1 - evals / (2 * self.budget))  # Enhanced adaptive crossover rate\n                cross_points = np.random.rand(self.dim) < adaptive_CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-5:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.1] = np.random.uniform(-1, 1)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce stochastic inertia weights and enhanced adaptive crossover rates to further diversify the search and improve convergence.", "configspace": "", "generation": 59, "fitness": 0.3482136429075848, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.27.", "error": "", "parent_id": "943a136d-0e32-47b6-b357-a94b74e7d047", "metadata": {"aucs": [0.859486578388354, 0.8674226381864818, 0.8757450299134328, 0.8679840103665745, 0.8625875383773205, 0.8708277082293477, 0.8718346936380942, 0.8704350426837877, 0.8638341632782216, 0.767871707166925, 0.7606758407678501, 0.7464322387172186, 0.7536351712797458, 0.7527120424559092, 0.7223103602161636, 0.7447316780876492, 0.7510513148945115, 0.6772162686289431, 0.16052117578964065, 0.1685949136308138, 0.23123500399418617, 0.14226197055199286, 0.12473319887016443, 0.12399539186628539, 0.11132972986877343, 0.17679101973205047, 0.15016610752906634, 0.10669611536485213, 0.13864197860212457, 0.12984401478371743, 0.14839232495285182, 0.1561310944431039, 0.14452435313934242, 0.11299531131247764, 0.1248321219477102, 0.1628550192373337, 0.990622649980709, 0.9895024902964166, 0.9866753685835996, 0.9803248582631717, 0.9785920135732435, 0.9751906669781539, 0.9813244701394268, 0.9828016985125332, 0.9861241902047141, 0.5811496810368233, 0.05930614878200213, 0.5947071714799763, 0.6314239825878748, 0.6197006560609912, 0.5999387025005876, 0.624997479895367, 0.5902777679056492, 0.08443538943002882, 0.36490973010643846, 0.6924690990500442, 0.7334250928848246, 0.8281296010403923, 0.3405038095005851, 0.18975152926579364, 0.8662008027884399, 0.7810723200714529, 0.36207528039103176, 0.33236256192567193, 0.27345850702468044, 0.3013029549170627, 0.29524133921834794, 0.31204957173230263, 0.2912758754526227, 0.37097498430762565, 0.37072111330698976, 0.3524105160110349, 0.297079765982879, 0.12035758228214233, 0.26940056296957304, 0.37009037291277125, 0.34450514168017177, 0.3853427763046078, 0.2904857485411232, 0.09960194290825153, 0.1270481420359414, 0.05040779166734577, 0.05041167820550707, 0.08822171546620428, 0.05631794784329247, 0.0466680956922797, 0.08829904499706953, 0.0989224068873662, 0.042585542543212784, 0.11953438714737707, 0.2065723625329603, 0.20415794227261208, 0.12528845829582513, 0.1963276873165719, 0.18645037554903143, 0.18542163554593882, 0.19189175701929517, 0.22481178261331303, 0.2642821321576174, 0.06394358659391941, 0.0349864946307471, 0.23156378076602513, 0.08129542658463307, 0.08911362568419423, 0.09114612510485987, 0.11765519608910857, 0.26417963121901655, 0.07565506342054618, 0.22579775915239875, 0.2371563419441044, 0.2142646708274475, 0.2262778268368698, 0.15721766111139168, 0.28217113789770565, 0.20908606342740677, 0.13222180277455575, 0.2675690339776866, 0.5685943564768488, 0.5807689114409705, 0.6054130194036269, 0.6276132407290542, 0.5823117643009537, 0.5844492316293469, 0.6396997952738317, 0.5860185116722829, 0.6186083408675522, 0.10725743806114674, 0.10075130103422236, 0.10307503507911875, 0.11277419306848113, 0.11647640049974617, 0.13057279227745455, 0.11201671487154286, 0.10540571091098994, 0.1188466220833796, 0.324329782826447, 0.40422146159504957, 0.14584601481758563, 0.211453251036258, 0.2431656551453658, 0.20332905739879115, 0.18879255219993663, 0.22582811737348074, 0.20383950287391706, 0.43747842747904175, 0.5426514500379882, 0.6095224459978452, 0.46471331557990514, 0.3927598667728709, 0.5510043429855369, 0.5327029620941768, 0.5803241460707653, 0.4838887345038172, 0.3785120398528934, 0.2376717174166063, 0.3131987065380759, 0.3474286823805949, 0.19293541960906369, 0.36089822209702493, 0.4536264735993827, 0.41198422212896013, 0.4014237614659095, 0.2116203754521695, 0.19467458999613474, 0.22845635510860596, 0.20026177357661368, 0.18028312695949067, 0.20402192053524182, 0.20507776348671358, 0.22966023588771012, 0.20156803653740385, 0.22744280782698112, 0.1805262680494254, 0.19025535562181173, 0.2520534303968559, 0.23727243490619754, 0.18615473562096718, 0.21766622665324364, 0.19463451312621205, 0.19565896775498837, 0.18609265759658578, 0.18458399537323666, 0.15319940512825325, 0.8923481840639774, 0.20030234967524607, 0.20072038169676643, 0.1218775996754834, 0.16846890151167915, 0.21223344247258702, 0.7540268055071478, 0.15541702055500284, 0.4657636346589087, 0.20709942626507538, 0.7601967749407323, 0.7839123989667898, 0.2097659052547931, 0.21029202881144926, 0.7453304408884764, 0.18422874857766924, 0.17901950577501957, 0.20044118363611918, 0.19665454285530604, 0.19365706196872035, 0.2004122989764351, 0.18060978058728794, 0.17905618847178773, 0.18334278935359194, 0.09869835570903218, 0.09513622275880607, 0.08744020567116806, 0.09362638479357088, 0.08199308907561442, 0.08180752829738214, 0.09840869386395446, 0.07804010962349783, 0.07991924243401605]}, "mutation_prompt": null}
{"id": "8de3ba6d-3b64-4252-8c59-f9fa8bc45b2a", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-4:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE with adaptive velocity scaling and diversity repair mechanism for improved convergence and solution quality.", "configspace": "", "generation": 60, "fitness": 0.3982818867846276, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "943a136d-0e32-47b6-b357-a94b74e7d047", "metadata": {"aucs": [0.8804227182052696, 0.8898556138985011, 0.8938754190422247, 0.8893761268023546, 0.8926458794250651, 0.885671975220919, 0.9036266085550945, 0.8875148389691881, 0.9006935755896296, 0.7990267325100308, 0.04729950566973817, 0.7175212196385563, 0.7992178681535815, 0.4689474088941511, 0.7894134317567931, 0.810321071174514, 0.6025254659207497, 0.7788789544996302, 0.11196733637118284, 0.10193699677706847, 0.141336716772126, 0.1797036542917373, 0.1519259772297381, 0.1361983068091961, 0.15666598411319532, 0.18229765239817208, 0.17540251207184354, 0.1606796158849646, 0.12997197255863524, 0.11028734636339155, 0.1253286619299142, 0.2137919980816817, 0.16061797732195826, 0.10697374553877548, 0.10676524638812757, 0.15461692269435012, 0.990618497437633, 0.9859668363698355, 0.986851253097515, 0.9806529877594288, 0.9756029624083529, 0.9718414371781178, 0.9803491784784916, 0.9827534530990683, 0.9855434903836776, 0.6511743531686367, 0.6540536644746766, 0.6778625365655433, 0.7194301761501669, 0.7029921577258751, 0.6463478554915046, 0.7149210953834022, 0.6947810607271117, 0.6561762585832474, 0.22885398255767364, 0.8202188783595359, 0.8360150862710524, 0.8104463283771097, 0.8179806893324524, 0.2764718419467087, 0.8239221757273968, 0.7906864844319771, 0.8381931037847892, 0.7060858955365457, 0.12695520249722225, 0.5894294053859412, 0.5924845229643003, 0.5941547829439723, 0.4503651927956346, 0.13001883730452168, 0.684585759502425, 0.47222142748040374, 0.48105083264337567, 0.10971643831608324, 0.1324379517106825, 0.24011715835408232, 0.45849493721018186, 0.21923469103820292, 0.6253403378209541, 0.2651028118285499, 0.28220679812741933, 0.25045133976295897, 0.12074515780015338, 0.31311205649652907, 0.07596650882453904, 0.2753404405556532, 0.23983173970169613, 0.21214198061600975, 0.36156274182872417, 0.1624765901048204, 0.3999802655935868, 0.3968857243009305, 0.3893302033762005, 0.35697530895283536, 0.40983190603067965, 0.34995395323713596, 0.500254350197489, 0.5382229293495016, 0.3603091520222238, 0.13720089646394484, 0.049489487180636615, 0.3076888926472513, 0.2127610308756247, 0.0993248811227071, 0.14971100726092867, 0.10150999694389307, 0.10218348555670254, 0.07367911149999018, 0.24084129854192393, 0.3410794444704718, 0.3227776528924796, 0.3587302301715428, 0.3157888796900533, 0.33639821697111305, 0.30171395836482695, 0.2817580132163283, 0.08399213241678694, 0.714002330218109, 0.7564844007543057, 0.7519058720688893, 0.6254550721516916, 0.7894584712735406, 0.7109231071257651, 0.8003202050712384, 0.6805191259229828, 0.7448877450158718, 0.11016830878939021, 0.09560184717889586, 0.13868927771807316, 0.155414813168271, 0.10377698301235472, 0.10944195121818812, 0.105684658026034, 0.110654417626051, 0.11937530944577435, 0.1820656484028591, 0.49747837517143356, 0.2844683170067315, 0.27823160714279593, 0.21696332431444076, 0.2164579552503999, 0.19922618148856686, 0.1746101458514877, 0.21761829098276453, 0.4006460681062095, 0.4760994403766563, 0.5722563450998565, 0.6266614504652142, 0.3440315553587916, 0.3608068258889293, 0.4715190389542555, 0.4605912695443428, 0.2788893715691271, 0.42217950973730667, 0.18463676158319442, 0.31856757987410345, 0.35448780153309856, 0.4301568875573607, 0.3885621631003984, 0.40482830623121036, 0.28143250528558805, 0.42523428017920384, 0.22900679406617075, 0.20807209409978134, 0.20257732146027652, 0.19966642947181357, 0.19796716021702054, 0.22448791280358837, 0.18632393099043143, 0.1928760152683534, 0.22258233912393266, 0.1794377138838723, 0.22372185626397567, 0.2090328049115504, 0.2534658035076439, 0.7596325020919136, 0.19017450089812904, 0.2475747128911867, 0.7043513211200545, 0.22181678560729512, 0.18792896311149676, 0.18672661936158996, 0.15394588161369627, 0.9211610858444188, 0.2014394805900439, 0.20145580917255979, 0.1469541583868833, 0.1699011731007133, 0.21276507871567873, 0.8688889411777663, 0.15613503242790827, 0.8273713506388012, 0.20998862150363395, 0.8669636640907135, 0.8431839596553634, 0.10519357506503457, 0.10455684721532177, 0.8623593943044412, 0.18421827482055353, 0.17684920180020602, 0.1861067057405642, 0.20238939754434737, 0.17311116778503677, 0.18159632369391765, 0.1852074311010874, 0.1914367998258657, 0.21338152886250317, 0.12492835277711056, 0.09366237674431155, 0.0832222052989049, 0.08352205116395184, 0.09958069389375956, 0.08007856293698878, 0.08989982982127354, 0.08920760143461426, 0.0853156924473476]}, "mutation_prompt": null}
{"id": "8fa01c60-72a4-463a-b1c2-6b323458cff1", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-4:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            # Random exploration by perturbing global best\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1, self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced random exploration in PSODE by occasionally perturbing global best, enhancing exploration and preventing premature convergence.", "configspace": "", "generation": 61, "fitness": 0.4034879462385734, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "8de3ba6d-3b64-4252-8c59-f9fa8bc45b2a", "metadata": {"aucs": [0.8743580275612872, 0.8770541430608199, 0.8905165246287177, 0.8820884488776881, 0.8755192406501906, 0.8918937987870421, 0.8912775567242213, 0.8780880645024376, 0.8860429633199616, 0.7367205895431976, 0.7804114716709072, 0.7640832976088789, 0.7341627687966314, 0.7829760518973492, 0.6389309258093971, 0.6722654104240786, 0.7737751222804435, 0.4008858172723656, 0.11884509794148435, 0.14971643339866825, 0.1478956397727248, 0.13249115309803072, 0.13228482064642522, 0.16325819448116796, 0.1174882018379092, 0.12379410610307406, 0.1465407599224, 0.11312735989005651, 0.12220898700381655, 0.09588774010624657, 0.10812637891573307, 0.15179397091705726, 0.13170731612682518, 0.14800802502170596, 0.1506282927441449, 0.16389531898676635, 0.9903730570953947, 0.9844379690494516, 0.9880551040925617, 0.9810883784615474, 0.9755898424786549, 0.9810322103636343, 0.9817419788572537, 0.9829814221411596, 0.9812694374648122, 0.6367770243034072, 0.6672127604915654, 0.6310345462820894, 0.6298322598069241, 0.6725957164825489, 0.6207662856263794, 0.6619921054090654, 0.5054805670212614, 0.6085093620031646, 0.8612086941186423, 0.8441788765169445, 0.8385988137177067, 0.8184233429088251, 0.19232315887736795, 0.1929669460372635, 0.8009183961637701, 0.8083888633795816, 0.7560922488631464, 0.13131388192232718, 0.5630145372310087, 0.5739058155735184, 0.519219854660117, 0.48108362707019436, 0.3763815058757882, 0.2705109842136221, 0.6358653520214115, 0.542977776354935, 0.37050465134543975, 0.11860271740517125, 0.312436489070936, 0.4916170044845777, 0.6175947892870917, 0.6102408326312101, 0.40842241286231407, 0.3379158856277149, 0.3266830240053139, 0.2802565027491887, 0.22731618807995735, 0.2691806445537819, 0.24643473584421094, 0.206263703648913, 0.24210784960562737, 0.27566568502253597, 0.23463597297958882, 0.2658699091055855, 0.3716727426969405, 0.39838865123903866, 0.36166413467009717, 0.23475563349761475, 0.20113678132885449, 0.4025410831664509, 0.4004933751583458, 0.47316281267346016, 0.4812712923452035, 0.31114665553036747, 0.04745698632430706, 0.12135512827982164, 0.32850869901031465, 0.16402645338902455, 0.14515822668414735, 0.137934886625511, 0.12471551485440635, 0.08699034291952668, 0.306007264014728, 0.04280164847775503, 0.3218225510134337, 0.3278630925593745, 0.006590216554936745, 0.375242995404958, 0.2912122872777333, 0.21980904351747343, 0.2774217893504356, 0.7684045727591458, 0.8013633204393614, 0.7068890698576823, 0.7866498157901769, 0.6950681273429946, 0.774531494000857, 0.7375093471818115, 0.7304480815824641, 0.6947866966500897, 0.13375993143838982, 0.1371327939187258, 0.1323387937382553, 0.12419366349976013, 0.14660874468927942, 0.13302850156784574, 0.13665182826940236, 0.10825911076160322, 0.13068872578186708, 0.16097143031165217, 0.17882295372494605, 0.30545779808762663, 0.1806876780436858, 0.7085076701701991, 0.1883869902018368, 0.3719324857896893, 0.2102629968096711, 0.2069918993786265, 0.6057867822949182, 0.5234514837869666, 0.4990684602554015, 0.5892158547801717, 0.485514875992471, 0.5590429797945408, 0.5521241355026829, 0.6033117297760484, 0.4916144239800835, 0.4182522722325356, 0.24396668244529707, 0.36632323738737227, 0.38759525871315326, 0.2534353480636673, 0.439108657494215, 0.4277535057157005, 0.4380963563861914, 0.3982599813389134, 0.2152178322552074, 0.2342014676817652, 0.20906526301861084, 0.20610136666733814, 0.2164221878121959, 0.22471680579646813, 0.21780128224243012, 0.2131849374120639, 0.21810312868073367, 0.24203950977312794, 0.20831231683390683, 0.24863050047728252, 0.24005017302008336, 0.20867748954078402, 0.23747333754888855, 0.2201555487024165, 0.24846747848585737, 0.19852569874772275, 0.18739565197694297, 0.16529048424557913, 0.15368757108897513, 0.9112868902711095, 0.2010270103681937, 0.2013544857911549, 0.7689786031468694, 0.16865866856644696, 0.21259884646792648, 0.8506150471901253, 0.15632605634545582, 0.1549666207107846, 0.8502158269987312, 0.24250482261686934, 0.8630089927684912, 0.10531525298442446, 0.7849413922852435, 0.8427324720609954, 0.1873579687085053, 0.18705188602766243, 0.1870334345527478, 0.1758381937289083, 0.19601240233958084, 0.17997797982921215, 0.1867378479670183, 0.2131977481090822, 0.17974653892898385, 0.10774209830484338, 0.08920135637821114, 0.10087901964086154, 0.08227830483282417, 0.07636112963206454, 0.09530116484251105, 0.09249568857937507, 0.09014796392864732, 0.08593808275131432]}, "mutation_prompt": null}
{"id": "c1f75cd3-1d26-4131-9ba9-c5c4ee54f5aa", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w = 0.9 - (0.5 * evals / self.budget)  # Adaptive inertia weight adjustment\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                levy = np.random.standard_cauchy(self.dim)  # Lévy flight perturbation\n                gbest_pos += levy * 0.1\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced exploration in PSODE by adding Lévy flight perturbation and adaptive inertia weight adjustment for better convergence.", "configspace": "", "generation": 62, "fitness": 0.32160859301378913, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "8fa01c60-72a4-463a-b1c2-6b323458cff1", "metadata": {"aucs": [0.6751346917033938, 0.6830797722600628, 0.7157363636053198, 0.6874828303873839, 0.7312818638649382, 0.6993836012317205, 0.7208268541203984, 0.7015204685865737, 0.7248781210787916, 0.3537843778875829, 0.5457754190300923, 0.4386146106307839, 0.3713488506702559, 0.5521660621371836, 0.46457518199308123, 0.4274483675561631, 0.5241854293338835, 0.4728732655044323, 0.1062437096448533, 0.09361158496023958, 0.10691113386468987, 0.0948909926927003, 0.10127296368445404, 0.10233805165110443, 0.10695498168896034, 0.10092138970639775, 0.11701968962043574, 0.08152837753499209, 0.09136385263397928, 0.08341891665355272, 0.08704832994540335, 0.09974796782570283, 0.09364780375731263, 0.08333980339102509, 0.0970123562633457, 0.10040610002451411, 0.9867468098091983, 0.9863991880341748, 0.9888871002576732, 0.9800706482791818, 0.9850652902739179, 0.9812814619413527, 0.9866335124611684, 0.9808510535910434, 0.9855857647510623, 0.3868218094258137, 0.313979826180528, 0.37292865526440333, 0.39387848013883797, 0.4060799639568471, 0.4339123818096188, 0.37338522405479324, 0.4445468863310199, 0.39424843952655875, 0.7137150144743892, 0.6365767741567621, 0.6490362414262164, 0.6931335181125181, 0.6629694354529121, 0.7121676182943306, 0.618730208335954, 0.6202085382774178, 0.6766931541764715, 0.18103637836366093, 0.23755468078224617, 0.19146595276540745, 0.1962266874491092, 0.21708900559550126, 0.17622139260298497, 0.18120949395438246, 0.23366760804556364, 0.2190424326358713, 0.17843845086700072, 0.10029987679448693, 0.18487981077612925, 0.22616304257217412, 0.22062811409685934, 0.2660579591065383, 0.18984454786572147, 0.11192097268725809, 0.22242515779242844, 0.16016536027283523, 0.31578333055084695, 0.1761467598166071, 0.28879204116621027, 0.2921912648214331, 0.060933574564705495, 0.17649099064906626, 0.2673042038265463, 0.20076466617418087, 0.3328048925223225, 0.33980704268487516, 0.28805395943220014, 0.2689545448374733, 0.30415647287172054, 0.28381495090739983, 0.34144028441769614, 0.3734532975585175, 0.3924242508239534, 0.16068821018600232, 0.03264641794844525, 0.0986032282797481, 0.12317948365465092, 0.05727103834381686, 0.07810356192767154, 0.08027770771017495, 0.07721809896681553, 0.09227821282802229, 0.26115891438020244, 0.22198887230357978, 0.22623072929714116, 0.2120531431341447, 0.23295673744209966, 0.22533477066528673, 0.2532705843268146, 0.233615673392353, 0.2549550978312708, 0.49993677999863684, 0.5576178827047691, 0.5731722551299332, 0.6156306816958632, 0.5060519818386848, 0.579168857724099, 0.5810061565401756, 0.5491213727605269, 0.6287100821989218, 0.09440603127205283, 0.1092124164303021, 0.08886535836483633, 0.09627979287028143, 0.09719871753914922, 0.10016563260979039, 0.08271368916237387, 0.08548840260128088, 0.08990013734891122, 0.13984168787511786, 0.18882453583221215, 0.19367565632837225, 0.13566784207386995, 0.18483847687253252, 0.18931301298967584, 0.1489041678238533, 0.1752111623697976, 0.24904840036006592, 0.3450497168386105, 0.37706750108448817, 0.33321592609344464, 0.32497269757701563, 0.3769465055983463, 0.3757992969464711, 0.3572313753320969, 0.37672826766378653, 0.36853060210757527, 0.2759674000384673, 0.3154626291438545, 0.27487532431357553, 0.24935253309438654, 0.2807872824310922, 0.270063822786075, 0.289376392334752, 0.30608729104586696, 0.3113942550355431, 0.18741850749882127, 0.18898588383208847, 0.1950190801909173, 0.18583055756871592, 0.17480487175005943, 0.1658263080737925, 0.19530742156220582, 0.18025032174165012, 0.1841094223644245, 0.28950452005355465, 0.1911064252648872, 0.18851182873120942, 0.18285359356274256, 0.1878407754666631, 0.18602945352911915, 0.28333392883777375, 0.19051042227032755, 0.17906911310304563, 0.6335922517642602, 0.17804223791264284, 0.1433810941533027, 0.750316270537778, 0.19681049909744208, 0.19413286836007082, 0.19777742359083106, 0.16963505153906422, 0.20547923836531568, 0.7190895438081788, 0.6237475872729856, 0.6920579076124337, 0.5468066175955602, 0.6989416433311543, 0.763242280982973, 0.21121146064241225, 0.5926276970323094, 0.7517887384649667, 0.19190908554661423, 0.1863634508936005, 0.18122895526244975, 0.18650823979432618, 0.18484477450488557, 0.1738577275711254, 0.20147216728520134, 0.22542527547097446, 0.17871767129931648, 0.07094971299036101, 0.07677273068135615, 0.07741490444046317, 0.07361093519275452, 0.07369398658178139, 0.08103146579155329, 0.06951223124469275, 0.0813095283888361, 0.07716933860093833]}, "mutation_prompt": null}
{"id": "cb877eb3-6cd8-4ed3-9442-d8f2ee1fead0", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-4:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            # Dynamic exploration adjustment\n            plateau_detection = 1 / (1 + np.exp(-10 * (np.std(fitness) - 0.01)))\n            if np.random.rand() < 0.05 + 0.1 * plateau_detection:\n                gbest_pos += np.random.normal(0, 0.1, self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced exploration by dynamically adjusting the perturbation probability of the global best position based on convergence plateau detection.", "configspace": "", "generation": 63, "fitness": 0.38501459266102256, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.27.", "error": "", "parent_id": "8fa01c60-72a4-463a-b1c2-6b323458cff1", "metadata": {"aucs": [0.8615987695564856, 0.8754850714827105, 0.8493287042361047, 0.8776427714723377, 0.8821811462687431, 0.8499668494522651, 0.8580497079867491, 0.8722513964797836, 0.8471510370610162, 0.6663619637248026, 0.6075833966198148, 0.6808643162262236, 0.6948181907754538, 0.5846434080344863, 0.6386603505636073, 0.6663163426585809, 0.618071038993171, 0.6194200821965854, 0.14156204834961794, 0.11760216619068775, 0.18248058137069434, 0.13793853083682517, 0.1399444394083028, 0.13700365335931897, 0.1400830160857005, 0.1328138632065804, 0.16860001404038705, 0.11220361735180906, 0.1065149866417916, 0.13356370689657637, 0.14787307427400898, 0.15560171256869637, 0.1073595006911906, 0.14152694049822712, 0.11809498098435511, 0.14108910079962755, 0.9903730570953947, 0.9844379690494516, 0.9880551040925617, 0.9810883784615474, 0.9768250578924162, 0.9810322103636343, 0.9817419788572537, 0.9829814221411596, 0.9812694374648122, 0.49820800914152985, 0.4846904273319056, 0.5586989632726723, 0.630111175296328, 0.5305398048909107, 0.6458818565330808, 0.5201417004806168, 0.5455029563239476, 0.5246466371782781, 0.7918710444302972, 0.7822517801375412, 0.8069977369583075, 0.279900108250686, 0.19246930405569018, 0.19661957271402386, 0.7680905188320477, 0.15155306261387236, 0.8130527479170222, 0.13191794746645968, 0.483275013426271, 0.3524126819054394, 0.5268899488762435, 0.1310604713533059, 0.21032839337961406, 0.3042602172820542, 0.560666174063258, 0.3568218324535255, 0.31081511484746227, 0.1276246269045892, 0.27374401788129055, 0.2759943816321889, 0.13180231861331448, 0.3800960711037056, 0.2911080249458067, 0.26654767593465356, 0.4418224661806437, 0.17340883120041195, 0.26122276919767506, 0.45261063107268584, 0.04137637556460616, 0.18149693663086186, 0.1446871649739807, 0.2894093924335067, 0.30405488959008475, 0.29144410926990116, 0.3943148679045846, 0.355023492411488, 0.31414923309392495, 0.41158122034077316, 0.32324866280664943, 0.40766162208419654, 0.48468053183015813, 0.42121174399518535, 0.3877980554661874, 0.220469346878589, 0.043165642919026914, 0.0966613872845935, 0.23848293711101654, 0.16681921834719082, 0.12314665133192759, 0.12574526658947094, 0.15822104415986193, 0.0711205420936043, 0.2639705997068923, 0.28085510860070706, 0.3267845544625809, 0.27583146630171096, 0.262160730152309, 0.3658059757230313, 0.2858502262393561, 0.32914108089263194, 0.23196115190823985, 0.7325327878661421, 0.7255526894063722, 0.7214873127422334, 0.7549331483506435, 0.6756058250739928, 0.6878574253629195, 0.7266955799168215, 0.7183488208694919, 0.7106144026883351, 0.10938067226215298, 0.12621260704490145, 0.11980190969430315, 0.1208828854080235, 0.13051648298787222, 0.16830098725461518, 0.1214149215080228, 0.12853849141357476, 0.3718969301604559, 0.197919314183437, 0.3977300091837097, 0.16567789484896933, 0.232521903322226, 0.5040135892445615, 0.2860823499206947, 0.5405459484483839, 0.25318819808292026, 0.22720259316538027, 0.5224147340960485, 0.4637740913129488, 0.4967823329224118, 0.41860411093809413, 0.465952151512963, 0.40674253741463184, 0.6106595769576945, 0.4626732333889846, 0.4239736571256192, 0.37773788926590657, 0.3741736284940531, 0.3364736528243142, 0.41859770019578924, 0.28985610732030187, 0.3686075144789501, 0.48702748301259835, 0.3771882048217221, 0.3676344157521453, 0.2124350536432792, 0.20676163377303713, 0.1877781023250602, 0.1914935828122818, 0.23314256132514222, 0.21440943410452307, 0.21599694509967016, 0.20573110226962943, 0.20948625110019414, 0.24313518583488392, 0.6333059979831666, 0.2451603896461545, 0.24653006551807843, 0.24600145353977798, 0.23914860592040532, 0.2122513587817212, 0.7027704935553665, 0.21926513308302475, 0.18728154887521908, 0.18750937287833103, 0.1536796828353688, 0.8981961710614262, 0.20088887045852, 0.2013370847736885, 0.1877000020426718, 0.16923175036407523, 0.21255631258712848, 0.866816344977664, 0.15696694840419678, 0.15494477823877228, 0.8181152469091922, 0.8232371197015618, 0.8149342432916669, 0.10531486801730572, 0.8530372928508175, 0.828098233108891, 0.18538504188216565, 0.18449402335438203, 0.1970725687613144, 0.18368501591199193, 0.1901868829945902, 0.17760737558935868, 0.18306338191151061, 0.19956142012765243, 0.19284358349261255, 0.11745031498689473, 0.08285434993075869, 0.08626687033856939, 0.09604198885586834, 0.08891532102537536, 0.08553624119222136, 0.08940629423955537, 0.09007693102813952, 0.07968314727996217]}, "mutation_prompt": null}
{"id": "77782984-25f2-4482-a009-5a35130eb2dc", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.4 + 0.5 * (self.budget - evals) / self.budget  # Dynamic adjustment of inertia weight w\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-4:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            # Random exploration by perturbing global best\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1, self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Added a dynamic adjustment to the inertia weight (w) to balance exploration and exploitation.", "configspace": "", "generation": 64, "fitness": 0.34147878744382637, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "8fa01c60-72a4-463a-b1c2-6b323458cff1", "metadata": {"aucs": [0.7434317317691942, 0.7422206575879375, 0.7435493659938863, 0.7195445259306588, 0.7710387325700039, 0.7489749072394779, 0.7487290542681715, 0.7423401168209204, 0.756508738101465, 0.5507765120965054, 0.545732452256749, 0.48123676630796, 0.5293241920337399, 0.5809271118107606, 0.5028479294925831, 0.5738111365724696, 0.586638213884557, 0.5133912363720795, 0.11974072091388621, 0.16919799123091162, 0.1257644950467387, 0.12067272566089615, 0.31702404233391757, 0.11965587469520067, 0.13089212174219278, 0.1323801373540009, 0.11589298940101522, 0.09814086752469686, 0.10753285182482919, 0.11144147534931159, 0.1160836667641828, 0.09686996672804704, 0.11818210442112065, 0.11598593030884075, 0.09435289999356522, 0.0980323981249629, 0.9867468098091983, 0.9863991880341748, 0.9888871002576732, 0.980037381628043, 0.9850652902739179, 0.9812814622067371, 0.9866335124611684, 0.9808506975755477, 0.9855860449129152, 0.45388151430768287, 0.10901547422191193, 0.47979589418865354, 0.46800780093589767, 0.4932226324071105, 0.4844484215214775, 0.46548206922555335, 0.48668548876325124, 0.4530914983869787, 0.66830921192896, 0.677379154604451, 0.6849276653762102, 0.7097174898540275, 0.11606079728101826, 0.20559773723856833, 0.6893058948974288, 0.6792853253641495, 0.685654743741677, 0.4138542690569026, 0.24928117469126987, 0.4041899035312674, 0.2894467777138625, 0.33159774181297574, 0.32360450123346307, 0.3648885796814537, 0.3440219798003614, 0.29448566238771456, 0.2823356510356426, 0.09578824828736743, 0.22101810490822427, 0.32497974252353157, 0.2522716609302361, 0.2988457389968162, 0.3453936321990143, 0.2611851230675746, 0.325837986190084, 0.23319895677761482, 0.16819424892438162, 0.1743047127496964, 0.09758467531544135, 0.21221438811181925, 0.23612580283095375, 0.20079369692065807, 0.20762581523522683, 0.23559949675299963, 0.30203867566710574, 0.37981983551963283, 0.32154431512850756, 0.37015766201008105, 0.17494525404673655, 0.40322190739579955, 0.3464891009313543, 0.43560265266696274, 0.34085570619779915, 0.08143119477886807, 0.02804339615857321, 0.07836122446750415, 0.12536880958592722, 0.06444890198889264, 0.08507864632139683, 0.1335507932931157, 0.10895824438835411, 0.17362970137366596, 0.2338420733589961, 0.23710136506752177, 0.21978887450472484, 0.26594837614273914, 0.2213436187567408, 0.2786637653638271, 0.19968918886369014, 0.23549873964373957, 0.2511952265929138, 0.5340800370520048, 0.6434905136715503, 0.6551544212813615, 0.6134273034684132, 0.6094963561596318, 0.6264504345591062, 0.5920188112482698, 0.5731974940678206, 0.6283036178668424, 0.10016644849884415, 0.09329675310233454, 0.09725440982645817, 0.09648704944904007, 0.09984288170028488, 0.10464376993190472, 0.11729230997898121, 0.09284411445461194, 0.11145788391827371, 0.25380010316905977, 0.19895141949521167, 0.16316793337822366, 0.14691886387122066, 0.15974199192608884, 0.13583640490592586, 0.18253390067202802, 0.22152460688486886, 0.24586135468854164, 0.44286458914075344, 0.40413575753016107, 0.42396563860720904, 0.39274402979081224, 0.3997864834139687, 0.42824368850472283, 0.4584304894323671, 0.4578785505941999, 0.39655788035285944, 0.22485478234783218, 0.2200971601632128, 0.30273958380711063, 0.30669186475742427, 0.29356081529007116, 0.2823388917235077, 0.3312295491907986, 0.34662976983809657, 0.33328820287545335, 0.2065663509747715, 0.1833190569579939, 0.1815816638789708, 0.1822754282243224, 0.17601668676036186, 0.19027268226289773, 0.1899379975754124, 0.20131877808657672, 0.19453124005429823, 0.1897208687229004, 0.18880606665315558, 0.19970716959813906, 0.19229826264783156, 0.21437773218539846, 0.1818349255755367, 0.2065208265855013, 0.21028399402110165, 0.4040990747406137, 0.7020276383221437, 0.7075184395960205, 0.14909273669891132, 0.15793002286344238, 0.19824691121511928, 0.1951104825944896, 0.19624757472216303, 0.16982386005123062, 0.7794323055165707, 0.7796198265551268, 0.15547990018536328, 0.7489720672981932, 0.19011885001448725, 0.7111048672579658, 0.7595589013477098, 0.10509505848606115, 0.6703766761038124, 0.7623079830549653, 0.19242241114073044, 0.1845868889777993, 0.17313369429054004, 0.17865489133429002, 0.18619670455572346, 0.18695655416846202, 0.18576266900666127, 0.1847251519641916, 0.1878454957798278, 0.0821629541928034, 0.07321044221979323, 0.07987647424643729, 0.07136182298166893, 0.0687131492191213, 0.07207139696887621, 0.07650025956221618, 0.07288280122930502, 0.08203403823747413]}, "mutation_prompt": null}
{"id": "14881eda-56bb-478c-983c-1d8f4d0f825d", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.9, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.4 + (0.5 * (self.budget - evals) / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR * (evals / self.budget)  # Dynamic crossover rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-4:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            # Random exploration by perturbing global best\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1, self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by introducing an adaptive inertia weight and a dynamic crossover rate, improving convergence and exploration balance.", "configspace": "", "generation": 65, "fitness": 0.27787462942724195, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "8fa01c60-72a4-463a-b1c2-6b323458cff1", "metadata": {"aucs": [0.6831025514500422, 0.7767232956242317, 0.5777944727525312, 0.709445950039723, 0.7930378051810547, 0.5755116869589318, 0.6761597329436246, 0.7819529184384636, 0.6550499106394692, 0.42174673600442236, 0.41481392011101603, 0.27883025258139693, 0.3901428897744712, 0.2613043305458842, 0.21262140985722433, 0.45041081147249495, 0.254024450741414, 0.32744950282184093, 0.29993345498262336, 0.11547159457620493, 0.13228863973402716, 0.1303403067490233, 0.23538702281924184, 0.20792762832085976, 0.1544153502598128, 0.14399107911594078, 0.12965232935308868, 0.11081744945902627, 0.12628404795423998, 0.10375394746226507, 0.12813449366004892, 0.09064171399357379, 0.12248963527579759, 0.11716465142665256, 0.11258819928245867, 0.09566147683286819, 0.9855218591385565, 0.9909926529906009, 0.9861781965630166, 0.9759207925741682, 0.9708147550569756, 0.9802479139258694, 0.9818868169470629, 0.986005639417553, 0.9855489044908557, 0.4095899558755346, 0.3761962061352232, 0.3127039217970776, 0.44602050082701084, 0.3748703817766199, 0.3916955769010597, 0.40360629587115904, 0.2953232525295816, 0.3029245017010648, 0.5041632909322786, 0.7065064359735583, 0.5274203944042279, 0.21067697324354429, 0.707019954256091, 0.7730439725838727, 0.20190645583409583, 0.22871901636197745, 0.34424893690569636, 0.1942413825701167, 0.2130887412921818, 0.19087776251601152, 0.200094909862239, 0.12270679905699522, 0.1198812309401115, 0.17807309474858923, 0.15181203604285787, 0.1790273095271928, 0.20442734757495773, 0.07615024270985338, 0.15628363555210667, 0.18371458353022607, 0.20106795204962702, 0.21457197559491203, 0.21440974926419365, 0.07111173078334765, 0.11666625072434578, 0.03411807613561213, 0.0032254499757143895, 0.016239814225472604, 0.00022317015435369125, 0.004314829735241443, 9.999999999998899e-05, 0.010131831580515449, 9.999999999998899e-05, 9.999999999998899e-05, 0.1365836683548889, 0.035890776488530673, 0.15787025468248617, 0.17367046111449969, 0.08026308044710917, 0.013590490641779085, 0.17618669145335242, 0.07496517069848119, 0.04143069532974064, 0.06389713250366003, 0.021535187046668236, 0.012414615442815968, 0.05139082314266219, 0.06190380642540172, 0.03992856698127489, 0.07651664762005728, 0.08266551467394834, 0.0799946427382574, 0.0919610100040873, 0.04023035579209211, 0.11983723920039469, 0.12553925076822348, 0.12448739419240429, 0.14703365731541274, 0.07822163163735962, 0.050423046657094184, 0.07495035180230247, 0.5168062696660471, 0.4733408589270053, 0.4597678228371329, 0.4467965040888756, 0.4644405599692124, 0.510090793843568, 0.5119005379935403, 0.5453243275965578, 0.5122382899274165, 0.10282025412477835, 0.09815588887731896, 0.11008695534073265, 0.0973489967256177, 0.11577292022129781, 0.11734435943807675, 0.11246588867700413, 0.10258291075212367, 0.08810349791979388, 0.18079930782242604, 0.18573464285988517, 0.2326809443692026, 0.2500945067330851, 0.2977811608899765, 0.1918192511615222, 0.24897109753912527, 0.18833823682922646, 0.23709600632457162, 0.4057115972839823, 0.35416634319831386, 0.26131391251219627, 0.23037430467993714, 0.3106430943806928, 0.3496341594815261, 0.3252136812136981, 0.3700538733649734, 0.3326430495653825, 0.28887476417652014, 0.16400030437224689, 0.21963702226000792, 0.26480554387200506, 0.1836260344985744, 0.2775749065723838, 0.33568815860111534, 0.25371191816686434, 0.2259695384901107, 0.21271006766528788, 0.15948284374409905, 0.1832974424675048, 0.20232593204879723, 0.19508571883916248, 0.19083403266202004, 0.1937914550031994, 0.21035867827572208, 0.21225835952665395, 0.19690110936730765, 0.1868810045885121, 0.408728379845576, 0.5163202421458709, 0.4195354665003167, 0.19516054778294634, 0.23263349946506695, 0.3077981902909138, 0.21096701810032203, 0.8205763216428785, 0.18125912384345888, 0.15389525395441672, 0.8038169281241904, 0.7434364929392778, 0.19822543733655051, 0.1803924843340564, 0.16344070974216252, 0.20674437921115218, 0.5656202041580353, 0.1545233923864764, 0.16260493744843063, 0.2054675837340666, 0.584411624460778, 0.5869989828856959, 0.10509320667304034, 0.6740702989884956, 0.6375922617557925, 0.1916221104577226, 0.1823614205745907, 0.20421234834352275, 0.1915609394085267, 0.18466579463382693, 0.1861929271521987, 0.18130388767779326, 0.19085509064130823, 0.18460194194998292, 0.08072226149249051, 0.07628961567231052, 0.09387802792233557, 0.06949165855195738, 0.07636907104712409, 0.09192340209859662, 0.11559044676322028, 0.0810292650819674, 0.07570386321880629]}, "mutation_prompt": null}
{"id": "42a42891-7665-4db1-902a-2449052762ea", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98  # Dynamic adjustment of cognitive coefficient c1\n            adaptive_w = 0.9 - 0.5 * (evals / self.budget)  # Adaptive inertia weight\n            vel = adaptive_w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget) + 0.4 * (np.std(fitness) / np.max(fitness))  # Enhanced mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-4:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            # Random exploration by perturbing global best\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1, self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by incorporating adaptive inertia weight strategy and improved mutation factor for better exploration-exploitation balance.", "configspace": "", "generation": 66, "fitness": 0.3321966126546844, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "8fa01c60-72a4-463a-b1c2-6b323458cff1", "metadata": {"aucs": [0.7154122473445228, 0.7541969146972572, 0.7492646347197689, 0.7632438560482121, 0.7539445216103666, 0.7257977865400564, 0.7498111001501507, 0.7468927087163737, 0.7454595267848183, 0.5422728723961603, 0.5578839222088113, 0.48722992168926527, 0.5488415685783983, 0.5443066346268246, 0.4482423366731858, 0.5365898741924077, 0.568475427545476, 0.5055783243958187, 0.14686541512441786, 0.12274244232700349, 0.10096442110907977, 0.11745340751889288, 0.11640305435916876, 0.11703335578089502, 0.11800299147108562, 0.09805008238391655, 0.11320516281325033, 0.11154152349230839, 0.08845988068342125, 0.11748692062014143, 0.10175448160950762, 0.10190513847571658, 0.1044809078912391, 0.09115536586203365, 0.10301813394898507, 0.10059133378641905, 0.9867803167630628, 0.9864024548214871, 0.9888721618743924, 0.9800423525718754, 0.9851895454410426, 0.983106090373429, 0.9866508058697925, 0.9808529951130136, 0.985955984026476, 0.4270115639443196, 0.4050845870217703, 0.4205536751459732, 0.40217041097506145, 0.41514005669335885, 0.4644286214201384, 0.4394906242461879, 0.49722622486548884, 0.4002291219197186, 0.6537995103498224, 0.6559600739317372, 0.6955889094896699, 0.7274015224801091, 0.20485539182224688, 0.6973130215431804, 0.6670177387035283, 0.6366135176269968, 0.627862684374398, 0.25478336720647055, 0.34823958192118976, 0.3256767375255024, 0.4371573199518545, 0.31686820026622764, 0.2904695659108314, 0.2758032991100652, 0.3437214055064478, 0.21278694317194147, 0.31280078875072126, 0.07456518317593908, 0.11366083932384774, 0.272358177173198, 0.3483262417767058, 0.28499145526340974, 0.28586732079568344, 0.26925289893026527, 0.22401637422089093, 0.2956413375429443, 0.0685271612041295, 0.22313268059347813, 0.2493514712611422, 0.16887994220629665, 0.10336098952030737, 0.26238876426306457, 0.2501511912189529, 0.20393662735453844, 0.2825099512235917, 0.34249495257433404, 0.3247866420975275, 0.35350621785830394, 0.40195330880245594, 0.3340717621048651, 0.3663150549013108, 0.4197240358277513, 0.4064453000812419, 0.06819278257768435, 0.051130929937182046, 0.041018289189714285, 0.0986532587054828, 0.060215172497692926, 0.07197333569460351, 0.07456371499958836, 0.08207870696632891, 0.12820850267927508, 0.2211179712212139, 0.2315972208434236, 0.23123538644750674, 0.21260723364734835, 0.19254648267618468, 0.20849840510828166, 0.1877727862870271, 0.27264228746994745, 0.17953498939036439, 0.5256542248635939, 0.5488341017268346, 0.5843580519251745, 0.5707985540734375, 0.6036502684240943, 0.5883359966165937, 0.665668098136672, 0.5139563755624328, 0.5848252612723149, 0.11812106920089971, 0.08871766575624951, 0.11515339771351751, 0.11267896939868516, 0.10163847072925125, 0.10372976607588336, 0.12369721369744635, 0.09609572782089293, 0.0935676730389694, 0.15773311892711284, 0.164237428613359, 0.23773785365927735, 0.2208607604986006, 0.2310358291567295, 0.16027019893686578, 0.16057059117174288, 0.2993033855589535, 0.18999119302728373, 0.39980946075117685, 0.39028772295251624, 0.4263944798643835, 0.4206240761090918, 0.4436101293784872, 0.3555358976170798, 0.4496241584945535, 0.46481673389550404, 0.41198791770148735, 0.25961253505713633, 0.2555760109991929, 0.3336888930129267, 0.2640493652945034, 0.2524964139486551, 0.2750834611645483, 0.3170721328060234, 0.3353458403965053, 0.299070523387969, 0.20073978411916304, 0.19111495798860123, 0.20552783341027236, 0.1925126217949087, 0.20527430736996022, 0.18339274125084948, 0.18051745077443393, 0.19048421580750707, 0.21079948526033465, 0.19889414427063135, 0.23447521264165194, 0.18837312694291275, 0.1962163929503179, 0.21488977567086598, 0.18340815359865192, 0.19724580312717588, 0.1860959221618701, 0.18206378254173106, 0.6811680652356207, 0.1647181216107596, 0.1529356337177593, 0.17891173351343737, 0.19807710097124986, 0.19816277468759413, 0.1954158293276691, 0.16952221957519664, 0.7853796949775715, 0.785968065337421, 0.15475078740615078, 0.6522890661985246, 0.194053468458809, 0.7056762434724428, 0.7502416004045087, 0.20666061565562033, 0.2067555852347015, 0.6619268766091897, 0.1916221104577226, 0.18646727114886785, 0.19809575472083585, 0.18329761902234054, 0.2162446573917951, 0.2047830786168382, 0.17966178017787238, 0.18127880873444358, 0.18376462517176007, 0.09462887613548154, 0.0817376417360749, 0.08349552133998572, 0.08381246130723286, 0.08697810114338078, 0.08722962360958741, 0.07575267127034402, 0.07429923000856875, 0.08250360038811466]}, "mutation_prompt": null}
{"id": "9d794d34-65ee-4bd6-a27f-2e8acf9dbdf6", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w = 0.9 - 0.5 * (evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-4:  # Probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            # Random exploration by perturbing global best\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1, self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced exploration and exploitation balance by introducing adaptive inertia weight and stochastic crossover in DE for improved convergence.", "configspace": "", "generation": 67, "fitness": 0.32984745287790224, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "8fa01c60-72a4-463a-b1c2-6b323458cff1", "metadata": {"aucs": [0.7386484382204896, 0.7161344545886541, 0.7092675663674951, 0.7362423264474811, 0.7182765000960288, 0.6969155876151831, 0.7291803536656711, 0.7401385353743037, 0.7286761510460869, 0.4857850072128409, 0.5567260734556545, 0.4947051150055114, 0.5585116959974917, 0.5431931658481249, 0.4921481531090687, 0.51695569800813, 0.5483468011068668, 0.49452104339474146, 0.12397068404783895, 0.1001251191023117, 0.10616908202557829, 0.09441559324417481, 0.08514499181954849, 0.10826424506102417, 0.09123725152628581, 0.09835135314365728, 0.0967288711030736, 0.08913497142772941, 0.08763070209047075, 0.08378313781825886, 0.09513034034402512, 0.10508985876339794, 0.0896850652344845, 0.088733399820771, 0.09639378771843587, 0.10092615079774092, 0.9867468098091983, 0.9863991880341748, 0.9888871002576732, 0.9800373767416923, 0.9850652902739179, 0.9812814619413527, 0.9866335124611684, 0.9808510535910434, 0.9855857647510623, 0.4053849346441639, 0.38124940144616337, 0.3899376719930465, 0.38854982443642716, 0.45331124184211136, 0.43589298299220947, 0.36953669209285145, 0.09971016372856534, 0.3785981068523814, 0.658688320472179, 0.6971569385873316, 0.6878048509632948, 0.7575946941847925, 0.6526216841353275, 0.7120543294730247, 0.7395226412259361, 0.7107833849195411, 0.686892063214847, 0.21613999599404632, 0.19463514367837453, 0.20373054712445327, 0.24726021894775063, 0.21209309359982675, 0.2366584551836376, 0.23639845811212223, 0.19990392253229705, 0.22189537382356328, 0.2206726817969623, 0.10203540184151261, 0.21324248035766236, 0.2200456485513157, 0.26562355112575875, 0.23800364451328948, 0.24530814841529713, 0.25692773732128316, 0.0859033704637403, 0.2020936798822276, 0.0762375887519875, 0.19507948224763005, 0.06018318224150476, 0.3179742152903524, 0.32839531654956766, 0.15307110930604173, 0.27350864639528616, 0.2682533889043087, 0.32730569816542987, 0.3340951681271789, 0.3191844527020311, 0.374451085421285, 0.20672804537552047, 0.3876011894414685, 0.4692503583374622, 0.4000730860166204, 0.39740289482981617, 0.06261878691828571, 0.07267964370135638, 0.05692448526106941, 0.08989913583107534, 0.15626806706840002, 0.10884131649579487, 0.09866159314349765, 0.09708742760022615, 0.17804650485635687, 0.19881483227414365, 0.23623561567335327, 0.24181062496516859, 0.24836901279605084, 0.2559013006420132, 0.20854151832273427, 0.2248617528579453, 0.19839974531304838, 0.2233515629981222, 0.5051054670570183, 0.5465595685290262, 0.5935951140455638, 0.5738429352723777, 0.5326330677899485, 0.5317003394275954, 0.5740242668552731, 0.601587544306845, 0.5874462237667674, 0.10135488736957232, 0.10362441266884126, 0.08832675419395741, 0.10183926838281954, 0.08400718162832421, 0.09888652073537418, 0.09829892880488311, 0.08929837547968056, 0.09879672752216939, 0.15183965580228687, 0.14222370835077036, 0.16638659256041632, 0.2393689178655093, 0.18538110643222505, 0.1574238688035683, 0.1933508965026357, 0.17639754289203669, 0.17921811610709248, 0.37838797696707627, 0.39753843500512076, 0.37497730088158154, 0.3568016339217881, 0.3316741403623732, 0.3862150649269971, 0.41596660658153983, 0.4170199344185006, 0.4097428327073659, 0.2817138054148445, 0.2898539382302795, 0.30524899022189145, 0.2681986865836209, 0.28512749268622783, 0.29502179896373815, 0.33991641435608355, 0.3358712407063337, 0.30159754259141136, 0.2017847097681018, 0.18708523896992146, 0.18074626894931933, 0.17210936272152744, 0.19645588948029202, 0.17190352140652576, 0.1754573030753157, 0.17110455967841776, 0.19892171103257938, 0.2383165358635354, 0.18978878016547307, 0.1867275984087582, 0.19460795271567055, 0.1973850074601462, 0.26457644453019213, 0.21335028139220258, 0.2363830433013835, 0.22966511146177815, 0.18621830099873116, 0.6196922870193181, 0.13705845556195473, 0.7352115059209314, 0.19748770863156584, 0.19528994000455502, 0.19599488354537353, 0.1698069612504851, 0.7596429676532697, 0.7473912020623632, 0.1541254363859318, 0.6510070293506148, 0.6607545567228317, 0.6542089397027612, 0.7290794207060012, 0.1052122179740943, 0.6222096564628397, 0.7413964896668972, 0.192265356626112, 0.1841430913504445, 0.19429049136047083, 0.19231147441170116, 0.21130676839723883, 0.18433010790536974, 0.1820864873743515, 0.20756903088090772, 0.18604891943974367, 0.07863978582334097, 0.07401615393100669, 0.08146103654419079, 0.07171622759188212, 0.07459155890810165, 0.08006438955706763, 0.07539561499689384, 0.08164878514279639, 0.07687129190289466]}, "mutation_prompt": null}
{"id": "06c2ddd3-1898-43e0-8662-67e95f294088", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.97  # Further dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)  # Adaptive mutation scaling\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / (np.mean(fitness) + 1e-6)  # Modified damping based on fitness diversity\n            if np.std(fitness) < 1e-3:  # Lowered threshold for probabilistic velocity reset\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            # Random exploration by perturbing global best\n            if np.random.rand() < 0.08:  # Increased probability for global best perturbation\n                gbest_pos += np.random.normal(0, 0.2, self.dim)  # Increased magnitude of perturbation\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced population diversity in PSODE by introducing Gaussian mutation and adaptive parameters, aimed at improving exploration and convergence dynamics.", "configspace": "", "generation": 68, "fitness": 0.39736757783454685, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "8fa01c60-72a4-463a-b1c2-6b323458cff1", "metadata": {"aucs": [0.8303759730131666, 0.8425345427604493, 0.8792816831716085, 0.844522651509076, 0.8532447325333723, 0.8799436581143988, 0.8436141136979973, 0.8530043238281745, 0.8823911520711256, 0.6415906404870952, 0.7032073403812493, 0.7884944185570322, 0.676426798359155, 0.6104375519126861, 0.7268463402279084, 0.6898991040209916, 0.641971571743645, 0.6081117650319339, 0.14546088310221839, 0.17102045330324878, 0.6041216031761477, 0.14555124487691096, 0.1115299252235078, 0.14298521798034092, 0.17600776996766687, 0.14910213680879625, 0.14761446012574342, 0.1407435715235984, 0.14480310090640325, 0.138262299112222, 0.14544219036739092, 0.1749170091454565, 0.11654870290539443, 0.15320984176773056, 0.11254751391068585, 0.12091836300141312, 0.9903731380105065, 0.9844527233659686, 0.9880486749037912, 0.981088369696742, 0.9755871006085095, 0.9810322699235241, 0.9817414882068248, 0.9829825137633024, 0.9812706050972498, 0.5831945568131461, 0.5208075519500359, 0.5506906023121994, 0.5609780075549402, 0.615195631319469, 0.5472225536348836, 0.6052069742892052, 0.5119981757726446, 0.5070437663122935, 0.7982802055264383, 0.7863614576805883, 0.17261457778379008, 0.21499698231978592, 0.191768209378245, 0.8334906243266013, 0.8026478470144137, 0.766244091631979, 0.22997035866719184, 0.6010110552968712, 0.45862549051273827, 0.4263059809996831, 0.4875876366493922, 0.4577692311209509, 0.5671727513188847, 0.1504951144823059, 0.4539122515473526, 0.48633432310314517, 0.20157047383131443, 0.1260619373093439, 0.40687418812096976, 0.5487518903877393, 0.5144798475322598, 0.6147757155655944, 0.5435940384185407, 0.15538321979284486, 0.12889700319620556, 0.3114670076749465, 0.06119905730124142, 0.25227481288379505, 0.18499165962729558, 0.3224408159612542, 0.06984023264020434, 0.29597640391867563, 0.33650762631071274, 0.24595903133011265, 0.29431428573863627, 0.3302836202839229, 0.4842295941427025, 0.5343158871791652, 0.5253382043491268, 0.370982790996385, 0.4293755728596076, 0.5077247067404027, 0.45702837258659557, 0.04964859662879695, 0.05429470141051784, 0.14257109542707003, 0.17208804272376532, 0.2247770175243785, 0.10906940824541123, 0.20028373737914107, 0.25714165004761, 0.07839120255531395, 0.19816997980744167, 0.25017001408021955, 0.28008926940968526, 0.29328476874874043, 0.21533547219198024, 0.338207213449475, 0.2985628116771615, 0.30077388849875075, 0.29078912636749765, 0.6556560926502176, 0.7727589670797048, 0.6723988610717138, 0.6049342521261132, 0.6263912439283084, 0.737884079458628, 0.7058106242690187, 0.7147763925378573, 0.7607917709993887, 0.12526301462436584, 0.12543789025788432, 0.12532304189717247, 0.16064345460119567, 0.1084946824567582, 0.1314348219895306, 0.1075150464959379, 0.11001819840673088, 0.17871164194021372, 0.24388690919219813, 0.17747056394263838, 0.2529823678068427, 0.30742076000383345, 0.5745227937749391, 0.18778010808904477, 0.26107672202766274, 0.27267615744765494, 0.24218997028287148, 0.5200622995057314, 0.5461769809317991, 0.47364121226288336, 0.4193475815910782, 0.41038411115710594, 0.5422375310994624, 0.29135250388613987, 0.28902995635489037, 0.543917919425936, 0.38051632837874416, 0.2709843558139501, 0.45044857737540656, 0.370513008066071, 0.40278526069456266, 0.35790937674771994, 0.47899867986323197, 0.3360970340326238, 0.29253711962485185, 0.2153874800494726, 0.20779718486180376, 0.22561865568422057, 0.19549077012688754, 0.19171309559283456, 0.21477145855076196, 0.1999423484039199, 0.18814597008271983, 0.2197742260971589, 0.23565061628367123, 0.6837750808475996, 0.23355264076492666, 0.21995996620042002, 0.6824470732046992, 0.6928749937826167, 0.19652811100733447, 0.20267267903882502, 0.20880516308862895, 0.1674640733008067, 0.16510507438496025, 0.15367764785580962, 0.9084921828872204, 0.1791145435917324, 0.2010713252821209, 0.16942057521699094, 0.1681228849932075, 0.21257736108974146, 0.8699737369846905, 0.15644897462636254, 0.7538218754332062, 0.8130669499274678, 0.7211977042528521, 0.8063548218583135, 0.10527564794746735, 0.8483800357197654, 0.843566761316721, 0.19800327445852017, 0.19453052583279473, 0.18455874530473426, 0.19152557128164394, 0.1932341181297853, 0.1815753491195794, 0.18025016660556903, 0.19920556652854515, 0.18551673224261822, 0.07991139215651633, 0.08250555433365914, 0.08452465097690998, 0.08752411838336971, 0.08269624055916469, 0.09255411707733219, 0.08433931998901678, 0.08334338061086821, 0.08689449778884595]}, "mutation_prompt": null}
{"id": "d7eddefc-f354-4184-93c9-036b6ad57790", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1, self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introducing adaptive velocity constraints and dynamic mutation to enhance convergence stability and diversity, refining the exploration-exploitation balance.", "configspace": "", "generation": 69, "fitness": 0.4058817122996314, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.28.", "error": "", "parent_id": "8fa01c60-72a4-463a-b1c2-6b323458cff1", "metadata": {"aucs": [0.8939608926126399, 0.8763900025078959, 0.9025072015020517, 0.8984733720394265, 0.8623000195248223, 0.8824816415282464, 0.8901269115216552, 0.8801431863663217, 0.8863851931746763, 0.7333705304976019, 0.7698930514311743, 0.7061129222388383, 0.7242395999612417, 0.7863930432959426, 0.758990985170014, 0.7249105902566384, 0.7831181848754244, 0.757183193680137, 0.14629967175844671, 0.15600376966347707, 0.14751885925934316, 0.12617184454189245, 0.14605693994477442, 0.11695336619795638, 0.14388929968859643, 0.1577916417884766, 0.16204429427533484, 0.10769654249600902, 0.12418431000449215, 0.13429826914932075, 0.12895383423634943, 0.10879050831772352, 0.14592194584705775, 0.14294385530788933, 0.12721731881306986, 0.14046437293920877, 0.9873688743370982, 0.9814716245799355, 0.9879502915419965, 0.9609871320099287, 0.9851533696055949, 0.9757720011713976, 0.9800682258421664, 0.9703775265235929, 0.981012016711912, 0.5496276102132005, 0.6318866315948142, 0.5879178231896964, 0.6034300023979207, 0.6766770420453869, 0.6060530856784427, 0.673749516561843, 0.6391137016468744, 0.62332057801855, 0.7708803515675196, 0.8292785222209916, 0.8182649360626422, 0.2828183797088447, 0.212625011014138, 0.7751112069325918, 0.870914942730593, 0.2287812338668418, 0.8767333206580649, 0.4651276351714265, 0.2067326865842204, 0.5446103690012507, 0.5988999985202432, 0.6117215345635163, 0.2940019886773847, 0.13033610295500564, 0.5004515532545261, 0.5656347476859926, 0.21766492368691814, 0.23692679441375286, 0.26920357790600047, 0.4673325513112492, 0.2416852315846324, 0.4546473261841858, 0.130932492960812, 0.3873798993799016, 0.4082227388830324, 0.20805331995229415, 0.0880204423199018, 0.28376390301344656, 0.332935558538781, 0.2570648059525772, 0.23676814366255605, 0.17982323996347327, 0.24570589903040696, 0.18905098247585161, 0.3470281647393707, 0.30790670432176037, 0.3315551751964647, 0.4638725147706284, 0.4093744170983036, 0.2950371158286801, 0.4988975324900916, 0.3744855360463757, 0.5239079704728726, 0.26667131418575984, 0.18737974261633483, 0.33949884325868385, 0.08044654125267225, 0.24979399943396396, 0.07844041309657024, 0.10206695313041836, 0.14911709130219275, 0.08301099284867575, 0.27129292241181713, 0.3501182244554901, 0.33747102299094434, 0.3777862573451537, 0.006578106782681559, 0.20516072699042887, 0.30258065982211224, 0.22290726490121238, 0.20904165044549539, 0.7474679199185599, 0.7419032843826839, 0.7163853309596513, 0.7790090905388853, 0.6857778438562614, 0.7498488488414521, 0.6648164810663966, 0.7172957571084968, 0.728751096686744, 0.16441817822577032, 0.13108851446533387, 0.11014661760583966, 0.10656636889528659, 0.10662547042169679, 0.1256956553229951, 0.10765948616786059, 0.1327683699949994, 0.14041230854972586, 0.17465046307983734, 0.28827923495583285, 0.494013339625637, 0.6709977942608588, 0.6686494285267837, 0.3266339129746023, 0.7049389105392324, 0.14845555098132568, 0.22277591245607986, 0.38482402185880704, 0.5740066300446165, 0.5460534753890217, 0.5042945342035945, 0.545841626277352, 0.40417332831047625, 0.4961737291170766, 0.5427186685679237, 0.6509580343367325, 0.33354529518691456, 0.4392098882444765, 0.3173022151514746, 0.41208670737620834, 0.24104450197107252, 0.2827151252487695, 0.429435094150732, 0.5615712811108233, 0.4251026915080448, 0.19472701314732865, 0.2188093249466313, 0.21581835675117078, 0.23484207928400525, 0.20198904808992124, 0.2072438407557079, 0.22036396028558292, 0.21224380192084813, 0.20461221101059357, 0.19774979247477042, 0.20615574614856724, 0.23425081769448186, 0.24314021506974293, 0.7502570277126555, 0.22085354673605984, 0.2204963433468593, 0.2471354184079081, 0.23308843746032426, 0.9175077610397236, 0.16452648388052948, 0.15427388032624512, 0.1726534007646474, 0.20151922616826823, 0.20140915696295725, 0.17383613798105413, 0.17626926908939589, 0.9179140444220492, 0.8615804953167749, 0.157106473693143, 0.8060380884217258, 0.8474747137669005, 0.21103625689519778, 0.8421513802761321, 0.10516542386632188, 0.16823290919466638, 0.8565659224796153, 0.18880062903854167, 0.17941292231138928, 0.1771507848909658, 0.18743396414774804, 0.17347907578931077, 0.19767984633710078, 0.17993025438103383, 0.1901927236528802, 0.18042619570912832, 0.12426481248210186, 0.0842919074666939, 0.08354296275788475, 0.08100257985041115, 0.08479206443681464, 0.08503811255355032, 0.07333183877746285, 0.0857093815612725, 0.0961913456093918]}, "mutation_prompt": null}
{"id": "3eea0e45-a606-43bc-8ff7-a2abe889ac7c", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            self.c2 *= 0.98  # Added dynamic behavior to c2\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget) ** 2  # Nonlinear dynamic factor\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.1] = np.random.uniform(-1, 1)  # Adjusted mutation probability\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1, self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhance adaptive control by incorporating nonlinear dynamic coefficients to improve balance between exploration and exploitation.", "configspace": "", "generation": 70, "fitness": 0.3715758968151177, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.29.", "error": "", "parent_id": "d7eddefc-f354-4184-93c9-036b6ad57790", "metadata": {"aucs": [0.8899409201709841, 0.9003060943509106, 0.9111058886820954, 0.9154500720066643, 0.901473257332341, 0.890984360060736, 0.878904661926576, 0.9086800342199652, 0.909663074609744, 0.7613247272583616, 0.7865638613934016, 0.08194603908071407, 0.7351216512743086, 0.807266972340802, 0.8157702718690902, 0.5915467618336576, 0.8016740272877354, 0.82839993703814, 0.18095098958204903, 0.3881389896315579, 0.1751222344327722, 0.73904670227699, 0.1544692322184945, 0.10827012780746392, 0.14608998242388294, 0.1492392697934285, 0.14241382891853627, 0.10359488164011543, 0.1241403384581401, 0.12378555274207514, 0.13017961807185896, 0.13860609173253102, 0.13150530848743724, 0.12243302076543494, 0.12073532356281924, 0.1794401521705813, 0.9871874245047494, 0.9805788928456786, 0.9861854062389028, 0.9549392225862001, 0.9851521002221869, 0.9757701507998451, 0.9764733933790948, 0.9743420333114369, 0.9790528722778041, 0.6745562970618788, 0.30223173940218995, 0.5147374560238298, 0.6569082798665465, 0.6758500416119146, 0.15272696065783242, 0.6103706720259822, 0.1379773321257297, 0.6218092181378296, 0.8948378749546962, 0.868726860333386, 0.22643443426908183, 0.2798625777533066, 0.19384547337946645, 0.2122639944831568, 0.2320868129522019, 0.8920090011187014, 0.8038460029214783, 0.23077370480709491, 0.13171661258677936, 0.23180945025020772, 0.14911468441423237, 0.18559816360118453, 0.1864947503905824, 0.20923444680538028, 0.2083407057896044, 0.2137581601582903, 0.2349911958783909, 0.1243959915011299, 0.35206837552205406, 0.1850500307585039, 0.18442773103972754, 0.1725857798114293, 0.22682918426803145, 0.12215143155179009, 0.6363422355554499, 0.07970363869529828, 0.09626540509655801, 0.2109212607202392, 0.06296459731943438, 0.23511397140726886, 0.04860979137132759, 0.21733417988787584, 0.11245381602064186, 0.18898785186305544, 0.3862683936064102, 0.21698947857806683, 0.3788034946709722, 0.34899946897307454, 0.3605186957234291, 0.07855294611109076, 0.29555958255156534, 0.29502863647416655, 0.42483272589914745, 0.13842731909675166, 0.014133242448869376, 0.15848099704537066, 0.10037652643135242, 0.09624809111384891, 0.10255655137529085, 0.10379936923051536, 0.1365145478161861, 0.0809754377338775, 0.2696072932330753, 0.23539765543540492, 0.22402851673221047, 0.06866579475614032, 0.006700324638352684, 0.39082215731062475, 0.15411465035354321, 0.05488185962686276, 0.09322153439451941, 0.7188702278786798, 0.7059442596355909, 0.7531045760237229, 0.7622814652187245, 0.7562375222061185, 0.7850091800311205, 0.7061213576765395, 0.6988453605544342, 0.6008218511226631, 0.14550039731262898, 0.1207136153926538, 0.0953638158265745, 0.17588275676690157, 0.1569270713117339, 0.13918141045449284, 0.15600846807413327, 0.1321993225898852, 0.13178992902605247, 0.2214149192084135, 0.23067470832328252, 0.23527756779530895, 0.1738197318205532, 0.6223405555675754, 0.17996973176388342, 0.20977975601019716, 0.15129355086282814, 0.19637216579114125, 0.5692212928950355, 0.4679919722989392, 0.4549746742724805, 0.5841120951140827, 0.5934638017480692, 0.40800255763439197, 0.5197340466666903, 0.428591999114866, 0.32805612057490074, 0.26026559682825456, 0.321070083171487, 0.4196694806422252, 0.4833067270740097, 0.24924363622621049, 0.36874816387149856, 0.44379873359003563, 0.4511706559980343, 0.24844337732837396, 0.2529476714196063, 0.23204019709459733, 0.2323915244540654, 0.2034331033817316, 0.20189790806242536, 0.2354717282647203, 0.24422954190717927, 0.2350888250630928, 0.24452888601486167, 0.2516739923590454, 0.23829318267306887, 0.2069843356145178, 0.7668894478174868, 0.24865269974855086, 0.18940022572105786, 0.5223190847517248, 0.7263758101029469, 0.1980591207881386, 0.9326265075113288, 0.17667966946375124, 0.15384648237830456, 0.17272142253100953, 0.2015234534069592, 0.8887432231614546, 0.16369613040243114, 0.17022598093835917, 0.9355412474827509, 0.9023621418004047, 0.1570761841568208, 0.8335220987587573, 0.8814580505767432, 0.21144851832021094, 0.9053221178610988, 0.10520252908918049, 0.1683607949799769, 0.8991808563636544, 0.18289629995201784, 0.17917538484475626, 0.1766263304090211, 0.1941406018359818, 0.1830679878996424, 0.22072080836462604, 0.18416017321581812, 0.18757256509270082, 0.1815642515534207, 0.10098703989691205, 0.0971878304827678, 0.08431409709091187, 0.09740663872085009, 0.09700585907066883, 0.09177339688176545, 0.0911078143040982, 0.09190454334640785, 0.08936788425583853]}, "mutation_prompt": null}
{"id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced gbest mutation with adaptive noise to improve exploration capabilities.", "configspace": "", "generation": 71, "fitness": 0.41169905913522276, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.28.", "error": "", "parent_id": "d7eddefc-f354-4184-93c9-036b6ad57790", "metadata": {"aucs": [0.8896311675764319, 0.878687932178325, 0.888346715612996, 0.8847237744170796, 0.8788334671595601, 0.8799923075113985, 0.8870585456529544, 0.8929133176794701, 0.891331697792969, 0.7213692296739878, 0.7874673671819176, 0.04555763958341319, 0.7021916201942432, 0.7493247294043663, 0.7612078395235782, 0.7258140079351267, 0.7702140224908643, 0.7694016854766047, 0.1558293712663843, 0.16952539907564024, 0.15500836212341385, 0.16760796221710295, 0.15369896446585385, 0.11650237222141646, 0.17028563329755075, 0.15512683708234742, 0.11755124859201116, 0.09576583039739273, 0.113237172198565, 0.11168285560466229, 0.15001901458080813, 0.09976984771674302, 0.12754985955812592, 0.13606520116448317, 0.12514748065946113, 0.13847225726167667, 0.9873688743370982, 0.9814716245799355, 0.9879502915419965, 0.9609871320099287, 0.9851533696055949, 0.9757720011713976, 0.980068160703781, 0.9703775265235929, 0.981012016711912, 0.5781253042945305, 0.6659958765746521, 0.6239612675060382, 0.6176015918070656, 0.692267722512819, 0.6682938104770191, 0.6701179903756327, 0.670259716027825, 0.6563928399996756, 0.823693665252568, 0.8232488493947172, 0.8266126509035223, 0.8807509796042303, 0.2051680331327701, 0.8318548744354233, 0.8639922159775346, 0.17492712821041545, 0.8691781935049312, 0.5465787869673562, 0.48572292624555347, 0.5397896621243721, 0.6200577017646595, 0.562181565213614, 0.5519915748468892, 0.13133453193656264, 0.1279426880836958, 0.5012045930144267, 0.2822574612706966, 0.326614070373236, 0.20008896557818412, 0.39190955301011676, 0.5221148425611646, 0.5581780033640265, 0.5239132774231019, 0.4247214150063684, 0.38686110480359326, 0.26663944584687205, 0.08640669429268177, 0.2903262022774926, 0.27145290307784276, 0.32900811310869227, 0.21600781300940497, 0.2915690782476037, 0.2719843177019725, 0.10068277041864182, 0.41247445726605414, 0.4295687925389102, 0.3485325829745901, 0.44363642821748694, 0.4491014037962192, 0.278471869523933, 0.3594201078822957, 0.4066683341211872, 0.5134279419100216, 0.14134222350906545, 0.1838862566270273, 0.2955305691922372, 0.07967671096796203, 0.2959996434018588, 0.12127956357165837, 0.1019501045120993, 0.15784238702130604, 0.07355138030918329, 0.29997348788165135, 0.19979869759468916, 0.3355120996662433, 0.34975986249218893, 0.2861347353254613, 0.3304953932426984, 0.29083869721365796, 0.27067986234094377, 0.2415866168402827, 0.722388788462094, 0.7892018382741354, 0.7572847799460596, 0.7065341142862516, 0.7072856235108596, 0.7002006734521614, 0.6994017361983709, 0.7902052453162502, 0.7138050019614609, 0.1537321863988167, 0.10593404142623453, 0.1404747294882338, 0.12908009329741488, 0.10681800822512255, 0.1293739071834964, 0.142466825123438, 0.1165591150589742, 0.11239227133461571, 0.17389419530134764, 0.6915229673385119, 0.24432077778912042, 0.3896593901085398, 0.24645956009761494, 0.3630284380736649, 0.5846247541100347, 0.17068533859014112, 0.17589394579533368, 0.52833048716608, 0.3977699549920035, 0.49959598862805354, 0.5914110117427204, 0.641897596428205, 0.31302053044729117, 0.5946852620653239, 0.6302176241958725, 0.6486691727103928, 0.4164058137261627, 0.4258652958073096, 0.36522736179974125, 0.3354863790538476, 0.24285704738859026, 0.28660379051680984, 0.44865969278209106, 0.5051606566029239, 0.4819449147878827, 0.2333994591072227, 0.2076387691417675, 0.21670295278372265, 0.19283826568240325, 0.20796153793231564, 0.22855815711486138, 0.2293201094756988, 0.24273074755865864, 0.20544494901222277, 0.22026388866955027, 0.21462197296833152, 0.19768987768565682, 0.22026182823840124, 0.7849660315506785, 0.21585345057114214, 0.2010971468581484, 0.2206360299048924, 0.19535874844911016, 0.9187820180107786, 0.16453142489583783, 0.15428758697621303, 0.17265606183385385, 0.2015384980127246, 0.20141111429635883, 0.1738370540940667, 0.1762772187262952, 0.9145057758093598, 0.8664277741440173, 0.15715936839286881, 0.7870064935265029, 0.843778131896702, 0.21104965867375236, 0.8560542446417451, 0.10516003824402831, 0.16823963165518796, 0.865285149273201, 0.18984298743313888, 0.19656303629086247, 0.17205547853816516, 0.19469358159816486, 0.17837677513902672, 0.19066441698071046, 0.19526264417073158, 0.17790747237485882, 0.18892165813130868, 0.12958500509655735, 0.09245589031319268, 0.08334483634617262, 0.08200291819963645, 0.09271629857723873, 0.0827531791236299, 0.09270644524636096, 0.08713844422892325, 0.08944089740628824]}, "mutation_prompt": null}
{"id": "fb0c4478-e513-4fce-867a-46122badbe8b", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.97  # Slightly more aggressive decay rate\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= np.clip(0.9 + 0.1 * np.std(fitness) / np.max(fitness), 0.9, 1.1)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.2] = np.random.uniform(-1, 1)  # Increased randomization\n\n            if np.random.rand() < 0.1:  # Increased probability of perturbing gbest\n                gbest_pos += np.random.normal(0, 0.05 * (1 - evals / self.budget), self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.98, 0.5, 0.9)  # Adjusted dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Hybrid Particle Swarm and Differential Evolution with enhanced adaptive leadership and mutation strategies.", "configspace": "", "generation": 72, "fitness": 0.3803805610826573, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.28.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.883255497960454, 0.8931611778466496, 0.8802371271594188, 0.8825290358943008, 0.8965630135584488, 0.8690249397105321, 0.8882456441433059, 0.9024362732831595, 0.8791646933997317, 0.7026099330984703, 0.6992122337754115, 0.6952721892176728, 0.7177022852419322, 0.7532386736484369, 0.6932424686163012, 0.7279262978391748, 0.7659341970286981, 0.7115611420875856, 0.13625825511876388, 0.14239544621947042, 0.15729276821323235, 0.11778376516332778, 0.07214153833164472, 0.16509160935421607, 0.12378068009958154, 0.15536086693256856, 0.11297802914060251, 0.11919540915431626, 0.13121203963968087, 0.11508357171588723, 0.13179985272606687, 0.1330490776568397, 0.1098562537351585, 0.12855608663986096, 0.11464266079323937, 0.13516317828964197, 0.9873686832190949, 0.9806175944990279, 0.9879452764449599, 0.9610078458222956, 0.9851494992593963, 0.9757396248551791, 0.980081528593407, 0.9752628595344315, 0.980988231082214, 0.6886064646513336, 0.1738721249261671, 0.6040355469237472, 0.666884876101727, 0.650911986079064, 0.6028769875433415, 0.7085801715929119, 0.6667641324810893, 0.6519020442889408, 0.3978436820979312, 0.8021418271776068, 0.847600928830855, 0.28074450626435965, 0.2768494025162056, 0.21275642542291295, 0.8988120137852051, 0.13264707539589726, 0.8012847827641956, 0.4377559874414948, 0.19369698830035564, 0.2631327579439444, 0.47110900065291184, 0.4375157359661159, 0.3303412208019826, 0.13056923700905787, 0.1287367273008735, 0.13522253657764394, 0.5864424914200088, 0.12958448370804976, 0.3291476857747918, 0.6238050235370517, 0.4092701421337017, 0.36340319480903427, 0.22154640759048505, 0.1338121750128547, 0.38768603859273554, 0.3485555623122276, 0.16019370008568568, 0.13033042797014427, 0.17395876916316555, 0.17342570275007763, 0.20505817364898793, 0.18803337669594233, 0.25342615031953786, 0.1359233333703196, 0.40318324145177453, 0.5085455300436231, 0.3806058690816456, 0.3987064534101139, 0.36409168459143737, 0.2657920495731739, 0.42692086215905456, 0.3377717612297785, 0.5009158769548641, 0.10090271214703406, 0.10139757047862963, 0.17655205685488096, 0.08041077196729496, 0.29593204668651696, 0.07954379559532332, 0.10492608936077197, 0.07655827923420144, 0.07763829292786573, 0.33183525660179636, 0.22895142427604176, 0.27767718866994495, 0.2637543466658553, 0.34358389635166264, 0.2654846300854895, 0.26248858987125934, 0.0580678738040471, 0.08424231606105026, 0.7096578658976662, 0.7928405434332235, 0.7188352695682625, 0.8127353045029311, 0.7486001283104831, 0.761635108895133, 0.6992439058914652, 0.7854264413422669, 0.7136656777209414, 0.13935654894131388, 0.09649263579123035, 0.09040288255810758, 0.14998962180919784, 0.1046840250346428, 0.12871829273533453, 0.08828930357096465, 0.11709874301078527, 0.13307391212152886, 0.17523972379174124, 0.2374875608594309, 0.2661007401616977, 0.5658591659927261, 0.30131374554195467, 0.378708893980641, 0.2000361632220521, 0.17627560292887445, 0.2014589140814792, 0.44826962182220664, 0.589194167879657, 0.4689567938415732, 0.5700907657148826, 0.5431198710528582, 0.5024033126749587, 0.29917569364442564, 0.2920683518284676, 0.6080712856808113, 0.456794354590362, 0.24229020587136652, 0.4118238821809055, 0.33346683478670747, 0.4039312600835979, 0.4424036381254125, 0.4951816520488883, 0.28206028650372095, 0.3800895203636989, 0.2119341619984566, 0.2587780475865601, 0.21103900957928723, 0.19455020629087305, 0.215957353351389, 0.1994273179201711, 0.21648031454425032, 0.20436128964464495, 0.2098373186410788, 0.19246490047454223, 0.18868704214887477, 0.2234873433623128, 0.7761844347632845, 0.22906633698288037, 0.22409824068125295, 0.728297667822071, 0.20998855686492912, 0.23580891203609378, 0.943764044501535, 0.17687542219166863, 0.15424839219625264, 0.17277941633994653, 0.20145995539826023, 0.20115253336829708, 0.1652049647977758, 0.17022897074552512, 0.9163578984820968, 0.8773334453101119, 0.15704312032535395, 0.8161004210626188, 0.20973006257287263, 0.2102869595229303, 0.8736585193371083, 0.10518055163267015, 0.1678723074170344, 0.21154756200790137, 0.18685692468582527, 0.183741866601129, 0.18776456312629086, 0.17293840356818058, 0.19046148241063188, 0.17581398491077238, 0.1786136751982763, 0.18196870234094342, 0.1961978926569986, 0.14794225653760584, 0.09862206220083536, 0.10414284296041931, 0.09477987432448576, 0.08776790596027972, 0.08756750054644102, 0.08237749328708799, 0.09343771461903505, 0.08691729401364667]}, "mutation_prompt": null}
{"id": "7648e592-2bad-4c27-96b7-5986447b99b9", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            self.w = 0.4 + 0.5 * (1 - evals / self.budget)  # Changed line\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced adaptive inertia weight for improved convergence speed and diversity control.", "configspace": "", "generation": 73, "fitness": 0.35198551724495875, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.7353949023216233, 0.7651554551544026, 0.7108005470839853, 0.7623679433189143, 0.74696539646668, 0.7398537619726798, 0.7483596560833301, 0.7735704618004465, 0.7448919821849985, 0.586410635330606, 0.5757488228308203, 0.5170772266048418, 0.5731612656459959, 0.5741621429492317, 0.5366069743344104, 0.5591836417927094, 0.589520196011309, 0.5301162606071197, 0.10147169115598276, 0.13114465750440396, 0.10191635339022598, 0.10716875085620536, 0.11894782791444614, 0.1114950296696341, 0.10830173928589426, 0.15163409893068602, 0.10516139633154542, 0.11285737456458833, 0.09468475408768373, 0.11128223166792506, 0.10787489592984911, 0.09568874230914748, 0.0911671373971703, 0.1127206757988084, 0.09511830700002433, 0.0986306378617714, 0.9867336569555663, 0.9862238998248939, 0.9869306801050952, 0.9642589832245935, 0.9845519277511637, 0.9803396623074506, 0.9865206824193268, 0.981143881667087, 0.9860789942330118, 0.48958845729510125, 0.45092618329176304, 0.4683505032326629, 0.5157935102151201, 0.5353688913920935, 0.4816362426588977, 0.4823546630472729, 0.47709916699357136, 0.4382145674441432, 0.7129145084914599, 0.7108922968909032, 0.7056893586630573, 0.7111069182802096, 0.6742193298217147, 0.7279902559904705, 0.6747174482991498, 0.6727815584892749, 0.6814645204397909, 0.39081236482410675, 0.3259990749016233, 0.35058309796310483, 0.36732394111822975, 0.29241390917054333, 0.19361634191232158, 0.30675483197519926, 0.3095333287357991, 0.33779266789332396, 0.28699193394769007, 0.11209632591338303, 0.2492252383043725, 0.3763629914963995, 0.3005238340931681, 0.34036022795129406, 0.24894050772685195, 0.2888534266282107, 0.30702885035582694, 0.27565606331720205, 0.25464428673543293, 0.2163585717413209, 0.0560618828974786, 0.29122933711688614, 0.1824101545375666, 0.2524086878679125, 0.26010103375236515, 0.23668135283184188, 0.3828460597618367, 0.30892895527512154, 0.41201760826596356, 0.23914210249416767, 0.29334046043375506, 0.3252813000437871, 0.39165906639240033, 0.46055843952517506, 0.4183042251055026, 0.0766845329323752, 0.08392174788728846, 0.0633589384489045, 0.07770850458098799, 0.0976752997749536, 0.1362221582938561, 0.08125593545401955, 0.15915738276018998, 0.0772210461713081, 0.25564878799801805, 0.23394230626681867, 0.25964148278942945, 0.25233440097667514, 0.2344085710756192, 0.23650715671022116, 0.2558431388391309, 0.21724418510267773, 0.2072566318380572, 0.6164910918064392, 0.6041441373581077, 0.5906111951208203, 0.6481733903247675, 0.6484419144100079, 0.5828322961281883, 0.5604493424091629, 0.5639925115953177, 0.5892988629556908, 0.09352800112955406, 0.08889241840270878, 0.14585117169864592, 0.11169309475560385, 0.1003733122717897, 0.11711648146756548, 0.1037955891422283, 0.10947761868109795, 0.10479331941186665, 0.16662506350233708, 0.19739059487051658, 0.2072053577030667, 0.14387157762497205, 0.23203582515124344, 0.1550798334854826, 0.19424397030777252, 0.17652013127195387, 0.20982614613935968, 0.429754211000812, 0.46651999583460624, 0.44336142773715326, 0.4148488238766188, 0.3765961131653992, 0.43040425177547736, 0.4408942200210054, 0.4517210341966883, 0.42216873586167747, 0.3574989413296539, 0.3008385001386975, 0.34504998409614007, 0.31479172307986913, 0.23912858950804994, 0.33131690096998423, 0.3753899628350089, 0.4230564195464199, 0.3657062530725743, 0.21614522173077966, 0.19929311661956595, 0.19716958946840246, 0.19353883245525516, 0.19351300407396466, 0.18066048437398619, 0.21066086188619226, 0.1986877698993974, 0.20075075985267665, 0.4544558383706092, 0.19427166680080754, 0.3631426403506831, 0.21848139402053135, 0.34409091816056225, 0.20602446927845974, 0.1901726653050757, 0.18729977873526127, 0.43135645534278044, 0.832276314372272, 0.7520406992488442, 0.15230405021796467, 0.7913071319672932, 0.1977585320455182, 0.7668573338157999, 0.12075249931000709, 0.16891478224275747, 0.20633854770885451, 0.7612024255640548, 0.16853156453253082, 0.19503325976796504, 0.20515603001545069, 0.20365989278743413, 0.708981491184973, 0.21025796486098758, 0.7344278589064852, 0.20742621531733407, 0.1916221104577226, 0.1959491271811531, 0.17630241485834908, 0.19196820578313023, 0.19548593939812575, 0.20223931505255255, 0.1857645777461746, 0.1836651380534724, 0.20116268711356633, 0.0859360243388888, 0.07845924233245372, 0.07922681547895427, 0.07719605453374612, 0.08166404554824891, 0.08531521293904976, 0.08571538719882388, 0.07582967994630074, 0.07124833470410263]}, "mutation_prompt": null}
{"id": "dd27952e-0fd0-4615-9700-3eef1857c324", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w = 0.4 + 0.5 * (1 - evals / self.budget)  # Adaptive inertia weight\n            self.c1 *= 0.98\n            self.c2 = 1.5 + 1.0 * (evals / self.budget)  # Adaptive c2\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce adaptive c2 and variable inertia weight for improved convergence rates.", "configspace": "", "generation": 74, "fitness": 0.3428582064562121, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.25.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.7244091229359171, 0.7468695781966258, 0.7326533894008747, 0.7372321142688646, 0.7348974160671593, 0.7286103716353591, 0.7574380271868137, 0.760990711120474, 0.7594003634810911, 0.5341411359596855, 0.5702788588725642, 0.5162806946496519, 0.5521607009323588, 0.5960528740346649, 0.5391652135245495, 0.5825021261180457, 0.5699871429527839, 0.5038353872579175, 0.11832012700843975, 0.11026170573537297, 0.14425535480380258, 0.11409820775277457, 0.12565234224219024, 0.11620215741464668, 0.12756755088894078, 0.10477503950131617, 0.1300442847048502, 0.10649464860471602, 0.10050883373793817, 0.10139774559204251, 0.11321543943103896, 0.11474322912746471, 0.09167510578006677, 0.08786388411488366, 0.09303526211330204, 0.09614034207045274, 0.9867222043189097, 0.9862220428182905, 0.9869374448988126, 0.9642550011114829, 0.984554271690037, 0.9803407596778955, 0.9865221312795862, 0.9812492759748738, 0.9860849170253372, 0.4446919290006983, 0.4165176487590283, 0.4391195633381041, 0.4195590139339933, 0.4889393588889851, 0.4207585070571891, 0.41129016095170323, 0.4786133368407858, 0.4085060502223671, 0.685878146594582, 0.672543091439407, 0.6908528420476494, 0.7216224197049894, 0.6959628940818705, 0.7238949899183982, 0.7080205085765561, 0.6914363809624112, 0.676331143202041, 0.2551903959056737, 0.27381537260341837, 0.24152748961484893, 0.3440620523458384, 0.26005619910191125, 0.25875169419295263, 0.23502623850438398, 0.1061606415625247, 0.27003644116098513, 0.2637730936689764, 0.1150188366020427, 0.23744584894219878, 0.32473419504912093, 0.2778015780737991, 0.3013619258246124, 0.27184835381332073, 0.2930489699692096, 0.2535263012659289, 0.2807185969855791, 0.30114848312219167, 0.2521792333760109, 0.07646031066168923, 0.26260157103860704, 0.111959409052387, 0.12006743962279165, 0.1612468708089536, 0.2667467053191803, 0.4630352305518367, 0.41361281827727103, 0.326763922777626, 0.4106835438327635, 0.3363046811384396, 0.30678464273900974, 0.29133721002768065, 0.4513597694628777, 0.4563362648899819, 0.14845108162419474, 0.05751888592766807, 0.06500106456669963, 0.11668775658813924, 0.18073491023699584, 0.0709438725309961, 0.10241508332537119, 0.10932153729900584, 0.09822738798621844, 0.21980829802521284, 0.23106514056114724, 0.23432047379342602, 0.25632246617605836, 0.2805617711815388, 0.1951575126287518, 0.2594929822013442, 0.2484948187178545, 0.23781547702902772, 0.5970981788750394, 0.6555086324644157, 0.5857774102887106, 0.5535058688465018, 0.6394564844652963, 0.5359612932622856, 0.5677542420131878, 0.6394708611698072, 0.5979805576740429, 0.10266541835644183, 0.12150465749404304, 0.10600542406742974, 0.09956580187761488, 0.09242099453479591, 0.11140380145310991, 0.09656639846691906, 0.11831036709661769, 0.12041497416440472, 0.18124902569409762, 0.14382007561183707, 0.15826251740279618, 0.1582377148293319, 0.20241704322792953, 0.15160659885616112, 0.1731575499089162, 0.17154885791054586, 0.2408629848041579, 0.388854215593877, 0.4272721336900044, 0.40324677626756134, 0.398930404787182, 0.39267765128652077, 0.40538936397491454, 0.402717804166804, 0.4119749245522526, 0.4277226460738335, 0.2998184797407968, 0.31257768639044503, 0.31189750001822025, 0.29586838342485944, 0.2800431943243339, 0.2996738428490685, 0.2973359562334099, 0.362202136949632, 0.37499656479599264, 0.20432368965091008, 0.21184904339471455, 0.17857721679832594, 0.18152213152333518, 0.1872119038029335, 0.20031696362418616, 0.18459591649423113, 0.196172154841168, 0.21183784443039133, 0.20157086335222407, 0.21534437009227503, 0.18930617454427767, 0.45532116904172615, 0.2052655147722735, 0.1908263710960979, 0.1967358651149057, 0.19334089794378828, 0.2085029097548018, 0.8111916648318094, 0.16245155878459516, 0.15348869871409865, 0.8028215437955215, 0.692638080186085, 0.7525645132224348, 0.12020188093550588, 0.16886073720883976, 0.20811451210263587, 0.7932420959492704, 0.16852194609045468, 0.6628668464002094, 0.20534211829984395, 0.20256721726619809, 0.7546980080160635, 0.20623329623718045, 0.6854907306108573, 0.20584656990898043, 0.18361772313333125, 0.1844855673999225, 0.17426723328087523, 0.18461429104971028, 0.1825023086095473, 0.17761584411888487, 0.20374992635021216, 0.17585878279427125, 0.19367014740131294, 0.08903885660256461, 0.08579760236687073, 0.07283710945616362, 0.07923187731736048, 0.07154826595490937, 0.09087865192495992, 0.08200955117368991, 0.08926806962050837, 0.08542899139553406]}, "mutation_prompt": null}
{"id": "91763410-c39a-401e-bd55-983f02252f05", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        chaotic_map = np.random.rand() * 0.4 + 0.6  # Initialize chaotic map\n\n        while evals < self.budget:\n            chaotic_map = 4 * chaotic_map * (1 - chaotic_map)  # Logistic map update\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget) * chaotic_map  # Chaotic factor applied\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhances exploration by introducing chaotic maps for parameter tuning and diversity.", "configspace": "", "generation": 75, "fitness": 0.34705872887919953, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.8962876450860119, 0.9044239831493738, 0.9135862865973673, 0.900748505968334, 0.8922652413705466, 0.9098526617206834, 0.9103565531151777, 0.9063308588286659, 0.9106422578473949, 0.7277972842211711, 0.7670147111911204, 0.8149168256327725, 0.7674899674615259, 0.8017817962887521, 0.8009109197578248, 0.787438613448926, 0.8120726718046827, 0.7693571517330244, 0.17302557890546455, 0.14143620184957761, 0.11917946037200922, 0.1526923985012938, 0.12152332882800676, 0.17884603680296574, 0.09353249937629393, 0.14000100281215289, 0.14157108748753322, 0.08464970367848346, 0.11469472450783091, 0.15482455806121775, 0.1746237689077771, 0.0981193269022822, 0.15500443054690405, 0.09196083239070174, 0.07705965382114333, 0.10909100060223409, 0.9758102260261878, 0.9862012901446471, 0.9806888575442352, 0.9512320054150474, 0.9671163236059848, 0.9687177226937214, 0.9789883940305814, 0.9704948902630919, 0.981155027356424, 0.7485789679969359, 0.7519302987284966, 0.7204655689415534, 0.6300086072831804, 0.671691594072648, 0.20553298418495358, 0.3080824036417176, 0.6982857659893901, 0.752011634966366, 0.23048540591809896, 0.22665287001050882, 0.8938950972300397, 0.89672514437206, 0.38388017613757197, 0.27667422391195107, 0.22131747028303417, 0.22240052188233628, 0.8861837409337519, 0.13426743114630513, 0.44724243443062206, 0.13162251131927738, 0.20380700695804332, 0.2502221781623918, 0.21166389280628106, 0.2434862925125566, 0.17208791966862647, 0.18224371662374506, 0.20078361184594828, 0.23873664788054572, 0.23415878661261624, 0.32897186781786436, 0.44067593509518777, 0.24176322252070326, 0.3120939465325834, 0.16034534238319542, 0.22527208210219773, 0.08761986941303201, 0.09777429930529646, 0.09300163917116355, 0.07809971947032612, 0.03139174533365818, 0.03355816358289232, 0.06632997258047613, 0.04462794346541976, 0.23398298569401332, 0.1624165664489281, 0.13258515956471906, 0.09044397147269556, 0.2540701475006657, 0.19324404979030751, 0.10451614490929428, 0.1667859818810724, 0.31331348997342023, 0.14816005025089507, 0.05152548009622149, 0.045000447899653184, 0.09364767266170071, 0.0803594971061139, 0.20812146051370928, 0.09545491004596773, 0.2708586085323794, 0.07414731837520905, 0.1071071364713454, 0.1783452373542579, 0.222234754649828, 0.3459685840864274, 0.1473612101500843, 0.12618383941876798, 0.2587604661190025, 0.2603252670149938, 0.0574097568274079, 0.11337104024429878, 0.6253880133205703, 0.6005289589003213, 0.5829493527188173, 0.627969535316127, 0.5886635872823511, 0.6033684790284963, 0.6114148389669426, 0.6508593274612894, 0.5885545131424519, 0.0699323736177434, 0.08034808360382162, 0.17624877424187502, 0.07615780898787994, 0.1011508715191014, 0.15743303270659548, 0.08586728560039902, 0.12068503199386671, 0.18660314373819553, 0.2809921963396117, 0.32722870908183166, 0.34409771345646245, 0.19465893785032118, 0.31592856515834866, 0.5155100300201663, 0.20188879781620195, 0.1924808422769233, 0.22133788019701706, 0.3972148089082037, 0.5292797108539717, 0.4646336095957576, 0.5174010336397459, 0.5142352138361981, 0.40651771365734657, 0.525538983696518, 0.4746840251498379, 0.4676684812989026, 0.29373732504625827, 0.27310977558913163, 0.28748111881385774, 0.37654128477022153, 0.22709449374036017, 0.33313854528802367, 0.3645045170911654, 0.298168714969376, 0.39283090877140026, 0.23413661252274764, 0.20556293716745766, 0.20934240062586562, 0.24352654666198847, 0.2127247957036763, 0.20691037219465247, 0.23149552005108254, 0.2424906505532729, 0.2339698125739773, 0.2543692870221139, 0.22291204204471393, 0.20743918325548893, 0.20052614714729466, 0.22373239737904438, 0.2231357512403357, 0.18285577004369102, 0.24991669418693596, 0.1973302652445985, 0.9391364648276538, 0.1870413703008751, 0.15421291602273945, 0.173017391951092, 0.20068812347764953, 0.1996873685513787, 0.09964002474283917, 0.1700490375588819, 0.930764112479892, 0.8409388770384318, 0.15694925988516695, 0.7153705880026963, 0.21303349808086536, 0.16908020411503544, 0.2130286454067959, 0.10550153255824646, 0.10501544934519502, 0.856468581509647, 0.24312159047600068, 0.18787606155955905, 0.20424728893711974, 0.20841388438934882, 0.19108187541978938, 0.20482619487100595, 0.2544988382849138, 0.22924551108123714, 0.20211636446960468, 0.09745544982833543, 0.09580647641565154, 0.10915891175239267, 0.10630363820607269, 0.10277769736157427, 0.10287514096608197, 0.12757448637251312, 0.09515923283370498, 0.09025305721208154]}, "mutation_prompt": null}
{"id": "a0be2cbd-6d72-4da0-90e2-b6e5fa230830", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 = 1.5 * (1 - evals / self.budget)  # Adaptive personal learning coefficient\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            self.w = 0.5 + 0.3 * np.cos(np.pi * evals / self.budget)  # Non-linear inertia weight decay\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce a non-linear inertia weight decay and adaptive personal learning coefficient for enhanced convergence.", "configspace": "", "generation": 76, "fitness": 0.3610995169129524, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.7734507130159404, 0.7857493502199437, 0.7517675494577196, 0.7696112610659749, 0.7707142762584367, 0.7533376018276061, 0.7487197100140088, 0.7518623977135939, 0.7589619144550134, 0.5999708248139237, 0.6225650080013359, 0.6007490011256653, 0.595991786595471, 0.6336414668415208, 0.5892365223606312, 0.6118384490338172, 0.6261560703075817, 0.5791322195368277, 0.10810044320842449, 0.12501529138510104, 0.15107588184932796, 0.1262112907695997, 0.11436787136586624, 0.11106022184972242, 0.14292059357065023, 0.419828916965017, 0.09623913108291526, 0.11158072465073365, 0.11126477793497802, 0.0888860611218486, 0.13724843325346625, 0.10421654412277315, 0.1114977790927193, 0.09699720685411561, 0.11595247682984922, 0.11174791189187105, 0.9873720664128668, 0.9862120301872216, 0.9883105699529192, 0.9271132623407042, 0.9846300971320762, 0.977069924580971, 0.9846609990674595, 0.9778921983285488, 0.9854873319194402, 0.5031684669763603, 0.48366781193517683, 0.5261149509497018, 0.57612223963936, 0.5390571430554612, 0.5077977871895467, 0.5520078142946496, 0.5555124925993159, 0.5574945256769942, 0.7045850846577382, 0.7157355148434952, 0.6895672360936789, 0.7650562869924769, 0.7150889386250634, 0.748321186429862, 0.7470294071508867, 0.7063424754430219, 0.7438895783453052, 0.3633206783523205, 0.30655719995643915, 0.311687387266689, 0.2625962810170688, 0.33829437319931344, 0.22469099032519846, 0.3072992345724824, 0.37704996122922907, 0.3470981617408597, 0.23726189331141234, 0.10536266615592771, 0.2759686320552882, 0.29461556185803106, 0.46631648149366656, 0.3806827266601114, 0.31507633607621854, 0.10115886015509801, 0.22307007912514043, 0.2764605020654195, 0.1895571468383952, 0.08318492850001513, 0.04587299593432692, 0.12490359789765282, 0.12060216662203771, 0.18449630688727714, 0.26167013406997053, 0.3034371200125563, 0.3081014537090654, 0.45645520293177944, 0.43818974216712814, 0.3556273466157368, 0.39337996665431796, 0.4648264486458191, 0.38239548158611203, 0.4483187554370609, 0.32220214829526217, 0.0826874361411285, 0.028596850976093657, 0.095002859367879, 0.090305542378747, 0.16093933075503541, 0.08242786967654558, 0.09151852752750855, 0.12191462755266258, 0.13927583666272836, 0.2790490079729002, 0.25884619509190965, 0.25966968732147855, 0.21288986216021644, 0.2578270998649387, 0.2554399527750746, 0.22625254081583013, 0.05315615098931048, 0.24375142794265714, 0.5724525885687617, 0.6253564921481607, 0.6497393247753964, 0.6910728515014846, 0.6038573330930131, 0.6198586523644962, 0.6829983393604049, 0.5571822852283366, 0.5995212789672346, 0.14799057634391066, 0.11757659877244186, 0.1043255621224376, 0.10480358623114083, 0.10521254659380608, 0.12301882323357916, 0.10499904691594075, 0.10972385613760727, 0.09856288748660502, 0.15599535441130263, 0.1821633285168336, 0.15205521721280912, 0.4594748868617208, 0.2086793843770034, 0.2556981564174804, 0.2156076402894741, 0.15017896777410078, 0.19494828636003014, 0.4401560196580866, 0.431757505025095, 0.4596423424354972, 0.4160731416293998, 0.49681887984298423, 0.45599806502662266, 0.4635290029706355, 0.5034688470303154, 0.43381305483479515, 0.37318370192364503, 0.3126406853261505, 0.2904819043047845, 0.3091808452077337, 0.33924792146590976, 0.3652940766370043, 0.389968074677447, 0.3812145218244638, 0.2683580543995363, 0.19405602135965316, 0.20294809104631784, 0.20269323572194775, 0.19732671558884562, 0.2047681377013011, 0.1814641185055038, 0.2008831975286708, 0.18361147037693804, 0.22315738470389568, 0.19411339137566241, 0.18157789605148533, 0.33384374899147395, 0.21287608973200656, 0.18719908942270758, 0.5165540134930955, 0.20260542691611583, 0.3582893552830101, 0.222794117424148, 0.7520049737691794, 0.18198289073370244, 0.15415753543770438, 0.17190200045349024, 0.19985768331804143, 0.1995321742613143, 0.15554024037974923, 0.16929540034485113, 0.819703248047565, 0.8221123131657386, 0.16651286923831154, 0.7619132552549592, 0.7164899827057432, 0.20013951526892415, 0.8010341689039541, 0.20785073431641254, 0.2034105339461577, 0.7982354428716247, 0.17127349170945494, 0.17846501407381943, 0.1761088236174273, 0.186405976441664, 0.19322350182262094, 0.1760558572016907, 0.1924658083079558, 0.19140307639526244, 0.2051461640396136, 0.0911245786143896, 0.07980168961844214, 0.08012238685733486, 0.08498243011007178, 0.07681398654508065, 0.08477730335428246, 0.07676928497806534, 0.08121032403234107, 0.08471413889501767]}, "mutation_prompt": null}
{"id": "83581b6a-cfdf-41fa-9f83-2542cb39d679", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.1 * np.std(fitness) / np.max(fitness)  # Changed line\n            if np.std(fitness) < 1e-3:  # Changed line\n                vel[np.random.rand(self.pop_size, self.dim) < 0.2] = np.random.uniform(-1, 1)  # Changed line\n\n            if np.random.rand() < 0.1:  # Changed line\n                gbest_pos += np.random.normal(0, 0.2 * (1 - evals / self.budget), self.dim)  # Changed line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.95, 0.4, 0.8)  # Changed line\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved convergence with stochastic adaptive learning rate and enhanced diversity mechanism.", "configspace": "", "generation": 77, "fitness": 0.3779491745466984, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.27.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.8639921457534782, 0.8628167169796052, 0.8573226118122605, 0.8693191402541691, 0.8689068693548032, 0.8556663335005041, 0.8429059199000024, 0.8538301250203336, 0.8594235078044257, 0.6263801503866628, 0.7168053082408384, 0.6359572038857291, 0.6669215347782844, 0.7098213865810472, 0.7076743295592534, 0.6815379455257644, 0.6781819671113802, 0.6496229060592236, 0.13242679444232253, 0.13968287642185717, 0.143484265151528, 0.1317366244659841, 0.14720419170369192, 0.1628052351279482, 0.11335761286387802, 0.15210835254154154, 0.11123508452970887, 0.1224758274658414, 0.10033375575376557, 0.11115275644044709, 0.10499304119066677, 0.14035144292081347, 0.16999652420465827, 0.1194667558198591, 0.08842068568576011, 0.12241283405389913, 0.9873689426559074, 0.9814801062757476, 0.9879528997845665, 0.9598486216896874, 0.9851535207561852, 0.9757725384015045, 0.9800724116308673, 0.9707607447414166, 0.9810147566839151, 0.5620719223997288, 0.3609953404631546, 0.640709100988625, 0.612081017204657, 0.6381329998522755, 0.5436549590490252, 0.6089999034561199, 0.5116827755894855, 0.5779124521262242, 0.8131528829611221, 0.7635081256306226, 0.8250325573096784, 0.8362882444370805, 0.8491135573602222, 0.21320154956193393, 0.23590576546747621, 0.17544273135443855, 0.7800051440890184, 0.3725561752106682, 0.4507617968515166, 0.24897381609948965, 0.3694897339429911, 0.3235025989396434, 0.22764760479134794, 0.21770959170312199, 0.12674558812194558, 0.3222580085972008, 0.24126138149425347, 0.3261118187120645, 0.2087989154431571, 0.4894632099020916, 0.27247128719570524, 0.36393107461618024, 0.12783256950518973, 0.1567670422528834, 0.3820018847083789, 0.275399129960491, 0.18762750461927213, 0.011543996399467127, 0.09422107551655823, 0.19893961154148065, 0.15310020100582, 0.14024793160295068, 0.3140627235370185, 0.14955544459141734, 0.5231068652766591, 0.3705763666057603, 0.4001486871122458, 0.35916501537912393, 0.37178494311484156, 0.3426282567929061, 0.40818684204646083, 0.4152584465475486, 0.34600401001222514, 0.14344237827744055, 0.14259221640399378, 0.15062827442269477, 0.0876473547078227, 0.24919364323813675, 0.101541483031522, 0.09863422390735499, 0.09224459265868923, 0.08644933558521539, 0.3010656670277879, 0.31346070245598134, 0.264941819054074, 0.2954618389641689, 0.28140094753680567, 0.22058501197857971, 0.11903583291681186, 0.057547480859795774, 0.12207660854979263, 0.643716559372933, 0.7101642303327382, 0.6797176096941693, 0.6240586711105867, 0.681495189238899, 0.7336114377767433, 0.7485839616930616, 0.6212364715220726, 0.6699977919922895, 0.12701494131732693, 0.12448733737412854, 0.10019935413136882, 0.14641700407084446, 0.1311116214435668, 0.1695237946620609, 0.12241773238852005, 0.09911742818582026, 0.13740727868525537, 0.33003033917111935, 0.2732047966273732, 0.20693396137032782, 0.3959170521114389, 0.2247910853198425, 0.322895322674567, 0.6561780471906719, 0.14283898591223587, 0.1920553596111858, 0.5320481855635004, 0.27769969260778593, 0.4881319087281547, 0.5390834325632645, 0.52917510210886, 0.45404253968218733, 0.5089162737720145, 0.48419142003372906, 0.4858203577917254, 0.32048241551956447, 0.45362547168681444, 0.3017808597214492, 0.4019322915544633, 0.32910885232581666, 0.26078853993025664, 0.4130868044705477, 0.4162224883114939, 0.4771983729408539, 0.21879585334768314, 0.2106805825342628, 0.212229960087157, 0.2040156593911019, 0.23363963884431516, 0.23101433345438405, 0.2224607792500043, 0.19951629461004428, 0.2291797416391973, 0.19501724831835532, 0.2089075948539546, 0.234679204889661, 0.24915112351429303, 0.2489990449730669, 0.21891284479398077, 0.23757578446739214, 0.22715648172601666, 0.20234856119875044, 0.9082716032325863, 0.17625533552985384, 0.1540024430848853, 0.8973979693598053, 0.2014451490054412, 0.20137086310115815, 0.13067448083593902, 0.1696093489210342, 0.9166333966384115, 0.8611670853408087, 0.15708155540607094, 0.8044961272728154, 0.8162017307517286, 0.21094550850658456, 0.8771213271648797, 0.10518158764420948, 0.1684670724496944, 0.8556512461038915, 0.1841679108912555, 0.1832068571443899, 0.18467697173915398, 0.1772135485888151, 0.18359931291175258, 0.1891819025320225, 0.1886053967567657, 0.19483198958629466, 0.1870919669361525, 0.09634641603628769, 0.09137174381220337, 0.08822874465441288, 0.08392937535568401, 0.08325384806444724, 0.08825173845166079, 0.08307528040915801, 0.08842907736338312, 0.0810097877766135]}, "mutation_prompt": null}
{"id": "2ec2a56d-9c71-4f0a-81af-3d3c8be14c59", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n            # New line for dynamic inertia weight adaptation\n            self.w = 0.9 - 0.5 * (evals / self.budget)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce dynamic inertia weight adaptation for improved balance between exploration and exploitation.", "configspace": "", "generation": 78, "fitness": 0.3678996913886423, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.7486011565051616, 0.7467224775312021, 0.7631894536018285, 0.7682209410871808, 0.7607979904862361, 0.7493725234069293, 0.7428544208007826, 0.7283145707166498, 0.7406675088307741, 0.593353761935533, 0.5719132925812953, 0.4533242788122873, 0.5445597766635444, 0.5927960937444084, 0.5512043178134879, 0.5801071254733298, 0.5709006161666645, 0.5356909740242201, 0.11106464670044514, 0.11417826479681903, 0.11238265509085743, 0.12393369269278776, 0.11364209643239953, 0.10220505433362637, 0.12353387615882072, 0.10014915758893328, 0.11300164722681838, 0.11366831134739164, 0.09621364138969968, 0.10389814641527195, 0.19599869053122254, 0.10970997578673358, 0.10387772309363863, 0.10747979693675136, 0.11418215318022307, 0.10830854612469687, 0.9873731723477353, 0.9862575682026858, 0.991134350022984, 0.9328241123688272, 0.9846644965211055, 0.9791292497685895, 0.986440252555636, 0.9796248935569245, 0.9859888451388098, 0.44395069122424013, 0.4268499153374199, 0.489329936334557, 0.46454870017037064, 0.49286960731769824, 0.4414248965709293, 0.5166227059008135, 0.4834007294154983, 0.4919957392416624, 0.6987964849469859, 0.7148177527906125, 0.7631095845309512, 0.7426957681449162, 0.779649220903393, 0.6835042039903775, 0.7196519002968056, 0.6865853062094338, 0.7194109960725694, 0.29478515306734854, 0.3582129444181603, 0.36149323089514096, 0.29898014882300783, 0.32905337097213905, 0.2769157250506403, 0.3357839605511138, 0.28224447271039, 0.37148483497927454, 0.2814051501738466, 0.11713913173773749, 0.26394390971272197, 0.44253137849481294, 0.29628830755362245, 0.38110618958825915, 0.36845862466834634, 0.3166403781434788, 0.31938110518849694, 0.19367762183128523, 0.2516583836441454, 0.2748494520519186, 0.0006117868323864961, 0.13474992836651523, 0.0422094170398144, 0.22532562795231614, 0.26069281532734057, 0.2697314203080824, 0.2824428525586137, 0.4743042874204674, 0.4022642970551181, 0.37621478268423514, 0.34833084975096396, 0.3806386979463757, 0.44185141003452577, 0.42517981957345097, 0.32243995742354903, 0.12084611193041694, 0.0282427999326903, 0.1369655696818881, 0.13542635937803338, 0.12737393858043056, 0.11126566895298107, 0.08034230033647949, 0.14936780705656016, 0.11167094007358702, 0.23505125117006942, 0.2611818057893217, 0.2251487342409617, 0.2579938421554392, 0.20261352813588618, 0.25770054750771665, 0.28180431554706076, 0.15457597391266042, 0.24383961790227382, 0.5899796769171953, 0.5327784329544016, 0.6747959390214864, 0.644388628191632, 0.6332286748906908, 0.6696942111113623, 0.6512277245478192, 0.6250427861443877, 0.6133386265142609, 0.11588157873574223, 0.09170595955099148, 0.07778247847511743, 0.11450194473511144, 0.11906223095311308, 0.09791392197517179, 0.11279428660023261, 0.11714580494650018, 0.10924428230827854, 0.1535004355872721, 0.4592297763101605, 0.27913682603183154, 0.48338830037899994, 0.14570219341286028, 0.22242788252731738, 0.4606614951037157, 0.16240589775121295, 0.20245881852842862, 0.4909265400130566, 0.46610353314140596, 0.41305908505875, 0.42998145717498415, 0.4110776799344189, 0.4221680815951382, 0.4695595810662674, 0.45634307189494117, 0.4793097551945106, 0.26155676020831364, 0.3641309498801829, 0.25429649753873074, 0.3113921485691662, 0.3273281053198399, 0.32740719462591694, 0.36609025099139825, 0.4052304010558996, 0.35073532390666873, 0.19642522339844004, 0.2235814473380736, 0.24417631443756938, 0.1897763483371453, 0.19351767868396297, 0.1887673694069959, 0.21965239582418816, 0.18758355171883778, 0.19421420945109857, 0.19615999468788903, 0.18624217818402733, 0.20110701906217487, 0.1897805065241317, 0.21400603048051847, 0.31431300549978836, 0.19351202542798873, 0.414908568202214, 0.1957094486517318, 0.7691012385839326, 0.7493754314963967, 0.15403990867976847, 0.7890337064799813, 0.199349385682265, 0.7822850590130936, 0.7382199361754755, 0.1687137988360331, 0.7997120937546442, 0.8099468539988586, 0.15641881118367296, 0.11128044658229552, 0.7329597832944126, 0.7714437765666236, 0.7685337802265474, 0.20737131011754983, 0.16282285037772104, 0.7626041835929358, 0.19343622493194412, 0.18358154952259076, 0.19376581623179878, 0.17823100924884971, 0.18890728956246017, 0.17909047077510387, 0.18338342171222566, 0.1842761959035999, 0.17777019199833688, 0.0737161478838132, 0.08598865667683875, 0.09495397178584275, 0.08713540123128494, 0.08242383808548459, 0.07105846820664408, 0.1018463483853086, 0.07529395152041107, 0.08161051224504967]}, "mutation_prompt": null}
{"id": "b3ed663f-b047-4905-aa5c-a043bdac019d", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            self.w = 0.4 + 0.5 * (1 - evals / self.budget)  # Dynamic inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                chaos = np.random.rand(self.dim) * 0.1 * np.sin(2 * np.pi * evals / self.budget)  # Chaos-enhanced mutation\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim) + chaos\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced dynamic inertia weight and chaos-enhanced mutation to improve exploration and exploitation balance.", "configspace": "", "generation": 79, "fitness": 0.34057479558757137, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.7332738278573072, 0.753143179603718, 0.7517234641602311, 0.7547621532791241, 0.7562818880232803, 0.7337640044055644, 0.7322138451641655, 0.7414280039374683, 0.7512366669129926, 0.45623067911137194, 0.5854369601588232, 0.5247535101834186, 0.5545760920548128, 0.5756365333397125, 0.5536592847342992, 0.4005057741821626, 0.5900210563210595, 0.5562218941988929, 0.09533400715064022, 0.16998244597255363, 0.10554409353223104, 0.15031950508508363, 0.1211172348247388, 0.11571804448243839, 0.1048315345621933, 0.12965182149137322, 0.12391838361174667, 0.10444871920554666, 0.10960380789667667, 0.09736500323849451, 0.10100135716000402, 0.11084584799182573, 0.0948987559325527, 0.10264886611061264, 0.1002889840130472, 0.13748637871687208, 0.9867336569555663, 0.9862238998248939, 0.9869306801050952, 0.9669959209066843, 0.9845519277511637, 0.9803396623074506, 0.9865206824193268, 0.981143881667087, 0.9860789942330118, 0.3427146444332366, 0.4822191055908843, 0.4196540427335286, 0.45776304975539706, 0.4603052986567241, 0.5190950552778948, 0.45977094861829637, 0.5026804040108086, 0.16924351383619973, 0.7051263130872639, 0.713429449219769, 0.7232155397069928, 0.7545346616743338, 0.20699306795692618, 0.7569237821326638, 0.7202497078410666, 0.6595018057995841, 0.7067275776175588, 0.2451911684994278, 0.27875510285816785, 0.28088524265771275, 0.29841357025741955, 0.2967070175913499, 0.3045886991130531, 0.24384138864245908, 0.2953582701179551, 0.26852148007273946, 0.27224997838264775, 0.0948499164436013, 0.21529998799049777, 0.3035474484379693, 0.28266482500796986, 0.30344678434624384, 0.18730055852762195, 0.21538060610994758, 0.2810421559929145, 0.29847420532969604, 0.26405180375439197, 0.22814057046746705, 0.02153279766496563, 0.13858403324172708, 0.2679325558769001, 0.1720668161726513, 0.31372047558020355, 0.16544264946459442, 0.27485452182472647, 0.4179138049119073, 0.3076852315010583, 0.2432396647290056, 0.38794552733122534, 0.2988956716346486, 0.4142127623859134, 0.31929333681943683, 0.3316214369407259, 0.07974259923692628, 0.09384274767378431, 0.0724458104803909, 0.14542889685499227, 0.1323485204841529, 0.13174610960291666, 0.0911481613014985, 0.10935959058612787, 0.10871852040812924, 0.22342742853274544, 0.24374488751862378, 0.20170223209855342, 0.23915727205911586, 0.2082003451763046, 0.2660697867771744, 0.20533136531324148, 0.24709659649803084, 0.1543816376239674, 0.5649041878721788, 0.6839058127975779, 0.5888678660784397, 0.6421792690061203, 0.5968610557469565, 0.5408765948561642, 0.5952707938604016, 0.5798701942866156, 0.6323592495518426, 0.1098015951551603, 0.12439644748379919, 0.10922528491918404, 0.10962693661491596, 0.10171044862042378, 0.10571297007801184, 0.10731385393624182, 0.10552589090169262, 0.1000132646033719, 0.16477301201051486, 0.13195174108676655, 0.22318656676852233, 0.3401084799371583, 0.17905195495089066, 0.1737859826046988, 0.18836146562854095, 0.22561121140554863, 0.23474839076344145, 0.4083597189373984, 0.40268088415086845, 0.4143640736766342, 0.3863652971134187, 0.40487814771336306, 0.4164492621374808, 0.39985943979469596, 0.45349899201072386, 0.4033726208606979, 0.3111938180800743, 0.31407035048027154, 0.2975759153088796, 0.282134323577342, 0.3113016592670462, 0.33108620195425487, 0.28364287987095704, 0.32856532487307577, 0.29536337756032616, 0.19531907975248286, 0.2008716862961354, 0.20352390132280063, 0.1887800751680241, 0.19962763725367272, 0.18836098166588755, 0.23984454035202252, 0.21230255574563728, 0.2085227488130864, 0.20806865985619993, 0.18500379927561383, 0.21390985469578194, 0.19383118021228174, 0.41309202059190064, 0.2997950549281886, 0.20620814700208345, 0.3808791439254512, 0.19683327289375996, 0.8269763361756131, 0.1624937073699324, 0.1526539753174322, 0.7742037999390208, 0.19834486555140862, 0.7509506327566225, 0.09954430182531504, 0.20475775506864058, 0.7498213421768298, 0.7500647271443293, 0.1675688222767736, 0.6533371441581044, 0.1999346124779885, 0.20301521602137973, 0.7418641128490107, 0.10492682437311363, 0.6106982444748688, 0.2057099065500786, 0.193655284755048, 0.20143691995421775, 0.2087421678762117, 0.2099331906980102, 0.1971021936290669, 0.19110486610169686, 0.16935247741594117, 0.17893939794279212, 0.20116268711356633, 0.11406606836048594, 0.07670769178771897, 0.08433643170398186, 0.07653521056698687, 0.09236606921315726, 0.07399414452819042, 0.08148959921254573, 0.0763052316248033, 0.06743728164675722]}, "mutation_prompt": null}
{"id": "6154eec1-3d23-49d0-b2cc-7c6b7b241af3", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = (0.5 + 0.5 * np.random.rand()) * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)  # Modified line\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced adaptive inertia weight for improved balance between exploration and exploitation.", "configspace": "", "generation": 80, "fitness": 0.36466175787378186, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.26.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.7854365523269595, 0.8120011869893045, 0.7812611493555732, 0.7712826638225992, 0.7745619440462563, 0.7951939304108769, 0.8122775183057821, 0.7705244109021702, 0.7782720923995247, 0.5861354425572217, 0.6268301278994003, 0.5990658901089356, 0.6074157326295295, 0.59296577003129, 0.5592754988122539, 0.6411279971609049, 0.5685140194678329, 0.6310985329277539, 0.15440584858821582, 0.10664501961531514, 0.11760865707314716, 0.20771573382589514, 0.10479060513180716, 0.10935325828161457, 0.11825857026425524, 0.1253588302772658, 0.10901707082711631, 0.1082343379699987, 0.11274471916882955, 0.1516415424766454, 0.10352274105846537, 0.09621982905100268, 0.09870046801208321, 0.12119076310337384, 0.11216048073311558, 0.10302692832988847, 0.9903623051637849, 0.9861043393955731, 0.9818487450622959, 0.9328924949361007, 0.980691230506374, 0.9775886385331923, 0.9864192455213178, 0.9809136178379203, 0.9861299159414769, 0.3856296982581634, 0.46125081785078614, 0.395549637683425, 0.41545869675975167, 0.48076565861194753, 0.4137022525959556, 0.44757152441408143, 0.4508574101356707, 0.4431716593067777, 0.73846550451264, 0.7414079686442159, 0.6944306659851973, 0.7785024873089769, 0.788586688180744, 0.7382193347157013, 0.7233891112665798, 0.7501874949532668, 0.7048136416687487, 0.33427112934274383, 0.429040913682761, 0.28721254735254986, 0.36534027710800543, 0.2982970187859574, 0.30531112654785675, 0.3113949591214623, 0.12258434023931641, 0.3680992796601297, 0.3054510518287338, 0.12207820013697479, 0.29241960250967736, 0.3151434392156476, 0.3498510820971953, 0.17980436986323933, 0.3093647400624513, 0.2595306694047945, 0.2420720626022006, 0.14876172178272895, 0.13797793457345398, 0.33728939381656386, 0.30793093829173135, 0.1638847534921286, 0.2198038917290427, 0.19793550864243903, 0.20655553510895686, 0.26178815488539475, 0.4188377055574889, 0.41009171910479303, 0.376731444527318, 0.2969191138906445, 0.43641533053711723, 0.3295895977993427, 0.441972398597388, 0.4264747625498022, 0.45016852370680804, 0.10653519220272123, 0.1822382353261932, 0.18063205756068235, 0.08369415619235043, 0.12487685979900087, 0.09434502442537396, 0.14675743401565122, 0.11458601411667946, 0.06108325814514737, 0.2552718155658039, 0.2683630440127711, 0.2511176577928552, 0.25916115340179835, 0.2354327659021077, 0.22564482088556226, 0.23814606884537015, 0.22749099180622812, 0.2584589527068699, 0.6634866388123655, 0.6723358847763038, 0.6209130894034351, 0.679516542116082, 0.6217566199751219, 0.6174575201107733, 0.6954458531442039, 0.6475427109600823, 0.5820819233637711, 0.11824584032880447, 0.10254563916789428, 0.12191767981124935, 0.10678901241309957, 0.13863630395543713, 0.099535227776678, 0.09732948075443115, 0.09355356377153112, 0.15282587930632652, 0.14908838013784953, 0.30656830761876175, 0.26852049795466615, 0.19293031909325986, 0.25630705361225736, 0.1608530675915295, 0.22116407155174178, 0.15463377346148022, 0.19483477161358176, 0.48528651312606397, 0.48155462722114617, 0.42621327405312814, 0.4369350063368451, 0.4278099059193662, 0.38330322499662484, 0.45843962411617467, 0.4593767528186249, 0.41673022200799736, 0.3245866365783824, 0.3206058202085319, 0.2742641353915559, 0.2785730439521311, 0.306571905686465, 0.27774602349894684, 0.3696824589876381, 0.37196557435506417, 0.35250777981677706, 0.19999364592795255, 0.2109579879752469, 0.19052636910415865, 0.195433605180091, 0.2078002966639877, 0.2159656421616294, 0.19791442901709366, 0.18674148727603623, 0.17980122173097224, 0.19146277108810072, 0.20968453306925872, 0.1771101661242932, 0.19167743308462593, 0.22009523191349922, 0.34271766587031505, 0.3807502451309358, 0.1908080148193323, 0.20208265803073322, 0.8332148143489322, 0.18668321645427144, 0.15372524591560832, 0.8082362236202388, 0.19950318405755862, 0.1977173631064274, 0.7901898333382896, 0.17004471521729425, 0.8228302114134121, 0.7784313735274477, 0.15655856084954467, 0.656109209449899, 0.8336664967264265, 0.2089017226677553, 0.8278213804842748, 0.20691396672423834, 0.20117931531118394, 0.743437152850966, 0.1842629614900152, 0.194213404147764, 0.18012944304316048, 0.20230612483524002, 0.19144442133585937, 0.19116270935239144, 0.1760126032899041, 0.19883954455772368, 0.17686053563261028, 0.06946874899448308, 0.08646776888096919, 0.07523514788062768, 0.075664023081083, 0.0871377235913735, 0.07543682767813831, 0.08386734450295497, 0.09155097193306305, 0.0822464340724357]}, "mutation_prompt": null}
{"id": "9e0bbd53-0a17-40f1-b193-1203eba5b72c", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            self.w = 0.5 + 0.4 * (1 - evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced adaptive inertia weight strategy to balance exploration and exploitation dynamically.", "configspace": "", "generation": 81, "fitness": 0.34560172280114476, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.7136373628880945, 0.7289564363358798, 0.7418412025515988, 0.7358583037417574, 0.7400180436663146, 0.7360753902843316, 0.7253516082083876, 0.7490041204547043, 0.7276860214656985, 0.5766207559130225, 0.5680340102026429, 0.5248455784995119, 0.5861703452911416, 0.5779406429794925, 0.5267641455547585, 0.5662484421928444, 0.5871621097617499, 0.5162007180081236, 0.10008329625404855, 0.1270560283771267, 0.12093571405486181, 0.12652081974814633, 0.12702233800299145, 0.11320208081460625, 0.12269456048542704, 0.10406680858113482, 0.1414091018375635, 0.09391300451250228, 0.10842852585283325, 0.10367082373371417, 0.09618220419355117, 0.10995735459487155, 0.08330487245527674, 0.10052667107563706, 0.10083162894371978, 0.09873877889693905, 0.986732862852628, 0.9862241732970767, 0.986932388516185, 0.9642517431354128, 0.9845523189357357, 0.9803394870970505, 0.9865217348761424, 0.9811460534044912, 0.9860807235461047, 0.47572585540831325, 0.5016704114822954, 0.4561437439918098, 0.45734187289493955, 0.4614582405182286, 0.4815731718377638, 0.4515138594151864, 0.44018629210460514, 0.39945793224987824, 0.7487548174458232, 0.6793577330696838, 0.34061674916727314, 0.719844695770609, 0.20559689918517277, 0.7434213859003145, 0.7246768753725423, 0.6157829300955242, 0.6494956172142234, 0.3412408077178567, 0.29571367893356126, 0.30069897372729804, 0.30778825409884636, 0.27769364910826144, 0.27903197807234226, 0.2628306199851349, 0.3023582473930253, 0.34066238596566867, 0.25012420797200696, 0.11808966661099674, 0.21985290056644724, 0.33456081026685813, 0.37941383839361653, 0.38920040306370274, 0.26938959133842466, 0.32086950493351707, 0.3365533384412003, 0.19202462799490705, 0.21406354559376228, 0.31724491301088853, 0.06611496107911696, 9.999999999998899e-05, 0.145880291506583, 0.052181999589717254, 0.36933464961156826, 0.2774285332340425, 0.42453649287154904, 0.2253634787766503, 0.46930916358257513, 0.40840834467826226, 0.4343299609253378, 0.36509382605911267, 0.44967895469758246, 0.3695686747190987, 0.25246739542801944, 0.09968938958564955, 0.1459751575176229, 0.043905579241578785, 0.06110805178137291, 0.14655079204676003, 0.09101533447722832, 0.1190540200862632, 0.09106999850386566, 0.1252226008226529, 0.23075437059444215, 0.24899154836119775, 0.28436809241904926, 0.2249173291257549, 0.2208681438833131, 0.2642535067733389, 0.2551197597904584, 0.25932207474400015, 0.12161366843320065, 0.585215960984558, 0.6288815282595874, 0.5134169215332434, 0.597579927995155, 0.5577268688837932, 0.5938539102391565, 0.5901123701986323, 0.5885329612916739, 0.6610518215436736, 0.11335001453436067, 0.0991961443569448, 0.10897746177877365, 0.12651479641355712, 0.10250397391699229, 0.10448005645914005, 0.12090130564698143, 0.13185639476052002, 0.11274128907078629, 0.24183407624672337, 0.23387028303939017, 0.3966235064132838, 0.14736917118801907, 0.1888346252164148, 0.18186520916490623, 0.23861706603951804, 0.19760405611886922, 0.22639437519215222, 0.46654249106855195, 0.43612104665970375, 0.40520273612582036, 0.4070036434233645, 0.3963020357258592, 0.4077246217077084, 0.4267633343254086, 0.42838585096523685, 0.4524451307940396, 0.26678250143067483, 0.30298106310618966, 0.3375298787581794, 0.3019914762489614, 0.3111149738286846, 0.2871161000349882, 0.35930195108691587, 0.34906063873520365, 0.3655447365851535, 0.19083377863690776, 0.1925519038468677, 0.1993013832311371, 0.20836217939384405, 0.18804620721157894, 0.1972333634354544, 0.18448450347176126, 0.19779663971031525, 0.20864360634092194, 0.21751815547440423, 0.18498817749378704, 0.34025347947205575, 0.20229703244447939, 0.40799020320171353, 0.21943555171193063, 0.2065984438158016, 0.1805998435906988, 0.40507044999445574, 0.8155283584309578, 0.6611499689224669, 0.15273547545871002, 0.7761392034055565, 0.19761569163063109, 0.7836273261503057, 0.12072952969173634, 0.1688978198064771, 0.20633455756077235, 0.7848120302520489, 0.16842659548630123, 0.6841110994092384, 0.20489101558748657, 0.2049008186256921, 0.7346284720672966, 0.21026564480149923, 0.5105683405525678, 0.2078508623233123, 0.20442887548189514, 0.18858886749022907, 0.19614962087334775, 0.18669096255344142, 0.1822787595795069, 0.1787088262401969, 0.18608518396308482, 0.18968866944925888, 0.1848896260807399, 0.08652967638670617, 0.07630139468999064, 0.08541479299827082, 0.080949472665798, 0.07876369438403197, 0.0831895779223738, 0.08988864621861126, 0.07709589787962645, 0.07592907311622898]}, "mutation_prompt": null}
{"id": "7f269518-6675-4777-8780-df13caf4eae4", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.1:  # Adjusted probability\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.98, 0.4, 0.8)  # Increased dynamic mutation scaling\n\n            if np.random.rand() < 0.05:\n                vel += np.random.normal(0, 0.1, vel.shape)  # Stochastic velocity scaling\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Refined adaptive mutation and crossover with stochastic velocity scaling to enhance diversity and convergence.", "configspace": "", "generation": 82, "fitness": 0.3915624631992227, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.8366133228953537, 0.8622853707337885, 0.8836235285547424, 0.8582347255734644, 0.8639024193788385, 0.883099149363857, 0.87819624168356, 0.8743325904988619, 0.8731479441142085, 0.574165045018783, 0.7382675956025362, 0.5943507547411707, 0.6950604425146029, 0.7363832231166242, 0.7529822150223866, 0.7050780405441708, 0.7494979463096043, 0.6849831130976536, 0.1614338282953104, 0.10859376244598662, 0.2542226594517768, 0.10682109619984481, 0.1285961315271934, 0.14720229232105486, 0.15755255762758702, 0.13515418543520663, 0.13336428805891098, 0.11399570754871857, 0.16340879922866824, 0.10923462222583002, 0.1374300938682036, 0.13013643154359744, 0.10631321581462339, 0.15681077921857445, 0.1205829174072709, 0.11487941884440844, 0.9869083217825338, 0.979050968378957, 0.9866251176016174, 0.960321012563003, 0.9804784598025761, 0.9764055603222069, 0.9828204559950002, 0.982051265526675, 0.976017769569124, 0.5327792578860397, 0.42255501299668574, 0.6259614766454593, 0.6249826617604781, 0.5990673540455111, 0.63771573909839, 0.5647951716164265, 0.5911907001869656, 0.6187549924286632, 0.8115892135887834, 0.8354336947822047, 0.23131090097917817, 0.21384892916519227, 0.8340752892948053, 0.19281339535922226, 0.807845531522172, 0.826872405981814, 0.7942863338610302, 0.3878124457956126, 0.5112982074581652, 0.5165818875652113, 0.3506203634433883, 0.28826823591263295, 0.4067393829746705, 0.13348379195221327, 0.1997901333905393, 0.38440067950602297, 0.41380869667373377, 0.12323945759397625, 0.29943780038844836, 0.4212772004630748, 0.5418992918810759, 0.13319391253142143, 0.13460362564165695, 0.4449653964759327, 0.3167686511941967, 0.34306012290314214, 0.27765295636784737, 0.26052711649058713, 0.028872218676163408, 0.09669025906490991, 0.25374715491210964, 0.30379348528008054, 0.21867330098863114, 0.21079734329207334, 0.3815634370725186, 0.2962522936337427, 0.4396078516318773, 0.3318754944055863, 0.3912592361640853, 0.3807639660649813, 0.4522488011970136, 0.3737303672706055, 0.4119433345693321, 0.050501689545630724, 0.19521568783520138, 0.1054617025606569, 0.07949368596110284, 0.13838536338421548, 0.10139660483318769, 0.11198277763208841, 0.13470783803474273, 0.07493156637159759, 0.2957167836759049, 0.11258745164495232, 0.3444417287937006, 0.33154315322977124, 0.31106041759497716, 0.20589944222601975, 0.08416897847580729, 0.24942446614587432, 0.21381910152358463, 0.7888691462797474, 0.727136413722208, 0.6884215995219437, 0.8050032664194979, 0.7016706435621134, 0.7184977989096036, 0.7097925386965271, 0.7823557315490294, 0.7491698486228947, 0.10922986448022842, 0.09721047699767349, 0.10048734977942309, 0.17968099850737285, 0.09969192999684784, 0.13606910571291408, 0.12641266975548915, 0.09905945332628419, 0.5012418319651211, 0.2622899636381798, 0.18437533804270456, 0.5328367397657569, 0.2557111687762672, 0.3585616039874564, 0.2056963821115554, 0.24520504218741523, 0.25165257689913745, 0.18374489885922807, 0.4576751052205331, 0.5434511228519712, 0.42691088400655586, 0.5193785740377987, 0.4323023511310383, 0.5221683254971293, 0.5094977703214996, 0.5231232312957977, 0.5789013315513627, 0.37371523056217093, 0.3014689111291192, 0.33232717818248925, 0.4600207044847684, 0.3720628052405899, 0.38340485706529814, 0.44869191200365444, 0.3300421224614476, 0.3759687763483909, 0.20193178214573837, 0.23854322989114796, 0.2163930394983965, 0.24277213515757412, 0.20821842188404094, 0.20909967759574832, 0.22161623813034437, 0.21337200204918705, 0.20343892879653536, 0.20226185662479435, 0.6705289533969889, 0.25072688679444977, 0.7531241740887515, 0.18381724783177944, 0.18347136434296962, 0.2242218144514161, 0.19237644557762756, 0.24633824839291207, 0.9075440426360539, 0.18419441761956157, 0.1541692613908806, 0.9228003789435854, 0.2014926215991515, 0.20104485087531676, 0.1715046272072892, 0.17038873933479481, 0.9179292048788699, 0.8579045691888962, 0.15727611100787853, 0.8229601349431324, 0.21012664561728223, 0.21265104212629204, 0.8427651941134731, 0.10525920616760687, 0.16813646499570256, 0.8440513604595506, 0.172229395847751, 0.18608835815881775, 0.18335996180478564, 0.18836747256165642, 0.17805966451622646, 0.18477220099435876, 0.17682023711856998, 0.18435550635502684, 0.19455697689481455, 0.11228529582968527, 0.098518066825803, 0.08929013416794573, 0.09169998462029905, 0.09139951189271212, 0.08447196114315048, 0.08797869930905655, 0.08308539198234977, 0.07603654692517592]}, "mutation_prompt": null}
{"id": "50803b9f-c864-47b1-81a4-1eb7e608f222", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population using chaotic sequence\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        pos = self.lower_bound + (self.upper_bound - self.lower_bound) * np.sin(np.pi * pos)\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            # Dynamic inertia weight adjustment\n            self.w = 0.4 + 0.5 * (self.budget - evals) / self.budget\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE with dynamic inertia weight and chaotic sequence initialization for improved convergence.", "configspace": "", "generation": 83, "fitness": 0.3458855029843755, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.25.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.7298088352672629, 0.7176488635231808, 0.7630690068519277, 0.7129417257643968, 0.7459382329969425, 0.7611805948449704, 0.7480703487955447, 0.7547184029169332, 0.7158870123838399, 0.568179165722668, 0.5598872940481951, 0.4717663190178357, 0.5700799852055418, 0.5838699405283155, 0.5614043674243705, 0.5828385612056253, 0.5787499976979386, 0.5667045432467346, 0.10664950101466675, 0.12665348118847053, 0.13709597226875303, 0.12027070279376606, 0.10595641035024295, 0.10299624167228871, 0.13475582281775533, 0.10819937117454281, 0.12017636530773412, 0.09577114383333407, 0.1070229535740187, 0.11295358368758657, 0.10489418361177572, 0.09737409784304785, 0.11212508174568525, 0.1049164769475085, 0.11250969807122313, 0.10301115171323216, 0.9848431376204909, 0.9805334856889636, 0.9851349232579486, 0.9918537586344547, 0.9817880382568702, 0.9814172242924709, 0.9972618571424234, 0.9912823168747449, 0.9917769331755668, 0.5003086464457398, 0.44727515801390794, 0.47544295304282647, 0.4622552974004477, 0.49117714925199485, 0.46742080065671066, 0.4520733329195904, 0.09424542170472683, 0.43741453666903396, 0.6236698009263277, 0.7057221209208588, 0.6534846135848337, 0.7281020300312788, 0.7421750276184538, 0.7144746617611217, 0.6716568755666963, 0.6769881869231025, 0.6830454836205753, 0.3074323888133377, 0.29378793090166333, 0.2901909839173268, 0.4407478143499165, 0.11428527960507473, 0.3882917779855075, 0.44066590404554873, 0.3216695344271755, 0.2865615413349071, 0.31055665380776887, 0.08322631642897627, 0.29559456476618406, 0.28948341837327085, 0.42036230580488665, 0.2652001823110114, 0.3390912624414052, 0.2580672987090652, 0.2228275187762503, 0.1490867024679876, 0.10363697472179445, 0.1602365778259438, 0.08772838922549997, 0.016985862426472376, 0.3329511758378846, 0.23577927376669439, 0.24540938459056127, 0.05600873021739228, 0.38985395722195615, 0.41650289849074196, 0.4236880963190678, 0.197794447309938, 0.31213764760490736, 0.43563606829865575, 0.19079968579477813, 0.3623562224147886, 0.32999485746439794, 0.07297155202221206, 0.028474154616660363, 0.08422944094419438, 0.06815947503055808, 0.08603595065736713, 0.07263884171312218, 0.09325829552477971, 0.06145680883037907, 0.17067059426241593, 0.2234626785578928, 0.2052147970546908, 0.2952239517356029, 0.22004161809694778, 0.28156734554745655, 0.2877582432808439, 0.23360288789650074, 0.24454572460539792, 0.2415176625554204, 0.5757542490767507, 0.5963761094721016, 0.5473868121966037, 0.6418302304124703, 0.6126709958403258, 0.6043966823245033, 0.604073465110458, 0.6033349747819701, 0.56024952231243, 0.08383985109645142, 0.0855876321522765, 0.099134053035424, 0.12353478972166032, 0.109432895065256, 0.09631687604746564, 0.102633512696234, 0.12126988585211018, 0.10260328588478551, 0.226714396009289, 0.14529112152806412, 0.1498004133562325, 0.1785977361093184, 0.15794600604414777, 0.3796308397554452, 0.1568537386217007, 0.14436858142576314, 0.13545538472694918, 0.41491191668028105, 0.4312070040864304, 0.40369791584189196, 0.45311390909345206, 0.3894349338624935, 0.4276882585316758, 0.5029633814706407, 0.4440078443377784, 0.4654797169480579, 0.3350000413090952, 0.32711157997101203, 0.2690520065556762, 0.288067037102712, 0.2929317424353156, 0.19552236898931663, 0.33846304321721865, 0.3614088431164735, 0.34575055327269955, 0.16650639157056046, 0.21875343764694477, 0.18002672273248133, 0.19875003729243268, 0.1936727283476366, 0.1871134547840939, 0.17553789954322618, 0.18635917476565955, 0.1961180152642441, 0.21243100159508743, 0.3925041440890864, 0.20197059291150055, 0.19646403297259862, 0.2014999586482481, 0.20398878523483077, 0.20610512818167814, 0.20010296236270964, 0.20717220962835114, 0.16341182298930057, 0.16609374543736466, 0.8028293269080586, 0.17367346315728904, 0.7298608960009275, 0.18014235415282243, 0.6663266431926483, 0.7674767665584117, 0.7776299159570246, 0.1670190909880237, 0.6386318802869848, 0.15452430489602798, 0.20162072181302348, 0.6523038831077583, 0.7310168946405832, 0.6899831011411264, 0.7568035077585058, 0.15353028497057475, 0.18480157415848886, 0.1783540423982608, 0.17590819965054838, 0.1710278629876506, 0.1885582627727841, 0.17363930734451583, 0.19980714158467627, 0.18142311808401135, 0.188010195345246, 0.0792648669668351, 0.0753113912053448, 0.08323442457439001, 0.09049143022155515, 0.08088120928671472, 0.07183089487069938, 0.08731424433370738, 0.07831281490116837, 0.08988738414108266]}, "mutation_prompt": null}
{"id": "5dce5026-b71f-4b91-ba9b-bd4dacca3111", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)\n\n            if evals % 100 == 0:  # Adjust inertia weight dynamically\n                self.w = 0.9 - 0.5 * (evals / self.budget)\n        \n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Refined PSODE with dynamic inertia weight adjustment to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 84, "fitness": 0.41169905913522276, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.28.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.8896311675764319, 0.878687932178325, 0.888346715612996, 0.8847237744170796, 0.8788334671595601, 0.8799923075113985, 0.8870585456529544, 0.8929133176794701, 0.891331697792969, 0.7213692296739878, 0.7874673671819176, 0.04555763958341319, 0.7021916201942432, 0.7493247294043663, 0.7612078395235782, 0.7258140079351267, 0.7702140224908643, 0.7694016854766047, 0.1558293712663843, 0.16952539907564024, 0.15500836212341385, 0.16760796221710295, 0.15369896446585385, 0.11650237222141646, 0.17028563329755075, 0.15512683708234742, 0.11755124859201116, 0.09576583039739273, 0.113237172198565, 0.11168285560466229, 0.15001901458080813, 0.09976984771674302, 0.12754985955812592, 0.13606520116448317, 0.12514748065946113, 0.13847225726167667, 0.9873688743370982, 0.9814716245799355, 0.9879502915419965, 0.9609871320099287, 0.9851533696055949, 0.9757720011713976, 0.980068160703781, 0.9703775265235929, 0.981012016711912, 0.5781253042945305, 0.6659958765746521, 0.6239612675060382, 0.6176015918070656, 0.692267722512819, 0.6682938104770191, 0.6701179903756327, 0.670259716027825, 0.6563928399996756, 0.823693665252568, 0.8232488493947172, 0.8266126509035223, 0.8807509796042303, 0.2051680331327701, 0.8318548744354233, 0.8639922159775346, 0.17492712821041545, 0.8691781935049312, 0.5465787869673562, 0.48572292624555347, 0.5397896621243721, 0.6200577017646595, 0.562181565213614, 0.5519915748468892, 0.13133453193656264, 0.1279426880836958, 0.5012045930144267, 0.2822574612706966, 0.326614070373236, 0.20008896557818412, 0.39190955301011676, 0.5221148425611646, 0.5581780033640265, 0.5239132774231019, 0.4247214150063684, 0.38686110480359326, 0.26663944584687205, 0.08640669429268177, 0.2903262022774926, 0.27145290307784276, 0.32900811310869227, 0.21600781300940497, 0.2915690782476037, 0.2719843177019725, 0.10068277041864182, 0.41247445726605414, 0.4295687925389102, 0.3485325829745901, 0.44363642821748694, 0.4491014037962192, 0.278471869523933, 0.3594201078822957, 0.4066683341211872, 0.5134279419100216, 0.14134222350906545, 0.1838862566270273, 0.2955305691922372, 0.07967671096796203, 0.2959996434018588, 0.12127956357165837, 0.1019501045120993, 0.15784238702130604, 0.07355138030918329, 0.29997348788165135, 0.19979869759468916, 0.3355120996662433, 0.34975986249218893, 0.2861347353254613, 0.3304953932426984, 0.29083869721365796, 0.27067986234094377, 0.2415866168402827, 0.722388788462094, 0.7892018382741354, 0.7572847799460596, 0.7065341142862516, 0.7072856235108596, 0.7002006734521614, 0.6994017361983709, 0.7902052453162502, 0.7138050019614609, 0.1537321863988167, 0.10593404142623453, 0.1404747294882338, 0.12908009329741488, 0.10681800822512255, 0.1293739071834964, 0.142466825123438, 0.1165591150589742, 0.11239227133461571, 0.17389419530134764, 0.6915229673385119, 0.24432077778912042, 0.3896593901085398, 0.24645956009761494, 0.3630284380736649, 0.5846247541100347, 0.17068533859014112, 0.17589394579533368, 0.52833048716608, 0.3977699549920035, 0.49959598862805354, 0.5914110117427204, 0.641897596428205, 0.31302053044729117, 0.5946852620653239, 0.6302176241958725, 0.6486691727103928, 0.4164058137261627, 0.4258652958073096, 0.36522736179974125, 0.3354863790538476, 0.24285704738859026, 0.28660379051680984, 0.44865969278209106, 0.5051606566029239, 0.4819449147878827, 0.2333994591072227, 0.2076387691417675, 0.21670295278372265, 0.19283826568240325, 0.20796153793231564, 0.22855815711486138, 0.2293201094756988, 0.24273074755865864, 0.20544494901222277, 0.22026388866955027, 0.21462197296833152, 0.19768987768565682, 0.22026182823840124, 0.7849660315506785, 0.21585345057114214, 0.2010971468581484, 0.2206360299048924, 0.19535874844911016, 0.9187820180107786, 0.16453142489583783, 0.15428758697621303, 0.17265606183385385, 0.2015384980127246, 0.20141111429635883, 0.1738370540940667, 0.1762772187262952, 0.9145057758093598, 0.8664277741440173, 0.15715936839286881, 0.7870064935265029, 0.843778131896702, 0.21104965867375236, 0.8560542446417451, 0.10516003824402831, 0.16823963165518796, 0.865285149273201, 0.18984298743313888, 0.19656303629086247, 0.17205547853816516, 0.19469358159816486, 0.17837677513902672, 0.19066441698071046, 0.19526264417073158, 0.17790747237485882, 0.18892165813130868, 0.12958500509655735, 0.09245589031319268, 0.08334483634617262, 0.08200291819963645, 0.09271629857723873, 0.0827531791236299, 0.09270644524636096, 0.08713844422892325, 0.08944089740628824]}, "mutation_prompt": null}
{"id": "e9d1d2ea-2f6d-48c0-ae18-ed2b2b7a5f64", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            self.w = 0.9 - 0.5 * (evals / self.budget)  # New: adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n            if evals > self.budget / 2 and np.std(fitness) < 1e-3:  # New: random restart\n                pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n                vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n                pbest_pos = np.copy(pos)\n                pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n                gbest_pos = pbest_pos[np.argmin(pbest_val)]\n                gbest_val = np.min(pbest_val)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "PSODE with adaptive inertia weight and random restarts to enhance exploration and prevent stagnation.", "configspace": "", "generation": 85, "fitness": 0.3444104738770572, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.6888169728599427, 0.7394223253312997, 0.6506383104200091, 0.721286241547586, 0.7085127136038951, 0.7219773976658508, 0.7312748856389925, 0.7735704617875709, 0.738670412827831, 0.4818453257478875, 0.4237546927295449, 0.40930423397771687, 0.42513267015207756, 0.42354099403965384, 0.3883876845578962, 0.4919266131591278, 0.5241303170946573, 0.38484241889802506, 0.10147103477548258, 0.13114329194554297, 0.09991506194569733, 0.10716764388569755, 0.1189476133280497, 0.1114947777987303, 0.11463004707563118, 0.14327160988268772, 0.10516043055671997, 0.11285669920534946, 0.10078030553854511, 0.11128206782576966, 0.107874849340863, 0.10002720536070397, 0.09164915994277945, 0.11342078360090235, 0.09571055416521745, 0.10094630568683782, 0.9867336569555663, 0.9862238998248939, 0.9869306801050952, 0.9642589832245935, 0.9845519277511637, 0.9803396623074506, 0.9865206824193268, 0.981143881667087, 0.9860789942330118, 0.45701392551935827, 0.41028811017244327, 0.44927079282978843, 0.48839516310431563, 0.4996634238720604, 0.43518588859919605, 0.4676391381193219, 0.4346026303518301, 0.3805113584172377, 0.7129145084914599, 0.7108922968909032, 0.7056893586630573, 0.7111069182802096, 0.6742193298217147, 0.7279902559904705, 0.6747174482991498, 0.6727815584892749, 0.6814645204397909, 0.3784551954029627, 0.29342260243392426, 0.33791695147985823, 0.3319819368314244, 0.2908978675377859, 0.19309066943564435, 0.2916533625102681, 0.30404916796345405, 0.33311681996814146, 0.28581913546118776, 0.1743762127598979, 0.2479836342856011, 0.35929908950282374, 0.2895250058929345, 0.3110982296149233, 0.2472340589446238, 0.27851912397014733, 0.2997807933708141, 0.27563951861207847, 0.25446307089395803, 0.2160053530231637, 0.05606188289744529, 0.2912133889290216, 0.182394499439256, 0.2523459521244745, 0.25999298984532193, 0.23657510292954864, 0.3828355007510984, 0.30892832443637386, 0.410653081033448, 0.23914210249537782, 0.2933394996594555, 0.325041569616758, 0.37822628039973527, 0.4596368920574361, 0.41830422510406884, 0.07668453293227373, 0.08392155167253257, 0.06340018843101336, 0.07770832058600097, 0.09767507395768171, 0.13621789662054196, 0.0812558066131216, 0.15913580572443586, 0.07721839779972484, 0.2553959740086317, 0.23359149366382803, 0.2517315924744322, 0.25209179047130037, 0.23428554582794547, 0.2354762848028289, 0.255680106719795, 0.21722433389308937, 0.2072234575030928, 0.6017561312079034, 0.5644730248515908, 0.5792093712372568, 0.6165144579022899, 0.613371737856323, 0.5446096561509406, 0.5267200443328317, 0.5426185138578965, 0.5628365583519858, 0.09352770070530769, 0.0894846521530086, 0.14584741156417025, 0.11169270814324062, 0.10037034283935464, 0.11711630390373806, 0.10379342445302131, 0.10947634063988043, 0.10479264206638927, 0.16662506350245643, 0.21410924777139817, 0.20716965729736925, 0.14387181437269503, 0.23188419387814907, 0.15507983192993002, 0.19423627430078683, 0.1765196685161321, 0.20979110068405693, 0.383825869819466, 0.40174312659601363, 0.3882806922095027, 0.399007595078673, 0.37055023063458825, 0.3990990384991846, 0.382456845612819, 0.41578645141857506, 0.39511891472921634, 0.34757673334950323, 0.318689887871342, 0.3320720919727982, 0.3146587949359918, 0.2390985166598093, 0.32254429934039397, 0.37193151983454653, 0.3926347097442485, 0.34422936827000206, 0.21331184169880402, 0.2187640886745834, 0.1989073042958902, 0.1834565803076681, 0.20109264578765396, 0.19404024820412447, 0.20609859399482555, 0.19327004303128392, 0.19354361315280189, 0.3324445949388434, 0.194269892443795, 0.2918975107460412, 0.21847037491827892, 0.27532700736940785, 0.20601599326005138, 0.19017081450431428, 0.18904831448622927, 0.33765255823230933, 0.8322763143722272, 0.752040699248836, 0.16818444694071055, 0.7913071319672518, 0.40561192279871006, 0.7668573338157899, 0.3967713322453733, 0.2608905360376108, 0.21946435764323247, 0.7612024255640548, 0.4336010696818535, 0.21364092755444986, 0.2051560274913814, 0.2036598919361302, 0.7089814911849669, 0.45315929572782543, 0.7344278589064961, 0.2392439978714016, 0.1916221104577226, 0.1959491271745366, 0.17630241485804277, 0.1919682544422675, 0.19548593938543612, 0.20223931505330284, 0.18576457774617428, 0.18366513805349594, 0.20116268711356633, 0.0859360243388888, 0.07845924233245372, 0.07922681547895427, 0.07719605453374612, 0.08166404554824891, 0.08531521293904976, 0.08571538719882388, 0.07582967994630085, 0.07124833470410263]}, "mutation_prompt": null}
{"id": "06f74186-bb49-43dc-a8ea-fac2588b5468", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / (np.max(fitness) + 1e-9)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)\n\n            # Stochastic local search for refinement\n            if np.random.rand() < 0.1: \n                local_pos = np.random.normal(gbest_pos, 0.1, self.dim)\n                local_pos = np.clip(local_pos, self.lower_bound, self.upper_bound)\n                local_fitness = func(local_pos)\n                evals += 1\n                if local_fitness < gbest_val:\n                    gbest_val = local_fitness\n                    gbest_pos = local_pos\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced stochastic local search for enhanced local refinement and adaptive exploration variance.", "configspace": "", "generation": 86, "fitness": 0.393178241469747, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.8701637595926659, 0.8744267775715115, 0.8688419786985279, 0.8794636753642975, 0.8595410596814101, 0.8750806554961021, 0.8814094005382918, 0.8793991923033793, 0.8659945632216578, 0.5881562720729171, 0.6749500086807239, 0.7769130934730101, 0.7583404191206644, 0.7019646898828824, 0.7518887685087143, 0.7387450595356022, 0.692693327195017, 0.7396948616528514, 0.12487733796812606, 0.1682984939974964, 0.12982201983846187, 0.18325493566720075, 0.10361755159366226, 0.12100500225638411, 0.1383484854747441, 0.14458207316134852, 0.12607710367068536, 0.1186496505650062, 0.12807889617766433, 0.13040265459568512, 0.13867483789336932, 0.10521046236627118, 0.11077165395906863, 0.13162757337443254, 0.11552541025299301, 0.10463104667661316, 0.9869083217825335, 0.9804555753539995, 0.9866251176016173, 0.9603287038410085, 0.9807305730002825, 0.9764055603222069, 0.9828204559950002, 0.982051265526675, 0.9755710504439693, 0.544096242111468, 0.5978413069083501, 0.6329424415164769, 0.7119996975540367, 0.6685000680451618, 0.6312522946841204, 0.5939739322917962, 0.697078191062654, 0.5834716189506943, 0.23081934123039693, 0.7702782039697835, 0.37596369597591006, 0.21477154046467983, 0.8436764034606395, 0.19340917730066476, 0.8641922136711542, 0.22113366318807426, 0.8005434144356346, 0.6114985184771261, 0.4543509009358885, 0.4398005193108344, 0.3828299222555125, 0.13438044719755904, 0.3616327078158781, 0.1335057948563343, 0.43182925981478215, 0.585739172954379, 0.17356442686891838, 0.1183746000285486, 0.35213731224110634, 0.44214219621383055, 0.6010251800515751, 0.18500039991012163, 0.13456611400025065, 0.12378881319411761, 0.47409012953946517, 0.2259123177179948, 0.21863858702924932, 0.28204142894812334, 0.030730569677743014, 0.1675356346141239, 0.20065762334420445, 0.2692265675626113, 0.27942389916886967, 0.20071695795601918, 0.31435527925373274, 0.3376967936294287, 0.40869110563806077, 0.3861776278148529, 0.3530396175528371, 0.35561159127593944, 0.4872628854183746, 0.4618377917789678, 0.4762609205489723, 0.07060850106965133, 0.03451962868517444, 0.08500794231627729, 0.08026986729772945, 0.22475180146093177, 0.16099316436167066, 0.09883901664091277, 0.21840330915375394, 0.08937056681969602, 0.2934401715510677, 0.25964774434334437, 0.25311146406052587, 0.33488247786251824, 0.29596470315619094, 0.33783056833508995, 0.08404623850889315, 0.0570980257513336, 0.2007409299348457, 0.766232933489701, 0.7850554641000331, 0.774233157287015, 0.7458897097738068, 0.7666335177909627, 0.7749344090362877, 0.7941197975884284, 0.760706501109147, 0.7599434389871793, 0.10112276700550826, 0.10607704901226822, 0.0752256094476943, 0.156711506493315, 0.11580196742065985, 0.10701452758244323, 0.1565162022798895, 0.13188913996295926, 0.12348720754882647, 0.23293592100569238, 0.19557733812740252, 0.5740979347038471, 0.269169466495809, 0.5748492414242172, 0.3789819652233204, 0.2050091837791388, 0.463115913540464, 0.19039569095236963, 0.32014120822115244, 0.49603178561635175, 0.5129399983212828, 0.5555781431566325, 0.42554418721985054, 0.44201600029230237, 0.5903142720177358, 0.5339386246130642, 0.4233442425524033, 0.36297940106287463, 0.33490889640243793, 0.4323824825129653, 0.38181410994283727, 0.3633616158411721, 0.33691896854278136, 0.5663245062188353, 0.3711152491839109, 0.4810852466154727, 0.24373441594176093, 0.23193591104642342, 0.21684422602210374, 0.21222849099247465, 0.19203210001278126, 0.21382816834038543, 0.21095158864394337, 0.21913699167630052, 0.19702826902352522, 0.7284353366363419, 0.18429627281141625, 0.21855972721352124, 0.7626249161238483, 0.2185614947004869, 0.21957146291266494, 0.2235858987185022, 0.2498236752829841, 0.20288868401010818, 0.9149212388407638, 0.17761074163343815, 0.1541091474580475, 0.925119103323263, 0.2018233020195921, 0.20088710717020108, 0.17191252640321486, 0.17026932892304247, 0.9017477809601958, 0.8595780905869356, 0.1573701912870873, 0.8148526308537217, 0.21025534029517112, 0.21249172283611972, 0.8781144649865982, 0.10522951449777551, 0.16780038730345914, 0.8583541797156924, 0.1933372976295903, 0.18462814106813807, 0.21390267907357663, 0.18837947789744436, 0.18256713108668043, 0.1862114387107573, 0.1771997633943616, 0.17774807957750416, 0.17371215913723193, 0.13216448623965038, 0.0978876246642898, 0.08594256740629502, 0.0885810214655145, 0.08273828368724956, 0.0897790418871055, 0.08582509022132978, 0.08847888681649507, 0.08787350012143147]}, "mutation_prompt": null}
{"id": "e6d72f10-f1cb-4ace-9e0e-6162f1938d41", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.995, 0.4, 0.8)  # Adjusted dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced exploration with dynamic velocity adaptation and mutation in PSO-DE hybrid.", "configspace": "", "generation": 87, "fitness": 0.4043583963016224, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.8921470053036781, 0.8838749717493086, 0.8906271735424932, 0.8799610766804784, 0.8839910653536166, 0.8669695434524489, 0.8996601479526078, 0.8810734361478866, 0.8914392279555442, 0.6800384215796709, 0.7647731165636398, 0.5594244234734436, 0.7362355392765216, 0.738988595368786, 0.7743029602111017, 0.7266431502859281, 0.7717566928278187, 0.7749098282711108, 0.18137490370582943, 0.1699516143580202, 0.12515370727645236, 0.1535020331690794, 0.12740437645547575, 0.11677439508637621, 0.13087387711053122, 0.6287071634342932, 0.6091141284026449, 0.10909203214299124, 0.1331087388195119, 0.10119469653934943, 0.09511051031956397, 0.11536276856505667, 0.12925997742312978, 0.11776578410865313, 0.1130895132197538, 0.1377464788603533, 0.9873688743370982, 0.9814716245799355, 0.9879502915419965, 0.9609964622888939, 0.9851533696055949, 0.9757720011713976, 0.980068160703781, 0.9703775265235929, 0.981012016711912, 0.5388084044638883, 0.7006004245894816, 0.6713665410923326, 0.6140181655602944, 0.659192945004835, 0.6344315339781534, 0.6414379475502778, 0.6662913797043044, 0.6436514361126736, 0.8580314355821325, 0.8199133868612236, 0.8382099121529378, 0.8721708209088352, 0.20285854144663484, 0.2727362951821163, 0.7807581530061027, 0.1377770360402777, 0.8504424393315683, 0.44026387586312343, 0.4894892613710813, 0.2724313200890749, 0.5685084856947038, 0.537589123506266, 0.5415007391270821, 0.1301306142965828, 0.3961819510234824, 0.40201315373997226, 0.35466642086024003, 0.27015421276612783, 0.3643029565726199, 0.5640103487813702, 0.3739889548344826, 0.4241479401168049, 0.4872573035366431, 0.21317003096136022, 0.5502315395182733, 0.19172769646004995, 0.08798124002393493, 0.18555131945773184, 0.14815469934217018, 0.34456073429198375, 0.22785955234123323, 0.30528796123365953, 0.2785221654127087, 0.17949895016441475, 0.3470936062266986, 0.4246530647250658, 0.30888420422705387, 0.47619682877706326, 0.41393823402268415, 0.18096200377882776, 0.4132958639543034, 0.40265616547234573, 0.36100821548523565, 0.14340360161230714, 0.19443581940400367, 0.3868907180294594, 0.08053514103287529, 0.3191511683036422, 0.09568751478805948, 0.1025125437551051, 0.19459613788754282, 0.07999424084714724, 0.35542865944323987, 0.40029759668087384, 0.3406023972651916, 0.32114709502602634, 0.006638596860749968, 0.36947523313594643, 0.29124394828094124, 0.2893103900917213, 0.19729438121412213, 0.7271283393533211, 0.7474407159450965, 0.7296607265637378, 0.7593541660303863, 0.6656429764708905, 0.6570385968767178, 0.7028414439510617, 0.7643948851717326, 0.691067626572107, 0.12195065683838113, 0.11832658807508156, 0.14298467031290052, 0.14657998057739985, 0.1342168014064017, 0.13474197943695054, 0.11298139804870022, 0.11621873596595056, 0.14415034370485336, 0.27275944680170194, 0.2567591314265857, 0.24928040125260986, 0.20903313101849963, 0.414219822235939, 0.3297158971666104, 0.6464227187458518, 0.14665406945889026, 0.2467379054791824, 0.5287333594357793, 0.4604955703885767, 0.35345189153312606, 0.47031549726491584, 0.4172292912714858, 0.3037608654455112, 0.6038192955326894, 0.6344095706323922, 0.6250427102380709, 0.42259192306723337, 0.39151264784465434, 0.4522863713557377, 0.43391131052426035, 0.23951881589220725, 0.29159346670267483, 0.3456145363808748, 0.33191651987160453, 0.48913826640708036, 0.20347582918853446, 0.21704714706368367, 0.21720243858844912, 0.20980703734983386, 0.2150991436895887, 0.21214191373605018, 0.20602649821216412, 0.21249851424286603, 0.20641400377295027, 0.19886564995161848, 0.21720481851548734, 0.21916271128988152, 0.2029071500168057, 0.2660136607127628, 0.23723030162010128, 0.21772720502981457, 0.20918105800658626, 0.19646292751747396, 0.9216642304219178, 0.164553436498868, 0.15428757874020138, 0.1726546299109778, 0.20153675182942554, 0.20141073779945395, 0.1742444632775081, 0.1765000024399518, 0.9154305906393561, 0.856012200867483, 0.15715700875888416, 0.812656135537455, 0.8432143793845789, 0.21103933412231135, 0.837407495970517, 0.10516244067956837, 0.16825415647980413, 0.8723771803337095, 0.1908777833737243, 0.18635392809363338, 0.17939202456149395, 0.17573204187085723, 0.17577864303293322, 0.18197187521683478, 0.18783276448656339, 0.18250827672227565, 0.19988180105378095, 0.14478158549616527, 0.08028722076852113, 0.09950878500618843, 0.0878602085840483, 0.09560309346619256, 0.0886610308769683, 0.08475965402337893, 0.08553836509232371, 0.08962256981067329]}, "mutation_prompt": null}
{"id": "0d2a025e-4359-4200-bb14-05e45c856ad1", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.2] = np.random.uniform(-1, 1)  # Enhanced diversity\n\n            if np.random.rand() < 0.1:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.98, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced adaptive learning rates and enhanced diversity maintenance to improve exploration and convergence.", "configspace": "", "generation": 88, "fitness": 0.3931063572892094, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.29.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.8800517221472982, 0.8703460086396099, 0.8877662088710684, 0.8874971404469034, 0.8942483189157707, 0.8755017683360276, 0.8796297153361768, 0.8852591679767119, 0.8838342744169378, 0.7263129843560867, 0.7527864746523986, 0.6851289600783264, 0.7482741045001906, 0.7291291746305792, 0.7074988431481131, 0.7361876323347938, 0.7100796657664978, 0.7021909138542977, 0.14267131033137415, 0.14445879331240352, 0.17252887960448238, 0.15161838892142532, 0.14105025497443568, 0.16964369104105537, 0.14210436298383589, 0.14727694893496013, 0.11827337388012515, 0.11283370675035276, 0.13607182727391554, 0.13395304362948335, 0.11124955841400752, 0.12122752196654563, 0.11481713870091148, 0.1278417108005846, 0.112156581408553, 0.12367345173464162, 0.9873555721817654, 0.9814576198315785, 0.9879471230864679, 0.9598845097906252, 0.9851520556505866, 0.9757549780439491, 0.9776828020628857, 0.9752747690213961, 0.9810002829883199, 0.67330487003598, 0.06772809268185209, 0.6330474871386167, 0.6901374235634266, 0.6604408530308341, 0.6912168909114997, 0.6570679021049702, 0.6957609646944849, 0.6767420515211602, 0.8093408640808062, 0.8064180680429387, 0.7891811233328947, 0.8363244638368514, 0.21300307932546636, 0.8071009316427357, 0.8124460263615061, 0.8284061705938361, 0.8097077538017853, 0.513471828012644, 0.36356159668883403, 0.33807319406429026, 0.21386683374835969, 0.38000172606876503, 0.2608362946533501, 0.13044310594180275, 0.33289136482604276, 0.13492340975599604, 0.30032175487278157, 0.12316321181117562, 0.13196109847968707, 0.36404406307561143, 0.34809755778453755, 0.21568923197051815, 0.22806031425810136, 0.1845338713335022, 0.22376426396259363, 0.2761038393333187, 0.10719186852972529, 0.2850698557094852, 0.29654046493501995, 0.23041955604736386, 0.22852281484980796, 0.27706862713462466, 0.24865649639652776, 0.22831417556721212, 0.43598794925190854, 0.3984726612485502, 0.3719187815369196, 0.2519090846059683, 0.37431568707225615, 0.3620441099604854, 0.5079792197481399, 0.3756555675453115, 0.22058006121055573, 0.05918845495857494, 0.15854755950205945, 0.07299013683706834, 0.08098070611834296, 0.14545836670232581, 0.09589857099233923, 0.10992314920378488, 0.16727972938810054, 0.07945172325361705, 0.3273999516941617, 0.1751533728814837, 0.31857116998736945, 0.2688435224485207, 0.3619480314621323, 0.2284104329773713, 0.16364208948993786, 0.059348737781179106, 0.09468390153525774, 0.7102968218064116, 0.629737225291159, 0.7454075738041368, 0.7729941632635489, 0.7117752342896008, 0.6742088091303642, 0.6091396899762304, 0.724245425382235, 0.705882073710926, 0.10838279470152068, 0.12159819218364032, 0.12692943228961395, 0.1355895021300355, 0.4665686469020325, 0.13002061307193524, 0.13205906488312247, 0.08588673449533912, 0.12398686513693125, 0.18337347012912297, 0.2280592583218447, 0.2290399079222618, 0.3042452102849632, 0.5770711729522546, 0.3239911482151099, 0.6571017293714743, 0.25590647026265134, 0.17016383196998108, 0.49922179817174706, 0.45191050636711005, 0.46968599989014315, 0.5601781032348632, 0.5201178984173762, 0.40157173993122974, 0.5009712042821524, 0.5142337923663365, 0.5127937858326461, 0.26308700349269365, 0.2582537839284679, 0.3250122820777779, 0.3743129071022625, 0.2477453606237484, 0.3321443046072936, 0.3425510490466306, 0.44943030737720324, 0.3884251592897564, 0.2205603874894959, 0.17676274819786109, 0.19679709728714523, 0.1957303701558436, 0.2590277291456107, 0.21126748780298776, 0.19290041077182463, 0.21757450949986146, 0.20320727853556553, 0.6194676739053759, 0.21025209633896125, 0.19828761158142516, 0.7644040316618739, 0.22342696809568074, 0.2199169885279718, 0.20653228570449622, 0.7702581443034966, 0.23768253879371437, 0.9238631401412996, 0.1765319364906518, 0.15421699008505674, 0.1727464288212225, 0.20119141315767541, 0.20077042318472327, 0.16205264802738584, 0.17008785290933592, 0.9196269749686354, 0.88654750892762, 0.15705063060494595, 0.8196437832160968, 0.8452130398388062, 0.2106724853106844, 0.8624823917222257, 0.10516804960327575, 0.1685554102757516, 0.8520859597809528, 0.18345545521762818, 0.20484251014349697, 0.18949811566668517, 0.1916407490464671, 0.1842432167919228, 0.17835744077544935, 0.18885717821334125, 0.18161118508137086, 0.1831570573658039, 0.10508743208377158, 0.0834650757399149, 0.07921693289444687, 0.08944649841512964, 0.08797339090412692, 0.08578741758162955, 0.08957780971152973, 0.08781405055953106, 0.08283668385805232]}, "mutation_prompt": null}
{"id": "866a3c41-73f4-42b7-ac20-4f9fc5b3c79d", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n        w_decay = 0.99  # New line for decay factor\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)\n\n            self.w *= w_decay  # New line for decay application\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce a decay factor for the inertia weight to enhance convergence.", "configspace": "", "generation": 89, "fitness": 0.3752281462894605, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.29.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.8841234162221627, 0.8983998292801297, 0.9117371504439757, 0.8895374687719818, 0.9032333112201739, 0.8959686318034895, 0.8913074883112443, 0.9035508347799605, 0.8897655910720443, 0.740064277210174, 0.8161295168695679, 0.10160089222708979, 0.7776250723048317, 0.8178513540063297, 0.8063186400211327, 0.7621987057934825, 0.8190284611424478, 0.7996419593426228, 0.1481319722718354, 0.12345771866222, 0.18145395520835905, 0.11381844122080453, 0.16284718672390863, 0.15261377897516903, 0.17932209652716047, 0.10619298271902666, 0.13632108293258605, 0.11202206496940181, 0.12708421516311064, 0.10756515641053888, 0.11481567553409189, 0.10257257084043991, 0.11479051400052753, 0.12735638931297166, 0.15758351227152256, 0.1432343963728534, 0.9873688242934058, 0.9814634758001864, 0.9879481872051431, 0.9599616791426655, 0.9851526222896246, 0.9757617270411284, 0.9777744390541349, 0.9703422242960024, 0.981005513755578, 0.7025458261970485, 0.7655315294398627, 0.7249588338192213, 0.7346183926647543, 0.7718086537518571, 0.2807746259839846, 0.7140486553251627, 0.7371409608811408, 0.7462390887856903, 0.8920503565442457, 0.2419105323461428, 0.2248548818463071, 0.840578373874317, 0.2129108595016148, 0.21228592079332032, 0.8074178652520869, 0.23367807876108304, 0.8697902264240653, 0.22497053888838114, 0.3822129933887999, 0.19231979323480786, 0.17261905124278876, 0.39229848832205827, 0.414427775578864, 0.13244013198909566, 0.18426150621402793, 0.19341237058821203, 0.1924425718815176, 0.12382583417459703, 0.21591696340602418, 0.16947467250399495, 0.15330477028012301, 0.22378915237699004, 0.32025475911415413, 0.20480748942106097, 0.2656718990811241, 0.31573619716506385, 0.08715920405862143, 0.1860426059911423, 0.21762288827772325, 0.33170528097270147, 0.36889249362641363, 0.2664777018000377, 0.2775309724443138, 0.3420238763366127, 0.34030750315332015, 0.5288831171661144, 0.33548207625301507, 0.4150377321033758, 0.2529996029631919, 0.32174714397856896, 0.32701091823375616, 0.412030308266113, 0.45327657017294853, 0.10881475312268818, 0.11660587721777904, 0.2813452498587222, 0.08075248643123145, 0.21518502455893274, 0.101770750549665, 0.10595946129358158, 0.09731506259931666, 0.08686689981721718, 0.2223401479565852, 0.3216369258960856, 0.29386571712732135, 0.3703444330154363, 0.006633757269098761, 0.36870420168144735, 0.3107972976203025, 0.057701795502193454, 0.22676920231334274, 0.7611813862757534, 0.7643668021863683, 0.74498225239555, 0.7903687421689803, 0.7962609231491894, 0.7416817884027094, 0.7491826610215413, 0.6498029777279752, 0.8047059102112633, 0.11080632912922828, 0.09415397185262786, 0.090752513685594, 0.11626846999140794, 0.13916383048875103, 0.1297798808853231, 0.14179633839538597, 0.1337023515877045, 0.12285182377266668, 0.19224067247922172, 0.236529230957362, 0.2267618585311275, 0.19355863416134134, 0.33232436432541623, 0.309947107319984, 0.4131859294056063, 0.2252722120644377, 0.1738870222271547, 0.5057585565236762, 0.4403449766253088, 0.43542446404277757, 0.4382053862885513, 0.3241851041799835, 0.7571273802132361, 0.5306684566377539, 0.40736445430946966, 0.5108178814773618, 0.2843636161860513, 0.1652225367960125, 0.2887761172289651, 0.30726523939391026, 0.31666399241410825, 0.3583909454608233, 0.31163848689262696, 0.5188805870884146, 0.433216470185101, 0.20468779289594174, 0.218342512807439, 0.2181205201565044, 0.21119500672447356, 0.20744575403745757, 0.2002407620893214, 0.218902176161909, 0.21015447755245942, 0.22312426494006576, 0.22758395423204025, 0.22383984077776975, 0.2254646315701978, 0.2122628307515153, 0.22584517301920126, 0.224178435263495, 0.20829839793289695, 0.20879307315172535, 0.22418904790250205, 0.9313170315063681, 0.17664225151602952, 0.15414578289715242, 0.1727461379980092, 0.20154507603455296, 0.20117997597268011, 0.13062470983771235, 0.16989160150134885, 0.9272538218454172, 0.8653464027003704, 0.15704246053066417, 0.1270464082087408, 0.853065914948154, 0.2111713347345029, 0.8780641057973421, 0.10519392180921949, 0.16837082316215202, 0.8947842698407174, 0.19972290876470578, 0.1864887911841201, 0.1814865972190458, 0.19957055034282056, 0.1980906174527024, 0.1902527702035296, 0.1798851371859269, 0.18915586288195219, 0.190677766657806, 0.13091778372955998, 0.08881106396919347, 0.0853167098797839, 0.09929691840416777, 0.0832136753717565, 0.08562807994061927, 0.09990813391227982, 0.08793971554124269, 0.08397053184065939]}, "mutation_prompt": null}
{"id": "68667377-aacc-4837-98f2-04de44bd2943", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Adjusted line\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.1:  # Adjusted line\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.98, 0.4, 0.9)  # Adjusted line\n\n            if np.std(pos) < 1e-2:  # New line to boost diversity\n                pos += np.random.uniform(-0.1, 0.1, pos.shape)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE with adaptive velocity scaling and population diversity boost.", "configspace": "", "generation": 90, "fitness": 0.39791272814324885, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.8698708649118156, 0.8890947227298253, 0.8523678014769832, 0.8673006866908096, 0.8893388145655816, 0.8904567179377424, 0.8951613824861138, 0.8616179782250972, 0.8527497698150682, 0.633945676148985, 0.7625191021309763, 0.6767258264816197, 0.6927782693426532, 0.7388835505065303, 0.677837699581634, 0.7181514139710949, 0.7335618589486762, 0.7070263157646384, 0.11784932118211222, 0.5638019824910793, 0.13339673488807224, 0.14920658043349888, 0.1604124805644196, 0.11314267682687518, 0.14572033137564955, 0.17912698274785166, 0.13710186449567519, 0.125755599109875, 0.12176851817925394, 0.1201020896983348, 0.1279103674617259, 0.12919696125951685, 0.11197668066516109, 0.08841856123682268, 0.12387566046398701, 0.16555028070106403, 0.9873686832190949, 0.9806175944990279, 0.9879452764449599, 0.9610036188163135, 0.9851494992593963, 0.9757394934490676, 0.9800834006696, 0.9752722123223367, 0.9809881316809107, 0.5691534594868947, 0.26018759523723234, 0.6469648950677067, 0.3081698299866261, 0.6438821569818797, 0.5977247902985114, 0.6846278818302797, 0.5656434590279409, 0.7134704180831808, 0.8750923707783315, 0.8676158754440949, 0.38329648450938736, 0.8776890009949707, 0.8183455644129125, 0.21411159653992684, 0.8815984558618185, 0.7078457356849452, 0.7826917304462655, 0.5218405495872742, 0.4531857419882911, 0.3558778408265766, 0.5256998840084552, 0.4690349394937451, 0.5083373666471889, 0.5779260777912358, 0.12872356732266854, 0.2234076313247193, 0.13329917607027197, 0.1110625470359975, 0.37112406020609934, 0.6328661567067653, 0.30928095677215306, 0.22841198346780411, 0.3911162996399731, 0.3727949412542887, 0.32550437319090675, 0.24946445754774627, 0.26414044436997075, 0.16433097406312813, 0.008318708804715746, 0.21369956167737447, 0.2710171263241473, 0.2085481850871731, 0.18938064460926263, 0.2747547514457259, 0.27546906437815355, 0.4160884416117586, 0.3344183829272531, 0.4670934186195559, 0.19556231037440575, 0.27411020293239885, 0.3721987652780847, 0.25033156937504475, 0.41233974739754875, 0.16702886800751549, 0.15402865505724894, 0.1141226949018308, 0.08219034820584259, 0.23441625770094643, 0.07926294085566588, 0.10084200256540721, 0.07319961129770658, 0.07467763107331393, 0.19494475055222182, 0.31289079871915815, 0.2874407478505224, 0.34014292864924933, 0.2621871980583049, 0.34564543099469924, 0.255755653705523, 0.05807435791378923, 0.08355731380927156, 0.6554692863354652, 0.7572761338134227, 0.7320313646881116, 0.7492626056184664, 0.7476468396601461, 0.7228691141963081, 0.8020865454918011, 0.7139668798570181, 0.7849360025284502, 0.09704745877784648, 0.13021251233758502, 0.11639204082159849, 0.15993526301683125, 0.10934365285402148, 0.1663158644013656, 0.12901394777921904, 0.141427646512428, 0.10517945195343514, 0.23298309284562768, 0.6665446786498508, 0.34011133344347344, 0.28982529382762656, 0.2802981220489823, 0.46517766837632457, 0.6302375153403188, 0.18069613615272861, 0.2224218963442116, 0.44215715501931363, 0.5415162981326347, 0.4388270652374304, 0.4458574456580551, 0.543066041290047, 0.5796738147406741, 0.566632826675818, 0.4745088689794932, 0.5818984717833298, 0.3899611818214027, 0.18181323389913473, 0.3312898162291673, 0.4223134218909307, 0.42019393023428386, 0.44678056315429593, 0.5572167291410635, 0.2870613846706208, 0.365222769363448, 0.2043054038267571, 0.2517864326734853, 0.23736818172539564, 0.1866324643072057, 0.2541774263930735, 0.21704301014067073, 0.19028975897477773, 0.2025408241220199, 0.2056606974911508, 0.7000559508349766, 0.21865367297495542, 0.6724619207021644, 0.23031723108179114, 0.22229876548502792, 0.24933283085575353, 0.24567192522830938, 0.24852754778202235, 0.19821923086082238, 0.9288189826981268, 0.18173027982995227, 0.15423117334335967, 0.1727590816864697, 0.20124693068481447, 0.20140203842715287, 0.8758729803242901, 0.17018418360175347, 0.9333530350498651, 0.8823801624108707, 0.2093347624207097, 0.8211438439359425, 0.2076455498363644, 0.21098427164804423, 0.8414745835502746, 0.1051440115624509, 0.16830030303280297, 0.21147161214366317, 0.18308317543275565, 0.17675892434528906, 0.17743560785874601, 0.1798878170103737, 0.1805136658039559, 0.1790768301407587, 0.186146661401682, 0.17811483543280116, 0.17449461393697108, 0.10887798020864847, 0.10007572796254027, 0.10386290832161571, 0.09144121389692095, 0.08320607568634275, 0.08689912861485205, 0.08914886077650808, 0.0922808024998154, 0.08317364576357233]}, "mutation_prompt": null}
{"id": "08ba1aad-34be-4494-b440-5ee4147a2dc1", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n            \n            self.w = 0.4 + 0.5 * (1 - evals / self.budget)  # Adaptive inertia weight adjustment\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced adaptive inertia weight adjustment to balance exploration and exploitation dynamically.", "configspace": "", "generation": 91, "fitness": 0.3676075290422563, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.7486011565053319, 0.7467224775301353, 0.7631894536005721, 0.7682209410870223, 0.7607979904972296, 0.7493725234076057, 0.7428544207940742, 0.7283145707287817, 0.7406675088067847, 0.5933537825434787, 0.5719132960465163, 0.45332426809881177, 0.5445597738691575, 0.5927960944346169, 0.5512043175352589, 0.5801071251657149, 0.5709006573216407, 0.5356909715608464, 0.11106464670044514, 0.11417826479681903, 0.11238265509085743, 0.12393369269278776, 0.11364209643239953, 0.10220505433362637, 0.12353387615882072, 0.10014915758893328, 0.11300164722681838, 0.11366831134738675, 0.09621364138969968, 0.10389814641524664, 0.19599869053121344, 0.10970997578673358, 0.10387772309363863, 0.10747979693675136, 0.11418215318022307, 0.10830854612469687, 0.9873731723477353, 0.9862575682026858, 0.991134350022984, 0.9328241123688272, 0.9846644965211055, 0.9791292497685895, 0.986440252555636, 0.9796248935569245, 0.9859888451388098, 0.4439506911055606, 0.4268499153457729, 0.4893299361249932, 0.46454870015809324, 0.49286960724897866, 0.4414248965656983, 0.5166227059220292, 0.4834007303437795, 0.49199571333257797, 0.6987964849469859, 0.7148177527906125, 0.7631095845309512, 0.7426957681449162, 0.779649220903393, 0.6835042039903775, 0.7196519002968056, 0.6865853062094338, 0.7194109960725694, 0.29478515306701847, 0.3582129444925849, 0.3614932308950355, 0.2989801488219531, 0.32905337097672327, 0.2769157250484545, 0.3357839605458943, 0.2822444727104848, 0.3714848349798947, 0.2814051501739556, 0.11713913173778778, 0.26394390971210213, 0.44253137856388647, 0.2962883075535141, 0.38110618959245846, 0.36845862466754775, 0.3166403781458603, 0.319381105188149, 0.19367762183130754, 0.251658383644104, 0.2748494520517596, 0.0006117868323896047, 0.13474992836653732, 0.0422094170398144, 0.2253256279523791, 0.26069281532725674, 0.26973142030872155, 0.28244285255847745, 0.47430428742149255, 0.402264297055244, 0.3762147826825456, 0.34833084973547024, 0.3806386979459293, 0.44185141003772077, 0.42517981957360884, 0.3224399574234894, 0.12084611193046912, 0.02824279993270251, 0.1369655696815636, 0.1354263593786602, 0.12737393858045676, 0.11126566895300005, 0.08034230033643763, 0.14936780705649266, 0.11167094007372702, 0.2350512511697731, 0.2611818057893136, 0.22514873423897364, 0.2579938423842737, 0.20261352811998234, 0.25770054754231564, 0.28180435378865754, 0.15457590462000914, 0.24383961726702585, 0.5899796768347906, 0.5327784329559933, 0.6747959367331469, 0.6443886280546733, 0.6332286742909852, 0.6696942142541926, 0.6512277245453741, 0.6250427861067055, 0.613338626457693, 0.11588157873574223, 0.09170595955099148, 0.07778247847511743, 0.11450194473511144, 0.11906223095311308, 0.09791392197517179, 0.11279428660023261, 0.11714580494650018, 0.10924428230827854, 0.15350043558920623, 0.4592297757656194, 0.27913682603200674, 0.4833882967855615, 0.14570219370839155, 0.2224278449026419, 0.4606614951041055, 0.1624058977512839, 0.20245881852822178, 0.5204930528453058, 0.4493705166389036, 0.41305880792899474, 0.42998145698829693, 0.41107767988194943, 0.4221680817645269, 0.4695595745867567, 0.4563430725684676, 0.4793097608051994, 0.2615567304031122, 0.36413094523576206, 0.25429649749547045, 0.31139214857047437, 0.32732810525049083, 0.3274071946316751, 0.36609025099350967, 0.40523040001194366, 0.35073532401304663, 0.18491138219606373, 0.19809075217827887, 0.21036229662071915, 0.18499454859463438, 0.19300132526758973, 0.19075190940521725, 0.21965239582418772, 0.18658583499197567, 0.1934053618246676, 0.19615999468788903, 0.18624217818402733, 0.20110701906217487, 0.1897805065241317, 0.21400603048051847, 0.3143130055144465, 0.19351202542798873, 0.41490856819522004, 0.1957094486517318, 0.7691012385839362, 0.7493754314963967, 0.15403990867976847, 0.7890337064799983, 0.199349385682265, 0.7822850590130965, 0.7382199361754732, 0.1687137988360331, 0.7997120937546431, 0.8099468539988601, 0.15641881118367296, 0.11128044658229552, 0.732959783294409, 0.7714437765666503, 0.7685337802265351, 0.20737131011754983, 0.16282285037772104, 0.7626041835929179, 0.19343622493175117, 0.18358155016712507, 0.19376581623212263, 0.17822949862310977, 0.18890732942418687, 0.17909047116304022, 0.18338342171222566, 0.18427619590348188, 0.17777019199833688, 0.0737161478838132, 0.08598865667683875, 0.09495397178584275, 0.08713540123128494, 0.0824238380854787, 0.07105846820664408, 0.1018463483853086, 0.07529395152041107, 0.08161051224504967]}, "mutation_prompt": null}
{"id": "10833c6d-c6a9-4497-a315-b2ede9d32bf2", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < (self.CR + 0.1 * np.std(fitness) / np.mean(fitness))  # Enhanced crossover\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            self.w = 0.9 - 0.4 * evals / self.budget  # Adaptive inertia weight\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce adaptive inertia weight adjustment and enhanced crossover mechanism for improved convergence and exploration.", "configspace": "", "generation": 92, "fitness": 0.3688710085195851, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.7363037759442355, 0.735859082240028, 0.7332045740618671, 0.7371994019621461, 0.7542073721818044, 0.7350588201546532, 0.7405865817317274, 0.7503394704850336, 0.7215759890944731, 0.5217435458049134, 0.5612267220073397, 0.484781881079997, 0.5043364431665385, 0.5245485818887695, 0.5693341157865865, 0.5388244166894305, 0.47857299241134266, 0.5585860954537314, 0.11433180573909507, 0.1413533408315032, 0.11956642847462917, 0.11432427978738868, 0.09586091443265432, 0.12570795532793477, 0.11030649537338244, 0.09857280237712762, 0.09704185394646503, 0.09675220280465313, 0.1187639635234673, 0.13110868280459875, 0.10238732087232871, 0.10254367293366029, 0.10045863678218725, 0.09240432417229183, 0.1071109825587544, 0.10507498038798546, 0.987373178079807, 0.9862581058952309, 0.991134375954138, 0.932828090698378, 0.9844702403199812, 0.9791301989963994, 0.9864888326487276, 0.9800823058365473, 0.9859892071642171, 0.4319312497714174, 0.1084605961832853, 0.4495998284911077, 0.4618530870941211, 0.4937652434711949, 0.44577211784171444, 0.4326726768453273, 0.5176356947057486, 0.4245224201504434, 0.6847361103950245, 0.6928311247460686, 0.6634406246598614, 0.7901889394481363, 0.77581270656662, 0.7282880272512902, 0.7301281678258706, 0.7623918216982112, 0.7461383405143851, 0.35107140745598076, 0.33938038828518213, 0.33068351242429195, 0.24791699897725972, 0.32409652476780315, 0.3209212522886362, 0.3570485268111405, 0.27159422778642595, 0.3367258744281568, 0.41949695367298745, 0.2725628126588434, 0.27330030586151577, 0.3281677111882918, 0.33968411558028644, 0.27007316777490287, 0.2781405572369846, 0.2709892706078252, 0.29215963667651534, 0.3723464868829027, 0.45385230260944276, 0.3614557285917628, 0.4738060377051917, 0.3065112133178848, 0.5121563955135978, 0.32219460984585346, 0.4098203383231126, 0.40273986080296453, 0.5766933569678927, 0.59069946241594, 0.5329056889221071, 0.5898765936587975, 0.6176192278441021, 0.4993942105315039, 0.47517633489863886, 0.6289470997995994, 0.509596431925849, 0.2134746082711051, 0.11777404185036344, 0.1482995067288846, 0.15014418976226696, 0.23220232277310793, 0.23917182341356202, 0.16318413967187262, 0.13962777226534784, 0.16580454344275275, 0.22716901439391457, 0.2712870513404104, 0.25013256623233004, 0.229289360138769, 0.23083371981653822, 0.23971514454669207, 0.22392007518560442, 0.053517831003625504, 0.18616775094907845, 0.6066262717425486, 0.6013101094351413, 0.5860980794438058, 0.6033179048262906, 0.5394371471776358, 0.5609814786099439, 0.6340238835184362, 0.6268844059250478, 0.5713339484128193, 0.10429632458738891, 0.11524009846377281, 0.11419146687139159, 0.10472602159772526, 0.09585760914296404, 0.11049759484725707, 0.12499877081607669, 0.11434205188926339, 0.1104895586176835, 0.19402932700630326, 0.15423495107806662, 0.21091583560493277, 0.3221882815669931, 0.18237379213902827, 0.2254821535481728, 0.22523156196211502, 0.14542997094736676, 0.13684971376530652, 0.3782713512874899, 0.38724567596090775, 0.3978293244060622, 0.41179354739488827, 0.4087376304549867, 0.4299266990679097, 0.44722014102913465, 0.4583592261654822, 0.43559808009004897, 0.27242881137827557, 0.32662686727008927, 0.29618949861490185, 0.31647236094763986, 0.2992424701822519, 0.2881310633186823, 0.32670284602330557, 0.36954123894347923, 0.3522957543649624, 0.1976530636090983, 0.17910498978481204, 0.2229329692521883, 0.18836484394348063, 0.20667929513255257, 0.19246533429358637, 0.20351371195282353, 0.20483845536868417, 0.17223180881583844, 0.20087063851596854, 0.19101912040276925, 0.202108665122688, 0.22174868622555288, 0.20954078799293285, 0.37389552414955673, 0.29472101688147145, 0.4151431426791261, 0.18998724790355148, 0.16388850291133672, 0.7599794184256474, 0.15365734317474267, 0.8069853290881335, 0.19873614124155314, 0.7609024602103863, 0.12102958401936614, 0.16826903694313766, 0.7987356270530184, 0.7847853512500282, 0.16722464692146355, 0.11081982993950112, 0.691926686870131, 0.7104758492551251, 0.7626314279266259, 0.20879643713052665, 0.1635082560701696, 0.6761059750323684, 0.1937127915916611, 0.18343314357684637, 0.1796287261222106, 0.1753567459418871, 0.19952042115353108, 0.20693874556990755, 0.18995785758101347, 0.19500282767838806, 0.18265556611225398, 0.08056557537445441, 0.09227005467554572, 0.07953003582510665, 0.07192919344610071, 0.07403190092838763, 0.07796820258004677, 0.08567420367783174, 0.07878490830857587, 0.07449492879833675]}, "mutation_prompt": null}
{"id": "6f148949-f3e0-4845-adf2-62545049c6e8", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.2] = np.random.uniform(-1, 1)  # Adjusted randomness\n\n            if np.random.rand() < 0.1:  # Increased probability for exploration\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.97, 0.4, 0.9)  # Broadened F range\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved diversity management and dynamic adaptation for enhanced convergence.", "configspace": "", "generation": 93, "fitness": 0.389904963268671, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.8674231063244757, 0.89490571816097, 0.86423465347044, 0.8886721512091362, 0.8731172674908955, 0.8520588305476043, 0.8717648334900958, 0.8883638103354844, 0.8540687347936792, 0.7056839625986098, 0.6929935435232173, 0.670337364523874, 0.7021291707500166, 0.5615105913597416, 0.7208549278107572, 0.7054073425722067, 0.7240741521016103, 0.6775314897343458, 0.13149918203035327, 0.12347830041078178, 0.1438969954264656, 0.0947613357912751, 0.12735846135815354, 0.10803765982449332, 0.1251343681065542, 0.1200266935473262, 0.136080619695779, 0.11289980517532783, 0.09767459377387566, 0.11072114685730283, 0.13195620839054067, 0.1327531694165458, 0.14475828659490275, 0.1395946570999862, 0.12526605820479708, 0.12862784235919922, 0.9873688743370982, 0.9814716245799355, 0.9879502915419965, 0.9599686971070581, 0.9851533696055949, 0.9757720011713976, 0.980068160703781, 0.9716134102595273, 0.981012016711912, 0.6614912893601586, 0.5882457477333918, 0.5816699335903637, 0.6272005515651679, 0.6594890890844356, 0.6475784708323371, 0.654804371259373, 0.621845847653764, 0.6183713817726825, 0.807843936882535, 0.7973420158205986, 0.8094685791326316, 0.8437256011604772, 0.19280513891349293, 0.1928364854489123, 0.8435705867376, 0.12974514112377256, 0.8615275213594387, 0.36964265916607053, 0.46005378315140943, 0.4661762066328894, 0.3771001605353601, 0.13410594398348563, 0.2611711166662237, 0.13080363351139335, 0.19992093300004865, 0.4271029942633535, 0.3400838488776988, 0.10793054399723767, 0.32026378607988415, 0.40359690191877773, 0.30949045328783165, 0.5062151847664298, 0.40748222917666654, 0.3273597529188209, 0.28208958513495597, 0.0824328099059658, 0.2368365734795561, 0.13811797533190617, 0.18670127953450932, 0.13367606157174083, 0.07249922540634102, 0.28121613429465264, 0.21456453389018726, 0.15064735363763726, 0.38993284072557033, 0.28393596077005945, 0.3646203255261562, 0.4229900031255688, 0.38018945646439917, 0.373979694756189, 0.5046757939175467, 0.4816604775604777, 0.31337960496152517, 0.1138848319923591, 0.12051808656189988, 0.2946300317700935, 0.07996469181999888, 0.2633409083956346, 0.09402897492966533, 0.10049151946055912, 0.10987898693472908, 0.07713368771800488, 0.31806035821801726, 0.2740509853681844, 0.2812528249284646, 0.2680889708553317, 0.3088765009400114, 0.29700007651970595, 0.2372337854822134, 0.057546426509762716, 0.3381302445815765, 0.7770413216807556, 0.7911371085802528, 0.696791051662465, 0.6786804611926918, 0.6827728289163418, 0.7035111685045785, 0.690862830786255, 0.675155236447917, 0.6938938122171203, 0.14167754649827546, 0.08955623204444796, 0.11174623977921161, 0.11898363133502132, 0.13306823074936036, 0.13270060609665435, 0.10283075760973914, 0.13435740848889421, 0.14185142262241135, 0.33829244507868617, 0.23031866003491197, 0.1686282417557723, 0.24281858329007044, 0.5425888716797043, 0.3591395445630228, 0.6630286394423327, 0.15031924179087086, 0.2292949843917983, 0.5315564005803255, 0.541305577210216, 0.5637089134266867, 0.5172438826249536, 0.5205016478875412, 0.29907762775077007, 0.45616551700608354, 0.5517177516467313, 0.5456048364646828, 0.3552705365658261, 0.25478123385978635, 0.41630699546690064, 0.3399386420065609, 0.2115421899632418, 0.41804266420142955, 0.4119728742305703, 0.4819878891729267, 0.38319026645524124, 0.20580003120337065, 0.22549702880736677, 0.25777436196597536, 0.20931491795666424, 0.21870681472746378, 0.22735897974828767, 0.21925108390434123, 0.19671348625406648, 0.19966856636703012, 0.2331393679282654, 0.2114453213994748, 0.198005671600883, 0.24373454699607533, 0.7059881638557534, 0.21162670603371547, 0.2372072352087169, 0.5191421913645891, 0.20554549503794317, 0.9155653691049893, 0.17655400079412176, 0.15428506745749804, 0.17263109798905885, 0.2010319786804815, 0.2014103255073083, 0.17341439281826065, 0.16967487836105333, 0.9125885766967551, 0.8708617096564436, 0.20830268002655772, 0.8054811523386081, 0.8497736566557924, 0.21086978880800866, 0.862934075293447, 0.10518111423158227, 0.16837872889176309, 0.8587192093936937, 0.19637677376648133, 0.18752334696678385, 0.20456325953008814, 0.1848123445343307, 0.18237663615887534, 0.19114412613832987, 0.187972599054969, 0.18645705672875434, 0.19665194697613875, 0.12342347304596935, 0.09473211986012542, 0.08541072969323582, 0.08941992429096668, 0.08895850056145882, 0.10956073130034782, 0.09470134779081851, 0.09091055144350924, 0.08358138614130983]}, "mutation_prompt": null}
{"id": "934e2077-fed1-4fae-b840-0de6eeeda4d9", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 = 1.5 - 0.5 * (evals / self.budget)  # Modified line\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                noise_scale = 0.1 * (1 - evals / self.budget)  # Modified line\n                gbest_pos += np.random.normal(0, noise_scale, self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced dynamic cognitive component adjustment and adaptive noise scaling for improved convergence.", "configspace": "", "generation": 94, "fitness": 0.3935183253289417, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.8874168804689713, 0.8868642737017499, 0.8734216390311684, 0.8641804748009003, 0.8793662400923392, 0.8696445157988311, 0.8813360035564104, 0.8548910312321946, 0.8809223495157632, 0.7127078079126257, 0.7707721292374521, 0.7209203259882746, 0.721779165128605, 0.7552617468662288, 0.7484920925858105, 0.6996435396293866, 0.7643595322405125, 0.757494403615999, 0.13863944457516286, 0.1323661278230358, 0.14264387416837288, 0.11158848948239142, 0.6308015947433538, 0.15428599684562272, 0.1308836481982093, 0.1625797993194843, 0.15832656880917673, 0.13116161689250838, 0.12395928902819375, 0.10922523902540338, 0.15732808266890386, 0.14649392120124227, 0.11412490371451933, 0.1307838916656725, 0.13855020854395406, 0.12773988188525875, 0.9873688743370982, 0.9814716245799355, 0.9879502915419965, 0.9609866169664428, 0.9851533696055949, 0.9757717300543256, 0.980068140028323, 0.9703314697186788, 0.981011816844988, 0.5977335980986778, 0.5880663321927332, 0.5795304750746977, 0.6112242756615733, 0.6309247228232293, 0.5561835622762417, 0.635921485457478, 0.5990699914450268, 0.5756481326083704, 0.781362659308832, 0.7778138376481782, 0.7776085833590639, 0.8289460589752068, 0.19297493437995705, 0.2085371892001595, 0.7735201533642649, 0.7636595301109375, 0.7647412435472322, 0.4581059456016997, 0.3384476941357737, 0.37182666916590856, 0.48545434794564446, 0.4422721617172324, 0.3392559159277193, 0.12658085671768604, 0.5019559849542257, 0.1348931198963328, 0.32824831739863836, 0.10867552467136299, 0.3767443148139411, 0.13427213716220954, 0.42358902850127, 0.34655916504493356, 0.3676602332713411, 0.18569031668400449, 0.36781615488546027, 0.28748548892795434, 0.26102985621927144, 0.1901563728835901, 0.3394912877558697, 0.20394303928981183, 0.06230149812704899, 0.23442042543920716, 0.39130862434102887, 0.23115064196485235, 0.40938376955221434, 0.44748646188939645, 0.4474288998491356, 0.31542495123474223, 0.33069927754813533, 0.21493841444907258, 0.4687199881035976, 0.43264823328375446, 0.2973038646930317, 0.10489710589181578, 0.19738506524407462, 0.10256129902966227, 0.07967533018345097, 0.15348477585753173, 0.10270334297947226, 0.10417853032763269, 0.2221800527356369, 0.07614626946932423, 0.2945813947224577, 0.26699858605132776, 0.283336986954116, 0.27149370336456524, 0.006604268181872763, 0.3562324433725612, 0.3146082382753168, 0.05749537016235595, 0.1788739500910257, 0.7366010490156703, 0.6714049383742664, 0.7316330377805427, 0.7599347116050663, 0.7435033356005956, 0.7276255567703518, 0.7277298901481604, 0.7026470059337702, 0.7777564111409973, 0.1481760092648352, 0.13010994542578425, 0.11662572882460276, 0.10677475406676062, 0.14181355494229841, 0.12098033455094448, 0.12374398385593, 0.152970695724727, 0.09152794999255331, 0.3456730282509385, 0.4210801073448005, 0.19468274103708771, 0.16282635619683516, 0.2178960587917601, 0.3184682479261596, 0.20269216655546685, 0.22263434027041584, 0.25895861126448705, 0.4931309932529161, 0.44115549872284254, 0.5291214134937829, 0.5514861879233341, 0.5000328829751657, 0.5108020201393271, 0.5047090625670368, 0.5906357899837051, 0.5177399371871512, 0.3516826179295762, 0.29133468817247166, 0.3552237950367466, 0.35633151735171853, 0.2322181855012373, 0.4182953289907212, 0.4475636937759553, 0.5174975750754562, 0.4013160717888036, 0.2085329043692482, 0.2091736546236458, 0.2028447705005294, 0.19043740182120839, 0.21950148679321368, 0.20111338516542288, 0.21720634375731118, 0.22353229713685574, 0.20514466364127337, 0.23533496688755984, 0.22051568523383736, 0.21210778043364675, 0.25151221595090534, 0.612958874033199, 0.23058987063229863, 0.240680939148048, 0.23093700230377046, 0.5260811847810402, 0.9205227061151795, 0.1759955266814528, 0.15407727074039523, 0.17262295091753677, 0.2015894351817894, 0.20085138884278153, 0.16086629656866225, 0.17003219184301088, 0.9233089470631732, 0.8538415213624001, 0.15715963742743788, 0.7466818919921598, 0.8155048506455733, 0.2112346564213694, 0.8105203078413088, 0.10515766329024467, 0.16805908786357027, 0.8320336813373448, 0.1914623826784988, 0.1808702786426858, 0.17268758258093253, 0.1762752398256272, 0.17798349063810415, 0.19103434432973565, 0.18799782977160728, 0.18483949817877643, 0.18312373261783554, 0.08647501418003634, 0.09751895376369502, 0.08296442218273892, 0.07630172847081063, 0.08828871144070694, 0.08306358662362623, 0.07975798693177971, 0.08674455339265097, 0.08621255878515999]}, "mutation_prompt": null}
{"id": "a5572e4a-7a5a-44f6-8df5-259293c60c43", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            self.w = 0.4 + 0.6 * (1 - evals / self.budget)  # Dynamic inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < (self.CR + 0.1 * np.std(fitness) / np.max(fitness))  # Adaptive crossover rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "PSODE with enhanced exploration through dynamic inertia weight and adaptive crossover rate.", "configspace": "", "generation": 95, "fitness": 0.34992059249629587, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.6886960086963403, 0.6989028045818955, 0.7240959509894105, 0.7238277743041885, 0.7199575765067714, 0.7045988426765153, 0.712450295580234, 0.7188206108089176, 0.7117439390863617, 0.5320331718829903, 0.547096620326251, 0.5071823051603441, 0.5407104004474266, 0.5455570872090635, 0.5193758087347363, 0.5476037822050994, 0.56653178807018, 0.5416486453353615, 0.1401898643643935, 0.19480949746691767, 0.10216586018394469, 0.08173073524233043, 0.1257309713361987, 0.13037352733185903, 0.12022389108678688, 0.12301729830011443, 0.11182014045057698, 0.11403835127626794, 0.11312179895433094, 0.0912229655225898, 0.10767197206987111, 0.09199029288730687, 0.08698907377228238, 0.13032733205073166, 0.08918778984422848, 0.10703864060233881, 0.9866743525436764, 0.9867199554857574, 0.9868242343293738, 0.9632942448453886, 0.9845271798919732, 0.9779577090617234, 0.9866501556915844, 0.9814430605519415, 0.9862744300107427, 0.45097001011347115, 0.4776407243755265, 0.468968502880727, 0.4429058973804868, 0.4765036440412932, 0.4828718671153275, 0.4157625412289092, 0.2633494823619118, 0.39605823902735005, 0.6844613013179628, 0.6911872521876097, 0.6978291380282958, 0.723239679668074, 0.7264769776449032, 0.6789190422460625, 0.6605617239082751, 0.7441395379518547, 0.7520695450653726, 0.2695857432704477, 0.3127728705846853, 0.2472510850695171, 0.23078201000704335, 0.3722089092286226, 0.24136185124415233, 0.33431934019187015, 0.32520202009169574, 0.27158101919474364, 0.2608136811145635, 0.09420563508035085, 0.22651067094292643, 0.4043312486647619, 0.33455193063415967, 0.28273549360963546, 0.26053534396673694, 0.11849408102784442, 0.3162838691201001, 0.24983327133583766, 0.3348923569523212, 0.21886336033379572, 0.31979652218209853, 0.16104774999311466, 0.2068276326185271, 0.1779240970376451, 0.35881867459301886, 0.32953288196125197, 0.3391843140940646, 0.4319115168012293, 0.32969211526292297, 0.4059079998865426, 0.40919609193158146, 0.41018219373222575, 0.3933179967967899, 0.5129352007890409, 0.48703753193417565, 0.08785554296594533, 0.1073189947529789, 0.10024444728904403, 0.11962907793295308, 0.10585295222927815, 0.12479474170149862, 0.09953513203527198, 0.07830808097475384, 0.05061051888951129, 0.26703840419520286, 0.23661160378864698, 0.256747285951861, 0.2858384726733624, 0.2592279837896718, 0.25747537656936825, 0.18927765237814143, 0.225909108243037, 0.26510746517399053, 0.5409282276331508, 0.5169392039286993, 0.6037980288501179, 0.5226479063686182, 0.5660675352307559, 0.552850749013778, 0.5573921206862698, 0.5014468802368879, 0.5130359132821927, 0.09636707027677627, 0.11181369568931698, 0.10691488284817019, 0.1249102656628267, 0.10480382751230466, 0.10306595678939434, 0.10913555485872717, 0.11125969118831358, 0.10626725417937344, 0.19939914611335274, 0.18782413373915663, 0.14349867710526598, 0.23187249546322153, 0.2955097123868552, 0.15861795888674168, 0.2976285275286886, 0.18122019868771833, 0.20407846342567637, 0.3841084139305363, 0.39244737122988915, 0.41481550857673355, 0.372669639402344, 0.40620682114415607, 0.40189975109019727, 0.404818492051772, 0.43252100604429344, 0.3915145713642295, 0.257083336998582, 0.30220307943923763, 0.2878147977168133, 0.2707364930024181, 0.25503472718581965, 0.2649128871880956, 0.3317763656025984, 0.32233081662541996, 0.3109097012563824, 0.18961030503794296, 0.19171784312723938, 0.18880587377662472, 0.19739338209897372, 0.21741505611471845, 0.1918931664229664, 0.21270587713159161, 0.18312162370610385, 0.20184658962969537, 0.19826991527822235, 0.3646980841491725, 0.3712266356028111, 0.20470628502465238, 0.34970898157737784, 0.21238465377854687, 0.19047807924445637, 0.18209591014086035, 0.1961278896595653, 0.7726765739078258, 0.7319921076142889, 0.1535691748452216, 0.7743814117200427, 0.19649731173515717, 0.1976831821176992, 0.711913866491062, 0.16866632311882768, 0.7014779410809537, 0.7026472631118551, 0.15558404011415927, 0.6614573731148671, 0.6264752016979498, 0.2015668540111769, 0.7555575527399112, 0.20643744260691066, 0.20241831538006072, 0.7160711565949124, 0.1879757035820533, 0.18905467451850777, 0.18477187067800616, 0.1850382950490279, 0.2064419460319208, 0.21912163209661006, 0.18528738049733917, 0.2080372607872386, 0.1892122463997299, 0.07637183795438363, 0.08583060359914085, 0.07501144117754976, 0.07761891592955616, 0.07465189987196408, 0.08902276084984029, 0.07781901157375926, 0.07580890472559698, 0.07681949583611059]}, "mutation_prompt": null}
{"id": "a63d10a4-4170-4a67-8cdd-2f248304cd6c", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos = (gbest_pos + (self.upper_bound + self.lower_bound) - gbest_pos) / 2  # Opposition-based learning\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)\n\n            self.w = 0.9 - 0.4 * (evals / self.budget)  # Adaptive inertia weight\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introducing opposition-based learning and adaptive inertia to PSODE to refine convergence efficiency.", "configspace": "", "generation": 96, "fitness": 0.34240916767185353, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.7210384736716051, 0.7109686054745581, 0.7079521641247641, 0.6931143470442891, 0.6669704160319709, 0.7287171307122537, 0.7243736964517362, 0.7539770516598161, 0.7068745856371309, 0.5450014232331377, 0.5313623105365164, 0.4105827047615669, 0.5614567949906679, 0.5608484599864623, 0.40597976015730475, 0.5220865464716289, 0.5555979893048725, 0.42672214521636576, 0.10379917079892698, 0.10583642173449948, 0.09531962236290203, 0.1207686067897612, 0.09037908232120995, 0.08710156924619716, 0.10391650309862943, 0.1041908616692433, 0.09037564256282693, 0.08886324392060974, 0.09273062511104235, 0.08598827273175191, 0.08546765986793925, 0.09746354487608155, 0.1043384444118477, 0.09355452377691742, 0.12426814750034287, 0.0997049207507642, 0.9873731829833129, 0.9862579651403113, 0.9911343698577706, 0.9645502554680311, 0.9846648620071458, 0.9791301989963994, 0.986440916214227, 0.9796257705221327, 0.9859899416809743, 0.37901300738532595, 0.39160720893635936, 0.35363373599930215, 0.4471171139403989, 0.39137833942634725, 0.37554065373985135, 0.4115276496603629, 0.3852739196826489, 0.32645775744007455, 0.6726155793392794, 0.6950570417334732, 0.6684476597859423, 0.7157350360123478, 0.6973316795821523, 0.6983019126344648, 0.6267229784604725, 0.680073104398504, 0.6571502472230416, 0.3105870487580621, 0.21794330691701747, 0.2320223028417845, 0.23651468346093352, 0.24635130180697462, 0.18165970078866434, 0.21280005688201853, 0.2835078492401507, 0.2520949381856158, 0.26668227148314705, 0.21232875236967574, 0.21982234232219366, 0.28679169393203896, 0.22368755683269204, 0.24616970740566935, 0.2917538407834147, 0.24872993131206445, 0.31153311535625827, 0.3578184003616257, 0.21660853519142143, 0.274811423101442, 0.34377445599655243, 0.14873516419524835, 0.14024570542781456, 0.1821288604750112, 0.19906375810485333, 0.2394625359121365, 0.4144253296527173, 0.3247159654481643, 0.3829786259753609, 0.4027030383158752, 0.3293135586620749, 0.34454062868733626, 0.43442755187399973, 0.32633233086734426, 0.4244479049110691, 0.1858338357699375, 0.03253498927070886, 0.1088126037931817, 0.11440412500639974, 0.10266459280851992, 0.14430409895652008, 0.19326753566414467, 0.07658615767240429, 0.12625841223290768, 0.27551102056823673, 0.2690837417632983, 0.22834167452778464, 0.23048721216186308, 0.2431035788379139, 0.25577902987134604, 0.15987075434598008, 0.23428520818254883, 0.2098770051845924, 0.549847966117456, 0.5473276503701852, 0.6196504356955599, 0.5695024996197533, 0.5535930432981963, 0.5787944506259748, 0.6549652006900138, 0.5283860421653849, 0.5471544893186107, 0.09562891135257867, 0.09985834177863129, 0.10057857070026932, 0.09507585274369212, 0.10180611056685351, 0.09941847717000651, 0.1082779268208115, 0.09830275192877835, 0.10737685278996634, 0.18105844539404903, 0.156801083414299, 0.22598155803863795, 0.20353807980293992, 0.15833009340326576, 0.15450531090206587, 0.1624303102710688, 0.2717816269796727, 0.16068476314679958, 0.3703987353283984, 0.37000134479892144, 0.33196809105519154, 0.38188208874694396, 0.39325135076564244, 0.36786336402813646, 0.4074295113006172, 0.38093466599551407, 0.4127577885813135, 0.3342454890538894, 0.2794458248832803, 0.26730922673602875, 0.2867986024999568, 0.2550546840092839, 0.27889056097373666, 0.28509006727012254, 0.3563994643143583, 0.3203402698890243, 0.2043297005015967, 0.18481368320547042, 0.21713492090795283, 0.21415375580817064, 0.20296550019452964, 0.1939314211556763, 0.19651841123380587, 0.21003297501187346, 0.2107228563853799, 0.17707264369198727, 0.1983852041988613, 0.2234507076321154, 0.19984650005701687, 0.19870520249426815, 0.1995792061888242, 0.2068196047963079, 0.2186619712355684, 0.1893056360806551, 0.7053576286650949, 0.18015740055973128, 0.15389404309158528, 0.788292208535962, 0.19730216231100872, 0.758692534100819, 0.5725878777025666, 0.1680541471122866, 0.8028604321236985, 0.7574394027690854, 0.6978847564396681, 0.6823385589311999, 0.20219748383861225, 0.750697835037698, 0.7613457951651421, 0.20882254342097972, 0.6682484410326773, 0.7374788484182968, 0.20485115865995562, 0.18046009236508853, 0.19059128201049258, 0.18963197002437693, 0.1949068274000938, 0.1830790296674044, 0.17864991375805694, 0.17431869838442615, 0.18508642688691723, 0.07050661604155284, 0.09525436992631442, 0.08316885152793274, 0.07664517364266099, 0.07327608227163185, 0.08478424257622064, 0.07832506726907262, 0.10189863099568519, 0.07978250063491665]}, "mutation_prompt": null}
{"id": "459db67f-caca-4ca3-b26b-5a7eb52aa752", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)\n\n            # New lines for hybrid mutation strategy\n            if evals / self.budget > 0.5:  \n                vel *= 0.9  # Reduce inertia weight\n                random_indexes = np.random.choice(self.pop_size, 2, replace=False)\n                pos[random_indexes] = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(2, self.dim)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "A hybrid mutation strategy with adaptive inertia weight for improved convergence speed and accuracy.", "configspace": "", "generation": 97, "fitness": 0.4102369299090714, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.28.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.8896311675764319, 0.878687932178325, 0.888346715612996, 0.8847237744170796, 0.8788334671595601, 0.8799923075113985, 0.8870585456529544, 0.8929133176794701, 0.891331697792969, 0.7206522159963209, 0.7874673671819176, 0.3265574411572275, 0.7021934059395996, 0.7493247294043663, 0.7612078395235782, 0.7258140079351267, 0.7702140224908643, 0.7694016854766047, 0.15582937127951269, 0.16952539846508075, 0.1485881947877118, 0.16760796252146304, 0.15369896446583786, 0.14413161752937054, 0.17028563334213231, 0.14363390111775387, 0.11819101522406783, 0.10161124829311541, 0.12182483296525337, 0.1292218679064998, 0.14121389939416418, 0.12334429640987532, 0.13728134579409912, 0.13794502048420965, 0.1304744578870357, 0.14353695953025203, 0.9873688743370982, 0.9814716245799355, 0.9879502915419965, 0.9609871320099287, 0.9851533696055949, 0.9757720011713976, 0.980068160703781, 0.9703775265235929, 0.981012016711912, 0.5694474526175735, 0.6938350260198604, 0.6231581354104854, 0.6291369750993006, 0.6941880579834233, 0.6691288092892427, 0.6434083553835066, 0.6606819807762256, 0.6893149403121961, 0.823693665252568, 0.8232488493947172, 0.8266126509035223, 0.8807509796042303, 0.2052596978993837, 0.8318548744354233, 0.8639922159775346, 0.1946973234775955, 0.8691781935049312, 0.45984671185107906, 0.5035338465793605, 0.5725593509929805, 0.5502846866496984, 0.5006722914974029, 0.49089399241848986, 0.13133453172724585, 0.12794277765128903, 0.5382024466212101, 0.28543298079625556, 0.42106483312234555, 0.20404084418571455, 0.368286278309382, 0.46735975960151854, 0.585311530683897, 0.5080404702393604, 0.42360031982585433, 0.3574013099807991, 0.24844318335286175, 0.08633085421293074, 0.2871011371640355, 0.2824139987886284, 0.25370941664160696, 0.20591254875822274, 0.30657724663061114, 0.1967280962007082, 0.0998488647255168, 0.3769283798873726, 0.413342928855403, 0.35950754918979444, 0.4129991534975397, 0.408603133429438, 0.29747342756674633, 0.353588873094809, 0.36137688541835633, 0.42234161824952576, 0.13021291779012278, 0.17257858080976096, 0.2955582504145188, 0.07967345576631235, 0.29596504436837456, 0.12316825579027768, 0.10195074789444103, 0.1577097234389957, 0.07355689722527625, 0.27593657279309447, 0.199880740191695, 0.3269530888065113, 0.3498369339989339, 0.2847474419401044, 0.31631358741076143, 0.28127686350152215, 0.2557165788222202, 0.2412737993429186, 0.7167522852233617, 0.790099986781653, 0.7676305282155902, 0.7169388569629415, 0.7571278506954011, 0.7062507529032158, 0.7077424017958169, 0.7813169565728241, 0.7179400785126877, 0.1537321864007356, 0.10593404141661489, 0.14047473934527066, 0.12908009329745196, 0.10681800848885048, 0.12937382938814757, 0.14246682510762365, 0.11655911509206796, 0.11239227133445606, 0.17389431949119438, 0.6942238268937115, 0.25435526549138876, 0.3879526465547073, 0.24692098267418128, 0.3632732557802718, 0.600619396826366, 0.17065238861890653, 0.18040233251183746, 0.5386529150135095, 0.397414864734807, 0.49857290361107776, 0.6074944186299112, 0.5871459692879242, 0.3127524688499942, 0.5626250648919469, 0.5731030680248769, 0.578575557460905, 0.4531478196198442, 0.422135460490661, 0.3644870200036716, 0.33522594319803034, 0.2425390524520583, 0.2863136759958762, 0.41414594138616845, 0.5097569981552543, 0.490327466757041, 0.23345069800012097, 0.21544032852757555, 0.21586303119480077, 0.19826648192660534, 0.20783856780154808, 0.23380185221227334, 0.22349265215349856, 0.24273074755865864, 0.20211483243732842, 0.22026388870722202, 0.21462197298274, 0.2217470880839384, 0.2202618282349076, 0.7849660315506785, 0.21585345334377293, 0.2010971468583842, 0.22063602990463782, 0.1953587484485061, 0.9187820180107786, 0.16453142489583028, 0.15428758697618528, 0.17265606183388993, 0.2015384980127305, 0.20141111429637104, 0.1738370540917149, 0.17627721874082913, 0.9145057758093598, 0.8664277741440173, 0.15715936839304545, 0.7870064935265029, 0.843778131896702, 0.2110496586738706, 0.8560542446417451, 0.10516003824402831, 0.16823963165417355, 0.865285149273201, 0.1800990157409893, 0.19655476479766765, 0.17298317195324087, 0.18106256999631665, 0.19319930961621246, 0.18303161941374035, 0.19547205086658315, 0.1860688610433453, 0.18293029888948154, 0.12946866886060548, 0.09168230554869516, 0.08675015704148714, 0.07987323860872386, 0.09276723667847708, 0.08323155251872671, 0.0928345247451523, 0.08698913461847135, 0.08965137812349144]}, "mutation_prompt": null}
{"id": "7b0ab924-8ff2-4cc9-b10e-623388e610bc", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity constraint\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)  # Constrain velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)  # Modified line\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)  # Dynamic mutation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced velocity damping with adaptive noise perturbation for better convergence control.", "configspace": "", "generation": 98, "fitness": 0.41169905913522276, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.28.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.8896311675764319, 0.878687932178325, 0.888346715612996, 0.8847237744170796, 0.8788334671595601, 0.8799923075113985, 0.8870585456529544, 0.8929133176794701, 0.891331697792969, 0.7213692296739878, 0.7874673671819176, 0.04555763958341319, 0.7021916201942432, 0.7493247294043663, 0.7612078395235782, 0.7258140079351267, 0.7702140224908643, 0.7694016854766047, 0.1558293712663843, 0.16952539907564024, 0.15500836212341385, 0.16760796221710295, 0.15369896446585385, 0.11650237222141646, 0.17028563329755075, 0.15512683708234742, 0.11755124859201116, 0.09576583039739273, 0.113237172198565, 0.11168285560466229, 0.15001901458080813, 0.09976984771674302, 0.12754985955812592, 0.13606520116448317, 0.12514748065946113, 0.13847225726167667, 0.9873688743370982, 0.9814716245799355, 0.9879502915419965, 0.9609871320099287, 0.9851533696055949, 0.9757720011713976, 0.980068160703781, 0.9703775265235929, 0.981012016711912, 0.5781253042945305, 0.6659958765746521, 0.6239612675060382, 0.6176015918070656, 0.692267722512819, 0.6682938104770191, 0.6701179903756327, 0.670259716027825, 0.6563928399996756, 0.823693665252568, 0.8232488493947172, 0.8266126509035223, 0.8807509796042303, 0.2051680331327701, 0.8318548744354233, 0.8639922159775346, 0.17492712821041545, 0.8691781935049312, 0.5465787869673562, 0.48572292624555347, 0.5397896621243721, 0.6200577017646595, 0.562181565213614, 0.5519915748468892, 0.13133453193656264, 0.1279426880836958, 0.5012045930144267, 0.2822574612706966, 0.326614070373236, 0.20008896557818412, 0.39190955301011676, 0.5221148425611646, 0.5581780033640265, 0.5239132774231019, 0.4247214150063684, 0.38686110480359326, 0.26663944584687205, 0.08640669429268177, 0.2903262022774926, 0.27145290307784276, 0.32900811310869227, 0.21600781300940497, 0.2915690782476037, 0.2719843177019725, 0.10068277041864182, 0.41247445726605414, 0.4295687925389102, 0.3485325829745901, 0.44363642821748694, 0.4491014037962192, 0.278471869523933, 0.3594201078822957, 0.4066683341211872, 0.5134279419100216, 0.14134222350906545, 0.1838862566270273, 0.2955305691922372, 0.07967671096796203, 0.2959996434018588, 0.12127956357165837, 0.1019501045120993, 0.15784238702130604, 0.07355138030918329, 0.29997348788165135, 0.19979869759468916, 0.3355120996662433, 0.34975986249218893, 0.2861347353254613, 0.3304953932426984, 0.29083869721365796, 0.27067986234094377, 0.2415866168402827, 0.722388788462094, 0.7892018382741354, 0.7572847799460596, 0.7065341142862516, 0.7072856235108596, 0.7002006734521614, 0.6994017361983709, 0.7902052453162502, 0.7138050019614609, 0.1537321863988167, 0.10593404142623453, 0.1404747294882338, 0.12908009329741488, 0.10681800822512255, 0.1293739071834964, 0.142466825123438, 0.1165591150589742, 0.11239227133461571, 0.17389419530134764, 0.6915229673385119, 0.24432077778912042, 0.3896593901085398, 0.24645956009761494, 0.3630284380736649, 0.5846247541100347, 0.17068533859014112, 0.17589394579533368, 0.52833048716608, 0.3977699549920035, 0.49959598862805354, 0.5914110117427204, 0.641897596428205, 0.31302053044729117, 0.5946852620653239, 0.6302176241958725, 0.6486691727103928, 0.4164058137261627, 0.4258652958073096, 0.36522736179974125, 0.3354863790538476, 0.24285704738859026, 0.28660379051680984, 0.44865969278209106, 0.5051606566029239, 0.4819449147878827, 0.2333994591072227, 0.2076387691417675, 0.21670295278372265, 0.19283826568240325, 0.20796153793231564, 0.22855815711486138, 0.2293201094756988, 0.24273074755865864, 0.20544494901222277, 0.22026388866955027, 0.21462197296833152, 0.19768987768565682, 0.22026182823840124, 0.7849660315506785, 0.21585345057114214, 0.2010971468581484, 0.2206360299048924, 0.19535874844911016, 0.9187820180107786, 0.16453142489583783, 0.15428758697621303, 0.17265606183385385, 0.2015384980127246, 0.20141111429635883, 0.1738370540940667, 0.1762772187262952, 0.9145057758093598, 0.8664277741440173, 0.15715936839286881, 0.7870064935265029, 0.843778131896702, 0.21104965867375236, 0.8560542446417451, 0.10516003824402831, 0.16823963165518796, 0.865285149273201, 0.18984298743313888, 0.19656303629086247, 0.17205547853816516, 0.19469358159816486, 0.17837677513902672, 0.19066441698071046, 0.19526264417073158, 0.17790747237485882, 0.18892165813130868, 0.12958500509655735, 0.09245589031319268, 0.08334483634617262, 0.08200291819963645, 0.09271629857723873, 0.0827531791236299, 0.09270644524636096, 0.08713844422892325, 0.08944089740628824]}, "mutation_prompt": null}
{"id": "6f016a0f-a442-495f-8a08-8c249913a4d7", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        vel_max = (self.upper_bound - self.lower_bound) / 2\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.98\n            inertia_weight = 0.9 - 0.5 * (evals / self.budget)  # Dynamic inertia weight\n            vel = inertia_weight * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel = np.clip(vel, -vel_max, vel_max)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                adaptive_F = self.F * (1 - evals / self.budget)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.95 + 0.05 * np.std(fitness) / np.max(fitness)\n            if np.std(fitness) < 1e-4:\n                vel[np.random.rand(self.pop_size, self.dim) < 0.15] = np.random.uniform(-1, 1)\n\n            if np.random.rand() < 0.05:\n                gbest_pos += np.random.normal(0, 0.1 * (1 - evals / self.budget), self.dim)\n                gbest_pos = np.clip(gbest_pos, self.lower_bound, self.upper_bound)\n                self.F = np.clip(self.F * 0.99, 0.4, 0.8)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhance PSODE by introducing a dynamic inertia weight and enhanced exploration-exploitation balance.", "configspace": "", "generation": 99, "fitness": 0.35195212667850695, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "c175d841-278b-4665-b5fe-ae3bdf018b13", "metadata": {"aucs": [0.7353949023225927, 0.7651554551504598, 0.7108005470834783, 0.7623679433159232, 0.7469653964621756, 0.7398537619613563, 0.7483596560914911, 0.7735704617875709, 0.7448919821815836, 0.586410635664162, 0.5757488304155065, 0.5170772266337108, 0.5731612028215887, 0.5741621556997039, 0.5366069738337182, 0.5591836988319805, 0.5895201960487695, 0.5301162604147189, 0.10147169115598276, 0.13114465750440396, 0.10191635339022598, 0.10716875085620536, 0.11894782791444614, 0.1114950296696341, 0.10830173928589426, 0.1516340989306898, 0.10516139633154542, 0.11285737456459322, 0.09468475408766552, 0.11128223166789997, 0.10787489592984911, 0.09568874230914748, 0.09116713739716598, 0.1127206757988084, 0.09511830700002433, 0.0986306378617714, 0.9867336569555663, 0.9862238998248939, 0.9869306801050952, 0.9642589832245935, 0.9845519277511637, 0.9803396623074506, 0.9865206824193268, 0.981143881667087, 0.9860789942330118, 0.48958845724118416, 0.45092618317739286, 0.46835050327729166, 0.5157935102277034, 0.5353688914211374, 0.4816362426518829, 0.48235465882199946, 0.4770991644265994, 0.43821332398637824, 0.7129145084914599, 0.7108922968909032, 0.7056893586630573, 0.7111069182802096, 0.6742193298217147, 0.7279902559904705, 0.6747174482991498, 0.6727815584892749, 0.6814645204397909, 0.39081236482135784, 0.3259990748994013, 0.3505830979656437, 0.367323941121094, 0.29241390916004406, 0.1936163419123833, 0.30675483197553755, 0.30953332873575257, 0.33779266789302764, 0.2869919339477375, 0.11209632591341323, 0.24922523830483267, 0.37636299149654373, 0.300523834093109, 0.34036022794945964, 0.24894050772750798, 0.2888534266283014, 0.30702885035586736, 0.27565606313487034, 0.2546442867348363, 0.2163585717413744, 0.05606188289744529, 0.2912293371150617, 0.1824101545374205, 0.2524086878677049, 0.2601010337523758, 0.2366813528318018, 0.38284605976157293, 0.30892895527513975, 0.41201760826740186, 0.23914210249537782, 0.29334046043359796, 0.3252813000440353, 0.39165906639246684, 0.46055843950940234, 0.41830422510406884, 0.07668453293227373, 0.08392174788726625, 0.06335893844892193, 0.07770850458072842, 0.09767529977553546, 0.1362221582942651, 0.08125593545403043, 0.1591573827609718, 0.07722104617125591, 0.2556487879747047, 0.23394230626400336, 0.25964148277575083, 0.25233440167116783, 0.23440857107158597, 0.23650715671142553, 0.2558431388365089, 0.21724418511243615, 0.20725663183800636, 0.6164910917983717, 0.6041441362287713, 0.5906111951207477, 0.6481733901397941, 0.6484419143093216, 0.5828322973464868, 0.5604493424160305, 0.5639925116067084, 0.5892988632338088, 0.09352800112955406, 0.08889241840270878, 0.14585117169864592, 0.11169309475560385, 0.1003733122717897, 0.11711648146756548, 0.1037955891422283, 0.10947761868107975, 0.10479331941186665, 0.16662506350245643, 0.1973905948703184, 0.20720535770143467, 0.14387181437269503, 0.23203582514171694, 0.15507983192993002, 0.19424397030777785, 0.17652013127194766, 0.20982614613939388, 0.42975417724828047, 0.4665172691028322, 0.4124586565965346, 0.414848823887637, 0.37659611315945385, 0.43040425185483344, 0.4408942194733029, 0.4517210339407851, 0.4221687360622557, 0.3504227592042659, 0.3195434882216678, 0.34504998409566223, 0.3147917230866717, 0.23912858950792215, 0.3313169009796104, 0.3753899628383476, 0.42305641650693293, 0.36570625289874004, 0.21331184169880402, 0.2187640886745834, 0.1989073042958902, 0.1834565803076681, 0.20109264578765396, 0.19404024820412447, 0.20609859399482555, 0.19327004303128392, 0.19354361315280189, 0.4544558383630458, 0.19427166680080754, 0.3631426403621639, 0.21848139402053135, 0.34409091814594717, 0.20602446927845974, 0.1901726653050757, 0.18729977873526127, 0.4313564553425041, 0.8322763143722272, 0.752040699248836, 0.15230405021796456, 0.7913071319672518, 0.1977585320455182, 0.7668573338157899, 0.12075249931000709, 0.16891478224275747, 0.20633854770885451, 0.7612024255640548, 0.16853156453253082, 0.19503325976796504, 0.20515603001545069, 0.20365989278743413, 0.7089814911849669, 0.21025796486098758, 0.7344278589064961, 0.20742621531733407, 0.1916221104577226, 0.1959491271745366, 0.17630241485804277, 0.1919682544422675, 0.19548593938543612, 0.20223931505330284, 0.18576457774617428, 0.18366513805349594, 0.20116268711356633, 0.0859360243388888, 0.07845924233245372, 0.07922681547895427, 0.07719605453374612, 0.08166404554824891, 0.08531521293904976, 0.08571538719882388, 0.07582967994630085, 0.07124833470410263]}, "mutation_prompt": null}
