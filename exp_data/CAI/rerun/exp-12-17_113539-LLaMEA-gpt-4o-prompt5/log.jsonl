{"id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "A hybrid Particle-Swarm and Differential Evolution algorithm (PSO-DE) that adaptively combines exploration and exploitation strategies for efficient optimization.", "configspace": "", "generation": 0, "fitness": 0.3636941960443437, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8882490433803721, 0.8886812168197753, 0.8756484508310929, 0.879845380980669, 0.887621312597673, 0.879023458528948, 0.8854757889937731, 0.8823164400539896, 0.877842894069337, 0.7783232852217414, 0.7631233074771934, 0.7522762266725351, 0.7606524320279903, 0.04767172642977169, 0.7672281691864804, 0.5523494689568504, 0.7648352100554479, 0.05021706721832908, 0.1442597601973814, 0.1818415076502362, 0.12704433381802804, 0.11745674927300565, 0.1303939756527971, 0.12677119038285778, 0.15685143739414942, 0.15516235920208932, 0.17665653973883344, 0.13826655061622295, 0.13034837842953106, 0.13191666807009483, 0.12125627853424503, 0.13632481919460882, 0.11172716365174784, 0.11506056853862445, 0.13063007168219432, 0.11831308196130408, 0.9906208246499979, 0.9859810912373715, 0.9891239033144558, 0.9807530468257812, 0.9753130159899198, 0.9754977794512648, 0.9809334761753365, 0.9827559255790027, 0.9855753490928311, 0.41399557165652534, 0.4017039691569747, 0.47143629464939363, 0.43827044483830846, 0.46526732483640043, 0.43504136864550735, 0.43219869720015314, 0.3976359450846617, 0.29592981815817865, 0.7938555978264374, 0.7631410203302386, 0.3741809516950707, 0.8624305313622544, 0.8501502369748275, 0.7997641600611144, 0.6911227716987458, 0.6847562231792835, 0.7038681231169466, 0.4899507612011452, 0.3423228451014847, 0.37945673849898987, 0.3444960069107771, 0.35605496008041504, 0.12962050029233763, 0.1309077461574477, 0.28368377105389764, 0.35613448928517033, 0.35598197091444406, 0.12273108980201664, 0.3640623946007965, 0.3325210564427945, 0.12002486736317808, 0.3370986815489544, 0.3942791893394737, 0.2605245026547276, 0.338430494072111, 0.13813974401435902, 0.15103743094025945, 0.16662043838612717, 0.18050456172606066, 0.12187912992029837, 0.1308035311133552, 0.14265914905468324, 0.16292752381148057, 0.15106793235661808, 0.29747257143162953, 0.28922073566069073, 0.2663888958676275, 0.26869955667695167, 0.21741894879805446, 0.13348998754527697, 0.28441508511645774, 0.20647962813841692, 0.32843222851930554, 0.20713307200612363, 0.5084352486050154, 0.15388291531320142, 0.1839029135895658, 0.07803802310179908, 0.1236343927010426, 0.11015112198444532, 0.07055199373530652, 0.10803437571402463, 0.20851718241371153, 0.21133579178284112, 0.20123493356628608, 0.1952944780710243, 0.24548873127616289, 0.3165299765583244, 0.2670879632792398, 0.1670447180184177, 0.08280962537513947, 0.6596469246506325, 0.6308984466231773, 0.6222676419676048, 0.6541496536451932, 0.6199903472264303, 0.5721177925503795, 0.5932271305932271, 0.6232109170870231, 0.6074785712424511, 0.11883650085037512, 0.13121743918939643, 0.12622265324852522, 0.1142373658229735, 0.10638894905552676, 0.16266897375317735, 0.08915681526249208, 0.12249278877298642, 0.18210198004805378, 0.17296661805350866, 0.2064578171380732, 0.18777438823058323, 0.2972324835553267, 0.17393157537401915, 0.14514462096424174, 0.2180945951997031, 0.18933284213838886, 0.2065606568691596, 0.5392640609510768, 0.591463133374389, 0.543743090545656, 0.4876374883892307, 0.4767782791448023, 0.6011765418993208, 0.43859844860928565, 0.5432543122618441, 0.5639576100182608, 0.40444646685264474, 0.4071208657198163, 0.307285904478795, 0.30540166635811916, 0.27121043705081027, 0.2750996115424006, 0.3991231463595146, 0.44663948542410103, 0.3958468753872523, 0.2061982451509432, 0.18801268659330195, 0.20305328698800262, 0.1864115807394916, 0.20461371243413373, 0.20166183131444837, 0.18920937907498014, 0.20375623881635585, 0.18980284468592934, 0.23117341771203437, 0.24357888841782316, 0.5616633478753695, 0.7245807688599282, 0.19876072473301787, 0.4725760477448362, 0.2170392418289292, 0.22488040403333465, 0.24474991330741624, 0.1872240155394156, 0.1867624250094252, 0.15371934101053752, 0.8977824692702083, 0.20140949446374778, 0.20151383576028536, 0.1687242096968422, 0.1698085110068167, 0.9009695949888991, 0.793607979829145, 0.15618087589175633, 0.5790522853345408, 0.2091343531541764, 0.8279950726153031, 0.6948161451718415, 0.1042405536783837, 0.21040097723893803, 0.8218739800021347, 0.18000962891408545, 0.19971119814906757, 0.20023193503577996, 0.18392455739768265, 0.1749874012571503, 0.1910916852737281, 0.1839346904964082, 0.1768775708027015, 0.16982169041801043, 0.08458934680252228, 0.06999082145035229, 0.09044835841508159, 0.07506705577736705, 0.08947882154037157, 0.09875748936845663, 0.08212096859263307, 0.07436919440615153, 0.07572896026167686]}, "mutation_prompt": null}
{"id": "3b022fb2-5693-4373-ab5b-a1b2ed99495e", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Adaptive inertia weight\n            self.w = 0.9 - (0.5 * evals / self.budget)\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSO-DE by introducing adaptive inertia weight for improved convergence rate.", "configspace": "", "generation": 1, "fitness": 0.27487044760374063, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6450066357348168, 0.6556741162725426, 0.6641880074114157, 0.6422782636982811, 0.6837012742981247, 0.6288656623397595, 0.6457423114107598, 0.686447327617414, 0.6795191179213853, 0.46959284827885317, 0.4672678617578847, 0.4822802397034275, 0.4681490104785152, 0.44592178129903537, 0.05686573915991955, 0.4205404704892546, 0.4820715741789676, 0.46016836213987167, 0.1274074872381008, 0.10126566633121892, 0.1038465189389699, 0.07776497958186246, 0.0864463053236999, 0.08068468386295158, 0.08123215447427778, 0.1083906587871839, 0.08629907829289019, 0.10187080424416073, 0.10184439293328018, 0.07204304954442708, 0.07308075664940372, 0.07779315403584097, 0.07906274869634067, 0.08741585669053753, 0.06919051603792281, 0.09657649731850071, 0.9868409305302925, 0.9866682706662133, 0.9913363341508226, 0.9835210938526167, 0.9855327703130672, 0.973615109061198, 0.9863503262284242, 0.9830938663083006, 0.9858046325155919, 0.2622022322675507, 0.05843608801785505, 0.2849986447151951, 0.14240250165237844, 0.32635552602486273, 0.14640312243878906, 0.2866716206022165, 0.2704184411460242, 0.2670858643358235, 0.4961527161269229, 0.43227976661236367, 0.632913516706842, 0.5222814703499539, 0.6064003719964626, 0.5632596550606709, 0.5580897911038232, 0.4973468338700666, 0.6066679836352784, 0.17610239007886708, 0.1800553250391851, 0.18168534677475334, 0.2249876164185174, 0.2116700931179134, 0.18332231834049728, 0.17781577022563866, 0.1715071569932921, 0.2086131993784024, 0.20344555110703866, 0.010156320201082591, 0.21188094803497604, 0.22507303375026733, 0.18758973833584214, 0.1891757108630714, 0.19427305250777205, 0.15829803315851443, 0.17226605503218362, 0.13200545528525176, 0.12853313639061348, 0.10993094351373567, 0.21086680260109802, 0.09203937757173042, 0.08986405994989743, 0.11457048472521314, 0.08788455187916788, 0.10722561877909298, 0.27210228919053137, 0.2280526592335026, 0.24162163145586468, 0.24585204894118406, 0.22821164071309608, 0.17751215660023467, 0.3137334531433996, 0.30328725022914627, 0.23938286409241127, 0.004231373418962514, 0.02445876733026109, 0.023262211055195214, 0.04538974940081153, 0.05817600356560182, 0.023323393870384512, 0.013576145997712064, 0.017025631721576118, 0.024800210991984595, 0.1238065217292571, 0.12872697873966843, 0.14268594879549779, 0.13351096076345714, 0.1392115374306956, 0.13172349301705888, 0.14604595671011378, 0.14193485787773474, 0.1503241884764882, 0.4547489726412206, 0.4612377397023524, 0.4299468136852027, 0.4878846790200072, 0.4588990844243477, 0.46332058665545217, 0.448879485681551, 0.45938875824339886, 0.4674807534074562, 0.0827840018828343, 0.09354141382168657, 0.08806462858972863, 0.0848204273819183, 0.08626802578892456, 0.08770235627218048, 0.09042180583612047, 0.08274225592619111, 0.08288630982027878, 0.1760546581536333, 0.2466812005341371, 0.1631925492768641, 0.29018257502652456, 0.2089036822220932, 0.16374828705721334, 0.269937126542528, 0.1759527383141134, 0.15073488203697416, 0.3065979407362257, 0.3139883683428646, 0.33708903784341304, 0.2680470436109479, 0.32346481318371356, 0.31589387950560344, 0.36595490145002163, 0.3398407549495932, 0.35040097427326977, 0.2028725647366909, 0.21928842561382, 0.19434655452192562, 0.1822184881359462, 0.21900258017235041, 0.20310775218405075, 0.24574452029226546, 0.22042535260500573, 0.2076965789430878, 0.17745502626206167, 0.171704388009988, 0.1815776941109759, 0.16930379732376855, 0.1752524647784689, 0.18359907666304132, 0.17736187882391385, 0.22021983378984122, 0.17271265650490408, 0.1794161464127868, 0.17702227524250647, 0.1728478772705634, 0.1830206189279021, 0.1781575905289141, 0.17841830019941518, 0.17791690807727156, 0.1852532253118495, 0.17391260209917314, 0.17769741859966237, 0.6440241426424878, 0.15351688686965992, 0.17573775471347086, 0.6055965473197636, 0.1967195566028942, 0.19185291773948587, 0.16799243717922474, 0.5798557071563748, 0.637996833560678, 0.5624854527547768, 0.5700951242919331, 0.20309081485400315, 0.6251807709177855, 0.5954625891550535, 0.10496358504407566, 0.21083731946877393, 0.6698090480180248, 0.19250057586772795, 0.1914882253118837, 0.1851151806685195, 0.17949910862620855, 0.2085238304983723, 0.18248445302684835, 0.18037091633264113, 0.1946861884246337, 0.1810978538800494, 0.06981811570456087, 0.0621765345855021, 0.06200749303123032, 0.0733775608391597, 0.061444150923368746, 0.06838771772573304, 0.0641266503429142, 0.07494239281949955, 0.07708272952106088]}, "mutation_prompt": null}
{"id": "aa1e4dca-ba95-4487-b5d8-9cbb2141c344", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        iter_count = 0\n\n        while evals < self.budget:\n            # Adaptive inertia weight\n            self.w = 0.9 - 0.5 * (evals / self.budget)\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "A refined PSO-DE hybrid algorithm incorporating adaptive inertia weight for improved convergence.", "configspace": "", "generation": 2, "fitness": 0.27487044760374063, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6450066357348168, 0.6556741162725426, 0.6641880074114157, 0.6422782636982811, 0.6837012742981247, 0.6288656623397595, 0.6457423114107598, 0.686447327617414, 0.6795191179213853, 0.46959284827885317, 0.4672678617578847, 0.4822802397034275, 0.4681490104785152, 0.44592178129903537, 0.05686573915991955, 0.4205404704892546, 0.4820715741789676, 0.46016836213987167, 0.1274074872381008, 0.10126566633121892, 0.1038465189389699, 0.07776497958186246, 0.0864463053236999, 0.08068468386295158, 0.08123215447427778, 0.1083906587871839, 0.08629907829289019, 0.10187080424416073, 0.10184439293328018, 0.07204304954442708, 0.07308075664940372, 0.07779315403584097, 0.07906274869634067, 0.08741585669053753, 0.06919051603792281, 0.09657649731850071, 0.9868409305302925, 0.9866682706662133, 0.9913363341508226, 0.9835210938526167, 0.9855327703130672, 0.973615109061198, 0.9863503262284242, 0.9830938663083006, 0.9858046325155919, 0.2622022322675507, 0.05843608801785505, 0.2849986447151951, 0.14240250165237844, 0.32635552602486273, 0.14640312243878906, 0.2866716206022165, 0.2704184411460242, 0.2670858643358235, 0.4961527161269229, 0.43227976661236367, 0.632913516706842, 0.5222814703499539, 0.6064003719964626, 0.5632596550606709, 0.5580897911038232, 0.4973468338700666, 0.6066679836352784, 0.17610239007886708, 0.1800553250391851, 0.18168534677475334, 0.2249876164185174, 0.2116700931179134, 0.18332231834049728, 0.17781577022563866, 0.1715071569932921, 0.2086131993784024, 0.20344555110703866, 0.010156320201082591, 0.21188094803497604, 0.22507303375026733, 0.18758973833584214, 0.1891757108630714, 0.19427305250777205, 0.15829803315851443, 0.17226605503218362, 0.13200545528525176, 0.12853313639061348, 0.10993094351373567, 0.21086680260109802, 0.09203937757173042, 0.08986405994989743, 0.11457048472521314, 0.08788455187916788, 0.10722561877909298, 0.27210228919053137, 0.2280526592335026, 0.24162163145586468, 0.24585204894118406, 0.22821164071309608, 0.17751215660023467, 0.3137334531433996, 0.30328725022914627, 0.23938286409241127, 0.004231373418962514, 0.02445876733026109, 0.023262211055195214, 0.04538974940081153, 0.05817600356560182, 0.023323393870384512, 0.013576145997712064, 0.017025631721576118, 0.024800210991984595, 0.1238065217292571, 0.12872697873966843, 0.14268594879549779, 0.13351096076345714, 0.1392115374306956, 0.13172349301705888, 0.14604595671011378, 0.14193485787773474, 0.1503241884764882, 0.4547489726412206, 0.4612377397023524, 0.4299468136852027, 0.4878846790200072, 0.4588990844243477, 0.46332058665545217, 0.448879485681551, 0.45938875824339886, 0.4674807534074562, 0.0827840018828343, 0.09354141382168657, 0.08806462858972863, 0.0848204273819183, 0.08626802578892456, 0.08770235627218048, 0.09042180583612047, 0.08274225592619111, 0.08288630982027878, 0.1760546581536333, 0.2466812005341371, 0.1631925492768641, 0.29018257502652456, 0.2089036822220932, 0.16374828705721334, 0.269937126542528, 0.1759527383141134, 0.15073488203697416, 0.3065979407362257, 0.3139883683428646, 0.33708903784341304, 0.2680470436109479, 0.32346481318371356, 0.31589387950560344, 0.36595490145002163, 0.3398407549495932, 0.35040097427326977, 0.2028725647366909, 0.21928842561382, 0.19434655452192562, 0.1822184881359462, 0.21900258017235041, 0.20310775218405075, 0.24574452029226546, 0.22042535260500573, 0.2076965789430878, 0.17745502626206167, 0.171704388009988, 0.1815776941109759, 0.16930379732376855, 0.1752524647784689, 0.18359907666304132, 0.17736187882391385, 0.22021983378984122, 0.17271265650490408, 0.1794161464127868, 0.17702227524250647, 0.1728478772705634, 0.1830206189279021, 0.1781575905289141, 0.17841830019941518, 0.17791690807727156, 0.1852532253118495, 0.17391260209917314, 0.17769741859966237, 0.6440241426424878, 0.15351688686965992, 0.17573775471347086, 0.6055965473197636, 0.1967195566028942, 0.19185291773948587, 0.16799243717922474, 0.5798557071563748, 0.637996833560678, 0.5624854527547768, 0.5700951242919331, 0.20309081485400315, 0.6251807709177855, 0.5954625891550535, 0.10496358504407566, 0.21083731946877393, 0.6698090480180248, 0.19250057586772795, 0.1914882253118837, 0.1851151806685195, 0.17949910862620855, 0.2085238304983723, 0.18248445302684835, 0.18037091633264113, 0.1946861884246337, 0.1810978538800494, 0.06981811570456087, 0.0621765345855021, 0.06200749303123032, 0.0733775608391597, 0.061444150923368746, 0.06838771772573304, 0.0641266503429142, 0.07494239281949955, 0.07708272952106088]}, "mutation_prompt": null}
{"id": "4ade1171-a19b-4789-afa3-0e113940b1aa", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Adaptive inertia weight\n            self.w = 0.9 - 0.5 * (evals / self.budget)\n            \n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                # Adaptive mutation strategy\n                self.CR = 0.9 * (1 - evals / self.budget) + 0.1\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by incorporating adaptive inertia weight and mutation strategy for improved convergence.", "configspace": "", "generation": 3, "fitness": 0.26238997191337243, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6482199004525748, 0.6626920756529614, 0.6743816203437631, 0.6523402479573208, 0.6828825307176583, 0.7034579806457048, 0.677589246868723, 0.6689742967931667, 0.6943568941857386, 0.47907549169147234, 0.4430931719222777, 0.4897176723793446, 0.44540609318379587, 0.46938901714694214, 0.502790544786909, 0.5065916498596323, 0.4759730041959893, 0.5092243569068964, 0.10195377646807124, 0.1114791399040832, 0.09464568700803844, 0.1406696002280442, 0.13259035313663992, 0.10442002717251964, 0.09069993135969667, 0.13065642703725044, 0.09807225878305925, 0.11496682823852356, 0.10081530233266511, 0.0984783462372929, 0.08932922518147046, 0.10219740649975284, 0.09217649985138321, 0.08543909668907324, 0.08402707795773245, 0.11976944528766631, 0.9860682223404079, 0.9864382473514827, 0.9913360744092493, 0.9835568706208471, 0.9854692907359378, 0.9718442032617126, 0.9864254542537673, 0.9814302363221067, 0.9839099389237757, 0.30557292183181184, 0.2934823854311026, 0.2929382976220477, 0.3181852283571247, 0.15626394687544765, 0.3512016846874191, 0.2935105628240342, 0.3219610494661671, 0.31297395959125596, 0.4572450248631612, 0.4630857020555461, 0.3006176837859612, 0.33471711421361094, 0.5799104867907272, 0.2742011625941829, 0.5104005798642683, 0.47289562338360847, 0.29099839147405626, 0.13694291151731053, 0.1568412957158103, 0.14114539043524388, 0.15718315844968278, 0.1367576626700009, 0.15315265498530695, 0.16519473798749618, 0.13718671133288896, 0.15892513216957416, 0.1671166464401651, 0.015987441288667137, 0.12767329748032696, 0.17762343924129687, 0.14337161355607264, 0.1625430832838134, 0.16926687652677297, 0.18344667550252702, 0.154409580916969, 0.023497133935299286, 0.004884250352776842, 0.011099525659600262, 0.05161712427253351, 0.009167577153373019, 9.999999999998899e-05, 0.022134542170293536, 0.009992263510794852, 0.009785764653268636, 0.17133848155118991, 0.10814561383658217, 0.11985857513364229, 0.09921437037141201, 0.1176490280227066, 0.104052235085215, 0.165409507802732, 0.17103610425732318, 0.16916501769819992, 0.032916936182089906, 0.015092960601217786, 0.07334260204827425, 0.03517155753946777, 0.02379358866754555, 0.03310108730587291, 0.07579161131423551, 0.04411596432376719, 0.045103515952642725, 0.1376052916834093, 0.1343404036705057, 0.11310021113182411, 0.11702251056365132, 0.1758184629422882, 0.18700537249617255, 0.18995140387221243, 0.12518439583893648, 0.11426162036207299, 0.4342646616337684, 0.45553792619068645, 0.44579240519553776, 0.46792603970070135, 0.4635687700400608, 0.45549077113681213, 0.452989340235461, 0.448765789449766, 0.4541869618330313, 0.08589874457104452, 0.09315007313612367, 0.0833029718746513, 0.09127892998919906, 0.08730663063556898, 0.10575409787436618, 0.07959878536141474, 0.08598840363511717, 0.09043398657311186, 0.18314013322949863, 0.16582044285958442, 0.15472713302595498, 0.16214405952935318, 0.14663136909671481, 0.1641964591997077, 0.18017193937845588, 0.17705025667310526, 0.19180533163715174, 0.277481747888667, 0.28293555124837133, 0.3248033731278398, 0.2742172244245482, 0.32642822993382403, 0.3073277475821117, 0.33923997279295415, 0.3404916192788304, 0.37151598962223287, 0.2577844303693232, 0.22552024872464183, 0.231565512358183, 0.21494474417499598, 0.19465344766505244, 0.25792166191777555, 0.2716685436895496, 0.20897832298641794, 0.2540693188182426, 0.22125168686432317, 0.1789467420060069, 0.17802518022309255, 0.18782083105000458, 0.17364693654278796, 0.18247306988019663, 0.1883127810849301, 0.17559059207992667, 0.18307140390538157, 0.18924738990328172, 0.20228272186309937, 0.18247482443721286, 0.2029465037590079, 0.19087918115090075, 0.19331354848336646, 0.17916275930697378, 0.2053609955593232, 0.18764297279167452, 0.46892531312072827, 0.2501076437312465, 0.15342894476105207, 0.5716201582979054, 0.19533526101288112, 0.1970556171921075, 0.5419273754322346, 0.16788611933889186, 0.6630956156553662, 0.41907370542757094, 0.15604451748309678, 0.3521972686762982, 0.43252318243583276, 0.46710941959557273, 0.5726234982661242, 0.10495011571521151, 0.20474144345160983, 0.4711072731599455, 0.1937642365996255, 0.18432775661511358, 0.203234743954547, 0.1964736429602043, 0.18855536589685207, 0.1771558112086774, 0.2060032665622472, 0.18758359600328245, 0.1900646947232555, 0.07605443465606043, 0.06669280595005345, 0.06724192195731471, 0.07493582119450093, 0.07862709124168654, 0.07001042771894339, 0.0636693984396185, 0.07293791755200296, 0.06741081565207552]}, "mutation_prompt": null}
{"id": "d3210f3b-b074-4a0c-97fc-5984690e2840", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n            \n            # Random restart mechanism\n            if evals == self.budget // 2:  # Triggers restart halfway through budget\n                pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n                vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n                pbest_pos = np.copy(pos)\n                pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n                gbest_pos = pbest_pos[np.argmin(pbest_val)]\n                gbest_val = np.min(pbest_val)\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced a random restart mechanism to enhance exploration and avoid local optima.", "configspace": "", "generation": 4, "fitness": 0.3636941960443437, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.8882490433803721, 0.8886812168197753, 0.8756484508310929, 0.879845380980669, 0.887621312597673, 0.879023458528948, 0.8854757889937731, 0.8823164400539896, 0.877842894069337, 0.7783232852217414, 0.7631233074771934, 0.7522762266725351, 0.7606524320279903, 0.04767172642977169, 0.7672281691864804, 0.5523494689568504, 0.7648352100554479, 0.05021706721832908, 0.1442597601973814, 0.1818415076502362, 0.12704433381802804, 0.11745674927300565, 0.1303939756527971, 0.12677119038285778, 0.15685143739414942, 0.15516235920208932, 0.17665653973883344, 0.13826655061622295, 0.13034837842953106, 0.13191666807009483, 0.12125627853424503, 0.13632481919460882, 0.11172716365174784, 0.11506056853862445, 0.13063007168219432, 0.11831308196130408, 0.9906208246499979, 0.9859810912373715, 0.9891239033144558, 0.9807530468257812, 0.9753130159899198, 0.9754977794512648, 0.9809334761753365, 0.9827559255790027, 0.9855753490928311, 0.41399557165652534, 0.4017039691569747, 0.47143629464939363, 0.43827044483830846, 0.46526732483640043, 0.43504136864550735, 0.43219869720015314, 0.3976359450846617, 0.29592981815817865, 0.7938555978264374, 0.7631410203302386, 0.3741809516950707, 0.8624305313622544, 0.8501502369748275, 0.7997641600611144, 0.6911227716987458, 0.6847562231792835, 0.7038681231169466, 0.4899507612011452, 0.3423228451014847, 0.37945673849898987, 0.3444960069107771, 0.35605496008041504, 0.12962050029233763, 0.1309077461574477, 0.28368377105389764, 0.35613448928517033, 0.35598197091444406, 0.12273108980201664, 0.3640623946007965, 0.3325210564427945, 0.12002486736317808, 0.3370986815489544, 0.3942791893394737, 0.2605245026547276, 0.338430494072111, 0.13813974401435902, 0.15103743094025945, 0.16662043838612717, 0.18050456172606066, 0.12187912992029837, 0.1308035311133552, 0.14265914905468324, 0.16292752381148057, 0.15106793235661808, 0.29747257143162953, 0.28922073566069073, 0.2663888958676275, 0.26869955667695167, 0.21741894879805446, 0.13348998754527697, 0.28441508511645774, 0.20647962813841692, 0.32843222851930554, 0.20713307200612363, 0.5084352486050154, 0.15388291531320142, 0.1839029135895658, 0.07803802310179908, 0.1236343927010426, 0.11015112198444532, 0.07055199373530652, 0.10803437571402463, 0.20851718241371153, 0.21133579178284112, 0.20123493356628608, 0.1952944780710243, 0.24548873127616289, 0.3165299765583244, 0.2670879632792398, 0.1670447180184177, 0.08280962537513947, 0.6596469246506325, 0.6308984466231773, 0.6222676419676048, 0.6541496536451932, 0.6199903472264303, 0.5721177925503795, 0.5932271305932271, 0.6232109170870231, 0.6074785712424511, 0.11883650085037512, 0.13121743918939643, 0.12622265324852522, 0.1142373658229735, 0.10638894905552676, 0.16266897375317735, 0.08915681526249208, 0.12249278877298642, 0.18210198004805378, 0.17296661805350866, 0.2064578171380732, 0.18777438823058323, 0.2972324835553267, 0.17393157537401915, 0.14514462096424174, 0.2180945951997031, 0.18933284213838886, 0.2065606568691596, 0.5392640609510768, 0.591463133374389, 0.543743090545656, 0.4876374883892307, 0.4767782791448023, 0.6011765418993208, 0.43859844860928565, 0.5432543122618441, 0.5639576100182608, 0.40444646685264474, 0.4071208657198163, 0.307285904478795, 0.30540166635811916, 0.27121043705081027, 0.2750996115424006, 0.3991231463595146, 0.44663948542410103, 0.3958468753872523, 0.2061982451509432, 0.18801268659330195, 0.20305328698800262, 0.1864115807394916, 0.20461371243413373, 0.20166183131444837, 0.18920937907498014, 0.20375623881635585, 0.18980284468592934, 0.23117341771203437, 0.24357888841782316, 0.5616633478753695, 0.7245807688599282, 0.19876072473301787, 0.4725760477448362, 0.2170392418289292, 0.22488040403333465, 0.24474991330741624, 0.1872240155394156, 0.1867624250094252, 0.15371934101053752, 0.8977824692702083, 0.20140949446374778, 0.20151383576028536, 0.1687242096968422, 0.1698085110068167, 0.9009695949888991, 0.793607979829145, 0.15618087589175633, 0.5790522853345408, 0.2091343531541764, 0.8279950726153031, 0.6948161451718415, 0.1042405536783837, 0.21040097723893803, 0.8218739800021347, 0.18000962891408545, 0.19971119814906757, 0.20023193503577996, 0.18392455739768265, 0.1749874012571503, 0.1910916852737281, 0.1839346904964082, 0.1768775708027015, 0.16982169041801043, 0.08458934680252228, 0.06999082145035229, 0.09044835841508159, 0.07506705577736705, 0.08947882154037157, 0.09875748936845663, 0.08212096859263307, 0.07436919440615153, 0.07572896026167686]}, "mutation_prompt": null}
{"id": "cf69607d-d8be-4e9c-8d85-4049957fc8b7", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w = 0.4 + 0.5 * (1 - evals / self.budget) # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                np.random.shuffle(idxs) # Randomize order for mutation vector selection\n                a, b, c = idxs[:3]\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by introducing adaptive inertia weight and randomization in DE mutation vector selection to improve convergence.", "configspace": "", "generation": 5, "fitness": 0.27487040480269737, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6450066355861344, 0.6556741163774875, 0.6641880074353804, 0.6422782639348015, 0.6837012744708874, 0.6288656621043682, 0.6457423114090126, 0.6864473277364144, 0.6795191179664808, 0.469592724743366, 0.4672672374637338, 0.4822802485806458, 0.46814449494730126, 0.4459209057458162, 0.05686573915992654, 0.42053725028511757, 0.4820716533937328, 0.46016841343154635, 0.1274074872381008, 0.10126566633121892, 0.1038465189389699, 0.07776497958186246, 0.0864463053236999, 0.08068468386295158, 0.08123215447428866, 0.1083906587871839, 0.08629907829289019, 0.10187080424416073, 0.10184439293328018, 0.07204304954442708, 0.07308075664940372, 0.07779315403583864, 0.0790627486963571, 0.08741585669053753, 0.06919051603792281, 0.09657649731864204, 0.9868409305302925, 0.9866682706662133, 0.9913363341508226, 0.9835210938526167, 0.9855327703130672, 0.973615109061198, 0.9863503262284242, 0.9830938663083006, 0.9858046325155919, 0.26220223228323336, 0.058436088017871035, 0.2849986447166536, 0.1424025016524565, 0.32635552519306243, 0.14640312243898046, 0.28667162049701245, 0.27041844137963267, 0.26708586426908454, 0.4961527161269229, 0.43227976661236367, 0.632913516706842, 0.5222814703499539, 0.6064003719964626, 0.5632596550606709, 0.5580897911038232, 0.4973468338700666, 0.6066679836352784, 0.1761023901159675, 0.18005532519515932, 0.18168534680902926, 0.22498761643217613, 0.21167009309200036, 0.18332231841824187, 0.17781577022488726, 0.17150715698335484, 0.2086131993888639, 0.20344555112110962, 0.010156320201082591, 0.211880948031003, 0.22507303369617337, 0.18758973835681692, 0.18917571087000273, 0.1942730525088875, 0.15829803315387125, 0.17226605504070935, 0.1320054552686596, 0.12853313639714303, 0.10993094350550003, 0.21086680261315816, 0.09203937762775805, 0.08986405995261115, 0.11457048472377429, 0.08788455187378807, 0.10722561878474712, 0.27210228919262314, 0.22805265912918016, 0.24162163144936977, 0.24585204891857837, 0.22821164068834565, 0.17751215660054365, 0.3137334531893705, 0.303287250144075, 0.23938286415391763, 0.004231373419280482, 0.024458767328710884, 0.02326221104723647, 0.04538974939828766, 0.05817600371248177, 0.023323393869865372, 0.013576145998325462, 0.01702563170713034, 0.024800210989966542, 0.12380652173400508, 0.12872697873570282, 0.14268594876748497, 0.1335109607427929, 0.1392115373943743, 0.1317234930201283, 0.14604595679790522, 0.14193485788495508, 0.15032418847842233, 0.4547489727584231, 0.4612377390056144, 0.4299468166181888, 0.4878846789075395, 0.4588990649574415, 0.46332058486084315, 0.4488794853731466, 0.4593887576156074, 0.4674807578662281, 0.0827840018828343, 0.09354141382168657, 0.08806462858980235, 0.0848204273819183, 0.08626802578892456, 0.08770235627218048, 0.09042180583612047, 0.08274225592619111, 0.08288630982027878, 0.17605465815360744, 0.2466812005340948, 0.1631925492768811, 0.2901825752680066, 0.20890368222229094, 0.1637482870572038, 0.2699371265426973, 0.17595273831412883, 0.1507348820514136, 0.3065979407525061, 0.3139883683416491, 0.33708903785024835, 0.26804704361097687, 0.32346481317527775, 0.315893879503776, 0.36595489137796755, 0.33984075499432176, 0.3504009743284383, 0.20287256473642024, 0.21928842561381745, 0.19434655452229543, 0.18221848813599273, 0.219002580172464, 0.20310775218381572, 0.24574452029376193, 0.2204253526042056, 0.20769657894320548, 0.17745502626206144, 0.17170438800998522, 0.18157769411097613, 0.1693037973237711, 0.1752524647781769, 0.18359907666304942, 0.17736187882391352, 0.2202198337903043, 0.17271265650490386, 0.17941614641278647, 0.17702227524250136, 0.1728478772705634, 0.1830206189279021, 0.1781575905289141, 0.17841830019941518, 0.17791690807727156, 0.1852532253118495, 0.17391260209917314, 0.17769741859966237, 0.6440241426424299, 0.15351688686965992, 0.17573775471347086, 0.6055965473193025, 0.1967195566028942, 0.19185291773951763, 0.1679924371792224, 0.5798557071552728, 0.637996833567089, 0.562485452770467, 0.5700951242920229, 0.20309081485400315, 0.6251807709284827, 0.5954625891546582, 0.10496358504407566, 0.21083731946876694, 0.6698090480188692, 0.19250057586772795, 0.1914882253118837, 0.18511518066840404, 0.17949910862623697, 0.2085238304790339, 0.18248445302684835, 0.18037091633264046, 0.1946861884246326, 0.1810978538800494, 0.06981811570456087, 0.0621765345855021, 0.06200749303123032, 0.0733775608391597, 0.061444150923368746, 0.06838771772573304, 0.0641266503429142, 0.07494239281949955, 0.07708272952106088]}, "mutation_prompt": null}
{"id": "56e65b32-823e-41a1-bdcf-2214f9f0dc3a", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.9, c1=1.5, c2=1.5, F=0.8, CR=0.9):  # Line 3\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Update inertia weight\n            self.w = 0.4 + 0.5 * (self.budget - evals) / self.budget  # Line 26\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSO-DE with dynamic inertia weight to balance exploration and exploitation adaptively.", "configspace": "", "generation": 6, "fitness": 0.27487040479631186, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6450066355864006, 0.6556741163776845, 0.6641880074347549, 0.642278263933141, 0.6837012744711561, 0.6288656621045207, 0.6457423114100536, 0.6864473277363383, 0.6795191179670612, 0.4695927247403954, 0.46726723609902976, 0.4822802485830835, 0.4681444949557704, 0.4459209057433864, 0.05686573915992654, 0.4205372502274203, 0.4820716534376476, 0.4601684135940932, 0.1274074872381008, 0.10126566633121892, 0.1038465189389699, 0.07776497958186246, 0.0864463053236999, 0.08068468386295158, 0.08123215447428866, 0.1083906587871839, 0.08629907829289019, 0.10187080424416095, 0.10184439293328018, 0.07204304954442708, 0.07308075664940372, 0.07779315403583864, 0.0790627486963571, 0.08741585669053753, 0.06919051603792281, 0.09657649731864204, 0.9868409305302925, 0.9866682706662133, 0.9913363341508226, 0.9835210938526167, 0.9855327703130672, 0.973615109061198, 0.9863503262284242, 0.9830938663083006, 0.9858046325155919, 0.2622022322834624, 0.058436088017871035, 0.2849986447167657, 0.1424025016524565, 0.32635552519256494, 0.14640312243898201, 0.2866716204955524, 0.2704184413754075, 0.2670858642690208, 0.4961527161269229, 0.43227976661236367, 0.632913516706842, 0.5222814703499539, 0.6064003719964626, 0.5632596550606709, 0.5580897911038232, 0.4973468338700666, 0.6066679836352784, 0.1761023901159302, 0.1800553251922924, 0.18168534680572646, 0.22498761643284815, 0.2116700930919282, 0.18332231841512614, 0.17781577022486839, 0.17150715698335028, 0.20861319938845957, 0.20344555112117024, 0.010156320201082591, 0.2118809480295616, 0.22507303369528875, 0.1875897383507792, 0.18917571087054352, 0.19427305250888838, 0.15829803315444535, 0.17226605504074055, 0.13200545526800145, 0.12853313639714303, 0.10993094350541721, 0.21086680261315816, 0.09203937762789971, 0.08986405995261115, 0.11457048472376341, 0.087884551873604, 0.10722561878474712, 0.27210228919262314, 0.22805265912962047, 0.24162163144936977, 0.24585204891857837, 0.22821164068834565, 0.17751215660054365, 0.3137334531893705, 0.3032872501440068, 0.23938286415389598, 0.004231373419280482, 0.024458767328710884, 0.02326221104723647, 0.0453897493980121, 0.05817600371253262, 0.023323393869865372, 0.013576145998325462, 0.017025631707018096, 0.0248002109899087, 0.12380652173402107, 0.12872697873584127, 0.14268594876720941, 0.13351096074282665, 0.13921153739475245, 0.13172349301999786, 0.1460459567978576, 0.14193485788495508, 0.15032418847827644, 0.45474897275777326, 0.461237738999812, 0.42994681663698164, 0.4878846789054113, 0.45889906492346, 0.4633205848482841, 0.4488794852462372, 0.4593887576192477, 0.4674807578926863, 0.0827840018828343, 0.09354141382168657, 0.08806462858980235, 0.0848204273819183, 0.08626802578892456, 0.08770235627218048, 0.09042180583612047, 0.08274225592619111, 0.08288630982027878, 0.17605465815361554, 0.24668120053649611, 0.1631925492768811, 0.29018257526812696, 0.20890368222254185, 0.1637482870572038, 0.2699371265427508, 0.1759527383140923, 0.1507348820514186, 0.3065979407524827, 0.31398836834163524, 0.3370890378501381, 0.268047043610953, 0.3234648131763789, 0.3158938795018752, 0.36595489137345316, 0.33984075498291, 0.3504009743287768, 0.20287256473660842, 0.21928842561381412, 0.19434655452229543, 0.18221848813599273, 0.21900258017243568, 0.20310775218381627, 0.24574452029378968, 0.2204253526042086, 0.20769657894320548, 0.17745502626206144, 0.17170438800998522, 0.1815776941110031, 0.1693037973237711, 0.17525246477826018, 0.18359907666304942, 0.17736187882391352, 0.2202198337903043, 0.17271265650490386, 0.17941614641278647, 0.17702227524250136, 0.1728478772705634, 0.1830206189279021, 0.1781575905289141, 0.17841830019941518, 0.17791690807727156, 0.1852532253118495, 0.17391260209917314, 0.17769741859966237, 0.6440241426424276, 0.15351688686965992, 0.17573775471347086, 0.6055965473193093, 0.1967195566028942, 0.19185291773951763, 0.1679924371792224, 0.5798557071553472, 0.6379968335670892, 0.5624854527706844, 0.5700951242920502, 0.20309081485400315, 0.6251807709288466, 0.5954625891546577, 0.10496358504407566, 0.21083731946876694, 0.6698090480188574, 0.19250057586772795, 0.1914882253118837, 0.18511518066840404, 0.17949910862623697, 0.2085238304790582, 0.18248445302684835, 0.18037091633264046, 0.1946861884246326, 0.1810978538800494, 0.06981811570456087, 0.0621765345855021, 0.06200749303123032, 0.0733775608391597, 0.061444150923368746, 0.06838771772573304, 0.0641266503429142, 0.07494239281949955, 0.07708272952106088]}, "mutation_prompt": null}
{"id": "2f0922b8-305f-41ff-a38c-9151152c044a", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = 0.7 * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)  # Change 1\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < (self.CR + 0.1)  # Change 2\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "A refined PSO-DE algorithm with improved velocity update and diversity enhancement for better convergence and exploration balance.", "configspace": "", "generation": 7, "fitness": 0.3292701530820307, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.7504145715917554, 0.7765270575289123, 0.7377013484294261, 0.7367350294195618, 0.7735799339476139, 0.7491587451458276, 0.7573783505691458, 0.7619037152728243, 0.7293172026648955, 0.5033552409009302, 0.5604725883159861, 0.5545899723772683, 0.48869715212968345, 0.49848796005080853, 0.5031362366649783, 0.5818201754795347, 0.5116096206386027, 0.4953822460832481, 0.08954559095830994, 0.10380902548891902, 0.08646276940925801, 0.0957622990532273, 0.09718032659476361, 0.10252898045264791, 0.09315263178782662, 0.14955699387121624, 0.07836741893588894, 0.08606430239449148, 0.09569115979327869, 0.13237268204425, 0.09554317225702602, 0.08577956245637774, 0.08773228431308722, 0.09863377511238758, 0.08667258163176417, 0.0787416505737043, 0.9860547702300542, 0.9863828397288532, 0.9867346285426801, 0.9834731685018245, 0.9751032371702667, 0.9733058184216205, 0.9835364766322496, 0.9814224298894435, 0.9853771728880012, 0.27932587332498793, 0.31436931666129353, 0.37584884665085827, 0.3495611640021795, 0.1499975038168042, 0.33565485419245455, 0.3328017334378621, 0.32163627866007494, 0.31991984462686174, 0.5458159476446229, 0.6085072453615012, 0.715766150273407, 0.7056760223278989, 0.6824945245922693, 0.6954751736653038, 0.600517226323103, 0.6920744631759319, 0.7356172622884674, 0.3673168539931898, 0.25903180496995937, 0.3942470290859229, 0.25965974594933805, 0.29631569137924985, 0.2668955266605785, 0.2900322897802772, 0.4389252093027437, 0.3759827672162116, 0.280671050297427, 0.01613228478772366, 0.28411443540085124, 0.2956833356865033, 0.2867246427785368, 0.35568165537156105, 0.2783515504944667, 0.27717412549904397, 0.25418743447584435, 0.2708340153277823, 0.21657030234264885, 0.2483739872397287, 0.31959294853350506, 0.3144392980307673, 0.2813207932055972, 0.24949556102190473, 0.21395586720590998, 0.23132828169022568, 0.4070103526103831, 0.3786097355129615, 0.3746635077858752, 0.4100066934459211, 0.3919447147599664, 0.4077466128786784, 0.44960567437733157, 0.45093623301258967, 0.41151647442413464, 0.060701596167227034, 0.06299852613543733, 0.11105623340982274, 0.0696014332047955, 0.1704109315788852, 0.13814339789298014, 0.09652486766510504, 0.08060826004694077, 0.09064005918270501, 0.22582520202397394, 0.2138201035273709, 0.21861444165182964, 0.22681315067783292, 0.23190488601942016, 0.25331409790742154, 0.25507725570232753, 0.2568334354852885, 0.2640658474304475, 0.5522646323735483, 0.5807170949167726, 0.5758043838784915, 0.6162718585215969, 0.5956271200779941, 0.6051705581830681, 0.5920889708839769, 0.5446285970052996, 0.6261674186808572, 0.08950960938814767, 0.08628376930559012, 0.08262635727098244, 0.10355678464961926, 0.08771884542146358, 0.0884728408973342, 0.10931323162739404, 0.08153469978748529, 0.08575576749171565, 0.22138427148281958, 0.1590969373700013, 0.21513268631390114, 0.22433667396278512, 0.1448410098396813, 0.17100114787107845, 0.1626361042260701, 0.18147817658389898, 0.17231375080351097, 0.3127049914452197, 0.32412332365585395, 0.344393167332929, 0.2964260148411806, 0.29917999907410375, 0.32107308298054804, 0.347971038621922, 0.3891177048084219, 0.3301609609684306, 0.24565320426503012, 0.2583464005974714, 0.27607223232738864, 0.2858923280809117, 0.25593868599077474, 0.2444398436677051, 0.25195648485300726, 0.28135530561823774, 0.2761820517706294, 0.19287502349764762, 0.17315906208851606, 0.1739207330146112, 0.17987955979886316, 0.1757520374036703, 0.1692855748064217, 0.19457927234028316, 0.18310467594104052, 0.18950526890737263, 0.1705932196517006, 0.1983520901181287, 0.1781534010371073, 0.22075992703482405, 0.1798356406711178, 0.19559886874982046, 0.17634558028124614, 0.40988585119230103, 0.18330335795706187, 0.7101359419042415, 0.18627416869612334, 0.15402408918368404, 0.7513299244168522, 0.20061376520580665, 0.19907936373533885, 0.18069920353966695, 0.19454592316918573, 0.21011368917766626, 0.7492627853362441, 0.15598105778361693, 0.16679700200804037, 0.20798111440384592, 0.6904775275229443, 0.7215994149410097, 0.1051609634946552, 0.6867472053476852, 0.7295687447131077, 0.19577433449200143, 0.17886957531278136, 0.19103566506738556, 0.197030119262806, 0.1884733706309365, 0.18031723165608504, 0.1794883133539419, 0.17764600771248296, 0.18965392757557453, 0.06715161683346327, 0.0767092363015045, 0.07116220758603231, 0.0715618984800378, 0.07225692734160916, 0.0746133860329633, 0.08035295767257122, 0.07475259690203606, 0.06515600510267161]}, "mutation_prompt": null}
{"id": "c12b3caf-a504-4332-9f53-25744fb97081", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Adaptive inertia weight adjustment\n            self.w = 0.9 - (evals / self.budget) * 0.5\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "An enhanced PSO-DE algorithm that adaptively adjusts the inertia weight for improved convergence and diversity management.", "configspace": "", "generation": 8, "fitness": 0.27487044760374063, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6450066357348168, 0.6556741162725426, 0.6641880074114157, 0.6422782636982811, 0.6837012742981247, 0.6288656623397595, 0.6457423114107598, 0.686447327617414, 0.6795191179213853, 0.46959284827885317, 0.4672678617578847, 0.4822802397034275, 0.4681490104785152, 0.44592178129903537, 0.05686573915991955, 0.4205404704892546, 0.4820715741789676, 0.46016836213987167, 0.1274074872381008, 0.10126566633121892, 0.1038465189389699, 0.07776497958186246, 0.0864463053236999, 0.08068468386295158, 0.08123215447427778, 0.1083906587871839, 0.08629907829289019, 0.10187080424416073, 0.10184439293328018, 0.07204304954442708, 0.07308075664940372, 0.07779315403584097, 0.07906274869634067, 0.08741585669053753, 0.06919051603792281, 0.09657649731850071, 0.9868409305302925, 0.9866682706662133, 0.9913363341508226, 0.9835210938526167, 0.9855327703130672, 0.973615109061198, 0.9863503262284242, 0.9830938663083006, 0.9858046325155919, 0.2622022322675507, 0.05843608801785505, 0.2849986447151951, 0.14240250165237844, 0.32635552602486273, 0.14640312243878906, 0.2866716206022165, 0.2704184411460242, 0.2670858643358235, 0.4961527161269229, 0.43227976661236367, 0.632913516706842, 0.5222814703499539, 0.6064003719964626, 0.5632596550606709, 0.5580897911038232, 0.4973468338700666, 0.6066679836352784, 0.17610239007886708, 0.1800553250391851, 0.18168534677475334, 0.2249876164185174, 0.2116700931179134, 0.18332231834049728, 0.17781577022563866, 0.1715071569932921, 0.2086131993784024, 0.20344555110703866, 0.010156320201082591, 0.21188094803497604, 0.22507303375026733, 0.18758973833584214, 0.1891757108630714, 0.19427305250777205, 0.15829803315851443, 0.17226605503218362, 0.13200545528525176, 0.12853313639061348, 0.10993094351373567, 0.21086680260109802, 0.09203937757173042, 0.08986405994989743, 0.11457048472521314, 0.08788455187916788, 0.10722561877909298, 0.27210228919053137, 0.2280526592335026, 0.24162163145586468, 0.24585204894118406, 0.22821164071309608, 0.17751215660023467, 0.3137334531433996, 0.30328725022914627, 0.23938286409241127, 0.004231373418962514, 0.02445876733026109, 0.023262211055195214, 0.04538974940081153, 0.05817600356560182, 0.023323393870384512, 0.013576145997712064, 0.017025631721576118, 0.024800210991984595, 0.1238065217292571, 0.12872697873966843, 0.14268594879549779, 0.13351096076345714, 0.1392115374306956, 0.13172349301705888, 0.14604595671011378, 0.14193485787773474, 0.1503241884764882, 0.4547489726412206, 0.4612377397023524, 0.4299468136852027, 0.4878846790200072, 0.4588990844243477, 0.46332058665545217, 0.448879485681551, 0.45938875824339886, 0.4674807534074562, 0.0827840018828343, 0.09354141382168657, 0.08806462858972863, 0.0848204273819183, 0.08626802578892456, 0.08770235627218048, 0.09042180583612047, 0.08274225592619111, 0.08288630982027878, 0.1760546581536333, 0.2466812005341371, 0.1631925492768641, 0.29018257502652456, 0.2089036822220932, 0.16374828705721334, 0.269937126542528, 0.1759527383141134, 0.15073488203697416, 0.3065979407362257, 0.3139883683428646, 0.33708903784341304, 0.2680470436109479, 0.32346481318371356, 0.31589387950560344, 0.36595490145002163, 0.3398407549495932, 0.35040097427326977, 0.2028725647366909, 0.21928842561382, 0.19434655452192562, 0.1822184881359462, 0.21900258017235041, 0.20310775218405075, 0.24574452029226546, 0.22042535260500573, 0.2076965789430878, 0.17745502626206167, 0.171704388009988, 0.1815776941109759, 0.16930379732376855, 0.1752524647784689, 0.18359907666304132, 0.17736187882391385, 0.22021983378984122, 0.17271265650490408, 0.1794161464127868, 0.17702227524250647, 0.1728478772705634, 0.1830206189279021, 0.1781575905289141, 0.17841830019941518, 0.17791690807727156, 0.1852532253118495, 0.17391260209917314, 0.17769741859966237, 0.6440241426424878, 0.15351688686965992, 0.17573775471347086, 0.6055965473197636, 0.1967195566028942, 0.19185291773948587, 0.16799243717922474, 0.5798557071563748, 0.637996833560678, 0.5624854527547768, 0.5700951242919331, 0.20309081485400315, 0.6251807709177855, 0.5954625891550535, 0.10496358504407566, 0.21083731946877393, 0.6698090480180248, 0.19250057586772795, 0.1914882253118837, 0.1851151806685195, 0.17949910862620855, 0.2085238304983723, 0.18248445302684835, 0.18037091633264113, 0.1946861884246337, 0.1810978538800494, 0.06981811570456087, 0.0621765345855021, 0.06200749303123032, 0.0733775608391597, 0.061444150923368746, 0.06838771772573304, 0.0641266503429142, 0.07494239281949955, 0.07708272952106088]}, "mutation_prompt": null}
{"id": "ca810471-a9ba-4daa-aaea-a5190cb9f9bc", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.7, c1=2.0, c2=2.0, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            self.w = 0.9 - (evals / self.budget) * (0.9 - 0.4)  # Dynamic inertia weight adjustment\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSO-DE by dynamically adjusting parameters to maintain a balance between exploration and exploitation.", "configspace": "", "generation": 9, "fitness": 0.22829104899711367, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.4854138135781313, 0.553746760929589, 0.4768161036416868, 0.5253707469555662, 0.580099355709954, 0.5488846562819875, 0.5539222152237777, 0.5392528997097523, 0.5523188055342463, 0.28269017264097673, 0.29954180322903656, 0.25349382899912054, 0.2663574720522204, 0.2590855603944535, 0.2728459020724804, 0.2651578318613884, 0.26834044028579496, 0.3340036608383229, 0.06845829301254047, 0.07530362423454773, 0.07872121332744952, 0.07802851599647143, 0.08000242449743888, 0.07620338331882326, 0.08839983554179887, 0.07327003024866896, 0.0789599359708173, 0.06119966264062571, 0.0653039035983547, 0.08130769985267938, 0.07748531876088705, 0.06317041827402814, 0.07527947219368925, 0.06740449755147493, 0.07537977811732288, 0.0719838869812024, 0.9863433308603201, 0.9915420065785432, 0.9916876526575557, 0.9860230467808939, 0.9763395083444456, 0.9814052707662554, 0.9862942386340297, 0.9860093280066012, 0.9861370395644831, 0.23140107588159953, 0.21625384396911773, 0.2096998563374256, 0.2262841621184707, 0.21835590839050223, 0.22422849257736044, 0.0889865705101478, 0.2599213786907102, 0.08471966674369091, 0.4502080481980172, 0.456032089807476, 0.3575181778904606, 0.38103488923172857, 0.5125873617981245, 0.5607099368953536, 0.33457191396553065, 0.41678665284142646, 0.42645671245616446, 0.129750951015001, 0.14513999057454274, 0.1356674550416277, 0.17585402390272575, 0.16080265814522443, 0.11086328538492285, 0.1042996674982356, 0.15075396826290233, 0.1381195938790012, 0.1722942829502725, 0.010121197544062266, 0.015520804897497742, 0.13362084982574196, 0.1466693775355039, 0.15081798581770522, 0.14529635503374516, 0.14665448392529956, 0.13303422829846856, 0.11260527614015714, 0.10950283542619477, 0.12691101394953253, 0.19665746988711352, 0.1383556991114928, 0.08776936882251962, 0.10206917683368011, 0.13837669294766897, 0.11613103909859657, 0.24905425696096062, 0.23770907262693464, 0.29250494384136916, 0.20128280926225117, 0.19525743475046364, 0.1941623499322206, 0.24210226426438786, 0.23415590356286797, 0.28002934885396225, 0.022894753381829336, 0.02547680952369924, 0.015082282326798646, 0.03478627135097745, 0.014569197487940944, 0.009030277208816329, 0.009288409846674783, 0.03075643070838774, 0.015186176665086148, 0.12961372167251306, 0.11353709547496293, 0.1342528395338377, 0.11645639558827114, 0.10519743084040623, 0.11027854460334618, 0.1535354040132153, 0.11096163215207722, 0.12189614253081504, 0.41025282248426853, 0.38800029626956756, 0.4254624173632585, 0.42751307166636854, 0.42623125924193483, 0.4200553889494544, 0.4361765093350386, 0.3908232774005994, 0.39888984927326643, 0.06978236713244479, 0.07366514070997421, 0.07749656006940131, 0.08312678602377, 0.07595539031065712, 0.0864200735316879, 0.08613995878430614, 0.07499947741730317, 0.07644765855254732, 0.20385304860941167, 0.2428774553062394, 0.14375824672467374, 0.14630896576022878, 0.20707622344079424, 0.18513730339811219, 0.16586851613506404, 0.15617156129017717, 0.1866476989485486, 0.23356182863183628, 0.25965314574248954, 0.24107202835128783, 0.24582142512921856, 0.24482449375265036, 0.262361907600394, 0.23798874066509246, 0.300969342595909, 0.25655049610770664, 0.18457698826399538, 0.19364702765499042, 0.1807035745463762, 0.18915763955461984, 0.17351974130918446, 0.1700880613625808, 0.1942025393881297, 0.18698411132366077, 0.1910828817166853, 0.16374457967051437, 0.17474503458444146, 0.17446649953726612, 0.18646668040023862, 0.17206319497340206, 0.17001668935843606, 0.17423843482650214, 0.1589512573748152, 0.18866601027226493, 0.17224435750937084, 0.1621164647114447, 0.16938164789160637, 0.17300364108849986, 0.16553973139640854, 0.1762424032111649, 0.1746510042488968, 0.16254264404589247, 0.17282759778167078, 0.16387119518595883, 0.16638720259379747, 0.15319464404607674, 0.46184099917212784, 0.18477178051254983, 0.18689221988220162, 0.15346779768484653, 0.1683592320649805, 0.21034680244094472, 0.47673999853911353, 0.15378513013504103, 0.16204062074968406, 0.19449542645133455, 0.16439129577506406, 0.18751874433146076, 0.20656593673061163, 0.19685705092135963, 0.2103588062896039, 0.2125767075613103, 0.18690370389198174, 0.20612394028704184, 0.1959639625408014, 0.19835199593030428, 0.2002000789291728, 0.1797559112084529, 0.18720673643864105, 0.22344876057665386, 0.06689470173098255, 0.05677763522992496, 0.06677484086825425, 0.07384621938932778, 0.0629358312358328, 0.06676991609183747, 0.07530184112967708, 0.058193609954733216, 0.0736841208978738]}, "mutation_prompt": null}
{"id": "772712ec-c857-47bd-a671-68488d84f0c6", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.9, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        iter_count = 0  # New: Track iteration count\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w = 0.9 - (0.5 * evals / self.budget)  # New: Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            if iter_count % 50 == 0:  # New: Periodic reset mechanism\n                pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n                fitness = np.apply_along_axis(func, 1, pos)\n                evals += self.pop_size\n                better_idx = fitness < pbest_val\n                pbest_pos[better_idx] = pos[better_idx]\n                pbest_val[better_idx] = fitness[better_idx]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n            iter_count += 1  # New: Increment iteration count\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by incorporating adaptive inertia weight and a periodic reset mechanism to balance exploration and exploitation.", "configspace": "", "generation": 10, "fitness": 0.2676984999738149, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.6245115308574287, 0.629409199805404, 0.6350681961318796, 0.6151924194606287, 0.6497431508443321, 0.6315163847367481, 0.6703298373659445, 0.6014812228906457, 0.6257614197441419, 0.4260737198149577, 0.412849397096099, 0.4195585676189667, 0.42199113649488607, 0.4439220296330888, 0.4226397416100719, 0.44683638509205603, 0.4516289464820886, 0.4486655229920531, 0.10045981346635513, 0.09377128710933924, 0.0901247337413632, 0.07563357765544731, 0.08626913356648713, 0.08640057118863731, 0.08297848847409373, 0.10130384043352059, 0.15859671012766552, 0.08678693507890112, 0.09910840352275285, 0.09693224993289773, 0.0845108155331411, 0.07694321669507642, 0.08953558176218612, 0.07438406038729717, 0.09292918816822215, 0.07830825873322012, 0.9836126422746362, 0.9869607399017237, 0.987747364706508, 0.9724703451035394, 0.9849623544902619, 0.9833447582845135, 0.9884632123718109, 0.983364598325484, 0.985028115277821, 0.22331525719614087, 0.2554361537427955, 0.2542004990168446, 0.2990474893530374, 0.28528249920402626, 0.31350999770885724, 0.27507733709541193, 0.2855636099190154, 0.26653199407034367, 0.39355360680554696, 0.4228076582072202, 0.46328601877316355, 0.5090473407460512, 0.488651964976493, 0.5317123079453348, 0.4731650707637175, 0.46346243662320175, 0.5374568728209421, 0.14362527144070736, 0.1736160253518314, 0.20545855269368873, 0.21243343829561534, 0.19670534185123756, 0.20369512479144236, 0.1821101268032046, 0.16722970088416755, 0.1596946429868502, 0.1991002241235672, 0.0516656485710999, 0.17879746819851883, 0.1859442999293155, 0.15937671586920021, 0.15480358011049045, 0.18005470435772442, 0.20396825108645633, 0.18936787299109814, 0.10363250598512608, 0.14745937840151258, 0.09887094737680269, 0.14274610722355596, 0.00039112818402586846, 0.10305142211645435, 0.09490822736828086, 0.13390444886217212, 0.13254901376512385, 0.26774730730797003, 0.23110703693982237, 0.2170691283950773, 0.2900634396425076, 0.24328985184951668, 0.2221872531359601, 0.2912864975509678, 0.2501018622585066, 0.24924155933962233, 0.018784475368750275, 0.015317333137493727, 0.01715787007177494, 0.06233584378221746, 0.013030366365176627, 0.009472033889299403, 0.035635856013546796, 0.0281878322801955, 0.028653568147356978, 0.12795456542762984, 0.12992464147207483, 0.13318337022767557, 0.1457667007278476, 0.14354536420872466, 0.14991882648846022, 0.1463945915285787, 0.14586029232302877, 0.14730828171917987, 0.4204022293136428, 0.454545342104257, 0.4231408220940093, 0.4443490143532618, 0.44544477952801964, 0.43082943234754856, 0.41482319504988374, 0.4220170944709212, 0.4560220174610631, 0.09815873051177038, 0.07865666137056582, 0.05812387308825151, 0.09281455965780605, 0.08746067199736296, 0.07317296320079347, 0.09524536462830835, 0.08432400983343635, 0.07510119947546523, 0.16203042550732694, 0.1293105200153628, 0.1433575334054099, 0.1405600238642104, 0.25194057469827214, 0.20931495832730895, 0.2534430936476354, 0.17627382793567836, 0.1556070488829695, 0.2807436186693506, 0.31011425347141575, 0.31428602224120394, 0.25184832576976746, 0.27945253588231644, 0.31185281808013143, 0.3477126016676333, 0.33737786937267833, 0.3194359365971915, 0.21517895076546278, 0.19086140593658807, 0.2225233110431728, 0.1809672876449282, 0.20340085113286122, 0.1908226903039325, 0.2674667295626998, 0.25956688486687984, 0.2106710285301283, 0.185268279054854, 0.18534263823614183, 0.19551111440139268, 0.18243328936345993, 0.17930087261520566, 0.17616442059161896, 0.1693410189102137, 0.1730335551859744, 0.1785191843894347, 0.1757656725927773, 0.18355038023169812, 0.17244617184062028, 0.16955903554746343, 0.1842959151857615, 0.17549822624875178, 0.1720867989144541, 0.17320027931119253, 0.2601308585077816, 0.6885114842352689, 0.18204737979770602, 0.15297610187388422, 0.42974514768257166, 0.18587797544924545, 0.19186812567774136, 0.17068411136612072, 0.1601517335669822, 0.6482913443518771, 0.41493279225627844, 0.40412953230305293, 0.49937252131416066, 0.558098778107108, 0.5635916479978357, 0.3193127154857168, 0.2065077136690855, 0.2098347572419783, 0.5907278258712052, 0.1916221104577226, 0.17542904960066896, 0.18905785127645336, 0.18110039130385291, 0.1729440911656278, 0.19636944656004596, 0.18610691478385466, 0.19174511476577671, 0.18315194577258687, 0.06635399462806235, 0.0783599654887428, 0.0682952532015364, 0.06299699782377266, 0.07192629486738622, 0.0747992844379769, 0.06872949208024148, 0.06944566791981921, 0.060675801353692105]}, "mutation_prompt": null}
{"id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by dynamically adjusting w based on current global best improvement to balance exploration and exploitation.", "configspace": "", "generation": 11, "fitness": 0.3821597244824712, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.28.", "error": "", "parent_id": "4212ab45-c24b-439d-afc9-c557ea15acbd", "metadata": {"aucs": [0.8976627984817259, 0.900679042630697, 0.9047603206907348, 0.9032210193967743, 0.9034608639553506, 0.893664509072308, 0.9072740310101929, 0.8991037774881, 0.9002837212593576, 0.8191611768101784, 0.04327956799885324, 0.8017816973941697, 0.8142171734378046, 0.7909426150915393, 0.8137161055254557, 0.0542532805074003, 0.7558451940407257, 0.04883536963176771, 0.13678649196655557, 0.1812133969865316, 0.527863256212165, 0.11458528389803269, 0.7553390364988165, 0.579888760407568, 0.11878981430573621, 0.12929760897124742, 0.11716818741788271, 0.14330010357900103, 0.13419187678280664, 0.6232197432489969, 0.1387937887032593, 0.14622848977961223, 0.11759857270270402, 0.14527981119797173, 0.13151108578718596, 0.1710915709538442, 0.990621673698254, 0.9859713103744767, 0.9869354412601571, 0.980749547442894, 0.9753125361526322, 0.9728789936445917, 0.980448498351832, 0.9827762552581847, 0.9855618897034406, 0.6663274036486845, 0.6449698815745025, 0.6761191432299809, 0.6926876213379053, 0.6797883901741939, 0.7041675044032627, 0.6682184295652203, 0.6937719811707712, 0.593341682726324, 0.7588793349060555, 0.35840273485302965, 0.8070114751717754, 0.21406296662276414, 0.8212749373475359, 0.8166145587542921, 0.36751867888364553, 0.8211794128170457, 0.815990057764315, 0.13258648906467296, 0.4188204899655419, 0.47996042665198224, 0.4527268324598259, 0.4085586557673281, 0.17044276423869764, 0.13131209203271443, 0.45127534346410425, 0.4842194258769025, 0.43942198745873906, 0.12253203287528669, 0.4999069456260965, 0.45356461990053953, 0.46933661285921247, 0.5199204243324507, 0.45063450820093753, 0.10233404926862788, 0.18470183738098844, 0.1549793825539637, 0.14325414616010512, 0.13825267298797406, 0.07859998258290357, 0.10575020828145443, 0.12645808166821426, 0.13587027597628054, 0.1142754885181696, 0.15100512502907004, 0.2749026137029438, 0.29319801880214025, 0.2582646400073527, 0.24375137927976653, 0.19412678439931685, 0.18595724623893506, 0.31569658133861744, 0.2858563567920288, 0.3084427194209929, 0.1602362467305014, 0.3565665645790984, 0.24348848769884834, 0.1434985893160603, 0.10509110077880979, 0.09559394034303459, 0.10000128525949603, 0.11035188041568433, 0.1738487007087246, 0.22446411947946476, 0.2194942568530951, 0.25229488929101584, 0.23865732929613526, 0.27622820704138995, 0.2470342902626803, 0.2342115309178745, 0.04835122907728451, 0.267600933770314, 0.661507450570592, 0.6399644698943623, 0.6347776464056889, 0.7030634010192685, 0.6810293042689335, 0.6627620927473417, 0.6268566628303904, 0.650977282028578, 0.6662794737663724, 0.11158547101577732, 0.11889721650746776, 0.13963627774135734, 0.15404684203248253, 0.08956327892463778, 0.1358994791228062, 0.11919820710523932, 0.0964551694009369, 0.1413773798729373, 0.2290538568167947, 0.2275338696713327, 0.22517488869416336, 0.26895277269171536, 0.19219471725153614, 0.22286525281541436, 0.19880495171489554, 0.2017580532287624, 0.21684872692745571, 0.4611831244820229, 0.5011532319923953, 0.3932915782964649, 0.2989366998560641, 0.5365385737627774, 0.46653215978351614, 0.44774334418473205, 0.43958468076310475, 0.3528547383999284, 0.3181883900556227, 0.28525014033152707, 0.33012708638067867, 0.37684355186818275, 0.24575883747730576, 0.2342127975556635, 0.32515395646529766, 0.34903070007462855, 0.36789352123845664, 0.20851951430050286, 0.19809351311664614, 0.18995014661606657, 0.20125190867504295, 0.19674200559804544, 0.18770310799571355, 0.20547178774602504, 0.1940862429510286, 0.20029608962419032, 0.22105733423555884, 0.24034288849370578, 0.24287936755598327, 0.2484419458832805, 0.24814952773196952, 0.19120478964265852, 0.2440734895100911, 0.7868353607133192, 0.21865662852270817, 0.1873932537031544, 0.18686436571648224, 0.1537941256205504, 0.913268554240099, 0.20167671751878724, 0.2011668824614692, 0.16996281349749298, 0.16989983394988017, 0.9226504820120847, 0.8205796441864804, 0.7201845432781369, 0.74199252535647, 0.2098304971533187, 0.8301617052229306, 0.8032215187851968, 0.1053141945064835, 0.21067784898974962, 0.8723606254172448, 0.18698611017786138, 0.1859603960289129, 0.18540684625872061, 0.1883670122849449, 0.1740557491814998, 0.1920794258086327, 0.18946810964236005, 0.17625257644424586, 0.190395648289172, 0.10727869549205427, 0.10269179115066451, 0.080821292118051, 0.07678401015880132, 0.0829739277742545, 0.0846929859988923, 0.08619248430959414, 0.09227159534729346, 0.08794243553845948]}, "mutation_prompt": null}
{"id": "015a2811-2f44-489e-9d89-e46feb3d5b45", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            adaptive_c1 = 1.5 + 0.5 * np.abs(np.tanh(gbest_val))\n            adaptive_c2 = 1.5 + 0.5 * np.abs(np.tanh(gbest_val))\n            vel = self.w * vel + adaptive_c1 * r1 * (pbest_pos - pos) + adaptive_c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE by introducing adaptive learning rates for acceleration coefficients to enhance balance between exploration and exploitation.", "configspace": "", "generation": 12, "fitness": 0.3126659315472208, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "metadata": {"aucs": [0.8359024492528304, 0.8422480007251643, 0.8273006151881467, 0.8356999811064495, 0.8308083636207393, 0.8619434052785045, 0.8550710292690105, 0.8457740580640757, 0.8646974070814897, 0.041193907539401, 0.7415866267596247, 0.7063120977127152, 0.6899641444249426, 0.7058236130118113, 0.044090857162833896, 0.7297022978823469, 0.717112616666129, 0.0517289494900941, 0.09879539385566294, 0.1311581120321209, 0.11603819426922457, 0.1169055611589449, 0.12575583312450123, 0.13238501894148447, 0.0999077882289483, 0.12625174951582008, 0.10585641020284653, 0.10979356143279762, 0.11953117682178449, 0.10760231345666638, 0.13622407578292017, 0.12424858103904457, 0.10471536119174019, 0.09718372114216878, 0.10892733099628127, 0.09694579479093679, 0.9872676465457011, 0.9898063724500237, 0.9913596992939719, 0.9858523448190821, 0.9749931060210806, 0.9810355575557024, 0.981504662080267, 0.9818351349343769, 0.9851975712222343, 0.3832768998529995, 0.39091072549018735, 0.38140519649630267, 0.14971834304073384, 0.39973433559610716, 0.3572871206822329, 0.3656014361493882, 0.3843889674371457, 0.08827662452044371, 0.6769363271168233, 0.6208054630109836, 0.6818284710359348, 0.6956618115133582, 0.61741758622947, 0.6181231415977955, 0.12535483753148746, 0.6203583844639953, 0.6657119899986992, 0.36972028389163325, 0.11583400672135014, 0.30848066095105187, 0.3168032452848627, 0.3336026072367062, 0.31589955424184735, 0.32263965186129673, 0.32758431471068183, 0.3106711856060561, 0.3301088748739861, 0.05419498823195101, 0.2380825587372618, 0.327256256735303, 0.2842895038372655, 0.3517227579874961, 0.28476354240062396, 0.23770743319451793, 0.3011327619508918, 0.1467046431615281, 0.13882692475976055, 0.09497422365043673, 0.1230773301798701, 0.11106260182572347, 0.10634909904360235, 0.15005019828774568, 0.14223793121513084, 0.13118923893007628, 0.2590235357653937, 0.1765475493513854, 0.22785939730101112, 0.2294441073120118, 0.21313765351732217, 0.21367099706932635, 0.28135424576974877, 0.2698818250688354, 0.270503914072729, 0.15481363900366973, 0.07422971642379184, 0.024747825112063082, 0.11853920795762785, 0.07514534157300734, 0.10105113567479274, 0.10837676415044384, 0.09440263268505589, 0.02296054175446094, 0.18071998697591607, 0.20740479417930613, 0.20575197416526536, 0.006298690820964126, 0.20917811584581325, 0.18004597350578566, 0.18271498269793618, 0.16711131176671457, 0.19870009706962277, 0.5838985013628766, 0.5320322641097185, 0.5678410773030576, 0.5890918172196619, 0.606367553327579, 0.5553067948597668, 0.5741089356869983, 0.6103271443263598, 0.592211036125105, 0.08873196838235997, 0.11686231872787689, 0.09000861435990115, 0.09239417393891602, 0.12238268696955912, 0.07987981292385138, 0.07157254249383638, 0.10756007180828187, 0.08061004426186169, 0.2834767807023756, 0.1840490136579711, 0.1622132652862741, 0.2255837952605798, 0.25734078399826876, 0.16371540312472366, 0.2305916602891187, 0.14665102358711468, 0.1882743427521425, 0.3168193824735833, 0.4236276642326299, 0.34527245590208644, 0.3752129030606489, 0.33354782097320435, 0.45123137262020374, 0.3635473261386374, 0.40018516372338653, 0.47181866583157406, 0.2604501997602814, 0.3009256245575691, 0.3123525353227423, 0.21893407745760873, 0.2055889734309274, 0.30141284596887286, 0.31389936257607376, 0.3170160504239974, 0.24269923273423333, 0.18234995458750158, 0.1769867772228212, 0.18834720901684854, 0.18824290758566908, 0.17842978826439138, 0.18483654270030214, 0.17922230095446667, 0.20159975003583452, 0.18447903347480543, 0.22573313681771823, 0.18367158298356745, 0.2134553367031865, 0.19087603236047124, 0.1873961945748881, 0.18404874286190953, 0.21000658331878108, 0.19229158323778606, 0.18539583302012175, 0.17051346123338007, 0.1607405317943359, 0.11496637856512593, 0.8754751390553963, 0.20070183463376168, 0.1979856795147339, 0.12318081152144933, 0.16901430899249914, 0.8168621079934317, 0.728295715362964, 0.15525632980269455, 0.6337922856886555, 0.20995922777082643, 0.6138473296379885, 0.208341666732609, 0.10503559462083234, 0.19825908425354233, 0.20552129428609434, 0.19473793168056985, 0.19294611489613211, 0.1982520779223108, 0.18660465752399935, 0.20680037523374595, 0.1925284049554934, 0.20618377352918693, 0.20131838248902145, 0.18550617138610925, 0.07994694822842208, 0.0754052065873062, 0.06653554367076908, 0.08416151250881032, 0.07602673868865384, 0.09102559178357428, 0.07820415260657487, 0.07354091548102004, 0.06795506880680646]}, "mutation_prompt": null}
{"id": "3c4836fe-1e90-4498-b5a4-ddb5f03edb7a", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            progress = evals / self.budget\n            adaptive_F = self.F * (1 - progress)\n            adaptive_CR = self.CR * (1 - progress)\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < adaptive_CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "PSODE with adaptive mutation factor and crossover rate based on iteration progress to enhance exploration-exploitation trade-off.", "configspace": "", "generation": 13, "fitness": 0.3527891186815363, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "metadata": {"aucs": [0.9080560456594619, 0.9006717293957791, 0.8957272005827369, 0.9044090206202245, 0.9036966470824221, 0.8956375757197348, 0.9109338045935629, 0.89624270871255, 0.9021970958800118, 0.785141862805239, 0.8157262870693116, 0.7811145929376049, 0.8211658586952085, 0.7944893515432385, 0.8227589146968679, 0.8208864577669256, 0.8119221601722117, 0.763894823557829, 0.1705021405746615, 0.10995908255194808, 0.12012038051019791, 0.1632838750477409, 0.17748235863069217, 0.13934325931186287, 0.596963199091374, 0.17810958579476122, 0.17201874263506967, 0.10632490817128915, 0.11801937210730962, 0.14010060978289895, 0.13620736458346105, 0.1312750926022842, 0.14909120643467433, 0.13253364602173134, 0.15556496343661352, 0.13782349760552626, 0.9906198757787337, 0.985971922514943, 0.9870271269655537, 0.9788989296555772, 0.9747432281708801, 0.975510598167706, 0.9812752389725323, 0.9824626254348485, 0.9855619106760392, 0.727720601751396, 0.6968415326922318, 0.6583125344406409, 0.7145951710987386, 0.6940111508112967, 0.7304662924862404, 0.6913861808082018, 0.6874384999322545, 0.6075466381452836, 0.8299152214342663, 0.37392265421143167, 0.37639307639722097, 0.8600659403543713, 0.27489218507261715, 0.21425597356775739, 0.6842073093432346, 0.3474985270214064, 0.8113755572454132, 0.13300347496692133, 0.18579390195097112, 0.19383293790981648, 0.20419685076026106, 0.20572031790948409, 0.18397948812270548, 0.1333471626016186, 0.1874218201475063, 0.26870812360264085, 0.25843716588730814, 0.12302931476928225, 0.14760397627999977, 0.19478556150468707, 0.1247978334175357, 0.26080894500117047, 0.2567607052754839, 0.10300008349161838, 0.15893962215537571, 0.03954802333892471, 0.049021438677743556, 0.04556310749648673, 0.02449668543249084, 0.006507924564718048, 0.0376101367563495, 0.02464285901900043, 0.061872404686098115, 0.0922233122062629, 0.1645852899508924, 0.14344365983523588, 0.137103441037154, 0.12895150597541416, 0.09216455247455402, 0.0604887486813519, 0.13682609994875816, 0.16614148433233822, 0.16476500492704638, 0.0498317398300101, 0.16687711546744144, 0.19708394849315025, 0.22335224762787964, 0.19816169290008834, 0.09465136169043675, 0.10094081005463029, 0.1022245440296119, 0.07312832635832578, 0.10382530186211114, 0.09238743831223106, 0.2012799729491419, 0.1213884971815038, 0.13358029046633457, 0.2531672764404598, 0.05760089506822985, 0.058228796098169, 0.15088150538264233, 0.6403552025975421, 0.5931305278858925, 0.6790549765655253, 0.5859031919688794, 0.5564637075737822, 0.5936729705967518, 0.5999548171196114, 0.566785846820482, 0.6159408945816428, 0.10420003475514639, 0.17657392798020932, 0.17190273537264855, 0.13361032840428178, 0.08938340866043726, 0.123199355483681, 0.1558685409278905, 0.12259642222173972, 0.12133875799358351, 0.2049058268845908, 0.16125811987191352, 0.18516207267928253, 0.27466498624415825, 0.23773846890155714, 0.20285066623586445, 0.2733188461104258, 0.18962995114387182, 0.27481873359954545, 0.33335685048994756, 0.40304933288254086, 0.2950491151647189, 0.36041680839314405, 0.5473726086648352, 0.4280584443116979, 0.6006226031430543, 0.464634386639048, 0.4917569111220038, 0.29121362828268893, 0.26079540611787433, 0.2419753884068978, 0.2604295815330502, 0.21970468573758173, 0.32375836060163365, 0.4033997480451549, 0.4098020088685528, 0.2558393560109008, 0.20682529482452783, 0.23445343539392283, 0.19369018509343727, 0.20990888775652194, 0.20715748887368668, 0.2019943575014843, 0.21355514741119497, 0.2089507343093603, 0.20976599126249906, 0.20208924067112255, 0.22905457539037954, 0.2275789225759397, 0.2550271663779162, 0.19782635259030856, 0.1982166243153779, 0.6749347519197577, 0.8050718730172036, 0.2420592566479718, 0.1876677786446338, 0.18709326319369934, 0.15392807641783146, 0.9187071948313733, 0.20165324117022287, 0.20151690880831064, 0.14665616072661358, 0.16989945870561862, 0.9276733695707267, 0.8677827144878842, 0.15622757459745373, 0.8687042603390287, 0.20907816851298167, 0.8368722993943762, 0.851484287699995, 0.10530520135165733, 0.20691587098258113, 0.8543496862387385, 0.19703484648176994, 0.21493274345191127, 0.19783878716188852, 0.19606825289070662, 0.19429812908490318, 0.1865067675356168, 0.17956783475423743, 0.19392496366643996, 0.18452343088224166, 0.09851255108010026, 0.08359834644404818, 0.09191281371639903, 0.09179907023219258, 0.08961235709975879, 0.08085165400131156, 0.08197986316633687, 0.08304573840496654, 0.0902204891109657]}, "mutation_prompt": null}
{"id": "e9f351ad-1438-4ced-a7ae-c84d26b48592", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.98  # Adjusted inertia weight decay rate\n\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n\n                if evals < self.budget / 2:  # Adaptive CR for early exploration\n                    self.CR = 0.6\n                else:\n                    self.CR = 0.9\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE with adaptive parameters for enhanced convergence and diversity management.", "configspace": "", "generation": 14, "fitness": 0.35213499814432275, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "metadata": {"aucs": [0.9088874544545975, 0.9060067566126384, 0.9085982651878358, 0.905102823118568, 0.9106368870909107, 0.9052195066994363, 0.908731152204173, 0.9084814663731297, 0.9114396173638932, 0.8261957741523747, 0.8264268595041303, 0.834262906515552, 0.8359698259616376, 0.8182402294993727, 0.8246957074323218, 0.8204844672321229, 0.832187054237397, 0.8397459200204689, 0.14183674870081409, 0.820048850355032, 0.16821780180156387, 0.17879291878601378, 0.15413354735701212, 0.15730814752790845, 0.682714409940241, 0.730659212574976, 0.6462095552360614, 0.15401661723524374, 0.13108928501117512, 0.12380798559238937, 0.1331747789975405, 0.1459394158127303, 0.17267904219568975, 0.1685263049934923, 0.11406549665647492, 0.18215938327430137, 0.9806360298835047, 0.9866226904154228, 0.9912228615199128, 0.9835276812467038, 0.9735558328633244, 0.9719636125538309, 0.9859150633700426, 0.9863475730689426, 0.9855890013834745, 0.6698933529910525, 0.7316898975349406, 0.682700454656602, 0.7126348302284085, 0.7075769325150124, 0.7373039099475602, 0.7462674437517096, 0.6081347491884235, 0.5667698930214516, 0.7996600671367928, 0.36411413052227837, 0.3720895112988011, 0.21402815464473102, 0.1918332741657458, 0.20554821597331374, 0.22472755542535794, 0.8210900474080874, 0.2317708534607491, 0.15855924671022148, 0.1903958676190336, 0.13367210017065023, 0.17817048857098472, 0.19958679497649578, 0.1881692659523514, 0.14802077435795724, 0.13235546767852813, 0.42172294745046424, 0.1694827934581088, 0.14064804886432214, 0.13186905482562394, 0.18769538525872154, 0.40507105799899046, 0.14464565029619103, 0.3090137378394081, 0.18242450822062206, 0.3314554988348588, 0.08709930028163981, 0.14324065641472594, 0.09362982864169955, 0.04017268283449216, 0.06575333874894818, 0.01909247352783572, 0.08283387007340193, 0.13600211833003117, 0.11666833271560995, 0.17359359658422513, 0.15848345397122976, 0.14637552590339087, 0.17635675821498076, 0.13538076692672252, 0.15006791201239922, 0.16969020814956315, 0.17892745678089828, 0.14620547005276696, 0.05208789740901232, 0.036994507605064286, 0.06219138882110742, 0.08050342077002404, 0.08037645882492839, 0.09530724385766376, 0.15449356793185176, 0.24600135685539237, 0.1895766355742734, 0.1283396538946865, 0.10297344787490803, 0.2935903243501852, 0.06137508273713721, 0.17051339566035772, 0.15941754807149267, 0.05347342833175339, 0.19655127729927913, 0.08366627464431964, 0.6670927612051889, 0.6481923062514496, 0.6715055864807459, 0.6195490904306407, 0.6321724482114837, 0.6970060151936683, 0.6907051426545624, 0.7301140258777439, 0.6752101435438493, 0.13025222678433934, 0.1186529906214171, 0.11789989494515252, 0.10324595402824943, 0.11707731238509, 0.10131414468025346, 0.10899161687054948, 0.11077681201915435, 0.15851151663914376, 0.15353596856050444, 0.20468591950822246, 0.28625306803725825, 0.20852862879230305, 0.38109549808641163, 0.21682457822163326, 0.2613623266377084, 0.29834774269934616, 0.21051419085552547, 0.3125565618000179, 0.5323993613090068, 0.30279082985980943, 0.26147252160347634, 0.4196497968217492, 0.42956521807900816, 0.5122431305350963, 0.3433291744030599, 0.44197742395169426, 0.2266627614668456, 0.26018289374029346, 0.30459622633741545, 0.23704715588410974, 0.23852612700725262, 0.25314257287164776, 0.22692391832187653, 0.3729986015084501, 0.2339994996791891, 0.19903507629634198, 0.18743322087646863, 0.19621777402190377, 0.21408334982743804, 0.22549831635336626, 0.19836224016471515, 0.21260945618502958, 0.20238504814970681, 0.22384068608056318, 0.20530257635472693, 0.18584084745725482, 0.2258932515558828, 0.24884873654637818, 0.20084015383018394, 0.24834450603328806, 0.21202019861320853, 0.8577316886512171, 0.23891465633333464, 0.18565555206454443, 0.1755906457825548, 0.15354401526862527, 0.9179859776590341, 0.2013191083479503, 0.20139787631720463, 0.13097881020355706, 0.16971600710110635, 0.21154164667901865, 0.8467348242985189, 0.1562781138463868, 0.67527188750069, 0.2106976576773093, 0.4610921518813037, 0.787682648145994, 0.10534034629754097, 0.10493539681204422, 0.860243007085483, 0.17915579809081372, 0.19754465810127486, 0.17778524544673002, 0.19131120560487525, 0.21604396573335316, 0.1748523831968738, 0.19304986579618266, 0.1913724862159487, 0.19616356762897735, 0.07867003292079955, 0.08594384017396861, 0.08947573883679927, 0.08733471311525642, 0.0996148231599977, 0.0823966603184837, 0.08584857067839746, 0.08414551135256021, 0.09189024545403313]}, "mutation_prompt": null}
{"id": "3d16d903-16be-4394-818a-c9d10634c4dd", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            diversity = np.std(pos, axis=0)  # Measure the diversity of the swarm\n            self.c1 = 1.5 + 0.5 * diversity.mean()  # Adaptive learning rate for cognitive component\n            self.c2 = 1.5 + 0.5 * diversity.mean()  # Adaptive learning rate for social component\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE by introducing adaptive learning rates based on swarm diversity to enhance convergence speed and stability.", "configspace": "", "generation": 15, "fitness": 0.31285172260505056, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "metadata": {"aucs": [0.8466530989189461, 0.8394984081532181, 0.8726060379467808, 0.8789263257768074, 0.8817181184000776, 0.882923476480865, 0.8746417854497996, 0.8766562673871086, 0.8737029061461998, 0.7535745170025455, 0.746486353757094, 0.7263008075849069, 0.7249256979068848, 0.753338596648163, 0.03419511486741522, 0.7476569551807984, 0.017959116718536783, 0.055054679425263764, 0.08459202102388863, 0.12026643317447583, 0.10586236310227581, 0.12867907433271997, 0.11725599110673646, 0.12425837912788595, 0.10832053413433529, 0.13340104860139523, 0.12268138012502883, 0.09408833283332718, 0.11424790140100738, 0.10450636595402463, 0.09912284158081963, 0.10647463471279439, 0.10123266590926905, 0.11675910904927478, 0.09265034790615223, 0.09374389070793021, 0.9856837441601124, 0.9949189687599141, 0.9919770661415821, 0.9546015599181237, 0.9858486497200705, 0.98082074837619, 0.9917605116220837, 0.9864783862530826, 0.9893906416128722, 0.5190869398264593, 0.5405382516881534, 0.5455999166044039, 0.5374622624640091, 0.5745323948987912, 0.5749112546243409, 0.08811637449571286, 0.5757422559458232, 0.5912351877261206, 0.6211349365101132, 0.6144789960984427, 0.6027898449548803, 0.651486877774516, 0.7374800696679658, 0.6247954518580854, 0.6486790989611382, 0.5975910858496188, 0.6132800886710106, 0.09652639731291746, 0.3431036459377982, 0.31598758605126775, 0.2074066229875391, 0.3611724994285981, 0.41043372897684316, 0.3915809935144684, 0.37158487559797937, 0.3461868495462149, 0.009830798585781508, 0.12194847795227437, 0.12114602790880968, 0.40335860674213986, 0.3317751844977337, 0.49682063581714153, 0.2944014363976635, 0.09779847225818827, 0.16560176986268538, 0.12125729353463688, 0.11223747530464367, 0.0623704672941765, 0.19529721405025335, 0.14711714342758664, 0.06580292437454005, 0.09467770355896843, 0.13433468167724805, 0.11557506030611109, 0.23437369718110646, 0.17530979916608413, 0.07897264323288056, 0.21296678589218732, 0.22449817226298074, 0.21314800537513967, 0.2848894012859958, 0.26232530225077266, 0.21181790421116042, 0.048931418929821335, 0.013751840826509931, 0.07096695884403403, 0.07791119818161785, 0.02602930089950184, 0.07619406056001721, 0.09962985080744025, 0.018682649790694117, 0.1800963096025826, 0.17289984162776362, 0.12630734009606226, 0.2453470462882822, 0.18685513889708838, 0.1834045634309619, 0.1704052418013885, 0.21007788681620776, 0.06177491638890187, 0.13699491204773406, 0.6081123893703331, 0.5849257550141224, 0.603148965298492, 0.6392760194417944, 0.6995918254808446, 0.20822563064026456, 0.6470603942471186, 0.5724069515019361, 0.639260383625573, 0.09079724469945483, 0.09875526111026922, 0.07798480652329542, 0.07931683339770534, 0.08137900477247162, 0.08053591751363542, 0.09162134789642751, 0.10549013437386512, 0.07810088590368414, 0.20422071240800943, 0.14619076365526928, 0.13641090170537828, 0.1726314579185355, 0.16737847739642198, 0.134955094992247, 0.20042479566151805, 0.1655988897293561, 0.19038967039585297, 0.43728890922404695, 0.5165885161893741, 0.36331012057724577, 0.3434767038090587, 0.3506169900839671, 0.3334790933076124, 0.46890096222484556, 0.5451856623423315, 0.6689879081513153, 0.29702297056584226, 0.2956367877633834, 0.26440343637381736, 0.18504702292035657, 0.204053564235255, 0.24925130668935302, 0.3478709688745981, 0.35241097040048763, 0.2698748993050598, 0.20024277583130934, 0.17235645622340434, 0.18280375053320763, 0.16836047825948375, 0.16966195533800565, 0.15897757849277128, 0.1803030992749407, 0.17156107022908895, 0.17664999684415705, 0.1741943480367445, 0.19682507129362137, 0.18534243064525058, 0.41677152029279363, 0.17754227695571845, 0.17707757035822047, 0.17518082603410623, 0.2097477731017574, 0.17818409098024512, 0.16326723589514547, 0.18137788330007742, 0.15400927030785838, 0.5139997309147831, 0.18489486567656888, 0.17053407907238638, 0.09927165087992562, 0.16824007012748277, 0.20661928524337403, 0.4575665206595517, 0.20109347743527628, 0.3860832689088134, 0.19688735750125508, 0.579711378269957, 0.15861325891332168, 0.21034759902649625, 0.1863353725780128, 0.2035043982497321, 0.18264439125804754, 0.1906571944344435, 0.1906778940485433, 0.1845917649686869, 0.2081480805337823, 0.17971379664495546, 0.19063735166211815, 0.1789871127076884, 0.19328175735626052, 0.0702479443867271, 0.060011839992155536, 0.067682821726325, 0.05728351948520072, 0.0680656798957634, 0.06458583604192425, 0.061150144264648265, 0.06455543359935545, 0.056032536970132774]}, "mutation_prompt": null}
{"id": "fb403d7d-75f1-4314-ac91-864d700603bc", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                # Adaptive learning factors\n                self.c1 = 1.5 + 0.5 * np.random.rand()\n                self.c2 = 1.5 + 0.5 * np.random.rand()\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by introducing adaptive learning factors inspired by the Lévy flight mechanism to improve exploration and convergence.", "configspace": "", "generation": 16, "fitness": 0.35549568501383744, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "metadata": {"aucs": [0.881223365317704, 0.8904693918275709, 0.874789477749334, 0.8851967448073161, 0.8782701229739103, 0.8732001028470243, 0.8890439386864928, 0.8867388314948255, 0.8700830027134164, 0.7500716658278634, 0.7769525185402189, 0.768041058821473, 0.8013800412777303, 0.7546934926913034, 0.7608739523115589, 0.7465491935902595, 0.7662474274542598, 9.999999999998899e-05, 0.1325374666380974, 0.1487315647938603, 0.1252211732071875, 0.135961579632897, 0.16141067289197453, 0.1340753737122794, 0.1419210296204808, 0.11029642929325567, 0.17270319100211762, 0.11509315622623872, 0.13941920017466947, 0.1324872988245579, 0.12350578503960208, 0.13622882927131208, 0.12406001691657298, 0.1376298566786519, 0.11198831524342479, 0.13782151174285884, 0.978726074974191, 0.9863960087819358, 0.9815504717186809, 0.9797100464523877, 0.9645143820874696, 0.9810568479406984, 0.9886802439887361, 0.9828234071406118, 0.9815663465885736, 0.5824249012243994, 0.5441764143186355, 0.5354656711834076, 0.5534869465821992, 0.5362427046856773, 0.14972228820041167, 0.5465444815406078, 0.49768909922750504, 0.5168703502364222, 0.6569156085713955, 0.22458955283854198, 0.7228665326060699, 0.8308765019232647, 0.21240999775870628, 0.1932780156258478, 0.7355044337732825, 0.7777181649592109, 0.718616112377434, 0.4197084860697483, 0.3813616896443063, 0.3910408827286197, 0.377049573610016, 0.3793364221691612, 0.4113606494918344, 0.4263616349657856, 0.350069011722429, 0.386953237674843, 0.3368502394293701, 0.05112039156515824, 0.33787532807822185, 0.41617617401088913, 0.3819460011927517, 0.42904325412731736, 0.4093956697900831, 0.39063945941561506, 0.4134566682962283, 0.08240933950185336, 0.12983376594428586, 0.1430810245604227, 0.13690718525245016, 0.14872605068275246, 0.1056852272959351, 0.12886619178790992, 0.12185745115985902, 0.15453557263336193, 0.245827903803027, 0.2513079114927198, 0.25731655051596025, 0.24680514828836608, 0.23558893199136866, 0.2879602590413496, 0.3034573586183045, 0.3039732889121466, 0.2511344012081701, 0.12805230703525394, 0.0164881626088631, 0.16391727276833246, 0.0792434696311688, 0.07605064118819116, 0.13145438965650114, 0.07594432175817312, 0.07612955438367663, 0.08989324280778144, 0.24249004382383588, 0.18975978081930867, 0.1979680168818444, 0.2220869746374623, 0.21636533784145495, 0.19550837286677458, 0.4452893689658519, 0.2118637278054203, 0.1469177852404726, 0.6004792212555203, 0.6195371357356549, 0.6522169040213034, 0.6058986785502167, 0.6345770860935194, 0.6131634778725451, 0.6201895831426593, 0.6429365123255995, 0.6188690408368511, 0.1394509838205913, 0.1325092372727269, 0.1033948760261697, 0.12827135009278046, 0.10213137870814848, 0.10147721363828732, 0.11483093665308497, 0.17761603495790745, 0.11440016895684679, 0.2023334186538447, 0.22284539507260848, 0.17831236892545188, 0.14191424212361958, 0.21899636107557774, 0.18326813053409297, 0.41101632772118624, 0.145351355880873, 0.18576175072729728, 0.4810653874615415, 0.47821173672077466, 0.4925021486412393, 0.48955810107398334, 0.6002156759652547, 0.4359604305262509, 0.2864498998523276, 0.30718262866057144, 0.5665100193512635, 0.26616454990809835, 0.31439521415934946, 0.34295723449100546, 0.22368051867919436, 0.20749867629997176, 0.3018397112192228, 0.3197090016619957, 0.3730904112494794, 0.32441621413683974, 0.2700107875763239, 0.18458414156331937, 0.1904509197574733, 0.2204640900060263, 0.22918412292934098, 0.20816963468208294, 0.2059022393135186, 0.17826253185223195, 0.17976039500393448, 0.21738580001537267, 0.24331774111858562, 0.2090711105017199, 0.5265346906321964, 0.20054187288965286, 0.5815985295016017, 0.21831849860173358, 0.4667366728049622, 0.6257708260712542, 0.17184158400106175, 0.1864366309885176, 0.15348650110555517, 0.17286250493029787, 0.8107581023706822, 0.20008265368011757, 0.1661221047050192, 0.16990874878053852, 0.2115488549900013, 0.6853059262047931, 0.15602611348392015, 0.2074377033782131, 0.15362620383896997, 0.7060488514842369, 0.7432737118763326, 0.10521713730120807, 0.1630691998261392, 0.6189226121148692, 0.17200680148400316, 0.18643398686066281, 0.18731328673022185, 0.17626889728449568, 0.18678511979086732, 0.24930968821068022, 0.18687630492910556, 0.1803831530201736, 0.18236949007762238, 0.13618351337540968, 0.0806663088587839, 0.07556658752587042, 0.07515924771783322, 0.07757205652378962, 0.06593743286264653, 0.07232848877860376, 0.08347015047967576, 0.08536147332171207]}, "mutation_prompt": null}
{"id": "158fd13c-8c17-4c84-8016-ce37eea758a2", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.99  # New line: Introduce velocity reduction to enhance convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Implement velocity reduction based on fitness to refine search precision around promising solutions.", "configspace": "", "generation": 17, "fitness": 0.38520611235982394, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.29.", "error": "", "parent_id": "cc4be2ea-89ff-4553-8584-c2030c217b89", "metadata": {"aucs": [0.9026909406293997, 0.8973867054237664, 0.9032836718565286, 0.9075918182595681, 0.9068361805127212, 0.9052801269200287, 0.9005749065455383, 0.8964374270611749, 0.9024128339270027, 0.8136136003496969, 0.8177899504596915, 0.7408530003667183, 0.722577550745084, 0.7161957969104282, 0.04612376548813413, 0.5408183195589922, 0.8266823270836767, 0.046314307738594684, 0.1743378453951393, 0.12297586997539767, 0.17386036516421643, 0.6876100958139462, 0.12492546915941805, 0.16438111980806047, 0.148186841203911, 0.15772710960863912, 0.12459869046215388, 0.14977281215089844, 0.11686933128373544, 0.09263991136010696, 0.12993546207007767, 0.13382379904965924, 0.1380596844539128, 0.13537802679283106, 0.11968690769258883, 0.11255769400172266, 0.990621640231956, 0.9859680600843977, 0.9868936033892356, 0.9807477279502924, 0.9753125733346363, 0.9728113999760699, 0.980406363342882, 0.982787977265531, 0.9855549888862261, 0.6810232603175986, 0.6589048156953984, 0.6778627087431961, 0.6766267685466736, 0.6755958551845698, 0.6806895624907595, 0.6744480792120382, 0.6359820325856091, 0.574443846188935, 0.826624607800553, 0.7952259938410355, 0.8141916260261913, 0.795720475252802, 0.8580548147709441, 0.8445550369005409, 0.12525684064656195, 0.8382782218330459, 0.7834187387173774, 0.1329832856619081, 0.4672086844984873, 0.4690151646774845, 0.4979159365826171, 0.17185488440301866, 0.4353180998904098, 0.13114515506154767, 0.1587107959947509, 0.44014358477694704, 0.4037782647544256, 0.11924791829785775, 0.39906637660034183, 0.5052046127732308, 0.5700293434867025, 0.13200281670403546, 0.5174291502351127, 0.11364479822051232, 0.5036860319413474, 0.11338982823257193, 0.12909848981776217, 0.16975145367848432, 0.1695171777317941, 0.17953366196389342, 0.11802679291838214, 0.11063716663483736, 0.11929425098654178, 0.12150204077065296, 0.24387039291688695, 0.25463117669180646, 0.28434814371542694, 0.27267460354232353, 0.24544981380552522, 0.23642619351516758, 0.32596721636276393, 0.2948154826551529, 0.2746593334198161, 0.19853279161110415, 0.28976449752482203, 0.04029371196639586, 0.23754681725852977, 0.09901775781282651, 0.23715984885384855, 0.1146417365856649, 0.10315194005886152, 0.2328247003790591, 0.2823887588689923, 0.31819027978782977, 0.30630117689546466, 0.2565143504245486, 0.2390654788257287, 0.28440990783514175, 0.23419177842743255, 0.15852159755276074, 0.23004135787035862, 0.7033322897772287, 0.6628879244057132, 0.6327016530510914, 0.6687938085520295, 0.6531635656079214, 0.7074371372690356, 0.6844833448928672, 0.6565184859502107, 0.6760559143384526, 0.11319703492877164, 0.1717776481366271, 0.10390199853746196, 0.18070149129034419, 0.11053920459444322, 0.12406869343781601, 0.108472428468251, 0.12643947354459995, 0.1438949066647217, 0.15512601030216555, 0.17003420052780016, 0.17366914227902397, 0.19354786247131794, 0.36833029413182083, 0.2029005578687445, 0.2011806101169623, 0.22612748453928055, 0.19050531680456595, 0.5462894376399456, 0.42571616191975414, 0.3851709422798667, 0.4966817825925667, 0.412306811389484, 0.6069774257234075, 0.5692821178945942, 0.5760728117249228, 0.4566999512503782, 0.22535492200743024, 0.22663224469576315, 0.29853825104517995, 0.26096243442775247, 0.2912193946922058, 0.29348708946190405, 0.28561509039523203, 0.530243464578289, 0.25980348733420466, 0.21678937550167043, 0.21087459084680904, 0.18578072732696083, 0.2063606166339952, 0.22183225161077214, 0.20200861015405203, 0.20139594849563525, 0.20544721003387112, 0.2243032371468372, 0.21843441542955555, 0.6807780264779648, 0.6386993344875398, 0.7044120112778707, 0.22593841418741145, 0.19699984767558354, 0.191258028351881, 0.2526970238987517, 0.20739170973694232, 0.1872890487495431, 0.18678163472750164, 0.15383654720686013, 0.9068330711092863, 0.2016996262076256, 0.20148190316515213, 0.12834691712749247, 0.1699109043124557, 0.9145592829299307, 0.8347817423230631, 0.15590052293803924, 0.7296004643100304, 0.2093918445259365, 0.8339964223923986, 0.7785742869483682, 0.10516307316988893, 0.21048640882990155, 0.8296049845310715, 0.18015314370578583, 0.19474899367312337, 0.19385985584913445, 0.18651493384665085, 0.18242704090261963, 0.1835721895711072, 0.18501625155002877, 0.19301711621712925, 0.19253860743135442, 0.10789023538439446, 0.09155398135590931, 0.08527976446434371, 0.08911426821466062, 0.08476743516412011, 0.07763936002400296, 0.07464532692447867, 0.0780302779450116, 0.08393462221918724]}, "mutation_prompt": null}
{"id": "8d3c2c36-5e84-46d2-bf7a-91d2ca5210a1", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.w *= 0.99  # Dynamic adjustment of inertia weight w\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            # Changes start here\n            if evals / self.budget < 0.5: \n                self.c1 *= 1.01  \n                self.c2 *= 0.99  \n            else:  \n                self.c1 *= 0.99  \n                self.c2 *= 1.01  \n            # Changes end here\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce adaptive learning rates for enhanced exploration and exploitation balance in PSODE.", "configspace": "", "generation": 18, "fitness": 0.3851393541938427, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "158fd13c-8c17-4c84-8016-ce37eea758a2", "metadata": {"aucs": [0.9050037183907038, 0.8992075204489068, 0.9077371513630793, 0.9023941748966322, 0.8975915517939851, 0.8943914055265357, 0.9086606189521089, 0.8968268691442783, 0.9067691097545096, 0.8061363905285517, 0.8203424663904013, 0.0430753130476742, 0.8243731234234762, 0.8042813116178464, 0.8077540699547812, 0.8112745203943235, 0.8215876635283306, 0.04999948821098221, 0.11174936276961289, 0.15422965533443278, 0.46586099248890456, 0.14668713182784354, 0.12628961316373566, 0.7506574555249345, 0.15573333485727614, 0.1570169693426844, 0.1534579476748491, 0.1630841745080932, 0.1409092161076836, 0.16381024570697933, 0.12880377718158598, 0.13307764823375168, 0.12892421627635575, 0.10696350021875078, 0.13942489315055284, 0.13166019314301958, 0.9906215480813237, 0.9859735681037427, 0.9869298529006411, 0.9807591817089061, 0.9747689078079, 0.971826915968489, 0.9804023452497053, 0.9827301898120077, 0.9855536514732076, 0.5240652313642826, 0.6951444667223687, 0.7030262895560796, 0.6197851744137053, 0.7119433094512843, 0.6675533664884093, 0.5827567254664155, 0.5565043336713817, 0.5310955459573377, 0.7566373136456428, 0.7764570406545266, 0.7706723212934675, 0.8949820918869682, 0.3652745955524336, 0.8510383120498963, 0.7690966039207673, 0.8018352349141608, 0.7477130153047684, 0.3809348496661138, 0.16470764288671635, 0.46464234929083925, 0.43887544220158814, 0.35131413600169836, 0.40574668373519784, 0.13265857029760753, 0.5189851842310385, 0.4457550935149027, 0.4660780799693329, 0.12258322757068818, 0.13200884949847735, 0.45999234722867655, 0.5038492330102078, 0.495562948329231, 0.45124848094216274, 0.11825138018527137, 0.21272098778185122, 0.14358000619173994, 0.14094878428062452, 0.17361317705484092, 0.0527537439101623, 0.20148447327463048, 0.1498219408935616, 0.15363995163370148, 0.10984885962191471, 0.13724259209024947, 0.2796806262392114, 0.2820296466107133, 0.24615063399278225, 0.27281623433018465, 0.29144829073265144, 0.21905290836711167, 0.2676296529631337, 0.34724583464233705, 0.2717704695028218, 0.23009422233854582, 0.2123946892311448, 0.25330128423508025, 0.14950779070875797, 0.128419838918286, 0.09650906201853648, 0.13031406361862485, 0.10557062292744324, 0.2462803038701733, 0.2526714919530999, 0.17867691865695468, 0.2543805438246691, 0.20966782127258077, 0.23792147568106392, 0.2704353484123976, 0.18361239681284913, 0.04921229919995951, 0.20946393843702826, 0.6636489996619415, 0.6811004883974983, 0.6292943498403009, 0.7120686749916267, 0.6576208168046256, 0.6569165041483633, 0.691143260601208, 0.6469005116444437, 0.6672584845499567, 0.11415671090816815, 0.09615343762637507, 0.17502449295731226, 0.11019794080498868, 0.12317592736140981, 0.12005107272571713, 0.0972707674503479, 0.09970763990699838, 0.0806581881452556, 0.1863954208661115, 0.3167807549729639, 0.20128320027144508, 0.20574298949070147, 0.18141863328320984, 0.14806530687861774, 0.3497991515681319, 0.2620581860730218, 0.2093187445701774, 0.39910308484486545, 0.5599310706135097, 0.48310409693951384, 0.25866167727870804, 0.5468965571368103, 0.6363038968323677, 0.5699560557295351, 0.5553749423865996, 0.5189115262080229, 0.3395559736062159, 0.27291815252343676, 0.2707552722608594, 0.38587371365614576, 0.36952741275669443, 0.24450845617096506, 0.3317789390136173, 0.3848842141253668, 0.46670940156562013, 0.21591694988479726, 0.2261492180577287, 0.19899411000049028, 0.20510087869710636, 0.20468163178234833, 0.21303697429021962, 0.2203178699847923, 0.2059767580227161, 0.1990180706011463, 0.22318045458298807, 0.21060688500472946, 0.24733924822592812, 0.21570609762442494, 0.18499310577474992, 0.5331200280997697, 0.22482751415069402, 0.24877890008531, 0.22101521567371607, 0.18720680256239908, 0.1871830247978662, 0.1539143322693559, 0.9184251874633265, 0.20133622212433566, 0.20140836340317703, 0.14273481599852966, 0.1698801627643004, 0.9258633799686856, 0.8109038642041819, 0.15625128937792465, 0.7463047886056766, 0.20972250653186253, 0.854053763977282, 0.7970649683288005, 0.10530526126019046, 0.2104063801316105, 0.8238262912236409, 0.17730425676533412, 0.19569827919538196, 0.1818786205074523, 0.22412073415689215, 0.199670264075562, 0.18850661295887738, 0.21006209986968838, 0.21095938249449786, 0.19781095400865312, 0.12337687151353471, 0.07594474920608119, 0.08248913220445897, 0.09165496219489322, 0.08047226015163089, 0.07795005482966522, 0.08307593336481423, 0.08767607805069111, 0.0869314915461904]}, "mutation_prompt": null}
{"id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # New change: Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce adaptive learning factors and enhanced velocity damping to improve convergence speed and accuracy.", "configspace": "", "generation": 19, "fitness": 0.388940725265131, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.29.", "error": "", "parent_id": "158fd13c-8c17-4c84-8016-ce37eea758a2", "metadata": {"aucs": [0.895773606590808, 0.8959741597242066, 0.9017031671763315, 0.8979630696602303, 0.8996678411215336, 0.902448253710998, 0.8989726395352848, 0.9051096376156722, 0.89541675167885, 0.8119349300731833, 0.7981606249384263, 0.7616026463551184, 0.8137177448915426, 0.807953492799294, 0.8118015321529313, 0.05434451673311447, 0.8140110392669334, 0.7448215007263455, 0.15053383663231068, 0.13027126055238092, 0.1420985260513804, 0.1380147272815564, 0.17732084366953982, 0.12252600651567191, 0.11329537470402973, 0.14630905328477006, 0.15049933421240114, 0.11491210414582309, 0.09083761838511328, 0.1133688710725641, 0.13165397753022756, 0.1376104843525685, 0.10693823641757938, 0.13364327294838385, 0.12854183506182804, 0.15560582786338673, 0.9906204865576496, 0.985952730776258, 0.9868179945423846, 0.9807036175887472, 0.9756363151136046, 0.970972893728917, 0.9790053331902868, 0.9829499721744805, 0.9820371201259132, 0.6287413025627102, 0.6437329859484474, 0.6438903122828521, 0.6688258675091007, 0.6717245453918541, 0.6367406162997706, 0.7049341047671074, 0.6023312515924106, 0.6273071946827503, 0.8641937472089644, 0.8150821430373243, 0.8259923428500127, 0.8846499562446233, 0.8113572098961994, 0.8207841220842952, 0.12546936409907283, 0.8664889101319948, 0.8320930065161639, 0.45581958685500334, 0.487156675131876, 0.4423678575744441, 0.5823048447858492, 0.13353407658984418, 0.45766606644609475, 0.43181274071225373, 0.4716564656836336, 0.45727812524707556, 0.4077868276987142, 0.11970743414832974, 0.3878470092187062, 0.5293435054886864, 0.40891694848116533, 0.46958059358657933, 0.49507147526776263, 0.22317430724253695, 0.437885414657026, 0.14518623517036866, 0.13734633058607848, 0.17654923780552179, 0.18351730866627092, 0.15267054385952616, 0.14190948864062536, 0.16395761958714505, 0.1322498345949762, 0.165284719705586, 0.279446601808392, 0.2584052347219067, 0.2382617800531842, 0.2846060579863444, 0.2544060474393519, 0.19081882174441467, 0.3151887089673562, 0.24901722850074226, 0.2707300647643216, 0.26648704214546237, 0.04606327706965352, 0.22018449706357568, 0.33687287238278685, 0.09810524161148992, 0.1522465293241525, 0.10218170193974896, 0.10789554464783957, 0.07361089618978744, 0.25397151099328164, 0.25263358001533043, 0.24947216601671895, 0.2550897622033226, 0.26942224938033554, 0.2851737065300858, 0.2495985285437744, 0.20298777064153606, 0.22277628920978987, 0.6939321816322073, 0.6772782213333727, 0.6867583562166487, 0.6664559488825453, 0.6811152632695231, 0.20949140392237176, 0.6714859638642929, 0.6740222014354389, 0.6769619317610562, 0.11157130579956143, 0.12596033579551313, 0.14174624996759155, 0.089129478000464, 0.14635610601063875, 0.1381432162197973, 0.13518269078006928, 0.1275214752283218, 0.11849352802841329, 0.2531259548541972, 0.23616653594998505, 0.15703758208447582, 0.19537819859732586, 0.4684810623929043, 0.2227653410778172, 0.26900706110078876, 0.19506944241826418, 0.22499858379783544, 0.6645292894342292, 0.5566620737105632, 0.3949949872395855, 0.5888106901496579, 0.35749528451081647, 0.4155420291152254, 0.5865377104834715, 0.6227645501847591, 0.7131789951923353, 0.29719976619157873, 0.3268282557967582, 0.2933792309791571, 0.26872296859099665, 0.2829895839975798, 0.2520819338364402, 0.27963618887447683, 0.34128830929012843, 0.29800955109125915, 0.20043883162506482, 0.19061701397071673, 0.20786927407813904, 0.18864487050643175, 0.20044754757082162, 0.18924300923389825, 0.21681863884393637, 0.2026744287671085, 0.20005921925401693, 0.18457062845294125, 0.20924599251075482, 0.19878920362391317, 0.25233803368389285, 0.24812543130262155, 0.2092871644228811, 0.7417271276940992, 0.2466355321278677, 0.24576785982096372, 0.18770515048459835, 0.18696442335217267, 0.15397973202006376, 0.17284943650049478, 0.2016843591140952, 0.2014491089778705, 0.14686604374513157, 0.16995864055020815, 0.2089012942339571, 0.8406479792627557, 0.1560579647320628, 0.7504275667124422, 0.6879324500097856, 0.822204301176295, 0.8437708156622667, 0.10527542207769314, 0.815178539885724, 0.83097242751378, 0.17443601183618151, 0.19481967362871588, 0.1942589009451886, 0.19519555441086944, 0.18350869708361184, 0.18496896574664157, 0.1982813822646755, 0.18561298509366964, 0.18478164552780896, 0.08214466718207036, 0.09558741287842842, 0.08634355793634807, 0.09307246431921667, 0.09358743735022124, 0.07618982111372441, 0.08116202720509302, 0.08900627498489522, 0.0801979175064611]}, "mutation_prompt": null}
{"id": "890d8814-5a94-4def-a78f-b7be05964806", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.9 - (0.5 * evals / self.budget)  # Dynamic inertia weight adjustment\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # New change: Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce dynamic inertia weight adjustment to enhance exploration and exploitation balance.", "configspace": "", "generation": 20, "fitness": 0.3170871728956942, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.7727830927515343, 0.7646282344045825, 0.743068691998576, 0.7849476695203853, 0.7530445986500536, 0.7558533140586995, 0.7760639088152352, 0.7765456564326972, 0.7751276057302277, 0.603739598527302, 0.5804084972820891, 0.6236555426484597, 0.5948517720710853, 0.5771584178482643, 0.5760309881154784, 0.6272262087029045, 0.6314630051954986, 0.5968152423622215, 0.12207088710348457, 0.12433181963954543, 0.13865526320392307, 0.27577480956966416, 0.09410417747852129, 0.14211802847362853, 0.10698190746112868, 0.11141274443937399, 0.123082672733556, 0.10728381398106379, 0.12166408990372168, 0.09550371844702332, 0.12062493483275216, 0.09963061946076346, 0.11683889002763026, 0.1179980864466399, 0.1222777783525002, 0.0925531894223326, 0.9867606509487775, 0.9865652985331032, 0.9906899008642893, 0.9834721793144688, 0.985545958813236, 0.975388484058099, 0.9841505230163579, 0.9848251550571219, 0.9857830617565178, 0.3796237293925062, 0.38670359923311803, 0.38589365396291897, 0.4006770671501806, 0.1403219039789807, 0.3675871804776393, 0.4122788416385321, 0.4156855139333364, 0.08038899804809074, 0.6101237111770832, 0.6339783245813257, 0.572625972409667, 0.6586910144683189, 0.6629651291887015, 0.19155124247111677, 0.6254284862611643, 0.607310265453818, 0.6458410174250433, 0.2707050190046908, 0.3055990534267349, 0.31577792710983876, 0.24099289255461454, 0.3402494878594705, 0.337262512415747, 0.2772181744201725, 0.32112120449406567, 0.3406738130540653, 0.2685232443005937, 0.15230081087804592, 0.2979312792099932, 0.3144774358509378, 0.28686337927052596, 0.3013375145915568, 0.30488281679188856, 0.2774258523913009, 0.274110502286107, 0.13926196943868185, 0.08576857822401107, 0.06170948953354127, 0.16543340230082337, 0.11885253000593399, 0.094920993271298, 0.08428045340434587, 0.10299558766671713, 0.15151093391491322, 0.28503277376697056, 0.25911498022238644, 0.23682576988133064, 0.22902505488588287, 0.24695285129666245, 0.19879607501644692, 0.25962388689707105, 0.24832387189442484, 0.23786637061621463, 0.05347306852751499, 0.05712229027633531, 0.042704506687509136, 0.04714687203569867, 0.11439182363418532, 0.02697376720078115, 0.07463893662580978, 0.025481032393897873, 0.03032993341182555, 0.1502193849311787, 0.15454463110306804, 0.1462336489602145, 0.17533729976026247, 0.17327180823416988, 0.1954611155139776, 0.1407577689672409, 0.15253985091803102, 0.16481971232875292, 0.5299279482905068, 0.5102364805735868, 0.5742865089964937, 0.5276105529500255, 0.5534467730062428, 0.5625868931270672, 0.5639886642806151, 0.533355725413537, 0.5387193734632163, 0.26059325737165817, 0.10324626641010215, 0.09354814892653707, 0.09182388305984002, 0.10701285908879765, 0.10229850396267315, 0.10933870129039625, 0.09624403008085314, 0.10758816154145612, 0.13916003250217857, 0.14821492443317053, 0.3281816251315115, 0.16076455970921055, 0.4599078839659835, 0.15222330881895707, 0.25026434969663136, 0.18113329745363516, 0.18179315108557526, 0.46759574660422476, 0.42809401162011707, 0.40277520404331124, 0.4244787620381255, 0.35456011261871023, 0.42816490499508786, 0.46089500071162515, 0.5129236201001139, 0.4851953288331706, 0.30850030330619194, 0.22696316272186134, 0.23945402335705235, 0.21069771783312286, 0.29911834661605996, 0.2320628600682112, 0.3043446796227045, 0.29311063305242546, 0.34290572499432603, 0.20958935030167558, 0.16529197665909412, 0.1862602191892958, 0.19326221812945654, 0.16616500903217746, 0.18006875661981925, 0.21787581492209962, 0.19365845999134068, 0.17958218648099633, 0.3756820061299613, 0.20769122067277634, 0.21360401896244596, 0.20968087392801837, 0.22888526383950158, 0.20715769605359446, 0.20821381553770002, 0.18457333236272633, 0.20948183067498416, 0.18725069773725367, 0.1833782689160437, 0.1128838661381234, 0.18895229718185846, 0.19847417160811598, 0.19786636635267296, 0.1425604839867377, 0.16871924390328097, 0.20817154536609828, 0.6946461591638406, 0.6158934406033696, 0.20623485021990695, 0.2070020461973925, 0.6625781913622151, 0.7034142015477033, 0.10510839504810232, 0.6173595483418431, 0.634327793709444, 0.19203266669624208, 0.19174239845367103, 0.17632630267638016, 0.18622628946215647, 0.17472705070487793, 0.18037924768931857, 0.21750264011053855, 0.18530637106626657, 0.1808207559035886, 0.0727543978932208, 0.0824825735398017, 0.08910196632529754, 0.0763350858991877, 0.0748107199117416, 0.07559195499668891, 0.07785341010187241, 0.08193419446949879, 0.0676474115665151]}, "mutation_prompt": null}
{"id": "78426cbe-e3a6-4ad9-8eb3-905b9af73111", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.4 + 0.5 * (1 - evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # New change: Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce adaptive inertia weight and hybrid mutation strategy to enhance exploration and exploitation balance.", "configspace": "", "generation": 21, "fitness": 0.3170871730415864, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.7727830927517271, 0.7646282344038822, 0.7430686919966301, 0.7849476695258514, 0.7530445986452539, 0.7558533140612336, 0.7760639088225252, 0.7765456564304515, 0.7751276057302088, 0.6037395911833803, 0.5804084749978333, 0.6236555425520747, 0.5948517718730661, 0.5771584173256883, 0.5760309883628647, 0.6272262054087525, 0.6314630045744039, 0.5968152373103763, 0.12207088710348313, 0.12433181963954543, 0.13865526320392307, 0.27577480956963474, 0.09410417747852129, 0.1421180284736241, 0.10698190746112868, 0.11141274443937399, 0.123082672733556, 0.10728381398106379, 0.12166408990372168, 0.09550371844702332, 0.12062493483275216, 0.09963061946076346, 0.11683889002763026, 0.11799808644662735, 0.1222777783525002, 0.0925531894223326, 0.9867606509487775, 0.9865652985331032, 0.9906899008642893, 0.9834721793144688, 0.985545958813236, 0.975388484058099, 0.9841505230163579, 0.9848251550571219, 0.9857830617565178, 0.3796237295252948, 0.3867035996755166, 0.38589365497777717, 0.400677067989722, 0.14032190397908617, 0.36758718056289374, 0.41227884178747654, 0.4156855142740953, 0.08038899804809074, 0.6101237111770832, 0.6339783245813257, 0.572625972409667, 0.6586910144683189, 0.6629651291887015, 0.19155124247111677, 0.6254284862611643, 0.607310265453818, 0.6458410174250433, 0.27070501903213107, 0.30559905338684756, 0.31577792708675356, 0.24099289258475876, 0.3402494878717325, 0.3372625130393332, 0.27721817439060414, 0.3211212044023689, 0.3406738129745259, 0.2685232443005032, 0.15230081177759403, 0.29793127920707707, 0.3144774359913458, 0.28686337935044026, 0.3013375146312005, 0.3048828183693576, 0.277425852407323, 0.27411050229009737, 0.1392619695586862, 0.08576857821756989, 0.06170948953347999, 0.16543340229660786, 0.11885252999964047, 0.09492099327296577, 0.08428045340422508, 0.10299558766584138, 0.15151093412833894, 0.2850327737682028, 0.25911498021765766, 0.23682576988149273, 0.2290250549483548, 0.24695285177325077, 0.1987960750247163, 0.25962388691036364, 0.2483238718972528, 0.2378663706153571, 0.05347306852734324, 0.057122290274950305, 0.04270450668772552, 0.047146872036163745, 0.1143918236272724, 0.026973767199778398, 0.07463893662559073, 0.02548103240205668, 0.030329933415976118, 0.1502193849201514, 0.15454463110226224, 0.14623364895756152, 0.17533729970795098, 0.17327180829810873, 0.1954611162077684, 0.14075776896876357, 0.1525398510176319, 0.1648197123766122, 0.5299279486782476, 0.510236478894467, 0.5742865533966239, 0.5276105533512297, 0.5534467747316194, 0.5625868895826546, 0.5639886594621525, 0.5333557268916748, 0.538719372166627, 0.2605932573615092, 0.10324626641010215, 0.09354814892653707, 0.09182388305984002, 0.10701285908879765, 0.10229850396267315, 0.10933870129034073, 0.09624403008085314, 0.10758816154146156, 0.13916003250219433, 0.14821492443321205, 0.32818162513192706, 0.1607645597091858, 0.4599078841028198, 0.15222330881895707, 0.2502643496965917, 0.1811332974535751, 0.1817931510855978, 0.4675957388558517, 0.4280940233805882, 0.40277520384751386, 0.4244787624561981, 0.35456011261272746, 0.4281649048200936, 0.4608949999385181, 0.5129236216502451, 0.4851953495949193, 0.3085003033232451, 0.22696316272167427, 0.23945402335699906, 0.21069771783309754, 0.29911834661343584, 0.2320628600683048, 0.30434467962429324, 0.29311063305241103, 0.3429057249726405, 0.20958935030167714, 0.16529197665909012, 0.18626021918935554, 0.19326221812968547, 0.166165009032198, 0.18006875661981925, 0.21787581492209962, 0.19365845999122444, 0.17958218648111268, 0.37568200612728464, 0.20769122067277634, 0.21360401896244596, 0.20968087392801837, 0.22888526383950158, 0.20715769605359446, 0.20821381553770002, 0.18457333236272622, 0.20948183067498416, 0.18725069773725367, 0.1833782689160437, 0.1128838661381234, 0.18895229718185846, 0.19847417160811598, 0.19786636635267296, 0.1425604839867377, 0.16871924390328097, 0.20817154536609828, 0.6946461591635575, 0.6158934406015178, 0.20623485021990695, 0.2070020461973925, 0.6625781913619541, 0.703414201547711, 0.10510839504810232, 0.6173595483431099, 0.6343277937095644, 0.19203266669624208, 0.1917423984536748, 0.17632630267638016, 0.18622628946216369, 0.17472705070487793, 0.18037924768932567, 0.217502640110533, 0.18530637106626657, 0.1808207559035886, 0.0727543978932208, 0.0824825735398017, 0.08910196632530365, 0.07633508589920934, 0.0748107199117416, 0.07559195499668891, 0.07785341010187241, 0.08193419446949879, 0.06764741156651422]}, "mutation_prompt": null}
{"id": "a6b06fc6-8f4b-4c42-93ec-449c9eb9cc4c", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.9 - 0.5 * (evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel += np.random.uniform(-0.1, 0.1, vel.shape)  # Stochastic perturbation to velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # New change: Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Integrate adaptive inertia weight and stochastic velocity perturbation to enhance exploration and exploitation balance.", "configspace": "", "generation": 22, "fitness": 0.2704812257022035, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.5765658836277316, 0.5190435655206265, 0.5668770435433765, 0.5723430212066501, 0.59254570510742, 0.5367872776934536, 0.5906471697581572, 0.5697869429219822, 0.5402579191456729, 0.22980292888691545, 0.22804646639699155, 0.23882273138143228, 0.2217030621076549, 0.23879982371129105, 0.24167109370028472, 0.26169462423757006, 0.2563368004998857, 0.23112200858916498, 0.10826651686778421, 0.09338174490371509, 0.11040653134187783, 0.10805344012128948, 0.1335334238024134, 0.09879260215066299, 0.11358218630664618, 0.10422971365556855, 0.11234041281829654, 0.08713604604496106, 0.09853831123532342, 0.10672063740643623, 0.1154729737474347, 0.10865133529126891, 0.08278806437540298, 0.09747992139594153, 0.08886432701174873, 0.08904669646389463, 0.9857168172639996, 0.9866550472576521, 0.9868521460657129, 0.9846368917756853, 0.9842507979682519, 0.9846536219237769, 0.984053550713032, 0.9812597433441416, 0.9854490376582599, 0.29454624346782443, 0.2560467807095007, 0.28507770082788453, 0.3031250374020813, 0.2826825360800592, 0.27809752094451656, 0.30261401698276436, 0.29190726548494383, 0.30456479336800235, 0.6327261432417619, 0.5536163720252587, 0.5296111421487584, 0.6546477097719137, 0.5853642452936303, 0.6203218037744567, 0.5069449239567363, 0.4804993605156245, 0.5404562452313817, 0.23530225611268596, 0.21092690913128054, 0.24780438688654194, 0.2964622425630171, 0.24586802372853322, 0.23949337067280263, 0.21325181254379189, 0.21419778817469248, 0.26127217038504436, 0.23926712546928264, 0.13842765043751803, 0.19911790160162368, 0.24303557029161205, 0.24719874251363594, 0.1853956726162782, 0.19792865780083746, 0.21711691846794712, 0.2281821831529185, 0.10729973162362638, 0.11832375122406646, 0.15599253187013473, 0.15089346056776798, 0.11695258650651463, 0.12389320354421984, 0.145498486087262, 0.10114456861803922, 0.08252777041698778, 0.20337222320488124, 0.24073194356619854, 0.2570365578765086, 0.2879135829899139, 0.29555005974351056, 0.221816071640628, 0.27103057886557147, 0.2610580402123518, 0.20760029935836988, 0.06307145299444905, 0.018773594648723302, 0.015363271119640198, 0.078467419332088, 0.06153475883568449, 0.005277805726350171, 0.055406200171584374, 0.034628136701607026, 0.04734328430720269, 0.16929722348461695, 0.15174122704367055, 0.14183568604162733, 0.14768784433744708, 0.13996965389882043, 0.150857857087632, 0.13979758881926407, 0.16727444870894492, 0.15665760736539236, 0.5012708609988837, 0.4790477903499809, 0.4773952155994019, 0.49839564423222626, 0.4781933405636625, 0.49279372933463517, 0.47831743446972497, 0.49801622913700716, 0.5024279292838061, 0.10394826222066422, 0.10461947205525102, 0.09523050600994776, 0.09056727090480832, 0.09801145929897426, 0.09314953703662099, 0.09132479624949541, 0.09103474845362491, 0.10288215071102591, 0.17691233327898515, 0.16073276794347457, 0.16920443111767203, 0.1945044224673267, 0.16167000107161233, 0.23193194482194335, 0.20359045043523627, 0.2512113093196906, 0.2259593231633149, 0.30793766228206665, 0.3271805061960057, 0.3026966784379105, 0.30676506610531995, 0.2908405419637232, 0.3107624364392074, 0.30519474537023683, 0.30190660042210793, 0.3100865782482791, 0.22585082181047966, 0.2126404125745487, 0.22776573807400258, 0.21561375290777218, 0.2153873029741198, 0.22619434454117238, 0.2416552885063865, 0.2275346551631472, 0.22683288640421795, 0.208404019633196, 0.18620413464029684, 0.19136850999674548, 0.18950633700012964, 0.17679956252936102, 0.17760649859423105, 0.1829241352050912, 0.21578108673788465, 0.21527263198749502, 0.19728023100345615, 0.2634521326244903, 0.18478610869528, 0.24950008859095174, 0.259410718082563, 0.19339209295736914, 0.2668180028120142, 0.2088378779797475, 0.225098277223302, 0.7518988703592114, 0.20458220808888028, 0.15351985724897932, 0.17757258921112684, 0.19556768873568786, 0.19851784286117957, 0.18058739300653903, 0.1668295392817255, 0.6874495074494036, 0.6843493799653, 0.16727998551876955, 0.483695882918048, 0.1998214712715487, 0.19288050802153, 0.5267190951265703, 0.20834052280263693, 0.2085728225742961, 0.20982630364371657, 0.19473865073008811, 0.1868298014307963, 0.18176160996794744, 0.18751068205398247, 0.2191215372245522, 0.19801961118849487, 0.17951669280171478, 0.18705839658069867, 0.17285056803611953, 0.08694988230421008, 0.07982748103520498, 0.07516631561101217, 0.07705600769781906, 0.08334823935730451, 0.07995842852683821, 0.07157388166611656, 0.06959789145162598, 0.07702944141709644]}, "mutation_prompt": null}
{"id": "b021e064-e78a-4598-a551-a9d986815490", "solution": "import numpy as np\n\nclass PSODE_Improved:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Adaptive inertia weight\n            self.w = 0.9 - 0.5 * (evals / self.budget)\n\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                # Chaotic local search\n                if np.random.rand() < 0.1:\n                    trial = pos[i] + np.random.uniform(-0.1, 0.1, self.dim)\n                    trial = np.clip(trial, self.lower_bound, self.upper_bound)\n                    trial_fitness = func(trial)\n                    evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # New change: Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE_Improved", "description": "Introduce adaptive inertia weight and chaotic local search to improve exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": 0.3182417544030974, "feedback": "The algorithm PSODE_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.7734536761880246, 0.7525349623186106, 0.772500111545978, 0.7832512110969456, 0.7790287692773319, 0.8048245678458561, 0.7754893786950998, 0.744787470886406, 0.764502920696952, 0.587027215582534, 0.3848127321172162, 0.5921455163343565, 0.585139748559325, 0.5985452708113717, 0.022555324489481277, 0.606077499055515, 0.6104621732098872, 0.547095369830895, 0.11570351213410901, 0.12427347153578283, 0.12820413919246654, 0.10810909703161165, 0.11155900034835375, 0.12981867651951073, 0.0942976552346525, 0.11366846958063814, 0.11641737552134546, 0.12502029332273812, 0.11698608828654267, 0.09325647313331287, 0.11207241533342127, 0.11510775587738609, 0.12160447123478424, 0.10507044892308737, 0.12242943039716703, 0.11799599029362029, 0.9860127273398454, 0.9860160887157938, 0.9902572360606433, 0.9799950334586579, 0.9804566265377442, 0.984757897549245, 0.9805905462804195, 0.9840385533358184, 0.9905225034479294, 0.4118894999485002, 0.3796468105225055, 0.3654950693847462, 0.4056650487715626, 0.4199711244553921, 0.40787701914808705, 0.38532542616885945, 0.34617577164496083, 0.3527586953195956, 0.5884696645372189, 0.5889661739417082, 0.6566606516276949, 0.6323371255092105, 0.3206890507864827, 0.6381969230190829, 0.5905402804607118, 0.6284901199538555, 0.5880247874395588, 0.32177864030606984, 0.3045401553024638, 0.3042505192566407, 0.2472102231549418, 0.2830895024950806, 0.2786724541862097, 0.27592649490885857, 0.26156558609524017, 0.2967584907796952, 0.2837850637304704, 0.2753007750818668, 0.28627266854856637, 0.2751583413504963, 0.2787847930492776, 0.344430970639784, 0.10649601000505116, 0.2628619085819891, 0.24211793169009643, 0.08371286917669418, 0.07917691798606807, 0.07923799127368314, 0.15048401396037026, 0.09276405426822787, 0.08720109442640078, 0.06085151867974292, 0.11251095838762826, 0.10338461323838732, 0.20332587713057493, 0.24999273850158044, 0.23430894325842033, 0.1770387802526293, 0.18524392331390394, 0.17709885391472158, 0.24648829181918164, 0.19565036201133723, 0.2780230897458901, 0.03404796608705751, 0.039632049549773174, 0.06023624800033045, 0.11311905320846705, 0.03652411062609795, 0.025285706418946563, 0.07710933770703465, 0.08599902719506569, 0.0072858339550085915, 0.14067562273266798, 0.14345950147325603, 0.17783678315254003, 0.16348529649605303, 0.14850870336771949, 0.20555875090338482, 0.1431051224015255, 0.1556932402695067, 0.0787346785841313, 0.5099389328956282, 0.5434293951931171, 0.5285246176295443, 0.5522718862998306, 0.516195420686118, 0.5448962755807436, 0.531426767116679, 0.5355168065500955, 0.5188600987893139, 0.12951226200088772, 0.12466578417823071, 0.11303475789509287, 0.10935641738754953, 0.20480987510526716, 0.1067187817563634, 0.13698006139846564, 0.09239165193109633, 0.10038091929430681, 0.16061807550614537, 0.13939460905906653, 0.21823935404968198, 0.15949266265690798, 0.2579481994051067, 0.18670299323889727, 0.20011015410974642, 0.21731844479317075, 0.19957708673270158, 0.40355863215076326, 0.4310968972511766, 0.46477477246891796, 0.31885373267008676, 0.3985211808013359, 0.34786379649007926, 0.2743125547791764, 0.45056631795628554, 0.4855604757109657, 0.22865518321294287, 0.2586731143601817, 0.2815637574353078, 0.22883194661417539, 0.23971672488342632, 0.24130656772132653, 0.37320879902588744, 0.2931316960565936, 0.2645695950505317, 0.2056344813916735, 0.19200265008071093, 0.18346508671624429, 0.18348646966444393, 0.18866448823870619, 0.1757930573062636, 0.1924286888410891, 0.18808533534992355, 0.19111229405800478, 0.3414307012397655, 0.18576991392644526, 0.1917918723279609, 0.41320386843358126, 0.2259195377103167, 0.1792399279971687, 0.21741211436313368, 0.2046860710064341, 0.1968740579659105, 0.7845286265840975, 0.1841352806486467, 0.7690904889923529, 0.7677489180333146, 0.19727732382953367, 0.7620341608262067, 0.6999795952996721, 0.16887478996691063, 0.7930476527836865, 0.6880267205366817, 0.5628800577081927, 0.20343580164160047, 0.2054231344168953, 0.19843909096333368, 0.64804875970715, 0.10518009276232299, 0.2107455165065637, 0.210469855476774, 0.1918556524632311, 0.1912859336933852, 0.17827770851688096, 0.20218218609216554, 0.19385655823265135, 0.18881403561373888, 0.1740581586777571, 0.19870539026576262, 0.20291860686718033, 0.07176723997955725, 0.08303711356198051, 0.08016119228162555, 0.07599918467894073, 0.0728832365094686, 0.07958962998105013, 0.07784437798831845, 0.07042407669947737, 0.07966655934027]}, "mutation_prompt": null}
{"id": "0c4e998e-bca7-419c-89ed-71cbc1baf03f", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.7, c2=1.3, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c2 *= 1.01  # Dynamic adjustment of social coefficient c2\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n            vel *= 0.85  # Hybrid velocity adjustment to balance exploitation and exploration\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhance adaptive learning and introduce a hybrid velocity adjustment to improve exploration and convergence.", "configspace": "", "generation": 24, "fitness": 0.34509928229592174, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.27.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.9113454797590661, 0.9075274860750975, 0.8985754308706145, 0.9023113075678485, 0.895562894030736, 0.9050868150404525, 0.8928446606562902, 0.9048093931570343, 0.8950629729602612, 0.7728068904781593, 0.75889743203906, 0.7395340473303934, 0.7458459149638117, 0.6753325186324615, 0.7862996946396084, 0.05956487867444793, 0.7864991406654394, 0.767908953500954, 0.11684373211494381, 0.10402154258942753, 0.14622773793292654, 0.26276005716681516, 0.09727516010845516, 0.13258031728671216, 0.11504619203957578, 0.13353112214583596, 0.15464639746007613, 0.13537394011617065, 0.13497296609434906, 0.09423130000657642, 0.11360853525902237, 0.12331521013528213, 0.10411560918335871, 0.1029349763379549, 0.14134812899725713, 0.12510611876353273, 0.9814764855536907, 0.9857781633204638, 0.9850753923624683, 0.9847933627006356, 0.9809148237868549, 0.9741691891426019, 0.9807883300940043, 0.9824625605059367, 0.9836747171700626, 0.23502905349846748, 0.3541648636604853, 0.33467956120459397, 0.373983023655829, 0.35867290748576575, 0.44329340382442506, 0.40563457147261084, 0.363842907545471, 0.34952487595981374, 0.6510506287662956, 0.5365196583425647, 0.6881255748960542, 0.8631672407252016, 0.7317349950002718, 0.8039054284669891, 0.7633489676112486, 0.8044947460901501, 0.7297977223243783, 0.1308741080826128, 0.3644858152157434, 0.3345829705396586, 0.1336998395689072, 0.3689724547817216, 0.37565100766663895, 0.3911764089369901, 0.5220345120046046, 0.34275761649321, 0.3757644998418638, 0.1672963143360524, 0.3345770331224287, 0.1355103892526084, 0.377780850671097, 0.3912712310955271, 0.40301299680860336, 0.3108338555513418, 0.1247010453825882, 9.999999999998899e-05, 0.11025509560135793, 0.13137032285895367, 0.0002760183803697247, 0.1563570389010649, 0.11419885496217752, 0.1303162546861386, 0.13046974471450135, 0.15631657403121424, 0.27192035524895464, 0.24862829488742633, 0.23760567785691766, 0.2657178735672302, 0.22938025255965722, 0.20607283178981584, 0.2900883289442432, 0.29862336113957144, 0.33415415786989855, 0.05132525207288052, 0.09199176233025352, 0.2571977382691285, 0.16418276375336305, 0.18800132350187715, 0.11086611247730671, 0.10152528293361118, 0.1970637555512531, 0.07398628852942024, 0.2036733501189094, 0.33193264896928354, 0.22301222530153741, 0.3277145143013507, 0.23151870907535932, 0.20105316777623716, 0.08353045722765928, 0.17758745577765989, 0.08385066134118824, 0.6213331560305946, 0.6516254923803566, 0.6292342365527357, 0.6251029385969735, 0.6281797624412875, 0.6036792022963102, 0.6416216951289626, 0.6684023511484207, 0.6665226488218086, 0.11434960334727151, 0.0976265992402876, 0.10475477747362016, 0.1125725995646113, 0.0850241544375252, 0.14215885686185703, 0.1166339117024292, 0.10306451434524788, 0.18617739453243365, 0.1351176132427827, 0.16687875819218656, 0.15034657410165653, 0.20844974236233693, 0.15816548982494327, 0.1892716821877286, 0.2032606869135648, 0.1593553543144215, 0.23043037645134168, 0.40223672022615076, 0.4119013586185508, 0.4205208217721832, 0.43549236648212664, 0.49038053810522986, 0.3880955444673623, 0.5213962317886417, 0.5181596364985264, 0.5086582025718418, 0.29048517336104307, 0.3116949205795271, 0.30410126590218334, 0.20426776875598118, 0.24445022914419146, 0.28073021394976383, 0.2828869339512011, 0.3124158567267671, 0.254427272108914, 0.1942694011298558, 0.1922009567349915, 0.2143000790310392, 0.1918646916038207, 0.17667237688278747, 0.18059805227503234, 0.1760683835343836, 0.1893883883412253, 0.18613756780846058, 0.22739085392832303, 0.23242752267056632, 0.22011329221947196, 0.21648312037168038, 0.21918184691878528, 0.24665106944792037, 0.22594516390308916, 0.22002451570579484, 0.21181441035949777, 0.18692087339722552, 0.16514677078613094, 0.1529664386729337, 0.9132054620402861, 0.2018999493880147, 0.20102666274161862, 0.14400676592879613, 0.17009419748910637, 0.21250275305333566, 0.7701461342365575, 0.1565515145441032, 0.7545865943326177, 0.21148090283270016, 0.7870045494772148, 0.8413876424557909, 0.10535829256923301, 0.209264111423627, 0.1048764995106074, 0.17867062769841158, 0.16952533342941678, 0.18357933195574283, 0.17635765597071074, 0.22339736289706236, 0.2034621199759571, 0.1857989578717194, 0.18581051084388178, 0.18695424283551798, 0.07702376129394639, 0.08627102160598732, 0.07650763383791981, 0.0765807053627412, 0.07007222107798294, 0.0789090403922812, 0.0722023058885044, 0.0766931146658193, 0.07132442645767512]}, "mutation_prompt": null}
{"id": "24ea5ed1-59b4-42ce-a957-ba4d55cf26b2", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.4 + 0.5 * (self.budget - evals) / self.budget  # Dynamic inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel + np.random.normal(0, 0.1, pos.shape)  # Add jitter noise\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Implement a dynamic inertia weight and jitter noise to improve exploration and exploitation balance.", "configspace": "", "generation": 25, "fitness": 0.2664479606471999, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.5599631294321898, 0.5388437471868921, 0.5285514700327301, 0.5767566729230293, 0.5745486346343884, 0.5381060123359138, 0.5514679817628401, 0.5323791969045644, 0.5511522241059218, 0.2316914238162363, 0.20787993612664257, 0.22107968766201347, 0.23148494471476788, 0.2118825146304537, 0.25106690850792635, 0.22488701462392569, 0.2638702047178, 0.22093667044155296, 0.11234316023625657, 0.09985529428917106, 0.09139359664788937, 0.09464346095981824, 0.0847279832827591, 0.08533654398384027, 0.09899502530364057, 0.09352255635809592, 0.09850411522041702, 0.09767269719183347, 0.08792140535735138, 0.08293847428465706, 0.08353925912729532, 0.08489029984823859, 0.10263555624990017, 0.08114708292087869, 0.07430014816544483, 0.09162329672267555, 0.9864339854827705, 0.9913887214307366, 0.9870373042081338, 0.9845161446881123, 0.9861495854261281, 0.9807024325246539, 0.9813983988974109, 0.985166623718087, 0.9808899642497754, 0.27747081108125127, 0.2669754517579205, 0.24498442380137386, 0.28362906149919365, 0.2653366930038943, 0.2715378204135861, 0.2819089976383625, 0.26886355712012944, 0.2761764882496832, 0.563122854403048, 0.5118544164283969, 0.4804377729755436, 0.5718823703920533, 0.5619168432680466, 0.5678102895836632, 0.46145648887498847, 0.592466167664971, 0.5208316496047087, 0.20875007673252988, 0.16620929969812592, 0.1929594723460638, 0.18720257818361175, 0.22868494061151212, 0.1168314585379352, 0.25145968540317576, 0.18047763842723308, 0.1979288889206825, 0.24779926005977737, 0.16908242555883368, 0.20113269451074678, 0.23945985932204894, 0.21295236569156284, 0.23450735715142856, 0.20594541174738534, 0.18305399058258098, 0.18168616422761752, 0.1285839550687311, 0.09578126728752634, 0.08212706861848851, 0.08476282765104626, 0.13757995612924134, 0.12116202790355923, 0.1041152877538194, 0.13083644710798636, 0.11362749014056894, 0.24781888751830516, 0.26410772131263205, 0.23018440874273927, 0.20856038678143274, 0.19916301736123943, 0.19336857800973617, 0.2610267112485499, 0.2504929419452283, 0.27005910379820064, 0.009792525406149943, 0.01408693592584076, 0.03441101555249482, 0.06907220206835085, 0.061253284498521854, 0.025576239919654076, 0.01497118006285092, 0.045918789551138484, 0.03469456799424042, 0.1780009256256324, 0.13576301660139323, 0.11836792770135529, 0.16245722451609368, 0.1600746613844809, 0.14331615716651436, 0.162497724301211, 0.14536185537193325, 0.15421303010444876, 0.44978086849233545, 0.4750059853897306, 0.46755737235634476, 0.4823295212016153, 0.46401898396078367, 0.5071436855647802, 0.5150708010223245, 0.47150586196785016, 0.4823758587504574, 0.09079405439207511, 0.08284198423189626, 0.08869571068979454, 0.09295135928180864, 0.100340078613959, 0.1040286530982375, 0.0992069196505807, 0.08830377681949686, 0.08209735012133224, 0.24194351234451683, 0.1885775725610097, 0.24663744878568616, 0.2626808238400239, 0.2112012076003008, 0.14179137294487554, 0.1682568967080983, 0.23347023727554117, 0.20642073152527807, 0.2871358021723951, 0.2887886837813346, 0.29133433575512235, 0.2889414583282087, 0.30003781157159637, 0.2878587466249163, 0.3013760823361046, 0.29973219566468357, 0.3102091511243058, 0.20894616461541748, 0.21808904286649688, 0.23008532156694173, 0.22756198635994396, 0.22310771716292843, 0.19794805312686992, 0.23953239209624388, 0.24503047399764033, 0.24314689379862586, 0.1949268245472886, 0.19651958167065076, 0.18684740885124318, 0.19461914771113586, 0.17457769251164845, 0.18971949245892383, 0.1872126883694476, 0.18196464853390049, 0.2066487904922315, 0.18956663865704848, 0.18025674133709468, 0.1904994871592769, 0.18585796410612787, 0.19777934115971607, 0.20587861668783802, 0.1921989020235788, 0.19517353239229374, 0.1822099653600725, 0.7912989959308174, 0.18691311206405248, 0.1533727676805895, 0.7301044891714292, 0.6766035701913287, 0.19707656167444887, 0.1602767106066273, 0.16911981117323538, 0.6964712298697691, 0.6489779581160853, 0.5862399319652027, 0.19401619541492798, 0.20702119549075837, 0.16484412083201094, 0.6427367146997394, 0.209088481808671, 0.2110922050845041, 0.20751205130935346, 0.20103611595114812, 0.19916168909659349, 0.18826875267395626, 0.1757418355641721, 0.18115150937391644, 0.1943198088575716, 0.17932529554703447, 0.1761229091904799, 0.17609660894698376, 0.07131955682607583, 0.07985650364583052, 0.07976828544287451, 0.07302423857751361, 0.0785953874849511, 0.07189578845045164, 0.07018826116034393, 0.0836492862336663, 0.07992859257727702]}, "mutation_prompt": null}
{"id": "23772ad2-f173-43ce-9df1-2a0776253b99", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        w_min, w_max = 0.4, 0.9  # New change: Introduce dynamic velocity inertia weight\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = w_max - (w_max - w_min) * (evals / self.budget)  # Adjust inertia weight dynamically\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # Keep existing velocity damping for convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduce a dynamic velocity inertia weight to balance exploration and exploitation more effectively.", "configspace": "", "generation": 26, "fitness": 0.3170871728956942, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.7727830927515343, 0.7646282344045825, 0.743068691998576, 0.7849476695203853, 0.7530445986500536, 0.7558533140586995, 0.7760639088152352, 0.7765456564326972, 0.7751276057302277, 0.603739598527302, 0.5804084972820891, 0.6236555426484597, 0.5948517720710853, 0.5771584178482643, 0.5760309881154784, 0.6272262087029045, 0.6314630051954986, 0.5968152423622215, 0.12207088710348457, 0.12433181963954543, 0.13865526320392307, 0.27577480956966416, 0.09410417747852129, 0.14211802847362853, 0.10698190746112868, 0.11141274443937399, 0.123082672733556, 0.10728381398106379, 0.12166408990372168, 0.09550371844702332, 0.12062493483275216, 0.09963061946076346, 0.11683889002763026, 0.1179980864466399, 0.1222777783525002, 0.0925531894223326, 0.9867606509487775, 0.9865652985331032, 0.9906899008642893, 0.9834721793144688, 0.985545958813236, 0.975388484058099, 0.9841505230163579, 0.9848251550571219, 0.9857830617565178, 0.3796237293925062, 0.38670359923311803, 0.38589365396291897, 0.4006770671501806, 0.1403219039789807, 0.3675871804776393, 0.4122788416385321, 0.4156855139333364, 0.08038899804809074, 0.6101237111770832, 0.6339783245813257, 0.572625972409667, 0.6586910144683189, 0.6629651291887015, 0.19155124247111677, 0.6254284862611643, 0.607310265453818, 0.6458410174250433, 0.2707050190046908, 0.3055990534267349, 0.31577792710983876, 0.24099289255461454, 0.3402494878594705, 0.337262512415747, 0.2772181744201725, 0.32112120449406567, 0.3406738130540653, 0.2685232443005937, 0.15230081087804592, 0.2979312792099932, 0.3144774358509378, 0.28686337927052596, 0.3013375145915568, 0.30488281679188856, 0.2774258523913009, 0.274110502286107, 0.13926196943868185, 0.08576857822401107, 0.06170948953354127, 0.16543340230082337, 0.11885253000593399, 0.094920993271298, 0.08428045340434587, 0.10299558766671713, 0.15151093391491322, 0.28503277376697056, 0.25911498022238644, 0.23682576988133064, 0.22902505488588287, 0.24695285129666245, 0.19879607501644692, 0.25962388689707105, 0.24832387189442484, 0.23786637061621463, 0.05347306852751499, 0.05712229027633531, 0.042704506687509136, 0.04714687203569867, 0.11439182363418532, 0.02697376720078115, 0.07463893662580978, 0.025481032393897873, 0.03032993341182555, 0.1502193849311787, 0.15454463110306804, 0.1462336489602145, 0.17533729976026247, 0.17327180823416988, 0.1954611155139776, 0.1407577689672409, 0.15253985091803102, 0.16481971232875292, 0.5299279482905068, 0.5102364805735868, 0.5742865089964937, 0.5276105529500255, 0.5534467730062428, 0.5625868931270672, 0.5639886642806151, 0.533355725413537, 0.5387193734632163, 0.26059325737165817, 0.10324626641010215, 0.09354814892653707, 0.09182388305984002, 0.10701285908879765, 0.10229850396267315, 0.10933870129039625, 0.09624403008085314, 0.10758816154145612, 0.13916003250217857, 0.14821492443317053, 0.3281816251315115, 0.16076455970921055, 0.4599078839659835, 0.15222330881895707, 0.25026434969663136, 0.18113329745363516, 0.18179315108557526, 0.46759574660422476, 0.42809401162011707, 0.40277520404331124, 0.4244787620381255, 0.35456011261871023, 0.42816490499508786, 0.46089500071162515, 0.5129236201001139, 0.4851953288331706, 0.30850030330619194, 0.22696316272186134, 0.23945402335705235, 0.21069771783312286, 0.29911834661605996, 0.2320628600682112, 0.3043446796227045, 0.29311063305242546, 0.34290572499432603, 0.20958935030167558, 0.16529197665909412, 0.1862602191892958, 0.19326221812945654, 0.16616500903217746, 0.18006875661981925, 0.21787581492209962, 0.19365845999134068, 0.17958218648099633, 0.3756820061299613, 0.20769122067277634, 0.21360401896244596, 0.20968087392801837, 0.22888526383950158, 0.20715769605359446, 0.20821381553770002, 0.18457333236272633, 0.20948183067498416, 0.18725069773725367, 0.1833782689160437, 0.1128838661381234, 0.18895229718185846, 0.19847417160811598, 0.19786636635267296, 0.1425604839867377, 0.16871924390328097, 0.20817154536609828, 0.6946461591638406, 0.6158934406033696, 0.20623485021990695, 0.2070020461973925, 0.6625781913622151, 0.7034142015477033, 0.10510839504810232, 0.6173595483418431, 0.634327793709444, 0.19203266669624208, 0.19174239845367103, 0.17632630267638016, 0.18622628946215647, 0.17472705070487793, 0.18037924768931857, 0.21750264011053855, 0.18530637106626657, 0.1808207559035886, 0.0727543978932208, 0.0824825735398017, 0.08910196632529754, 0.0763350858991877, 0.0748107199117416, 0.07559195499668891, 0.07785341010187241, 0.08193419446949879, 0.0676474115665151]}, "mutation_prompt": null}
{"id": "467864a1-2c68-4ed3-845e-26c38e10bacc", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            vel += np.random.normal(0, 0.1, vel.shape)  # Added stochasticity in velocity\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial *= np.random.uniform(0.9, 1.1)  # Adaptive position scaling\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9  # New change: Enhance velocity damping to boost convergence accuracy\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Integrate velocity stochasticity and adaptive position scaling to enhance exploration and exploitation balance.", "configspace": "", "generation": 27, "fitness": 0.24939732838709427, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.48149224604314433, 0.49094505749359696, 0.47080966525613077, 0.46102168891650175, 0.4551618022270746, 0.4581542273330198, 0.4795865885759233, 0.47562351783498125, 0.4550035323612579, 0.047998126184928824, 0.04816344610544365, 0.059419871294506654, 0.10859905628311595, 0.10204293630798422, 0.08397825085412447, 0.03717726939266808, 0.05711799203321155, 0.04851907190203697, 0.1201614199177613, 0.09823368430027002, 0.11188066754960913, 0.09473882376383713, 0.09173297802014824, 0.10846285248892729, 0.11452711058065068, 0.11390667207439531, 0.10129175631861531, 0.09923858573696764, 0.10581279353945305, 0.1005504978954721, 0.09964782476352796, 0.1022963749820357, 0.10153777585295776, 0.09495659744602414, 0.10199475177417294, 0.14934845583411238, 0.9818931649661592, 0.9863558364647764, 0.9860548771163452, 0.980657366286692, 0.9806948316815042, 0.9807255977412115, 0.9848915467501079, 0.9800259265016649, 0.9813084280883065, 0.27632422989248195, 0.30469088540810785, 0.2806305434800117, 0.30922955325016377, 0.2973197176252472, 0.2859095437001361, 0.2968881100115113, 0.30376695118009633, 0.2823826040691416, 0.766534150368332, 0.7366905425418097, 0.7281122015082062, 0.3200977714678457, 0.333246199204279, 0.46670552576549584, 0.4174653325604084, 0.5303812975702613, 0.33448172024436473, 0.12872565179672257, 0.16845186596938944, 0.19739667600680455, 0.17369872495517924, 0.1764764454392307, 0.17921178907878732, 0.19815634577494157, 0.21880154709939592, 0.18143676046868662, 0.26864608441078686, 0.2420490722611417, 0.2393199055721943, 0.23071981672458697, 0.24750005281160803, 0.26278502003860926, 0.15432777037527756, 0.12301582241474862, 0.2346791156486372, 0.006758334152978218, 0.002693182546417705, 0.025887615293204713, 0.01482033026449392, 0.006634760339771284, 9.999999999998899e-05, 0.12808104062552372, 0.09830374779368012, 0.08355375331801429, 0.11531983216720343, 0.06527673686411617, 0.09713883012124913, 0.08451534795818638, 0.03380752915418073, 0.06588341957576138, 0.1035132749590455, 0.09951138687404859, 0.08126935935662982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12107551343529432, 0.10497801457112788, 0.13920960006121552, 0.11042022982468502, 0.12533297962477918, 0.1253970673331718, 0.08174958216771533, 0.07086130664357593, 0.0816726424476596, 0.4642236564426775, 0.45908973886777826, 0.4622850441263494, 0.428621916550731, 0.41184377837358765, 0.42880878095430763, 0.427277630152722, 0.4354759419891717, 0.4342496087673602, 0.10736387260019042, 0.10936032067544532, 0.10468401615538236, 0.10725396139424825, 0.09083998286436967, 0.10046662777356707, 0.123709488045597, 0.12788884509713194, 0.09959482519664054, 0.19127664557870194, 0.18198385389099314, 0.19026616213463687, 0.2463405823902487, 0.26385464101039147, 0.1557747445062292, 0.2911032862657248, 0.19485559612679793, 0.21708258591420238, 0.3192798086164471, 0.30357264923798344, 0.30329875162033193, 0.30987756293055346, 0.2949506337197344, 0.30170380872680747, 0.2976637499846645, 0.29998803315172606, 0.29725689735722727, 0.24052287304413922, 0.24475089649417336, 0.2333261429173763, 0.22592777275317222, 0.24286606111480746, 0.24588680214806768, 0.24286399693667904, 0.24709054631517002, 0.22790970494736118, 0.20608754914328542, 0.20812391587655998, 0.20851432524249602, 0.21900912048415544, 0.2264395801415512, 0.20577512242157436, 0.20832580932866718, 0.1871935053053141, 0.2339806442237603, 0.20485579220651284, 0.2093542855355608, 0.2352225163362759, 0.21701095889370658, 0.21100559088439375, 0.1950584619508896, 0.1991606416795162, 0.23637925078157462, 0.21257819198766148, 0.7108601788426502, 0.17730611736615143, 0.15318217856214666, 0.7015256740293756, 0.20012894143288618, 0.642935833494689, 0.1644491232059434, 0.16981578410370912, 0.6748991515181395, 0.6698528398022091, 0.16882091581482928, 0.5970993126780725, 0.20913991413514288, 0.6003094098029188, 0.609335689687607, 0.10529907799595473, 0.10504700170300896, 0.5812346166720497, 0.19081845186377744, 0.193477639245202, 0.18560392123453917, 0.18224212880702928, 0.21423890992603178, 0.19165677420088134, 0.18759775841276138, 0.18930022887191, 0.18365055225135507, 0.09593822099822358, 0.08472155691096728, 0.09110407264849474, 0.09091778545287343, 0.07419063429010564, 0.08867021432000854, 0.10819222915130744, 0.09717373726059608, 0.07603595763004034]}, "mutation_prompt": null}
{"id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by adapting velocity damping based on fitness diversity, aiming for better convergence precision.", "configspace": "", "generation": 28, "fitness": 0.39774574307717736, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "0dcab10c-cbdd-4033-9939-8acf95ca4805", "metadata": {"aucs": [0.9083921202972852, 0.9011209009492638, 0.9044960539351309, 0.892913803638225, 0.890488833714419, 0.9033203437063102, 0.9026761252243944, 0.8941952095937931, 0.9057879993032152, 0.7743317922507876, 0.79563882921022, 0.5852025676282926, 0.8139554564755875, 0.7999875259136886, 0.8030070458090436, 0.8078535599086566, 0.054413930545018196, 0.7704130606369575, 0.13656181162241376, 0.69336481706447, 0.6716667516613705, 0.11179209281734714, 0.14002985282743252, 0.15776242355811976, 0.1777804377708, 0.11767645197884957, 0.1442261818533006, 0.1095213146277716, 0.14072582021544877, 0.13326940913787444, 0.11018749453287224, 0.0928817056201886, 0.1280651087631992, 0.12448423739928671, 0.15529481517971966, 0.13084895095942362, 0.9906205571898162, 0.9859570120492911, 0.9868402774752513, 0.9807039530070538, 0.9756364241050943, 0.9709754659155376, 0.9790323300374494, 0.982894142419722, 0.9841727365883958, 0.6137489391640982, 0.6083102544728951, 0.6524967604830828, 0.6257824048150729, 0.6541600786739993, 0.6432323458676807, 0.6266088210552496, 0.3289321910088603, 0.6048845889347709, 0.22738456656608408, 0.8125687417508061, 0.7914020097778058, 0.8390057029347855, 0.8608903394758541, 0.8567547322360237, 0.7836768410992868, 0.8105967950748354, 0.8677195232689991, 0.4861546222773332, 0.4412755853553515, 0.5015821713081505, 0.49057504940220564, 0.4734484339099452, 0.5131371163885912, 0.4092813058206197, 0.5214553683868942, 0.5008918054384282, 0.4445827242449232, 0.05492229649009972, 0.38669212406174547, 0.5070093101298365, 0.47045279480028235, 0.13292527379668062, 0.4452784688301331, 0.13417376725931407, 0.12545606466380355, 0.16887802177003663, 0.11006730500706186, 0.16313104119715427, 0.24728070778852562, 0.11339358011333223, 0.14736900856798607, 0.13296904219189876, 0.11768430014096543, 0.1495999824567924, 0.26939323119275305, 0.21940202767337447, 0.22949136891424948, 0.2948788832278071, 0.2576309659286471, 0.20200179433697296, 0.32191897878762443, 0.3082660588587256, 0.3137716455196856, 0.12869786400613326, 0.03164655793551896, 0.04060627644835624, 0.2909434842016304, 0.09627408606674148, 0.1545888386088583, 0.11368299392133574, 0.10683962341210396, 0.16574308839430196, 0.26508263349340133, 0.25423234217782487, 0.41067745716829973, 0.25845597840307377, 0.30225450668153786, 0.24895735553195664, 0.2683943983166919, 0.33603675700235336, 0.38285344717436975, 0.6456357383209838, 0.6873609321257105, 0.7242978183937963, 0.6719453649699074, 0.6531792199487627, 0.54270312692504, 0.7001406253812441, 0.6875149000366452, 0.6816553872861324, 0.14113243500133, 0.1378500886302383, 0.10469869636374785, 0.5990511354462899, 0.1560323818623015, 0.12043331701439852, 0.14595556657491093, 0.10931738890185538, 0.08712357562237916, 0.15985118747023153, 0.1730772204020422, 0.15205577410689042, 0.22674510990758023, 0.2553072569799417, 0.2523169133442321, 0.2006012817183409, 0.1689291453538071, 0.20622814790322108, 0.5721104707304411, 0.7060330100201904, 0.3702859109680541, 0.4719942440235346, 0.30488375061753237, 0.5800686190228517, 0.4795128657265879, 0.7485627757587671, 0.5726425455537179, 0.35651610912975906, 0.2367283693989185, 0.4516044353410995, 0.27495409749604516, 0.2065990690148456, 0.3500073362588576, 0.42294063734700227, 0.35796870511709344, 0.3289729458644757, 0.2060510656898279, 0.19228546860882878, 0.1859631903985286, 0.20101092601602433, 0.2614339363434163, 0.2127063071982055, 0.19616688386500314, 0.22128431596439513, 0.23835332569232492, 0.6345652621248954, 0.24006873312192878, 0.24479544751054705, 0.6228457192951675, 0.6883000571004683, 0.24762043493627406, 0.7564647869566417, 0.2238702158002347, 0.19310223948012173, 0.18796209562146537, 0.18694260123425144, 0.1540034800240606, 0.9074787199756579, 0.2015485098638936, 0.2014587999318922, 0.14687304935486156, 0.16997518568925207, 0.2122196960271644, 0.8384671097070031, 0.15607413559900085, 0.7561810843211623, 0.2102426063785957, 0.8057148176638464, 0.8326201044725821, 0.10525518840506864, 0.10434195698592208, 0.8384094532690622, 0.1763549658878304, 0.17242748324534785, 0.18379564198161713, 0.18096061226318738, 0.1844525362424948, 0.1991042249806998, 0.18836827890217656, 0.16978945612200846, 0.17780660583351326, 0.1384038722929034, 0.08855754525904158, 0.09491357888808649, 0.08152208191774368, 0.08457866366071098, 0.08472932787387855, 0.08788283458164081, 0.0667076903393301, 0.09482927342838177]}, "mutation_prompt": null}
{"id": "a411d674-3e80-4b6b-9d35-8dcd068d3381", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.9 - 0.5 * (evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / (np.max(fitness) + 1e-12)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by introducing adaptive inertia weight and diversity promotion for improved exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": 0.3253823487211788, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.7468024806116573, 0.7493351311771993, 0.7682736412407505, 0.7738806573312419, 0.7752892482429077, 0.7486404762489735, 0.734848787551067, 0.7759028354230895, 0.7787801243150754, 0.629811869009591, 0.6063030334218793, 0.5885907413016986, 0.6207016150429154, 0.6029045581786646, 0.6054432865509366, 0.6145169312150424, 0.5931836841467106, 0.5776674015990322, 0.1908720059787553, 0.129608018702843, 0.22352500457517044, 0.12079476986725513, 0.11156777587876276, 0.13055149485475814, 0.13838005372176554, 0.13764323570716297, 0.12192253709457113, 0.1144011808000629, 0.08765206878591547, 0.10127760333599467, 0.1119506208749601, 0.10872396411122898, 0.11691331715787312, 0.11383120073254305, 0.10765805852448262, 0.12129604308752862, 0.9867749743133067, 0.9865832288285227, 0.9907003564414031, 0.9834727210230647, 0.985545323622549, 0.975389078974583, 0.9841544850072527, 0.9848273046160749, 0.9857850928468594, 0.35164554495265454, 0.33637718031534736, 0.381502464699353, 0.3657117308575203, 0.35670664618204806, 0.3786564134398118, 0.3795292286096631, 0.4220573918810572, 0.08153475005719735, 0.6170274313805719, 0.32537759329209726, 0.5268649971868891, 0.6453290178716243, 0.6015729278607076, 0.5590933099311284, 0.5739610938580111, 0.6269890227490884, 0.623353770465062, 0.3272042666371122, 0.2731151251489139, 0.29692407354793204, 0.2982409262978055, 0.28138994924296945, 0.3038444981837207, 0.2717386357185999, 0.29628252494872487, 0.28605535907621427, 0.2941814217535148, 0.05100027718277633, 0.26907437776647447, 0.31861272031797483, 0.23431187857855407, 0.11914473078524401, 0.2906180608766463, 0.25404693191746996, 0.29456026067425345, 0.1579793419180272, 0.11919170496098053, 0.0899763666301997, 0.18935874346000325, 0.14172781431000514, 0.08777498885098645, 0.15675607908990974, 0.10307694117585231, 0.1076257826947522, 0.25925724563697417, 0.2499648729609849, 0.23397015419742495, 0.20334526315192547, 0.2095221081580736, 0.2067632880871404, 0.29321596789225723, 0.2765475018642747, 0.2524559572369687, 0.061277938422870326, 0.040535698013081656, 0.04082740995418899, 0.06032389609274813, 0.09061893533698562, 0.02713589169915176, 0.01904530028122009, 0.04341512682272519, 0.04621711648506044, 0.16330854708537512, 0.15820714126332203, 0.16383198186552528, 0.15316775451918052, 0.1568265156310681, 0.17457605053578884, 0.14962134332459243, 0.13914616543553548, 0.16990083283075696, 0.5744169875417859, 0.5584629848809464, 0.5388621183818767, 0.5475605758215212, 0.5440765144112947, 0.5429555430981892, 0.5483078209439172, 0.5236054707616487, 0.5454697233717742, 0.12298246521221645, 0.12390286252315841, 0.12805945356098436, 0.09044300673097039, 0.09442891470414738, 0.10445012709368506, 0.08815206774245088, 0.1214151667826684, 0.08784391429988514, 0.14703847673037818, 0.14243202347189376, 0.339912376834105, 0.3310282396963614, 0.16415992402226343, 0.14867294301655742, 0.308060086477953, 0.14399003857130044, 0.18576309540294522, 0.3693647835029161, 0.3791706784667602, 0.4284346494377351, 0.4461222380708344, 0.3897725493456222, 0.3298469289924346, 0.4607526296895821, 0.4945458050491428, 0.3880301214090568, 0.2952390616639826, 0.20779809777622482, 0.30273626049441005, 0.28378874820638444, 0.24680841114667573, 0.283257622695539, 0.32417598916656354, 0.2746402531420984, 0.35402871955773585, 0.18157279758021205, 0.18108671728618675, 0.19226493370219544, 0.2031682447562586, 0.1780505146654332, 0.18433563718942103, 0.19610219885501678, 0.188340063314545, 0.20989308245854532, 0.1907190590861183, 0.1910191219988353, 0.21127107772628495, 0.19103271093119023, 0.3002604755191447, 0.18366467314465218, 0.3215645504947626, 0.18617644058445137, 0.19596712523209803, 0.18645401573034814, 0.6932612914875045, 0.11287767346193578, 0.6603242362382834, 0.7303321934813064, 0.19793611569337055, 0.14357836346253738, 0.1690535784026953, 0.7226848746467025, 0.6719979622443194, 0.6119085199881447, 0.5996697047936541, 0.2063255670112739, 0.6635087581767602, 0.6933591939762755, 0.10496448010009951, 0.7235321043860103, 0.6660637303214832, 0.20484670493108625, 0.19129740893444858, 0.21549441118086365, 0.20365680935826724, 0.18421433222293715, 0.180774825553484, 0.17880545406105974, 0.18662552540685307, 0.20398849024300147, 0.08095495424977839, 0.08411329276512547, 0.07956308138335211, 0.0745414619976229, 0.07598243295018714, 0.07701539229399479, 0.0674534146065463, 0.07392728735762322, 0.06723546205543174]}, "mutation_prompt": null}
{"id": "ae6e55c8-82bf-40d2-9cc2-f43d3fb129b2", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n                \n                # Local search step added\n                if evals < self.budget:\n                    perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n                    new_solution = np.clip(pos[i] + perturbation, self.lower_bound, self.upper_bound)\n                    new_fitness = func(new_solution)\n                    evals += 1\n                    if new_fitness < fitness[i]:\n                        pos[i] = new_solution\n                        fitness[i] = new_fitness\n                        if new_fitness < pbest_val[i]:\n                            pbest_pos[i] = new_solution\n                            pbest_val[i] = new_fitness\n                            if new_fitness < gbest_val:\n                                gbest_val = new_fitness\n                                gbest_pos = new_solution\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Further enhanced PSODE by adding a local search phase using a simple hill climbing strategy to refine solutions.", "configspace": "", "generation": 30, "fitness": 0.35400933534436296, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.27.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.8645446449142699, 0.8491674772716048, 0.8490840983881832, 0.8731582439956879, 0.8398265256971262, 0.8671252591753575, 0.8579585081580189, 0.8567868825216152, 0.8433882320676385, 0.691667807407764, 0.7405426363432315, 0.7077662278796675, 0.722360268142476, 0.04710778689390194, 0.7396013375470962, 0.6721742367845547, 0.7106544072655298, 0.052076527334820266, 0.15354235851621612, 0.1802688511137427, 0.16966445329653201, 0.1559362301516436, 0.1472894684777053, 0.14103568008661715, 0.14286617128964174, 0.12133092653546806, 0.1739194547495263, 0.12333989547859059, 0.1559165701118591, 0.09214544672721481, 0.15271787346015064, 0.10376122629001983, 0.12874029410518628, 0.11167016386999307, 0.14172102751547122, 0.11116622057170678, 0.9723489750430808, 0.9816428345648055, 0.9815833886014838, 0.9836309235544494, 0.9589073829296395, 0.9663111288701325, 0.9731472953543198, 0.9733392857635619, 0.9706315476101459, 0.4133073929691594, 0.430484378412057, 0.430341147593046, 0.4859015041329884, 0.4335354993604337, 0.5032635963132266, 0.4854182610380695, 0.463722633292284, 0.49381065406300495, 0.8028460710990322, 0.8286180694311835, 0.7398418703709224, 0.7736002581548769, 0.7091830026545545, 0.21152283184451026, 0.6556328403962819, 0.7117051871383294, 0.6867861331763644, 0.3997606732001385, 0.3173779785072641, 0.3047821369201863, 0.32206216745826, 0.12954721172876837, 0.33666203626028934, 0.34008696795113347, 0.31624159607298385, 0.3294517973716503, 0.37544209615615787, 0.1304733710047059, 0.37166042214766126, 0.3913401290988364, 0.3554186901279992, 0.37305363443508577, 0.13096541908220694, 0.21999831416965587, 0.29778073146648554, 0.08534978593445153, 0.09299020549287595, 0.13231102887308677, 0.11814421915793116, 0.07368139511622573, 0.05575715058904207, 0.1156088294206129, 0.09727612527353613, 0.12105993769623569, 0.21007113132012378, 0.21863843956641982, 0.2267442207989997, 0.1886833906823009, 0.17569043541058016, 0.16753130602230226, 0.24598463488250266, 0.2629847923087254, 0.23260016983679488, 0.036717269106342765, 0.042523435159746104, 0.18153772207744245, 0.08821342584870506, 0.07355941590876469, 0.06689782543695177, 0.10687264895391457, 0.1004445552498886, 0.07050238291219191, 0.19354403746028404, 0.22958185501988893, 0.1875475322317206, 0.25616357402557044, 0.21057373619303021, 0.3068312098059449, 0.15876574573240865, 0.17164726399918595, 0.221901115274313, 0.5339867944912642, 0.5870599825152261, 0.6008549359425321, 0.5683350056520976, 0.5944917231967617, 0.6196186559318391, 0.6024027290238643, 0.6033984984127465, 0.5800572223656664, 0.1067120385642798, 0.11139933447249262, 0.14088663110266209, 0.14626949100590814, 0.127917338909456, 0.12440468418618944, 0.14813635995979346, 0.13245884807533925, 0.09834632710446767, 0.14021597287994414, 0.17187539300728605, 0.17548434943393, 0.5038749457617637, 0.23313474515295274, 0.1603908800999263, 0.4048792960839731, 0.23463557578326166, 0.25422363018156524, 0.27218384928830186, 0.3850642442265272, 0.39482611725692396, 0.45369225326852636, 0.43312226842036516, 0.4343585187186926, 0.5419040834928879, 0.5715614359327887, 0.5070149282757125, 0.284562495710875, 0.22950899991777218, 0.29370323717070945, 0.29784885788177595, 0.21232433399986417, 0.23441175592105223, 0.4404340147995155, 0.4384796398366433, 0.23672260043816662, 0.20903056213437354, 0.21805143510902325, 0.1981246609878946, 0.19902986805161083, 0.18900263206735757, 0.19789235347928502, 0.20603914147132596, 0.20046639413429135, 0.2062487965787274, 0.2440666335530648, 0.2032575445926531, 0.2476513556872615, 0.22351313312016707, 0.21953152220011674, 0.20532237721666502, 0.617123606773675, 0.6521889323449972, 0.6844489617590608, 0.8939209656417817, 0.17506216426719112, 0.15455084363696392, 0.913706642968742, 0.2010055308400167, 0.200316771695341, 0.1303664403403585, 0.16911982008088977, 0.21158215977443473, 0.8338605538648983, 0.1553573697379954, 0.20357590134911652, 0.7105642830883263, 0.6902583759309704, 0.8126354814583054, 0.2067734720800255, 0.7396149098444418, 0.8049945926424932, 0.18031033144020037, 0.20409674846941217, 0.18250936578633503, 0.17054638248962783, 0.20185506006695952, 0.2151537309738688, 0.180278070638755, 0.1824526949638534, 0.17849599430033014, 0.10168883637699166, 0.10014607407523124, 0.07623292865307996, 0.09183232190548352, 0.07843241803053991, 0.09409820594701446, 0.09616237095987035, 0.07744767384731732, 0.07872117529311384]}, "mutation_prompt": null}
{"id": "2ce436cf-d572-4228-9b1e-82648b1c1a85", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Dynamic inertia weight adaptation\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved velocity damping by dynamically adjusting the inertia weight based on fitness diversity for enhanced convergence.", "configspace": "", "generation": 31, "fitness": 0.39774574307717736, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.9083921202972852, 0.9011209009492638, 0.9044960539351309, 0.892913803638225, 0.890488833714419, 0.9033203437063102, 0.9026761252243944, 0.8941952095937931, 0.9057879993032152, 0.7743317922507876, 0.79563882921022, 0.5852025676282926, 0.8139554564755875, 0.7999875259136886, 0.8030070458090436, 0.8078535599086566, 0.054413930545018196, 0.7704130606369575, 0.13656181162241376, 0.69336481706447, 0.6716667516613705, 0.11179209281734714, 0.14002985282743252, 0.15776242355811976, 0.1777804377708, 0.11767645197884957, 0.1442261818533006, 0.1095213146277716, 0.14072582021544877, 0.13326940913787444, 0.11018749453287224, 0.0928817056201886, 0.1280651087631992, 0.12448423739928671, 0.15529481517971966, 0.13084895095942362, 0.9906205571898162, 0.9859570120492911, 0.9868402774752513, 0.9807039530070538, 0.9756364241050943, 0.9709754659155376, 0.9790323300374494, 0.982894142419722, 0.9841727365883958, 0.6137489391640982, 0.6083102544728951, 0.6524967604830828, 0.6257824048150729, 0.6541600786739993, 0.6432323458676807, 0.6266088210552496, 0.3289321910088603, 0.6048845889347709, 0.22738456656608408, 0.8125687417508061, 0.7914020097778058, 0.8390057029347855, 0.8608903394758541, 0.8567547322360237, 0.7836768410992868, 0.8105967950748354, 0.8677195232689991, 0.4861546222773332, 0.4412755853553515, 0.5015821713081505, 0.49057504940220564, 0.4734484339099452, 0.5131371163885912, 0.4092813058206197, 0.5214553683868942, 0.5008918054384282, 0.4445827242449232, 0.05492229649009972, 0.38669212406174547, 0.5070093101298365, 0.47045279480028235, 0.13292527379668062, 0.4452784688301331, 0.13417376725931407, 0.12545606466380355, 0.16887802177003663, 0.11006730500706186, 0.16313104119715427, 0.24728070778852562, 0.11339358011333223, 0.14736900856798607, 0.13296904219189876, 0.11768430014096543, 0.1495999824567924, 0.26939323119275305, 0.21940202767337447, 0.22949136891424948, 0.2948788832278071, 0.2576309659286471, 0.20200179433697296, 0.32191897878762443, 0.3082660588587256, 0.3137716455196856, 0.12869786400613326, 0.03164655793551896, 0.04060627644835624, 0.2909434842016304, 0.09627408606674148, 0.1545888386088583, 0.11368299392133574, 0.10683962341210396, 0.16574308839430196, 0.26508263349340133, 0.25423234217782487, 0.41067745716829973, 0.25845597840307377, 0.30225450668153786, 0.24895735553195664, 0.2683943983166919, 0.33603675700235336, 0.38285344717436975, 0.6456357383209838, 0.6873609321257105, 0.7242978183937963, 0.6719453649699074, 0.6531792199487627, 0.54270312692504, 0.7001406253812441, 0.6875149000366452, 0.6816553872861324, 0.14113243500133, 0.1378500886302383, 0.10469869636374785, 0.5990511354462899, 0.1560323818623015, 0.12043331701439852, 0.14595556657491093, 0.10931738890185538, 0.08712357562237916, 0.15985118747023153, 0.1730772204020422, 0.15205577410689042, 0.22674510990758023, 0.2553072569799417, 0.2523169133442321, 0.2006012817183409, 0.1689291453538071, 0.20622814790322108, 0.5721104707304411, 0.7060330100201904, 0.3702859109680541, 0.4719942440235346, 0.30488375061753237, 0.5800686190228517, 0.4795128657265879, 0.7485627757587671, 0.5726425455537179, 0.35651610912975906, 0.2367283693989185, 0.4516044353410995, 0.27495409749604516, 0.2065990690148456, 0.3500073362588576, 0.42294063734700227, 0.35796870511709344, 0.3289729458644757, 0.2060510656898279, 0.19228546860882878, 0.1859631903985286, 0.20101092601602433, 0.2614339363434163, 0.2127063071982055, 0.19616688386500314, 0.22128431596439513, 0.23835332569232492, 0.6345652621248954, 0.24006873312192878, 0.24479544751054705, 0.6228457192951675, 0.6883000571004683, 0.24762043493627406, 0.7564647869566417, 0.2238702158002347, 0.19310223948012173, 0.18796209562146537, 0.18694260123425144, 0.1540034800240606, 0.9074787199756579, 0.2015485098638936, 0.2014587999318922, 0.14687304935486156, 0.16997518568925207, 0.2122196960271644, 0.8384671097070031, 0.15607413559900085, 0.7561810843211623, 0.2102426063785957, 0.8057148176638464, 0.8326201044725821, 0.10525518840506864, 0.10434195698592208, 0.8384094532690622, 0.1763549658878304, 0.17242748324534785, 0.18379564198161713, 0.18096061226318738, 0.1844525362424948, 0.1991042249806998, 0.18836827890217656, 0.16978945612200846, 0.17780660583351326, 0.1384038722929034, 0.08855754525904158, 0.09491357888808649, 0.08152208191774368, 0.08457866366071098, 0.08472932787387855, 0.08788283458164081, 0.0667076903393301, 0.09482927342838177]}, "mutation_prompt": null}
{"id": "8f937443-effa-4792-a9e9-765f2392715b", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            convergence_rate = np.std(pos) / np.mean(np.abs(pos))  # Measure convergence rate\n            vel *= 0.9 + 0.1 * np.std(fitness) / (np.max(fitness) + convergence_rate)  # Adaptive damping based on fitness diversity and convergence rate\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by incorporating adaptive velocity update based on both fitness diversity and convergence rate, aiming for improved exploration-exploitation balance.", "configspace": "", "generation": 32, "fitness": 0.38779245328288964, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.9058297518908616, 0.8991288063645645, 0.9016668494181522, 0.8936979803188028, 0.8991950308791115, 0.9030111213890265, 0.9033001350767509, 0.9001368292456483, 0.9040113824215249, 0.7643511191086254, 0.7972076818868634, 0.6660182147996252, 0.8088779596859904, 0.8050733970773014, 0.8046027326306016, 0.7980420000030131, 0.6702194968676578, 0.7877336543670445, 0.1473635602643244, 0.11366987983614485, 0.18192615506397247, 0.11179338536990602, 0.1513972430912891, 0.15776017646882878, 0.1768135919571454, 0.1297083386037886, 0.46776388575331096, 0.13245932781114056, 0.11672333431193604, 0.10604225044737436, 0.11018769505292181, 0.09288023031449988, 0.12805644243684167, 0.12448150086151, 0.15529607808468537, 0.13084978685806237, 0.9906205558651916, 0.9859569322566429, 0.9868398728380064, 0.9807039525373832, 0.9756364239316776, 0.9709754617282769, 0.9790320643875338, 0.9828944052803824, 0.9841722423923704, 0.6480826406725189, 0.5816141055303137, 0.6267956701755766, 0.6195001416330239, 0.6584341344240681, 0.6540872827584221, 0.6122177962732882, 0.24871369310478098, 0.636480718282084, 0.22738456656608408, 0.7620781201426817, 0.3811838955088138, 0.3676923642876574, 0.8580609699651445, 0.8537367412027805, 0.774503503160408, 0.808427783503596, 0.8408279084735253, 0.45981946152035114, 0.47497710335388055, 0.4300293493932026, 0.4881912970349924, 0.4571345885081344, 0.46965904222249977, 0.44445891623543954, 0.5057494309156203, 0.45095878973263537, 0.4246337782609404, 0.0549223005744196, 0.4020744558466991, 0.4848399740004984, 0.4515810797543014, 0.13293635667078252, 0.4949609106334294, 0.13240096769609822, 0.12544984514716595, 0.16826102891801742, 0.11000839090974546, 0.16117039033525615, 0.2434069537882435, 0.11415164318960391, 0.14287979221065017, 0.13538408870148466, 0.1111285736551787, 0.15060752619640028, 0.26940757293538353, 0.2204279280644661, 0.2316464809531179, 0.29043265856701805, 0.2587007744306685, 0.20312989213671018, 0.309145424872588, 0.31567690728504216, 0.2909274423798973, 0.12796449471117122, 0.03164685603344408, 0.04060470808073802, 0.2769746528625834, 0.09627430891817113, 0.15740082646389797, 0.11594460054500633, 0.10683925995559218, 0.16561781676487441, 0.2686511879299144, 0.24619853579197615, 0.3981239399287728, 0.2573599208569747, 0.16737383890582036, 0.23863900679198613, 0.18338644427337703, 0.32429740497081916, 0.24129514872512914, 0.7062075704759576, 0.7093710004529312, 0.6540537347734209, 0.713419805042073, 0.6806652010965035, 0.5524535456679406, 0.6801222431246439, 0.7061853417546058, 0.6948449799321099, 0.14113234594337465, 0.137854657110561, 0.10469827962402489, 0.5935841340953573, 0.1557429840282366, 0.14226356566401188, 0.14493911870084408, 0.11886264311711436, 0.09863658504548567, 0.19230562019620434, 0.17528068572505873, 0.1437419459967315, 0.22725685725877687, 0.18455356683745672, 0.22731922938676485, 0.20104701418444582, 0.17451016322983104, 0.20702087099614797, 0.29786058448555863, 0.5386242030705097, 0.5491936118258152, 0.5502337787614708, 0.4765000894513981, 0.6668425591623091, 0.7288707638361707, 0.5638796177448353, 0.5090280953583504, 0.19984263379686873, 0.18639318540045668, 0.34016637514756043, 0.249960554439425, 0.27375971898115836, 0.3086237770363931, 0.39260382070459454, 0.34723794073360814, 0.5228353804207548, 0.19559103505311803, 0.19076712719669464, 0.19396943916436682, 0.18887717595743903, 0.22104986595538012, 0.1840793934598548, 0.22847172650242298, 0.19418800318554696, 0.19969958086471862, 0.23534387826373238, 0.20840555139555073, 0.24473566278747394, 0.6236120371713382, 0.689854706366152, 0.24762061027492077, 0.7544402214061281, 0.22386992964154007, 0.19310218397937662, 0.18796364217813577, 0.18694286207333388, 0.15400307361874987, 0.9184211278955027, 0.2015820393311354, 0.2014552101778786, 0.14687344835833815, 0.1699731874719419, 0.2122202278771501, 0.8387596629135737, 0.15607415098247424, 0.7560552381215666, 0.210242644454816, 0.8085997699730137, 0.832615145832528, 0.10528609706870029, 0.104354499650127, 0.8303679971244314, 0.19817297316399796, 0.18871523273535495, 0.18107847653486464, 0.1745564100283309, 0.24644424403623988, 0.1913299676932655, 0.18896902327487552, 0.18434381692700508, 0.18772630989868389, 0.1230555150571192, 0.08998506103786219, 0.08548836935814486, 0.08723801494865524, 0.09253155620825759, 0.0845028130749168, 0.0836758382084859, 0.08653589968404463, 0.0790268312451573]}, "mutation_prompt": null}
{"id": "639f724e-613b-415f-b6c4-7c26a2ca7ecd", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n        stagnation_counter = 0\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n                stagnation_counter = 0  # Reset stagnation\n            else:\n                stagnation_counter += 1\n\n            if stagnation_counter > 5:  # Check stagnation\n                self.w = 0.9  # Increase inertia weight for exploration\n            else:\n                self.w = 0.5  # Reset inertia weight\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "PSODE refinement through adaptive inertia weight based on stagnation detection to enhance exploration-exploitation balance.", "configspace": "", "generation": 33, "fitness": 0.3713956952270388, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.28.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.9083921202972852, 0.9011209009492638, 0.9044960539351309, 0.892913803638225, 0.890488833714419, 0.9033203437063102, 0.9026761252243944, 0.8941952095937931, 0.9057879993032152, 0.7743317922507876, 0.79563882921022, 0.5852025676282926, 0.8139554564755875, 0.639965703326585, 0.8030070458090436, 0.7220084230111203, 0.054413930545018196, 0.7704130606369575, 0.1034645066596126, 0.1443188885233756, 0.5048190448993839, 0.11179209281734714, 0.1397788989393255, 0.17967715548117025, 0.15688867080979685, 0.09478671653850579, 0.09380696634053931, 0.1095213146277716, 0.13777584443678803, 0.10915932127763683, 0.11018749453287224, 0.14819570208976496, 0.12768363821961393, 0.11467111370483796, 0.1399479739560633, 0.13084895095942362, 0.9906205571898162, 0.9859570120492911, 0.9868402774752513, 0.9807039530070538, 0.9756364241050943, 0.9709754659155376, 0.9790323300374494, 0.982894142419722, 0.9841727365883958, 0.5466766516309756, 0.5781379804672662, 0.6524967604830828, 0.617096300169627, 0.6419436283846336, 0.6603479091253924, 0.6313916038209242, 0.3067329091436365, 0.5275107382708941, 0.23984258310565376, 0.6169874779636361, 0.8189008102150963, 0.7478035010896222, 0.8608903394758541, 0.8600574394044785, 0.7836768410992868, 0.7794164749675422, 0.8677195232689991, 0.4394674616816202, 0.37748348713433943, 0.44695712042867664, 0.4205459181206683, 0.38499691541888603, 0.4026568871404794, 0.35211723644785053, 0.5033152822279818, 0.41655708757255094, 0.43156535443295674, 0.05492229649009972, 0.4127104464576612, 0.42555091382642307, 0.3744548960485373, 0.13292513958916352, 0.44885033475872527, 0.1338094238391544, 0.24133650648046379, 0.0897449630546242, 0.1352921635811557, 0.1844557127430495, 0.22276930715989196, 0.10984841218676467, 0.1420275348749237, 0.12907868355977703, 0.15581371775042485, 0.13608751362069382, 0.29678660823304337, 0.229609231941872, 0.25709076346441995, 0.25283260061694934, 0.264061874899167, 0.1746240577267767, 0.28712303077665013, 0.2678810559963386, 0.32425993245162976, 0.13646158162464672, 0.03164655793551896, 0.05825497363054233, 0.2636104479521636, 0.09627408606674148, 0.1540181122607357, 0.11131129895506198, 0.12022132078416947, 0.04989822864507243, 0.2544154958761847, 0.16600715025625012, 0.41067745716829973, 0.24389302686879477, 0.269973742323681, 0.2094622068219011, 0.24468727740894936, 0.33603675700235336, 0.38285344717436975, 0.6477984927263711, 0.6822394518036159, 0.7326519938613957, 0.6733660537015022, 0.6408019032494103, 0.5455982108634132, 0.6605582304623494, 0.6948941456966583, 0.6716615691424952, 0.14113243500133, 0.09533138232561744, 0.1816610731427496, 0.13432288468996845, 0.1560323818623015, 0.1058232572989346, 0.0937931669809563, 0.09880232844098269, 0.08526317549046014, 0.14478041708371348, 0.500875091543728, 0.15955376255027676, 0.24175758695641758, 0.18663626047065596, 0.1892928376834906, 0.20060662984683464, 0.1564635757649243, 0.15773356970088903, 0.5721103228023965, 0.675997871756552, 0.3702876484588371, 0.4718918415190876, 0.3050694495282188, 0.5800686190228517, 0.3768496304216099, 0.38114757297147117, 0.5727724693219125, 0.2752996596246341, 0.24141665337344476, 0.4557083116331627, 0.2747404816993353, 0.22506780954987782, 0.2553437967038126, 0.3356341526687556, 0.3578864631572104, 0.3286328962734678, 0.18662239698553829, 0.18772914985509703, 0.17520394317465127, 0.1786292350967944, 0.1930457740079089, 0.17166925984219872, 0.1743374537038579, 0.1817843771889679, 0.18705985088563037, 0.1748044333625991, 0.24006873312192878, 0.2428477803883573, 0.19676851859777977, 0.18862236069753036, 0.7586249808527613, 0.22889972790724922, 0.26207823402096475, 0.19310223948012173, 0.18796209562146537, 0.18694260123425144, 0.1540034800240606, 0.9074787199756579, 0.2015485098638936, 0.2014587999318922, 0.14687304935486156, 0.16997518568925207, 0.2122196960271644, 0.8116521001130769, 0.15607413559900085, 0.6117523422848574, 0.2102426063785957, 0.8103448371736042, 0.8370394674948107, 0.10525518840506864, 0.10434195698592208, 0.6858309872996873, 0.18338198288821628, 0.1809453155445031, 0.19982752610648413, 0.19544699089430462, 0.18563367418156562, 0.1991042249806998, 0.19339528409825024, 0.1823175570394162, 0.18867074413884, 0.13715096952869477, 0.07996307484952958, 0.0758653359733038, 0.07861154446357654, 0.07650978592338742, 0.08670928639958819, 0.07216288365840262, 0.07549154919178835, 0.07860280529117625]}, "mutation_prompt": null}
{"id": "f4886256-aabc-4d8d-9026-77dea70b6054", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                self.F = 0.5 + 0.3 * np.std(fitness) / np.mean(fitness)  # Adjust F based on population diversity\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved exploration-exploitation balance by dynamically adjusting DE parameters to enhance convergence in diverse landscapes.", "configspace": "", "generation": 34, "fitness": 0.37965905918195153, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.31.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.9110678093319942, 0.9136421626468978, 0.9086418304447618, 0.921055901349862, 0.9144366259382074, 0.9153720798518838, 0.9204571698749824, 0.9029304997948984, 0.9112109164032408, 0.813223595083082, 0.8217351409440978, 0.759049621230854, 0.8134031824742238, 0.04819476822061808, 0.8063419700153928, 0.8111588878864563, 0.05939252490538893, 0.8059524573208217, 0.12225280752245093, 0.14011383061668348, 0.1591121100545475, 0.18451273068201002, 0.1574074010737031, 0.1520107176340807, 0.14328271417627692, 0.13799275698243163, 0.17531440396556008, 0.10317104902075247, 0.09582562750936974, 0.13220282029690555, 0.11009270194238285, 0.11362209494991038, 0.0892836956914842, 0.1398379261282533, 0.08507341276527947, 0.11353167944096898, 0.9903410320468317, 0.9859708281422211, 0.9861393339041806, 0.9809572803744913, 0.9699382025393164, 0.9659080403805185, 0.9762910604928023, 0.9760546267928147, 0.9820624809744617, 0.6622141725408961, 0.6014681572598448, 0.6270187954908399, 0.6228601781392985, 0.6351931711792917, 0.6685576554058863, 0.1264743563715116, 0.09751548983900449, 0.6226440685328223, 0.2290195562123497, 0.8162547915328283, 0.9138082768343546, 0.8850182365815495, 0.8413627291712134, 0.8631445237594002, 0.7297596188885024, 0.8591851072245185, 0.8155851788269958, 0.5963027893582022, 0.13016659567771582, 0.583567938431742, 0.560329003897226, 0.13501224878227258, 0.5315334588068351, 0.1317660070368586, 0.6193197421135184, 0.497438111396612, 0.45132273965730463, 0.05402202506802756, 0.5845189800094289, 0.20803564798145247, 0.1442063312119939, 0.13298725846203274, 0.19938475151732826, 0.136798563483589, 0.42199166588134407, 0.04427519158940918, 0.06371971945907384, 0.07365740508866836, 0.07232762823349326, 0.04961423642795815, 0.049536133836662, 0.08200593900807251, 0.03918037590208645, 0.054514530595400124, 0.11188922700840098, 0.1574605403160877, 0.18055314345908924, 0.1968631102987275, 0.1413743204429425, 0.1250899389821285, 0.1862658131852606, 0.17840429458225937, 0.16693516268089592, 0.07526267053073787, 0.03641612781320003, 0.28902175154532106, 0.078572905001143, 0.3431737223803405, 0.20673880691601632, 0.09938561601062301, 0.0996765560276015, 0.08569222197646464, 0.4212769928434692, 0.2925754904034854, 0.2803906519118914, 0.22368003335911113, 0.21213229862039962, 0.2956124412610136, 0.20385929243028877, 0.2821319255750152, 0.08408505509609276, 0.8060822129084165, 0.8040966162940582, 0.7696541719977297, 0.6700068977669149, 0.7772296091257069, 0.7743826113729919, 0.8128433914745369, 0.794991058827149, 0.7998064499109705, 0.13493568130130684, 0.12826140145627685, 0.07070355184989274, 0.12797175980477327, 0.1273129057229213, 0.15398351965312396, 0.12163989355799876, 0.12414231131446163, 0.10277954860697869, 0.27045831476202653, 0.3028546549020936, 0.15452157072508999, 0.23521051849818486, 0.354325699407555, 0.203274633759559, 0.20165345909976706, 0.17939270561315257, 0.23190867763804623, 0.5755966398460746, 0.6465892185831644, 0.3377299394239264, 0.4917493164694514, 0.5293801947961225, 0.5895063151904307, 0.5891538433719764, 0.6073507926325735, 0.5622955835256469, 0.25009068832774894, 0.25369924540335587, 0.2688833645744453, 0.4435527224003828, 0.21136178274819795, 0.4487766567282262, 0.2591467647362723, 0.29968970997133626, 0.5105867135510036, 0.21555227694083656, 0.20951267810266894, 0.24517920210674682, 0.20064949643903096, 0.20382717142003226, 0.18566993272283616, 0.21857879537881042, 0.2011400189852942, 0.20106321419930462, 0.22614172823512846, 0.7851087124604711, 0.24857392697075842, 0.2393230283145109, 0.19549638493349153, 0.20905638904400625, 0.22741950128098343, 0.24480803149726682, 0.19689271962142485, 0.8975114904808137, 0.18698597601793432, 0.1536519623731155, 0.9241525560536443, 0.20142649791978906, 0.2010203917286565, 0.13126270416194097, 0.1704046185586401, 0.1871917804904265, 0.8956329964487169, 0.15635871574911342, 0.8287714629596552, 0.7363821403915206, 0.8046115739461106, 0.8674199993392642, 0.21164321772129702, 0.1043392850970486, 0.8517664510328709, 0.18395845996497306, 0.18135364084181016, 0.18000824068085275, 0.17504859627357472, 0.18666518224946738, 0.17580335659824198, 0.17625605884505746, 0.1934706348604367, 0.19949242571037995, 0.13089693854126416, 0.0865380648252827, 0.07810878608929162, 0.08826076741712863, 0.09532431600485958, 0.08630024780541334, 0.10065541330873384, 0.08003066539319947, 0.08938493595361485]}, "mutation_prompt": null}
{"id": "f0dc0fb0-df2f-454e-bae9-b5c39a5b4b66", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n            # Dynamic inertia weight based on evaluation ratio\n            self.w = 0.9 - ((0.9 - 0.4) * (evals / self.budget))\n\n            # Random restart for escaping stagnation\n            if evals % (self.pop_size * 10) == 0:\n                pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE by introducing dynamic inertia weight and random restart to escape stagnation.", "configspace": "", "generation": 35, "fitness": 0.3152715361425627, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.7932633355854326, 0.7436822214324585, 0.7598413824622976, 0.7823080621610399, 0.7757588561119768, 0.7713369225865151, 0.7960659590216395, 0.7922836163893052, 0.7677460395679835, 0.616827377747929, 0.603346871485537, 0.5914301252324727, 0.6028240345458376, 0.6261038791895002, 0.5492049039121152, 0.5900591296669023, 0.5833588458877885, 0.5854318925682458, 0.10751353218685178, 0.10321867035901777, 0.12612073519613354, 0.12638115171879305, 0.12442601074886861, 0.11492986686732931, 0.11115886930947272, 0.10921759523982477, 0.10517325062806449, 0.09004322476119886, 0.11910334426133162, 0.10128599247602887, 0.12765047023548337, 0.10269046750027866, 0.11350663659709248, 0.11831981804208169, 0.11654963989086464, 0.11692428510916486, 0.9904122510516555, 0.9865445501727262, 0.9911016452934291, 0.9825441393948288, 0.981294506981335, 0.9752023360709096, 0.9837690971607574, 0.9848688081670774, 0.9861439473283641, 0.35299745139574057, 0.33890583652421424, 0.3794035008853064, 0.4286650015121284, 0.38270521019222214, 0.14816123740617027, 0.08742441403615775, 0.3822342220415711, 0.38006345189160906, 0.6339079115304236, 0.63339646354613, 0.5925139159055444, 0.7130143091783987, 0.6019184335351242, 0.5919648602795219, 0.5992340353869463, 0.681546087668714, 0.5614497925579718, 0.2749443314163621, 0.29558817529669756, 0.3206158707792446, 0.2759943468445266, 0.3035457962481717, 0.2970430832368127, 0.31794703663086643, 0.2707403301590261, 0.28356321201638557, 0.24892913649310344, 0.016844480659194194, 0.12412174359586403, 0.3195242897329196, 0.30581088667047773, 0.3291065273439411, 0.30369479782918163, 0.24208438810051935, 0.2713006244428049, 0.11260466841881056, 0.13018727495649585, 0.10904394551025087, 0.1992617516340358, 0.11949232881525951, 0.1264855029409313, 0.10418107598165194, 0.11377183615124054, 0.1250698788821244, 0.22169647375166435, 0.22955732379697624, 0.21357581578435147, 0.2523509469638814, 0.26343965781402634, 0.22296285602642807, 0.2973308370238842, 0.25651262157458, 0.24909801258754194, 0.021607030348413714, 0.02653289141247006, 0.028921094950930315, 0.03293365086206945, 0.027168979842316365, 0.07711460397006231, 0.02227616999680071, 0.04604632172391465, 0.06379874025688881, 0.14822231622357085, 0.17596797069047276, 0.16725677051408128, 0.18394277656616675, 0.15291684907711423, 0.16827367260338466, 0.17865948372051155, 0.16227830830826373, 0.16945813097398899, 0.5583178287198853, 0.5406905502684075, 0.5171917320828046, 0.525189047261579, 0.5458196322844728, 0.5537729710624466, 0.5506817343706363, 0.519182098787959, 0.5428789309927824, 0.09533888577749461, 0.11215308619626252, 0.11202869123837778, 0.11572610362587699, 0.11368196055975588, 0.089730036300537, 0.10881534709460117, 0.10991875400432605, 0.0976553953453837, 0.16281430926048002, 0.19323473834938276, 0.19402246540653134, 0.1901908501027818, 0.16884322769867488, 0.4155181896852036, 0.17397714261800445, 0.16582307417404407, 0.2211427423050003, 0.40682159965996245, 0.25142974071180013, 0.5130980518837401, 0.44399230759588915, 0.3945302930315242, 0.4332653916057675, 0.44527662034819726, 0.4336415793863948, 0.4390778884664984, 0.2892662348799654, 0.2560469918509901, 0.28645650698016545, 0.27769867885308763, 0.25425881604983247, 0.25110386264947504, 0.23312769136459188, 0.26979737115065405, 0.36267489068294545, 0.19460049062838747, 0.17393412900516292, 0.2057189123805967, 0.18041154345421584, 0.2057430920739669, 0.1875588624387854, 0.18027901468671748, 0.19005285061505217, 0.18486847925934013, 0.1952298857578687, 0.1883152661336167, 0.33907212152028976, 0.2971855235250964, 0.18030619076067267, 0.19235313578380864, 0.1995491988422562, 0.22522257335947293, 0.1796097094332163, 0.1816046493934751, 0.6910098820113254, 0.15365586373341578, 0.7901758769911629, 0.19936130234028937, 0.19844309166130025, 0.128953348086581, 0.1945559336049012, 0.20868797435264452, 0.5858834924999317, 0.1560747458461088, 0.19729520213474672, 0.20298591954744405, 0.6478526650739849, 0.6455351060557151, 0.20783311529167947, 0.20785818164894743, 0.7164973264016326, 0.18075159253719653, 0.21404142283032712, 0.19260069809395441, 0.19948797352231662, 0.1947571636643518, 0.17277951364151267, 0.18663269332387034, 0.23494729140853743, 0.17511158034931873, 0.07486845983239532, 0.07886481332391182, 0.07648160881172572, 0.07265148193518012, 0.08005853058192502, 0.0678688575920533, 0.08079442923818625, 0.07376031869547661, 0.07414261642282383]}, "mutation_prompt": null}
{"id": "c72a2d9c-34b1-428a-8de9-4ce84036c555", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 = 1.5 - 1.0 * (evals / self.budget)  # Adaptive c1 decreasing linearly\n            self.w = 0.9 - 0.4 * (evals / self.budget)  # Adaptive inertia weight\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE with adaptive cognitive coefficient and velocity inertia for improved exploration-exploitation balance.", "configspace": "", "generation": 36, "fitness": 0.2975056457774201, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.7175852768106132, 0.7114064671771783, 0.7110506064178518, 0.7768921907098928, 0.7165561426481843, 0.7387015330126436, 0.7336381858153525, 0.7472305179027403, 0.7519707524125686, 0.5688155538192332, 0.5505712113245396, 0.5599322767444472, 0.5167617698483957, 0.5585752255800933, 0.5299927488675291, 0.5751593172623054, 0.5730053298676807, 0.5742297239928673, 0.11960838970658005, 0.17147338494791708, 0.12224273120363383, 0.12142235087770792, 0.09930229492512321, 0.20406502409563176, 0.1070552009144532, 0.14149918618487922, 0.1042060842754381, 0.08845452131021592, 0.0953655432896856, 0.07645575911540714, 0.09372292041342511, 0.0923359074112925, 0.10872341290627574, 0.09084257121175598, 0.08276671721974982, 0.07955525952817422, 0.9867754430801485, 0.9865839985982978, 0.9907009470532301, 0.9834731377108041, 0.9855450480235246, 0.9753894138884077, 0.9841624331496607, 0.9848279595541363, 0.9857853385317281, 0.3008422068278157, 0.23963703952972493, 0.29845981321554993, 0.3368844319439078, 0.1405898436539259, 0.319603182763338, 0.31451841862519647, 0.34150151862249056, 0.08056758927725494, 0.5588973572301523, 0.5123337678823694, 0.5887529372596527, 0.5390182561380894, 0.5735314486916625, 0.560836912378505, 0.5646034784235676, 0.5628464226367178, 0.5507421194979325, 0.2404263503900027, 0.22378285816383336, 0.25850770065617157, 0.2730974262395074, 0.23857149874698302, 0.2610122316826925, 0.2129022335644617, 0.28158679849998913, 0.2846740512776289, 0.18599516547729023, 0.11274430547103342, 0.2020475141498317, 0.2803037517793455, 0.23472631685162137, 0.3143774056652614, 0.2673383322589249, 0.22764040711441347, 0.1895018725733657, 0.08002754616226959, 0.09582321662458926, 0.1015188316379757, 0.16353279837563828, 0.15271734620571698, 0.13260224496146822, 0.09363224099866752, 0.1221801351526628, 0.09227795457262078, 0.30307194439321594, 0.2016109595545268, 0.23970350425271847, 0.25111554021984683, 0.19135629819788658, 0.23522469620975484, 0.2880993213737254, 0.2896775104474171, 0.26094541893235423, 0.021254212231266556, 0.03349151616973556, 0.00021528351723176797, 0.040418244487906985, 0.0882807750116601, 0.02157028200264499, 0.02753945249432077, 0.019291451020028605, 0.019576855956715766, 0.1365515341099066, 0.14029628128469973, 0.14097302609476448, 0.15946293935606815, 0.14746083392961173, 0.17353938804154678, 0.1638442417324324, 0.16011832002900916, 0.15273844378344714, 0.5380797978854743, 0.4947360468288463, 0.49909072995130277, 0.5166204264495305, 0.5128631361189447, 0.5003353725883746, 0.5072521866177802, 0.515433521478097, 0.5279314469948629, 0.0940499955663383, 0.1505012893076455, 0.10014960656507088, 0.08803502175238609, 0.10655671440536407, 0.09241532484624781, 0.09147821150384772, 0.08821930832800895, 0.0911013584940592, 0.1747257761830826, 0.16809245149573326, 0.1469659240252913, 0.26426869319776314, 0.2525719977106191, 0.15636158058277816, 0.2121777455463304, 0.13561939179193816, 0.17271586901620217, 0.38940104522749364, 0.3585205352254459, 0.34288518121257594, 0.31790311564193197, 0.3734083978083711, 0.3380583920081125, 0.3910587678413756, 0.421392913597358, 0.38963368730638237, 0.22009230004391334, 0.20709326309583287, 0.2791244557397241, 0.22550996846445348, 0.24636128928444245, 0.2634515956691609, 0.2582933347126153, 0.2773850089047314, 0.3040403975222836, 0.19351274935797969, 0.1999213320734743, 0.2031581245106161, 0.2291475635013197, 0.17084522099788302, 0.18547861195687887, 0.1713271666977806, 0.1975755602054564, 0.19451836247508514, 0.1856649737231576, 0.18165932280924557, 0.19758041321599185, 0.182490371189878, 0.1982006148599066, 0.18897288498853504, 0.2362157636397908, 0.18287302184728815, 0.18739572233558177, 0.6335274441242975, 0.17308962854685783, 0.11287808958027268, 0.5747907705520376, 0.19806351213743123, 0.19760334398307267, 0.14138721218954475, 0.1690309765677913, 0.20718657744749724, 0.6606907318076173, 0.1536484862485964, 0.2047352635839511, 0.2068728547807257, 0.6429335919493051, 0.6354994182572321, 0.207522111210674, 0.6476381025945361, 0.6687204182273133, 0.19391490847612625, 0.20914251723188249, 0.19491061829753087, 0.19837440199233025, 0.20270208548535462, 0.19098664981704083, 0.20488579302110177, 0.19746962803778445, 0.19663255005559954, 0.06244704048574201, 0.08209826045378288, 0.06698795112272982, 0.06881774731015378, 0.07259280420984937, 0.07327634091314716, 0.07750184699284424, 0.07567277776091164, 0.0789273135184474]}, "mutation_prompt": null}
{"id": "f242a54a-ec4b-4ebb-b537-548791506112", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR * (1 - np.std(fitness) / np.mean(fitness))  # Adaptive crossover rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Improved PSODE by introducing adaptive crossover based on population diversity to enhance exploration-exploitation balance.", "configspace": "", "generation": 37, "fitness": 0.3594809114905106, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.9007255855063425, 0.9006160915297583, 0.8913546885882933, 0.900253886654977, 0.9115078200980475, 0.898823491134745, 0.9075191567119318, 0.9002234980638567, 0.9102232990367833, 0.7877315447202891, 0.7922966594905144, 0.8059197231334707, 0.7880515632812891, 0.7569758416815148, 0.7648605221370453, 0.7405540058198975, 0.7919614667193372, 0.8061702824804178, 0.17970794422135972, 0.10868500473908094, 0.15647029572219984, 0.14370157922314608, 0.13802859900374465, 0.1591413133840024, 0.16058224527897125, 0.17599567245985948, 0.16966452500133422, 0.11259220652110491, 0.12193765427161363, 0.13277210023784158, 0.09433969784931195, 0.11740357034557614, 0.11504711883693985, 0.12936639080314472, 0.13095875476149943, 0.14707370118790952, 0.9771350495182036, 0.9865588673316107, 0.9844012456068898, 0.9794345195138603, 0.9753312831255495, 0.9667555466146146, 0.981109959018412, 0.9806260285965211, 0.9855682249169295, 0.789476595806999, 0.687950788181444, 0.7261366305824666, 0.15252056847783968, 0.7451536208190958, 0.6748428612831279, 0.6918567499307751, 0.6492969126612511, 0.7121312410544558, 0.8526207936939315, 0.22023446827949233, 0.22906733385784406, 0.343319876498846, 0.19283056498367246, 0.20383793245068116, 0.15020808010236708, 0.22458562671214855, 0.8563409245065549, 0.13167574226734136, 0.39656096140697183, 0.4925197413598168, 0.5185696341753343, 0.45992082559703173, 0.47043094068464375, 0.13547113916196285, 0.4506334592145328, 0.13411397154981564, 0.2917096414457111, 0.17180726683054182, 0.12301308967088587, 0.4524538241980097, 0.49062693848861527, 0.45654855076380385, 0.3759967141908518, 0.4132383560134134, 0.13140670245259245, 0.07046496261297364, 9.999999999998899e-05, 0.09251582834280758, 0.005399438524662625, 9.999999999998899e-05, 0.02783571752211833, 0.04942170714063454, 0.06323065998101318, 0.23785810065679758, 0.05165316280403964, 0.04327424111321265, 0.09074713973020321, 0.08496774623300785, 0.011650877596525944, 0.03206341556111969, 0.1870426826997229, 0.06995853727905288, 0.0623983851711557, 0.05170732236069775, 0.17455589289302476, 0.11825654314028611, 0.08000762304267228, 0.07893352839825563, 0.14719523382950428, 0.2307153801570545, 0.2633675849374649, 0.11398897143933173, 0.2826751653880859, 0.17534560802160126, 0.2365865098587575, 0.22197296140234413, 0.006629236057705379, 0.29584339757951816, 0.2596010485765373, 0.2873677290614782, 0.25296716753966253, 0.6751717377866637, 0.6423801197717708, 0.6765807070804142, 0.672161926684782, 0.6739685519701332, 0.6235791486462481, 0.6716598683491011, 0.7070660336264809, 0.6701627766644012, 0.10767903298274273, 0.11928048413393899, 0.13871080778029576, 0.1463392560620046, 0.11748956306092206, 0.1373363138920709, 0.0920791787402917, 0.07929389664972275, 0.10872364658874778, 0.1623270229100956, 0.3533136888125752, 0.5865698344150554, 0.1593945500936903, 0.2751889216324721, 0.22150243210265985, 0.26865494224768616, 0.15902903402655577, 0.2608507317493096, 0.35748197963521655, 0.4473665706177571, 0.4623285925199121, 0.47843013702102555, 0.5569488061192873, 0.5652151698507075, 0.5588687693342851, 0.6437091616304631, 0.5344411410774524, 0.4098908677310591, 0.2475439667749023, 0.39023917476656533, 0.21799712131142268, 0.19967863568289945, 0.3761319265445724, 0.34997504160068926, 0.4799002159452874, 0.3046620804575826, 0.19518703964827266, 0.2354963580073619, 0.1936619627606332, 0.23582701611667944, 0.22574297456232195, 0.18912573771522423, 0.19573903302625195, 0.21987803707998987, 0.21362730155703824, 0.24938229589343408, 0.2415333408415835, 0.24986434923149003, 0.2506779813110721, 0.21577594993864713, 0.19782528365853924, 0.22319141762478034, 0.20365760049974146, 0.2078544938932707, 0.16583497988513773, 0.17494925222614877, 0.15381599277377667, 0.9360753245832281, 0.20125757098345498, 0.20150503967384226, 0.14717472187752068, 0.17001385263458324, 0.8886445544523318, 0.8745569666198664, 0.15680906918617932, 0.20775905114374404, 0.21005258908331748, 0.8378869232285068, 0.8291670170051344, 0.10533438020233521, 0.8648685184310174, 0.8315776310559502, 0.175481077184221, 0.1782382706347183, 0.17325615921568172, 0.17604928155880228, 0.20409570310060587, 0.18254255110797535, 0.22620051079386172, 0.21379631444409708, 0.18414957148905642, 0.11139385918679667, 0.09279810180447179, 0.0838600112786475, 0.07737466342321009, 0.0899060395181257, 0.10230325382552952, 0.08428964187519572, 0.08501893722932907, 0.09482095789798017]}, "mutation_prompt": null}
{"id": "9a10fcdf-78e2-4a4b-b37e-6cff7b5603df", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                diversity_factor = np.std(pos) / np.sqrt(self.dim)\n                adaptive_F = self.F * (1 + diversity_factor)  # Adaptive mutation factor\n                mutant = np.clip(pbest_pos[a] + adaptive_F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Introduced adaptive mutation factor in DE step based on population diversity to improve exploration-exploitation balance.", "configspace": "", "generation": 38, "fitness": 0.3283520326671572, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.29.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.8916137845445056, 0.8835800148639945, 0.8859889256966871, 0.8710479086243537, 0.901078400551588, 0.8967148338425236, 0.8932946415003155, 0.8899560081080404, 0.8933098462120201, 0.04245584899039445, 0.7747562268018486, 0.7832092271349604, 9.999999999998899e-05, 0.04787445688015868, 0.06673188886111625, 0.05828569277174189, 0.7676876168462328, 0.7701765031831264, 0.15072666225800135, 0.18091204532328353, 0.10083737673335003, 0.10996605541248883, 0.1318972798993545, 0.15805761925650108, 0.13241112567021007, 0.08807617996015216, 0.10577069742031286, 0.11928130488678834, 0.14394130035400776, 0.13262094939668134, 0.7357289132418934, 0.124046248026492, 0.11288016081823404, 0.11704285619570942, 0.10554164607764593, 0.11227306355230215, 0.9857172157749982, 0.985522550956587, 0.9866286141208046, 0.9863503974816554, 0.9827323519172082, 0.9816756187517043, 0.9870737064513052, 0.9872923398048874, 0.9819035495540551, 0.5277093787298055, 0.05928676703871261, 0.5880761159354841, 0.579951349224351, 0.5338187262612091, 0.5954659787019746, 0.565711805885496, 0.08860562962881557, 0.5243535025373194, 0.1722019953828101, 0.8264251767084398, 0.3361334966442634, 0.27851117989182406, 0.2099800341985676, 0.20455030640056648, 0.21580473986293758, 0.685155504789366, 0.6866052932687229, 0.3353985617819122, 0.4194742050606802, 0.13275187143918032, 0.3278467046390702, 0.10698193192838734, 0.13153972133940806, 0.1298768113522365, 0.30426390330252295, 0.3766303552141822, 0.3726046204178599, 0.054032869648879545, 0.3215498688472397, 0.48098340874979095, 0.3678634943699043, 0.4844870422978884, 0.5605760665729919, 9.999999999998899e-05, 0.2295068664840315, 0.054471047232840686, 9.999999999998899e-05, 0.0634325428403194, 9.999999999998899e-05, 0.0003937971606110535, 0.0002327561118511401, 0.02985925908933551, 0.031904289006112974, 0.014838061563600569, 0.07312534390528158, 0.09656777167178099, 0.09364916327665485, 0.07679355851727976, 0.04433443457521058, 0.07148091201009743, 0.08001850875861294, 0.10205921245938643, 0.07631332094689602, 0.18559087129588248, 0.03623080491648434, 0.14940844267348674, 0.07969085539195475, 0.09613199966133756, 0.1797943038998142, 0.10168257297244487, 0.20687399736718282, 0.0781620296089226, 0.18316159700860124, 0.25631270586464705, 0.2935776161071232, 0.11443791873977893, 0.006455773298264411, 0.3547121733202441, 0.056984270967305406, 0.1247831816003181, 0.09255913869069188, 0.5842357600517476, 0.5547383130238075, 0.597332825591331, 0.5792834528540172, 0.5929731072772363, 0.5829686134193295, 0.5858277068370783, 0.6243570413356614, 0.635463569358742, 0.07790005371484421, 0.09165643654420819, 0.06931094277660399, 0.12106130620219269, 0.13545169096048615, 0.09756579998241466, 0.15385822023097862, 0.10655722705589765, 0.13321717025775903, 0.1707056944396087, 0.1479627694034924, 0.1480491773450816, 0.21456476943225467, 0.25281837497790705, 0.2110292914662114, 0.26670571101800056, 0.1489930203056372, 0.19630573446826438, 0.3881263422895471, 0.45472000022976655, 0.3956014867778912, 0.4703467039980984, 0.41063454181928083, 0.39541857167792704, 0.7076985796198422, 0.44695032535340806, 0.49294387637921644, 0.24035676185542976, 0.2583628028277043, 0.21336737456283728, 0.27466971838971344, 0.220167070194226, 0.2833126990466506, 0.334455689123458, 0.3294528171626694, 0.281059451946997, 0.20812004724129507, 0.17173646677255416, 0.23847024938415484, 0.19099632170375536, 0.2172764668929601, 0.23585127553994967, 0.20764153115975414, 0.19017374737882298, 0.19748921503035566, 0.20078935614542948, 0.7746906674570028, 0.2241181610878119, 0.25273168855965156, 0.22212171945697956, 0.18595402060352828, 0.2408731204063681, 0.20650879955116086, 0.21122854883468922, 0.8648370158556982, 0.1654755207517552, 0.7006942066165875, 0.9121578557007747, 0.2013258101983405, 0.20147152773627752, 0.14649940843839937, 0.17002791340050627, 0.9056780619698639, 0.8438805464125436, 0.1559491090551528, 0.6595304585960537, 0.7493237706445246, 0.7478126462143655, 0.8009674560719613, 0.210976216810566, 0.7631104270660063, 0.7210122566469515, 0.17639112184362604, 0.19722905133669422, 0.17503128241187893, 0.20805692385250107, 0.21455117809808733, 0.21757954453684114, 0.2296683343719308, 0.17894439415920793, 0.1930575446221542, 0.1032353866429454, 0.07598588602620981, 0.08762128040762274, 0.07628984905500147, 0.0869658385668961, 0.08068466486757608, 0.09563047113606993, 0.08426233911845649, 0.10100458831683568]}, "mutation_prompt": null}
{"id": "aea5518c-c3dd-4b48-b2bb-d1c59d5f7fe2", "solution": "import numpy as np\n\nclass PSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F = F\n        self.CR = CR\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize position and velocity\n        pos = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        vel = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest_pos = np.copy(pos)\n        pbest_val = np.apply_along_axis(func, 1, pbest_pos)\n        gbest_pos = pbest_pos[np.argmin(pbest_val)]\n        gbest_val = np.min(pbest_val)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            # Particle Swarm Optimization step\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.c1 *= 0.99  # Dynamic adjustment of cognitive coefficient c1\n            self.w = 0.9 - 0.4 * (evals / self.budget)  # Dynamic inertia weight adjustment\n            vel = self.w * vel + self.c1 * r1 * (pbest_pos - pos) + self.c2 * r2 * (gbest_pos - pos)\n            pos = pos + vel\n            pos = np.clip(pos, self.lower_bound, self.upper_bound)\n\n            # Evaluate the new solutions\n            fitness = np.apply_along_axis(func, 1, pos)\n            evals += self.pop_size\n\n            # Update personal and global bests\n            better_idx = fitness < pbest_val\n            pbest_pos[better_idx] = pos[better_idx]\n            pbest_val[better_idx] = fitness[better_idx]\n\n            if np.min(fitness) < gbest_val:\n                gbest_val = np.min(fitness)\n                gbest_pos = pos[np.argmin(fitness)]\n\n            # Differential Evolution step for diversity\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                idxs = np.arange(self.pop_size)\n                idxs = idxs[idxs != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = np.clip(pbest_pos[a] + self.F * (pbest_pos[b] - pbest_pos[c]), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pos[i])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pos[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < pbest_val[i]:\n                        pbest_pos[i] = trial\n                        pbest_val[i] = trial_fitness\n                        if trial_fitness < gbest_val:\n                            gbest_val = trial_fitness\n                            gbest_pos = trial\n\n            vel *= 0.9 + 0.1 * np.std(fitness) / np.max(fitness)  # Modified damping based on fitness diversity\n\n        return gbest_pos, gbest_val", "name": "PSODE", "description": "Enhanced PSODE by integrating dynamic inertia weight adjustment based on iteration progress, improving convergence speed.", "configspace": "", "generation": 39, "fitness": 0.3165838043664906, "feedback": "The algorithm PSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "c1f5ede7-2a48-4033-997c-3f7d7cb1e7d7", "metadata": {"aucs": [0.7333032429278694, 0.7353903755850841, 0.7326812229647883, 0.7558435711387262, 0.772347105514844, 0.7298422082456512, 0.7637150991630692, 0.7617041309425363, 0.7462989841712465, 0.6051606028469291, 0.5581355287467424, 0.5660512425143694, 0.5877886409922499, 0.5785649696432337, 0.5474251353781725, 0.6012320723842977, 0.5656591218812328, 0.5718446122377053, 0.15578114537391008, 0.13695111425048911, 0.12824261847628426, 0.1227018364652449, 0.10767281517779625, 0.12645956342590503, 0.11559542556580005, 0.10399410621461125, 0.11664890758295254, 0.10864739944246615, 0.09550293036278146, 0.10633068132553813, 0.11280305166453963, 0.09140873398018012, 0.10143912161409119, 0.11869791750385772, 0.09757974310847639, 0.10541115148891145, 0.9867754430801485, 0.9865839985982978, 0.9907009470532301, 0.9834731377121639, 0.9855450480235246, 0.9753894136641351, 0.9841624338557328, 0.9848279595541363, 0.9857853385317281, 0.33481943796521785, 0.3050169340745672, 0.3265146145559059, 0.3409501468594396, 0.30169451470966335, 0.3720315556622438, 0.330016699961313, 0.3893799244157381, 0.0811579285348677, 0.6871107739392226, 0.5167644080302514, 0.6200936820525011, 0.7120686695212619, 0.6205264833592642, 0.6346515343821706, 0.6358429346196246, 0.5242827859010508, 0.6092086379444543, 0.2735343923039837, 0.3016258493817351, 0.2769889333710023, 0.2754853660788834, 0.2583291823246213, 0.29151305696572527, 0.24026230904228563, 0.24664163138469097, 0.26149263029787084, 0.2100050530561055, 0.050872321552785094, 0.21710433690244746, 0.27082279603499015, 0.2517218065557687, 0.28162835091489447, 0.2581619775829207, 0.2274222034034885, 0.3023737361846808, 0.13252875872123349, 0.10805353171500498, 0.064868301335542, 0.17672803839425089, 0.11555512929857614, 0.13240405222772533, 0.0752460858129178, 0.08336661489567743, 0.09484640880335027, 0.25029347342924957, 0.27002077209922326, 0.2333028417265629, 0.19807218527356052, 0.20450235391320093, 0.18934968949775355, 0.24388257807032165, 0.26780757749202055, 0.2376947480869528, 0.03567985230775417, 0.027575306346042106, 0.02469587698187714, 0.02128823465282037, 0.1156817938822311, 0.01428569251670675, 0.020332227377253154, 0.012945675046270089, 0.01645696922517159, 0.14488959149702674, 0.17018877143553435, 0.1912370798482218, 0.1564665592401585, 0.14797705567598862, 0.15396839782285965, 0.1495493843376111, 0.16208087504346602, 0.15249207417936927, 0.5513837634957377, 0.5357778701095555, 0.5152690191782408, 0.5442151690195486, 0.5262493471686398, 0.5262761264812351, 0.5454840908739663, 0.5351932321156458, 0.52758732884187, 0.09271891285790501, 0.11054875778429829, 0.10346972218899209, 0.08140813852307782, 0.10840520659936703, 0.10757407786659734, 0.1000371756506856, 0.10761898980555396, 0.11352285416432606, 0.15886851186156037, 0.2713368681394992, 0.15494136862125996, 0.32360851897965226, 0.30015910476550156, 0.22792304747617909, 0.28586519492610984, 0.14277607978022877, 0.21104181244438625, 0.4233978000704014, 0.37731550113800794, 0.42657969136941953, 0.4304746307084891, 0.38687319327218606, 0.40075403859064307, 0.4384071531668584, 0.39764844427926427, 0.4189400809054524, 0.26251127812236164, 0.26123449442655766, 0.303240607621751, 0.2232184082449773, 0.2290939634285889, 0.25760622731099725, 0.2641862761559969, 0.294315182035051, 0.2735324959348434, 0.18863859347544654, 0.1716286452495035, 0.17376441955915833, 0.17156265636592705, 0.19000547786585487, 0.1710923974084082, 0.2033248008199614, 0.16925128965165315, 0.18809517095259876, 0.26137283766807706, 0.2141108538234956, 0.1934953295341889, 0.19124727186450263, 0.2972343104804377, 0.20898097339908617, 0.1855129541056728, 0.17541882011714427, 0.18944747258764527, 0.18651423221106922, 0.6906888583867288, 0.11287678304572468, 0.6479533150313166, 0.19771748035957137, 0.7135517224164059, 0.14306540927011935, 0.169136545395852, 0.7399971399704146, 0.6838783835097467, 0.578078729429842, 0.20435097481423115, 0.2066100466088756, 0.6626626403613325, 0.6915588978231739, 0.10485829683898151, 0.6869291566981577, 0.6888291738354423, 0.19391490847612625, 0.17879795554531008, 0.18275759168511385, 0.20622081289832928, 0.20454559484414492, 0.16855998343935807, 0.18178528866813393, 0.18550982132711324, 0.18876048809743284, 0.08066958351278952, 0.08292144971242088, 0.07041844962449051, 0.08426989753217118, 0.07216951792114068, 0.07534165419450889, 0.07979414566541798, 0.07712803601956641, 0.07397273814837169]}, "mutation_prompt": null}
