{"id": "183642eb-e9d5-47d3-bc1a-da809a3e0bd3", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos):\n            r1, r2 = np.random.rand(), np.random.rand()\n            return self.w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i])\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "A novel metaheuristic algorithm inspired by the movement of a flock of birds to optimize black box functions.", "configspace": "", "generation": 0, "fitness": 0.21713894453393157, "feedback": "The algorithm BirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8426676392616633, 0.815132959140731, 0.8332753536986839, 0.8089405720849369, 0.8210854869858795, 0.8159608140574651, 0.786685471788589, 0.7842182476187802, 0.778786300427051, 0.11680616834280066, 0.01446391727661045, 9.999999999998899e-05, 0.10119682286463794, 0.032269047275356955, 9.999999999998899e-05, 0.08333047269191107, 9.999999999998899e-05, 9.999999999998899e-05, 0.1098383726242248, 0.07739381515701438, 0.04554887859011747, 0.13645044961340214, 0.07951004968202668, 0.07544644123061839, 0.07840669946277579, 0.05653757471771592, 0.07871060107058425, 0.06739359284172775, 0.053362766174426035, 0.07868930797595874, 0.07401369770823263, 0.04940537611075546, 0.04426007187447645, 0.049859995122895295, 0.058295657419486835, 0.04416882928313903, 0.9784664848695269, 0.9803700963577411, 0.9850172371819166, 0.07371389174064846, 0.9870576344095771, 0.9662842772538768, 0.9792248355152726, 0.9881108625687055, 0.9753953424539908, 0.09783041114114965, 0.07854250428743415, 0.05682002140558429, 0.18478863112114008, 0.2774336784851774, 0.15954332536656568, 0.15793880317796138, 0.19579088190707483, 0.11461315885934387, 0.21688195698891866, 0.13926442810424455, 0.12619185151280077, 0.3790553509374497, 0.11330805632788066, 0.09646664662177462, 0.2118158304482659, 0.13159182966757377, 0.14848473409467222, 0.12447169696137594, 0.16830685004889834, 0.08502903169019049, 0.1293516559126865, 0.1763893436657994, 0.06090527530453638, 0.4114686608581223, 0.1714322866135819, 0.14296896515539215, 0.2569731789827264, 0.16163420763501035, 0.12322192376236218, 0.21916992399655233, 0.24508873086872518, 0.1320199054140868, 0.1295473966842643, 0.18219663155118082, 0.1320044509497349, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05365694495620865, 9.999999999998899e-05, 0.031555549632831026, 0.06935845893309811, 9.999999999998899e-05, 0.07807798693603052, 0.0796047158152785, 0.10165922775112701, 0.13336438495010206, 0.03835838530923796, 0.01948344961707804, 0.10198196089774414, 0.07285091573832325, 0.05732934928172928, 0.15957236540739028, 0.3126145814975695, 0.170745172039236, 0.12750368364973097, 0.055236088612387935, 0.12325880451712679, 0.3159063577888185, 0.12138798295327702, 0.018881915400271287, 0.05948009407727928, 0.11423991537327438, 0.16366183453097294, 0.08411283640212841, 0.036134875710370995, 0.07374595177607957, 0.17707103341210662, 0.07248132500829829, 0.08559928830160368, 0.3753288761516974, 0.6513263595059646, 0.6164737717962874, 0.493900230429437, 0.5981666058321152, 0.5725638998642383, 0.47964412775605925, 0.37881458584275174, 0.5668097733055373, 0.0414964337513235, 0.1341223860624563, 0.055201238070961, 0.15279423309557327, 0.06559674766990597, 0.08668841957423301, 0.09628528281521265, 0.12894953912313212, 0.08435622648679186, 0.14595033425804171, 0.2643267710926691, 0.11758661445665808, 0.18219438475937622, 0.15646016495398984, 0.1445917915089554, 0.1854088535999796, 0.1680444641359734, 0.14878540793934247, 0.2317362996807586, 0.17351445678291078, 0.15732345125681335, 0.15485638051463357, 0.19185833597497903, 0.17075451731460456, 0.15614408038039618, 0.35290548647231557, 0.1274387109856474, 0.13251322848906621, 0.1418047345193072, 0.13624509636410875, 0.1710160320870625, 0.168549193311467, 0.19110514052406802, 0.15470211004664014, 0.19950119374664044, 0.08345134100997109, 0.1724216572503503, 0.2549925494094104, 0.23157587107175526, 0.20976017173076422, 0.22708264738169948, 0.1839245093326174, 0.19501531619423496, 0.18314839102235814, 0.16583504944960492, 0.1842288121483886, 0.19001449481312904, 0.19667730002112038, 0.17947490553076917, 0.17331705711251766, 0.1787319976858165, 0.17056800214948709, 0.16256715961548474, 0.17310274784359647, 0.8275881937448419, 0.18336964236340514, 0.1510534623711135, 0.17366665020550953, 0.19995270547852095, 0.19979038476508193, 0.12255772424424727, 0.17017264560293965, 0.16463360461069731, 0.7013801208458508, 0.2106418049612121, 0.5605448640761681, 0.1033091087143766, 0.16785106917262416, 0.20781679849956058, 0.10530661312885481, 0.3730581762838172, 0.3183196282822782, 0.20660956772234707, 0.2003987202401547, 0.18895822158571096, 0.1858063656918929, 0.18965620071362588, 0.20034810294585714, 0.1886468934639477, 0.19381741219747195, 0.1919304377653257, 0.11000127546268235, 0.05128356087347852, 0.07754097016666206, 0.08568553852879546, 0.06978995098033902, 0.12319258010668, 0.08394555069961918, 0.059060198471150405, 0.08039155598634318]}, "mutation_prompt": null}
{"id": "b8ec45ac-4f60-4e46-a451-966abf99b143", "solution": "class ImprovedBirdFlockOptimization(BirdFlockOptimization):\n    def __call__(self, func):\n        inertia_min, inertia_max = 0.1, 0.9\n        inertia = inertia_max\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                inertia = inertia_max - (_ / self.budget) * (inertia_max - inertia_min)\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i])\n                population[i] += inertia * velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Introducing dynamic inertia weight to enable faster convergence by adjusting bird movement based on the optimization progress.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 11, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 11, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "183642eb-e9d5-47d3-bc1a-da809a3e0bd3", "metadata": {}, "mutation_prompt": null}
{"id": "8ad805c4-c853-4b7c-b985-574eb30a4b8b", "solution": "class ImprovedBirdFlockOptimization(BirdFlockOptimization):\n    def __call__(self, func):\n        inertia_weight = lambda t: 0.9 - t * (0.8 / self.budget)\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])\n\n        for t in range(self.budget):\n            w = inertia_weight(t)\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i])\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Introducing dynamic inertia weight updating to enhance convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 9, 9, '        for t in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 9, 9, '        for t in range(self.budget):\\n'))", "parent_id": "183642eb-e9d5-47d3-bc1a-da809a3e0bd3", "metadata": {}, "mutation_prompt": null}
{"id": "999eb845-6ad5-4b7c-a00f-84dd5ead9411", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w_min=0.4, w_max=0.9, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w_min = w_min\n        self.w_max = w_max\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, w):\n            r1, r2 = np.random.rand(), np.random.rand()\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])\n        w = self.w_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], w)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing dynamic inertia weight to balance exploration and exploitation in BirdFlockOptimization.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 28, 9, '        w = self.w_max\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 28, 9, '        w = self.w_max\\n'))", "parent_id": "183642eb-e9d5-47d3-bc1a-da809a3e0bd3", "metadata": {}, "mutation_prompt": null}
{"id": "5b9f6e83-2e0d-4549-a94d-95b5b7e55596", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos):\n            r1, r2 = np.random.rand(), np.random.rand()\n            return self.w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i])\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "A novel metaheuristic algorithm inspired by the movement of a flock of birds to optimize black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "183642eb-e9d5-47d3-bc1a-da809a3e0bd3", "metadata": {"aucs": [0.8426676392616633, 0.815132959140731, 0.8332753536986839, 0.8089405720849369, 0.8210854869858795, 0.8159608140574651, 0.786685471788589, 0.7842182476187802, 0.778786300427051, 0.11680616834280066, 0.01446391727661045, 9.999999999998899e-05, 0.10119682286463794, 0.032269047275356955, 9.999999999998899e-05, 0.08333047269191107, 9.999999999998899e-05, 9.999999999998899e-05, 0.1098383726242248, 0.07739381515701438, 0.04554887859011747, 0.13645044961340214, 0.07951004968202668, 0.07544644123061839, 0.07840669946277579, 0.05653757471771592, 0.07871060107058425, 0.06739359284172775, 0.053362766174426035, 0.07868930797595874, 0.07401369770823263, 0.04940537611075546, 0.04426007187447645, 0.049859995122895295, 0.058295657419486835, 0.04416882928313903, 0.9784664848695269, 0.9803700963577411, 0.9850172371819166, 0.07371389174064846, 0.9870576344095771, 0.9662842772538768, 0.9792248355152726, 0.9881108625687055, 0.9753953424539908, 0.09783041114114965, 0.07854250428743415, 0.05682002140558429, 0.18478863112114008, 0.2774336784851774, 0.15954332536656568, 0.15793880317796138, 0.19579088190707483, 0.11461315885934387, 0.21688195698891866, 0.13926442810424455, 0.12619185151280077, 0.3790553509374497, 0.11330805632788066, 0.09646664662177462, 0.2118158304482659, 0.13159182966757377, 0.14848473409467222, 0.12447169696137594, 0.16830685004889834, 0.08502903169019049, 0.1293516559126865, 0.1763893436657994, 0.06090527530453638, 0.4114686608581223, 0.1714322866135819, 0.14296896515539215, 0.2569731789827264, 0.16163420763501035, 0.12322192376236218, 0.21916992399655233, 0.24508873086872518, 0.1320199054140868, 0.1295473966842643, 0.18219663155118082, 0.1320044509497349, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05365694495620865, 9.999999999998899e-05, 0.031555549632831026, 0.06935845893309811, 9.999999999998899e-05, 0.07807798693603052, 0.0796047158152785, 0.10165922775112701, 0.13336438495010206, 0.03835838530923796, 0.01948344961707804, 0.10198196089774414, 0.07285091573832325, 0.05732934928172928, 0.15957236540739028, 0.3126145814975695, 0.170745172039236, 0.12750368364973097, 0.055236088612387935, 0.12325880451712679, 0.3159063577888185, 0.12138798295327702, 0.018881915400271287, 0.05948009407727928, 0.11423991537327438, 0.16366183453097294, 0.08411283640212841, 0.036134875710370995, 0.07374595177607957, 0.17707103341210662, 0.07248132500829829, 0.08559928830160368, 0.3753288761516974, 0.6513263595059646, 0.6164737717962874, 0.493900230429437, 0.5981666058321152, 0.5725638998642383, 0.47964412775605925, 0.37881458584275174, 0.5668097733055373, 0.0414964337513235, 0.1341223860624563, 0.055201238070961, 0.15279423309557327, 0.06559674766990597, 0.08668841957423301, 0.09628528281521265, 0.12894953912313212, 0.08435622648679186, 0.14595033425804171, 0.2643267710926691, 0.11758661445665808, 0.18219438475937622, 0.15646016495398984, 0.1445917915089554, 0.1854088535999796, 0.1680444641359734, 0.14878540793934247, 0.2317362996807586, 0.17351445678291078, 0.15732345125681335, 0.15485638051463357, 0.19185833597497903, 0.17075451731460456, 0.15614408038039618, 0.35290548647231557, 0.1274387109856474, 0.13251322848906621, 0.1418047345193072, 0.13624509636410875, 0.1710160320870625, 0.168549193311467, 0.19110514052406802, 0.15470211004664014, 0.19950119374664044, 0.08345134100997109, 0.1724216572503503, 0.2549925494094104, 0.23157587107175526, 0.20976017173076422, 0.22708264738169948, 0.1839245093326174, 0.19501531619423496, 0.18314839102235814, 0.16583504944960492, 0.1842288121483886, 0.19001449481312904, 0.19667730002112038, 0.17947490553076917, 0.17331705711251766, 0.1787319976858165, 0.17056800214948709, 0.16256715961548474, 0.17310274784359647, 0.8275881937448419, 0.18336964236340514, 0.1510534623711135, 0.17366665020550953, 0.19995270547852095, 0.19979038476508193, 0.12255772424424727, 0.17017264560293965, 0.16463360461069731, 0.7013801208458508, 0.2106418049612121, 0.5605448640761681, 0.1033091087143766, 0.16785106917262416, 0.20781679849956058, 0.10530661312885481, 0.3730581762838172, 0.3183196282822782, 0.20660956772234707, 0.2003987202401547, 0.18895822158571096, 0.1858063656918929, 0.18965620071362588, 0.20034810294585714, 0.1886468934639477, 0.19381741219747195, 0.1919304377653257, 0.11000127546268235, 0.05128356087347852, 0.07754097016666206, 0.08568553852879546, 0.06978995098033902, 0.12319258010668, 0.08394555069961918, 0.059060198471150405, 0.08039155598634318]}, "mutation_prompt": null}
{"id": "4a412e19-6de2-4e8d-9787-c81e0645ff81", "solution": "class BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w_min=0.4, w_max=0.9, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w_min = w_min\n        self.w_max = w_max\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, w):\n            r1, r2 = np.random.rand(), np.random.rand()\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])\n        w = self.w_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], w)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n            w = self.w_min + (_ / self.budget) * (self.w_max - self.w_min)  # Adaptive inertia weight\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Utilize adaptive inertia weight to enhance convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 26, 9, '        w = self.w_max\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 26, 9, '        w = self.w_max\\n'))", "parent_id": "183642eb-e9d5-47d3-bc1a-da809a3e0bd3", "metadata": {}, "mutation_prompt": null}
{"id": "a3e285b9-39b2-4adc-8962-91066c7efc52", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w_min=0.1, w_max=0.9, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w_min = w_min\n        self.w_max = w_max\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, w):\n            r1, r2 = np.random.rand(), np.random.rand()\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])\n\n        for t in range(1, self.budget + 1):\n            w = self.w_min + ((self.w_max - self.w_min) / self.budget) * t\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], w)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Introducing dynamic inertia weight to improve exploration and exploitation balance.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        for t in range(1, self.budget + 1):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        for t in range(1, self.budget + 1):\\n'))", "parent_id": "183642eb-e9d5-47d3-bc1a-da809a3e0bd3", "metadata": {}, "mutation_prompt": null}
{"id": "c2140c7f-7b89-49f9-9a2b-6c5f71add201", "solution": "class ImprovedBirdFlockOptimization(BirdFlockOptimization):\n    def __init__(self, budget, dim, num_birds=20, c1=1.5, c2=1.5):\n        super().__init__(budget, dim, num_birds, c1=c1, c2=c2)\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = 0.5 + 0.5 * np.cos(np.pi * 2.0 * _ / self.budget)\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i])\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Introducing dynamic inertia weight to improve convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 22, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 22, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "183642eb-e9d5-47d3-bc1a-da809a3e0bd3", "metadata": {}, "mutation_prompt": null}
{"id": "1f4ac5c4-e2f6-4baa-a835-653991c028ce", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos):\n            r1, r2 = np.random.rand(), np.random.rand()\n            dynamic_w = max(0.4, min(0.9, 1.0 - 0.5 * np.random.rand()))  # Dynamic adjustment of inertia weight\n            return dynamic_w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i])\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing dynamic adjustment of inertia weight to improve convergence speed.", "configspace": "", "generation": 8, "fitness": 0.2058334627973283, "feedback": "The algorithm BirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "183642eb-e9d5-47d3-bc1a-da809a3e0bd3", "metadata": {"aucs": [0.6403553735683954, 0.6758241513861121, 0.5932326613233125, 0.6268351624340959, 0.6102938516060724, 0.5269023345301714, 0.6060737415151547, 0.6199108315769637, 0.5887497325350046, 0.00032074075382138023, 0.016249657917999816, 0.0035581004565840013, 0.0775445511900189, 0.02317190965771465, 0.028277232421036413, 0.06744333583999085, 0.04576830200258153, 0.00679003043804427, 0.07647758959702511, 0.13887950404761518, 0.07551461161284445, 0.07014200283925509, 0.1018895272889404, 0.11431868779395404, 0.0776652457791408, 0.10119694266111745, 0.09574833287947349, 0.0884070520929856, 0.055010313974078184, 0.037898049402964484, 0.0819637589508666, 0.08189545378183227, 0.058463813271269593, 0.02603318573677038, 0.10083064310206014, 0.02674787981379667, 0.987530061481929, 0.9824676795718856, 0.989215444361143, 0.9408485660956067, 0.9752507359300137, 0.9627200746907691, 0.9746232784556447, 0.975254612717369, 0.9839192350466843, 0.23709868260146105, 0.18192114758143785, 0.16665190746089542, 0.18856044405042216, 0.20957766085920615, 0.29691437935688836, 0.17466581247309965, 0.12281007148045808, 0.24497015672004696, 0.2271015237627526, 0.2018364081277647, 0.10832117634462535, 0.19997381731342956, 0.17274856928608384, 0.05779816857735898, 0.07677513784213641, 0.13079940595548956, 0.18964588414501915, 0.09003374690815802, 0.18963488559529196, 0.10332003399006995, 0.145724452354132, 0.18102621001713903, 0.06627425858803304, 0.22434619624667707, 0.18852902673829108, 0.11458503154106203, 0.17802213608703354, 0.19356531778973896, 0.09108761301921109, 0.1558816425398658, 0.1156761201532448, 0.1483854727194579, 0.11987571035401912, 0.10244924727312477, 0.025228391161230324, 0.042736984897061125, 0.04434410234125297, 0.013001794970116332, 0.032374479168425174, 0.023627893611588457, 9.999999999998899e-05, 0.013046705089089117, 0.028527506018392712, 0.012097209229537498, 0.08095280327469423, 0.052121350380019194, 0.10473206932165158, 0.10396725946889818, 0.0796599646882864, 0.006491869157802088, 0.11665887181374579, 0.05562817771164519, 0.05555798802147549, 0.11999555268828721, 0.06313066413389756, 0.0536045127003999, 0.08569171379706131, 0.059290082585440884, 0.04708343809446469, 0.10690669976064404, 0.0658528550966323, 0.02712212275310777, 0.0784574079471142, 0.11286618605306975, 0.1809030890307225, 0.1196406087909907, 0.1512019305028367, 0.028203804510652075, 0.17460987599666056, 0.044907655048190054, 0.06098439138800171, 0.4191128468882681, 0.43332872852439897, 0.4772448228377971, 0.3522386810046937, 0.4225921743086104, 0.3042897347440151, 0.4494209610416262, 0.44168484634376615, 0.476066991545688, 0.045175046927808715, 0.03510463891539384, 0.0628764681066637, 0.08458307715629931, 0.02355658982666886, 0.11031430514473539, 0.13007737370877692, 0.07082774341516396, 0.07714214517185014, 0.14925759399477678, 0.1427301162506276, 0.1709244972743772, 0.2292624398014652, 0.17797905773290645, 0.27954833088946984, 0.15041088968929162, 0.22007585777069882, 0.13524747900112488, 0.2543177202908772, 0.26101798096980633, 0.13493508683605737, 0.18353896268304015, 0.18941841897102218, 0.18124079258221693, 0.15080124826135688, 0.25353753613744967, 0.13952829357765928, 0.10973043726617726, 0.13592268032028054, 0.08525433821951023, 0.22735777828515602, 0.22578390750572097, 0.1320625448294802, 0.1766610570472552, 0.21088432900179654, 0.1368040794148585, 0.22322312146857082, 0.1982957385431331, 0.1887724608710506, 0.17514759499523513, 0.17983868787812407, 0.19645144101875078, 0.2037318799096569, 0.1856789027786956, 0.1747010658434225, 0.17670795678595208, 0.18560307370857732, 0.19174732863633714, 0.18362503464880553, 0.19348547495630153, 0.1856651700591433, 0.16998545912146368, 0.17322716282393558, 0.17312628847127054, 0.6977941582818032, 0.16360978298039153, 0.15247499642498186, 0.17141299616811811, 0.19614599772168684, 0.1994189486368968, 0.12305113364577969, 0.1660976455008738, 0.514053111541178, 0.6758737636953276, 0.19912815043622256, 0.6547405858536712, 0.10042928696710418, 0.1671097682986845, 0.1990152007559891, 0.10525181924287375, 0.5204997135262328, 0.4576821782281779, 0.19296189002509612, 0.1736457863401507, 0.20508985985152306, 0.18594483212259794, 0.16953129781716647, 0.17510593138448072, 0.18190775141995097, 0.17576601494017574, 0.17861650820322206, 0.08337072683184665, 0.10995335683587804, 0.08193263793136407, 0.08683440907915696, 0.0825582385140049, 0.08154569060773975, 0.07562016408404015, 0.06826259686740632, 0.0625971095396941]}, "mutation_prompt": null}
{"id": "d23ee4c7-e625-40fc-8fe1-b4e747d7b64e", "solution": "import numpy as np\n\nclass ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w_min=0.1, w_max=0.9, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w_min = w_min\n        self.w_max = w_max\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, w):\n            r1, r2 = np.random.rand(), np.random.rand()\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])\n        w = self.w_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], w)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n            w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Introducing dynamic inertia weight to adjust the exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 28, 9, '        w = self.w_max\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 28, 9, '        w = self.w_max\\n'))", "parent_id": "183642eb-e9d5-47d3-bc1a-da809a3e0bd3", "metadata": {}, "mutation_prompt": null}
{"id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 10, "fitness": 0.2223495517220249, "feedback": "The algorithm BirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.24.", "error": "", "parent_id": "183642eb-e9d5-47d3-bc1a-da809a3e0bd3", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "0b536592-ef8f-487d-9094-d1d557142981", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "75ab1fb4-1d61-4ee7-a141-4fa3ab47c150", "solution": "import numpy as np\n\nclass ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n\n            chaotic_map = lambda x: 4 * x * (1 - x)\n            random_factor = chaotic_map(np.abs(np.sum(velocity)))  # Chaotic map-based random factor\n\n            return (w + random_factor) * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a chaotic map-based velocity update to inject randomness and exploration, enhancing convergence speed.", "configspace": "", "generation": 12, "fitness": 0.08988242679669131, "feedback": "The algorithm ImprovedBirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.16.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.14148402398983928, 0.12837062151398893, 0.267285970254342, 0.12975927007051102, 0.09331257071905896, 0.15789442700181677, 0.15926046003888727, 0.13080907059730085, 0.1146924764802758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0528484377071623, 0.027653263678519058, 0.006125598535295151, 0.010643411704069683, 0.02674362190780355, 0.050275605861559214, 0.02781584643359092, 0.019645877543503, 0.028141414296331768, 0.01590718767724486, 9.999999999998899e-05, 0.006602948314449852, 0.050191152117042837, 9.999999999998899e-05, 0.00312843906311977, 9.999999999998899e-05, 0.02922941421982783, 9.999999999998899e-05, 0.9795573243109301, 0.0658010279066773, 0.9827494083433271, 0.056882140591466124, 0.979418523993997, 0.11770228083025902, 0.9834407466150102, 0.9828515506778083, 0.9835124795957566, 0.016333173265857814, 9.999999999998899e-05, 0.023039482064725614, 0.07404113603587537, 0.02377293466721364, 0.03976601929659207, 0.04851281869077606, 0.04379748648402271, 9.999999999998899e-05, 0.1765234141818881, 0.07767706605796898, 0.07219205232507464, 0.04547051744602526, 0.08927201273026908, 0.020862913388271065, 0.07404928489228946, 0.09656912358798275, 0.13766222459422062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02488854672437124, 9.999999999998899e-05, 9.999999999998899e-05, 0.01011839900164635, 9.999999999998899e-05, 9.999999999998899e-05, 0.019256600648211886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023058373578066504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08513913940281237, 9.999999999998899e-05, 0.034532425269125255, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03957575906674937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.186845084115845, 0.11746530777660413, 0.20960473002892488, 0.12800304878719948, 0.11121932903835896, 0.12169167894809485, 0.2568712506552806, 0.19363762680039787, 0.21643986020747308, 0.004038466719218148, 0.01083701430826367, 9.999999999998899e-05, 0.042647547054404655, 0.031116900772333977, 0.024138101153881375, 0.035586384633345736, 0.020412000054686907, 0.03643014110936893, 0.08248389871454087, 0.0909257393727747, 0.10984928517814119, 0.09855305120349966, 0.1367806010249073, 0.0768607908650536, 0.08808199726801991, 0.07929465750671683, 0.0936571244855473, 0.10312489565101823, 0.14748897358969548, 0.1094371919330206, 0.12845260617948373, 0.12053035327030304, 0.13310762718298375, 0.13651765575828956, 0.1851077416172363, 0.08657196287372804, 0.07875381647894031, 0.034008147686441226, 0.10135631361760511, 0.095926551098785, 0.0850250000680437, 0.09288166599285919, 0.05648699256316181, 0.1315975505480539, 0.08144607610799326, 0.12793815036811396, 0.15675267244250812, 0.13489544333560155, 0.14089643468967827, 0.13194551895559248, 0.11421080345037149, 0.12245976138762271, 0.13233555922823248, 0.16690830691942815, 0.16347568057209283, 9.999999999998899e-05, 0.16154701364116808, 0.16496489728670016, 0.13409007876482704, 0.13718166443022095, 0.15129604916188422, 0.15527121804330912, 9.999999999998899e-05, 0.15383241970468353, 0.07466602457976645, 0.1137629897238952, 0.1489546025221773, 0.1207914665021157, 0.13044049878340358, 0.07972919320006733, 0.14755995274826583, 0.0767852903227294, 0.14171597337112307, 0.07356619194642167, 0.045162763746836365, 0.06837729752485189, 0.06521792387362624, 0.07059962289545418, 0.10306449709457377, 0.1798762160095122, 0.08740960635461448, 0.13709956554709735, 0.14283012624701408, 0.14763022729669195, 0.11689391263517268, 0.1305124122045931, 0.14665629840604522, 0.12850576028924698, 0.1524311152879786, 0.14689007985489466, 0.03377794820265789, 0.01347814618054688, 0.04256246253666374, 0.056949259839758626, 0.05079462730511952, 0.029784971465502297, 0.03132020961538051, 0.042003494840035294, 0.06316155075812291]}, "mutation_prompt": null}
{"id": "69d8bdd2-ea99-4ec8-a326-01257d6ddcc9", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "ebe915fa-695f-4fd3-8b00-c6978fcd8f2c", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            fitness_values = Parallel(n_jobs=-1)(delayed(fitness)(pop) for pop in population)\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness_values[i] < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing parallel computation of fitness evaluations to speed up the optimization process.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {}, "mutation_prompt": null}
{"id": "b8191caa-7893-4f3e-b592-647dcfc922fe", "solution": "import numpy as np\n\nclass ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            chaos_map = np.sin(position) * np.cos(position)  # Chaotic map\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position) + chaos_map\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Introducing a chaotic map to perturb the velocity update for faster convergence speed.", "configspace": "", "generation": 15, "fitness": 0.17831989178366076, "feedback": "The algorithm ImprovedBirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.38948605290375604, 0.36724088578814873, 0.37437086377873396, 0.3657584059279527, 0.37085936769161854, 0.4016788325274169, 0.33984060357370505, 0.3556726718684007, 0.36452276714770315, 0.0032253618226076863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10832830213123212, 0.09415025738438965, 0.09036376007738067, 0.07629076233204357, 0.061042774522511944, 0.05179127075692791, 0.07122651592869056, 0.056839071231379434, 0.07038081132204932, 0.07864625532834413, 0.05757107128265704, 0.06751232097558824, 0.06558838262381372, 0.07695146658628838, 0.06304310050457884, 0.05341204758220319, 0.06850381553097917, 0.06094620752246227, 0.9793168722433446, 0.9777570617078936, 0.9867031636560065, 0.9705222763150252, 0.9870946156728998, 0.9229617424313703, 0.9765896133110923, 0.9926949036765924, 0.9825124044643312, 0.19692114985288944, 0.1893549146091511, 0.20847750380778074, 0.17082562791666656, 0.14188238021222355, 0.16339849249738614, 0.17502523523358426, 0.17110163178009896, 0.13915760958315038, 0.2887140033624287, 0.20922469860974346, 0.20085949404030645, 0.3036269112229617, 0.3092775590307276, 0.28733425677433055, 0.1754390284149847, 0.16351159676362126, 0.2309033720374718, 0.12737564973619608, 0.10537113654659591, 0.10815496624114418, 0.16342022920459875, 0.15368879755238762, 0.11638587043047788, 0.13492053841753804, 0.13635355455647147, 0.14057254657731888, 0.1301631180976034, 0.10692418452479724, 0.10398565420976136, 0.12845926716561007, 0.07263010191141106, 0.11903267316504085, 0.11371715294145213, 0.11246099377136198, 0.12774930381093075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058477239157280425, 0.021203123561600812, 0.07676691272089298, 0.03256464879154808, 0.004606581239781415, 0.01251080908973945, 0.11330153599853898, 0.057621321185059804, 0.039801895938987086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04399269665524841, 0.05678330560454947, 0.04216407072328199, 0.04313742452722924, 0.06898410184555237, 0.05604361466667218, 0.06980600328839393, 0.07214692801887745, 0.05935170752823138, 0.34448530895678287, 0.3353816240089039, 0.34907514615020296, 0.32534166601491177, 0.3112655244382173, 0.3290691370469143, 0.3485182085745959, 0.3532181145627925, 0.34224942970046013, 0.03944469729575062, 0.07294797654615048, 0.06567918374293835, 0.09038185169850821, 0.06461504407580065, 0.07350951497067304, 0.11245359038090941, 0.06789284209427549, 0.06586565419055546, 0.2095571917423047, 0.1680861374324335, 0.16800059827882652, 0.22854972755738578, 0.1270794979829667, 0.16956673216181806, 0.22063315027753072, 0.1423321194572711, 0.18539785510175855, 0.24020204220031827, 0.2725444005401064, 0.20414680662438345, 0.196698354695382, 0.2001470671644895, 0.1976857581388063, 0.20587039255059192, 0.2595703853312271, 0.14091355339039346, 0.1805343357616912, 0.19729453963968946, 0.11447693949777604, 0.15150431391587282, 0.15556817039657111, 0.14486098362772593, 0.14897595249395834, 0.16623830581367638, 0.09061413577771438, 0.20834216218809465, 0.16687252149974285, 0.17255775455271538, 0.1835844940835606, 0.19306588598446484, 0.17861754353215276, 0.20420347704048625, 0.1736349322987426, 0.20199976866640634, 0.17052523527635055, 0.1779386224635089, 0.2128149029648615, 0.17603007336485266, 0.18034770494652608, 0.1703143832813272, 0.17452297801770122, 0.17300260211481577, 0.1798708956374543, 0.49344168679400535, 0.1813530398591976, 0.15058219959910346, 0.17183177767280067, 0.19558265265609132, 0.19713626366262282, 0.09882984281782192, 0.1674857690687993, 0.16245206333689566, 0.4344710001663463, 0.1997791361273895, 0.04820358972148575, 0.33678664488601184, 0.27353227742064634, 0.20046931645776844, 0.10524663855909511, 0.3111668894742158, 0.25108910847301247, 0.16989099134593721, 0.16026914167797035, 0.19162866867712125, 0.1758506242756508, 0.1810879220248781, 0.16730115878568996, 0.1611862351661394, 0.19286218185377235, 0.1701749262158435, 0.08280665687474209, 0.08903914466732166, 0.08298494865040562, 0.0863703577621725, 0.098729920980829, 0.13673790107878325, 0.0835120742459392, 0.0872759023364057, 0.10359628669824927]}, "mutation_prompt": null}
{"id": "5183895f-b162-4618-9677-6bed3f4dc981", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "af7ddd70-f085-4124-8410-b2078a2f4686", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "7ef93200-dc86-43a9-aa82-4d0e738154b0", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            chaos_map = lambda x: 4.0 * x * (1.0 - x)  # Logistic chaotic map\n            chaotic_values = [0.5]  # Initial value for the chaotic map\n            for _ in range(self.num_birds - 1):\n                chaotic_values.append(chaos_map(chaotic_values[-1]))\n            return -5.0 + 10.0 * np.array(chaotic_values)\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Implementing a chaotic map-based initialization to introduce randomness and diversity in the population initialization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, 0.0').", "error": "TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, 0.0')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {}, "mutation_prompt": null}
{"id": "2ec5d7a6-fbef-4e88-80f1-69725c3d0881", "solution": "class ImprovedBirdFlockOptimization(BirdFlockOptimization):\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5, a=0.5):\n        super().__init__(budget, dim, num_birds, w, c1, c2)\n        self.a = a\n\n    def __call__(self, func):\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)\n            a = self.a * (1.0 - iteration / self.budget)  # Dynamic acceleration coefficient\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position) + a * (global_best_pos - position)", "name": "ImprovedBirdFlockOptimization", "description": "Introducing a dynamic acceleration coefficient to adjust the velocity update based on the potential for improvement.", "configspace": "", "generation": 19, "fitness": 0.0, "feedback": "The algorithm ImprovedBirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "9af77538-77e6-4778-84c0-de4e25873b24", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "ae74b606-b709-44bd-8f9c-ae434c0de41b", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "03095e0e-ca2f-4647-b470-ec7813963807", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "62620f2c-419c-4f94-8135-6fa56d0760f3", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "1380ef6f-54e7-417f-941c-fbf05721f49c", "solution": "import numpy as np\n\nclass ChaoticBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        def logistic_map(x, r=3.8):\n            return r * x * (1 - x)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i] + np.random.uniform(0, 0.2) * logistic_map(np.abs(velocity[i]))  # Chaotic map exploration\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ChaoticBirdFlockOptimization", "description": "Employing a chaotic map to enhance exploration-exploitation balance and convergence speed.", "configspace": "", "generation": 24, "fitness": 0.11122358451541725, "feedback": "The algorithm ChaoticBirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.15.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.1884912299189031, 0.16752459736736725, 0.46927286177289074, 0.30348615016172253, 0.09164835357105006, 0.3261098642567718, 0.4492026941742573, 0.18619521590965527, 0.3713720745618557, 0.03459464270163026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16440659231999455, 9.999999999998899e-05, 9.999999999998899e-05, 0.013138402678144145, 0.03546029655144134, 0.043454040671617955, 0.024314684012890053, 0.07976477769458257, 0.022705324402460758, 0.06520905221753726, 0.03704681800613674, 0.026651240708874147, 0.07967646537662754, 0.05324814840151759, 0.04126968178145485, 0.03451220489507956, 0.05691404027331626, 0.06745276027416691, 0.05731523502626046, 0.03863029276615948, 0.04988046544981206, 0.029449192855124595, 0.07413386777514752, 0.04936418743187443, 0.9253434044754199, 0.11823524251564654, 0.10603262686313197, 0.08023480661912685, 0.9788903822901225, 0.9846420373963782, 0.9856425009472265, 0.12377182002024223, 9.999999999998899e-05, 0.1578642852922547, 0.0627890706054759, 0.08870030696108533, 0.1084894073851832, 0.08923240099839658, 0.01599231197341433, 9.999999999998899e-05, 0.1080118819344712, 0.07263950732455249, 0.058461545792332426, 0.12709952784801148, 0.06274459216625417, 0.05137488584736516, 0.05213833222384401, 0.10394314336075494, 0.1101929149326425, 9.999999999998899e-05, 0.014111492285455607, 0.04605726058411419, 0.016474270121465295, 0.09954788191580777, 9.999999999998899e-05, 0.007555928856806338, 0.07905280575259854, 0.21679166206609157, 9.999999999998899e-05, 9.999999999998899e-05, 0.1234428158099008, 0.11654654606288462, 9.999999999998899e-05, 0.1260321865653521, 0.07319417756118618, 9.999999999998899e-05, 0.2122406740916042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011832307636057138, 9.999999999998899e-05, 9.999999999998899e-05, 0.05307844805225792, 9.999999999998899e-05, 0.06298569186905423, 0.058724861074223145, 9.999999999998899e-05, 0.008441931921585821, 0.018149123224923458, 0.02780988310785637, 0.03621589297409411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10453327501567744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03441665571305508, 0.210779245232528, 0.22771508581790645, 0.35619069518503343, 0.23532990425124367, 0.14216696109773785, 0.13644949726940392, 0.34057958968618607, 0.17335191150491558, 0.3179055940451856, 0.03231842019337494, 0.01960822259804973, 0.030654641527033677, 0.040936765310331635, 9.999999999998899e-05, 0.09783820933399778, 0.07262972393511424, 0.01619321899875703, 0.08719288198716091, 0.1762386105323429, 0.1352655187380195, 0.1719525604924862, 0.19892612392989173, 0.20422822998987966, 0.10061683559295653, 0.14032604461621145, 0.04855804829477728, 0.08159975479855452, 0.1270029777124999, 0.12734094483305203, 0.11734110954571986, 0.14979260549837348, 0.13401592097055004, 0.18616777557976372, 0.1343318631273387, 0.1816077036156899, 0.10488791714823198, 0.07491865517686636, 0.04861807374589844, 0.11452263119317863, 0.09324406871815916, 0.07635243892089916, 0.09290895224046558, 0.10828369450196662, 0.10843167612385973, 0.05097570303526722, 0.17993486675236603, 0.19647726380875397, 0.14634954250072674, 0.18026870058667321, 0.1587957454642066, 0.1580258775125838, 0.17794581476852322, 0.17744229592313787, 0.14694585166623186, 0.15725214331977222, 0.1494531324350843, 0.2236463556813364, 0.1498846141525666, 0.1565491699519369, 0.16895541136337722, 0.12878752596844856, 9.999999999998899e-05, 0.16825968963814808, 0.13158178947348098, 0.10857344608370367, 0.10595065125281711, 0.16618538438680897, 0.14844645723951666, 0.18682271643888337, 0.09691014557185496, 0.13745860491134732, 0.15326724466413466, 0.07956575729313531, 0.11006158430722845, 0.05034985825695326, 0.12305487409179494, 0.16147452575373877, 0.19256023754893026, 0.10260128916499744, 0.18683818390196893, 0.3043160382576333, 0.1638789623185074, 0.18617962179053738, 0.2093263359562071, 0.1781348098256793, 0.12854878527133584, 0.17175876509789778, 0.1562068049420402, 0.13273587405427534, 0.1623138278377635, 0.0725989707992547, 0.04000314236450908, 0.05784536576280663, 0.027015293023570086, 0.06539919600043287, 0.08403580221403606, 0.049844946011811, 0.04449806487406427, 0.05153080331647475]}, "mutation_prompt": null}
{"id": "396f5492-b8f3-4438-9c98-250aa141fb58", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            velocity = Parallel(n_jobs=-1)(delayed(update_velocity)(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr) for i in range(self.num_birds))\n            population += velocity\n            personal_best_pos = np.where([fitness(pop) < fitness(p_best) for pop, p_best in zip(population, personal_best_pos)], population, personal_best_pos)\n            global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Employ parallel computation for velocity updates to speed up the optimization process.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {}, "mutation_prompt": null}
{"id": "2fe63448-71b9-4c86-b764-da7b11a00d04", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "a3baa069-4ec6-45dc-a85a-8d4aa0a95599", "solution": "class BirdFlockOptimizationImproved(BirdFlockOptimization):\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5, c1_min=0.5, c1_max=2.0, c2_min=0.5, c2_max=2.0):\n        super().__init__(budget, dim, num_birds, w, c1, c2)\n        self.c1_min = c1_min\n        self.c1_max = c1_max\n        self.c2_min = c2_min\n        self.c2_max = c2_max\n\n    def __call__(self, func):\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            c1 = self.c1_min + (self.c1_max - self.c1_min) * (iteration / self.budget)  # Dynamic cognitive coefficient\n            c2 = self.c2_min + (self.c2_max - self.c2_min) * (iteration / self.budget)  # Dynamic social coefficient\n            return w * velocity + c1 * r1 * (personal_best_pos - position) + c2 * r2 * (global_best_pos - position)\n", "name": "BirdFlockOptimizationImproved", "description": "Introducing dynamic adjustment of cognitive and social coefficients to enhance exploration and exploitation balance, improving optimization speed.", "configspace": "", "generation": 27, "fitness": 0.0, "feedback": "The algorithm BirdFlockOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "3f7c765a-3092-4e8c-92b8-3f48b630e7a2", "solution": "from concurrent.futures import ThreadPoolExecutor\n\nclass ParallelBirdFlockOptimization(BirdFlockOptimization):\n    def __call__(self, func):\n        def evaluate_population(population, res):\n            for idx, ind in enumerate(population):\n                res[idx] = func(ind)\n\n        def parallel_fitness(population):\n            fitness_values = np.zeros(len(population))\n            with ThreadPoolExecutor() as executor:\n                futures = [executor.submit(evaluate_population, ind, res) for ind, res in zip(population, fitness_values)]\n                for future in futures:\n                    future.result()\n            return fitness_values\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin(parallel_fitness(personal_best_pos))]\n\n        for itr in range(self.budget):\n            fitness_vals = parallel_fitness(population)\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness_vals[i] < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ParallelBirdFlockOptimization", "description": "Implementing a parallel evaluation strategy to enhance optimization speed.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {}, "mutation_prompt": null}
{"id": "6d8606a3-2cba-4f61-aabb-e8d0677f2f4f", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "6c560551-b0be-49ff-9b9e-09695bf40a5e", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "6f51c63d-20b7-4426-ad3d-4e75f1080e6f", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "e49dcf9f-ebb0-44a1-8fb9-fcac954f0b16", "solution": "class BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5, a=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.a = a\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            a = self.a * (iteration / self.budget)  # Dynamic acceleration coefficient\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position) + a * np.random.rand()\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Implementing a dynamic acceleration coefficient that increases over time to boost exploration and exploitation balance in optimization.", "configspace": "", "generation": 32, "fitness": 0.2127466902028824, "feedback": "The algorithm BirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.23.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8123476141236876, 0.822222336263918, 0.8198023926956794, 0.7522168102509522, 0.5712818721984816, 0.556089949165958, 0.674150730240765, 0.8059358276307496, 0.7141844869129162, 0.016356250141627227, 0.029921296165265066, 0.011834905459361611, 0.06565614669174669, 0.051730504587677584, 0.005298020706229867, 9.999999999998899e-05, 0.057053170507942785, 9.999999999998899e-05, 0.10850360857858887, 0.057518822176472195, 0.05026398965381884, 0.06884450413817778, 0.09503473825879105, 0.12715903404151374, 0.0637004461626215, 0.09509059191177205, 0.09450175185277188, 0.05016989317791709, 0.036666602826417316, 0.035861776024056935, 0.10392148420821234, 0.09139038028981561, 0.057470605316482404, 0.036599398214093526, 0.015907708405526466, 0.02726414576468872, 0.9875284243875055, 0.9800465784765122, 0.9890302991040473, 0.9191657865121076, 0.967771341352997, 0.8463822963646068, 0.9731688287676514, 0.9693885512807341, 0.9823548091121895, 0.19822523018716975, 0.16148610951025166, 0.27458663523652715, 0.2827071057170423, 0.18543005001326918, 0.18935911257424076, 0.24420605581036792, 0.16774517141209722, 0.18399274288088774, 0.13040261051304114, 0.1303705182632552, 0.11764337283214954, 0.27469920234783973, 0.35056146226274354, 0.185511864999246, 0.08657950844160556, 0.14181046335999914, 0.17514305003984176, 0.11643306779490759, 0.1884997782552651, 0.13788329451970005, 0.07667808053360226, 0.1601445893803879, 9.999999999998899e-05, 0.509798408851462, 0.23537867994875583, 0.18870693605704214, 0.3264027980813198, 0.15282029240103023, 0.13544685947107848, 0.1536231348697631, 0.12031123999638493, 0.17951993534347221, 0.13281212067763537, 0.11712253049701449, 0.008281358268859895, 0.023485137754706176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00035305514610228794, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575739892870657, 0.03787447534570276, 0.06518202785203409, 0.04957516211232782, 0.12409045786649586, 0.06804225536485142, 0.043084893960805504, 0.013604966071286584, 0.13604741053411384, 0.07702463242202284, 0.05541539620544422, 0.12482469605205193, 0.10969553595242376, 0.09604958493634586, 0.2398373135534816, 0.10782076030942134, 0.03569912071039438, 0.12060085128180653, 0.14757178281066752, 0.02306462264871556, 0.07243942172203766, 0.2695355598863095, 0.12915083866305777, 0.09562225945804315, 0.14387033214650524, 0.023445339509002405, 0.05476030694725309, 0.023620947822829086, 0.06713425213010438, 0.6500010131279129, 0.5210299274626577, 0.3724174502640921, 0.28830411544976664, 0.5003449684667292, 0.49154875081979066, 0.5016370580639636, 0.520824537740114, 0.4202617798542939, 0.07820009232642477, 0.03585500507197137, 0.09281439688187287, 0.08927305724072487, 0.05848261721715231, 0.08067775694260304, 0.12146509754009316, 0.08324799503881819, 0.07997355698170272, 0.15594562433557857, 0.15027341992726173, 0.2895585891205614, 0.15266639383694403, 0.13945115213877102, 0.13709499625600363, 0.1793981829582233, 0.16983308211968196, 0.13027653770214842, 0.1535696530196039, 0.22255253810622366, 0.15063772365932893, 0.23733420198898514, 0.25359633892530054, 0.21602444409605182, 0.1392232790866056, 0.25666867369981106, 0.1468846567037434, 0.11837292642413555, 0.12595957450399453, 0.08849012540877998, 0.15317824922869383, 0.24004884067610166, 0.14227348141174534, 0.17456805695873845, 0.22359337926417489, 0.060359715517852464, 0.18019662097948208, 0.19701536475236503, 0.18472112969934396, 0.1957080397442833, 0.21591589629994856, 0.1885263914811438, 0.2184533037949533, 0.16848603054687772, 0.20918152713003357, 0.16432701881576872, 0.18795238182913865, 0.19775614794571872, 0.17304860768327457, 0.1794529455405045, 0.19133695515048899, 0.1799615012774919, 0.2501266425924644, 0.18315776552771768, 0.8114641563748528, 0.18108002504365017, 0.15029163866252815, 0.17189635162147265, 0.19874982842467137, 0.2006580263422083, 0.12312951541995132, 0.16679138043011876, 0.16657687775299923, 0.42440124010062186, 0.20393842211716562, 0.7582874462811812, 0.10291864030114084, 0.16689726730853982, 0.19955420465341367, 0.10542576311939933, 0.26958855838333784, 0.3977210565578134, 0.22519430349356984, 0.1742316006453637, 0.20054125785031685, 0.17829133875330827, 0.20619841411097573, 0.1854408152661784, 0.20075551139712344, 0.20508805712743705, 0.20405317429737801, 0.09121447084856915, 0.0739691611312443, 0.08084625747853547, 0.08897511806886682, 0.08608294517009418, 0.04506256198980485, 0.07759577121393779, 0.06706081050258639, 0.051602953668163365]}, "mutation_prompt": null}
{"id": "40d7f8ed-c0e6-4e62-b2e5-2924814fef1c", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def parallel_fitness(positions):\n            return Parallel(n_jobs=-1)(delayed(fitness)(pos) for pos in positions)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin(parallel_fitness(personal_best_pos))]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a parallel evaluation strategy for fitness function calculations to boost optimization speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {}, "mutation_prompt": null}
{"id": "75f29416-f8d1-496d-a8a7-e0e5dc508b1d", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "cc3260f0-55ca-4362-8f6e-ad86e54d6220", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5, n_jobs=-1):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.n_jobs = n_jobs\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            updates = Parallel(n_jobs=self.n_jobs)(delayed(update_velocity)(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr) for i in range(self.num_birds))\n            for i in range(self.num_birds):\n                velocity[i] = updates[i]\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implement parallel processing for position updates to enhance optimization speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {}, "mutation_prompt": null}
{"id": "fae07831-3ca9-4ad5-918b-8d48351469d3", "solution": "import numpy as np\n\nclass ImprovedBirdFlockOptimization(BirdFlockOptimization):\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9):\n        super().__init__(budget, dim, num_birds, w, c1, c2)\n        self.f = f\n        self.cr = cr\n\n    def update_velocity(self, velocity, position, global_best_pos, personal_best_pos, iteration, population):\n        r1, r2 = np.random.rand(), np.random.rand()\n        w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n        \n        rand_birds = np.random.choice(self.num_birds, 3, replace=False)\n        mutant = population[rand_birds[0]] + self.f * (population[rand_birds[1]] - population[rand_birds[2]])\n        crossover = np.random.rand(self.dim) < self.cr\n        trial = position + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n        \n        return w * velocity + np.where(crossover, trial, mutant - position)", "name": "ImprovedBirdFlockOptimization", "description": "Modifying the update rule to use a differential evolution strategy for faster convergence.", "configspace": "", "generation": 36, "fitness": 0.2127466902028824, "feedback": "The algorithm ImprovedBirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.23.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8123476141236876, 0.822222336263918, 0.8198023926956794, 0.7522168102509522, 0.5712818721984816, 0.556089949165958, 0.674150730240765, 0.8059358276307496, 0.7141844869129162, 0.016356250141627227, 0.029921296165265066, 0.011834905459361611, 0.06565614669174669, 0.051730504587677584, 0.005298020706229867, 9.999999999998899e-05, 0.057053170507942785, 9.999999999998899e-05, 0.10850360857858887, 0.057518822176472195, 0.05026398965381884, 0.06884450413817778, 0.09503473825879105, 0.12715903404151374, 0.0637004461626215, 0.09509059191177205, 0.09450175185277188, 0.05016989317791709, 0.036666602826417316, 0.035861776024056935, 0.10392148420821234, 0.09139038028981561, 0.057470605316482404, 0.036599398214093526, 0.015907708405526466, 0.02726414576468872, 0.9875284243875055, 0.9800465784765122, 0.9890302991040473, 0.9191657865121076, 0.967771341352997, 0.8463822963646068, 0.9731688287676514, 0.9693885512807341, 0.9823548091121895, 0.19822523018716975, 0.16148610951025166, 0.27458663523652715, 0.2827071057170423, 0.18543005001326918, 0.18935911257424076, 0.24420605581036792, 0.16774517141209722, 0.18399274288088774, 0.13040261051304114, 0.1303705182632552, 0.11764337283214954, 0.27469920234783973, 0.35056146226274354, 0.185511864999246, 0.08657950844160556, 0.14181046335999914, 0.17514305003984176, 0.11643306779490759, 0.1884997782552651, 0.13788329451970005, 0.07667808053360226, 0.1601445893803879, 9.999999999998899e-05, 0.509798408851462, 0.23537867994875583, 0.18870693605704214, 0.3264027980813198, 0.15282029240103023, 0.13544685947107848, 0.1536231348697631, 0.12031123999638493, 0.17951993534347221, 0.13281212067763537, 0.11712253049701449, 0.008281358268859895, 0.023485137754706176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00035305514610228794, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575739892870657, 0.03787447534570276, 0.06518202785203409, 0.04957516211232782, 0.12409045786649586, 0.06804225536485142, 0.043084893960805504, 0.013604966071286584, 0.13604741053411384, 0.07702463242202284, 0.05541539620544422, 0.12482469605205193, 0.10969553595242376, 0.09604958493634586, 0.2398373135534816, 0.10782076030942134, 0.03569912071039438, 0.12060085128180653, 0.14757178281066752, 0.02306462264871556, 0.07243942172203766, 0.2695355598863095, 0.12915083866305777, 0.09562225945804315, 0.14387033214650524, 0.023445339509002405, 0.05476030694725309, 0.023620947822829086, 0.06713425213010438, 0.6500010131279129, 0.5210299274626577, 0.3724174502640921, 0.28830411544976664, 0.5003449684667292, 0.49154875081979066, 0.5016370580639636, 0.520824537740114, 0.4202617798542939, 0.07820009232642477, 0.03585500507197137, 0.09281439688187287, 0.08927305724072487, 0.05848261721715231, 0.08067775694260304, 0.12146509754009316, 0.08324799503881819, 0.07997355698170272, 0.15594562433557857, 0.15027341992726173, 0.2895585891205614, 0.15266639383694403, 0.13945115213877102, 0.13709499625600363, 0.1793981829582233, 0.16983308211968196, 0.13027653770214842, 0.1535696530196039, 0.22255253810622366, 0.15063772365932893, 0.23733420198898514, 0.25359633892530054, 0.21602444409605182, 0.1392232790866056, 0.25666867369981106, 0.1468846567037434, 0.11837292642413555, 0.12595957450399453, 0.08849012540877998, 0.15317824922869383, 0.24004884067610166, 0.14227348141174534, 0.17456805695873845, 0.22359337926417489, 0.060359715517852464, 0.18019662097948208, 0.19701536475236503, 0.18472112969934396, 0.1957080397442833, 0.21591589629994856, 0.1885263914811438, 0.2184533037949533, 0.16848603054687772, 0.20918152713003357, 0.16432701881576872, 0.18795238182913865, 0.19775614794571872, 0.17304860768327457, 0.1794529455405045, 0.19133695515048899, 0.1799615012774919, 0.2501266425924644, 0.18315776552771768, 0.8114641563748528, 0.18108002504365017, 0.15029163866252815, 0.17189635162147265, 0.19874982842467137, 0.2006580263422083, 0.12312951541995132, 0.16679138043011876, 0.16657687775299923, 0.42440124010062186, 0.20393842211716562, 0.7582874462811812, 0.10291864030114084, 0.16689726730853982, 0.19955420465341367, 0.10542576311939933, 0.26958855838333784, 0.3977210565578134, 0.22519430349356984, 0.1742316006453637, 0.20054125785031685, 0.17829133875330827, 0.20619841411097573, 0.1854408152661784, 0.20075551139712344, 0.20508805712743705, 0.20405317429737801, 0.09121447084856915, 0.0739691611312443, 0.08084625747853547, 0.08897511806886682, 0.08608294517009418, 0.04506256198980485, 0.07759577121393779, 0.06706081050258639, 0.051602953668163365]}, "mutation_prompt": null}
{"id": "f5e67f3c-6b91-4517-9414-ac24bfe8d241", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "39bbeaa7-593f-4cb4-82de-308d9bdcff69", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "3a38c8d7-c1e3-4d58-8e6b-e433566995f6", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "579a9189-cd94-4519-9193-2ed90bc32346", "solution": "import numpy as np\n\nclass ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])\n\n        for itr in range(self.budget):\n            for i in np.random.choice(range(self.num_birds), int(0.3*self.num_birds), replace=False):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Introducing a random selection mechanism to update a subset of birds' positions in each iteration to enhance exploration capability.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        for itr in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        for itr in range(self.budget):\\n'))", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {}, "mutation_prompt": null}
{"id": "d11edc4a-3ae5-4d17-bbbe-7acd4cc8e144", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin(Parallel(n_jobs=-1)(delayed(fitness)(ind) for ind in personal_best_pos))]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implement parallel computation of fitness evaluations to accelerate optimization speed.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {}, "mutation_prompt": null}
{"id": "9027acd2-0344-4807-b844-0eff0870c2da", "solution": "class BirdFlockOptimizationImproved:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5, adaptive_c=False, c_min=0.5, c_max=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.adaptive_c = adaptive_c\n        self.c_min = c_min\n        self.c_max = c_max\n\n    def __call__(self, func):\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            if self.adaptive_c:\n                c1 = self.c_min + (self.c_max - self.c_min) * (iteration / self.budget)  # Adaptive acceleration coefficient\n                c2 = self.c_min + (self.c_max - self.c_min) * (iteration / self.budget)  # Adaptive acceleration coefficient\n            else:\n                c1, c2 = self.c1, self.c2\n            return w * velocity + c1 * r1 * (personal_best_pos - position) + c2 * r2 * (global_best_pos - position)\n\n        # Rest of the code remains the same", "name": "BirdFlockOptimizationImproved", "description": "Implementing adaptive acceleration coefficients to enhance optimization speed.", "configspace": "", "generation": 42, "fitness": 0.0, "feedback": "The algorithm BirdFlockOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "0d17c065-74c1-4e2b-9519-e1c47e8b0a16", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "18fd2ad8-d30b-485d-a53c-bf69c9b444c3", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "7b4f0b60-05d5-4fdb-838b-f685e7030990", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "bdcf2a95-e2c5-40a3-9305-7b00b3963157", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "3866e178-6762-4d85-aa6c-2afbfbeecb1c", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "4c5c0064-da24-4e99-91ec-09fe2d30d69a", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "1f19679c-a869-4426-b4e8-8ef5ad3b1792", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "dd69bfaa-dfdc-48e8-a05e-86d857c93f5c", "solution": "import numpy as np\n\nclass ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            chaos = lambda x: 3.9 * x * (1 - x)  # Logistic map as a chaotic map\n            w = chaos(iteration / self.budget)  # Adaptive inertia weight based on chaotic map\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a chaotic map-based adaptive inertia weight to accelerate the convergence speed.", "configspace": "", "generation": 50, "fitness": 0.12388975545042669, "feedback": "The algorithm ImprovedBirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.17743745798935706, 0.22821487466399604, 0.23280033903000508, 0.1820445690948066, 0.2597846796007426, 0.19212625193691768, 0.24236835751344243, 0.21134721616350438, 0.1428808994688654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06979655138258911, 0.058364786948160496, 0.017991694581420803, 0.02364196018423903, 0.038496114587263985, 0.0714704214709323, 0.07248244249929814, 0.03407442970042307, 0.06385953044876291, 0.055628337795191496, 0.016496082431581627, 0.02749187869842118, 0.06850575344079313, 0.06303961591704976, 0.0009756920354250243, 0.015700942708117283, 0.020759326596179406, 0.02078715690593036, 0.07790603039837041, 0.8770421416134946, 0.9787321438841079, 0.06084758310435101, 0.9878370487976585, 0.9766207648011421, 0.9657055308567022, 0.9851618922293618, 0.9777058336944535, 0.03809602970079051, 9.999999999998899e-05, 0.09414191205683964, 0.13990200897951233, 0.05495463843841353, 0.050308991417993276, 0.08852235714358048, 0.07029291235659274, 9.999999999998899e-05, 0.21787175592667485, 0.08057962249182327, 0.06892956762232516, 0.09305797284601536, 0.12150676180931008, 0.03644469459645716, 0.0945998840181439, 0.11871049965997282, 0.1159077081913229, 0.08510070068212372, 0.0057238717085847934, 9.999999999998899e-05, 0.15075377741493956, 9.999999999998899e-05, 9.999999999998899e-05, 0.10930073188029221, 0.06113274302102545, 0.03744651547858158, 0.10972261696259178, 0.042639279929864826, 0.07761769287626885, 0.08084753157550384, 0.035305125115345226, 0.05950818993764784, 9.999999999998899e-05, 9.999999999998899e-05, 0.004502966456741531, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05152869551550898, 0.023300326162874474, 0.06369443704506883, 0.0642210261729027, 9.999999999998899e-05, 9.999999999998899e-05, 0.09750048937836708, 0.06590497827125197, 0.040024678333127506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012624994906892395, 0.004807379360379116, 9.999999999998899e-05, 0.005768751726808463, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014244014634332003, 0.41323248631314213, 0.20027756668131347, 0.24249893455596516, 0.18688805028923616, 0.14120720327356573, 0.18452288530558492, 0.21003332652673612, 0.23711387621735802, 0.23133433575020557, 0.012214812594208757, 0.035747420315077716, 0.008868017392426597, 0.057202928514771156, 0.058275452981691345, 0.05147281027235351, 0.0712249800465854, 0.05510948757019141, 0.06985176120160008, 0.0949462896545088, 0.1988439191749639, 0.1172091640263021, 0.1302982250816458, 0.13718261411155874, 0.12657217807422416, 0.1377700761703975, 0.14997640292818104, 0.10635203861323861, 0.13380909983870648, 0.203038400807928, 0.14403171835408501, 0.1591963493960129, 0.14384736262065145, 0.14973464554248772, 0.13939828695801026, 0.18526319301456373, 0.10305432837516493, 0.09592825804950011, 0.10305514915376646, 0.09338995750830059, 0.12558488987939076, 0.129666283293712, 0.10154670816383515, 0.07335122533978444, 0.1323671612827324, 0.05808866055675588, 0.15434470084944918, 0.20658309160375088, 0.16828993428830452, 0.21208243103342983, 0.148197263629388, 0.17818709610864802, 0.18512689558767292, 0.15454859023440626, 0.1900720238251693, 0.17426857697307152, 0.14937495661985634, 0.17702407247596896, 0.17743496636027434, 0.16527442825956495, 0.16337035174862535, 0.16702450105672617, 0.15710302251696973, 0.16832457269799395, 0.168803773481222, 0.17283810997290716, 0.13288917183373927, 0.17305089998119216, 0.17597940755407104, 0.16035500188107377, 0.1109559419996543, 0.16931473425150145, 0.16487166071651138, 0.5205395339069169, 0.1680611470938902, 0.042565286880190456, 0.07395351581054221, 0.15809397967301853, 0.07006571160395414, 0.10463653147191121, 0.28088772638458515, 0.1110414517018562, 0.18011347308298387, 0.1802171103659237, 0.17272807736416596, 0.19517979040037603, 0.19258055451575584, 0.17933327506497665, 0.23159148969706855, 0.20141466589019175, 0.17696223750298212, 0.09649699916511145, 0.07504038450925432, 0.07448507277574645, 0.08954013515703085, 0.08482403585471987, 0.13749676856203918, 0.07924748499936263, 0.05871091517200033, 0.07083555839619327]}, "mutation_prompt": null}
{"id": "a47f2e2f-7d3f-4dcc-8a49-7d39a1a3ed39", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "2bae8bc5-e8f8-48e8-956d-f1130e2c720a", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "90578263-ff8a-44f6-aa03-90e6fcc5d32b", "solution": "class BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  \n            c1 = self.c1 * np.exp(-iteration / self.budget)  # Adaptive acceleration coefficient\n            c2 = self.c2 * np.exp(-iteration / self.budget)  # Adaptive acceleration coefficient\n            return w * velocity + c1 * r1 * (personal_best_pos - position) + c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Implementing dynamic acceleration coefficients that adapt based on the fitness landscape to enhance convergence speed.", "configspace": "", "generation": 53, "fitness": 0.21523164850021492, "feedback": "The algorithm BirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8392055485852364, 0.826828465449261, 0.8344305445427332, 0.8325465804012188, 0.7834946334332753, 0.4876463700349387, 0.8050084354014717, 0.788266515221727, 0.8096817574180983, 0.023876338519406404, 0.05812329005569372, 9.999999999998899e-05, 0.10363887764028679, 0.06765397802722606, 9.999999999998899e-05, 0.1873384236067397, 9.999999999998899e-05, 9.999999999998899e-05, 0.10985811636350773, 0.07705742776828794, 0.045555794489535395, 0.13555841260785928, 0.0761691029329239, 0.07545007648138635, 0.07852283836059282, 0.05653821669042558, 0.07860845948141248, 0.06786106925256685, 0.053303604756465006, 0.0784738661412675, 0.07452063139672394, 0.060434891402626256, 0.04511297820417515, 0.05111671754556735, 0.05756126910704262, 0.04419228105548556, 0.9784652168076129, 0.9803695689330708, 0.9850167199225588, 0.07344119275928152, 0.9870575988569315, 0.9662841198393255, 0.9792116226066252, 0.9881108490030773, 0.9753943864399377, 0.08860882653724111, 0.059997629138069164, 0.04208793454631521, 0.21313974730967378, 0.22626719972799725, 0.12434313502025984, 0.16490159707190055, 0.20369234519973278, 0.13939434044737442, 0.21688195698891866, 0.13609286760677974, 0.12620061887027245, 0.3776454010191994, 0.11330805632788066, 0.09646664662177462, 0.22279462009415918, 0.11878340361771589, 0.14977627027935292, 0.1243303804962268, 0.16338114899170908, 0.044293046370939004, 0.12797002603746765, 0.1927243270340333, 0.12261401271016259, 0.28199539966649, 0.18444795809367598, 0.14496575410123425, 0.2490254395881082, 0.1498416434530343, 0.12386692028024904, 0.2465460769272374, 0.2350186264110693, 0.13187315020723234, 0.12958891446335785, 0.19189260935089003, 0.16976891517013104, 0.00922132828667599, 9.999999999998899e-05, 9.999999999998899e-05, 0.005539681350140602, 0.09047512509256828, 9.999999999998899e-05, 9.999999999998899e-05, 0.0683465088322609, 9.999999999998899e-05, 0.09028210160886319, 0.0901223619774113, 0.14058603028420236, 0.09798396634599704, 0.06233961826257162, 0.02258811115230619, 0.12442401738790265, 0.07562419197916403, 0.10102783341682209, 0.15901987274535168, 0.29169395881973437, 0.17023878324551223, 0.14949546888512977, 0.055567365733324325, 0.1188177941391606, 0.3094176369712208, 0.12276873038858305, 0.019405151895838912, 0.05991095090684884, 0.11816056681751574, 0.16300124273026195, 0.1298212088308428, 0.047424348912572745, 0.04487851774334428, 0.1759064878066754, 0.0827450171973445, 0.08943364421651334, 0.4465930405005558, 0.4850349599363428, 0.47600944620990826, 0.4365898697138617, 0.4401325982612475, 0.4846406857829626, 0.5949152015249867, 0.41476152890243145, 0.5951428366989765, 0.04153745124228603, 0.13361514945855502, 0.07344970120429883, 0.13874682715380837, 0.06551514027644056, 0.08685639586002158, 0.08583731196160438, 0.1288404623749173, 0.08437632205834711, 0.10187337031676158, 0.2217392118718532, 0.11989990236549386, 0.2903251115555793, 0.15942481070232684, 0.1558363658018046, 0.161002739116615, 0.16605455066872332, 0.13415365032406024, 0.2261576701042266, 0.17369214163306346, 0.1796747782072322, 0.15485375584978478, 0.19204251568200725, 0.17388507524762353, 0.15939904313958964, 0.38643732834714006, 0.1329708414020062, 0.13208017039398223, 0.14106273741222453, 0.10422852757271717, 0.17044630734847777, 0.1572093139894971, 0.17889392695351125, 0.16444423674217545, 0.21933914115495212, 0.06289271916541672, 0.17879179103321052, 0.21019883352179924, 0.22275776315790952, 0.20632552150767391, 0.18314401143016235, 0.1920214295937155, 0.22340866966557993, 0.18355610383731547, 0.18269345382075486, 0.18414916245886592, 0.1900888456219496, 0.19641060688654832, 0.17947010036053013, 0.17321465584494322, 0.17872266994363906, 0.16991829662857594, 0.1696499859148829, 0.17320918320483925, 0.77958896755811, 0.18332454191928305, 0.15143335812717762, 0.1736684083077642, 0.19997211679975435, 0.19978277083877272, 0.12255728219074857, 0.17017176828137637, 0.1647120888595931, 0.8703199635086629, 0.21063371366878625, 0.5649168219977349, 0.10349626863272865, 0.16784923177979438, 0.2077302312795284, 0.10531949793715778, 0.2975778626181821, 0.35293904562022904, 0.19583497500184877, 0.19774534824700163, 0.19863068892946445, 0.22902777863305668, 0.18440701643325785, 0.1743735401439661, 0.1998152145527894, 0.19113134251462827, 0.20101232149779813, 0.10992356928191915, 0.039638352752118355, 0.07501256638860998, 0.06811866106468356, 0.07051585526174808, 0.1144030500899671, 0.0888174091004652, 0.06548044027930877, 0.08112669204100398]}, "mutation_prompt": null}
{"id": "9f24aa76-f0d2-4f33-a2aa-c5181e3ea2b6", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass EnhancedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5, num_threads=4):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.num_threads = num_threads\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(i, velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            velocity[i] = w * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - position[i]) + self.c2 * r2 * (global_best_pos - position[i])\n            position[i] += velocity[i]\n            if fitness(position[i]) < fitness(personal_best_pos[i]):\n                personal_best_pos[i] = position[i]\n            return fitness(personal_best_pos[i]), position[i]\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for itr in range(self.budget):\n                futures = [executor.submit(update_velocity, i, velocity[i], population[i], global_best_pos, personal_best_pos, itr) for i in range(self.num_birds)]\n                results = [future.result() for future in futures]\n                for i, (fit_val, pos) in enumerate(results):\n                    if fit_val < fitness(global_best_pos):\n                        global_best_pos = pos\n\n        return global_best_pos", "name": "EnhancedBirdFlockOptimization", "description": "Utilizing a parallel implementation to update bird positions concurrently to enhance optimization speed.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('setting an array element with a sequence.').", "error": "ValueError('setting an array element with a sequence.')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {}, "mutation_prompt": null}
{"id": "22515102-7e2a-405e-a040-434eeed0d5a2", "solution": "class BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5, a=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.a = a\n\n    def __call__(self, func):\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            a = self.a * (1.0 - iteration / self.budget)  # Dynamic acceleration coefficient\n            return w * velocity + a * (self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position))", "name": "BirdFlockOptimization", "description": "Implementing a dynamic acceleration coefficient to increase exploration-exploitation balance and speed up convergence.", "configspace": "", "generation": 55, "fitness": 0.0, "feedback": "The algorithm BirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "6789044d-1d24-4f09-ab04-edb0dbc1991e", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "719e7d2c-e0d4-422f-a1cb-053b16e4fa33", "solution": "class BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.alpha = alpha\n\n    def __call__(self, func):\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            alpha = self.alpha * (1.0 - iteration / self.budget)  # Dynamic acceleration coefficient\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position) + alpha * np.random.rand() * (global_best_pos - position)\n\n        # Rest of the code remains the same", "name": "BirdFlockOptimization", "description": "Introducing a dynamic acceleration coefficient to adjust the particle movement based on fitness improvement.", "configspace": "", "generation": 57, "fitness": 0.0, "feedback": "The algorithm BirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "a56a2f2c-ceb6-45ae-9f25-78ec686334ae", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "3e22348f-1488-431d-9ad6-33ad3a639695", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "56a8fc33-b9cd-4110-93b2-a88ba7304f39", "solution": "import numpy as np\n\nclass ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            chaotic_map = np.sin(position)  # Chaotic map for exploration\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position) + chaotic_map\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a chaotic map to enhance exploration by introducing chaotic sequences in the update process.", "configspace": "", "generation": 60, "fitness": 0.16956590737195326, "feedback": "The algorithm ImprovedBirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.3035675702032722, 0.3434408594764251, 0.29591341378222147, 0.3477873840495025, 0.33748561686325695, 0.36101378510362025, 0.32853690396288104, 0.2789288913360277, 0.3512892504131795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03147286600545118, 0.010427678280496955, 0.08133510054873438, 0.08893557180635214, 0.08635215490974224, 0.0825629520252178, 0.09789574571618576, 0.07399917870032136, 0.08956880995989636, 0.06522084926925709, 0.0857736864028491, 0.06520336331334786, 0.08637255532366361, 0.04334772468189274, 0.06274113063555198, 0.05684870117673968, 0.03868251020162783, 0.06695346290345172, 0.07335873990584207, 0.058919126312899195, 0.9891348586826693, 0.9797633050878007, 0.9918321462954967, 0.9727804394758648, 0.9873001115777794, 0.9823887648306386, 0.961953089079179, 0.9926716906494745, 0.9783897783969028, 0.21685725462886962, 0.16479096569405105, 0.16735103123466455, 0.17621985012657115, 0.14243785352079152, 0.17927877405125803, 0.17583704739732253, 0.17793435931974055, 0.21444313051119224, 0.1834091386873029, 0.1843763587565287, 0.18143932472506108, 0.267324628522679, 0.18773047916758756, 0.17557684535408713, 0.194973340449918, 0.19051101657710023, 0.1918378902447856, 0.05615644628776151, 0.11290893228212806, 0.09101657769637406, 0.09019394046383733, 0.11706470388342516, 0.12178517392343224, 0.10641244597711774, 0.11353595935855942, 0.10464758858018408, 0.13768177331612752, 0.11882391771903911, 0.07135995966601094, 0.16090182764578187, 0.10625378850279066, 0.09426220668900331, 0.12278946198882879, 0.03531235986259307, 0.12823624341462236, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08658046518850915, 0.03722791455605112, 0.0982702403703053, 0.03591915321546535, 0.008525015885475273, 0.0008720173819816157, 0.07109325117451426, 0.030652881128265808, 0.028121158739547902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05767998254573481, 0.031128411399352074, 0.06638807355813514, 0.06030933092794544, 0.037101772016283174, 0.07462961223932818, 0.03720178614522318, 0.03688860807318306, 0.053830220019997266, 0.3043120139215386, 0.3123535650977912, 0.31077422661148224, 0.30299858033259, 0.3125991801821275, 0.3040954650322615, 0.2738175385782904, 0.3065367349692847, 0.2868386575609777, 0.13762846411728513, 0.12441507938223895, 0.12502748578376288, 0.09028757714530533, 0.0929868803435484, 0.05591955068546561, 0.06791154661751897, 0.0801015312710257, 0.07673989548854276, 0.20740187906003782, 0.1467958925554711, 0.1431172051448557, 0.1505914822220732, 0.21058092562903863, 0.13759683288160063, 0.15259441980241428, 0.1683635943362971, 0.1282864526856845, 0.21412587792426108, 0.24655608063754242, 0.17254850021235746, 0.18466921610651366, 0.2246512523762475, 0.18150621773529874, 0.16544040494420098, 0.21662617723783906, 0.18854767266798866, 0.1436749598582444, 0.16682986345547857, 0.17269524674246806, 0.14493286759494928, 0.1623875802376269, 0.14486389266537558, 0.15176314344000252, 0.17949757695413482, 0.1156278281403933, 0.16942882359947486, 0.15281759110456983, 0.17978963979273088, 0.17729645258297932, 0.16702346607686958, 0.1743699400277008, 0.19008215843556764, 0.19247291216094264, 0.1562635963394945, 0.23019148303849013, 0.19863038971376057, 0.171315077719573, 0.21317246230074316, 0.18497439019574224, 0.17134997079958025, 0.19348483989632703, 0.24360627042303518, 0.20933837828515955, 0.4059856189140637, 0.17244547318891434, 0.1517069708026112, 0.33841891227191856, 0.18357097561120606, 0.18432235934294916, 0.12072374695103483, 0.1650768384351351, 0.147397485080363, 0.332949053149325, 0.1986848453859974, 0.21546486437282464, 0.18956898550352774, 0.16215128517535993, 0.18857793433866998, 0.10304192058379691, 0.2890139075758711, 0.11049772474900965, 0.1580447704770226, 0.16328332411322988, 0.17749582456497648, 0.1693886378873002, 0.1695555516700551, 0.1704770885642789, 0.18492427694974933, 0.16983227372265686, 0.1666236399411466, 0.06580226867620043, 0.06211661888713549, 0.06351073667411455, 0.07486530186900531, 0.06596523452026681, 0.07774211596647784, 0.07883197964237021, 0.06486297956376075, 0.07334735021926242]}, "mutation_prompt": null}
{"id": "516fb344-de8a-4b68-b658-92ce216fcff2", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  \n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        with ThreadPoolExecutor() as executor:\n            futures = []\n            for itr in range(self.budget):\n                for i in range(self.num_birds):\n                    futures.append(executor.submit(fitness, population[i]))\n                fitness_results = [f.result() for f in futures]\n\n                for i in range(self.num_birds):\n                    velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                    population[i] += velocity[i]\n                    if fitness_results[i] < fitness(personal_best_pos[i]):\n                        personal_best_pos[i] = population[i]\n                    if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                        global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Implementing a parallel evaluation strategy to speed up fitness function evaluations.", "configspace": "", "generation": 61, "fitness": 0.0723343180158246, "feedback": "The algorithm BirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.07.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.16059220284151166, 0.11953759972830136, 0.19136392379821088, 0.10641079728524294, 0.09234150529578367, 0.13824601573535567, 0.13023900138790745, 0.12488692112653621, 0.09658453564828018, 0.0007000000000000339, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02431157289398056, 0.04537142089723545, 0.0178416623739045, 0.033390488664328366, 0.04271739174020417, 0.036595848656812646, 0.04335386197571389, 0.028935336396785027, 0.06179283873007768, 0.01844724786654528, 0.03916028345446121, 0.005684160661863835, 0.051513953851816785, 0.01977715620124998, 0.0031173691112779123, 0.012863220879766546, 0.01096417979977271, 9.999999999998899e-05, 0.34974294246599824, 0.05113974360849405, 0.12118236325602394, 0.07420279115038453, 0.08603049114960537, 0.07355669852754199, 0.09436812957527185, 0.08417892130814286, 0.10267667093298893, 0.04829678210750643, 0.014654250450208406, 0.040026061547865144, 0.0769936413710115, 0.040202051710531816, 0.032340089662075466, 9.999999999998899e-05, 0.02627894346042159, 9.999999999998899e-05, 0.14486677411670867, 0.06505258122430291, 0.05370734593483861, 0.07639857160285368, 0.0630514572758899, 0.019023262885266345, 0.08939540512549482, 0.11788848736016899, 0.04883910223047838, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06253239725142612, 0.019413513718043007, 0.05864012405318353, 0.05824465299025838, 9.999999999998899e-05, 9.999999999998899e-05, 0.13446250410618088, 0.04095150206048215, 0.01734547998448166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037826337246429365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2024239212056187, 0.15650584975776383, 0.18860125121260096, 0.15197727674162942, 0.12781399040672914, 0.11319664299735799, 0.16027251873257808, 0.20941951488061106, 0.18096656864453786, 0.013935709333294688, 0.019130610425240446, 9.999999999998899e-05, 0.06964473261636972, 0.031248181697428823, 0.057135818416932715, 0.024134046898832473, 0.03717556095384911, 0.06157178696779442, 0.12715419138215234, 0.1405822971227053, 0.09765157957201298, 0.13075716048697816, 0.15339663782776136, 0.10968113921690092, 0.12136577835934803, 0.0987645593704849, 0.16989391182603997, 0.1358240983461726, 0.15578024129499168, 0.11897338193782703, 0.14852915711052062, 0.14424329996003837, 0.14458343698605436, 0.13607216881344142, 0.20923505794387898, 0.11421870736278528, 0.0767610250822256, 0.07006341383938564, 0.09875355779835149, 0.1304323572108187, 0.10985317413630491, 0.08785644002659132, 0.07515888389513325, 0.14611927479871178, 0.057459586299554055, 0.16385044059743814, 0.15633262811090864, 0.17456893148363783, 0.17565817753841662, 0.1458079750508845, 0.17325616746931105, 0.15939938341527504, 0.1498858533615759, 0.16023431733021476, 0.010906773296383454, 0.12684769114258965, 0.16034883101059472, 0.12831532209621377, 0.15144320799259514, 0.14386420438556602, 0.1228729091839299, 0.1486889531740615, 9.999999999998899e-05, 0.1106312893925393, 0.14084690369829056, 0.1083112726109342, 0.2136302650724835, 0.15440512255434424, 0.16072423748079256, 0.10500317340729848, 0.11343195582349874, 0.10479493221960978, 0.08435529560933797, 0.07666246844544966, 0.05000336474544442, 0.07552506693738892, 0.10506648224828807, 0.12711142563486433, 0.09594639364797419, 0.11652909432572611, 0.06763546598186754, 0.1540641356732826, 0.16647170097062391, 0.18355388909403647, 0.16364507570918518, 0.1768857901715314, 0.1717058687953188, 0.17105754508663507, 0.1762168817198897, 0.1642888290022263, 0.052966624226869485, 0.042534483327905215, 0.054566055045888406, 0.05557566236444256, 0.06279737988931011, 0.03838385994620641, 0.06234779045856609, 0.03326456429738078, 0.06456521433504714]}, "mutation_prompt": null}
{"id": "4004f10e-b6c6-452c-bfcb-ab2e007d921f", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "dc21d951-2b3c-4e9f-993e-9800e05c14e1", "solution": "class BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5, adaptive_acceleration=True):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.adaptive_acceleration = adaptive_acceleration\n\n    def __call__(self, func):\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)\n            if self.adaptive_acceleration:\n                c1 = self.c1 * (1.0 - iteration / self.budget)\n                c2 = self.c2 * (1.0 - iteration / self.budget)\n            else:\n                c1, c2 = self.c1, self.c2\n            return w * velocity + c1 * r1 * (personal_best_pos - position) + c2 * r2 * (global_best_pos - position)", "name": "BirdFlockOptimization", "description": "Introducing adaptive acceleration coefficients for updating velocity to accelerate convergence speed.", "configspace": "", "generation": 63, "fitness": 0.0, "feedback": "The algorithm BirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "ddd140d8-ca12-4916-be37-f4844dec2a15", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "5a452d50-f51a-4e0c-aaa9-a5c35aca4a48", "solution": "class ParallelBirdFlockOptimization(BirdFlockOptimization):\n    def __call__(self, func):\n        def update_population(positions, velocities, personal_best_positions, global_best_position, iteration):\n            new_positions = positions + velocities\n            for i in range(self.num_birds):\n                if fitness(new_positions[i]) < fitness(personal_best_positions[i]):\n                    personal_best_positions[i] = new_positions[i]\n                if fitness(personal_best_positions[i]) < fitness(global_best_position):\n                    global_best_position = personal_best_positions[i]\n            return new_positions, global_best_position\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            new_positions, global_best_pos = update_population(population, velocity, personal_best_pos, global_best_pos, itr)\n            population = new_positions\n\n        return global_best_pos", "name": "ParallelBirdFlockOptimization", "description": "Implementing a parallelized version of the BirdFlockOptimization algorithm by updating multiple bird positions simultaneously.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {}, "mutation_prompt": null}
{"id": "3c50269d-e898-4fad-aa31-fd625f047379", "solution": "import numpy as np\n\nclass ImprovedBirdFlockOptimization(BirdFlockOptimization):\n    def __call__(self, func):\n        def update_velocity_multi_strategy(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            strategy = np.random.randint(3)  # Randomly select update strategy\n            if strategy == 0:\n                return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n            elif strategy == 1:\n                return w * velocity + self.c1 * r1 * (personal_best_pos - position)\n            else:\n                return w * velocity + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity_multi_strategy(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a multi-strategy adaptation where each bird follows a different update rule based on a random selection for faster convergence.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {}, "mutation_prompt": null}
{"id": "64e4301e-3952-48a4-a2bb-cca25d643dc0", "solution": "class ImprovedBirdFlockOptimization(BirdFlockOptimization):\n    def __call__(self, func):\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - np.clip(fitness(global_best_pos) - fitness(personal_best_pos), 0, 1))  # Adaptive inertia weight adjustment\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        return super().__call__(func)", "name": "ImprovedBirdFlockOptimization", "description": "Introducing adaptive inertia weight adjustment based on individual bird performance to accelerate convergence.", "configspace": "", "generation": 67, "fitness": 0.0, "feedback": "The algorithm ImprovedBirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "c5ba6fd6-eeee-40fb-bf0a-6a0e260c236e", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "d2a6e975-b940-4354-8fd0-e2509fb8fe64", "solution": "class BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.avg_fitness = 0.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n            self.avg_fitness = np.mean([fitness(ind) for ind in personal_best_pos])\n            if self.avg_fitness < 0.5:  # Adapt population size\n                self.num_birds += 5\n                population = np.vstack((population, initialize_population()[:5]))\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Implementing a dynamic population size adaptation strategy to improve convergence speed.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {}, "mutation_prompt": null}
{"id": "3a235213-0208-4bd9-8fb6-ccaf5edea5b0", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "eb91cd95-fea4-42de-99bd-63ea8537665a", "solution": "class BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        def mutate_position(position):\n            return position + np.random.normal(0, self.mutation_rate, size=position.shape)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                population[i] = mutate_position(population[i])  # Introducing mutation\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a mutation step to explore new solutions and potentially speed up convergence by adding diversity to the search process.", "configspace": "", "generation": 71, "fitness": 0.19457480004772054, "feedback": "The algorithm BirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.4446856450153508, 0.3938296563432694, 0.4313284533903782, 0.39014921417439263, 0.408412551065808, 0.39686127040370633, 0.42972993271995186, 0.3954449353024698, 0.4086404365951395, 0.04437082328002162, 9.999999999998899e-05, 0.0160478602719748, 0.0011194763430688592, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10084716998074239, 0.09002843001871985, 0.038589259286038735, 0.06498999557551777, 0.11175324424135558, 0.10404793348232089, 0.07191665640694778, 0.06204660836641118, 0.0944981832076901, 0.05834373813678306, 0.08120118680573762, 0.05899902679838909, 0.06653021860096797, 0.06275018054721093, 0.042924788174385275, 0.07462111348365885, 0.0946775360762323, 0.05040886454995075, 0.9722324687127776, 0.972566194969961, 0.9852830338855765, 0.9573877993715425, 0.9696547241407736, 0.8697929508560608, 0.9869897145334544, 0.9687219291823387, 0.9837944619180653, 0.26777313588570595, 0.2577363754068428, 0.26587562443602564, 0.24703845025273796, 0.27844008635404394, 0.28698834582489285, 0.238441996588442, 0.2575848157742052, 0.2605874558742246, 0.6231777825833711, 0.11155178923722286, 0.2816072445179988, 0.33414562879331566, 0.22062685056665654, 0.2579408957585576, 0.18552155287104466, 0.17601846557170397, 0.13731062436678554, 0.12632143930766415, 0.13511144040031264, 0.1309566447170848, 0.1532842454842237, 0.1500419681108126, 0.12128825826033318, 0.12688305218416585, 0.12445547956226055, 0.16122270437121045, 0.15748759879183394, 0.14671314320647266, 0.12421613974823853, 0.14643770416600166, 0.10582985850644222, 0.12963371447579686, 0.1970356690056717, 0.15087618512684509, 0.15277419311485652, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029435144806951863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07451343696229162, 0.025076578378882775, 0.06081293962994516, 0.07343094870618827, 9.999999999998899e-05, 0.00022890723531943102, 0.09311653903342199, 0.08277849801757298, 0.04358248054223479, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07156141844477404, 0.08666782247167415, 0.0905625333428598, 0.10350226713599664, 0.059739493088522444, 0.07587707827659829, 0.07699964944920812, 0.09529420581312098, 0.0649827991898565, 0.38161183392058695, 0.38341722060462424, 0.39223477954565944, 0.35993979295299483, 0.3782583691343483, 0.37752605051820476, 0.4047116156164656, 0.39742670838164296, 0.3947660383194074, 0.047027032015901415, 0.10939253073173005, 0.05941818535152743, 0.11316395514293964, 0.06965567864174904, 0.10367003286140519, 0.10760564297024744, 0.09107068265586382, 0.0807928060862172, 0.2260937445721165, 0.2092012927705833, 0.2218739109915917, 0.27622423612479463, 0.2530529201286753, 0.17269602851042032, 0.24840753131529847, 0.14012325298166728, 0.2357877913521199, 0.2115130313236201, 0.2744364595950042, 0.13081263947115718, 0.22172968459516806, 0.22698281235231577, 0.26337789923363275, 0.20945610552808025, 0.27403282467914336, 0.1171975948925783, 0.10796713052167306, 0.19878528327693612, 0.1154602917638784, 0.2078718589899209, 0.19075857322477563, 0.12476203820205845, 0.18057521651392672, 0.2276158180956963, 0.04996084430872383, 0.18470922099552234, 0.20422235231109043, 0.14974099726823664, 0.17986459256328002, 0.19622135388235495, 0.18597452804222658, 0.20136335541761718, 0.18973913367282125, 0.18150358762682917, 0.17798142675413997, 0.17958875860916945, 0.20992843186283594, 0.20318364005315026, 0.17650868906810557, 0.1784141042972891, 0.17715238510566234, 0.19011481651275197, 0.16690459754717812, 0.6172885751784905, 0.1852425656292963, 0.1525624063200055, 0.17265870490101498, 0.20027427136102538, 0.19887080862283635, 0.12121307478160581, 0.16840378593877936, 0.16631746545573456, 0.46362690692996233, 0.20630745319070454, 0.4649540112647764, 0.20508385908617688, 0.16866380497267996, 0.20620698679631666, 0.1046909431068036, 0.41217722576128124, 0.5134167790830011, 0.17416631645627645, 0.165268640868245, 0.18548929415142634, 0.17759870143570622, 0.1658036707591808, 0.17930031718539252, 0.17700651307842385, 0.17259553892310964, 0.1552904276360847, 0.09113027540990792, 0.06426346560156504, 0.06877112584619449, 0.07108355885692486, 0.07477892756010018, 0.08205460626970107, 0.08450000380850764, 0.05846709656946425, 0.08184162353528968]}, "mutation_prompt": null}
{"id": "7d8c3bae-23a2-458c-8b3b-3077b8792f6c", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "fa90795c-06ca-4854-99e6-a6207b6f8d01", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "07ece71b-0469-4d35-a629-0e84f2e1856d", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "d613b0c1-ff5b-4bcd-bb1c-9e7574e0761c", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "c708d882-91d8-4426-8764-5a0635d92ea7", "solution": "import numpy as np\n\nclass BirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            return w * velocity + self.c1 * r1 * (personal_best_pos - position) + self.c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "BirdFlockOptimization", "description": "Introducing a dynamic inertia weight that decreases over time to enhance convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8363212977135439, 0.8424257636966117, 0.8428119228580893, 0.8317261596153973, 0.6935598185152483, 0.7647156243528352, 0.81472512442297, 0.8023931426859299, 0.7940313013694174, 0.12572358973518238, 0.05390936065157981, 9.999999999998899e-05, 0.10651625554083399, 0.05478878280595201, 9.999999999998899e-05, 0.10196692245641481, 9.999999999998899e-05, 9.999999999998899e-05, 0.10986246409446654, 0.0781615787585539, 0.04555273099385737, 0.13645784839577368, 0.07841881199934853, 0.07545565978293456, 0.0784528857856247, 0.05654120636461668, 0.07866045123511445, 0.06746922008249423, 0.05337638391828181, 0.07864135621077661, 0.07407029037889801, 0.049413388587951856, 0.045122572967641994, 0.05060945327527111, 0.058236664537205995, 0.04414122583213975, 0.9784662100503132, 0.980370097142878, 0.9850169434768898, 0.08723416777399873, 0.9870576401738712, 0.9662842816794699, 0.9792218675377549, 0.9881108582635952, 0.9753953852718072, 0.12875885809470533, 0.05666468627650045, 0.0556033709007695, 0.18054294496023215, 0.2977258798693345, 0.12260048456551575, 0.1355073192443138, 0.1975405301035158, 0.13937482925860678, 0.21675371665124443, 0.1795985455990653, 0.12614441733976167, 0.3790553509374497, 0.12939824001919809, 0.09646664662177462, 0.21180059185037015, 0.1375506016029996, 0.14848414487457562, 0.12425653587100438, 0.19607009642209883, 0.11811034967639666, 0.13836955275616547, 0.17364931422670737, 0.09587584201104915, 0.233691457292869, 0.19933636917321318, 0.1530325266038739, 0.3676717529315948, 0.14711052398824342, 0.12391376688864164, 0.20447653094976526, 0.3068870425182101, 0.1324791429103539, 0.12992577110045345, 0.18010106623047484, 0.13838143451090235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212118588433069, 0.12035389557070852, 9.999999999998899e-05, 9.999999999998899e-05, 0.06399534525109196, 0.07387062262966215, 0.12720586320800054, 0.05851655437264669, 0.09206285334235453, 0.095436535493303, 0.03597546310519084, 0.020069912872820894, 0.10376108647606774, 0.07535518737033797, 0.04610958169401258, 0.151219583569415, 0.3566561171635564, 0.1760430218694331, 0.12198470718230381, 0.056772392194353594, 0.11806178556976299, 0.3571750902208545, 0.11530415695288065, 0.019255095707869763, 0.0600560590104684, 0.13971261768911025, 0.16303361557082685, 0.09312231393041259, 0.027464125728232314, 0.04409578946798043, 0.17678291347049435, 0.07644851947424047, 0.08557404351571352, 0.3880660953887983, 0.47886659616812866, 0.613121870837015, 0.6049709147429321, 0.6466734461972592, 0.572659366216462, 0.4925747140635096, 0.41929429663946594, 0.6829671612676498, 0.04167257273408309, 0.13044097341722205, 0.06827867987312453, 0.1531675417546905, 0.0656158069945284, 0.08666181972314402, 0.0857774143630391, 0.12932214604796044, 0.08435021942436738, 0.14404012356616025, 0.26766872213917325, 0.11825836583517846, 0.2713650812506181, 0.15809333621844812, 0.14397114187353077, 0.1588904831429513, 0.16792397429394135, 0.1333004063588854, 0.23315614738865875, 0.17015544430914598, 0.26326593158415557, 0.15499411278403985, 0.19223036587480957, 0.1707512140414872, 0.15853871304915357, 0.35124078869385245, 0.1273483561722054, 0.13237602603957532, 0.1413946569636595, 0.13494018014693354, 0.18084886628745112, 0.17222145073503192, 0.16954510642252896, 0.19984820145780746, 0.19361867994525384, 0.07970496648599801, 0.18876843901984375, 0.24728051957520703, 0.2311167096394816, 0.20038242543676943, 0.2301323700465676, 0.22866809449424674, 0.17593302916708453, 0.19936286477294307, 0.16493604460451483, 0.18423178810337992, 0.19003125111003183, 0.19503299357646475, 0.17947301126322435, 0.17329623445554465, 0.17872940365119216, 0.16986988451227392, 0.1625191841703406, 0.17321918065824737, 0.8302035512125506, 0.18319401656677436, 0.1514430066993384, 0.17366727257466097, 0.19995570022599396, 0.1997922238856168, 0.12255844066699484, 0.17017294178184017, 0.16461814802115027, 0.8519773741417247, 0.2106394976969922, 0.6588540797981584, 0.10343689790162802, 0.16785157383033789, 0.20771515503825433, 0.10530499971133866, 0.3254946925211739, 0.5506028408502327, 0.20819616630470317, 0.17170179999844914, 0.18731495823935962, 0.18130564193801468, 0.17438944166135084, 0.18653837129479955, 0.18202775524810588, 0.21092512455626988, 0.19243714579366278, 0.10891881840153006, 0.04387998422589501, 0.07781723437783239, 0.08452367759533752, 0.06956572004137673, 0.12054169523742897, 0.08914996154924815, 0.06096453475438268, 0.07975290635747001]}, "mutation_prompt": null}
{"id": "965003c1-facc-49c4-84ed-c97db7d8852c", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass FastBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(position, velocity, global_best_pos, personal_best_pos, w, c1, c2):\n            r1, r2 = np.random.rand(), np.random.rand()\n            return w * velocity + c1 * r1 * (personal_best_pos - position) + c2 * r2 * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])\n\n        for itr in range(self.budget):\n            updated_velocities = Parallel(n_jobs=-1)(delayed(update_velocity)(population[i], velocity[i], global_best_pos, personal_best_pos[i], self.w, self.c1, self.c2) for i in range(self.num_birds))\n            velocity = np.array(updated_velocities)\n            population += velocity\n            personal_best_pos = np.where(fitness(population) < fitness(personal_best_pos), population, personal_best_pos)\n            global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        return global_best_pos", "name": "FastBirdFlockOptimization", "description": "Implement parallel processing for updating velocities and positions to accelerate convergence speed.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        for itr in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        for itr in range(self.budget):\\n'))", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {}, "mutation_prompt": null}
{"id": "498caad6-f975-4a78-a136-7d9230e75a75", "solution": "import numpy as np\n\nclass ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Employ a chaotic map to enhance exploration and exploitation balance in updating the population positions.", "configspace": "", "generation": 78, "fitness": 0.2591693161233102, "feedback": "The algorithm ImprovedBirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "0c302e8c-e8a2-4a7e-8679-91e3272776fd", "metadata": {"aucs": [0.8333755997880579, 0.8174057620533042, 0.8456887396250907, 0.8240574353574921, 0.823326232969187, 0.8293602894294068, 0.8185852776512395, 0.822974706282503, 0.8156962260769723, 0.5371530578905288, 0.49297582779653415, 0.5981199140175334, 0.5503708824212818, 0.560349799625173, 0.5141876401080396, 0.5125333012362161, 0.4802063939768011, 0.5500854970741905, 0.06141809422004374, 0.11020475386740003, 0.11184757080923535, 0.0791215303192514, 0.06818569980781797, 0.12701204704624613, 0.12721481562065706, 0.1280399104181441, 0.07388684259557798, 0.09466899813185314, 0.042273779635508935, 0.03092813238506109, 0.11503091244625485, 0.07011913689828886, 0.07634821705093531, 0.062388994651021656, 0.07038500199899733, 0.09252329406484805, 0.9722636621721162, 0.9713537263328322, 0.9813731929412508, 0.956434293266882, 0.9641673289078363, 0.9520739633114604, 0.9739581371392657, 0.9692669732746877, 0.9520127623213928, 0.5126861730776429, 0.18544094878626238, 0.45461992911096727, 0.5619309490485318, 0.3425554986780094, 0.22587888755030228, 0.42850638070113223, 0.442107377025035, 0.5331500801829296, 0.3639227398818581, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.20965799496811743, 0.17097997055348257, 0.2205877140799818, 0.14887761131891963, 0.17239635928083008, 0.12685970157189674, 0.17413106900355035, 0.10278866271038167, 0.15307780773231405, 0.15039016893364898, 0.11314607508628616, 0.16467843358947554, 0.1722995550869446, 0.12613220237335232, 0.22143518959991404, 0.2377431080181568, 0.12374233247154875, 0.20872955719069364, 0.12295831756363584, 0.20112047653530485, 0.24445959816870355, 0.18496196906329032, 0.2107660418314421, 9.999999999998899e-05, 0.01531603563001116, 0.11107468684591126, 0.016969262663524942, 9.999999999998899e-05, 0.005070148353471637, 9.999999999998899e-05, 9.999999999998899e-05, 0.007151894113833435, 0.05496289646631791, 0.044133385129432434, 0.0737919132780227, 0.06305856032700918, 9.999999999998899e-05, 0.002379250409118683, 0.11141665279181923, 0.024556791782053167, 0.05131161351738123, 0.15732843072372105, 0.016051805157612065, 0.1917379393034584, 0.0972947377820228, 0.17440272523263922, 0.05647888275915647, 0.20320596785940825, 0.18219494182472984, 0.03651915785429849, 0.1606323865045668, 0.13063754824221674, 0.15706549533563685, 0.18982013539450648, 0.2495008052940907, 0.06709967794260996, 0.08924820822745982, 0.09140621403410054, 0.09485364902518723, 0.5176335987300675, 0.5146510819169985, 0.4904759277603943, 0.5193382430235396, 0.4720384139738887, 0.5420993974004042, 0.5273123854120125, 0.5026576382552885, 0.48955131048283174, 0.044242293415927225, 0.03949575660771554, 0.10151093296788605, 0.13423318339401435, 0.08723017766041319, 0.09755359844550948, 0.07762403407398089, 0.10509331018865464, 0.09443859502365282, 0.28263733232126564, 0.2502898175701518, 0.17232862292264473, 0.30358731522539695, 0.2570178077275982, 0.26463099454712946, 0.18488297822436162, 0.20241067916348288, 0.21828025838335463, 0.13600661725100494, 0.2270197076099697, 0.2405076655795354, 0.3185839615128281, 0.29619561436686037, 0.3768298848921705, 0.16034782631352573, 0.33123644445571176, 0.14184281394117915, 0.13770331809937486, 0.28102924571709686, 0.14147561980440027, 0.2344271698034257, 0.29631512111445313, 0.29578127658036035, 0.17313247968797474, 0.2746965241185241, 0.0849777930481328, 0.19618641949941662, 0.258945699648903, 0.17166378045491548, 0.23607598642277905, 0.19279208702293726, 0.17555698738360448, 0.19700793157902963, 0.18138174236302107, 0.218577809757171, 0.19648181273017196, 0.17574461249137618, 0.16974390360655067, 0.20967293756793037, 0.17081311271983068, 0.19818362670683898, 0.17566422625926392, 0.19447279457072675, 0.17155764449328248, 0.17893222505741213, 0.17679151323392306, 0.15219735010409297, 0.17314424402342554, 0.19957284424930855, 0.2012258457284275, 0.12225102447711811, 0.1700354803781412, 0.166801179278254, 0.0822436364468816, 0.46228251387265296, 0.6034138506954627, 0.20625387524283667, 0.16749204082585, 0.20329780140974207, 0.10479226062973668, 0.7458215468141268, 0.4292756506298866, 0.1727913556273989, 0.17694705150296974, 0.18099266931170022, 0.16405417577251113, 0.16969160125355087, 0.19183633795471333, 0.2201893771723309, 0.18252758446388528, 0.202214656210441, 0.06994637900385792, 0.10349421435558392, 0.08107358446091151, 0.08698928703715136, 0.08419956923786032, 0.07014798586152371, 0.0755960134491328, 0.10342892986505325, 0.06615253319955572]}, "mutation_prompt": null}
{"id": "39a13367-457d-4b82-9984-d9346dd3557e", "solution": "import numpy as np\n\nclass ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget)  # Dynamic inertia weight\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Employ a chaotic map to enhance exploration and exploitation balance in updating the population positions.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "498caad6-f975-4a78-a136-7d9230e75a75", "metadata": {"aucs": [0.8333755997880579, 0.8174057620533042, 0.8456887396250907, 0.8240574353574921, 0.823326232969187, 0.8293602894294068, 0.8185852776512395, 0.822974706282503, 0.8156962260769723, 0.5371530578905288, 0.49297582779653415, 0.5981199140175334, 0.5503708824212818, 0.560349799625173, 0.5141876401080396, 0.5125333012362161, 0.4802063939768011, 0.5500854970741905, 0.06141809422004374, 0.11020475386740003, 0.11184757080923535, 0.0791215303192514, 0.06818569980781797, 0.12701204704624613, 0.12721481562065706, 0.1280399104181441, 0.07388684259557798, 0.09466899813185314, 0.042273779635508935, 0.03092813238506109, 0.11503091244625485, 0.07011913689828886, 0.07634821705093531, 0.062388994651021656, 0.07038500199899733, 0.09252329406484805, 0.9722636621721162, 0.9713537263328322, 0.9813731929412508, 0.956434293266882, 0.9641673289078363, 0.9520739633114604, 0.9739581371392657, 0.9692669732746877, 0.9520127623213928, 0.5126861730776429, 0.18544094878626238, 0.45461992911096727, 0.5619309490485318, 0.3425554986780094, 0.22587888755030228, 0.42850638070113223, 0.442107377025035, 0.5331500801829296, 0.3639227398818581, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.20965799496811743, 0.17097997055348257, 0.2205877140799818, 0.14887761131891963, 0.17239635928083008, 0.12685970157189674, 0.17413106900355035, 0.10278866271038167, 0.15307780773231405, 0.15039016893364898, 0.11314607508628616, 0.16467843358947554, 0.1722995550869446, 0.12613220237335232, 0.22143518959991404, 0.2377431080181568, 0.12374233247154875, 0.20872955719069364, 0.12295831756363584, 0.20112047653530485, 0.24445959816870355, 0.18496196906329032, 0.2107660418314421, 9.999999999998899e-05, 0.01531603563001116, 0.11107468684591126, 0.016969262663524942, 9.999999999998899e-05, 0.005070148353471637, 9.999999999998899e-05, 9.999999999998899e-05, 0.007151894113833435, 0.05496289646631791, 0.044133385129432434, 0.0737919132780227, 0.06305856032700918, 9.999999999998899e-05, 0.002379250409118683, 0.11141665279181923, 0.024556791782053167, 0.05131161351738123, 0.15732843072372105, 0.016051805157612065, 0.1917379393034584, 0.0972947377820228, 0.17440272523263922, 0.05647888275915647, 0.20320596785940825, 0.18219494182472984, 0.03651915785429849, 0.1606323865045668, 0.13063754824221674, 0.15706549533563685, 0.18982013539450648, 0.2495008052940907, 0.06709967794260996, 0.08924820822745982, 0.09140621403410054, 0.09485364902518723, 0.5176335987300675, 0.5146510819169985, 0.4904759277603943, 0.5193382430235396, 0.4720384139738887, 0.5420993974004042, 0.5273123854120125, 0.5026576382552885, 0.48955131048283174, 0.044242293415927225, 0.03949575660771554, 0.10151093296788605, 0.13423318339401435, 0.08723017766041319, 0.09755359844550948, 0.07762403407398089, 0.10509331018865464, 0.09443859502365282, 0.28263733232126564, 0.2502898175701518, 0.17232862292264473, 0.30358731522539695, 0.2570178077275982, 0.26463099454712946, 0.18488297822436162, 0.20241067916348288, 0.21828025838335463, 0.13600661725100494, 0.2270197076099697, 0.2405076655795354, 0.3185839615128281, 0.29619561436686037, 0.3768298848921705, 0.16034782631352573, 0.33123644445571176, 0.14184281394117915, 0.13770331809937486, 0.28102924571709686, 0.14147561980440027, 0.2344271698034257, 0.29631512111445313, 0.29578127658036035, 0.17313247968797474, 0.2746965241185241, 0.0849777930481328, 0.19618641949941662, 0.258945699648903, 0.17166378045491548, 0.23607598642277905, 0.19279208702293726, 0.17555698738360448, 0.19700793157902963, 0.18138174236302107, 0.218577809757171, 0.19648181273017196, 0.17574461249137618, 0.16974390360655067, 0.20967293756793037, 0.17081311271983068, 0.19818362670683898, 0.17566422625926392, 0.19447279457072675, 0.17155764449328248, 0.17893222505741213, 0.17679151323392306, 0.15219735010409297, 0.17314424402342554, 0.19957284424930855, 0.2012258457284275, 0.12225102447711811, 0.1700354803781412, 0.166801179278254, 0.0822436364468816, 0.46228251387265296, 0.6034138506954627, 0.20625387524283667, 0.16749204082585, 0.20329780140974207, 0.10479226062973668, 0.7458215468141268, 0.4292756506298866, 0.1727913556273989, 0.17694705150296974, 0.18099266931170022, 0.16405417577251113, 0.16969160125355087, 0.19183633795471333, 0.2201893771723309, 0.18252758446388528, 0.202214656210441, 0.06994637900385792, 0.10349421435558392, 0.08107358446091151, 0.08698928703715136, 0.08419956923786032, 0.07014798586152371, 0.0755960134491328, 0.10342892986505325, 0.06615253319955572]}, "mutation_prompt": null}
{"id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 80, "fitness": 0.2594442796813616, "feedback": "The algorithm ImprovedBirdFlockOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "498caad6-f975-4a78-a136-7d9230e75a75", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "476dd941-4705-4b49-91c9-34751f5307af", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "3a7be96c-082b-4725-a77f-a4ba58c5db6b", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n        \n        def chaotic_de_step(population, velocity, personal_best_pos, global_best_pos, itr):\n            F, CR = 0.5 + 0.3 * np.random.rand(), 0.1 + 0.9 * np.random.rand()\n            new_population = np.copy(population)\n            for i in range(self.num_birds):\n                idxs = [idx for idx in range(self.num_birds) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = population[a] + F * (population[b] - population[c])\n                trial = np.where(np.random.uniform(0, 1, self.dim) < CR, mutant, population[i])\n                if fitness(trial) < fitness(new_population[i]):\n                    new_population[i] = trial\n            return new_population\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])\n\n        for itr in range(self.budget):\n            population = chaotic_de_step(population, velocity, personal_best_pos, global_best_pos, itr)\n            personal_best_pos = np.array([ind if fitness(ind) < fitness(personal_best_pos[i]) else personal_best_pos[i] for i, ind in enumerate(population)])\n            global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Employing a chaotic differential evolution strategy to enhance exploration-exploitation balance and speed up convergence.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 41, 9, '        for itr in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 41, 9, '        for itr in range(self.budget):\\n'))", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {}, "mutation_prompt": null}
{"id": "bd88ba02-1fd6-4831-b6af-2674986618b1", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "dc82e357-6894-4def-b92d-9ed77e894f2c", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "d6b301a4-1cb2-4958-bdb9-29b3dc1afdb2", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "2dc78924-9b6c-4fbf-8f7e-3cd6184b6f28", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "42314e27-daa7-4ad2-b427-5172c8cc9ca0", "solution": "def gradient_descent_step(position, gradient, lr=0.01):\n    return position - lr * gradient\n\nclass ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                gradient = np.gradient(func, population[i])\n                population[i] = gradient_descent_step(population[i], gradient)\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a gradient-based optimization step to enhance convergence speed.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 32, 9, '        for itr in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 32, 9, '        for itr in range(self.budget):\\n'))", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {}, "mutation_prompt": null}
{"id": "bb89c035-2147-49b4-a6b3-5e9253763de7", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "27be8700-0a56-4a94-af49-d77521c1d5f4", "solution": "from concurrent.futures import ThreadPoolExecutor\n\nclass ParallelBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])\n\n        with ThreadPoolExecutor() as executor:\n            for itr in range(self.budget):\n                futures = [executor.submit(update_velocity, velocity[i], population[i], global_best_pos, personal_best_pos[i], itr) for i in range(self.num_birds)]\n                for i, future in enumerate(futures):\n                    velocity[i] = future.result()\n                    population[i] += velocity[i]\n                    if fitness(population[i]) < fitness(personal_best_pos[i]):\n                        personal_best_pos[i] = population[i]\n                    if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                        global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ParallelBirdFlockOptimization", "description": "Implementing a parallel processing strategy for updating velocities to enhance convergence speed.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 31, 9, '        with ThreadPoolExecutor() as executor:\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 31, 9, '        with ThreadPoolExecutor() as executor:\\n'))", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {}, "mutation_prompt": null}
{"id": "d097a0ab-a68e-48a9-9726-c3900ccd0463", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "72625d85-f0f5-486d-b596-d23b465bc1cd", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "674b3986-87eb-4db0-9499-97e6cc319931", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "03c41c39-1f4e-4d30-971a-4039b2534a18", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "b82b1600-0dc7-4a41-99c5-d1e21d92d317", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "1d3ecda5-d018-4bc5-8578-291294c39a0d", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "b63f5798-9413-4403-a12b-0d11a766b678", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "d49c34a2-6001-4f84-927c-68a89dcaad20", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
{"id": "24f8a7c8-a56b-4a7a-817d-2896f2f576b5", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos)]\n\n        # Split the budget into 3 phases for multi-stage search\n        phase1, phase2, phase3 = int(0.3 * self.budget), int(0.4 * self.budget), int(0.3 * self.budget)\n\n        for itr in range(self.budget):\n            if itr < phase1:\n                exploration_factor = 0.1\n            elif itr < phase1 + phase2:\n                exploration_factor = 0.5\n            else:\n                exploration_factor = 1.0\n\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += exploration_factor * velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Introducing a multi-stage search mechanism by dividing the optimization budget into multiple phases to exploit fine-tuning and global exploration in sequence.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 27, 97, '        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos)]')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 27, 97, '        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos)]'))", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {}, "mutation_prompt": null}
{"id": "1af0d181-626c-402c-8733-962c5258de56", "solution": "class ImprovedBirdFlockOptimization:\n    def __init__(self, budget, dim, num_birds=20, w=0.5, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        def fitness(position):\n            return func(position)\n\n        def update_velocity(velocity, position, global_best_pos, personal_best_pos, iteration):\n            r1, r2 = np.random.rand(), np.random.rand()\n            w = self.w * (1.0 - iteration / self.budget) * (1.0 - 0.5 * iteration / self.budget)  # Dynamic inertia weight update\n            chaos_map = lambda x: 4 * x * (1 - x)  # Logistic chaotic map\n            chaotic_values = chaos_map(np.random.rand(self.dim))\n            return w * velocity + self.c1 * r1 * chaotic_values * (personal_best_pos - position) + self.c2 * r2 * chaotic_values * (global_best_pos - position)\n\n        population = initialize_population()\n        velocity = np.zeros((self.num_birds, self.dim))\n        personal_best_pos = population.copy()\n        global_best_pos = personal_best_pos[np.argmin([fitness(ind) for ind in personal_best_pos])]\n\n        for itr in range(self.budget):\n            for i in range(self.num_birds):\n                velocity[i] = update_velocity(velocity[i], population[i], global_best_pos, personal_best_pos[i], itr)\n                population[i] += velocity[i]\n                if fitness(population[i]) < fitness(personal_best_pos[i]):\n                    personal_best_pos[i] = population[i]\n                if fitness(personal_best_pos[i]) < fitness(global_best_pos):\n                    global_best_pos = personal_best_pos[i]\n\n        return global_best_pos", "name": "ImprovedBirdFlockOptimization", "description": "Implementing a dynamic learning rate adjustment to accelerate convergence speed.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "824b53b4-1c12-4611-a592-fa52f740f0ad", "metadata": {"aucs": [0.8372137661550372, 0.8219370786047827, 0.8447238617685604, 0.819350165000104, 0.8336755602063696, 0.8315102902131799, 0.8315738801951994, 0.8257687287733727, 0.8393252438693473, 0.5135877941919795, 0.37790097333881933, 0.5181328813590135, 0.5430651870419434, 0.5413239402526397, 0.468863514810559, 0.5356913689140814, 0.502900500794795, 0.5221338490841239, 0.06141767128020981, 0.11024488394801935, 0.11181627781214187, 0.09093723887829963, 0.07053906089074335, 0.12701645579226328, 0.12721050391787303, 0.1280424180974602, 0.073879478850021, 0.09452740268451565, 0.04223090197942869, 0.03550744369050429, 0.11504836954710063, 0.07010157787576388, 0.07432905173519722, 0.06036274930504093, 0.07038819142847241, 0.10158895052952899, 0.9722635915162292, 0.9713536244284183, 0.9813730459906789, 0.9564335939984063, 0.9641672075129294, 0.9520725531511304, 0.973957857595105, 0.9692669055434397, 0.9520030056448031, 0.5710902118602246, 0.2888386431352393, 0.4771876767109998, 0.5955035555071528, 0.4437815213965436, 0.3195418187472411, 0.4721155195432162, 0.38435245016524044, 0.4753300361700753, 0.3639229554099511, 0.16813036428360661, 0.13502239043466147, 0.1965984194921776, 0.2087875368126929, 0.17097997055348257, 0.22059760171024423, 0.14887761131891963, 0.17239554548541458, 0.12618899992898458, 0.1941440957814553, 0.10000143451327836, 0.15123257414747882, 0.17113139840789793, 0.09973596615190727, 0.17167568223282292, 0.19690484369457328, 0.12555343092961957, 0.2172965462459181, 0.2206146308884046, 0.1239413431309635, 0.2254979885356263, 0.12595388485048953, 0.2119295712131598, 0.23505237648202393, 0.184806400448846, 0.2105683323097408, 9.999999999998899e-05, 0.010932890148421581, 0.11085139157330637, 0.011258862351334553, 9.999999999998899e-05, 0.0024795846220581064, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605609386196627, 0.07501827726346577, 0.039343891177281876, 0.0705493745881336, 0.06215519692437321, 9.999999999998899e-05, 9.999999999998899e-05, 0.11934470543827536, 0.022047537893538305, 0.05215562974889676, 0.15924996512919476, 0.016058227122599078, 0.18939751909720293, 0.09796141955256987, 0.17314092730428654, 0.056200309770575774, 0.2632740758640212, 0.17147715432385324, 0.03641956668126245, 0.16026910111252668, 0.12886214842259958, 0.156863050297131, 0.19131545238800607, 0.2532781851205882, 0.06835824648534816, 0.08813701031942345, 0.09262058000995388, 0.09673628296376735, 0.5253663008843943, 0.48318513713597855, 0.5074813277852654, 0.5116101708128715, 0.47316876176345235, 0.521399854358281, 0.5248637255198884, 0.46837297991218063, 0.512990140657434, 0.04414349270662221, 0.039514000104391545, 0.10149256098558346, 0.1341466747198239, 0.08716133420045502, 0.097542235265065, 0.07785144611522432, 0.10511217782547988, 0.09446611878027456, 0.25944116104942916, 0.17574694258815127, 0.13436205941677604, 0.30428822106225206, 0.19731760598229586, 0.2892459071504879, 0.18712855214642443, 0.20904004786508157, 0.21959828254835356, 0.14054514726584588, 0.22607602821974238, 0.2211274768578252, 0.2957038310398482, 0.27709029888181946, 0.3967560274937947, 0.1595519117782338, 0.3816168395899395, 0.14214550453005248, 0.130596492467964, 0.23561307244928287, 0.14045195571065106, 0.22270964654764513, 0.23849893435029756, 0.32403199029212115, 0.1899895280121926, 0.25112386334150594, 0.08557894775069164, 0.22914100072397647, 0.1943910080364396, 0.16556524309254272, 0.2271465115014355, 0.17756244721493963, 0.18049636993972584, 0.21600865192311003, 0.18112070760308785, 0.1989003909486915, 0.19650259661294012, 0.17574335838723276, 0.1697429364851254, 0.20974272737121213, 0.1708424085351169, 0.19819204758461995, 0.1756518511874232, 0.19447437170693171, 0.17157066961581768, 0.17872255536560167, 0.17678093164059194, 0.15219795387974022, 0.17314448063453258, 0.19957235400457152, 0.20122561413438067, 0.1222511083036778, 0.1700355178641113, 0.1668002719306556, 0.08224352465545093, 0.40721967907168577, 0.5310287404903677, 0.2062548245652357, 0.1674929727193758, 0.2033004551261962, 0.1047922763333814, 0.7733106237576185, 0.5870307261175151, 0.21931074606071144, 0.1906893750167885, 0.17489188995305904, 0.17131978945497717, 0.23460837510276267, 0.186631893490404, 0.20138140063156484, 0.1838206219123979, 0.20239155928128594, 0.08310955349009963, 0.10454157759115423, 0.07599261134675994, 0.0835084687683455, 0.08384990609945875, 0.0701537837007209, 0.06753024251233597, 0.09420205475563492, 0.06613135263534298]}, "mutation_prompt": null}
