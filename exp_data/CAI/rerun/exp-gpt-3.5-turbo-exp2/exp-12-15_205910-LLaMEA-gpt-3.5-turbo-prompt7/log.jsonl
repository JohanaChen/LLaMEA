{"id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + np.random.uniform(-1, 1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Novel metaheuristic algorithm inspired by the foraging behavior of swarms of fire ants, where individuals communicate through pheromones to locate food sources efficiently.", "configspace": "", "generation": 0, "fitness": 0.17927960252287842, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3161205423982396, 0.34333131390647353, 0.3436508663772553, 0.3471049736194324, 0.3293216825181158, 0.331044362326788, 0.3090950843840752, 0.32635490090282615, 0.33461084924823736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08313799879231898, 0.0963429754533055, 0.08039205109378711, 0.10219251198464097, 0.11062253296451796, 0.09058858059497632, 0.11098613853813166, 0.09666776862544668, 0.09615330047225923, 0.07455146945460656, 0.10650705263381299, 0.08662046737151341, 0.09717428417515062, 0.08689859114874054, 0.07854438560906352, 0.07994517718757399, 0.05710437611411201, 0.08577726198226121, 0.9883293833361009, 0.9829742000165511, 0.9769335154177953, 0.9816375864083164, 0.9596129863113466, 0.9696200758603484, 0.9841101100845576, 0.9831135370496553, 0.9846557806019087, 0.21433793598328632, 0.2166817725182193, 0.20007994401317297, 0.19350768866748058, 0.2298143760999164, 0.20066050473834673, 0.23570451482370536, 0.206468050054327, 0.24826363195424128, 0.26032125128520556, 0.24460260543220114, 0.2690852804830395, 0.2631426660557945, 0.26603726604361977, 0.24897933887280665, 0.24171246786709621, 0.22382948273232461, 0.28592920806623967, 0.11021893576442521, 0.12477871063858825, 0.12658228900256874, 0.11765031342272358, 0.1532088839255884, 0.08837110403403892, 0.11197968061342056, 0.13587547624327767, 0.1398846076444784, 0.15084687442574596, 0.12175700723793648, 0.10450837022936865, 0.11316192653726687, 0.12460841945994816, 0.12072587101379195, 0.12327226256838253, 0.1500452389919874, 0.11573558693782782, 0.0003771481711335456, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032688788694600346, 9.999999999998899e-05, 9.999999999998899e-05, 0.013622271224642102, 9.999999999998899e-05, 0.00032009634198471026, 0.09215325085641601, 0.16157868760903582, 0.15685177039175946, 0.08456221434905287, 0.04965292092221585, 0.04741819058097352, 0.10997517429976977, 0.05307647016295103, 0.0844606885772442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04722758592023002, 0.06507565230748646, 0.03877120201043127, 0.043000348622454165, 0.05041254103803783, 0.04478569528322185, 0.06315783648785323, 0.05665965857827704, 0.05853623505245309, 0.3073875618171612, 0.3034863399935033, 0.3088903819164084, 0.34396306452750525, 0.3096196167818994, 0.3310372214241676, 0.3157593231623518, 0.31382865181920583, 0.30631009439529844, 0.09750184440362064, 0.07106924498667799, 0.10626374236090363, 0.08614895766324082, 0.103364609315298, 0.10023141872290708, 0.0847208962335888, 0.0945065870632994, 0.08540304280000177, 0.16550156382218906, 0.14408038784641397, 0.15211163017848905, 0.21951929351182609, 0.17093524989403452, 0.13528677697099434, 0.12792859941912815, 0.15480714021817643, 0.1635181896438831, 0.2278416510620055, 0.23389096714262336, 0.2190794693738003, 0.23410723432084624, 0.2438610606074597, 0.22494147066986847, 0.23330029159999044, 0.19397204770293186, 0.1989180140678527, 0.17763455731136912, 0.17033681006505286, 0.13080571144848385, 0.17720411551059279, 0.19457989089209282, 0.12727882459385653, 0.17559351582560134, 0.14346729837237449, 0.16442256115063725, 0.20234383422148872, 0.21469905988967808, 0.2016915934148772, 0.1891297168635827, 0.2370441742041115, 0.22317019429622664, 0.22639605591935097, 0.1997874478926207, 0.22712866755729566, 0.18361276230225831, 0.19563520799605405, 0.1693036714451277, 0.18623823197325784, 0.1805535326113542, 0.17790816962930966, 0.19213701271160422, 0.18131456876829477, 0.19408723509107195, 0.18059155235141355, 0.13355892939609582, 0.1043653520993495, 0.17211524755509722, 0.11147241361772375, 0.0613319880911386, 0.10844255226867294, 0.12281393473475222, 0.16818048298328936, 0.3782188354511419, 0.11232975914033538, 0.08293242218663088, 0.08193859527755032, 0.21086191360392237, 0.2076362911341425, 0.11212298673852006, 0.1693041253794001, 0.3532373626542735, 0.1936459825175707, 0.1765852346903659, 0.17958662755294752, 0.1778660686039648, 0.17861871639677884, 0.17852771061297912, 0.17435060554291126, 0.19693714549351593, 0.18593773979320638, 0.08648019897284498, 0.09409857686353629, 0.08035209333608673, 0.09705043737021912, 0.08502186146757373, 0.10520454643104882, 0.10681958833778427, 0.08434293958361327, 0.09347253031044034]}, "mutation_prompt": null}
{"id": "5345024a-f317-471c-a8d4-057de3d18a3e", "solution": "class FireAntOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 1.0\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + np.random.uniform(-step_size, step_size, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                step_size *= 0.95  # Decrease step size for exploitation\n            else:\n                step_size *= 1.02  # Increase step size for exploration\n        \n        return best_solution", "name": "FireAntOptimizationImproved", "description": "Employ a dynamic step size adaptation mechanism to adjust the search step based on the function landscape to enhance convergence speed.", "configspace": "", "generation": 1, "fitness": 0.12313437711182684, "feedback": "The algorithm FireAntOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.21145415554348435, 0.2767090430592275, 0.21458145703342535, 0.2709246249664633, 0.23902134622773852, 0.20799619827196125, 0.27010671043972356, 0.21836633938111605, 0.20991892612933216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03399431954607868, 0.03373354802791495, 0.02706994766379378, 0.045459114015363955, 0.017256469666238283, 0.030430655973661347, 0.0368966310983293, 0.016643524174474456, 0.024636817607191386, 0.03507316102977853, 0.02477831642252437, 0.0251681042747689, 0.01651727333859776, 0.02063190116754743, 0.02779586715430793, 0.04889031257220644, 0.01292852670434863, 0.04530781916143101, 0.9873318239212532, 0.9828162863154446, 0.9758899396610194, 0.981324950260986, 0.9802651435528422, 0.9864556873868587, 0.979300071594688, 0.9881997041633911, 0.984027417036726, 0.0891305166122236, 0.10818877696994622, 0.029231510372616287, 0.05881041206280846, 0.10395083201362854, 0.09733430592951287, 0.11052402240547943, 0.14394688028410385, 0.05166760130882353, 0.1363880458299207, 0.07354233372597208, 0.11196786698033956, 0.25418653931925517, 0.13487474759277684, 0.12522770650496773, 0.0821857815116731, 0.10722637723086847, 0.13079285814330543, 0.06505886857723908, 9.999999999998899e-05, 9.999999999998899e-05, 0.03776930997724526, 0.05332569914563212, 9.999999999998899e-05, 0.038272068395902026, 0.06784605510421438, 0.060514035866249705, 0.045715407092988936, 0.11812870528570307, 9.999999999998899e-05, 0.08335009462801923, 0.020812680957984386, 0.014946569228591056, 0.01661889398952121, 0.01511974558756024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007403508784521562, 9.999999999998899e-05, 0.041845961859470315, 9.999999999998899e-05, 0.008970976384043983, 9.999999999998899e-05, 0.014735293641362834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022861411316297153, 0.0007807085660953561, 0.002702492183235372, 0.029564466733764894, 0.029062943622692128, 0.02612357622444994, 9.999999999998899e-05, 0.25358943625729147, 0.25000933391785174, 0.2700785369885813, 0.27878547403603615, 0.2774789639237839, 0.2635701219789762, 0.28848377284916193, 0.25074465680217617, 0.23347202959507818, 0.037937970447582625, 0.060626483115823415, 0.025596448022267793, 0.06077162542672998, 0.03718516527797766, 0.045572086483940955, 0.037321751615872034, 0.02552798351368435, 0.036618408576585715, 0.11402280358918526, 0.09692821126779694, 0.10780672044253337, 0.10546289192225433, 0.11526180211717396, 0.09626946650368295, 0.08336744991263711, 0.08943791237654097, 0.10986100021163092, 0.13789341286801904, 0.13797788730284188, 0.11951134342407566, 0.14497219636202552, 0.1748666431450301, 0.1420187841219429, 0.1639122789992291, 0.15335905990499887, 0.1145624676586604, 0.07328413834459535, 0.054205766394743504, 0.07665865025231777, 0.07638042708093651, 0.14032687235137786, 0.06324768515612889, 0.10512535321281247, 0.10098742686745532, 0.06813454920697315, 0.163973409902461, 0.1289128395622562, 0.1367210118163017, 0.11783547666659289, 0.13945153643821961, 0.12132400062482318, 0.15646979110138926, 0.1401352961758694, 0.13117761961444885, 0.15304527031259207, 0.16270195789211173, 0.14695459848180525, 0.15542444058360194, 0.14844769494446586, 0.16617759648912978, 0.1590693544504015, 0.14980660279307123, 0.14215102475855712, 0.15802834323670545, 0.11516961813689741, 0.1063563472506841, 0.16948545087743427, 0.06624697339444718, 0.07855152173130231, 0.10981680311878195, 0.10838369816365412, 0.12073892151646926, 0.2853404479281255, 0.10118832471272521, 0.07883185013202998, 0.07440990119799795, 0.16645402912640206, 0.16538817271236328, 0.10535136146532098, 0.10519557933841583, 0.08510355622776566, 0.1635395299268525, 0.16053874946285274, 0.1755463937500652, 0.16108072961797237, 0.1573658621958599, 0.14985262772979802, 0.15289805224991393, 0.14518723298784464, 0.15835023843796625, 0.04512937337720746, 0.06666756090508097, 0.02489877310519517, 0.04902148758978275, 0.04416911736278284, 0.03916119701692766, 0.0346880432222626, 0.04498858569723674, 0.04229930632112877]}, "mutation_prompt": null}
{"id": "915fe14f-ea24-43ff-83d2-7512c820ca51", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 0.2\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                step_size *= 0.98  # Decrease step size for exploitation\n            else:\n                step_size *= 1.02  # Increase step size for exploration\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Introducing a dynamic step size adaptation mechanism to enhance exploration and exploitation balance.", "configspace": "", "generation": 2, "fitness": 0.13871470490050508, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.33705263250426976, 0.35240819030933357, 0.3056953602165223, 0.35948998732432524, 0.3384418660246431, 0.3166131047566071, 0.3410736532544788, 0.33048674129548816, 0.3324908556386391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023288927879882015, 0.05301478547534111, 0.0231584026853896, 0.04576830093165485, 0.03363238330936169, 0.051979723851061865, 0.03744478855392552, 0.02282100600638115, 0.017286231633944937, 0.0418546207742978, 0.02771961836384418, 0.030219082899895167, 0.016727609008812205, 0.019464795289345416, 0.03789958034943974, 0.02135788711044828, 0.04253192290155661, 0.014249266289008466, 0.9677531809414344, 0.9710912542166885, 0.9587895580640078, 0.965524817379328, 0.9706332945797941, 0.9645219419385849, 0.9684494218241637, 0.9666131028842405, 0.9670751924387786, 0.15094481329008846, 0.08849141509116709, 0.0848386617378395, 0.12198028431419883, 0.18197070552052486, 0.1567712083647571, 0.16076092903905848, 0.13272829777495754, 0.11832414512261946, 0.15947894294879483, 0.06146299337067773, 0.08167643929809532, 0.15603423232922453, 0.14470226741740266, 0.12908120809794055, 0.09068425203601549, 0.11644700215048542, 0.13824526960282169, 0.07462574253942988, 0.06304651038739917, 0.030590135938522, 0.05174614929577115, 0.09138511134507499, 9.999999999998899e-05, 0.08369331597391538, 0.0971369843493276, 0.058248973288262285, 0.13257135868401093, 0.11894074878101968, 0.061394937254923065, 0.12904982444641988, 0.05906750892200785, 0.11282569879297322, 0.19307711293774876, 0.06003695205408277, 0.083539075793158, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08411887566187815, 9.999999999998899e-05, 0.10105342835455744, 0.054557225755442085, 0.00896470465994137, 0.010448051904203615, 0.11751868619892902, 0.015430360953096134, 0.07759546633118097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0434074084134658, 0.017210494390847986, 0.011823622133388723, 0.03569190562136737, 0.052053946293082354, 0.016345973730834018, 0.025646851019656025, 0.02283032775512861, 0.022987110049722426, 0.3163666012803831, 0.30631138873051866, 0.29039287054131213, 0.3861370307171934, 0.278382553257271, 0.25840942731173067, 0.3158824255833197, 0.3133807788898776, 0.30452641319329543, 0.05497833130646956, 0.03441017165711313, 0.04911534631162462, 0.03586233464631039, 0.05890953501063889, 0.027141911381057815, 0.033246916795943826, 0.055965850562250674, 0.05929831872290958, 0.09307690338764973, 0.10858850995738745, 0.12289454068758188, 0.1008360397447472, 0.07656812057404039, 0.10112747743663675, 0.09176041802979029, 0.163761593511203, 0.09404006917912322, 0.17157964032072304, 0.15775023485480522, 0.10236115241599819, 0.1477465753863082, 0.1915736890621743, 0.10580746694775678, 0.17195351333431919, 0.1258756387701816, 0.10099754336056121, 0.08987418706354178, 0.032196363725150334, 0.07991394594158208, 0.10824107429507857, 0.08705538179355732, 0.06925875319564934, 0.10994684341957761, 0.06984478428860852, 0.05809242895899658, 0.14654604235010826, 0.10836736842278227, 0.12401835116429505, 0.15560245683566865, 0.129585829197563, 0.15341606758157433, 0.15528900010316216, 0.10972502682040519, 0.1453496001900476, 0.15432091652703728, 0.15229288267473529, 0.14897903312244176, 0.15892569940885826, 0.15831827935325238, 0.16399656578480426, 0.15438543362878498, 0.1534767609010621, 0.14851964138697726, 0.18365903963966435, 0.13423038784435026, 0.28252715129077366, 0.17268943800705205, 0.06724253948571601, 0.060490747152520785, 0.10794253237285334, 0.11442690038045789, 0.13513065351413966, 0.3632162080785253, 0.10449272463450454, 0.08222563808922312, 0.099965550701688, 0.1929777745382617, 0.172378644541344, 0.08601448011372326, 0.07584423181363487, 0.15838436177858894, 0.19000867142397515, 0.1638559937352453, 0.168310218148634, 0.16770019607930897, 0.1524092455084174, 0.18184467329419662, 0.18587078750468633, 0.14059937463685968, 0.13679192127689, 0.03424904538128537, 0.043518909239048886, 0.04414039126474434, 0.05305346146878642, 0.03927833543112591, 0.04831333666976423, 0.03334276544818493, 0.04418969734363565, 0.03769744325942559]}, "mutation_prompt": null}
{"id": "d7591230-f40c-4617-86b7-ac7fc3388775", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 1.0\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                step_size *= 0.95  # Dynamic step size adaptation for faster convergence\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Introducing dynamic step size adaptation to adjust the search step based on previous performance dynamically.", "configspace": "", "generation": 3, "fitness": 0.148943034357819, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.13.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.40681497975084446, 0.5140074504795693, 0.42954085315647395, 0.25407551526243377, 0.8709253939376078, 0.5898801850483889, 0.4874453154926095, 0.3884573708704422, 0.6244932690806231, 0.07486561920971002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0043071101296733305, 9.999999999998899e-05, 9.999999999998899e-05, 0.03966055199686802, 9.999999999998899e-05, 0.09545069822393182, 0.044555757630314274, 0.013400551622745338, 0.076956696530314, 0.0206426217464154, 0.07347097971587391, 0.08031965180149814, 0.053924934798110336, 0.06587282219980439, 0.08952527414788891, 0.04204439943442739, 0.027015584177456864, 0.09214254944278433, 0.014598046090707473, 0.05895372601928062, 0.06824468419355922, 0.0006732880604058966, 0.06319050547512395, 0.1318504067145384, 0.06718820880100307, 0.05481508303573568, 0.07619369783891183, 0.08270370794037285, 0.10114321625436373, 0.0752040711426345, 0.0962437643044064, 0.10422399951778916, 0.2583605386136365, 0.03478407359670277, 0.06144747840218423, 0.44675285001848974, 0.3064536552981717, 0.11579534179087603, 0.3152135186695372, 9.999999999998899e-05, 0.15618988827320812, 0.20905708244202326, 0.11416094662133547, 0.09424723373332222, 0.2707721769367978, 0.020733969502044758, 0.1523770493785822, 0.15264540674724392, 0.06478056316179204, 0.12971192615281324, 0.18448718254166774, 0.1310617464253, 0.19539512092091038, 0.18297251236211087, 0.25851851903599465, 0.01381730842037543, 0.16986200097984672, 0.1495854844561736, 0.20929777131397231, 0.1575814037268256, 0.1892388979694245, 0.21459872542064218, 0.13526169087947415, 0.20779114160996204, 0.21806750114246531, 0.1527788646466286, 0.20013770231999461, 0.19826792400160298, 0.08987475916407661, 9.999999999998899e-05, 0.08832985403238947, 0.03538726154390026, 0.036908520554887914, 9.999999999998899e-05, 0.017338433210294157, 9.999999999998899e-05, 0.009874361097629847, 0.09745582530466346, 0.08530151737810043, 0.22092749932543354, 0.07639660682348037, 0.05885935071869375, 0.02285341333221369, 0.18320710911972404, 0.04858928049675215, 0.06743764570811961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1024453964838532, 0.0848272553224495, 0.016261936720969983, 0.07485400360749495, 0.11191878668173849, 9.999999999998899e-05, 0.09332883734810582, 9.999999999998899e-05, 0.1111544968931979, 0.44273107128114064, 0.4807726220688887, 0.4150567785031435, 0.5078835120279932, 0.2038187995297278, 0.24689721310230972, 0.4995125934986755, 0.4427504689522588, 0.4133677210783545, 0.07229812655942736, 9.999999999998899e-05, 0.03248229841399264, 0.05278237962702004, 0.09505106557694709, 0.10256816320923168, 0.09686302619824072, 0.08570793059911452, 0.06744645183460907, 0.16653861912778323, 0.13071804734856107, 0.20480405632347842, 0.19783627766096457, 0.21520557603031853, 0.1467623329547192, 0.22999860620496093, 0.09988753558785268, 0.23486517077682145, 0.17147197002933334, 0.17682545170040287, 0.14681785386805513, 0.28925630821961523, 0.19617832323778917, 0.14902755313947325, 0.22253752975913244, 0.20641397186330512, 0.12800323018615023, 0.2330322743809604, 0.20025064292626826, 0.12379148219087766, 0.22810888481269564, 0.2508826397162578, 0.11765917637915213, 0.16375452502819532, 0.11161662859135446, 0.061098268545130674, 0.1925868224817916, 0.17192498324390548, 0.2037076760047205, 0.23297825581807852, 0.193846103583175, 0.20399386163014543, 0.23342849523551734, 0.18141668913569242, 0.23069208947450792, 0.18731519685226472, 0.17898423121794582, 0.18415573573964406, 0.17261049757625968, 0.1791323103461835, 0.16763712908334816, 0.1838534002566834, 0.16930391003642986, 0.17336517510200067, 0.1880023775886217, 0.13727472099193638, 0.07151925075144261, 0.17348592671064011, 0.11238488563013471, 0.06202957043467616, 0.10869780511585792, 0.12632280375059013, 0.16896750842600528, 0.5743267086517296, 0.11320000855153067, 0.08341570700297884, 0.08348243179864456, 0.21474163302818527, 0.21426783697314267, 0.11367796126941032, 0.16949644305584555, 0.33216548788709577, 0.18025188957176563, 0.18066447723705936, 0.18571863767667185, 0.16845763308485207, 0.18074822665739954, 0.17447028080921756, 0.17622683075268486, 0.18288155738213352, 0.17395091066794954, 0.11429625007841382, 0.09442509322815862, 0.07313221431758843, 0.0825063631256302, 0.0796857319168297, 0.10426936857941327, 0.08861991097929511, 0.05902871077376948, 0.05967665570668246]}, "mutation_prompt": null}
{"id": "7080aaf4-bbba-4341-a5fe-2ad8fb53b924", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 0.1\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                step_size *= 0.99  # Dynamic step size adaptation\n                \n        return best_solution", "name": "FireAntOptimization", "description": "Introducing dynamic step size adaptation to improve convergence speed.", "configspace": "", "generation": 4, "fitness": 0.06974666183580415, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.09.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.7458893592485843, 0.12707048548950262, 0.26247542297069737, 0.0720918602853633, 0.06320959319593711, 0.10796861131467472, 0.126584715985965, 0.17068233285448442, 0.12319460020188544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13129225145304413, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05082083172853291, 0.02556288734526424, 0.026082196830595095, 0.03660849220816598, 0.044764523331481176, 0.03530871998650886, 0.03724210154538343, 0.04700757117731558, 0.03682416757738083, 0.2039248285188141, 9.999999999998899e-05, 9.999999999998899e-05, 0.0602648954992393, 0.11669407476797755, 0.02114260210595753, 9.999999999998899e-05, 9.999999999998899e-05, 0.08980182191749331, 0.05426931654931455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001230402538556108, 9.999999999998899e-05, 9.999999999998899e-05, 0.33606994441880034, 9.999999999998899e-05, 9.999999999998899e-05, 0.16721085036859784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15369223094141848, 0.261708892119648, 9.999999999998899e-05, 0.1324559042541812, 0.2617410061885005, 9.999999999998899e-05, 0.08162007392601522, 0.279925265189385, 9.999999999998899e-05, 0.14046758815457483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004738014886248698, 9.999999999998899e-05, 9.999999999998899e-05, 0.004989620884666146, 0.00018521425790007928, 9.999999999998899e-05, 0.085978132010043, 0.05548641296608747, 0.17875141043184672, 0.07742298270273729, 0.01730149542831383, 0.024940556721387064, 0.19803169674855192, 0.03471105134036412, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004117701333503643, 9.999999999998899e-05, 0.11862556840723759, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08536114893864089, 0.2359554408676271, 0.07538864327173955, 0.3119053608156105, 0.13684182657134092, 0.10296177908322501, 0.06670187055206456, 0.2921054576122585, 0.1691088022724483, 0.17971071543228556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02188786783719332, 0.16259895925693402, 0.17257822007696944, 0.06121466787432894, 0.06813422638484112, 0.07400446438081087, 0.06486444489649335, 0.07249731698746564, 0.04072647938251628, 0.11490312659604529, 0.0978896712654379, 0.10621380470901254, 0.1462307505319863, 0.06703452989394465, 0.10393396711774616, 0.14477558724722406, 0.07813855826394989, 0.09344559994244805, 0.052143726927054046, 0.040756307334455566, 0.03495098286977971, 0.07938646531755134, 0.003604192200645562, 0.06416455802075705, 0.07393524734305101, 0.010729229244488714, 0.026667385915384645, 0.16892507060403628, 0.06188655914838981, 0.1160251050478337, 0.1853245421629155, 0.0707539045341471, 0.09617144419872325, 0.19293742811753156, 0.07749650950934805, 0.11049971626545652, 0.15585819554219937, 9.999999999998899e-05, 0.1698440391257411, 0.15606640800799942, 0.1765917923118363, 0.17736069185950998, 0.15838897120020268, 9.999999999998899e-05, 0.15844577487841094, 0.18890242196201512, 0.1371184022793428, 0.19780834604103437, 0.07666917287617525, 0.06560683604837014, 0.061677842225581814, 0.10851037843606959, 0.11532296032296363, 0.16619829974243272, 0.10494619863879107, 0.11343192957534398, 0.06606221646226129, 0.015846263685512674, 0.08711752401310224, 0.10487765939360583, 0.0447564400767646, 0.058462762684949654, 0.05113703497194333, 0.1772254410552101, 0.19434876668584677, 0.184876228158955, 0.19321362971093015, 0.1878172595305465, 0.192264605807981, 0.17797098454074134, 0.18747101620547268, 0.1905847690103002, 0.03761365655151838, 9.999999999998899e-05, 0.03375801364897901, 0.04062770764509804, 0.0009403572352050249, 0.010890723134276081, 0.042404373983890076, 0.0064430404729076685, 0.033873808861565324]}, "mutation_prompt": null}
{"id": "015cc28e-6b36-40c0-aaa2-5c98abf84b99", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1  # Dynamic step size\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            step = self.step_size * np.random.uniform(-1, 1)\n            new_solution = best_solution + step\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Speed up convergence by introducing a dynamic step size adjustment during the optimization process to explore the search space more efficiently.", "configspace": "", "generation": 5, "fitness": 0.028952194952424085, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.04.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.08749878909396869, 0.04258198180827366, 0.06546167322172258, 0.01829353625938346, 0.00540748147700032, 0.02532760640839593, 0.1212170730568165, 0.05675312295098989, 0.047147314473042545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00681413133790465, 0.004029818636361759, 9.999999999998899e-05, 0.01602859236086429, 0.018806348195964717, 0.015819743084308335, 0.02479120589995565, 0.021984988338187073, 0.022335291617756936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006967598412518594, 0.01684559319123713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05600263824006957, 0.01870767524451844, 0.05440976709810985, 0.06522443301162872, 0.033962461344600015, 0.037297267115311894, 0.13245742127519244, 0.015112548078039745, 0.0019307613020742576, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08808830247859767, 0.02211204780754983, 0.12525202247076483, 0.075085837126872, 0.08442901538172431, 0.06578017470843334, 0.13402534601781824, 0.06409239182326765, 0.0510085133117274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021156874988451313, 0.08460246235389646, 0.07797618133749906, 0.009753628436635187, 0.04643603624498194, 0.050092323219864565, 0.009712026399326001, 0.05234421943640377, 0.03552423203168564, 0.09345017935526301, 0.07710210654260974, 0.085829599873673, 0.12335462212545112, 0.05527387878218337, 0.09557820451144194, 0.11447953688155543, 0.07289764518349695, 0.0684967759688141, 0.021453309543312038, 0.03130814595945319, 0.01610916682174901, 0.06837246061746716, 9.999999999998899e-05, 0.04978337919325082, 0.06312041892423748, 0.005686073754529342, 0.008053978436528442, 0.1762125115541563, 0.024563961612874108, 0.1202986196764465, 0.1658770810908078, 0.050949702295856714, 0.06112011409643581, 0.1371679271920344, 0.03454741661911487, 0.09092290840735529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13282102576595045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03453646511493935, 0.11452064795832506, 0.018712838726943848, 0.06380000617436543, 0.01637360158178469, 0.018172033447054092, 0.040320446426562184, 0.059001873563835905, 0.03183620114168839, 0.01729739263870833, 0.06328092274258523, 0.015539190600898478, 0.011462322439040329, 0.010324290254767221, 0.013992282557575009, 0.013664558625454792, 0.013404606823663734, 0.01682931580916902, 0.15605067950631923, 0.13579926687039356, 0.14554490257334562, 0.17807440629195448, 0.18536234376594962, 0.15621032160987447, 0.16504578460034713, 0.11389716054358212, 0.13200238427937716, 0.011082007000056016, 9.999999999998899e-05, 0.017687202037056537, 0.022181922302635382, 9.999999999998899e-05, 9.999999999998899e-05, 0.020555124301483874, 9.999999999998899e-05, 0.01617196812005206]}, "mutation_prompt": null}
{"id": "921f2ac6-904f-46d0-a46b-7b58f2495751", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + np.random.uniform(-self.step_size, self.step_size, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                self.step_size = min(self.step_size * 1.1, 5.0)  # Adjust step size based on fitness improvement\n            else:\n                self.step_size = max(self.step_size / 1.1, 0.01)  # Reduce step size for exploration\n            \n        return best_solution", "name": "FireAntOptimization", "description": "Implement adaptive step size control to adjust the exploration range based on the fitness improvement.", "configspace": "", "generation": 6, "fitness": 0.17600155158920577, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.7302649366712535, 0.7240185440278041, 0.7091657087993671, 0.6830902125801583, 0.7162461338118293, 0.7335207335653615, 0.6896175328646437, 0.7448729334638613, 0.718569804107408, 0.013718364704286112, 9.999999999998899e-05, 9.999999999998899e-05, 0.013027843034576603, 0.0032861928903712423, 9.999999999998899e-05, 9.999999999998899e-05, 0.055083130464599894, 9.999999999998899e-05, 0.026083680516892693, 0.13902220714282665, 9.999999999998899e-05, 0.01157839323512655, 0.018865252975643676, 0.0029906461782629457, 0.04329713625534459, 0.03776097542025947, 0.025391096611007025, 0.027793100924581426, 9.999999999998899e-05, 9.999999999998899e-05, 0.010487075453633365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7864863436001451, 0.09769413579479935, 0.0872683512480229, 0.09135947870872207, 0.08483361592337846, 0.14933641771401507, 0.10685037444125278, 0.08929601676338461, 0.15869557803778056, 0.556563126416834, 0.39122097451431903, 0.2839569829007511, 0.4271252706011902, 0.5316057879631169, 0.4309511666473329, 0.5286879954136992, 0.529126853323769, 0.4137368209586324, 0.08239504146517773, 0.05813200749106584, 0.017289946004573564, 0.1829400876248053, 0.12483043892563239, 9.999999999998899e-05, 0.0583619757781253, 0.12672489515359542, 0.12835091667205656, 0.279650614166448, 0.138243360266602, 0.2540821377772883, 0.3666139834980491, 0.28168819511085663, 0.24095441115167238, 0.278129590696347, 0.26966247397482723, 0.27399853878495584, 0.2874931922444057, 0.2618760062256211, 0.13407119046095617, 0.28270466908960545, 0.25893273814575346, 0.25917383832408136, 0.2837641811107561, 0.4710569296985212, 0.2457670840173123, 0.05939143087182197, 0.007584092668800779, 0.11494450330431882, 0.11816587391721056, 0.01657565801904093, 0.04272000599024195, 0.0022314493551753856, 9.999999999998899e-05, 0.09797958817522356, 0.059536933810147796, 0.0717268479350689, 0.14575015570676675, 0.06370034405877922, 0.003527446053162797, 0.014089461680956594, 0.1565570782795498, 0.01912618940903199, 0.06466759868071403, 0.1820338943564871, 0.04466150146061587, 0.17734661370845684, 0.08338215622666034, 0.12157030480560693, 0.20686263823983875, 0.17109989677663429, 0.14374943979892996, 0.09614584731537867, 0.06183499051362196, 0.05896679342953215, 0.18835831502687805, 0.19559824470229503, 0.0921221594666386, 0.1359317662600812, 0.13245552569948538, 0.09976739000400225, 0.08855689710767733, 0.5849920412822514, 0.5949142333173261, 0.5874153542664835, 0.6132424492244309, 0.5996462089845214, 0.591615669786898, 0.5835036362777124, 0.5916990581437598, 0.5959634500363493, 0.002966051102880507, 0.044376446748654375, 9.999999999998899e-05, 9.999999999998899e-05, 0.02305754552749495, 0.0041253875434770215, 9.999999999998899e-05, 0.046914079240209294, 9.999999999998899e-05, 0.17589803986341213, 0.12552566905160367, 0.15502688140247445, 0.06354061339606176, 0.07905566959068022, 0.11243523613434714, 0.11294522410109709, 0.09099253568203858, 0.11307185995569258, 0.1170687037013608, 0.10047472991186024, 0.10849994848403477, 0.1339316534606474, 0.1014655623407178, 0.10063100865155339, 0.14613923123483097, 0.08637445744994288, 0.09215732043129066, 0.04476880379400461, 0.041884561214361904, 0.02606036617557661, 0.09049619848011448, 0.021662347572473428, 0.07034559147580677, 0.07082396511988065, 0.02033253887127595, 0.02183880140360739, 0.1759958582905451, 0.1366183295538883, 0.10973575550628978, 0.19666937231777215, 0.1510398244627471, 0.08236153718686168, 0.17489839037390897, 0.12707766229376505, 0.1039667713571043, 0.1586320937760407, 0.20344508016775542, 0.1748211118002304, 0.16614909743070605, 0.17983248622432735, 0.15651093925376758, 0.15094327888438508, 0.166523134302353, 0.16731527928577938, 0.1901902124152347, 0.13781764934529894, 0.07152288736418033, 0.17437581498946797, 0.11162125682255242, 0.061991188861519886, 0.10887285169100414, 0.1274025060138907, 0.16734041784660325, 0.8912270275588653, 0.11343199324100328, 0.0834686225755571, 0.08348885002138395, 0.2135887496613822, 0.21184555629810697, 0.11378610165808734, 0.05939156239617149, 0.536152999696882, 0.22171280094768986, 0.2218688931844096, 0.24787178029821366, 0.22772314694013662, 0.15900716619904431, 0.2543528919968774, 0.23739428793214623, 0.2310428760210843, 0.17227591153652977, 0.04949278932535095, 0.06781339494732752, 0.03247293734218182, 0.03815161925618615, 0.008396813986853324, 0.024642561492681625, 0.02624968589903942, 0.015873580682074895, 0.04200622057783787]}, "mutation_prompt": null}
{"id": "8ef9240a-bf92-4cfd-a1c1-87b72c5e6df7", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            step_size = 1.0 / np.sqrt(_ + 1)  # Dynamic step size adaptation\n            new_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Introducing dynamic step size adaptation based on fitness improvement to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": 0.16589639479560248, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.671696175102664, 0.6454049914739106, 0.6587029662779855, 0.654241944697876, 0.6486775643345422, 0.6487421428158692, 0.6441148787085245, 0.6748933530700352, 0.6521283691660691, 0.05071550219655396, 0.005478852199292672, 9.999999999998899e-05, 0.029912822642549464, 0.038919145428573554, 9.999999999998899e-05, 0.00034789129628720605, 0.036649718039034496, 9.999999999998899e-05, 0.022319854998749777, 9.999999999998899e-05, 9.999999999998899e-05, 0.006761087103633545, 9.999999999998899e-05, 9.999999999998899e-05, 0.015710198090727268, 9.999999999998899e-05, 9.999999999998899e-05, 0.025354427963674597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.6093432871810978, 0.13007275660632, 0.11382482113309833, 0.35745396991138345, 0.1199096493983125, 0.15876744284995314, 0.14826851421213627, 0.36852545524353164, 0.40182614229541724, 0.4999187104336892, 0.4441975188190519, 0.42202751875838795, 0.49242012992365003, 0.5018613997991761, 0.4605531343640882, 0.48842844584920486, 0.4319338441209406, 0.49339468448752855, 0.07540548429219285, 0.018841944429023316, 9.999999999998899e-05, 0.06182313688853591, 9.999999999998899e-05, 9.999999999998899e-05, 0.041723615314682716, 9.999999999998899e-05, 9.999999999998899e-05, 0.22502786148180298, 0.2652000900235779, 0.25836998786816345, 0.22156720001600239, 0.26857868338585544, 0.24840990525611195, 0.3705266812096143, 0.2622646371219285, 0.26254243700469326, 0.27516117182066735, 0.25668280204281113, 0.13701133250397524, 0.2680024991425275, 0.3356455178487878, 0.2653493275099965, 0.26547137384051134, 0.2340862153894897, 0.2407373440701127, 0.06627966847294975, 0.00041161859455318695, 0.04862432403518435, 0.08793613183637683, 0.06592175447339066, 0.08246067565525084, 0.004932598474501559, 0.0010912479220543947, 0.07532048906269317, 0.09184624895071813, 0.07410460030411181, 0.19283927832071435, 0.06658449135259925, 0.017403900999365396, 0.014547872600301659, 0.16998731450594273, 0.023189093930395255, 0.07620423886852057, 0.09347756321234779, 0.030373317932987587, 0.09977899353539144, 0.06328342686246469, 0.09054313648411627, 0.06651992169176879, 0.10011953451807676, 0.07270794715595819, 0.07614836452241303, 0.06535893951731542, 0.10156458625443177, 0.0905462538485079, 0.22817486468821513, 0.1277665422032307, 0.10440452298836067, 0.0844757842764684, 0.08761042090393023, 0.09104662553821907, 0.556292010125262, 0.5550806600052605, 0.5737752502096782, 0.5709257060835872, 0.5217626111514382, 0.5483950028625413, 0.5665637288726827, 0.5618163541843695, 0.5796587796586892, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007801235719669064, 9.999999999998899e-05, 9.999999999998899e-05, 0.2699292996237931, 0.15136582232701334, 0.17853383935953848, 0.06706456680293282, 0.14828143698392393, 0.152210194126972, 0.10350104820209394, 0.10613634748324108, 0.09298819717407425, 0.12161684106656834, 0.11033224126738272, 0.10328487602892367, 0.13818268152594626, 0.07994148751134722, 0.10079394534204511, 0.13761344984188584, 0.08090395337211143, 0.09218189207965188, 0.05946579365980431, 0.04372822264645293, 0.03042339500757285, 0.07668062087204452, 9.999999999998899e-05, 0.06524521599633082, 0.07014646855495754, 0.011196117153089657, 0.020246117682234388, 0.17241662746311082, 0.08592042278336598, 0.10890467085740252, 0.16950952490893834, 0.08914677011798089, 0.08868109437617422, 0.176862540860531, 0.10353875815260694, 0.10785102101765864, 0.15131715327676576, 0.18975543235872172, 0.16305686339685577, 0.154171444883348, 0.16881211830860432, 0.17034593069849757, 0.15611795961401953, 0.1581942865621817, 0.17317451010804674, 0.1899142037207281, 0.1380172779188199, 0.07153812908830692, 0.17438576486516777, 0.11261589636768843, 0.061955008178468995, 0.10881285280023767, 0.12746366891436922, 0.16850745587682558, 0.8908307497821613, 0.11359898652103306, 0.08300358228302196, 0.015900929974384415, 0.2122128154702193, 0.2118536374764003, 0.11358975622484213, 0.05925922121172389, 0.05181399001288989, 0.19781291504719067, 0.2512064689504685, 0.18504667866382052, 0.23667396775336147, 0.2424772092196832, 0.1936498718385541, 0.21637613244539966, 0.24246658183995629, 0.2218299818408469, 0.04262570247493258, 9.999999999998899e-05, 0.035570486931603806, 0.031729826997632826, 9.999999999998899e-05, 0.013436121009790303, 0.04803982805719642, 0.014226038233482896, 0.04452214360058948]}, "mutation_prompt": null}
{"id": "9d8a227c-3739-403e-ac09-83e28ffbfe8c", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            step = self.step_size / np.sqrt(_ + 1)  # Dynamic step size adaptation\n            new_solution = best_solution + step * np.random.uniform(-1, 1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Introducing dynamic step size adaptation to accelerate convergence speed.", "configspace": "", "generation": 8, "fitness": 0.04994622695338974, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.07.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.28681118107990733, 0.08737529435985836, 0.15785359779949626, 0.04801836800178294, 0.04076293501849437, 0.07120645562879324, 0.0888736710597795, 0.11741438459265752, 0.0837633540423185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03661710117586314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031288151336830605, 0.015942702957881583, 0.014907574859935435, 0.020284142785774617, 0.03148184625450812, 0.024437701197894235, 0.01946669471276563, 0.03320582367673919, 0.02542072205286494, 0.09034491665308142, 9.999999999998899e-05, 0.0004834124782955307, 0.021019193552976545, 0.0665506295101782, 0.007596705723691088, 9.999999999998899e-05, 9.999999999998899e-05, 0.013029037351937167, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09717994374119976, 9.999999999998899e-05, 9.999999999998899e-05, 0.08239145911751766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04862449721852957, 0.22602223225511275, 9.999999999998899e-05, 0.052229415262053824, 0.16724928249502358, 9.999999999998899e-05, 0.018679228030596295, 0.24334505835819198, 9.999999999998899e-05, 0.045362814924972183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002514388052459182, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017859179802118819, 9.999999999998899e-05, 9.999999999998899e-05, 0.026966356896837573, 0.00678209081516401, 0.1298040165277362, 0.06705919124012794, 0.005076835553848413, 0.012153111993891241, 0.15471463076309133, 0.020719033302568635, 9.999999999998899e-05, 9.999999999998899e-05, 0.030872709220588712, 9.999999999998899e-05, 0.023804597190175802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009686054199704253, 0.14438254689781094, 0.04628442559993362, 0.199464058845352, 0.1150720848911525, 0.07082591101193336, 0.028571511426215168, 0.17101577681966973, 0.13424017012448253, 0.12780413101363197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01711241003745345, 0.07696784765484876, 0.09559082477106806, 0.043201596284501154, 0.0538336398294077, 0.0827028647660134, 0.018030621588596696, 0.0330583334317931, 0.001511647388114934, 0.11503982774063282, 0.09804917687241488, 0.10611971984556146, 0.14630870010673114, 0.06682334012474789, 0.09182373374372677, 0.13774314426396084, 0.078272613924802, 0.09319588016427949, 0.05241678776966674, 0.03406189243313207, 0.03487980662054746, 0.07951022639523309, 0.00360300674069991, 0.06067800902465337, 0.07000444737911626, 0.011494186433254838, 0.02667181791576312, 0.1803569026850499, 0.022380561039220037, 0.10104253073284708, 0.19289057510139462, 0.022860123084363804, 0.05584912724408497, 0.18990113328742841, 0.03458816575321366, 0.09442072297889137, 0.1290760765054323, 9.999999999998899e-05, 0.018971145472807205, 0.14687555394820828, 0.11385746740183644, 0.06798619504450687, 0.1413226884500789, 9.999999999998899e-05, 0.00023277721283376795, 0.10671676376236339, 0.12480520781271898, 0.10428434818883525, 0.0759584818176623, 0.05646267840405039, 0.054109196252509206, 0.10167429657463123, 0.11385879066289273, 0.13263234146987235, 0.09683242807688619, 0.10885755237077499, 0.03298373137032873, 0.01525907994440745, 0.052347876432852325, 0.06381535096641833, 0.03438957754475558, 0.04164652701606841, 0.04241005473357928, 0.34034017073688916, 0.19772889625568424, 0.1728794524710462, 0.2365118167944109, 0.17096531145095883, 0.19621056109530077, 0.14563228156724017, 0.2760732791733054, 0.2565469708915795, 0.03656776686573071, 9.999999999998899e-05, 0.03255725517208308, 0.03856781973213763, 9.999999999998899e-05, 0.014584884371935058, 0.0450351464994414, 0.008107494014669592, 0.0365172614603011]}, "mutation_prompt": null}
{"id": "f34fdac0-a0c6-4da7-a517-87cc9f42d1db", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 0.2  # Initial step size\n\n        for _ in range(self.budget):\n            new_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                step_size *= 0.995  # Reduce step size for faster convergence\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Introducing dynamic step size adaptation to enhance convergence speed.", "configspace": "", "generation": 9, "fitness": 0.16327896892535756, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.4843794243802153, 0.523433534763551, 0.48520813626197434, 0.4937427913229955, 0.5036598048413209, 0.5058000796746929, 0.49738012972534906, 0.4809892628029293, 0.5081176566220462, 0.01383837628116058, 0.00580950789171697, 9.999999999998899e-05, 0.04854378709322171, 0.046293905825364745, 9.999999999998899e-05, 0.002412448722556304, 0.0015881423060456479, 9.999999999998899e-05, 0.011616692617447022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0066856176846630255, 9.999999999998899e-05, 9.999999999998899e-05, 0.005437215312886989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8462652415564385, 0.15902338038050934, 0.17217131310293265, 0.784570492847559, 0.26296544320673665, 0.33149190329667244, 0.7702665507026502, 0.8154630869281113, 0.9003685795651969, 0.36814130086782293, 0.4079170431415172, 0.40623509207575403, 0.3559357964056097, 0.3501436140956642, 0.38466400787878385, 0.38630646184226847, 0.6181809835849456, 0.3594913236741091, 0.09729213849610585, 0.037734467308641606, 0.006874178145072962, 0.008253220271135953, 9.999999999998899e-05, 9.999999999998899e-05, 0.024760024313506435, 9.999999999998899e-05, 9.999999999998899e-05, 0.21096619936438432, 0.23718819556835313, 0.2191382998312833, 0.20358044887582805, 0.22746138112498238, 0.2396320376082317, 0.21162040392358428, 0.2191982013702406, 0.21699424145083734, 0.19933320111492936, 0.22107617555588244, 0.1358326348727562, 0.20291329103209332, 0.24826355210827833, 0.2042348069394736, 0.22931051471530395, 0.2515202138785898, 0.1817347093198104, 0.09527133658299858, 0.0018332097265705283, 0.05974239037477058, 0.04213435213482408, 0.052218486229100414, 0.08495705898852357, 0.0037487929929257424, 0.007247309362053755, 0.08710088979867359, 0.11710150284697096, 0.09497452693845898, 0.19469293436476276, 0.07571264485438756, 0.033015454690732304, 0.03446694636021308, 0.2123689994577116, 0.04889632709353353, 0.10968057835014022, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010124096355782486, 9.999999999998899e-05, 0.003111049051949921, 0.008121145612326686, 0.021627242104328648, 0.0014406520434727677, 9.999999999998899e-05, 0.0621007665558746, 0.09092337083412416, 0.1163360663754811, 0.11783786791835393, 0.11831241421311844, 0.10759640006996773, 0.08739430912658097, 0.09019951719412289, 0.07788284707986026, 0.44924228845136316, 0.47183958646672186, 0.47311844539114956, 0.4789815844229254, 0.46827877259307504, 0.47294277102754667, 0.46715748349952657, 0.45922647412236495, 0.457673165288185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026879239339030914, 9.999999999998899e-05, 0.120766054728219, 0.15714916272409885, 0.1330970277333967, 0.06531091629700547, 0.12033700973139982, 0.10170463721329559, 0.05612346058448603, 0.1831559282780636, 0.1312444605422245, 0.11466458208485908, 0.10802929404661699, 0.11376913349741447, 0.14593503279842113, 0.08049011728646616, 0.11565676630232224, 0.16097270806237463, 0.07727299737899407, 0.09340848965009485, 0.05527842464252075, 0.04204296651215045, 0.03741818484075776, 0.11151907760347202, 0.007247490974291004, 0.08316539933059397, 0.13750852355313148, 0.013958391051702712, 0.024166946000825362, 0.2221558539938593, 0.13957027088551555, 0.15037138666381977, 0.19776256395217318, 0.12321485140011623, 0.13849913191778507, 0.19422414507044172, 0.15050847629838138, 0.17050068415269548, 0.15326716472444735, 0.1881157617886975, 0.16604787180563385, 0.15092162640173157, 0.16369757426043363, 0.15816740803309037, 0.16484728575864005, 0.1656394564374949, 0.17579643597382588, 0.18936713175955933, 0.13762006327516174, 0.7344359625846847, 0.1740640888654913, 0.06591810214206728, 0.06191027740841548, 0.10878029099492836, 0.11536500645893943, 0.16894113274301747, 0.7603820967768357, 0.11352722274419758, 0.08301878896915482, 0.015889450454677934, 0.2130556584317197, 0.21251589144153127, 0.05168143560484473, 0.05919851801609144, 0.6033132726131512, 0.18550288366409984, 0.20430062454687015, 0.20811519865522288, 0.19811856101101066, 0.19182772399571202, 0.1873025489560518, 0.18481624532204122, 0.18911784598498416, 0.1807427711579176, 0.04225956163196365, 0.021121983559014512, 0.028495067171744437, 0.043184821410957586, 0.012868905083962323, 0.027386361661770775, 0.05884514941728225, 0.011444707744738825, 0.03187052661232759]}, "mutation_prompt": null}
{"id": "d6dc7176-929a-439d-a11e-7d08f4372272", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + np.random.uniform(-1, 1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n            \n            # Opposition-based learning\n            opposite_solution = self.lower_bound + self.upper_bound - best_solution\n            opposite_fitness = func(opposite_solution)\n            if opposite_fitness < best_fitness:\n                best_solution = opposite_solution\n                best_fitness = opposite_fitness\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Implementing opposition-based learning to enhance exploration and convergence speed.", "configspace": "", "generation": 10, "fitness": 0.16986170210217116, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.2821618683181708, 0.33415298572960694, 0.3356024421256306, 0.3163532708993074, 0.3078773301073623, 0.31866084843634557, 0.2814560609943, 0.32348998230303383, 0.2892389331432613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08018935925410609, 0.10886249424745642, 0.07434669072767552, 0.09886992962047647, 0.10522747235318697, 0.07898999622544411, 0.09667247155579539, 0.09083939816386355, 0.08372596242215435, 0.07003668891568426, 0.10343521602661276, 0.08409017058680879, 0.08946711928593232, 0.06909730094884692, 0.0802472655073121, 0.07555693067498304, 0.04785127392063082, 0.07352000677114023, 0.9767583137705963, 0.9660482376786093, 0.9727326164687939, 0.9633751728166329, 0.9193245790621442, 0.9393400316831405, 0.9683202201691152, 0.9663255800428483, 0.9694113836347168, 0.20928854031653232, 0.20557060294489726, 0.20789791321549367, 0.20221545601597757, 0.21159864725341793, 0.18556342082911115, 0.22205334018280487, 0.2157807423158884, 0.24217736533193546, 0.2370956164944712, 0.22291761988488656, 0.2293884093642018, 0.2283911838516134, 0.255490130329185, 0.2260818322290149, 0.22569376189221801, 0.20883750432529657, 0.24697312817401296, 0.11562204975019774, 0.11929660584526114, 0.11568097689782186, 0.05869554437735536, 0.13844252615992503, 0.10281956635707723, 0.11178547169153552, 0.0832224035584459, 0.12446123777218565, 0.12204949476145888, 0.11362390120766286, 0.10082701559604701, 0.09840863322156235, 0.10111021426250355, 0.11108498110886089, 0.0855225803413956, 0.09512577301424041, 0.11078102319018512, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012162266036319647, 9.999999999998899e-05, 9.999999999998899e-05, 0.06308046893694008, 0.02779046976452082, 0.15002595829594723, 0.06146480466726367, 0.0348050195726588, 0.06588553942696485, 0.10100623910660922, 0.013209543288168035, 0.06134746691595461, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0425618347396679, 0.059309801074314605, 0.033667602832872734, 0.032301891972887686, 0.03594677556534387, 0.04559843080710202, 0.040063383205010905, 0.055647386042528724, 0.057626931236255396, 0.3086857005673851, 0.32955247258472586, 0.2998194859129608, 0.31515636597053676, 0.2991022871168517, 0.34792929452961385, 0.31763707082563575, 0.30902853525660945, 0.3290495419885744, 0.09293945462379216, 0.08295045432487769, 0.09600531681722912, 0.08450917837864402, 0.09787338210960694, 0.08445891484598467, 0.10202948621857488, 0.08575209372403192, 0.07638257963732775, 0.15819140688405586, 0.12605229899638493, 0.14596050510247716, 0.18061165186121453, 0.15930185727333068, 0.12888304322825694, 0.16838223291652832, 0.13459832855938147, 0.13868616915690468, 0.22478236590192335, 0.23041730333524657, 0.2538375064100552, 0.23192158139303454, 0.1771909888250215, 0.23892445854858957, 0.21341626092321564, 0.18483995824623767, 0.196892244303696, 0.16154200338247215, 0.141420951610138, 0.16763153516328078, 0.10697862083764453, 0.1661592036191254, 0.18308076162422238, 0.1709568027218793, 0.13573370588723976, 0.16939318878007692, 0.18906133885865728, 0.18841747102363338, 0.21578390409910175, 0.18147492513255747, 0.2308493520114292, 0.19912269272453964, 0.19949978135476754, 0.17897982835123405, 0.1944748307189993, 0.17686570051896322, 0.17370635151298808, 0.1762407210529534, 0.1784573994729206, 0.17501517895262897, 0.17545088326505187, 0.1769875755917334, 0.17077212195416414, 0.19070270374326714, 0.11734853691146763, 0.13103492238212944, 0.06879077558385782, 0.171755985773563, 0.11074559924217742, 0.08679596895103592, 0.10809201305612004, 0.1211925199758862, 0.16727535365783208, 0.3699493703049539, 0.11107381320933696, 0.19796780673080216, 0.08145834853540201, 0.09304471801380132, 0.16965789464779357, 0.32182847483762267, 0.16789616477099767, 0.28117015757127806, 0.18512494598676443, 0.16740703522120604, 0.1728863715637179, 0.16728725568792857, 0.17614957323296077, 0.17462295268127925, 0.17549869909919558, 0.17692869484878793, 0.19530899648278588, 0.07645726409792819, 0.06680459720288401, 0.07448853622389928, 0.06964891376712912, 0.07652370866679536, 0.07163645865966506, 0.07855008335085134, 0.07272524559813642, 0.09119659750904141]}, "mutation_prompt": null}
{"id": "c826ed58-6137-4f19-97c4-aadbeeeb82c9", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 0.1\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                step_size *= 0.95\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Introducing a dynamic step size adjustment based on fitness improvement to speed up convergence.", "configspace": "", "generation": 11, "fitness": 0.032775555412334546, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.05.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.0876750760108036, 0.04670320794956073, 0.07783007624869787, 0.017682822940163323, 0.014393324697523191, 0.03640605845206013, 0.04442374165785845, 0.061772716232827096, 0.04060945446690312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011447336437650169, 0.008026497602159233, 9.999999999998899e-05, 0.004302357534700207, 0.02204389615910496, 0.006955150657055875, 0.004250276413815146, 0.02265707102938308, 0.007086874949878252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018171735532411137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05426931654931455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010961658187333967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0714291417140075, 9.999999999998899e-05, 9.999999999998899e-05, 0.16697120062744086, 0.023755997276778573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038258967548244094, 9.999999999998899e-05, 0.13996907872874764, 0.07959506328214794, 9.999999999998899e-05, 9.999999999998899e-05, 0.12034902390151059, 0.08739661581537295, 0.04811340861930824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0276460800780991, 0.17126086817960873, 0.1656603438402473, 0.04024161425372497, 0.06617633638500697, 0.07400570350962576, 0.06670227424442432, 0.07324679551449631, 0.044010663803102035, 0.11502772933337924, 0.09806025794162465, 0.10625377569032313, 0.14630063766316925, 0.06502174790449189, 0.10522105072566079, 0.1374595165346334, 0.07820403058491099, 0.0934612899656666, 0.05225415086573537, 0.042261883333407746, 0.0349581395375006, 0.07939629382147528, 0.003705866243236211, 0.07339725133833852, 0.07239292685486343, 0.010624837834871004, 0.026707247152440106, 0.1844457232841178, 0.036593655198129404, 0.11373781501538482, 0.17638057665627516, 0.0442247685663435, 0.07003760566435036, 0.1894701035493499, 0.04362802477121763, 0.10243405162303243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863880823445122, 0.050845436107130215, 0.02320637302098949, 0.06872046338351123, 0.01880648343105018, 0.025292840863785027, 0.0647793966374478, 0.1011015094819201, 0.07069220996685566, 0.04422687370181699, 0.0890062117509427, 0.01060358431761066, 0.013392060564623498, 0.013215142812316616, 0.01649454272686579, 0.018485730345462303, 0.015426015681749283, 0.02215382047116765, 0.19500329317911635, 0.19971482815452546, 0.19624366024708506, 0.20204091135706692, 0.18996524721126185, 0.20093255315070158, 0.19097440968089507, 0.18140658235495488, 0.20136619630310115, 0.03436367592549272, 9.999999999998899e-05, 0.03164296217500018, 0.03536131219995131, 9.999999999998899e-05, 0.009594813060948004, 0.043058072429318806, 0.005083815426253913, 0.031726840392467426]}, "mutation_prompt": null}
{"id": "05d7a28f-271b-4c35-8228-1a9e95915286", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        step_size = 0.1 # Initializing a dynamic step size\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim) # Applying dynamic step size\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                step_size *= 0.95 # Updating step size dynamically\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Introducing a dynamic step-size adaptation strategy to enhance the optimization speed.", "configspace": "", "generation": 12, "fitness": 0.032775555412334546, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.05.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.0876750760108036, 0.04670320794956073, 0.07783007624869787, 0.017682822940163323, 0.014393324697523191, 0.03640605845206013, 0.04442374165785845, 0.061772716232827096, 0.04060945446690312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011447336437650169, 0.008026497602159233, 9.999999999998899e-05, 0.004302357534700207, 0.02204389615910496, 0.006955150657055875, 0.004250276413815146, 0.02265707102938308, 0.007086874949878252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018171735532411137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05426931654931455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010961658187333967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0714291417140075, 9.999999999998899e-05, 9.999999999998899e-05, 0.16697120062744086, 0.023755997276778573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038258967548244094, 9.999999999998899e-05, 0.13996907872874764, 0.07959506328214794, 9.999999999998899e-05, 9.999999999998899e-05, 0.12034902390151059, 0.08739661581537295, 0.04811340861930824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0276460800780991, 0.17126086817960873, 0.1656603438402473, 0.04024161425372497, 0.06617633638500697, 0.07400570350962576, 0.06670227424442432, 0.07324679551449631, 0.044010663803102035, 0.11502772933337924, 0.09806025794162465, 0.10625377569032313, 0.14630063766316925, 0.06502174790449189, 0.10522105072566079, 0.1374595165346334, 0.07820403058491099, 0.0934612899656666, 0.05225415086573537, 0.042261883333407746, 0.0349581395375006, 0.07939629382147528, 0.003705866243236211, 0.07339725133833852, 0.07239292685486343, 0.010624837834871004, 0.026707247152440106, 0.1844457232841178, 0.036593655198129404, 0.11373781501538482, 0.17638057665627516, 0.0442247685663435, 0.07003760566435036, 0.1894701035493499, 0.04362802477121763, 0.10243405162303243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863880823445122, 0.050845436107130215, 0.02320637302098949, 0.06872046338351123, 0.01880648343105018, 0.025292840863785027, 0.0647793966374478, 0.1011015094819201, 0.07069220996685566, 0.04422687370181699, 0.0890062117509427, 0.01060358431761066, 0.013392060564623498, 0.013215142812316616, 0.01649454272686579, 0.018485730345462303, 0.015426015681749283, 0.02215382047116765, 0.19500329317911635, 0.19971482815452546, 0.19624366024708506, 0.20204091135706692, 0.18996524721126185, 0.20093255315070158, 0.19097440968089507, 0.18140658235495488, 0.20136619630310115, 0.03436367592549272, 9.999999999998899e-05, 0.03164296217500018, 0.03536131219995131, 9.999999999998899e-05, 0.009594813060948004, 0.043058072429318806, 0.005083815426253913, 0.031726840392467426]}, "mutation_prompt": null}
{"id": "749f742c-38b9-4b50-ae8e-b19c592eedf2", "solution": "import numpy as np\n\nclass FireAntOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_step_size = 0.1\n        self.step_size_decay = 0.95\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        step_size = self.initial_step_size\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                step_size *= self.step_size_decay\n        \n        return best_solution", "name": "FireAntOptimizationImproved", "description": "Introducing dynamic step size adaptation to accelerate convergence speed.", "configspace": "", "generation": 13, "fitness": 0.032775555412334546, "feedback": "The algorithm FireAntOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.05.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.0876750760108036, 0.04670320794956073, 0.07783007624869787, 0.017682822940163323, 0.014393324697523191, 0.03640605845206013, 0.04442374165785845, 0.061772716232827096, 0.04060945446690312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011447336437650169, 0.008026497602159233, 9.999999999998899e-05, 0.004302357534700207, 0.02204389615910496, 0.006955150657055875, 0.004250276413815146, 0.02265707102938308, 0.007086874949878252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018171735532411137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05426931654931455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010961658187333967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0714291417140075, 9.999999999998899e-05, 9.999999999998899e-05, 0.16697120062744086, 0.023755997276778573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038258967548244094, 9.999999999998899e-05, 0.13996907872874764, 0.07959506328214794, 9.999999999998899e-05, 9.999999999998899e-05, 0.12034902390151059, 0.08739661581537295, 0.04811340861930824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0276460800780991, 0.17126086817960873, 0.1656603438402473, 0.04024161425372497, 0.06617633638500697, 0.07400570350962576, 0.06670227424442432, 0.07324679551449631, 0.044010663803102035, 0.11502772933337924, 0.09806025794162465, 0.10625377569032313, 0.14630063766316925, 0.06502174790449189, 0.10522105072566079, 0.1374595165346334, 0.07820403058491099, 0.0934612899656666, 0.05225415086573537, 0.042261883333407746, 0.0349581395375006, 0.07939629382147528, 0.003705866243236211, 0.07339725133833852, 0.07239292685486343, 0.010624837834871004, 0.026707247152440106, 0.1844457232841178, 0.036593655198129404, 0.11373781501538482, 0.17638057665627516, 0.0442247685663435, 0.07003760566435036, 0.1894701035493499, 0.04362802477121763, 0.10243405162303243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863880823445122, 0.050845436107130215, 0.02320637302098949, 0.06872046338351123, 0.01880648343105018, 0.025292840863785027, 0.0647793966374478, 0.1011015094819201, 0.07069220996685566, 0.04422687370181699, 0.0890062117509427, 0.01060358431761066, 0.013392060564623498, 0.013215142812316616, 0.01649454272686579, 0.018485730345462303, 0.015426015681749283, 0.02215382047116765, 0.19500329317911635, 0.19971482815452546, 0.19624366024708506, 0.20204091135706692, 0.18996524721126185, 0.20093255315070158, 0.19097440968089507, 0.18140658235495488, 0.20136619630310115, 0.03436367592549272, 9.999999999998899e-05, 0.03164296217500018, 0.03536131219995131, 9.999999999998899e-05, 0.009594813060948004, 0.043058072429318806, 0.005083815426253913, 0.031726840392467426]}, "mutation_prompt": null}
{"id": "1f14018d-6c52-4c59-a6cb-8d3a8bac94cf", "solution": "class FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 1.0\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + np.random.uniform(-1, 1, self.dim) * step_size\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                step_size *= 0.9  # Dynamic step size adjustment for faster convergence\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Implementing a dynamic step size adaptation mechanism based on the fitness improvement of candidate solutions to accelerate convergence speed.", "configspace": "", "generation": 14, "fitness": 0.0940601963670005, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.11.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.6272728184087624, 0.13093513623545683, 0.24132160230300193, 0.07404865475561706, 0.06476968670043903, 0.11157954120167601, 0.1392313012993025, 0.30226253541929116, 0.08914802244139752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06391892772942553, 9.999999999998899e-05, 0.006350650434116312, 0.04895343470070679, 9.999999999998899e-05, 0.0498821951762104, 0.03459265745435147, 0.017434167886483887, 0.016741262971652793, 0.07572337049854472, 9.999999999998899e-05, 0.00041109428456165276, 0.06508653574238665, 9.999999999998899e-05, 0.028954322544905486, 0.02928793726768053, 9.999999999998899e-05, 0.017172140783941914, 0.0696973025758667, 0.028613848917910967, 0.01954973546793426, 0.04084572873915038, 0.04770303841526313, 0.04154177433700079, 0.03940923757024761, 0.048283875613507554, 0.04128112521884508, 0.20845948417122118, 9.999999999998899e-05, 9.999999999998899e-05, 0.046709186719057105, 0.10071213623497843, 0.020630614372558198, 0.041184571461163055, 9.999999999998899e-05, 0.06152155767632217, 0.11449640249463677, 0.06482837655629448, 0.03437582447155163, 0.81846901723314, 9.999999999998899e-05, 0.00759693020956731, 0.08738201825043979, 9.999999999998899e-05, 9.999999999998899e-05, 0.24099095021334194, 9.999999999998899e-05, 9.999999999998899e-05, 0.2534691146316693, 9.999999999998899e-05, 9.999999999998899e-05, 0.28657726573028197, 9.999999999998899e-05, 0.0039221499833133056, 0.1819878033179333, 0.013547034071738517, 0.134686560221005, 0.2517804646397843, 9.999999999998899e-05, 9.999999999998899e-05, 0.17325328287213415, 9.999999999998899e-05, 0.017496902718594165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005952497244738897, 9.999999999998899e-05, 9.999999999998899e-05, 0.07617259421179101, 0.062356557491114684, 0.26166551082772815, 0.08373607711270958, 0.00925989739630273, 0.019037529902929062, 0.18153249015846495, 0.027181672970428505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07751991215655785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042594293751458956, 0.07961096010522128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10381141371033498, 0.1857575326602282, 0.10082921502123277, 0.1949012504583405, 0.12753717400376918, 0.10239743507160315, 0.06199982998632403, 0.15822180379102269, 0.1758181061319477, 0.1500255292470729, 0.01695657699812214, 9.999999999998899e-05, 9.999999999998899e-05, 0.056642271241875264, 0.0683697910456329, 0.06861045015592449, 0.08081148519643233, 0.07197485591854125, 0.07477785050131747, 0.14503578232848902, 0.15663749544381556, 0.2217027927423868, 0.35518166170986765, 0.16451175676638363, 0.16782523458369614, 0.16772828275525864, 0.1689621751135708, 0.19282571240498825, 0.17163352522327446, 0.11806647756398747, 0.11790240501484672, 0.2505674704170505, 0.16679595405213932, 0.13008774238129317, 0.214557084276927, 0.1429189919976327, 0.0920817936207291, 0.11824479864700388, 0.05515843376695284, 0.0441441243998244, 0.25969313288583495, 0.11729795496396112, 0.11356551999087061, 0.20602864683259436, 0.06068780347776137, 0.019026945680653107, 0.1993550372093491, 0.14475898371372609, 0.16267346671378669, 0.22085481080219338, 0.11461241179385229, 0.15443605927516668, 0.22096310065586344, 0.17107144310662914, 0.18213892318159564, 0.16984225628398997, 9.999999999998899e-05, 0.16247624721615173, 0.1705493508975673, 0.20527263931476714, 0.15988387315754315, 0.16128280919633164, 9.999999999998899e-05, 0.09918437030653382, 0.1901092360023069, 0.13796474345768217, 0.06884454161656794, 0.17421250043752157, 0.10901433143767658, 0.06103782475278818, 0.10892594632085184, 0.12754577071772943, 0.136220031366719, 0.7832670856246988, 0.11360880794810801, 0.061102824531564015, 0.06925084884916977, 0.1483074693030132, 0.08358357058625066, 0.11375982970188014, 0.059384223744334164, 0.16654494910570306, 0.18092330772057885, 0.1856775198119872, 0.18308632555188398, 0.18564485996789803, 0.18843376740143736, 0.18442244543502773, 0.18987147990640518, 0.18503321631810354, 0.2037395843542502, 0.07094758978763116, 0.06771214611489462, 0.05932139963089811, 0.016391041290210295, 0.021514510780167417, 0.09968777051784639, 0.13572419930620983, 0.021317994932273487, 0.0789993632574677]}, "mutation_prompt": null}
{"id": "dfd8184d-2ca8-4b39-803a-60fe53987d01", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 0.1\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                step_size *= 0.99  # Dynamic step size adaptation\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Implementing dynamic step size adaptation in the FireAntOptimization algorithm to improve convergence speed.", "configspace": "", "generation": 15, "fitness": 0.06974666183580415, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.09.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.7458893592485843, 0.12707048548950262, 0.26247542297069737, 0.0720918602853633, 0.06320959319593711, 0.10796861131467472, 0.126584715985965, 0.17068233285448442, 0.12319460020188544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13129225145304413, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05082083172853291, 0.02556288734526424, 0.026082196830595095, 0.03660849220816598, 0.044764523331481176, 0.03530871998650886, 0.03724210154538343, 0.04700757117731558, 0.03682416757738083, 0.2039248285188141, 9.999999999998899e-05, 9.999999999998899e-05, 0.0602648954992393, 0.11669407476797755, 0.02114260210595753, 9.999999999998899e-05, 9.999999999998899e-05, 0.08980182191749331, 0.05426931654931455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001230402538556108, 9.999999999998899e-05, 9.999999999998899e-05, 0.33606994441880034, 9.999999999998899e-05, 9.999999999998899e-05, 0.16721085036859784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15369223094141848, 0.261708892119648, 9.999999999998899e-05, 0.1324559042541812, 0.2617410061885005, 9.999999999998899e-05, 0.08162007392601522, 0.279925265189385, 9.999999999998899e-05, 0.14046758815457483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004738014886248698, 9.999999999998899e-05, 9.999999999998899e-05, 0.004989620884666146, 0.00018521425790007928, 9.999999999998899e-05, 0.085978132010043, 0.05548641296608747, 0.17875141043184672, 0.07742298270273729, 0.01730149542831383, 0.024940556721387064, 0.19803169674855192, 0.03471105134036412, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004117701333503643, 9.999999999998899e-05, 0.11862556840723759, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08536114893864089, 0.2359554408676271, 0.07538864327173955, 0.3119053608156105, 0.13684182657134092, 0.10296177908322501, 0.06670187055206456, 0.2921054576122585, 0.1691088022724483, 0.17971071543228556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02188786783719332, 0.16259895925693402, 0.17257822007696944, 0.06121466787432894, 0.06813422638484112, 0.07400446438081087, 0.06486444489649335, 0.07249731698746564, 0.04072647938251628, 0.11490312659604529, 0.0978896712654379, 0.10621380470901254, 0.1462307505319863, 0.06703452989394465, 0.10393396711774616, 0.14477558724722406, 0.07813855826394989, 0.09344559994244805, 0.052143726927054046, 0.040756307334455566, 0.03495098286977971, 0.07938646531755134, 0.003604192200645562, 0.06416455802075705, 0.07393524734305101, 0.010729229244488714, 0.026667385915384645, 0.16892507060403628, 0.06188655914838981, 0.1160251050478337, 0.1853245421629155, 0.0707539045341471, 0.09617144419872325, 0.19293742811753156, 0.07749650950934805, 0.11049971626545652, 0.15585819554219937, 9.999999999998899e-05, 0.1698440391257411, 0.15606640800799942, 0.1765917923118363, 0.17736069185950998, 0.15838897120020268, 9.999999999998899e-05, 0.15844577487841094, 0.18890242196201512, 0.1371184022793428, 0.19780834604103437, 0.07666917287617525, 0.06560683604837014, 0.061677842225581814, 0.10851037843606959, 0.11532296032296363, 0.16619829974243272, 0.10494619863879107, 0.11343192957534398, 0.06606221646226129, 0.015846263685512674, 0.08711752401310224, 0.10487765939360583, 0.0447564400767646, 0.058462762684949654, 0.05113703497194333, 0.1772254410552101, 0.19434876668584677, 0.184876228158955, 0.19321362971093015, 0.1878172595305465, 0.192264605807981, 0.17797098454074134, 0.18747101620547268, 0.1905847690103002, 0.03761365655151838, 9.999999999998899e-05, 0.03375801364897901, 0.04062770764509804, 0.0009403572352050249, 0.010890723134276081, 0.042404373983890076, 0.0064430404729076685, 0.033873808861565324]}, "mutation_prompt": null}
{"id": "411b1fa2-fbb4-4e8a-86d6-bf3f0d865d30", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        chaos_value = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)  # Introducing chaotic initialization\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + np.random.uniform(-1, 1, self.dim) + chaos_value  # Adding chaos for exploration\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Introducing a chaotic initialization strategy to enhance exploration capabilities and speed up convergence.", "configspace": "", "generation": 16, "fitness": 0.028342412315425735, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.08.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.07014120149131509, 0.033169135226909896, 0.05977475439485991, 0.008412792100028876, 0.022873751886430926, 0.025288696900545027, 0.03222514068478122, 0.06271349290488393, 0.04662707885468065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.98626866640624, 0.0017233825755258447, 0.007657930081814812, 0.050079511886885086, 0.02220061812690488, 0.009231406731249447, 0.03815141637897179, 0.03010107891291769, 0.012827425490316124, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 0.020913937286815565, 9.999999999998899e-05, 9.999999999998899e-05, 0.006914845086178678, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01313610675382737, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008617486609551306, 0.03079298352233073, 0.12621267408644343, 0.06711180782050574, 9.999999999998899e-05, 9.999999999998899e-05, 0.09461470627041313, 0.07119245468916835, 0.015971634787736777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10481194214956335, 0.06510101398085844, 0.129747895938512, 0.11075040054465057, 0.08083310452302628, 0.10157263683432816, 0.10936921193825477, 0.08112247237161829, 0.021214989990017252, 0.09310108243747672, 0.07002381117691492, 0.06518833627558995, 0.10625999442643752, 0.048383281601961814, 0.06710781873219929, 0.11471733113439642, 0.07000985139603433, 0.05115371178412165, 0.03111845933186519, 9.999999999998899e-05, 9.999999999998899e-05, 0.044650675553987496, 9.999999999998899e-05, 0.030440265320748727, 0.05648699256316181, 0.009684474169692425, 9.999999999998899e-05, 0.0916346253723066, 0.014829359213186732, 0.06804331621272863, 0.09130231661935506, 0.01723509741699314, 0.04239781190054204, 0.12245976138762271, 0.02526623691810459, 0.07554159735876675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037481371075768766, 0.014965676059122912, 0.031833003981005414, 0.04947071347205367, 0.024910141384464124, 0.02503752734453868, 0.03391929261879634, 0.07932481852229645, 0.03489101005319395, 0.014910356885419751, 0.041803098798382954, 0.008207255404121816, 0.012058218058292769, 0.010620647207078449, 0.013257371173474364, 0.0160374346062363, 0.012396031141158836, 0.015968679650421702, 0.14617539324462758, 0.14657399250410985, 0.13440493077856663, 0.16431593218479756, 0.16549163596630168, 0.1543125923731704, 0.17834896968430947, 0.17299700273311736, 0.12604654828425732, 0.002107224570213062, 9.999999999998899e-05, 0.009977089842196252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00378771705097114, 9.999999999998899e-05, 0.008787502014660609]}, "mutation_prompt": null}
{"id": "c3429310-710d-427d-af43-9017a493a870", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 1.0\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                step_size *= 0.95  # Dynamic step size adaptation\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Utilizing a dynamic step size adaptation strategy to enhance convergence speed.", "configspace": "", "generation": 17, "fitness": 0.148943034357819, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.13.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.40681497975084446, 0.5140074504795693, 0.42954085315647395, 0.25407551526243377, 0.8709253939376078, 0.5898801850483889, 0.4874453154926095, 0.3884573708704422, 0.6244932690806231, 0.07486561920971002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0043071101296733305, 9.999999999998899e-05, 9.999999999998899e-05, 0.03966055199686802, 9.999999999998899e-05, 0.09545069822393182, 0.044555757630314274, 0.013400551622745338, 0.076956696530314, 0.0206426217464154, 0.07347097971587391, 0.08031965180149814, 0.053924934798110336, 0.06587282219980439, 0.08952527414788891, 0.04204439943442739, 0.027015584177456864, 0.09214254944278433, 0.014598046090707473, 0.05895372601928062, 0.06824468419355922, 0.0006732880604058966, 0.06319050547512395, 0.1318504067145384, 0.06718820880100307, 0.05481508303573568, 0.07619369783891183, 0.08270370794037285, 0.10114321625436373, 0.0752040711426345, 0.0962437643044064, 0.10422399951778916, 0.2583605386136365, 0.03478407359670277, 0.06144747840218423, 0.44675285001848974, 0.3064536552981717, 0.11579534179087603, 0.3152135186695372, 9.999999999998899e-05, 0.15618988827320812, 0.20905708244202326, 0.11416094662133547, 0.09424723373332222, 0.2707721769367978, 0.020733969502044758, 0.1523770493785822, 0.15264540674724392, 0.06478056316179204, 0.12971192615281324, 0.18448718254166774, 0.1310617464253, 0.19539512092091038, 0.18297251236211087, 0.25851851903599465, 0.01381730842037543, 0.16986200097984672, 0.1495854844561736, 0.20929777131397231, 0.1575814037268256, 0.1892388979694245, 0.21459872542064218, 0.13526169087947415, 0.20779114160996204, 0.21806750114246531, 0.1527788646466286, 0.20013770231999461, 0.19826792400160298, 0.08987475916407661, 9.999999999998899e-05, 0.08832985403238947, 0.03538726154390026, 0.036908520554887914, 9.999999999998899e-05, 0.017338433210294157, 9.999999999998899e-05, 0.009874361097629847, 0.09745582530466346, 0.08530151737810043, 0.22092749932543354, 0.07639660682348037, 0.05885935071869375, 0.02285341333221369, 0.18320710911972404, 0.04858928049675215, 0.06743764570811961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1024453964838532, 0.0848272553224495, 0.016261936720969983, 0.07485400360749495, 0.11191878668173849, 9.999999999998899e-05, 0.09332883734810582, 9.999999999998899e-05, 0.1111544968931979, 0.44273107128114064, 0.4807726220688887, 0.4150567785031435, 0.5078835120279932, 0.2038187995297278, 0.24689721310230972, 0.4995125934986755, 0.4427504689522588, 0.4133677210783545, 0.07229812655942736, 9.999999999998899e-05, 0.03248229841399264, 0.05278237962702004, 0.09505106557694709, 0.10256816320923168, 0.09686302619824072, 0.08570793059911452, 0.06744645183460907, 0.16653861912778323, 0.13071804734856107, 0.20480405632347842, 0.19783627766096457, 0.21520557603031853, 0.1467623329547192, 0.22999860620496093, 0.09988753558785268, 0.23486517077682145, 0.17147197002933334, 0.17682545170040287, 0.14681785386805513, 0.28925630821961523, 0.19617832323778917, 0.14902755313947325, 0.22253752975913244, 0.20641397186330512, 0.12800323018615023, 0.2330322743809604, 0.20025064292626826, 0.12379148219087766, 0.22810888481269564, 0.2508826397162578, 0.11765917637915213, 0.16375452502819532, 0.11161662859135446, 0.061098268545130674, 0.1925868224817916, 0.17192498324390548, 0.2037076760047205, 0.23297825581807852, 0.193846103583175, 0.20399386163014543, 0.23342849523551734, 0.18141668913569242, 0.23069208947450792, 0.18731519685226472, 0.17898423121794582, 0.18415573573964406, 0.17261049757625968, 0.1791323103461835, 0.16763712908334816, 0.1838534002566834, 0.16930391003642986, 0.17336517510200067, 0.1880023775886217, 0.13727472099193638, 0.07151925075144261, 0.17348592671064011, 0.11238488563013471, 0.06202957043467616, 0.10869780511585792, 0.12632280375059013, 0.16896750842600528, 0.5743267086517296, 0.11320000855153067, 0.08341570700297884, 0.08348243179864456, 0.21474163302818527, 0.21426783697314267, 0.11367796126941032, 0.16949644305584555, 0.33216548788709577, 0.18025188957176563, 0.18066447723705936, 0.18571863767667185, 0.16845763308485207, 0.18074822665739954, 0.17447028080921756, 0.17622683075268486, 0.18288155738213352, 0.17395091066794954, 0.11429625007841382, 0.09442509322815862, 0.07313221431758843, 0.0825063631256302, 0.0796857319168297, 0.10426936857941327, 0.08861991097929511, 0.05902871077376948, 0.05967665570668246]}, "mutation_prompt": null}
{"id": "63508b11-ad29-45ab-97f1-bc313d8ebcd8", "solution": "import numpy as np\n\nclass FireAntOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 1.0\n        \n        for _ in range(self.budget):\n            new_solution = best_solution + np.random.uniform(-step_size, step_size, self.dim)\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                step_size *= 0.95  # Adapt step size based on fitness improvement\n        \n        return best_solution", "name": "FireAntOptimization", "description": "Introducing adaptive step size control based on fitness improvement to enhance convergence speed.", "configspace": "", "generation": 18, "fitness": 0.14894303435782025, "feedback": "The algorithm FireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.13.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.40681497975084446, 0.5140074504795693, 0.42954085315647395, 0.25407551526243377, 0.8709253939376016, 0.5898801850483889, 0.4874453154926095, 0.3884573708704422, 0.6244932690806231, 0.07486561920971002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0043071101296733305, 9.999999999998899e-05, 9.999999999998899e-05, 0.03966055199686802, 9.999999999998899e-05, 0.09545069822393182, 0.044555757630314274, 0.013400551622745338, 0.076956696530314, 0.0206426217464154, 0.07347097971587391, 0.08031965180149814, 0.053924934798110336, 0.06587282219980439, 0.08952527414788891, 0.04204439943442739, 0.027015584177456864, 0.09214254944278433, 0.014598046090707473, 0.05895372601928062, 0.06824468419355922, 0.0006732880604058966, 0.06319050547512395, 0.1318504067145384, 0.06718820880100307, 0.05481508303573568, 0.07619369783891183, 0.08270370794037285, 0.10114321625436373, 0.0752040711426345, 0.0962437643044064, 0.10422399951778916, 0.2583605386136365, 0.03478407359670277, 0.06144747840218423, 0.4467528500184894, 0.3064536552981717, 0.11579534179087603, 0.3152135186695372, 9.999999999998899e-05, 0.15618988827320812, 0.20905708244202326, 0.11416094662133547, 0.09424723373332222, 0.2707721769367978, 0.020733969502044758, 0.1523770493785822, 0.15264540674724392, 0.06478056316179204, 0.12971192615281324, 0.18448718254166774, 0.1310617464253, 0.19539512092091038, 0.18297251236211087, 0.25851851903599465, 0.01381730842037543, 0.16986200097984672, 0.1495854844561736, 0.20929777131397231, 0.1575814037268256, 0.1892388979694245, 0.21459872542064218, 0.13526169087947415, 0.20779114160996204, 0.21806750114246531, 0.1527788646466286, 0.20013770231999461, 0.19826792400160298, 0.08987475916407661, 9.999999999998899e-05, 0.08832985403238947, 0.03538726154390026, 0.036908520554887914, 9.999999999998899e-05, 0.017338433210294157, 9.999999999998899e-05, 0.009874361097629847, 0.09745582530466346, 0.08530151737810043, 0.22092749932558953, 0.07639660682348182, 0.05885935071869375, 0.02285341333221369, 0.18320710911972427, 0.04858928049675215, 0.06743764570811961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1024453964838532, 0.0848272553224495, 0.016261936720969983, 0.07485400360749495, 0.11191878668173849, 9.999999999998899e-05, 0.09332883734810582, 9.999999999998899e-05, 0.1111544968931979, 0.44273107128114064, 0.4807726220688887, 0.4150567785031435, 0.5078835120279932, 0.2038187995297278, 0.24689721310230972, 0.4995125934986755, 0.4427504689522588, 0.4133677210783545, 0.07229812655942736, 9.999999999998899e-05, 0.03248229841399264, 0.05278237962702004, 0.09505106557694709, 0.10256816320923168, 0.09686302619824072, 0.08570793059911452, 0.06744645183460907, 0.16653861912778334, 0.13071804734856107, 0.20480405632347842, 0.19783627766096357, 0.21520557603031742, 0.14676233295472085, 0.2299986062049616, 0.0998875355878518, 0.23486517077682834, 0.17147197002933334, 0.17682545170040287, 0.14681785386805513, 0.28925630821961523, 0.19617832323778917, 0.14902755313947325, 0.22253752975913244, 0.20641397186330512, 0.12800323018615023, 0.2330322743809604, 0.20025064292626826, 0.12379148219087766, 0.22810888481269564, 0.25088263971625835, 0.11765917637915213, 0.16375452502819532, 0.11161662859135446, 0.061098268545130674, 0.19258682248169867, 0.17192498324392747, 0.2037076760047325, 0.23297825581807852, 0.1938461035831751, 0.20399386163014632, 0.23342849523551734, 0.1814166891356952, 0.23069208947450837, 0.18731519685226472, 0.17898423121794582, 0.18415573573964406, 0.17261049757625968, 0.1791323103461835, 0.16763712908334816, 0.1838534002566834, 0.16930391003642986, 0.17336517510200067, 0.1880023775886217, 0.13727472099193638, 0.07151925075144261, 0.17348592671064011, 0.11238488563013471, 0.06202957043467616, 0.10869780511585792, 0.12632280375059013, 0.16896750842600528, 0.5743267086517296, 0.11320000855153067, 0.08341570700297884, 0.08348243179864456, 0.21474163302818527, 0.21426783697314267, 0.11367796126941032, 0.16949644305584555, 0.33216548788709244, 0.18025188957176563, 0.18066447723705936, 0.1857186376766723, 0.1684576330850137, 0.1807482266574063, 0.17447028080921523, 0.17622683075268486, 0.18288155738213352, 0.17395091066794954, 0.11429625007841382, 0.0944250932281584, 0.07313221431758843, 0.0825063631256302, 0.0796857319168297, 0.10426936857941327, 0.08861991097929511, 0.05902871077376948, 0.05967665570668246]}, "mutation_prompt": null}
{"id": "493a32c5-f374-42c1-bdbf-b480a48e8091", "solution": "import numpy as np\n\nclass FireAntOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            step = self.step_size * np.random.uniform(-1, 1, self.dim)\n            new_solution = best_solution + step\n            new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                self.step_size *= 0.99  # Dynamic step size adaptation\n        \n        return best_solution", "name": "FireAntOptimizationImproved", "description": "Introducing dynamic step size adaptation to FireAntOptimization algorithm for faster convergence.", "configspace": "", "generation": 19, "fitness": 0.1840054875403382, "feedback": "The algorithm FireAntOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "e9ae9d32-d788-4130-b1a5-b13c4b20bc4a", "metadata": {"aucs": [0.32709343652197453, 0.3480429672147357, 0.34416608244306746, 0.3616368387727201, 0.3681581586483319, 0.339702812276269, 0.3191060410821783, 0.35754243234235206, 0.37047456193891537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08517720217040603, 0.08898641115424233, 0.06594449838844407, 0.09753211111784044, 0.06653479131014761, 0.10915575259885357, 0.07254768723926941, 0.09535148414469097, 0.11710095283228161, 0.08706112487942319, 0.08891619312873578, 0.09155121904597363, 0.07561217009237464, 0.07395460100838025, 0.08825414718114333, 0.07747024965332694, 0.09543298380789433, 0.08804646656660275, 0.9875454748842486, 0.9790007946540557, 0.9623331955154091, 0.9693622059025584, 0.9579282205308205, 0.9695769551608091, 0.980343855558863, 0.9797866648878649, 0.9811266975252722, 0.21127344814654736, 0.25404975408581065, 0.24641306712330435, 0.21903388463133766, 0.20848427903277067, 0.24368464458539307, 0.20682179154766722, 0.2395400709071932, 0.22951524237780185, 0.27236306059887916, 0.2626430293230031, 0.25956533650155633, 0.2708205665931782, 0.2748750281558333, 0.27327006535653187, 0.27679949604385634, 0.3212647633617274, 0.3198857933682344, 0.13138579037308884, 0.1279476420291854, 0.19880496433130534, 0.11872398777050652, 0.1432180639860573, 0.1148691625683359, 0.11794729986313601, 0.11453059691534595, 0.13131507765313766, 0.15129412488399052, 0.13602535247935832, 0.12081504371028917, 0.1291232926145678, 0.13492406008612268, 0.13646433559971305, 0.10475574541402455, 0.11079414404379495, 0.1212390992192095, 9.999999999998899e-05, 0.0073643542490168246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0170791194960781, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08855277556314978, 0.14915384564585077, 0.17716692142884982, 0.08242102263923867, 0.08352497744384779, 0.03591487019695738, 0.11548042989777407, 0.0657353116628625, 0.05150157886763551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06250286228848179, 0.07693676432129437, 0.06861482182877443, 0.06511844712189174, 0.039981228846226236, 0.06748145343639755, 0.04842015387656884, 0.06676103237863462, 0.05599188684147738, 0.3442855615711674, 0.36006771982458075, 0.3184088989610456, 0.3193309232307713, 0.3444397548294923, 0.338867163257635, 0.32028121495894935, 0.33134349181486444, 0.3413889691307661, 0.09805969199243969, 0.08931078298007122, 0.0930190379321506, 0.12443664954020262, 0.12056712613700382, 0.08043121610795101, 0.09230082608948653, 0.08769017339093765, 0.12306927003421586, 0.1763788276936149, 0.11793855938229847, 0.16233358656372088, 0.18191890580920067, 0.17553019538570025, 0.132507818632156, 0.14556091782846092, 0.1866088369740443, 0.19027154086118736, 0.2489863633264835, 0.24952112895605338, 0.1665623185933428, 0.24395522732119912, 0.23955612186370379, 0.22885740366788887, 0.25074846358334413, 0.2467566321629826, 0.18482980484031164, 0.19176205803897772, 0.17271205236115272, 0.15281336101441334, 0.18619275096577603, 0.22182822881253195, 0.11393649013786378, 0.18046477139046657, 0.16253209516037115, 0.16351094445702796, 0.20771130531730342, 0.24722966230693255, 0.19221562831301242, 0.19834828935340199, 0.2431387232882748, 0.21852779572647774, 0.2076319178355398, 0.17641466012386486, 0.20719134014531704, 0.18530299613127776, 0.18986297591971013, 0.1739761652784242, 0.18769808482198336, 0.18317450676916547, 0.18750686771914749, 0.18547553817446638, 0.1801817528337355, 0.17373240572121973, 0.18184469901436107, 0.13478797008582966, 0.10445361590306279, 0.1720041285363204, 0.11175382005040158, 0.061550812860343695, 0.10812067027797889, 0.12498492234186287, 0.1688245674483564, 0.4249949380795329, 0.11287695028786981, 0.08277498207832379, 0.08249817549883298, 0.20761766880441557, 0.20887547550890406, 0.11315914984548359, 0.1688085196383532, 0.33774646415945886, 0.18401706983329047, 0.18858305671055609, 0.18429433772992898, 0.17350689832083077, 0.18470397563838292, 0.18192883965702067, 0.17430466379886878, 0.19129521956553608, 0.18092546151934108, 0.09118752497908211, 0.11858222672286667, 0.07654024324073161, 0.09307806564239252, 0.08221055356015383, 0.09806990124773929, 0.09932488152080987, 0.07947284890683126, 0.07804511085845334]}, "mutation_prompt": null}
{"id": "1ec55da7-a959-4c51-9f0b-69f1fc49ca32", "solution": "import numpy as np\n\nclass FireAntOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))  # Multi-directional search\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99  # Dynamic step size adaptation\n        \n        return best_solution", "name": "FireAntOptimizationImproved", "description": "Implementing multi-directional search to explore multiple directions simultaneously for faster convergence.", "configspace": "", "generation": 20, "fitness": 0.18537542676812613, "feedback": "The algorithm FireAntOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "493a32c5-f374-42c1-bdbf-b480a48e8091", "metadata": {"aucs": [0.347392968067031, 0.3356697703462115, 0.3672616637134706, 0.3160032402386369, 0.37630881329325083, 0.34342310579325463, 0.3211057266972075, 0.33731966634042576, 0.32783181711327947, 0.03144767392577141, 0.0004114637372855112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08517720217040603, 0.08668989306229946, 0.07007179690572651, 0.09711343721924748, 0.09469708352452111, 0.10448559677254088, 0.10234283606981776, 0.10692657731557698, 0.06461235649478025, 0.0846036774377118, 0.06620290057620093, 0.07190811675495912, 0.08421681528458924, 0.08079819738767946, 0.06037918129737496, 0.09867518181257762, 0.08506700142784607, 0.09092725563030013, 0.9696677584540002, 0.9783656797814072, 0.9597138797087671, 0.9656343483053726, 0.9573297496843466, 0.9584154623523995, 0.9692370812416335, 0.9662546549197535, 0.9809130381945025, 0.20743350196208665, 0.2525183029762742, 0.22906776644757154, 0.2505133962881114, 0.23438629816330547, 0.23162304290357538, 0.22737313815468663, 0.24318687380297888, 0.23403447127524557, 0.27236306059887916, 0.26796909382761147, 0.26937037060148283, 0.2568144692780382, 0.29433944201786244, 0.2821258930455136, 0.2228483305962362, 0.26830463983079855, 0.2340223313261166, 0.08089397956574396, 0.1315578252775531, 0.13887592202879018, 0.13132446259096253, 0.12902279956944218, 0.17778971060553173, 0.130016249488203, 0.12435329678782159, 0.12320883284217066, 0.15129412488399052, 0.12129837823155087, 0.1124995026884017, 0.1291232926145678, 0.10670917874634256, 0.139033665277553, 0.1095874695139677, 0.14940121502774784, 0.13458606588779076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0118130540983169, 0.0068331628390032595, 0.004887982941180202, 0.005642736250858427, 9.999999999998899e-05, 0.0017984647890146865, 0.10013699895533934, 0.10717125934225369, 0.1777910863088884, 0.08242102263923867, 0.05119993057410355, 0.03440704912166637, 0.11548042989777407, 0.062039004331316705, 0.12142338539858688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08729082954179523, 0.061092239743273935, 0.06340335872293013, 0.05595969131124234, 0.06644710529615838, 0.06308998355578133, 0.06125048261443067, 0.061578232142362355, 0.05077863505714808, 0.3244210562414912, 0.3596562299126963, 0.32727967299448424, 0.32447064985362584, 0.3393645795142063, 0.3441513810796305, 0.3218982493623873, 0.31774094097071726, 0.30792631276457416, 0.08151560600554708, 0.10097047201404019, 0.10395796084988884, 0.10213784448475494, 0.14583733454632186, 0.0983355949477569, 0.09048827920217972, 0.09392120177441177, 0.08224161587314738, 0.154829697017706, 0.1874497822553549, 0.17519879793221593, 0.19337559601796328, 0.19665812431554952, 0.132507818632156, 0.1823734338180537, 0.20332399230973497, 0.17218513666413238, 0.25510124057880523, 0.2422354282447693, 0.19131676084411897, 0.2451452199742511, 0.23821731670257273, 0.2335113668751776, 0.24322736475789697, 0.18346849436647095, 0.14450053438859467, 0.19176205803897772, 0.12755650753600734, 0.15118367609777472, 0.16407388570277304, 0.18330238078425576, 0.12074257750496076, 0.18293101212719542, 0.1294880530800928, 0.09124707400338627, 0.20869058783817052, 0.2427069101111473, 0.1995280966032108, 0.22948292167234163, 0.2530965598179381, 0.24711965978184747, 0.2076319178355398, 0.1887007468361307, 0.20353663473561934, 0.20005479614503707, 0.1901172340861308, 0.17750605923509777, 0.19963280343282075, 0.18100039172368565, 0.17811724233723925, 0.18125658929078658, 0.18304495184951597, 0.1769416433145281, 0.18244234230570044, 0.13393852452526722, 0.10440050730577644, 0.172377650453702, 0.11175382005040158, 0.4714895097185309, 0.10824126437001469, 0.11445767804919527, 0.1673903634110926, 0.5302963811991972, 0.11220100268819255, 0.08272411030961224, 0.1518531839677968, 0.21015382018138096, 0.20894966920922053, 0.1681979940835837, 0.1689031139381234, 0.3455209355466463, 0.18331705374032914, 0.1890247340961394, 0.18429433772992898, 0.17350689832083077, 0.1955426681603194, 0.18192883965702067, 0.181388744661376, 0.17944983060834307, 0.20369116376596863, 0.07481897720834296, 0.10226579885132181, 0.0711410284979902, 0.07928038083910527, 0.09598826871709376, 0.10804096619689463, 0.09682620703248979, 0.08401683849961172, 0.08047432515977326]}, "mutation_prompt": null}
{"id": "e489d1dd-a89e-4ad0-83fd-3eb5a0528d3d", "solution": "import numpy as np\n\nclass FireAntOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))  # Multi-directional search\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99 + 0.192 * (best_fitness - new_fitnesses[min_idx])  # Dynamic step size adaptation with mutation\n                self.step_size = max(0.1, min(self.step_size, 1.0))  # Limit step size to [0.1, 1.0]\n        \n        return best_solution", "name": "FireAntOptimizationImproved", "description": "Implementing a dynamic mutation strategy to adjust the step size based on fitness improvement for faster convergence.", "configspace": "", "generation": 21, "fitness": 0.18537542676812613, "feedback": "The algorithm FireAntOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "1ec55da7-a959-4c51-9f0b-69f1fc49ca32", "metadata": {"aucs": [0.347392968067031, 0.3356697703462115, 0.3672616637134706, 0.3160032402386369, 0.37630881329325083, 0.34342310579325463, 0.3211057266972075, 0.33731966634042576, 0.32783181711327947, 0.03144767392577141, 0.0004114637372855112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08517720217040603, 0.08668989306229946, 0.07007179690572651, 0.09711343721924748, 0.09469708352452111, 0.10448559677254088, 0.10234283606981776, 0.10692657731557698, 0.06461235649478025, 0.0846036774377118, 0.06620290057620093, 0.07190811675495912, 0.08421681528458924, 0.08079819738767946, 0.06037918129737496, 0.09867518181257762, 0.08506700142784607, 0.09092725563030013, 0.9696677584540002, 0.9783656797814072, 0.9597138797087671, 0.9656343483053726, 0.9573297496843466, 0.9584154623523995, 0.9692370812416335, 0.9662546549197535, 0.9809130381945025, 0.20743350196208665, 0.2525183029762742, 0.22906776644757154, 0.2505133962881114, 0.23438629816330547, 0.23162304290357538, 0.22737313815468663, 0.24318687380297888, 0.23403447127524557, 0.27236306059887916, 0.26796909382761147, 0.26937037060148283, 0.2568144692780382, 0.29433944201786244, 0.2821258930455136, 0.2228483305962362, 0.26830463983079855, 0.2340223313261166, 0.08089397956574396, 0.1315578252775531, 0.13887592202879018, 0.13132446259096253, 0.12902279956944218, 0.17778971060553173, 0.130016249488203, 0.12435329678782159, 0.12320883284217066, 0.15129412488399052, 0.12129837823155087, 0.1124995026884017, 0.1291232926145678, 0.10670917874634256, 0.139033665277553, 0.1095874695139677, 0.14940121502774784, 0.13458606588779076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0118130540983169, 0.0068331628390032595, 0.004887982941180202, 0.005642736250858427, 9.999999999998899e-05, 0.0017984647890146865, 0.10013699895533934, 0.10717125934225369, 0.1777910863088884, 0.08242102263923867, 0.05119993057410355, 0.03440704912166637, 0.11548042989777407, 0.062039004331316705, 0.12142338539858688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08729082954179523, 0.061092239743273935, 0.06340335872293013, 0.05595969131124234, 0.06644710529615838, 0.06308998355578133, 0.06125048261443067, 0.061578232142362355, 0.05077863505714808, 0.3244210562414912, 0.3596562299126963, 0.32727967299448424, 0.32447064985362584, 0.3393645795142063, 0.3441513810796305, 0.3218982493623873, 0.31774094097071726, 0.30792631276457416, 0.08151560600554708, 0.10097047201404019, 0.10395796084988884, 0.10213784448475494, 0.14583733454632186, 0.0983355949477569, 0.09048827920217972, 0.09392120177441177, 0.08224161587314738, 0.154829697017706, 0.1874497822553549, 0.17519879793221593, 0.19337559601796328, 0.19665812431554952, 0.132507818632156, 0.1823734338180537, 0.20332399230973497, 0.17218513666413238, 0.25510124057880523, 0.2422354282447693, 0.19131676084411897, 0.2451452199742511, 0.23821731670257273, 0.2335113668751776, 0.24322736475789697, 0.18346849436647095, 0.14450053438859467, 0.19176205803897772, 0.12755650753600734, 0.15118367609777472, 0.16407388570277304, 0.18330238078425576, 0.12074257750496076, 0.18293101212719542, 0.1294880530800928, 0.09124707400338627, 0.20869058783817052, 0.2427069101111473, 0.1995280966032108, 0.22948292167234163, 0.2530965598179381, 0.24711965978184747, 0.2076319178355398, 0.1887007468361307, 0.20353663473561934, 0.20005479614503707, 0.1901172340861308, 0.17750605923509777, 0.19963280343282075, 0.18100039172368565, 0.17811724233723925, 0.18125658929078658, 0.18304495184951597, 0.1769416433145281, 0.18244234230570044, 0.13393852452526722, 0.10440050730577644, 0.172377650453702, 0.11175382005040158, 0.4714895097185309, 0.10824126437001469, 0.11445767804919527, 0.1673903634110926, 0.5302963811991972, 0.11220100268819255, 0.08272411030961224, 0.1518531839677968, 0.21015382018138096, 0.20894966920922053, 0.1681979940835837, 0.1689031139381234, 0.3455209355466463, 0.18331705374032914, 0.1890247340961394, 0.18429433772992898, 0.17350689832083077, 0.1955426681603194, 0.18192883965702067, 0.181388744661376, 0.17944983060834307, 0.20369116376596863, 0.07481897720834296, 0.10226579885132181, 0.0711410284979902, 0.07928038083910527, 0.09598826871709376, 0.10804096619689463, 0.09682620703248979, 0.08401683849961172, 0.08047432515977326]}, "mutation_prompt": null}
{"id": "aa1c9cde-6b22-4523-a0eb-a1b5e90eac3b", "solution": "import numpy as np\n\nclass FireAntOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.step_size = 1.0\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))  # Multi-directional search\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.95 if new_fitnesses[min_idx] < best_fitness else 0.99  # Adaptive step size based on fitness improvement\n        \n        return best_solution", "name": "FireAntOptimizationImproved", "description": "Implementing adaptive step size based on the fitness improvement to accelerate convergence speed.", "configspace": "", "generation": 22, "fitness": 0.18537542676812613, "feedback": "The algorithm FireAntOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "1ec55da7-a959-4c51-9f0b-69f1fc49ca32", "metadata": {"aucs": [0.347392968067031, 0.3356697703462115, 0.3672616637134706, 0.3160032402386369, 0.37630881329325083, 0.34342310579325463, 0.3211057266972075, 0.33731966634042576, 0.32783181711327947, 0.03144767392577141, 0.0004114637372855112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08517720217040603, 0.08668989306229946, 0.07007179690572651, 0.09711343721924748, 0.09469708352452111, 0.10448559677254088, 0.10234283606981776, 0.10692657731557698, 0.06461235649478025, 0.0846036774377118, 0.06620290057620093, 0.07190811675495912, 0.08421681528458924, 0.08079819738767946, 0.06037918129737496, 0.09867518181257762, 0.08506700142784607, 0.09092725563030013, 0.9696677584540002, 0.9783656797814072, 0.9597138797087671, 0.9656343483053726, 0.9573297496843466, 0.9584154623523995, 0.9692370812416335, 0.9662546549197535, 0.9809130381945025, 0.20743350196208665, 0.2525183029762742, 0.22906776644757154, 0.2505133962881114, 0.23438629816330547, 0.23162304290357538, 0.22737313815468663, 0.24318687380297888, 0.23403447127524557, 0.27236306059887916, 0.26796909382761147, 0.26937037060148283, 0.2568144692780382, 0.29433944201786244, 0.2821258930455136, 0.2228483305962362, 0.26830463983079855, 0.2340223313261166, 0.08089397956574396, 0.1315578252775531, 0.13887592202879018, 0.13132446259096253, 0.12902279956944218, 0.17778971060553173, 0.130016249488203, 0.12435329678782159, 0.12320883284217066, 0.15129412488399052, 0.12129837823155087, 0.1124995026884017, 0.1291232926145678, 0.10670917874634256, 0.139033665277553, 0.1095874695139677, 0.14940121502774784, 0.13458606588779076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0118130540983169, 0.0068331628390032595, 0.004887982941180202, 0.005642736250858427, 9.999999999998899e-05, 0.0017984647890146865, 0.10013699895533934, 0.10717125934225369, 0.1777910863088884, 0.08242102263923867, 0.05119993057410355, 0.03440704912166637, 0.11548042989777407, 0.062039004331316705, 0.12142338539858688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08729082954179523, 0.061092239743273935, 0.06340335872293013, 0.05595969131124234, 0.06644710529615838, 0.06308998355578133, 0.06125048261443067, 0.061578232142362355, 0.05077863505714808, 0.3244210562414912, 0.3596562299126963, 0.32727967299448424, 0.32447064985362584, 0.3393645795142063, 0.3441513810796305, 0.3218982493623873, 0.31774094097071726, 0.30792631276457416, 0.08151560600554708, 0.10097047201404019, 0.10395796084988884, 0.10213784448475494, 0.14583733454632186, 0.0983355949477569, 0.09048827920217972, 0.09392120177441177, 0.08224161587314738, 0.154829697017706, 0.1874497822553549, 0.17519879793221593, 0.19337559601796328, 0.19665812431554952, 0.132507818632156, 0.1823734338180537, 0.20332399230973497, 0.17218513666413238, 0.25510124057880523, 0.2422354282447693, 0.19131676084411897, 0.2451452199742511, 0.23821731670257273, 0.2335113668751776, 0.24322736475789697, 0.18346849436647095, 0.14450053438859467, 0.19176205803897772, 0.12755650753600734, 0.15118367609777472, 0.16407388570277304, 0.18330238078425576, 0.12074257750496076, 0.18293101212719542, 0.1294880530800928, 0.09124707400338627, 0.20869058783817052, 0.2427069101111473, 0.1995280966032108, 0.22948292167234163, 0.2530965598179381, 0.24711965978184747, 0.2076319178355398, 0.1887007468361307, 0.20353663473561934, 0.20005479614503707, 0.1901172340861308, 0.17750605923509777, 0.19963280343282075, 0.18100039172368565, 0.17811724233723925, 0.18125658929078658, 0.18304495184951597, 0.1769416433145281, 0.18244234230570044, 0.13393852452526722, 0.10440050730577644, 0.172377650453702, 0.11175382005040158, 0.4714895097185309, 0.10824126437001469, 0.11445767804919527, 0.1673903634110926, 0.5302963811991972, 0.11220100268819255, 0.08272411030961224, 0.1518531839677968, 0.21015382018138096, 0.20894966920922053, 0.1681979940835837, 0.1689031139381234, 0.3455209355466463, 0.18331705374032914, 0.1890247340961394, 0.18429433772992898, 0.17350689832083077, 0.1955426681603194, 0.18192883965702067, 0.181388744661376, 0.17944983060834307, 0.20369116376596863, 0.07481897720834296, 0.10226579885132181, 0.0711410284979902, 0.07928038083910527, 0.09598826871709376, 0.10804096619689463, 0.09682620703248979, 0.08401683849961172, 0.08047432515977326]}, "mutation_prompt": null}
{"id": "d4d8859e-d50d-4fcc-8172-f279c0bc1d44", "solution": "class FireAntOptimizationMutationImproved(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n        \n        return best_solution", "name": "FireAntOptimizationMutationImproved", "description": "Introducing a mutation phase that randomly perturbs the current best solution to explore a wider search space and potentially accelerate convergence.", "configspace": "", "generation": 23, "fitness": 0.2083787810952279, "feedback": "The algorithm FireAntOptimizationMutationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "1ec55da7-a959-4c51-9f0b-69f1fc49ca32", "metadata": {"aucs": [0.4285995801636141, 0.43421271335638534, 0.40777540755951336, 0.4233460189605541, 0.41911119030731914, 0.42607064013914075, 0.45026609767267156, 0.4529866506816308, 0.4422788517417148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008718230442603225, 9.999999999998899e-05, 0.03677066179576427, 0.05101699529331705, 9.999999999998899e-05, 0.06619440836658708, 0.08545765543334816, 0.13109279689541142, 0.12744539663469823, 0.1385502626967018, 0.10999865277389886, 0.08841280270553431, 0.1254866575905882, 0.09296650290837838, 0.1079569434362524, 0.09293282792706481, 0.08606850477166539, 0.09868582882746701, 0.0834651332258376, 0.09151266988989537, 0.07296988535140203, 0.08168650137971423, 0.09465627509334062, 0.9146712236190885, 0.9493250840830052, 0.9568866496060843, 0.9171262631972117, 0.9384232908991167, 0.9649944856527417, 0.9768630412523291, 0.9798709228080319, 0.9836759106903367, 0.2876470392856648, 0.3087364188128555, 0.2812889888224337, 0.3384353961672567, 0.3001566918113484, 0.29783487359757255, 0.307945905590973, 0.276083586708623, 0.2646462836002288, 0.3618407481773742, 0.2778518689570908, 0.2729079845849034, 0.3582641909754867, 0.24704827532456375, 0.3500492206152328, 0.26457979013352273, 0.24390553438097962, 0.27789885723845675, 0.14883971001943463, 0.146966548766163, 0.19806523963491152, 0.1431151910254752, 0.18453382287658893, 0.150436921781256, 0.13534889636817804, 0.17861874350562612, 0.19153222885327859, 0.16124350107124807, 0.14959386542075592, 0.18934254205637635, 0.1925415348966114, 0.19814814004201498, 0.19621384453194468, 0.14316117922401828, 0.1467034859398978, 0.20537819947130087, 0.05537007498866664, 9.999999999998899e-05, 0.040943836340476825, 0.01677443684959945, 0.039292450616666974, 0.07838865638834469, 0.002292878052055136, 0.05008195296403306, 0.008291459763738018, 0.15523715162408003, 0.05301252287717195, 0.06244492430645454, 0.04824733955833471, 0.02102105967737955, 0.042039155084404256, 0.06734296737508594, 0.06775536400425919, 0.07548560190650855, 0.00010231004841776414, 9.999999999998899e-05, 0.00692323302589215, 0.004991267974562619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09897351522327369, 0.07925259204322777, 0.1113247978628964, 0.10102217519863865, 0.10573589316254461, 0.13404035654304047, 0.11085371758989482, 0.09966198680602067, 0.12136495263943092, 0.3857169588423397, 0.39701960285891613, 0.39437945626815285, 0.3891069423863701, 0.43676100089436454, 0.40886835955781975, 0.3826850512618678, 0.397244421460897, 0.3934915840816482, 0.09187348934322404, 0.08766766324595776, 0.0956622351556462, 0.11006589173728298, 0.11999655304877, 0.08739429171065372, 0.1058962427795126, 0.10148087855362464, 0.10870636562925173, 0.22819032697471797, 0.14662808856702525, 0.19070270025359992, 0.1949112016562765, 0.2135528326415128, 0.295272786768775, 0.1685144200820261, 0.22497865467159384, 0.1768663375102396, 0.27178021959937715, 0.26229020023598415, 0.24002192934575994, 0.2918239115147985, 0.2673091960075449, 0.19758126982012658, 0.28577424964807674, 0.26908348448542796, 0.2645805237644989, 0.19824729762785864, 0.2236224915274031, 0.17023161218198324, 0.21855433063711116, 0.21631819104121086, 0.18673323609691994, 0.21749101944471927, 0.22296029822869445, 0.19507022260270424, 0.19108719421821507, 0.18569750446669364, 0.2115820626998206, 0.19969058147004792, 0.17509973252679212, 0.21831858233362378, 0.21572334995419928, 0.22031391999527095, 0.20973669656804894, 0.18498542861355127, 0.20528521874392514, 0.29787755513517344, 0.20922299089925067, 0.19740056704854048, 0.19692796493843445, 0.2044229593291489, 0.2116012752939448, 0.1994940027209927, 0.12306592215403667, 0.13634996183917447, 0.10498674377850581, 0.11486646072697382, 0.11240036010365961, 0.06192593685529524, 0.1087476194382927, 0.1258362963138372, 0.16878782976580098, 0.5661859459246419, 0.11336597822798611, 0.08320940223062623, 0.15623226228253584, 0.21204244221927426, 0.21248462551320135, 0.5809340461976157, 0.1679734325913812, 0.5400367345445838, 0.1901985710370745, 0.18570612938244369, 0.2047828267399565, 0.1898392069745326, 0.19359127662965803, 0.18121042487514638, 0.20881041136354983, 0.19679705617201282, 0.18107852222398146, 0.08712171734282981, 0.09375535557268577, 0.07298637282501186, 0.09670379463650536, 0.06635901191302784, 0.07561654376136762, 0.08836313416247432, 0.08340557466615284, 0.08147968028074482]}, "mutation_prompt": null}
{"id": "4f3da7a0-74f4-4669-a7ad-b729d4cdd229", "solution": "class FireAntOptimizationMutationImproved(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        fitness_history = [best_fitness]\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                fitness_history.append(best_fitness)\n                if len(fitness_history) > 1:\n                    fitness_rate = (fitness_history[-2] - fitness_history[-1]) / fitness_history[-2]\n                    self.step_size *= (1 + 0.5 * fitness_rate)\n        \n        return best_solution", "name": "FireAntOptimizationMutationImproved", "description": "Introducing a dynamic adjustment of the step size based on the fitness improvement rate to enhance convergence speed.", "configspace": "", "generation": 24, "fitness": 0.17858219684813598, "feedback": "The algorithm FireAntOptimizationMutationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "d4d8859e-d50d-4fcc-8172-f279c0bc1d44", "metadata": {"aucs": [0.325868911672202, 0.3442962211679511, 0.3396087344651523, 0.36620694340765336, 0.3265256782179675, 0.34677702733691784, 0.34246702815360053, 0.35435283471670487, 0.3207220068026312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09429722592673118, 0.10113830248862199, 0.10004125244123929, 0.09441489701766181, 0.1032526887477403, 0.09423720683909764, 0.10481826543093409, 0.1446032766065518, 0.10119202083903489, 0.09921365626835232, 0.04299557685377109, 0.08511445965527586, 0.08796129655119678, 0.09026065673256722, 0.09728713279626167, 0.0916871122102586, 0.07986077864626584, 0.07775137972399992, 0.988228073974493, 0.983208178032959, 0.9853412304625802, 0.9539527574927097, 0.9511899890745447, 0.9768630509779738, 0.987639519453434, 0.9841221755576337, 0.9863714414779554, 0.21144546545541698, 0.23267570982088526, 0.1789202853384415, 0.3006613072508719, 0.2200267774223158, 0.21686894125841227, 0.12975921022252546, 0.25340858627758633, 0.09422339741343999, 0.2240648831645069, 0.23472700310241845, 0.21485433785647823, 0.2426766468878202, 0.16506153564085724, 0.214245277665016, 0.27567325928974773, 0.17206006735238788, 0.22839259177764415, 0.08252110350677266, 0.10709553261492089, 0.14288842416012126, 0.09318410231029717, 0.03570667175347986, 9.999999999998899e-05, 0.08310754813539112, 0.13949802766547437, 0.093285205844574, 0.11228564466780933, 0.12158781954208042, 0.0968635663522246, 0.1667604327502984, 0.16135219575016946, 0.14009399553219826, 0.14962762761140125, 0.07656142513686026, 0.12415621644729002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1243448408711958, 0.08628942512239102, 0.03761815648404698, 0.03275403183048908, 0.011526584257195327, 0.009719863972593501, 0.09606779860107328, 0.0006068383072476147, 0.002467882400893018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06483762820905592, 0.059164829517262096, 0.04260769546933918, 0.05323148676391143, 0.04949002865698404, 0.02739603848815675, 9.999999999998899e-05, 9.999999999998899e-05, 0.14039939424592052, 0.3350983081146206, 0.4271560904981593, 0.3561905003845166, 0.37824264155324727, 0.22830440498268878, 0.3493057652173268, 0.3432796743652482, 0.31450271395692797, 0.326507298361853, 0.08387773206837423, 0.08833728870706092, 0.11300657527826696, 0.09749495449608969, 0.09914093629550558, 0.11574904382029472, 0.06611872544484032, 0.05478473777704784, 0.04479418054898798, 0.24530047939057187, 0.19430149232773763, 0.19165296179350666, 0.17004449161284196, 0.1936490206318685, 0.18067353871948633, 0.1665775698129246, 0.15793169187217404, 0.16639883652054577, 0.2586167172603989, 0.26713507139009507, 0.12302858130188254, 0.27506648653885324, 0.2197199402158202, 0.22374907992196436, 0.24123032721096727, 0.22690504901558584, 0.23421641037377594, 0.15075039722407912, 0.2228697674743093, 0.04628448220118753, 0.18725213592765977, 0.1689621161775382, 0.18818354737380782, 0.1867127640553875, 0.19588386967110383, 0.18682910187730872, 0.19780623287122345, 0.20416305968742066, 0.1998899409283298, 0.20622015295535767, 0.19635599896979516, 0.2036296940145037, 0.19306976470845116, 0.22527710040754056, 0.19728602622917601, 0.17845124602749673, 0.15159423540139982, 0.16364249160705258, 0.18982765643862942, 0.1704495393687463, 0.1762459904867304, 0.18211314955579916, 0.17765064411594267, 0.17401854406563322, 0.1731515424714809, 0.1338490593788394, 0.4240745328134673, 0.14653156758355257, 0.11238534108750697, 0.060830646076518446, 0.10834394843818862, 0.12532741762848942, 0.16817795298426896, 0.4390415128006854, 0.11283809266128009, 0.08281807583682332, 0.1542893856363795, 0.20822360863232225, 0.20654383209082328, 0.4413049760215816, 0.16512469083724646, 0.3221992140855111, 0.1976152423811114, 0.17126743395259203, 0.17334174425014404, 0.19806450005663645, 0.16029257795475438, 0.16960827258788136, 0.17602360375577208, 0.20341940921463986, 0.18498070197128214, 0.08561842927421404, 0.09017133919226195, 0.08423065752080272, 0.0801810527382768, 0.07928437116433629, 0.10300962138185299, 0.0715131691639539, 0.07283542617740946, 0.07602026739430279]}, "mutation_prompt": null}
{"id": "11699fd0-c72f-4d00-a0e1-74b49b59e7eb", "solution": "class FireAntOptimizationMutationImprovedSpeed(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_strength = 0.1\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:\n                best_solution = np.clip(best_solution + np.random.normal(0, mutation_strength, self.dim), self.lower_bound, self.upper_bound)\n                new_fitness = func(best_solution)\n                if new_fitness < best_fitness:\n                    best_fitness = new_fitness\n                    mutation_strength *= 1.05  # Increase mutation strength if fitness improves\n                else:\n                    mutation_strength *= 0.95  # Decrease mutation strength if fitness worsens\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n        \n        return best_solution", "name": "FireAntOptimizationMutationImprovedSpeed", "description": "Introducing dynamic adjustment of mutation strength based on fitness improvement to enhance convergence speed.", "configspace": "", "generation": 25, "fitness": 0.18324680517752676, "feedback": "The algorithm FireAntOptimizationMutationImprovedSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "d4d8859e-d50d-4fcc-8172-f279c0bc1d44", "metadata": {"aucs": [0.3093386945434008, 0.35103492624032984, 0.3512840074130703, 0.32479371027566273, 0.34152874504947894, 0.3511895621453729, 0.326322339824361, 0.373835210244272, 0.3163800408201125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002855270486521455, 0.008717233467792518, 9.999999999998899e-05, 0.0701041104768032, 0.10017078743682595, 0.0720577697552488, 0.11985776270135651, 0.06654874561402102, 0.09389918965632893, 0.08858584878355957, 0.10879958092688702, 0.0846958848487509, 0.08341976180464394, 0.08057684524595021, 0.06533489926344105, 0.09001644567337497, 0.058766070073853705, 0.06288294753752488, 0.08089015334003047, 0.07836959478081607, 0.05130507794621575, 0.929189071888373, 0.9472615840796641, 0.9563803413147043, 0.9313449182377591, 0.9381871841952624, 0.9652336965630035, 0.970213667076887, 0.9760770425511898, 0.9819020964253169, 0.21172732776494396, 0.23046493744780738, 0.2316009259163222, 0.2089809653351452, 0.21293151487073736, 0.20790917683346977, 0.22328260172146308, 0.26832273237536997, 0.227366337596423, 0.2732050029331191, 0.2572119354125877, 0.25079834566411097, 0.2666853256427939, 0.26429684712065205, 0.27894333019453166, 0.2702854730419241, 0.2347122568310367, 0.23548416639704295, 0.14943647360119394, 0.12939004849006885, 0.12253147215526128, 0.13768544876991762, 0.11313365195004577, 0.12868857542417622, 0.1538356496439428, 0.14922542781143222, 0.12562018887000048, 0.12410837300259914, 0.18356024542558103, 0.10660465530168461, 0.14064882746621954, 0.11078612637424756, 0.11607595160158068, 0.12251686319034893, 0.1310179298089592, 0.1111830937473538, 0.018031986272602496, 9.999999999998899e-05, 0.022264267168922047, 0.022521549177753286, 0.00033197614457325386, 0.004971049047721499, 9.999999999998899e-05, 0.0011844611974889396, 9.999999999998899e-05, 0.11014676347842256, 0.09061920203598706, 0.06009558120236469, 0.14717316521974244, 0.0462179084995622, 0.0515796647173733, 0.1381062205642396, 0.06845411397878431, 0.09425293293808112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05420156665971432, 0.04821755506037839, 0.05144758070017108, 0.08376304158079984, 0.05828393770450602, 0.06704981247157427, 0.0604012398961018, 0.06303839903518127, 0.08482959025031322, 0.3564690667542276, 0.36764134024760264, 0.3448062115559586, 0.32600610299510113, 0.3276464958812271, 0.336642712927828, 0.2993108006469273, 0.3090617793605357, 0.3496818033113853, 0.08782605403391863, 0.1117312860371803, 0.11462631619439323, 0.10872708174143175, 0.113790866211536, 0.06991822211356102, 0.1371843476468403, 0.10466881401780137, 0.10525520011895373, 0.19499902332647756, 0.160475148714056, 0.18635965389271092, 0.17171952805756396, 0.16273160504393747, 0.1736829305599603, 0.1465896189225414, 0.16953609166657446, 0.18916814963821438, 0.2326577918640267, 0.20687761199950205, 0.23023136063313987, 0.2572642474839203, 0.27476763245495717, 0.2333794125992189, 0.19947313698816282, 0.20850539558655656, 0.09622748693961636, 0.22050349949186598, 0.1296233983519025, 0.1472652069742757, 0.1962957431968111, 0.1946501498173122, 0.12034436678482963, 0.1548110958873905, 0.1303213819190716, 0.12879178016464898, 0.22872345239430714, 0.19738892136075215, 0.20000882751201488, 0.2064993319120897, 0.22208115199348044, 0.21655280468191396, 0.2217185936422844, 0.1605582249941504, 0.21936936424291298, 0.1958463735883471, 0.19765049061332995, 0.1893700939355013, 0.20910485767907416, 0.19411695037878618, 0.17396509358397816, 0.2044229593291489, 0.17880658393978555, 0.19710136615160423, 0.1223294639752186, 0.13365030456866278, 0.10387023576209553, 0.11402031376332522, 0.11258203769282538, 0.061838621383540016, 0.10861264912319912, 0.12413720543893303, 0.16775885459373263, 0.5270838147186014, 0.11314603081895946, 0.08211400604718144, 0.1544487298602173, 0.2082696859781903, 0.20798975057485392, 0.45604508504215724, 0.16708532211635663, 0.314081658572268, 0.19734765367315132, 0.18669978151705324, 0.17392178209885734, 0.19540708108505367, 0.1856278685214403, 0.19226579287683088, 0.1807589067685873, 0.20794515452909423, 0.199022219232857, 0.09428032571720157, 0.1020121725193005, 0.09247242896887542, 0.07501842275328563, 0.09007794044398176, 0.097231942476666, 0.11072396244588634, 0.06869941845135452, 0.08250831210225174]}, "mutation_prompt": null}
{"id": "17f50cd2-b9ba-48a7-99d8-36cbf77a83bd", "solution": "class FireAntOptimizationMutationImprovedSpeed(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n            else:\n                self.step_size *= 1.01  # Increase step size if no improvement\n            \n        return best_solution", "name": "FireAntOptimizationMutationImprovedSpeed", "description": "Introducing dynamic step size adjustment based on fitness improvement to enhance optimization speed.", "configspace": "", "generation": 26, "fitness": 0.16279688884843752, "feedback": "The algorithm FireAntOptimizationMutationImprovedSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "d4d8859e-d50d-4fcc-8172-f279c0bc1d44", "metadata": {"aucs": [0.2858459610065147, 0.2768620308183425, 0.2858043696944319, 0.2586154693435623, 0.29147574544964894, 0.27293233384994164, 0.3155178169108397, 0.28559197264872505, 0.31078706884935936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06590300073897337, 0.05929809455484869, 0.0704303783278849, 0.07595067914860176, 0.09219265073511074, 0.08412217525651289, 0.07067106194357198, 0.07812500438160519, 0.07920724513288746, 0.0787403160384803, 0.05521055742000136, 0.04641840979547174, 0.05950365665566426, 0.08341073661337906, 0.044686801587815905, 0.07211995847197139, 0.06376684912953623, 0.036844198921743176, 0.9335203117125066, 0.9652786868168833, 0.9611782555128359, 0.9465235782882643, 0.9509018635642787, 0.9540136727857318, 0.9768143045447243, 0.9841382212361721, 0.9836822134137283, 0.16141036270603837, 0.15473924097274594, 0.17564121062985527, 0.14559306185822374, 0.1768901383846383, 0.20018794120872319, 0.21355921937125033, 0.14952136573672958, 0.13868377452951575, 0.21058446857480528, 0.12694450123499723, 0.21051799879087973, 0.2618688390982783, 0.1936242477190886, 0.24619798612565325, 0.23797627745578698, 0.21860030817442833, 0.17521176472493882, 0.12143287877280418, 0.12479511731554815, 0.10308864378788263, 0.0777159848961283, 0.09256265516169482, 0.1253373686850373, 0.07009463060271026, 0.0696660631216861, 0.10378625230007799, 0.09067867817001973, 0.11304318425220994, 0.08228134576411916, 0.11253112377444285, 0.07332231820530255, 0.0894745063197544, 0.11866807910307431, 0.07213212831352334, 0.10476000335023183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014021511779083173, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11229940767706958, 0.08540701934942974, 0.04722768414526923, 0.050787755086853625, 0.02059404124128983, 0.006800937729368517, 0.042802907346032204, 0.04005590768879852, 0.052922308009286656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020831347820968626, 0.03253116267953993, 0.060200199941558674, 0.0555218994460116, 0.032550743313213615, 0.010301714102899706, 0.03181770576791454, 0.033901423670569475, 0.0674366360482902, 0.2708833019102178, 0.27558957204297585, 0.26145125584941553, 0.3146361135745953, 0.30705678065902153, 0.284603363423343, 0.2746092567409357, 0.2774859171551589, 0.3431465126063076, 0.07656013635365488, 0.07622690613341243, 0.07788893826575471, 0.06722195336614822, 0.10712677464192621, 0.07153449758149144, 0.07354773564971706, 0.08476430797804746, 0.09461047951266277, 0.14005208916741319, 0.15803763926417336, 0.13589540295199276, 0.1582731546086774, 0.13345113966720112, 0.15396997563699988, 0.16275953805616517, 0.1352436275377097, 0.15394820232385686, 0.22139026994018085, 0.21609535939120106, 0.18318337091136627, 0.24332710835656224, 0.20807443551734683, 0.23655342171693217, 0.18910117463997267, 0.21153569953326457, 0.1782056720802162, 0.15497385967790467, 0.14968847277262698, 0.16072173996975647, 0.17107741577895197, 0.18532469467194101, 0.13716698353738266, 0.16177613115614498, 0.14446505413995203, 0.15997018930288742, 0.19512535672147813, 0.20343960964302854, 0.17049784721525318, 0.18292838183176574, 0.17573181961632067, 0.20530398116749726, 0.17135732271145643, 0.18161989918078603, 0.16821603532755258, 0.1753728781683962, 0.18356012888359485, 0.17508731596375782, 0.16637482599741593, 0.17251781812485711, 0.1719518879994656, 0.2044229593291489, 0.16614258064235532, 0.19228826448199765, 0.1633310180976152, 0.12788283165158687, 0.26215918278503136, 0.21777095182545336, 0.1629177508840436, 0.15603784764688622, 0.11955904483812296, 0.15307704790834653, 0.15865811973655142, 0.35617907444309627, 0.11951896632115244, 0.10757388164149762, 0.1455493371125769, 0.20427459611761511, 0.18717817300270112, 0.23015827038800518, 0.15777261462716474, 0.16107994523697433, 0.17753280882727773, 0.19045111732788145, 0.18745087183382514, 0.17325853992537255, 0.19614565901054648, 0.17973638155849458, 0.20374638806102352, 0.17780289653618842, 0.1769401349816515, 0.07363468344791513, 0.09178471054008863, 0.07017843525857681, 0.08715883834666383, 0.07304725081565122, 0.07188132679961223, 0.06471658115897116, 0.06392329842894984, 0.06297453870417014]}, "mutation_prompt": null}
{"id": "a698f89f-0f55-48d1-9bd2-bfd125e5e4e6", "solution": "class FireAntOptimizationMutationImprovedSpeed(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n            else:\n                self.step_size *= 1.01  # Adaptive step size adjustment based on fitness improvement\n        \n        return best_solution", "name": "FireAntOptimizationMutationImprovedSpeed", "description": "Implementing adaptive step size adjustment based on fitness improvement to enhance convergence speed", "configspace": "", "generation": 27, "fitness": 0.16279688884843752, "feedback": "The algorithm FireAntOptimizationMutationImprovedSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "d4d8859e-d50d-4fcc-8172-f279c0bc1d44", "metadata": {"aucs": [0.2858459610065147, 0.2768620308183425, 0.2858043696944319, 0.2586154693435623, 0.29147574544964894, 0.27293233384994164, 0.3155178169108397, 0.28559197264872505, 0.31078706884935936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06590300073897337, 0.05929809455484869, 0.0704303783278849, 0.07595067914860176, 0.09219265073511074, 0.08412217525651289, 0.07067106194357198, 0.07812500438160519, 0.07920724513288746, 0.0787403160384803, 0.05521055742000136, 0.04641840979547174, 0.05950365665566426, 0.08341073661337906, 0.044686801587815905, 0.07211995847197139, 0.06376684912953623, 0.036844198921743176, 0.9335203117125066, 0.9652786868168833, 0.9611782555128359, 0.9465235782882643, 0.9509018635642787, 0.9540136727857318, 0.9768143045447243, 0.9841382212361721, 0.9836822134137283, 0.16141036270603837, 0.15473924097274594, 0.17564121062985527, 0.14559306185822374, 0.1768901383846383, 0.20018794120872319, 0.21355921937125033, 0.14952136573672958, 0.13868377452951575, 0.21058446857480528, 0.12694450123499723, 0.21051799879087973, 0.2618688390982783, 0.1936242477190886, 0.24619798612565325, 0.23797627745578698, 0.21860030817442833, 0.17521176472493882, 0.12143287877280418, 0.12479511731554815, 0.10308864378788263, 0.0777159848961283, 0.09256265516169482, 0.1253373686850373, 0.07009463060271026, 0.0696660631216861, 0.10378625230007799, 0.09067867817001973, 0.11304318425220994, 0.08228134576411916, 0.11253112377444285, 0.07332231820530255, 0.0894745063197544, 0.11866807910307431, 0.07213212831352334, 0.10476000335023183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014021511779083173, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11229940767706958, 0.08540701934942974, 0.04722768414526923, 0.050787755086853625, 0.02059404124128983, 0.006800937729368517, 0.042802907346032204, 0.04005590768879852, 0.052922308009286656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020831347820968626, 0.03253116267953993, 0.060200199941558674, 0.0555218994460116, 0.032550743313213615, 0.010301714102899706, 0.03181770576791454, 0.033901423670569475, 0.0674366360482902, 0.2708833019102178, 0.27558957204297585, 0.26145125584941553, 0.3146361135745953, 0.30705678065902153, 0.284603363423343, 0.2746092567409357, 0.2774859171551589, 0.3431465126063076, 0.07656013635365488, 0.07622690613341243, 0.07788893826575471, 0.06722195336614822, 0.10712677464192621, 0.07153449758149144, 0.07354773564971706, 0.08476430797804746, 0.09461047951266277, 0.14005208916741319, 0.15803763926417336, 0.13589540295199276, 0.1582731546086774, 0.13345113966720112, 0.15396997563699988, 0.16275953805616517, 0.1352436275377097, 0.15394820232385686, 0.22139026994018085, 0.21609535939120106, 0.18318337091136627, 0.24332710835656224, 0.20807443551734683, 0.23655342171693217, 0.18910117463997267, 0.21153569953326457, 0.1782056720802162, 0.15497385967790467, 0.14968847277262698, 0.16072173996975647, 0.17107741577895197, 0.18532469467194101, 0.13716698353738266, 0.16177613115614498, 0.14446505413995203, 0.15997018930288742, 0.19512535672147813, 0.20343960964302854, 0.17049784721525318, 0.18292838183176574, 0.17573181961632067, 0.20530398116749726, 0.17135732271145643, 0.18161989918078603, 0.16821603532755258, 0.1753728781683962, 0.18356012888359485, 0.17508731596375782, 0.16637482599741593, 0.17251781812485711, 0.1719518879994656, 0.2044229593291489, 0.16614258064235532, 0.19228826448199765, 0.1633310180976152, 0.12788283165158687, 0.26215918278503136, 0.21777095182545336, 0.1629177508840436, 0.15603784764688622, 0.11955904483812296, 0.15307704790834653, 0.15865811973655142, 0.35617907444309627, 0.11951896632115244, 0.10757388164149762, 0.1455493371125769, 0.20427459611761511, 0.18717817300270112, 0.23015827038800518, 0.15777261462716474, 0.16107994523697433, 0.17753280882727773, 0.19045111732788145, 0.18745087183382514, 0.17325853992537255, 0.19614565901054648, 0.17973638155849458, 0.20374638806102352, 0.17780289653618842, 0.1769401349816515, 0.07363468344791513, 0.09178471054008863, 0.07017843525857681, 0.08715883834666383, 0.07304725081565122, 0.07188132679961223, 0.06471658115897116, 0.06392329842894984, 0.06297453870417014]}, "mutation_prompt": null}
{"id": "e1431fde-4278-4f9f-850c-f50cdf1057bb", "solution": "class FireAntOptimizationMutationImproved(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        step_size_factor = 1.0\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * step_size_factor * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                step_size_factor *= 0.99\n        \n        return best_solution", "name": "FireAntOptimizationMutationImproved", "description": "Introducing adaptive step size adjustment to dynamically control the exploration-exploitation trade-off for faster convergence.", "configspace": "", "generation": 28, "fitness": 0.2083787810952279, "feedback": "The algorithm FireAntOptimizationMutationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "d4d8859e-d50d-4fcc-8172-f279c0bc1d44", "metadata": {"aucs": [0.4285995801636141, 0.43421271335638534, 0.40777540755951336, 0.4233460189605541, 0.41911119030731914, 0.42607064013914075, 0.45026609767267156, 0.4529866506816308, 0.4422788517417148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008718230442603225, 9.999999999998899e-05, 0.03677066179576427, 0.05101699529331705, 9.999999999998899e-05, 0.06619440836658708, 0.08545765543334816, 0.13109279689541142, 0.12744539663469823, 0.1385502626967018, 0.10999865277389886, 0.08841280270553431, 0.1254866575905882, 0.09296650290837838, 0.1079569434362524, 0.09293282792706481, 0.08606850477166539, 0.09868582882746701, 0.0834651332258376, 0.09151266988989537, 0.07296988535140203, 0.08168650137971423, 0.09465627509334062, 0.9146712236190885, 0.9493250840830052, 0.9568866496060843, 0.9171262631972117, 0.9384232908991167, 0.9649944856527417, 0.9768630412523291, 0.9798709228080319, 0.9836759106903367, 0.2876470392856648, 0.3087364188128555, 0.2812889888224337, 0.3384353961672567, 0.3001566918113484, 0.29783487359757255, 0.307945905590973, 0.276083586708623, 0.2646462836002288, 0.3618407481773742, 0.2778518689570908, 0.2729079845849034, 0.3582641909754867, 0.24704827532456375, 0.3500492206152328, 0.26457979013352273, 0.24390553438097962, 0.27789885723845675, 0.14883971001943463, 0.146966548766163, 0.19806523963491152, 0.1431151910254752, 0.18453382287658893, 0.150436921781256, 0.13534889636817804, 0.17861874350562612, 0.19153222885327859, 0.16124350107124807, 0.14959386542075592, 0.18934254205637635, 0.1925415348966114, 0.19814814004201498, 0.19621384453194468, 0.14316117922401828, 0.1467034859398978, 0.20537819947130087, 0.05537007498866664, 9.999999999998899e-05, 0.040943836340476825, 0.01677443684959945, 0.039292450616666974, 0.07838865638834469, 0.002292878052055136, 0.05008195296403306, 0.008291459763738018, 0.15523715162408003, 0.05301252287717195, 0.06244492430645454, 0.04824733955833471, 0.02102105967737955, 0.042039155084404256, 0.06734296737508594, 0.06775536400425919, 0.07548560190650855, 0.00010231004841776414, 9.999999999998899e-05, 0.00692323302589215, 0.004991267974562619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09897351522327369, 0.07925259204322777, 0.1113247978628964, 0.10102217519863865, 0.10573589316254461, 0.13404035654304047, 0.11085371758989482, 0.09966198680602067, 0.12136495263943092, 0.3857169588423397, 0.39701960285891613, 0.39437945626815285, 0.3891069423863701, 0.43676100089436454, 0.40886835955781975, 0.3826850512618678, 0.397244421460897, 0.3934915840816482, 0.09187348934322404, 0.08766766324595776, 0.0956622351556462, 0.11006589173728298, 0.11999655304877, 0.08739429171065372, 0.1058962427795126, 0.10148087855362464, 0.10870636562925173, 0.22819032697471797, 0.14662808856702525, 0.19070270025359992, 0.1949112016562765, 0.2135528326415128, 0.295272786768775, 0.1685144200820261, 0.22497865467159384, 0.1768663375102396, 0.27178021959937715, 0.26229020023598415, 0.24002192934575994, 0.2918239115147985, 0.2673091960075449, 0.19758126982012658, 0.28577424964807674, 0.26908348448542796, 0.2645805237644989, 0.19824729762785864, 0.2236224915274031, 0.17023161218198324, 0.21855433063711116, 0.21631819104121086, 0.18673323609691994, 0.21749101944471927, 0.22296029822869445, 0.19507022260270424, 0.19108719421821507, 0.18569750446669364, 0.2115820626998206, 0.19969058147004792, 0.17509973252679212, 0.21831858233362378, 0.21572334995419928, 0.22031391999527095, 0.20973669656804894, 0.18498542861355127, 0.20528521874392514, 0.29787755513517344, 0.20922299089925067, 0.19740056704854048, 0.19692796493843445, 0.2044229593291489, 0.2116012752939448, 0.1994940027209927, 0.12306592215403667, 0.13634996183917447, 0.10498674377850581, 0.11486646072697382, 0.11240036010365961, 0.06192593685529524, 0.1087476194382927, 0.1258362963138372, 0.16878782976580098, 0.5661859459246419, 0.11336597822798611, 0.08320940223062623, 0.15623226228253584, 0.21204244221927426, 0.21248462551320135, 0.5809340461976157, 0.1679734325913812, 0.5400367345445838, 0.1901985710370745, 0.18570612938244369, 0.2047828267399565, 0.1898392069745326, 0.19359127662965803, 0.18121042487514638, 0.20881041136354983, 0.19679705617201282, 0.18107852222398146, 0.08712171734282981, 0.09375535557268577, 0.07298637282501186, 0.09670379463650536, 0.06635901191302784, 0.07561654376136762, 0.08836313416247432, 0.08340557466615284, 0.08147968028074482]}, "mutation_prompt": null}
{"id": "49c055df-3b26-4db8-930a-44e326a181d2", "solution": "class FireAntOptimizationMutationImproved(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99 + 0.05 * np.random.rand()  # Dynamic step size adaptation\n         \n        return best_solution", "name": "FireAntOptimizationMutationImproved", "description": "Introducing a dynamic step size adaptation mechanism to adjust the search step size during optimization based on the fitness landscape to enhance convergence speed.", "configspace": "", "generation": 29, "fitness": 0.17403851181151067, "feedback": "The algorithm FireAntOptimizationMutationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "d4d8859e-d50d-4fcc-8172-f279c0bc1d44", "metadata": {"aucs": [0.28311898595647045, 0.295424055617725, 0.3135170605937687, 0.27895049048577236, 0.3422949982657466, 0.3220527240813119, 0.30005129835233724, 0.2956738407166877, 0.31020910781652156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06493568719490794, 0.08315684481721086, 0.09045336543510407, 0.08373000224153493, 0.08054400673630224, 0.09738989724547609, 0.07495860968972479, 0.08583462853945034, 0.08480875741090754, 0.08883306755302578, 0.06286339559231324, 0.06877327521478804, 0.08143881410099707, 0.06146797259671055, 0.06607097914167004, 0.06689019470590374, 0.06221306824858963, 0.0855238104334205, 0.9839615373457248, 0.9671702629644491, 0.9813779683940965, 0.96467320490751, 0.9591917556632963, 0.9889429275807277, 0.979088810461566, 0.9806643926464893, 0.975003871174295, 0.1771978453000258, 0.1614079650881517, 0.15433341848288507, 0.1600649642712595, 0.1563920865017523, 0.15437010181843747, 0.1791477037644561, 0.17874891018264172, 0.19445280201322634, 0.21132865897058906, 0.20328970826935922, 0.21014283863819905, 0.2286466482328232, 0.22617139177869872, 0.24187772116573092, 0.22595533560166747, 0.2440052258655463, 0.2561110244744599, 0.1122549132786469, 0.10074228804446794, 0.10303954141213578, 0.0878356684090229, 0.08566172833042784, 0.09620778615001713, 0.09047571700789647, 0.15410376130078862, 0.12210649214997649, 0.13193884201627826, 0.11581414778889298, 0.12171363203838714, 0.1286352008351983, 0.13124715905697482, 0.11947856917519917, 0.09651446094494187, 0.07712293335658127, 0.09185733503606774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06535339409605545, 0.09691651934231882, 0.12215755883911028, 0.07079341923440408, 0.05214327475577607, 0.04597247613176969, 0.1123701608968748, 0.064359043113141, 0.05809488919875261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0471856836801835, 0.08080286895731548, 0.050435004917513515, 0.03228530609461655, 0.05981410657245467, 0.03254948816606884, 0.041274909061512544, 0.03574883415961316, 0.03647565132422437, 0.34405495836364186, 0.3310115794937212, 0.3176500915278301, 0.2936115850059118, 0.2728209058168207, 0.32136361726808693, 0.3011953234491631, 0.28916622257362956, 0.28324096751105565, 0.07546327763908156, 0.06474857983768512, 0.07003215795807172, 0.06464863557042022, 0.06822947511219557, 0.07193723785787076, 0.08512188997067083, 0.08874416591126244, 0.07391181622690202, 0.15200021122262586, 0.153379397161015, 0.13691357574988194, 0.17442290108179237, 0.14553495221904955, 0.15283944472340805, 0.19181263639963808, 0.17068455906519353, 0.1421956269296093, 0.23421598384071352, 0.24514107412371933, 0.19869196771531739, 0.20334965162873864, 0.22092395199800408, 0.22204958416185505, 0.23897999316419505, 0.2491221609432671, 0.22556192079252269, 0.17430710606216493, 0.15536032945375644, 0.16077609514807423, 0.1537421813854224, 0.17382923455702515, 0.14958098426465294, 0.15042972747539274, 0.14808127111261093, 0.1701410861499475, 0.17278307540112858, 0.16960188189048253, 0.1824071677138921, 0.16921480783201714, 0.20529065142265146, 0.1845980133294428, 0.20403819338342166, 0.17597735320556562, 0.18181175235303704, 0.17778970280859563, 0.17710352448889788, 0.16492843422254833, 0.1707927541556421, 0.17479894385846384, 0.17452330933679472, 0.17751618882553977, 0.16650316739347637, 0.16260973953732505, 0.1810301634834608, 0.1325362697570155, 0.37385435669072686, 0.43464365729647525, 0.18459451930054316, 0.15131251099439647, 0.12786174068924006, 0.14096294007610743, 0.37430172724410105, 0.38504265774793545, 0.12176541744184599, 0.19461749151716945, 0.0954392009906917, 0.2014940056969473, 0.21293475642470516, 0.33223096470973157, 0.17590811152027086, 0.34314413241202313, 0.2054288004463325, 0.1915181993600934, 0.1824441577965098, 0.171657110969614, 0.18435546027372018, 0.1860729004056244, 0.18275574760815338, 0.19326569442761743, 0.19363397619900424, 0.062025636398454265, 0.08344467764185359, 0.06155476073790067, 0.0747477280554012, 0.05922266505241691, 0.07572507539099749, 0.13803259726627826, 0.07242283235663438, 0.05794636490772298]}, "mutation_prompt": null}
{"id": "462af825-f124-4a78-b793-3b32462e6a29", "solution": "class FireAntOptimizationMutationImproved(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:  # Dynamic step size adaptation\n                    self.step_size *= 1.01\n        \n        return best_solution", "name": "FireAntOptimizationMutationImproved", "description": "Implementing dynamic step size adaptation to improve convergence speed.", "configspace": "", "generation": 30, "fitness": 0.20883078918021322, "feedback": "The algorithm FireAntOptimizationMutationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "d4d8859e-d50d-4fcc-8172-f279c0bc1d44", "metadata": {"aucs": [0.4068826170617116, 0.47571253633175015, 0.40494554809023475, 0.43590302869765274, 0.4263624301775867, 0.41616030558860473, 0.4329229754184204, 0.4491803444031538, 0.4382576853523804, 9.999999999998899e-05, 9.999999999998899e-05, 0.015574863628086688, 9.999999999998899e-05, 0.025018247590534726, 0.010790513340217855, 9.999999999998899e-05, 0.02823157229929807, 9.999999999998899e-05, 0.12049268678826253, 0.08405648720176728, 0.10541499362730444, 0.13019358609059395, 0.09614552657180042, 0.10999865277389886, 0.12328072528143608, 0.09906884269998262, 0.09376542654157616, 0.0832999517225762, 0.0780241233532013, 0.08957504832041907, 0.07392225447345568, 0.0877379693139293, 0.08038528973888437, 0.07995309560682307, 0.08978354996603921, 0.09575079445800805, 0.9147671514299913, 0.9558904994490728, 0.9568866496060843, 0.9176695017398938, 0.9384825946905366, 0.9650358707106956, 0.9768862768486868, 0.9677917380353492, 0.9836827890549369, 0.2909172265914368, 0.3095562342381464, 0.2943222968513506, 0.29700646705720224, 0.3280679549056298, 0.28628797819639606, 0.2972656456733983, 0.27758641411011986, 0.2817487994816764, 0.22974692564954136, 0.29158642409194946, 0.2557097389733721, 0.2686087622105606, 0.3267901144231983, 0.3758247806310978, 0.3328678376880362, 0.27692405000515785, 0.33480731561970456, 0.14167924013042899, 0.16993952664186018, 0.21540698845661532, 0.12120331821558217, 0.17453919107135984, 0.22747997471902204, 0.21364062863206257, 0.18408292905893564, 0.17249494053396397, 0.15448353343692067, 0.16674995755846522, 0.16309598143076487, 0.17707333245958834, 0.15467636072233493, 0.16812649177344552, 0.1771714386883767, 0.20739707404974772, 0.17703452328905223, 0.016792178793764156, 9.999999999998899e-05, 0.048582336692310824, 0.005209432989146445, 0.053301198909455505, 0.03960994970712639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14115604321487663, 0.10193717893981502, 0.09720138565627023, 0.04824733955833471, 0.043660744051779665, 0.03742372425175977, 0.07074201186961859, 0.05602805249666709, 0.020880559413626876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037433410171148207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014079325125210373, 0.08115233663000165, 0.10143704296877276, 0.08675503023133191, 0.09374371224455758, 0.10468185426366095, 0.1137574836261025, 0.10475179545715185, 0.14145156448181007, 0.11183207745459656, 0.41856390197258175, 0.406655046645796, 0.39193628203785513, 0.4144168207565806, 0.40006907842067396, 0.41541244076662365, 0.39929554790368615, 0.408980094793303, 0.40739166562094853, 0.0997865021182901, 0.13587299853382606, 0.09845749677882232, 0.10571436117250554, 0.09377346163880351, 0.12082298171845218, 0.1058962427795126, 0.08215721500021222, 0.08600075784551986, 0.22244122208331363, 0.2383357947624729, 0.20410817535247838, 0.2553046955866576, 0.2271340216585369, 0.27081649049237966, 0.24589959629471847, 0.22779752257205643, 0.21589411562237748, 0.2833876201227159, 0.2695455754661601, 0.2760221799416408, 0.2755731342984602, 0.2902812683803876, 0.28768865565585544, 0.20232969099321996, 0.20817728320854056, 0.2518061208903004, 0.2037697124751976, 0.21264719575834135, 0.14262049170976276, 0.227583226433267, 0.1976107033986918, 0.20864482640744042, 0.22575004277817334, 0.17610871363684855, 0.14211023563682046, 0.23247192879770318, 0.24526925268739053, 0.22758091634695587, 0.20957032553612498, 0.18890437753706857, 0.22130163333410058, 0.19545034325124078, 0.17924591593526862, 0.21087266078929268, 0.18845181853326143, 0.19192637835138104, 0.21545007912964198, 0.1969667431270551, 0.20065423928100456, 0.2334316509500971, 0.20648960459434051, 0.21072508500091502, 0.18925204185923594, 0.1231050412587118, 0.13584496412300562, 0.10500982951907423, 0.11487142365186342, 0.11243825716815359, 0.06192376636692132, 0.1087337242826798, 0.1252781988981797, 0.1677471751689874, 0.5264555211393775, 0.11331227236748487, 0.08306559487717091, 0.156090254306138, 0.21108980603705008, 0.21242566224429105, 0.5091789634891719, 0.16798047985362097, 0.5289913243564521, 0.18623415332136906, 0.17476678343011898, 0.19225718105399436, 0.2023587884208209, 0.19229463501092336, 0.17511742856752777, 0.2015613911263533, 0.1875425454514441, 0.1932705704192762, 0.07080155633944252, 0.09333097304089055, 0.09997580765266922, 0.0759536101986571, 0.10610221965632793, 0.11119854588808042, 0.07740295152926935, 0.0786582387646575, 0.07493177939680828]}, "mutation_prompt": null}
{"id": "d554f791-24a0-43b4-9f43-940a206faded", "solution": "class FireAntOptimizationMutationImprovedSpeed(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob = 0.2 if func(best_solution) >= best_fitness else 0.1\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:\n                    self.step_size *= 1.01\n        \n        return best_solution", "name": "FireAntOptimizationMutationImprovedSpeed", "description": "Introducing a dynamic mutation probability based on fitness improvement for faster convergence.", "configspace": "", "generation": 31, "fitness": 0.20789867813537627, "feedback": "The algorithm FireAntOptimizationMutationImprovedSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "462af825-f124-4a78-b793-3b32462e6a29", "metadata": {"aucs": [0.4029473388508259, 0.4699229240361642, 0.40097764190161134, 0.43086260174882796, 0.42409783299555137, 0.4136592195858628, 0.429185926360068, 0.4434668937875277, 0.43472142006145, 9.999999999998899e-05, 9.999999999998899e-05, 0.014839359773218375, 9.999999999998899e-05, 0.024418663352168135, 0.01026981315859865, 9.999999999998899e-05, 0.027731583494968404, 9.999999999998899e-05, 0.11991583981057996, 0.08397267443315326, 0.10479685378442394, 0.12990156903351513, 0.09602222701405028, 0.10949388752812572, 0.12280347168950334, 0.09892058963311068, 0.09357526859585175, 0.08329299943488788, 0.07793313202921892, 0.08932381694212421, 0.07369186835388941, 0.08760077027034363, 0.0800456026507349, 0.07980154688953478, 0.08942918238275466, 0.09552095518481307, 0.9110158753312767, 0.9541107743620443, 0.9546123027294907, 0.9141482097647058, 0.936024578290739, 0.963099572184015, 0.9761249038508815, 0.9666562246901714, 0.9825744149032578, 0.2896742552238739, 0.3073801692759973, 0.29230285903021447, 0.29510037675646505, 0.32639773153886176, 0.284415134499317, 0.29561091302495823, 0.2763571155276078, 0.2803282641058604, 0.22958577406256453, 0.2899590340764382, 0.2552812495961009, 0.2679206073808589, 0.32517881108910984, 0.37455015125909796, 0.33186728883184535, 0.27612731164923965, 0.3331607000673734, 0.14129589136755383, 0.1676623795919362, 0.21218142268852658, 0.12064151261808254, 0.17338592743516712, 0.2238156643050444, 0.21305157373402794, 0.1823308744586215, 0.17075571764231412, 0.15289945947745398, 0.1655328438400545, 0.16248451599383185, 0.17500026952889092, 0.15389204161492165, 0.16685584361677397, 0.1758478731774641, 0.2041626435073277, 0.176811787017087, 0.016668387473693258, 9.999999999998899e-05, 0.04691642790877226, 0.0051101317051613915, 0.052138060288964505, 0.038558739589571456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14065500158552235, 0.10185764175414003, 0.09714269639325634, 0.048211218861916816, 0.04314757756841314, 0.03736823926534272, 0.07063299530920197, 0.05595278019689298, 0.02085796428538811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034378434783985945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01338310709800461, 0.08003270132071705, 0.10041416874354692, 0.08631091793878809, 0.09260579843818162, 0.10294460927882465, 0.11229965736361425, 0.10379666170038704, 0.13931685042524045, 0.11024186265084956, 0.41627378140838467, 0.4046052283132954, 0.3888730222138129, 0.4133969980092077, 0.39823520254611977, 0.4134103060311398, 0.39658250906500214, 0.40692248346937454, 0.40552668857300356, 0.099478344644501, 0.13474636830209907, 0.09813500878506443, 0.10546589674797069, 0.09362842893712986, 0.12000989324316191, 0.10582784606924489, 0.08213801560158063, 0.08585806965551823, 0.22102502688113268, 0.236238265092377, 0.20359121078916553, 0.2544454274178567, 0.2264209670536056, 0.26935467753704223, 0.24491593596657235, 0.22687349567374415, 0.21551979343468786, 0.2825703429365364, 0.2691226989281582, 0.275233453918303, 0.2751748598860073, 0.2895442974052599, 0.28714423687001955, 0.2020057537943244, 0.2077797956251789, 0.25094990731401823, 0.2033027784958269, 0.21225438604338098, 0.14186819124803152, 0.2269452746128885, 0.19722913982127244, 0.20822385430826995, 0.22502774092261668, 0.1754967640231111, 0.14174224643962574, 0.2322622303733517, 0.24515459397993578, 0.22723970166768315, 0.20937422326814592, 0.1887877042481737, 0.22066541094317094, 0.19545034325124078, 0.1790276793617731, 0.2106053915627666, 0.18824872118346248, 0.191656827112072, 0.21472645617592612, 0.19660696004819667, 0.20016420127979195, 0.23225103974961425, 0.2064782881117152, 0.2103127707128074, 0.18900187764131238, 0.12308179002390729, 0.13575255631369054, 0.10495004419216569, 0.11485172515482867, 0.11238834071594761, 0.06190537660266382, 0.10872309545599912, 0.12521417515580036, 0.16762281441345217, 0.5241583377644934, 0.11328979448433607, 0.08302963514110795, 0.15600536469239357, 0.21090084028964728, 0.2122276045039242, 0.5048273447606961, 0.16786034276571304, 0.5208143977202556, 0.18528264142101802, 0.17459688550470565, 0.19185339604032825, 0.2018182137548583, 0.1916985560481831, 0.17487145280439131, 0.2013368236487436, 0.1872404859905531, 0.1928191961557405, 0.07075270525656852, 0.09283268638407738, 0.0997646745848515, 0.07588481434386252, 0.106009786255433, 0.11096226615726534, 0.07736968549326284, 0.0785216718000653, 0.074847560612887]}, "mutation_prompt": null}
{"id": "0b94ee6c-4c9d-48f4-bfe8-65f516c3b826", "solution": "class FireAntOptimizationMutationImproved(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        population_size = 10  # Initialize with a small population size\n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:  # Dynamic step size adaptation\n                    self.step_size *= 1.01\n                    population_size = min(50, population_size + 5)  # Increase population size dynamically for faster convergence\n        \n        return best_solution", "name": "FireAntOptimizationMutationImproved", "description": "Implementing a dynamic population size adaptation strategy to enhance convergence speed.", "configspace": "", "generation": 32, "fitness": 0.19603736798121843, "feedback": "The algorithm FireAntOptimizationMutationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "462af825-f124-4a78-b793-3b32462e6a29", "metadata": {"aucs": [0.33868091283211144, 0.37701481541473225, 0.34390542056038753, 0.36687803679491804, 0.34838084469254327, 0.34657922038072075, 0.35722782859925806, 0.3509644325272767, 0.3566276363655708, 0.012244023058675335, 0.007201118218373437, 9.999999999998899e-05, 0.02412198169175661, 0.026513170477771242, 9.999999999998899e-05, 9.999999999998899e-05, 0.014833895027395516, 9.999999999998899e-05, 0.09358436039492868, 0.08926868906883245, 0.09739897915656326, 0.09562496414425681, 0.10933010462348647, 0.0931075433990276, 0.11042218077826804, 0.1063931565676125, 0.09923211437152646, 0.08712621538139631, 0.06351226676804111, 0.09406445299220612, 0.09298766210912068, 0.09725516690926195, 0.09069601230843072, 0.0867647276133735, 0.08414545414038566, 0.09557010994044268, 0.978642953514356, 0.9437738275940657, 0.954387188855477, 0.9425231789138759, 0.956149738951983, 0.9582437541007027, 0.9364032437155105, 0.9548090020174325, 0.9666573214686662, 0.271600584377523, 0.2737843912274579, 0.27224300166262416, 0.25920834032048556, 0.2513511845293501, 0.24612495825605707, 0.24895954823529332, 0.2290058438461976, 0.2659605256981534, 0.27500404230433406, 0.41265092667910575, 0.2767755828475964, 0.2603119399097431, 0.25858212241766787, 0.29968423622984186, 0.27023773907370296, 0.3498570370895262, 0.30625604518564065, 0.13668745288540618, 0.1296036162778642, 0.14514716764691638, 0.11144700183341194, 0.14102849909202775, 0.13682120290141198, 0.16057970324000637, 0.1483652208332331, 0.1563683121900834, 0.154933340745098, 0.13327621265179734, 0.13261965690338307, 0.13993935156996673, 0.13554402703575774, 0.15763390160725632, 0.13411097789216897, 0.15221234884491275, 0.15339943550180235, 9.999999999998899e-05, 9.999999999998899e-05, 0.029692325314947254, 0.019032929357929107, 0.004640038514469369, 0.0161164439388094, 9.999999999998899e-05, 0.002482582361224228, 0.005033133975622661, 0.05230616666526655, 0.07349858946434962, 0.17639652068026246, 0.11806160102199792, 0.04997009090967219, 0.010044641095127593, 0.12992241307216068, 0.031133865369825653, 0.06349328923004105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0695703970203192, 0.07657862926310988, 0.06476065651126828, 0.07608238469570971, 0.07190804723664601, 0.08212431054056102, 0.06667782291754187, 0.0857568948501708, 0.0757536179551116, 0.3456549665728371, 0.39144682821423404, 0.3621284024011263, 0.353735443887657, 0.36358214394665656, 0.36943721488361536, 0.3385975187485546, 0.37629351335726713, 0.38174267256889394, 0.10017360512819828, 0.0851599009071562, 0.10596996823001315, 0.0866399362181397, 0.0896165917857894, 0.1255004319298585, 0.10637868399421657, 0.09866340934988294, 0.11127126297760404, 0.20268982409232617, 0.19421804304791856, 0.22133523164029079, 0.18228425863351683, 0.19809188965228386, 0.2270452584608037, 0.21820457214511968, 0.20182314480931696, 0.2217586331682626, 0.2678855403710201, 0.27043665194228683, 0.2646193750710347, 0.267353244332483, 0.26596095785848894, 0.26195850964658285, 0.2666951507341514, 0.2625467668315209, 0.25062343924909014, 0.20330101843599935, 0.22353615532646087, 0.20487092459559653, 0.21413724815444524, 0.1956809289740824, 0.2023759774959274, 0.22823010203083705, 0.1976435742338568, 0.20822785653111264, 0.190573777071814, 0.21845984772842986, 0.19584637628219692, 0.18576104543852678, 0.21112013416273, 0.20362403747343438, 0.2096064363611554, 0.19373726580557982, 0.19655572450564285, 0.18688312697410914, 0.1853382343826363, 0.19770066594602898, 0.19477015617186666, 0.20444360491592084, 0.18404721013467729, 0.1958015975574654, 0.20385019272614213, 0.20101051454284702, 0.12219696544559722, 0.1345247359888192, 0.09777445270510088, 0.17240436792633285, 0.11257089838496193, 0.06182836580188655, 0.1083607076166967, 0.11468175275558112, 0.16882146814276455, 0.4522159882365183, 0.1124581448193196, 0.08294567982333356, 0.16951955174080502, 0.20847337433857993, 0.20989708229094917, 0.4508344273144771, 0.16867438166996995, 0.43261444696529183, 0.18337444053334406, 0.18241500340316552, 0.19496595103611902, 0.18774956261081732, 0.1881132483718323, 0.19137903938926903, 0.17917130285474336, 0.18688969475175377, 0.19922206148449684, 0.0781879957771684, 0.10745731041954254, 0.08000996067914057, 0.09176913144252008, 0.07182531576667606, 0.10360011442557682, 0.10076286850592098, 0.09135838112132677, 0.08116601070939156]}, "mutation_prompt": null}
{"id": "ae7f71ae-57c8-49f0-80cf-8b985146aa92", "solution": "class FireAntOptimizationMutationImproved(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            \n            def evaluate_fitness(sol):\n                return func(sol)\n            \n            with concurrent.futures.ThreadPoolExecutor() as executor:\n                new_fitnesses = np.array(list(executor.map(evaluate_fitness, new_solutions)))\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:\n                    self.step_size *= 1.01\n        \n        return best_solution", "name": "FireAntOptimizationMutationImproved", "description": "Implementing a parallel evaluation strategy to accelerate function evaluations.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'concurrent' is not defined\").", "error": "NameError(\"name 'concurrent' is not defined\")", "parent_id": "462af825-f124-4a78-b793-3b32462e6a29", "metadata": {}, "mutation_prompt": null}
{"id": "2749c6ad-bbd3-46e8-8650-c50555dff677", "solution": "class DynamicMutationFireAntOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_rate = 0.1\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_rate:  # Introduce dynamic mutation based on fitness improvement rate\n                current_fitness = func(best_solution)\n                mutated_solution = np.clip(best_solution + np.random.normal(0, mutation_rate, self.dim), self.lower_bound, self.upper_bound)\n                new_fitness = func(mutated_solution)\n                mutation_rate *= 1.01 if new_fitness < current_fitness else 0.99\n                best_solution = mutated_solution\n                best_fitness = new_fitness\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:\n                    self.step_size *= 1.01\n        \n        return best_solution", "name": "DynamicMutationFireAntOptimization", "description": "Implementing a dynamic mutation strategy based on the fitness improvement rate to accelerate convergence speed.", "configspace": "", "generation": 34, "fitness": 0.2017504446513376, "feedback": "The algorithm DynamicMutationFireAntOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "462af825-f124-4a78-b793-3b32462e6a29", "metadata": {"aucs": [0.3572104809008302, 0.3554482227321337, 0.3965835934135362, 0.38687551628502714, 0.38640832070171693, 0.3686920764798032, 0.3538987839662814, 0.37402474843168654, 0.38833566443008016, 0.03409758715503941, 0.021361151894128128, 0.0008947002641187529, 0.0007323230026113903, 0.010259618406811, 9.999999999998899e-05, 0.007931439716465816, 0.027978432646224793, 9.999999999998899e-05, 0.10625448760444522, 0.10210602968540794, 0.1135443002095361, 0.1006509260105879, 0.09585882871343088, 0.07915391737280575, 0.12272120084808158, 0.09456317004902981, 0.10085916357657365, 0.08609747655588051, 0.09613546108454596, 0.07398609069474804, 0.08817432062480657, 0.10442933472657479, 0.09766689174285514, 0.0846048029654054, 0.08529361164734306, 0.0841692345748275, 0.9686101018491253, 0.9314039736079298, 0.9653229727595187, 0.9527444965701974, 0.956471946529086, 0.9804642767535193, 0.9714431237952386, 0.964517617097509, 0.9756678157366283, 0.268643209767885, 0.3194602545203138, 0.28830103876175217, 0.2806854041707625, 0.28896495353868046, 0.2873595533233898, 0.2786587335243538, 0.2966017492115419, 0.31451279752598515, 0.3176201817781146, 0.31495823318460137, 0.33081300070829134, 0.28357423915887026, 0.30613032269889306, 0.27334245473254604, 0.29593786692891166, 0.3243630230277438, 0.47129819341499024, 0.15417747522129033, 0.16787124614672044, 0.16209501048571018, 0.13299143866953678, 0.16382430315657437, 0.1541873781845734, 0.14360095197097056, 0.15045996720413968, 0.13105601601389627, 0.14182527764677821, 0.1434865133246891, 0.1547999297789735, 0.13588851181250372, 0.1770734237367445, 0.15242764515395624, 0.13779871308857639, 0.149188978923401, 0.15062274219819194, 9.999999999998899e-05, 0.06455991750256396, 0.0020897198996874256, 0.0009713102947660479, 0.013879948685413757, 0.03364445499862234, 0.012468531597036758, 9.999999999998899e-05, 9.999999999998899e-05, 0.08962257156550368, 0.05651471233094307, 0.06047910825577674, 0.07734067167054381, 0.05310923821007507, 0.03944157625021816, 0.1092436312946864, 0.031554034860840185, 0.061891786936930315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0681443113021416, 0.08505915393578545, 0.09460649242712693, 0.07935694818219108, 0.09083135977701662, 0.08448812485822144, 0.07968087249145572, 0.08649889515680131, 0.08943706863549106, 0.3576051870420084, 0.36572905134813505, 0.3724619154142623, 0.3686972074675846, 0.40085493647969395, 0.3683252876088694, 0.3478412079483849, 0.3574046558026728, 0.3569206742742689, 0.0995887322327007, 0.1074262832684375, 0.11084845303003399, 0.11617385711126549, 0.09411998432561064, 0.08349222079080187, 0.10872572890812338, 0.10489533806281692, 0.09344004217139878, 0.22214777191814206, 0.23180193526755355, 0.22362353080647135, 0.21800932147112795, 0.23302478822738304, 0.22728194506548494, 0.22326912003091948, 0.22257879494525246, 0.1941637638281678, 0.2720216244810376, 0.28446353534905267, 0.2716569035533165, 0.2905341339573996, 0.2879827381000831, 0.28243737535118385, 0.27297726455682203, 0.1942145193886976, 0.10250094864561798, 0.2272190638512922, 0.21678544056158722, 0.15666073369486366, 0.2063920194679959, 0.2261158291914207, 0.20445736945669768, 0.2152794114140536, 0.23228321984923417, 0.205093921558961, 0.1969372638070066, 0.2208183852593666, 0.21257185192933592, 0.1943383150679634, 0.21767644828619492, 0.19547466080304343, 0.21209060768270716, 0.20298655824063672, 0.1901624997408804, 0.19234387519542206, 0.20425770851696656, 0.21146221463570658, 0.19421542580361506, 0.20937224081114425, 0.19122980490331165, 0.2074148725844992, 0.21742370280377088, 0.19866972171615893, 0.12221657830679833, 0.1354857044700608, 0.10409214000740596, 0.11478289378159712, 0.11227043997949893, 0.061786751395258244, 0.10871574217966196, 0.12523332526523023, 0.16854432094440996, 0.4982608902624124, 0.1132047280373164, 0.0829101057700784, 0.15655902812063305, 0.2135338849240208, 0.20914481329159917, 0.47466792641537536, 0.16899021605934905, 0.5208989754909978, 0.18210793800436553, 0.18168866820467022, 0.1904789054667687, 0.19332880475292225, 0.1847293306299056, 0.18834421727481154, 0.19298168367968838, 0.18564071544468486, 0.18407665149903119, 0.08255627795583875, 0.11797095438695138, 0.08212066868034162, 0.08803673300482473, 0.07716603892504537, 0.0926989316609299, 0.09604678237301001, 0.08513368833743495, 0.08815323701455413]}, "mutation_prompt": null}
{"id": "6e0eb55a-ba82-474d-9f2d-c8211d2697e8", "solution": "...\nfrom multiprocessing import Pool\n\nclass FireAntOptimizationMutationImproved(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        with Pool() as pool:\n            for _ in range(self.budget // 2):\n                if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                    best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    best_fitness = func(best_solution)\n                \n                steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n                new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n                \n                new_fitnesses = pool.map(func, new_solutions)  # Evaluate fitness in parallel\n                \n                min_idx = np.argmin(new_fitnesses)\n                if new_fitnesses[min_idx] < best_fitness:\n                    best_solution = new_solutions[min_idx]\n                    best_fitness = new_fitnesses[min_idx]\n                    self.step_size *= 0.99\n                    if _ % 100 == 0:  # Dynamic step size adaptation\n                        self.step_size *= 1.01\n        \n        return best_solution", "name": "FireAntOptimizationMutationImproved", "description": "Introducing parallel processing to evaluate multiple candidate solutions simultaneously to improve convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"cannot pickle 'ioh.iohcpp.problem.Sphere' object\").", "error": "TypeError(\"cannot pickle 'ioh.iohcpp.problem.Sphere' object\")", "parent_id": "462af825-f124-4a78-b793-3b32462e6a29", "metadata": {}, "mutation_prompt": null}
{"id": "39483a2e-feba-45ed-afd0-61c02d68393c", "solution": "class FireAntOptimizationMutationImproved(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        elite_solution = np.copy(best_solution)\n        elite_fitness = best_fitness\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:\n                    self.step_size *= 1.01\n            \n            # Introduce elitism to guide search\n            if best_fitness < elite_fitness:\n                elite_solution = np.copy(best_solution)\n                elite_fitness = best_fitness\n        \n        return elite_solution", "name": "FireAntOptimizationMutationImproved", "description": "Introducing elitism by preserving the best solution found so far to guide the search towards better regions.", "configspace": "", "generation": 36, "fitness": 0.20883078918021322, "feedback": "The algorithm FireAntOptimizationMutationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "462af825-f124-4a78-b793-3b32462e6a29", "metadata": {"aucs": [0.4068826170617116, 0.47571253633175015, 0.40494554809023475, 0.43590302869765274, 0.4263624301775867, 0.41616030558860473, 0.4329229754184204, 0.4491803444031538, 0.4382576853523804, 9.999999999998899e-05, 9.999999999998899e-05, 0.015574863628086688, 9.999999999998899e-05, 0.025018247590534726, 0.010790513340217855, 9.999999999998899e-05, 0.02823157229929807, 9.999999999998899e-05, 0.12049268678826253, 0.08405648720176728, 0.10541499362730444, 0.13019358609059395, 0.09614552657180042, 0.10999865277389886, 0.12328072528143608, 0.09906884269998262, 0.09376542654157616, 0.0832999517225762, 0.0780241233532013, 0.08957504832041907, 0.07392225447345568, 0.0877379693139293, 0.08038528973888437, 0.07995309560682307, 0.08978354996603921, 0.09575079445800805, 0.9147671514299913, 0.9558904994490728, 0.9568866496060843, 0.9176695017398938, 0.9384825946905366, 0.9650358707106956, 0.9768862768486868, 0.9677917380353492, 0.9836827890549369, 0.2909172265914368, 0.3095562342381464, 0.2943222968513506, 0.29700646705720224, 0.3280679549056298, 0.28628797819639606, 0.2972656456733983, 0.27758641411011986, 0.2817487994816764, 0.22974692564954136, 0.29158642409194946, 0.2557097389733721, 0.2686087622105606, 0.3267901144231983, 0.3758247806310978, 0.3328678376880362, 0.27692405000515785, 0.33480731561970456, 0.14167924013042899, 0.16993952664186018, 0.21540698845661532, 0.12120331821558217, 0.17453919107135984, 0.22747997471902204, 0.21364062863206257, 0.18408292905893564, 0.17249494053396397, 0.15448353343692067, 0.16674995755846522, 0.16309598143076487, 0.17707333245958834, 0.15467636072233493, 0.16812649177344552, 0.1771714386883767, 0.20739707404974772, 0.17703452328905223, 0.016792178793764156, 9.999999999998899e-05, 0.048582336692310824, 0.005209432989146445, 0.053301198909455505, 0.03960994970712639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14115604321487663, 0.10193717893981502, 0.09720138565627023, 0.04824733955833471, 0.043660744051779665, 0.03742372425175977, 0.07074201186961859, 0.05602805249666709, 0.020880559413626876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037433410171148207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014079325125210373, 0.08115233663000165, 0.10143704296877276, 0.08675503023133191, 0.09374371224455758, 0.10468185426366095, 0.1137574836261025, 0.10475179545715185, 0.14145156448181007, 0.11183207745459656, 0.41856390197258175, 0.406655046645796, 0.39193628203785513, 0.4144168207565806, 0.40006907842067396, 0.41541244076662365, 0.39929554790368615, 0.408980094793303, 0.40739166562094853, 0.0997865021182901, 0.13587299853382606, 0.09845749677882232, 0.10571436117250554, 0.09377346163880351, 0.12082298171845218, 0.1058962427795126, 0.08215721500021222, 0.08600075784551986, 0.22244122208331363, 0.2383357947624729, 0.20410817535247838, 0.2553046955866576, 0.2271340216585369, 0.27081649049237966, 0.24589959629471847, 0.22779752257205643, 0.21589411562237748, 0.2833876201227159, 0.2695455754661601, 0.2760221799416408, 0.2755731342984602, 0.2902812683803876, 0.28768865565585544, 0.20232969099321996, 0.20817728320854056, 0.2518061208903004, 0.2037697124751976, 0.21264719575834135, 0.14262049170976276, 0.227583226433267, 0.1976107033986918, 0.20864482640744042, 0.22575004277817334, 0.17610871363684855, 0.14211023563682046, 0.23247192879770318, 0.24526925268739053, 0.22758091634695587, 0.20957032553612498, 0.18890437753706857, 0.22130163333410058, 0.19545034325124078, 0.17924591593526862, 0.21087266078929268, 0.18845181853326143, 0.19192637835138104, 0.21545007912964198, 0.1969667431270551, 0.20065423928100456, 0.2334316509500971, 0.20648960459434051, 0.21072508500091502, 0.18925204185923594, 0.1231050412587118, 0.13584496412300562, 0.10500982951907423, 0.11487142365186342, 0.11243825716815359, 0.06192376636692132, 0.1087337242826798, 0.1252781988981797, 0.1677471751689874, 0.5264555211393775, 0.11331227236748487, 0.08306559487717091, 0.156090254306138, 0.21108980603705008, 0.21242566224429105, 0.5091789634891719, 0.16798047985362097, 0.5289913243564521, 0.18623415332136906, 0.17476678343011898, 0.19225718105399436, 0.2023587884208209, 0.19229463501092336, 0.17511742856752777, 0.2015613911263533, 0.1875425454514441, 0.1932705704192762, 0.07080155633944252, 0.09333097304089055, 0.09997580765266922, 0.0759536101986571, 0.10610221965632793, 0.11119854588808042, 0.07740295152926935, 0.0786582387646575, 0.07493177939680828]}, "mutation_prompt": null}
{"id": "83c46d3f-3056-4879-99bb-cdb2023823e4", "solution": "class FireAntOptimizationInertiaImproved(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        vel = np.zeros((self.dim))\n        inertia = 0.9\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                vel = np.random.uniform(-1, 1, self.dim)\n            \n            steps = self.step_size * vel\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                inertia *= 0.98\n                if _ % 100 == 0:  # Dynamic step size adaptation\n                    self.step_size *= 1.01\n        \n        return best_solution", "name": "FireAntOptimizationInertiaImproved", "description": "Implementing novel inertia-based velocity update mechanism to accelerate convergence speed.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, 0.48813503927324753').", "error": "TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, 0.48813503927324753')", "parent_id": "462af825-f124-4a78-b793-3b32462e6a29", "metadata": {}, "mutation_prompt": null}
{"id": "02fdbc3c-1433-4e82-b1b9-a8dcc74be55e", "solution": "class FireAntOptimizationMutationImprovedSpeed(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:  # Dynamic step size adaptation\n                    self.step_size *= 1.01\n                    population_size += 5  # Increase population size for faster convergence\n        \n        return best_solution", "name": "FireAntOptimizationMutationImprovedSpeed", "description": "Implementing a dynamic population size adjustment strategy to enhance convergence speed.", "configspace": "", "generation": 38, "fitness": 0.19603736798121843, "feedback": "The algorithm FireAntOptimizationMutationImprovedSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "462af825-f124-4a78-b793-3b32462e6a29", "metadata": {"aucs": [0.33868091283211144, 0.37701481541473225, 0.34390542056038753, 0.36687803679491804, 0.34838084469254327, 0.34657922038072075, 0.35722782859925806, 0.3509644325272767, 0.3566276363655708, 0.012244023058675335, 0.007201118218373437, 9.999999999998899e-05, 0.02412198169175661, 0.026513170477771242, 9.999999999998899e-05, 9.999999999998899e-05, 0.014833895027395516, 9.999999999998899e-05, 0.09358436039492868, 0.08926868906883245, 0.09739897915656326, 0.09562496414425681, 0.10933010462348647, 0.0931075433990276, 0.11042218077826804, 0.1063931565676125, 0.09923211437152646, 0.08712621538139631, 0.06351226676804111, 0.09406445299220612, 0.09298766210912068, 0.09725516690926195, 0.09069601230843072, 0.0867647276133735, 0.08414545414038566, 0.09557010994044268, 0.978642953514356, 0.9437738275940657, 0.954387188855477, 0.9425231789138759, 0.956149738951983, 0.9582437541007027, 0.9364032437155105, 0.9548090020174325, 0.9666573214686662, 0.271600584377523, 0.2737843912274579, 0.27224300166262416, 0.25920834032048556, 0.2513511845293501, 0.24612495825605707, 0.24895954823529332, 0.2290058438461976, 0.2659605256981534, 0.27500404230433406, 0.41265092667910575, 0.2767755828475964, 0.2603119399097431, 0.25858212241766787, 0.29968423622984186, 0.27023773907370296, 0.3498570370895262, 0.30625604518564065, 0.13668745288540618, 0.1296036162778642, 0.14514716764691638, 0.11144700183341194, 0.14102849909202775, 0.13682120290141198, 0.16057970324000637, 0.1483652208332331, 0.1563683121900834, 0.154933340745098, 0.13327621265179734, 0.13261965690338307, 0.13993935156996673, 0.13554402703575774, 0.15763390160725632, 0.13411097789216897, 0.15221234884491275, 0.15339943550180235, 9.999999999998899e-05, 9.999999999998899e-05, 0.029692325314947254, 0.019032929357929107, 0.004640038514469369, 0.0161164439388094, 9.999999999998899e-05, 0.002482582361224228, 0.005033133975622661, 0.05230616666526655, 0.07349858946434962, 0.17639652068026246, 0.11806160102199792, 0.04997009090967219, 0.010044641095127593, 0.12992241307216068, 0.031133865369825653, 0.06349328923004105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0695703970203192, 0.07657862926310988, 0.06476065651126828, 0.07608238469570971, 0.07190804723664601, 0.08212431054056102, 0.06667782291754187, 0.0857568948501708, 0.0757536179551116, 0.3456549665728371, 0.39144682821423404, 0.3621284024011263, 0.353735443887657, 0.36358214394665656, 0.36943721488361536, 0.3385975187485546, 0.37629351335726713, 0.38174267256889394, 0.10017360512819828, 0.0851599009071562, 0.10596996823001315, 0.0866399362181397, 0.0896165917857894, 0.1255004319298585, 0.10637868399421657, 0.09866340934988294, 0.11127126297760404, 0.20268982409232617, 0.19421804304791856, 0.22133523164029079, 0.18228425863351683, 0.19809188965228386, 0.2270452584608037, 0.21820457214511968, 0.20182314480931696, 0.2217586331682626, 0.2678855403710201, 0.27043665194228683, 0.2646193750710347, 0.267353244332483, 0.26596095785848894, 0.26195850964658285, 0.2666951507341514, 0.2625467668315209, 0.25062343924909014, 0.20330101843599935, 0.22353615532646087, 0.20487092459559653, 0.21413724815444524, 0.1956809289740824, 0.2023759774959274, 0.22823010203083705, 0.1976435742338568, 0.20822785653111264, 0.190573777071814, 0.21845984772842986, 0.19584637628219692, 0.18576104543852678, 0.21112013416273, 0.20362403747343438, 0.2096064363611554, 0.19373726580557982, 0.19655572450564285, 0.18688312697410914, 0.1853382343826363, 0.19770066594602898, 0.19477015617186666, 0.20444360491592084, 0.18404721013467729, 0.1958015975574654, 0.20385019272614213, 0.20101051454284702, 0.12219696544559722, 0.1345247359888192, 0.09777445270510088, 0.17240436792633285, 0.11257089838496193, 0.06182836580188655, 0.1083607076166967, 0.11468175275558112, 0.16882146814276455, 0.4522159882365183, 0.1124581448193196, 0.08294567982333356, 0.16951955174080502, 0.20847337433857993, 0.20989708229094917, 0.4508344273144771, 0.16867438166996995, 0.43261444696529183, 0.18337444053334406, 0.18241500340316552, 0.19496595103611902, 0.18774956261081732, 0.1881132483718323, 0.19137903938926903, 0.17917130285474336, 0.18688969475175377, 0.19922206148449684, 0.0781879957771684, 0.10745731041954254, 0.08000996067914057, 0.09176913144252008, 0.07182531576667606, 0.10360011442557682, 0.10076286850592098, 0.09135838112132677, 0.08116601070939156]}, "mutation_prompt": null}
{"id": "a873c0d7-10f9-4dfa-8db3-2f982cfc56f4", "solution": "class FireAntOptimizationMutationImproved(FireAntOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            mutation_prob = 0.2 + 0.1 * np.cos(0.1 * _)  # Adaptive mutation probability\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:  \n                    self.step_size *= 1.01\n        \n        return best_solution", "name": "FireAntOptimizationMutationImproved", "description": "Implementing adaptive strategy to adjust mutation probability dynamically during optimization to enhance convergence speed.", "configspace": "", "generation": 39, "fitness": 0.20759104264589798, "feedback": "The algorithm FireAntOptimizationMutationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "462af825-f124-4a78-b793-3b32462e6a29", "metadata": {"aucs": [0.46692257381034485, 0.4247328270337174, 0.43442922598109435, 0.42628572783001006, 0.4040816108786921, 0.44137634629412115, 0.44160391732645443, 0.42134096431226076, 0.42627536174304237, 9.999999999998899e-05, 0.003270580770056375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038194950597255195, 9.999999999998899e-05, 0.09321235677911877, 0.09310411355556447, 0.09633646003515584, 0.10457487082781702, 0.09508271413337899, 0.1049887784592689, 0.1254879272469649, 0.09660044552322888, 0.10624365309105321, 0.08836342809088016, 0.09636327003837941, 0.11609871929829929, 0.10687159600824603, 0.09056539178052803, 0.10156319191744656, 0.07911362986110304, 0.09298375992972285, 0.09455953363140068, 0.9331900319052677, 0.9377384675142789, 0.9712526477381261, 0.9469592713526914, 0.9334453880042216, 0.9691423742047645, 0.9747475380036262, 0.9676455353577379, 0.977173731327073, 0.3099602122549996, 0.3330377138902645, 0.30707935582257184, 0.2979520321670216, 0.3146791249878561, 0.30652660914766117, 0.2821224247775398, 0.3041371956771297, 0.2889246327525351, 0.2228677220882863, 0.23846174071738035, 0.2602243582303858, 0.2636478882968717, 0.2724465327794665, 0.2773356193093577, 0.3057305463482908, 0.23465795581029492, 0.3254552630032316, 0.15194941843014986, 0.1787662129614922, 0.17773090868962704, 0.1574223022720005, 0.14583572460312078, 0.174230910580204, 0.16720282724461233, 0.17301576731930512, 0.1592178042273763, 0.20884533279237738, 0.16270490729511933, 0.21366365804932852, 0.1869424224800501, 0.1673808689810823, 0.17265647148784757, 0.1546069549600455, 0.1447175003823573, 0.1813821307423672, 0.06642221303552054, 0.0004487117641736038, 9.999999999998899e-05, 0.01764050554323149, 9.999999999998899e-05, 0.0543790589443095, 9.999999999998899e-05, 0.01847670344201069, 9.999999999998899e-05, 0.05063619427844901, 0.0796253255704642, 0.05791776761711076, 0.11397301330342091, 0.03608097312720315, 0.016536228964248, 0.09281359325503058, 0.05313223272800316, 0.06823289176166314, 0.0033536854287485873, 0.0018685891847497471, 0.022375518293605623, 9.999999999998899e-05, 9.999999999998899e-05, 0.014107442332127351, 0.0036151326540353468, 9.999999999998899e-05, 0.005544939844627006, 0.09903893506621986, 0.0975591834861983, 0.12531191129241892, 0.11040774264618836, 0.1038001425375058, 0.1082590179878341, 0.0981643701191155, 0.1132325429635157, 0.10966362883656677, 0.3950469577099742, 0.39179382833889187, 0.4215872807032067, 0.39719957716377907, 0.4169797720698061, 0.3901518106608298, 0.38274400652125284, 0.3881446137428398, 0.3940218098125783, 0.12512932757121287, 0.09995810192722643, 0.1039099985691091, 0.10799007960471319, 0.09932242157569038, 0.11079092478801245, 0.09165037359464967, 0.10114326579193655, 0.09565277029560326, 0.24456424401270582, 0.2243752034505272, 0.1766265639870115, 0.22227833204270442, 0.26167876251976663, 0.25128857576532404, 0.24279399012727498, 0.18132904153145868, 0.24753649867759986, 0.2655496621737924, 0.282790500598757, 0.17720262924650598, 0.2615545921628113, 0.2851505967118442, 0.25380004400360445, 0.28330589678764584, 0.29244981474158316, 0.2610465164926261, 0.2542140578343707, 0.19780120567227166, 0.20207696893092575, 0.21377521039913872, 0.22732751158801778, 0.2093635461782214, 0.21559538896384434, 0.17652146245525013, 0.22007582143856574, 0.19124350647554333, 0.18821121806501084, 0.20183733132455783, 0.20536022803388498, 0.18710953056769764, 0.20947870443557637, 0.20967452137751807, 0.1760912710612369, 0.20206507118932726, 0.19978016919156982, 0.18020008947197497, 0.20614473427199198, 0.18983926044958377, 0.19587220069429323, 0.20221322240241402, 0.1896692936080211, 0.18645296541029688, 0.17674579275420987, 0.12268115606046792, 0.1366592908295775, 0.10486008796585866, 0.1151175765766127, 0.11230043889409813, 0.06189459879757431, 0.10877693702667368, 0.12577772609673088, 0.16804731820304386, 0.5620453617909646, 0.11320972218182856, 0.12783867045256425, 0.15668134760392094, 0.21156019111069324, 0.21024451792627363, 0.5573554521996438, 0.1685876848631327, 0.4987924529785661, 0.1981979446887815, 0.19824315281385374, 0.2231113195898462, 0.19332177780707982, 0.20573406222088275, 0.1900862302563875, 0.20484487924119366, 0.19734358538547048, 0.19343465159434292, 0.07648846821454103, 0.10212217421001546, 0.0664144068593816, 0.08563794541234637, 0.07515615336607318, 0.0834524550282143, 0.09394401772791405, 0.07823073622561627, 0.0787318898333228]}, "mutation_prompt": null}
{"id": "e9001ab4-f3b4-4bb9-87ed-c845bc21f396", "solution": "import numpy as np\n\nclass HybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:  # Dynamic step size adaptation\n                    self.step_size *= 1.01\n            \n            # Cuckoo search exploration\n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "HybridFireAntCuckooOptimization", "description": "Introducing a hybrid parallel search strategy combining fire ants' local search with cuckoo search for improved convergence speed.", "configspace": "", "generation": 40, "fitness": 0.21779647225959592, "feedback": "The algorithm HybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "462af825-f124-4a78-b793-3b32462e6a29", "metadata": {"aucs": [0.43371296028487505, 0.4369308228705082, 0.4499992873662819, 0.47193055406239637, 0.4153255912851901, 0.4299564550312861, 0.44472423016078444, 0.42756575418995657, 0.41237319840734776, 0.01447317742896359, 9.999999999998899e-05, 9.999999999998899e-05, 0.023774595413597277, 9.999999999998899e-05, 9.999999999998899e-05, 0.04839666403248033, 9.999999999998899e-05, 9.999999999998899e-05, 0.1434273138637593, 0.11783977726065675, 0.1052572976067897, 0.09683760397988006, 0.10362510063487151, 0.11568740781548037, 0.12442561489779214, 0.10150752396762253, 0.1256201498887929, 0.11132923090550229, 0.10630059782674872, 0.10482170468668628, 0.11540597225883342, 0.12027232058371251, 0.10729947722919386, 0.08813189062452642, 0.1173181711054796, 0.08220137384554438, 0.9667223046531699, 0.972713196253197, 0.955410482162891, 0.9444852706907089, 0.9243108244788176, 0.954244790739637, 0.9647673460951837, 0.9670996540688979, 0.962828967556004, 0.3112364522243858, 0.2947514922918564, 0.29408693700218036, 0.29514701961747936, 0.29526180011481606, 0.29458400570272747, 0.27808893637966126, 0.3328339637972889, 0.29141610323779576, 0.3236214451842321, 0.30253588526359776, 0.3332464445442519, 0.6048790285243624, 0.33173627335116296, 0.3383438708090992, 0.3413234312601746, 0.28314470752801535, 0.27168791503276923, 0.16696717151127527, 0.16778009037913566, 0.1626773980217322, 0.16713040528776912, 0.16782474447166673, 0.18349592076699028, 0.18551262975735794, 0.18147112034494284, 0.14919087693286237, 0.16658895769974802, 0.16114806220149858, 0.1598308434129967, 0.1582572009080786, 0.18327295575352298, 0.19463124163008738, 0.16182830742681276, 0.17304677251174994, 0.17102023630647512, 0.019646875895704352, 0.030644711392221358, 0.0008626542893426237, 0.016614891109695384, 0.001976644798526661, 0.03789842994855863, 0.011594716713860587, 0.0023034260677670115, 0.023841686085900426, 0.08328049863977016, 0.07201130952591084, 0.09897071642791166, 0.04686479077102468, 0.08644048951785555, 0.05564232468304631, 0.09799427284637752, 0.0351782785565079, 0.10575355342381232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1146579596593823, 0.10336815729456628, 0.10088951738437568, 0.11359266702850235, 0.1092507910782562, 0.11849802680989685, 0.1182733264259559, 0.11424507822679986, 0.11806133552580611, 0.3891495586624697, 0.40497160880202965, 0.37930494584310004, 0.38705772786754034, 0.3929286159489953, 0.3977762243085593, 0.38855618849216056, 0.4145489219945413, 0.3962329682142658, 0.09944706869618714, 0.11096467112004105, 0.0911266445692307, 0.09162424835290495, 0.1145870886419027, 0.14154761996483212, 0.11633044520841396, 0.11848053167108208, 0.12197493388544556, 0.26167366572523365, 0.26858264368932383, 0.2281030295716473, 0.21813129654039742, 0.2070730800298315, 0.24328387138151653, 0.2448495719180993, 0.2584725642087572, 0.22692308515208848, 0.2646516953185941, 0.2800029947428677, 0.2666828884707746, 0.29557177803204504, 0.29115053838823546, 0.2862370664308479, 0.2854256299858534, 0.30545793717299463, 0.2718393509385233, 0.24571973285741366, 0.2113265488967444, 0.19746786598725907, 0.23007407629023757, 0.20879789513320668, 0.21515010470597407, 0.21171342762543632, 0.21102881017224895, 0.20564385062094925, 0.23000625878292735, 0.195205824004129, 0.20320159582634656, 0.2125206544089191, 0.21070983703098922, 0.22118662808719614, 0.21037755756778065, 0.20379762272969237, 0.20103776021998643, 0.2095931091453217, 0.19695640315071228, 0.18860255001051796, 0.20457957066426935, 0.22457775499328925, 0.1995657169779309, 0.2811432270068932, 0.20817729306107613, 0.19192693617792833, 0.1233867620275727, 0.13600665190014938, 0.10513429555303844, 0.17381755301417956, 0.11249475625738015, 0.062027033172127766, 0.10885162101448931, 0.12593872839205833, 0.1687556877633859, 0.5708272454372584, 0.11321602254922547, 0.578973021129034, 0.15603486000670452, 0.21144396758207262, 0.21172806331049687, 0.5817546852969222, 0.1674268071661823, 0.5079831610303773, 0.20586111990264977, 0.185516786946768, 0.19605062744392698, 0.1909302210636663, 0.18822891107792628, 0.19598284064968052, 0.18964378648669866, 0.18266353565199644, 0.1859454957887151, 0.07925349194102504, 0.11295902754135745, 0.07990139048813649, 0.08539789369010109, 0.07828480482999678, 0.09150754367996394, 0.09784670676436857, 0.07539023848035065, 0.08754891743408733]}, "mutation_prompt": null}
{"id": "0c929d47-4dd9-49b6-86fc-970d59b600cf", "solution": "class HybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2: \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0: \n                    self.step_size *= 1.01 - 0.094  # Dynamic step size adjustment for faster convergence\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "HybridFireAntCuckooOptimization", "description": "Implementing a dynamic step size adjustment for better convergence speed.", "configspace": "", "generation": 41, "fitness": 0.2157433112553169, "feedback": "The algorithm HybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "e9001ab4-f3b4-4bb9-87ed-c845bc21f396", "metadata": {"aucs": [0.43371296028487505, 0.4240333377101204, 0.4499992873662819, 0.4526876438830525, 0.46914058520681856, 0.45287237930411584, 0.4185466942503454, 0.42961614570942164, 0.4304074567943179, 0.01715372375364954, 0.0009431219876577801, 9.999999999998899e-05, 0.04414891616972505, 9.999999999998899e-05, 9.999999999998899e-05, 0.036884313663475, 9.999999999998899e-05, 9.999999999998899e-05, 0.1029511955059752, 0.13935637533239242, 0.09668303475531903, 0.09683760397988006, 0.1133700153644297, 0.1054479509597579, 0.11400972850860547, 0.12356400637176068, 0.1256201498887929, 0.09695580017942373, 0.10299402956776815, 0.11548435152845848, 0.09567824793900959, 0.12194712849838907, 0.08903966391567919, 0.08813189062452642, 0.09067208026434925, 0.055080485563606674, 0.9666861167309279, 0.9703563719894033, 0.955410482162891, 0.9266130599492922, 0.9045306962273364, 0.9603293734478897, 0.9643949907426592, 0.9585984615246279, 0.9622558212558698, 0.2920777204233854, 0.32019142165946923, 0.2954842080490304, 0.3187108897354206, 0.2830809642198082, 0.31089635013477857, 0.30282593622212184, 0.2920352201506071, 0.28316435745995827, 0.3236214451842321, 0.3227983761472105, 0.3342322520054172, 0.3173660027938511, 0.3407092389178058, 0.2764640184780425, 0.3134972999044149, 0.3191611486675976, 0.3400964478527744, 0.16696717151127527, 0.18036208057861935, 0.17216895804341226, 0.1553007310925426, 0.15935548632558771, 0.18023779154767416, 0.15973044184498453, 0.17924741897196583, 0.19520690333959512, 0.16658895769974802, 0.16062411068409477, 0.19019857293262132, 0.1582004957113431, 0.17592229381900815, 0.21529044777813555, 0.16182830742681276, 0.15363815383835988, 0.1671335801122079, 9.999999999998899e-05, 0.01352564424050795, 9.999999999998899e-05, 0.055060148816554855, 9.999999999998899e-05, 0.019443497925016873, 0.014690140756403736, 9.999999999998899e-05, 0.04518978343054203, 0.14949658552826206, 0.08697892646990235, 0.08922021507652722, 0.04375102214706916, 0.03660341288229085, 0.05597690927543264, 0.1440945644777759, 0.03961013881716624, 0.053708434904760516, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026771759225048264, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035716836921112494, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11046077775883534, 0.10814925288684263, 0.10123519008051263, 0.12012959441679072, 0.10115488316117971, 0.1271215252531943, 0.12501329030298514, 0.10531592526245404, 0.11653383452573185, 0.4022677883086868, 0.4103112542244668, 0.392625792315623, 0.41052519226876905, 0.40550689477075774, 0.4095807018387827, 0.3874618317786258, 0.39649427926629066, 0.3985436634745685, 0.12367509936083843, 0.14064416396696322, 0.12100772526608017, 0.13393511110239575, 0.11603862238414131, 0.10436242557323772, 0.13503931210334774, 0.13401554357222178, 0.11795350427365925, 0.24606523810035075, 0.235569752864897, 0.23577394704340693, 0.23328900660061147, 0.24271431039052227, 0.2633006894048565, 0.1798330610830341, 0.2182301721243114, 0.2348425818403933, 0.27681082426677706, 0.17438348568582152, 0.27241046473664443, 0.2943882190477408, 0.28622077192119044, 0.2772197983120669, 0.28372919671648755, 0.30193854816413823, 0.2605519599520014, 0.2404765755973497, 0.2130774686807143, 0.16809529739328644, 0.23488199945284505, 0.22883048619662305, 0.22244080915487208, 0.21171342762543632, 0.21601133704474607, 0.170187571603162, 0.24432948128632093, 0.19343431496662566, 0.22260793048902905, 0.18602595525277488, 0.23276086803984752, 0.20299905732448498, 0.2105818400883115, 0.16228307830726119, 0.20311659973496998, 0.25929202481603775, 0.23230667304794983, 0.2095355707548049, 0.19761827350332306, 0.1886435907784093, 0.21707517188094239, 0.20825734496351267, 0.1876526384005185, 0.195134043285496, 0.12331231980288615, 0.13611346134190283, 0.10421601563550864, 0.17381755301417956, 0.11264874471030595, 0.06202504767598005, 0.10882162273415974, 0.1261447214379816, 0.1687206159870588, 0.5840255298597586, 0.11326619153745376, 0.547700924939859, 0.15593213588448274, 0.21339874239449508, 0.21173857291715392, 0.5770045095006608, 0.16924600964531833, 0.4902009386179652, 0.1848169584826478, 0.19798438343508507, 0.1956896580831614, 0.18552184319040188, 0.18583693364249432, 0.18917089938494736, 0.19977894918054484, 0.1835346642459149, 0.1902335748871148, 0.08510559507737048, 0.07905268016151146, 0.07990139048813649, 0.07040270321386854, 0.07293873269251105, 0.10182647123983357, 0.09310614145826657, 0.07429165511819613, 0.07852453761681188]}, "mutation_prompt": null}
{"id": "c5fcf476-9426-472c-84f6-ce2eb72f8de2", "solution": "import numpy as np\n\nclass EnhancedHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                self.step_size *= 1.001  # Adaptive step size increase\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:\n                    self.step_size *= 1.01  # Dynamic step size adjustment based on iterations\n            \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "EnhancedHybridFireAntCuckooOptimization", "description": "Enhanced convergence speed by introducing adaptive step size for mutation and dynamic step size adjustment based on the number of iterations.", "configspace": "", "generation": 42, "fitness": 0.21759697835660272, "feedback": "The algorithm EnhancedHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "e9001ab4-f3b4-4bb9-87ed-c845bc21f396", "metadata": {"aucs": [0.48819169296128984, 0.4313966041268483, 0.42782381431878913, 0.4395332737547156, 0.4139783074889617, 0.44214003586424455, 0.4268004701941507, 0.4660202704338381, 0.4061318154902488, 0.06898913134377416, 0.023060970281597704, 9.999999999998899e-05, 0.032970328302810215, 9.999999999998899e-05, 9.999999999998899e-05, 0.026894926672534125, 9.999999999998899e-05, 9.999999999998899e-05, 0.121427300977487, 0.13321034538757537, 0.09827118158343762, 0.12345644960439073, 0.11713937240943373, 0.12070371610026653, 0.1108208289918402, 0.12243299509407024, 0.1011551762983709, 0.10181478811513511, 0.14518299734296236, 0.09635801902341845, 0.10098058171494029, 0.10656199811384015, 0.10757972276004746, 0.11700885262741301, 0.11989291173769512, 0.08934089640275256, 0.9667586425322515, 0.9727237151489936, 0.9554270506584395, 0.9441145416778567, 0.9244736733814529, 0.9600214668813792, 0.9647926615722645, 0.967113836697715, 0.9628339620541839, 0.29498386489062, 0.32184284548632813, 0.2989684579815881, 0.3362509851165357, 0.2898364804463347, 0.2907168460256063, 0.2927437822908776, 0.311014951488375, 0.30234102087849635, 0.3130883143141937, 0.28901200010252637, 0.3571262964792944, 0.3065246511266899, 0.2677239470844407, 0.45431524496391507, 0.3582227168009161, 0.2893196408139793, 0.3294178814796437, 0.18458299474817275, 0.16674979877740315, 0.18675221545385534, 0.15139881379710152, 0.17567021079625122, 0.16643146157428523, 0.17232535829429885, 0.15910590448403894, 0.14941923431947002, 0.17894598837952758, 0.15640066577454403, 0.1529640388254413, 0.16691700709079704, 0.15420078521226022, 0.19246709442271182, 0.16015013788485144, 0.1725717184505431, 0.16106889154201876, 0.052576948893821474, 0.04795138616757899, 0.009655400666936265, 0.019208976055263838, 0.026318271598195886, 0.04708698107807596, 0.03501819773675474, 0.034736873927149636, 0.011806424979698416, 0.11396978758334209, 0.057421863119734184, 0.08770513822511472, 0.04376110299880853, 0.06473592890383428, 0.08669003725886071, 0.08957128617434085, 0.06979127875509361, 0.09299019743332015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11446284246693517, 0.09056867307300676, 0.11666107118602997, 0.09778250695772817, 0.10377315719198488, 0.09774327289498486, 0.10121599118284907, 0.11459881061057298, 0.12577837740460196, 0.4002073024075413, 0.379568679827336, 0.4065570265254066, 0.3984561489486582, 0.39710778768054456, 0.40326958055800355, 0.3937764071202279, 0.39773516930547226, 0.3939431797298708, 0.131761364268009, 0.10995964762069887, 0.1389233101753865, 0.10599367085698619, 0.12350427671632336, 0.13422362564884338, 0.13997811825492734, 0.10509875734527852, 0.09044719099096432, 0.2572284306644258, 0.2426251890939949, 0.221434192691495, 0.26327317838873465, 0.21134356740326443, 0.19726884268391687, 0.19647411602405174, 0.25414098903312066, 0.24529261870135244, 0.2930509363726862, 0.2763685956945072, 0.25840667785494575, 0.28466123978111735, 0.2828678287547751, 0.2868326995634993, 0.29092227322967723, 0.26935991257346736, 0.2570280620748272, 0.2344333918907895, 0.21019646247436774, 0.2187336478911318, 0.21436840692683645, 0.23642992130793872, 0.20395151156928337, 0.23228075624861233, 0.1746325453398686, 0.21790593583894624, 0.27997935415571584, 0.2073104701325308, 0.2009689141019474, 0.19590931897958563, 0.20499221315514982, 0.20029258433732633, 0.21908723975680444, 0.247142245676656, 0.22158299829617611, 0.19463354429943036, 0.18850462068328022, 0.1945703331813038, 0.20432094367764053, 0.18738845516036284, 0.19259986932650397, 0.2202652314573752, 0.20714499935971475, 0.20356174328544885, 0.12335450762602851, 0.13659552051558932, 0.10509749348262432, 0.17382602330656027, 0.11197771047556127, 0.062008113251600494, 0.10882736118054814, 0.12576470760330416, 0.16869597197012176, 0.5609833465316214, 0.11312115315946103, 0.5269634687146316, 0.15608224298911277, 0.21245926390912906, 0.21166005709391267, 0.5485316788661727, 0.16715855296688298, 0.5099521576620611, 0.18360306999943177, 0.18139723210321446, 0.19444634825954, 0.19084345213684673, 0.17917199593595667, 0.18164362869105766, 0.18938226407497394, 0.18883161617543742, 0.18364639438871444, 0.07547938979498381, 0.1061609418271432, 0.09482294278321146, 0.09040988678311446, 0.09170731260466913, 0.09211133796199211, 0.12034875061832173, 0.08571888204242639, 0.08380193621920007]}, "mutation_prompt": null}
{"id": "113a7a1e-85c9-4503-a2a0-6fb087a5441d", "solution": "class DynamicPopSizeHybridFireAntCuckooOptimization(HybridFireAntCuckooOptimization):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.pop_size = 10\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.pop_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:  # Dynamic step size adaptation\n                    self.step_size *= 1.01\n            \n            # Cuckoo search exploration\n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicPopSizeHybridFireAntCuckooOptimization", "description": "Implement dynamic population size adjustment to enhance exploration-exploitation balance and convergence speed.", "configspace": "", "generation": 43, "fitness": 0.2104712144668206, "feedback": "The algorithm DynamicPopSizeHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "e9001ab4-f3b4-4bb9-87ed-c845bc21f396", "metadata": {"aucs": [0.4012430622370643, 0.43712338393738825, 0.39892749781142756, 0.42495067572773904, 0.42131116330271157, 0.4173527188229025, 0.42934577738432433, 0.40536532460355357, 0.43770612582283797, 0.0047553453822236635, 0.0003036796444831902, 9.999999999998899e-05, 0.030699979061281746, 0.018824305733898816, 9.999999999998899e-05, 0.006664261139516903, 0.02814230169482146, 0.01834520285039165, 0.13746650978571395, 0.10571632860321312, 0.11357446530285231, 0.09550625253574441, 0.11488588878820538, 0.08769246053006186, 0.10563289421153588, 0.10733721878219782, 0.09163057889822501, 0.0832164053848935, 0.09420432872990026, 0.09167654126853708, 0.0738289923247255, 0.0891773680251241, 0.08815012832932789, 0.10594822987304287, 0.0885025968007942, 0.0988063621277222, 0.9679148523480183, 0.9742220581928006, 0.9195311353392792, 0.9446622388999888, 0.9695825662249786, 0.9459062674952807, 0.9663823209115701, 0.9693237206199599, 0.9698007967277966, 0.2854238908835338, 0.2938561895295948, 0.26156394922401904, 0.2571873212665847, 0.27577244840896076, 0.28220210312238847, 0.2976749812003501, 0.26385670938220884, 0.2829215730356859, 0.3405121089383488, 0.28685268585660006, 0.3236655743224538, 0.33737037093323863, 0.3509232108868532, 0.34157560285516153, 0.3096504253215162, 0.2918731531477906, 0.312127043137716, 0.15871287885485963, 0.15653846172027186, 0.14642391379378294, 0.14858950614833988, 0.15221583474201328, 0.15746408392574962, 0.14557275290277194, 0.17355886864589976, 0.15104087003103628, 0.15848977397593822, 0.15316255419205793, 0.16010162385908844, 0.16683240085997475, 0.12181066659066897, 0.1796032718902223, 0.15342427133103353, 0.16079818711086613, 0.17400425954281817, 9.999999999998899e-05, 9.999999999998899e-05, 0.02866788780355034, 0.0414276213637097, 0.029855385618327457, 0.03822374239320614, 0.010564134155662597, 9.999999999998899e-05, 0.04046757607727902, 0.09757092134003253, 0.07484373378316855, 0.08409829830704618, 0.06538200597445798, 0.03692670023170708, 0.05327606474567781, 0.13803851743836315, 0.036759736478843896, 0.036820103509297764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005797729318509637, 0.09442365459578372, 0.09372770710006262, 0.10254333739517718, 0.11334095477331341, 0.10136810160617005, 0.10968479463835412, 0.08451957235650809, 0.10723354621489312, 0.09249443893568077, 0.36720606096091957, 0.37517560079508383, 0.3956249483212797, 0.3692485630971323, 0.41701253644401437, 0.45053765973604354, 0.3843083725112667, 0.3768562278451302, 0.3665925839749897, 0.12237038728803562, 0.10968146118763655, 0.13100587732637936, 0.09890482623227348, 0.12529579435007598, 0.12813830648656022, 0.10868421331372591, 0.13347547046439523, 0.11451346996569023, 0.22648797173501656, 0.21225906910304948, 0.22604004890523866, 0.22567872737093586, 0.18748289226810844, 0.24826432483308414, 0.2025400389384414, 0.2220185621167079, 0.23331402065904472, 0.28813194826279154, 0.27042978493851255, 0.26779052519834834, 0.2884159032465201, 0.2833510338811812, 0.2846646626122795, 0.2829419050352575, 0.2757505230637024, 0.27151457166930193, 0.20982665806098244, 0.20538829233211842, 0.21090377276736572, 0.22552494795984734, 0.22951894629777148, 0.2109636226286311, 0.2081014405277739, 0.20862396451559184, 0.16652529366325375, 0.18970758326153692, 0.21119707196840887, 0.21200020400979325, 0.21074693656104848, 0.20713324372880726, 0.2195620488077148, 0.22194252722772845, 0.2030194325814495, 0.2167571041156673, 0.20514288623664512, 0.21504346452170298, 0.18482997993795203, 0.19656133794730712, 0.19464637958347952, 0.2466034046952621, 0.19707193951177115, 0.229040456521861, 0.1942718635463313, 0.12322208946750324, 0.13662233788563338, 0.561642763605424, 0.17321222135183068, 0.11245780773628955, 0.06192432115721114, 0.10863627948128929, 0.11524713255283436, 0.16887044073230661, 0.5334401823341848, 0.11289090892794762, 0.08314762559826161, 0.1688697748761835, 0.21145957236608082, 0.21234646538434332, 0.5236226927911942, 0.16649439104880892, 0.4816841332954903, 0.18562331618990413, 0.1709847056363989, 0.19217560473817352, 0.19632981880990652, 0.18400250194197776, 0.17280765055041525, 0.19668007712921665, 0.18594884530406275, 0.19116198934117123, 0.10415799222861866, 0.09535242836930069, 0.07440033645254207, 0.09494391930201751, 0.07096728355420967, 0.10358192303401226, 0.08624342833917342, 0.09646925407444995, 0.0877463316456859]}, "mutation_prompt": null}
{"id": "d6b26be6-a9aa-42a2-a243-db6b57335592", "solution": "import numpy as np\n\nclass HybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        fitness_history = []\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                fitness_history.append(1)  # Keep track of fitness improvement\n                self.step_size *= 0.99\n                if _ % 100 == 0 and len(fitness_history) > 10:  # Dynamic step size adaptation based on recent fitness improvements\n                    self.step_size *= 1.01 if sum(fitness_history[-10:]) >= 7 else 1.005\n            else:\n                fitness_history.append(0)\n            \n            # Cuckoo search exploration\n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "HybridFireAntCuckooOptimizationImproved", "description": "Implementing a dynamic step size adaptation based on the fitness improvement history to enhance convergence speed.", "configspace": "", "generation": 44, "fitness": 0.21511216139915898, "feedback": "The algorithm HybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "e9001ab4-f3b4-4bb9-87ed-c845bc21f396", "metadata": {"aucs": [0.43371296028487505, 0.44244666260295107, 0.4499992873662819, 0.43425955755085166, 0.4431018647010434, 0.4517285546053982, 0.44190228390644837, 0.4316240786739086, 0.4230673299918276, 0.0334967907120185, 0.009589518534711128, 9.999999999998899e-05, 0.03337644598678324, 9.999999999998899e-05, 9.999999999998899e-05, 0.059910877440663146, 9.999999999998899e-05, 9.999999999998899e-05, 0.1132217800191937, 0.09945489841221755, 0.12229313628083094, 0.09716070971312785, 0.1051949182503713, 0.09447337652408527, 0.10145425764228821, 0.08116508097430675, 0.1256201498887929, 0.10937069325948146, 0.0882386941882467, 0.08806540471792357, 0.10569749596781308, 0.08774231613306915, 0.09505806414845197, 0.08813189062452642, 0.1117623140102525, 0.07599213490951584, 0.9666903457883794, 0.9726769682253535, 0.955410482162891, 0.9443352374408934, 0.9241385935511022, 0.9539141983629552, 0.9646996851599301, 0.9663304333170593, 0.9628072856553259, 0.2950564886243493, 0.29364018812777215, 0.3126639065195551, 0.294772391953804, 0.33512516158228167, 0.3268667397058038, 0.28765298088597735, 0.33586808589338, 0.29141610323779576, 0.3236214451842321, 0.32203009306304875, 0.30193525365833906, 0.3333514957588505, 0.3211557946566719, 0.45918161082926223, 0.3411521091209364, 0.3387032329458235, 0.27773935056468524, 0.16696717151127527, 0.17775016566528978, 0.15920570942924783, 0.19173038598674152, 0.18717365876866365, 0.12391561198767653, 0.16175870113564128, 0.17336657377114184, 0.1610659704328269, 0.16658895769974802, 0.15961566263985683, 0.17185890710902763, 0.15679267728969226, 0.16515177490539557, 0.1987207056823076, 0.16182830742681276, 0.1615562394736435, 0.1561994836847047, 9.999999999998899e-05, 0.020653437275330866, 0.016523614258362462, 0.009504151091164537, 9.999999999998899e-05, 0.032731647001825515, 9.999999999998899e-05, 9.999999999998899e-05, 0.030763022152949238, 0.08603309155037164, 0.05878634508387659, 0.11081983567326459, 0.05223729016191936, 0.05581891052655352, 0.08077605582231318, 0.11678597915722255, 0.03264909795509552, 0.09246736053008187, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09357025375975514, 0.10681711501187952, 0.09742415276670602, 0.11377089797746087, 0.09761582560154802, 0.10937262206377074, 0.10064950169717901, 0.09980514452852873, 0.11422904490732666, 0.3868704260146576, 0.40289196387446924, 0.3864383899676006, 0.39833478535689293, 0.4038906665113168, 0.39378634673382007, 0.3861466723713477, 0.43107020019227904, 0.39071111739799513, 0.10957752036271717, 0.10362430973927772, 0.10271158105899247, 0.12907648195628663, 0.1281295322878757, 0.13092072575362412, 0.11633044520841396, 0.09610305468826175, 0.1001943855039743, 0.26823602377072864, 0.23282130824286673, 0.23728891167854105, 0.2306294649530305, 0.21653595311931628, 0.23940753592622166, 0.24255719955045574, 0.2351399559529902, 0.23759185876530808, 0.2619798656320378, 0.27364778903011344, 0.26830325150748335, 0.2814751238138995, 0.2961037949975627, 0.27826262287723835, 0.2833083436458932, 0.28037365452195084, 0.24604753854574246, 0.20399041487295266, 0.2192084912703911, 0.06387412742435938, 0.21355056265794825, 0.2273717865822208, 0.21386170521612635, 0.21171342762543632, 0.15803977393473667, 0.22067666068488145, 0.2074422388041135, 0.22563359975769903, 0.1984589475289985, 0.21000957172523715, 0.21587444427711233, 0.18753077283602926, 0.2054145554619825, 0.19478353140518712, 0.20922569379963352, 0.22129081699927822, 0.2074704193456055, 0.21171566970089084, 0.21141442225551266, 0.19870542306950967, 0.20642078740454795, 0.1985334418131075, 0.21649053128135942, 0.2182297069312158, 0.12337334141520584, 0.1370279847481667, 0.10509640026270972, 0.17381755301417956, 0.1126747187356919, 0.062030594579002396, 0.1088152650570664, 0.11519611439958322, 0.1687682192818435, 0.5440521940414529, 0.11315364081273804, 0.6501097292812694, 0.1561013905438332, 0.21264696063499167, 0.21174420484855017, 0.5363471566851479, 0.167998161032893, 0.5275116282115433, 0.18152659716379083, 0.1808349791213989, 0.19998272938593487, 0.20007432085212173, 0.18457671073185922, 0.18914618318855925, 0.1914194061892054, 0.190242043974163, 0.19011718460181648, 0.08242330040523704, 0.09762056571546796, 0.07990139048813649, 0.08519124047945681, 0.08890740894868032, 0.10866551264434965, 0.08678883105842838, 0.07797715209524159, 0.12481547025846707]}, "mutation_prompt": null}
{"id": "7f20377b-a670-4281-a2f1-fe7ebdf1bba4", "solution": "import numpy as np\n\nclass DynamicHybridFireAntCuckooOptimization(HybridFireAntCuckooOptimization):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        local_radius = 0.1  # Initial local search radius\n        \n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:  # Introduce random mutation with 20% probability\n                best_solution = np.clip(best_solution + np.random.normal(0, local_radius, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                local_radius *= 0.99  # Dynamic local search radius adaptation\n                if _ % 100 == 0:\n                    local_radius *= 1.01\n                \n            # Cuckoo search exploration\n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicHybridFireAntCuckooOptimization", "description": "Utilize a dynamic local search radius adaptation mechanism to enhance convergence speed", "configspace": "", "generation": 45, "fitness": 0.21319789843766263, "feedback": "The algorithm DynamicHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "e9001ab4-f3b4-4bb9-87ed-c845bc21f396", "metadata": {"aucs": [0.45340350501857396, 0.44254264455826253, 0.4418061248182521, 0.45075937990388715, 0.455288717596408, 0.4234492955714061, 0.46529525962194906, 0.4429610407706317, 0.4528806290129953, 9.999999999998899e-05, 0.0042933014268130565, 9.999999999998899e-05, 0.013571308219060163, 0.022521570174364958, 9.999999999998899e-05, 0.004135982062825838, 0.0002615298615410433, 9.999999999998899e-05, 0.12610782018554512, 0.11424679945785443, 0.12145937651531569, 0.10736533797783065, 0.12019072075638071, 0.11677645078554377, 0.13838832502243947, 0.1195487197229319, 0.11720298235896809, 0.1217033842822951, 0.12048729203528852, 0.10211417281173252, 0.09778524919999876, 0.11563303460156371, 0.09777631003860043, 0.10219255912263403, 0.10021732820593332, 0.08734519396497653, 0.9727660611936491, 0.9732375512442624, 0.9628307165844072, 0.9772947963059387, 0.944226333429887, 0.9765755355544808, 0.9760082510833974, 0.9747274596636667, 0.976451786042215, 0.2380385317087984, 0.2822337822756428, 0.2593411994801168, 0.2621831062791097, 0.25324670743185784, 0.239474248708887, 0.2713914050197952, 0.2586943824654493, 0.2600060788655494, 0.3140224914202955, 0.3090104730237838, 0.2583955191502104, 0.31286678870362317, 0.273358880059986, 0.3577590921104805, 0.34738398067681486, 0.30137264003147657, 0.2967043752031223, 0.20836387018754998, 0.1629241956249622, 0.1730328239064043, 0.1810811870824346, 0.15882475854789024, 0.06715116324505166, 0.1549261413765345, 0.16850110637633153, 0.16954473892286803, 0.16082824729069567, 0.17167653067213573, 0.15927434731335832, 0.1640117520728227, 0.15645698256863105, 0.17203324715821677, 0.16529482600569467, 0.16071162136324313, 0.15960620198049746, 0.018985754493295093, 0.002930664867700772, 0.008469228536024054, 0.029579702018040943, 0.046635609114740184, 0.0009803807684957144, 0.004675904597895353, 0.033412499938104356, 0.02998276561616875, 0.07760514004173347, 0.11845887913117747, 0.1002384273683572, 0.046070298863854275, 0.11271734197293903, 0.07540955479173062, 0.11154224116443823, 0.042398081661643716, 0.09366188696087718, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10801761938841459, 0.08183401951762226, 0.10032993502931242, 0.12676704424657947, 0.09733585198304895, 0.10135447128681463, 0.09945800509999991, 0.11106678640893675, 0.10188021807494774, 0.4014899305088683, 0.38647020546627253, 0.38934321556264184, 0.3879401106892518, 0.39558966296278053, 0.42641935036957657, 0.40850765538435885, 0.4199227413464591, 0.3935585870170274, 0.11556546947953028, 0.1214880230407751, 0.1257918821843388, 0.11968220278981934, 0.12626346219846907, 0.1301518681332805, 0.1228704310634714, 0.11843510598638918, 0.12641832376557705, 0.20726734579395512, 0.260269660764217, 0.23448410373825723, 0.23458669868475268, 0.24774619599861725, 0.21767343923445492, 0.22753231447455402, 0.2420121401717643, 0.20181606853356648, 0.2838130366234496, 0.28462153842313853, 0.2515326968187347, 0.2870214742254953, 0.2816778732000351, 0.2646938514502585, 0.2785797171023129, 0.26357362586172706, 0.25120710337732466, 0.21270484466224648, 0.21255264326179768, 0.20215565725179185, 0.21479718667322678, 0.20535808072055972, 0.20271828716533768, 0.212199366565622, 0.1885211912263779, 0.20224433711448797, 0.21440939627096556, 0.2230552952475625, 0.2103586457295008, 0.20943955401555914, 0.2202368369027572, 0.20251513819035816, 0.2578152444439761, 0.20805316368647864, 0.21084505270414278, 0.19460540771550927, 0.20616351366732277, 0.19651522786797448, 0.19753926376549857, 0.19825838623200287, 0.21177626719092724, 0.21455097803368606, 0.21372359441192434, 0.1997261891949743, 0.12339085583636666, 0.13615956698298015, 0.10511818295885567, 0.17382067438190474, 0.11198552406020812, 0.06202508116267147, 0.10884378248386017, 0.12581868809392927, 0.16864175122922076, 0.48276777001413784, 0.11286258620525169, 0.5263040581581437, 0.1561460073106229, 0.21214759435119712, 0.21062905844119717, 0.5317930010871408, 0.16920512811484478, 0.4650785872851525, 0.17597006206486898, 0.1769463731463724, 0.17808891977782715, 0.18998756432665653, 0.18951911490567241, 0.1907071718036757, 0.18859782275675696, 0.17832949752777805, 0.17714913417252998, 0.10245694602668531, 0.10143286668682738, 0.08265799843931476, 0.07868194066314405, 0.08922671263298654, 0.09501633873525284, 0.09990035942014108, 0.08369318214798027, 0.08413472278697731]}, "mutation_prompt": null}
{"id": "5dfd8380-f57f-46a0-9339-afdd8b801e5a", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        inertia_weight = 0.5\n        for _ in range(self.budget):\n            if np.random.rand() < 0.2:\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n            \n            steps = inertia_weight * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:\n                    inertia_weight *= 0.99\n            \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicInertiaHybridFireAntCuckooOptimization", "description": "Implement a dynamic inertia weight strategy to enhance convergence speed.", "configspace": "", "generation": 46, "fitness": 0.20771770615855709, "feedback": "The algorithm DynamicInertiaHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "e9001ab4-f3b4-4bb9-87ed-c845bc21f396", "metadata": {"aucs": [0.4411053875703942, 0.4230897294604071, 0.44852894952664457, 0.4504663221903067, 0.4959618995490448, 0.45473732402953515, 0.4540949631663256, 0.4420423865157077, 0.435738364058905, 0.007954429632429538, 0.024724882174594676, 9.999999999998899e-05, 0.00020407204883143848, 0.0001447245709641498, 9.999999999998899e-05, 9.999999999998899e-05, 0.0047442769456476075, 9.999999999998899e-05, 0.1054227758730536, 0.11118212061348642, 0.11129862079932629, 0.11383643012869538, 0.1270451951836845, 0.0898149420590304, 0.11926867369836158, 0.10471985611857093, 0.10765289385352694, 0.11321382998595442, 0.11197619305381723, 0.07921058616957999, 0.0952404177712779, 0.09701685343666266, 0.1024663824651616, 0.10681917586099665, 0.0935361973466654, 0.09729084693502354, 0.9655021323331402, 0.9369918961790646, 0.9308365144707978, 0.9170881868786229, 0.919639535340087, 0.9285975456472323, 0.9441991456602812, 0.9464600487613838, 0.9403464256224019, 0.2805954655031987, 0.28722172247971633, 0.2642908697223062, 0.27600999836970797, 0.2698423256800394, 0.2665611045847125, 0.2768402201107599, 0.2610171036433033, 0.29071463824006993, 0.28422084466117625, 0.2763957259202985, 0.3139537131842748, 0.36593906051103897, 0.333832105920954, 0.29938249269079453, 0.28382524632375183, 0.3286120768883195, 0.3366710846806594, 0.18808126340855558, 0.16973070211557373, 0.2062589509148025, 0.19075208499373497, 0.15907891313990696, 0.16952248795499214, 0.18922880813694642, 0.18172619347238328, 0.18887996225643378, 0.16983709202808095, 0.1778621920289779, 0.15765208566194355, 0.15573638750541796, 0.17987293364760715, 0.19341535160027, 0.14715398749291597, 0.20309466289743439, 0.17550542137970604, 0.006833156793390249, 0.0002048942525214592, 0.058643840376756406, 0.020674152353928887, 0.00441776560121776, 0.03557860344055919, 0.01207958595137093, 9.999999999998899e-05, 9.999999999998899e-05, 0.0650366394467854, 0.0783798479548008, 0.1256454512831986, 0.04060928494395721, 0.04388119430414916, 0.05746238862742925, 0.15619955507407013, 0.06346983559099484, 0.06251980209435226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09938911905522618, 0.0842329901014034, 0.12201494331634533, 0.09529523268932827, 0.10435073372617443, 0.10185304364004655, 0.09756022457858449, 0.09749034850746974, 0.10863290409670301, 0.4180207673583872, 0.4076403458029486, 0.40000940850821454, 0.40258285428801865, 0.4057719091742443, 0.41279139263722275, 0.3975893014940438, 0.404079157247598, 0.4293711913949855, 0.11639522931945268, 0.0812008278582036, 0.11751271106803962, 0.1375309440562663, 0.10803034885769358, 0.11643832539449928, 0.10051507918902802, 0.11828327441780095, 0.11834305955315227, 0.22933439273211786, 0.21760533965037177, 0.225107193791378, 0.2935566657521035, 0.20531922118323942, 0.24055419065026518, 0.24829010555032915, 0.23975544912096014, 0.28248049239904627, 0.2779263452820133, 0.19674994641999477, 0.14751366950995348, 0.2730590837615122, 0.2311439595172925, 0.18129054373070141, 0.27327059054044245, 0.2300621523463786, 0.10443628136491079, 0.21781028813643766, 0.2001372859790561, 0.15334841325418969, 0.2019851660769082, 0.20789783547622354, 0.16552064770161923, 0.2233233199603254, 0.1712818468359526, 0.12034271920981077, 0.22428860712984033, 0.17405716031515917, 0.2203525017151422, 0.19634328640855236, 0.2072827446721316, 0.20101710646168858, 0.20314187525099492, 0.2020882485198019, 0.20072872244658013, 0.22177897189181717, 0.2248112623862819, 0.2143981261165664, 0.2050527094185668, 0.19434238991734176, 0.20893316158137276, 0.2037696507623591, 0.22275612391976896, 0.19012404311449527, 0.12336054519241368, 0.13759631062262145, 0.09882189575386802, 0.17370442370738914, 0.11273382882247729, 0.06203405626708458, 0.10886376022063415, 0.11534112785250983, 0.16895699511545248, 0.5577689137626182, 0.11327746317427956, 0.08301494927085529, 0.15593709072788986, 0.2127403753899776, 0.21238277871220423, 0.525139022524511, 0.14633554985412722, 0.45922958386081314, 0.18995482479434844, 0.20969605603649222, 0.18557510547056089, 0.17927645339042264, 0.17994706118081594, 0.18479075798913214, 0.20021883903131577, 0.1822498914102586, 0.17650976171964372, 0.12762159258491523, 0.09601214970253313, 0.0724376638883627, 0.07706510484665974, 0.07962063896692329, 0.09594348213235138, 0.0935789017827392, 0.07512250189188252, 0.08420715577829108]}, "mutation_prompt": null}
{"id": "6e8fe68b-fdd8-4a55-86f9-1c58428077c9", "solution": "import numpy as np\n\nclass DynamicMutationHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  # Dynamic mutation probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  # Adjust mutation probability based on fitness improvement rate\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:  # Dynamic step size adaptation\n                    self.step_size *= 1.01\n            \n            # Cuckoo search exploration\n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicMutationHybridFireAntCuckooOptimization", "description": "Update the algorithm to introduce a dynamic mutation strategy where the mutation probability is adjusted based on the current fitness improvement rate.", "configspace": "", "generation": 47, "fitness": 0.21945846030938737, "feedback": "The algorithm DynamicMutationHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "e9001ab4-f3b4-4bb9-87ed-c845bc21f396", "metadata": {"aucs": [0.4709284183917849, 0.44591375831653224, 0.46431289038117973, 0.44171398324063926, 0.4667996773049671, 0.4656645633758276, 0.46219082764737995, 0.4525343412579712, 0.43938344819420894, 0.034184401606657255, 0.017784011778442244, 0.0011563602259627714, 0.03101496578527385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014447347269246347, 9.999999999998899e-05, 0.1191659318218069, 0.12712374814895988, 0.13703112732252976, 0.1301303085373554, 0.12345007960470333, 0.11752617715151481, 0.12305847859758601, 0.10978107779027801, 0.12455495093859204, 0.09549831273320053, 0.1137881667414371, 0.11089977578150156, 0.09646539968075307, 0.10328505396969434, 0.11460990034450769, 0.07749643110816973, 0.09924596824329834, 0.12531609423198187, 0.9736438849181459, 0.9737165502814649, 0.955410482162891, 0.9621728877458704, 0.9336208272954899, 0.9491558886079015, 0.9702088460292729, 0.9764874878875215, 0.962828967556004, 0.30665047641287924, 0.30120449771084756, 0.2879138920280402, 0.33993825672904343, 0.2933583032383017, 0.3034391030928185, 0.32686108604675346, 0.3263659815945602, 0.30534818066988334, 0.3380370413482857, 0.32248291900376413, 0.35430719155906154, 0.38285253614258685, 0.33372950227976794, 0.36804069501265235, 0.29885768798634393, 0.3185767065154822, 0.3262240624624173, 0.16791705440881743, 0.21358888531921882, 0.16533450325553023, 0.16498160397922657, 0.19761615297610657, 0.20951172180104782, 0.1583278258518308, 0.21896195100178106, 0.16670395961055906, 0.15222712453929022, 0.175221706241816, 0.17853193688600388, 0.17601513078897968, 0.14865140194523851, 0.16430490827816757, 0.1929822655754725, 0.15548472251642886, 0.17362200143540252, 9.999999999998899e-05, 9.999999999998899e-05, 0.03253718550877638, 0.015412976024193226, 0.05715581833412908, 0.005724050410869319, 0.016134979004009953, 9.999999999998899e-05, 9.999999999998899e-05, 0.07527416143189802, 0.07675524863975025, 0.12708044389509343, 0.04375102214706916, 0.06528250695311177, 0.02547074143237338, 0.1345503809754246, 0.06364108689201475, 0.10575355342381232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11405326827939699, 0.11000753379125017, 0.08238873925944667, 0.1268790338401442, 0.12044477589273828, 0.104794828981158, 0.10551890126121966, 0.08125454870191118, 0.10711145043427805, 0.42426903177661157, 0.4366623513375072, 0.4202297435803979, 0.3964828931512805, 0.41701193424617045, 0.391157431932454, 0.42814250606660753, 0.41114986733828196, 0.3907796620208177, 0.11417458271962044, 0.12467700638786572, 0.1413146862729593, 0.1347898406474506, 0.11106276995047282, 0.11943068544880919, 0.11783908248226749, 0.11977633236711194, 0.1334324309904108, 0.23023948653566273, 0.18432879310690053, 0.20135652403733562, 0.2552332505115241, 0.2331774087663543, 0.24944315499973113, 0.21911498664617501, 0.2123169686388049, 0.2128511443365082, 0.2847188345906647, 0.28364757805351837, 0.2875955259085101, 0.2893509795573308, 0.298774957314177, 0.281448119473272, 0.27834129529140106, 0.2898706209271743, 0.28088068227875973, 0.1892650324432661, 0.22330314721148292, 0.23484910768132183, 0.2360532727340029, 0.23322702910731186, 0.21104193144052352, 0.20262072399660847, 0.20262735363646878, 0.18213820978317774, 0.20618525685154365, 0.1880056956220515, 0.20657897484545107, 0.2009896189513407, 0.18401795134984944, 0.20191539339452336, 0.20030043644420326, 0.16791296593651328, 0.23401616473887754, 0.18926134927341687, 0.20963171482879173, 0.21594109579192122, 0.20312734590477477, 0.2138547574052091, 0.18851380683731112, 0.19155642195079103, 0.19197330638272248, 0.19862532285208012, 0.12340166062350455, 0.13688913073425757, 0.1051332368893525, 0.17374790555156594, 0.11287186504184432, 0.06203159816215609, 0.10893175929487897, 0.1260611311470553, 0.16880271021666027, 0.5456811689082841, 0.11318425567335522, 0.5944182939821011, 0.1551853591549598, 0.2139200759346258, 0.21147765305961852, 0.6575535608525158, 0.16673980308802328, 0.4566745995403716, 0.2075101864031872, 0.18916045089586864, 0.18875652576503654, 0.2025313085477225, 0.18569468548816925, 0.17609513249918984, 0.17375975471456417, 0.18635976552955147, 0.18807627125547421, 0.07925349194102504, 0.10866803025204574, 0.08727678016811535, 0.07953829689950676, 0.07973466769755011, 0.11824200649328998, 0.11535079324495423, 0.08159269053336593, 0.09656488433282251]}, "mutation_prompt": null}
{"id": "ae723025-9b19-4d78-b252-7c296a480a62", "solution": "class DynamicMutationHybridFireAntCuckooOptimizationImproved(DynamicMutationHybridFireAntCuckooOptimization):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.population_size = 10\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  # Dynamic mutation probability\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  # Adjust mutation probability based on fitness improvement rate\n            \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.99\n                if _ % 100 == 0:  # Dynamic step size adaptation\n                    self.step_size *= 1.01\n            \n            # Cuckoo search exploration\n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n            \n            # Dynamic population size adaptation\n            if best_fitness < 0.1 and self.population_size > 5:\n                self.population_size -= 1\n            elif best_fitness > 0.5 and self.population_size < 15:\n                self.population_size += 1\n            \n        return best_solution", "name": "DynamicMutationHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic population size adaptation strategy to enhance convergence speed by adjusting the number of search points based on the algorithm performance.", "configspace": "", "generation": 48, "fitness": 0.21945846030938737, "feedback": "The algorithm DynamicMutationHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "6e8fe68b-fdd8-4a55-86f9-1c58428077c9", "metadata": {"aucs": [0.4709284183917849, 0.44591375831653224, 0.46431289038117973, 0.44171398324063926, 0.4667996773049671, 0.4656645633758276, 0.46219082764737995, 0.4525343412579712, 0.43938344819420894, 0.034184401606657255, 0.017784011778442244, 0.0011563602259627714, 0.03101496578527385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014447347269246347, 9.999999999998899e-05, 0.1191659318218069, 0.12712374814895988, 0.13703112732252976, 0.1301303085373554, 0.12345007960470333, 0.11752617715151481, 0.12305847859758601, 0.10978107779027801, 0.12455495093859204, 0.09549831273320053, 0.1137881667414371, 0.11089977578150156, 0.09646539968075307, 0.10328505396969434, 0.11460990034450769, 0.07749643110816973, 0.09924596824329834, 0.12531609423198187, 0.9736438849181459, 0.9737165502814649, 0.955410482162891, 0.9621728877458704, 0.9336208272954899, 0.9491558886079015, 0.9702088460292729, 0.9764874878875215, 0.962828967556004, 0.30665047641287924, 0.30120449771084756, 0.2879138920280402, 0.33993825672904343, 0.2933583032383017, 0.3034391030928185, 0.32686108604675346, 0.3263659815945602, 0.30534818066988334, 0.3380370413482857, 0.32248291900376413, 0.35430719155906154, 0.38285253614258685, 0.33372950227976794, 0.36804069501265235, 0.29885768798634393, 0.3185767065154822, 0.3262240624624173, 0.16791705440881743, 0.21358888531921882, 0.16533450325553023, 0.16498160397922657, 0.19761615297610657, 0.20951172180104782, 0.1583278258518308, 0.21896195100178106, 0.16670395961055906, 0.15222712453929022, 0.175221706241816, 0.17853193688600388, 0.17601513078897968, 0.14865140194523851, 0.16430490827816757, 0.1929822655754725, 0.15548472251642886, 0.17362200143540252, 9.999999999998899e-05, 9.999999999998899e-05, 0.03253718550877638, 0.015412976024193226, 0.05715581833412908, 0.005724050410869319, 0.016134979004009953, 9.999999999998899e-05, 9.999999999998899e-05, 0.07527416143189802, 0.07675524863975025, 0.12708044389509343, 0.04375102214706916, 0.06528250695311177, 0.02547074143237338, 0.1345503809754246, 0.06364108689201475, 0.10575355342381232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11405326827939699, 0.11000753379125017, 0.08238873925944667, 0.1268790338401442, 0.12044477589273828, 0.104794828981158, 0.10551890126121966, 0.08125454870191118, 0.10711145043427805, 0.42426903177661157, 0.4366623513375072, 0.4202297435803979, 0.3964828931512805, 0.41701193424617045, 0.391157431932454, 0.42814250606660753, 0.41114986733828196, 0.3907796620208177, 0.11417458271962044, 0.12467700638786572, 0.1413146862729593, 0.1347898406474506, 0.11106276995047282, 0.11943068544880919, 0.11783908248226749, 0.11977633236711194, 0.1334324309904108, 0.23023948653566273, 0.18432879310690053, 0.20135652403733562, 0.2552332505115241, 0.2331774087663543, 0.24944315499973113, 0.21911498664617501, 0.2123169686388049, 0.2128511443365082, 0.2847188345906647, 0.28364757805351837, 0.2875955259085101, 0.2893509795573308, 0.298774957314177, 0.281448119473272, 0.27834129529140106, 0.2898706209271743, 0.28088068227875973, 0.1892650324432661, 0.22330314721148292, 0.23484910768132183, 0.2360532727340029, 0.23322702910731186, 0.21104193144052352, 0.20262072399660847, 0.20262735363646878, 0.18213820978317774, 0.20618525685154365, 0.1880056956220515, 0.20657897484545107, 0.2009896189513407, 0.18401795134984944, 0.20191539339452336, 0.20030043644420326, 0.16791296593651328, 0.23401616473887754, 0.18926134927341687, 0.20963171482879173, 0.21594109579192122, 0.20312734590477477, 0.2138547574052091, 0.18851380683731112, 0.19155642195079103, 0.19197330638272248, 0.19862532285208012, 0.12340166062350455, 0.13688913073425757, 0.1051332368893525, 0.17374790555156594, 0.11287186504184432, 0.06203159816215609, 0.10893175929487897, 0.1260611311470553, 0.16880271021666027, 0.5456811689082841, 0.11318425567335522, 0.5944182939821011, 0.1551853591549598, 0.2139200759346258, 0.21147765305961852, 0.6575535608525158, 0.16673980308802328, 0.4566745995403716, 0.2075101864031872, 0.18916045089586864, 0.18875652576503654, 0.2025313085477225, 0.18569468548816925, 0.17609513249918984, 0.17375975471456417, 0.18635976552955147, 0.18807627125547421, 0.07925349194102504, 0.10866803025204574, 0.08727678016811535, 0.07953829689950676, 0.07973466769755011, 0.11824200649328998, 0.11535079324495423, 0.08159269053336593, 0.09656488433282251]}, "mutation_prompt": null}
{"id": "c75cea45-2412-474b-86a1-7e13c9db4ad8", "solution": "class DynamicMutationHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicMutationHybridFireAntCuckooOptimization", "description": "Enhance convergence speed by dynamically adjusting the step size based on fitness improvement rate.", "configspace": "", "generation": 49, "fitness": 0.22383223836533167, "feedback": "The algorithm DynamicMutationHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "6e8fe68b-fdd8-4a55-86f9-1c58428077c9", "metadata": {"aucs": [0.5449741827183896, 0.5362412127221856, 0.5493983457812135, 0.5595595272192062, 0.558658659308739, 0.5223957738880807, 0.49436546695560557, 0.5846915324038275, 0.5328019209315371, 0.08531576613392822, 0.055865835251026286, 9.999999999998899e-05, 0.053087565351553345, 9.999999999998899e-05, 9.999999999998899e-05, 0.042197841963611205, 9.999999999998899e-05, 9.999999999998899e-05, 0.08976277286389889, 0.05810644511124319, 0.10619138322537014, 0.14491832418022454, 0.12130913671692545, 0.07108305547089855, 0.07840480652034254, 0.08568417266402317, 0.08335394217394354, 0.09169413090782108, 0.13088016379046452, 0.08216557031788474, 0.0705893049796672, 0.13491280048297083, 0.13202614240672483, 0.11020552873445577, 0.10716111912048454, 0.08764153379712569, 0.96909933525758, 0.9580184224882924, 0.8640148196186449, 0.9429918520464515, 0.8769589206849598, 0.9324330821054272, 0.9668754804291445, 0.9561974737212194, 0.9627366978785781, 0.3771087080831833, 0.3401123831422619, 0.34251646638177147, 0.38513026905824077, 0.36763513679898174, 0.3394958853819542, 0.35528895632739654, 0.37315793684475174, 0.3504648226198863, 0.2291291721516362, 0.13722708374852322, 0.1706409956852023, 0.28155550592570333, 0.21900246156418912, 0.21137699819336764, 0.23859974175347098, 0.34236063566220165, 0.2296818989194458, 0.22498817633349577, 0.21808747995021327, 0.21794636772645803, 0.2325873095515414, 0.21869752223395478, 0.2548190752515237, 0.23105624504164357, 0.19434193567906077, 0.21926115829120063, 0.23577548232054546, 0.31951171582379856, 0.2580266633132118, 0.1870321653070357, 0.23278711358802318, 0.16551877205709864, 0.21542086396165128, 0.19930585910308218, 0.20509285271834676, 0.056080805472133344, 9.999999999998899e-05, 0.07820936147367408, 0.04822628464794376, 0.08819440147940127, 9.999999999998899e-05, 0.011238882029315445, 9.999999999998899e-05, 0.010951815993526681, 0.07144567087054088, 0.06720956963431857, 0.08482515232215282, 0.042748988095103746, 0.013630076946425262, 0.01865324565909976, 0.0997639948264808, 0.02079509510627653, 0.07432512214835918, 9.999999999998899e-05, 0.05224170047267784, 0.008790101879684653, 0.006076565232197906, 0.05214129260133249, 0.0543182529861308, 0.0831422017682264, 0.06984822067391483, 0.03142938986735411, 0.1206888630346784, 0.14760737783422861, 0.09569729384440451, 0.1458355596688743, 0.10497353227584849, 0.15547333905493055, 0.1444472830616047, 0.14345570677927555, 0.1622872844443225, 0.45503393066425246, 0.4065338889708431, 0.45846371879774217, 0.4190821050645621, 0.4805798162944408, 0.44904247083516813, 0.42410088645473465, 0.46967524807515304, 0.4495803406074882, 0.10028443286796251, 0.04694844562447287, 0.12815607686939778, 0.09161148739871006, 0.12578342661004194, 0.09456969875210774, 0.13553207526068112, 0.10155602043907053, 0.10277121052035743, 0.24873798684814197, 0.1884958435370736, 0.20248055355427008, 0.2524009622563991, 0.2940531041710739, 0.2990524014725725, 0.2525782045526811, 0.2234894209413777, 0.17715257057440725, 0.3088595746290612, 0.21711250221070066, 0.1706348490472015, 0.30381444094482624, 0.22352128019959683, 0.17820328540700558, 0.2888199888892836, 0.20958983577062162, 0.1014076668759526, 0.28876846800006284, 0.19129397366462975, 0.07901079727682392, 0.23224044221575946, 0.22529458649543244, 0.1283302937173454, 0.2037767229488029, 0.17260303174422442, 0.024439322440478417, 0.19904355973249277, 0.20745593100404291, 0.19917655957042568, 0.224131087410538, 0.24075380884183928, 0.17678533525514173, 0.224746185038323, 0.18565862870991612, 0.19086011895362498, 0.1892602779608562, 0.19572845255977034, 0.2037682212036187, 0.20415953179226431, 0.1968139804395136, 0.19691930656922596, 0.1917594488088714, 0.19847892448277027, 0.22059301933400088, 0.12343615120969187, 0.13708456941198788, 0.10520694734648983, 0.17392735384093871, 0.1129817853113173, 0.062053938425852495, 0.10891167898258558, 0.11525909246986177, 0.1688400166443076, 0.7255570338894325, 0.11330881534073267, 0.6929360623125049, 0.1563540581874049, 0.21423989346926542, 0.21268933330136275, 0.6927020080907433, 0.16615423499685, 0.46478444198004065, 0.20435675744972226, 0.18652210881923748, 0.189236943720949, 0.19698275688028943, 0.20675971111405655, 0.20780981207476046, 0.19581556128731303, 0.18237504500507762, 0.18396534661118058, 0.0743498855026603, 0.07414598671392503, 0.06670387461478999, 0.08609994385151898, 0.08629715393640125, 0.11574609692359517, 0.10439840280682167, 0.09124026222899995, 0.05560635699658001]}, "mutation_prompt": null}
{"id": "2b6e52d1-dcfd-4368-beb7-bbcd3a480f0e", "solution": "import concurrent.futures\n\nclass ParallelDynamicMutationHybridFireAntCuckooOptimization(DynamicMutationHybridFireAntCuckooOptimization):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        num_threads = 4\n        \n        def evaluate_solution(solution):\n            fitness = func(solution)\n            return solution, fitness\n        \n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            for _ in range(self.budget // num_threads):\n                solutions = [np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) for _ in range(num_threads)]\n                results = list(executor.map(evaluate_solution, solutions))\n                \n                for sol, fit in results:\n                    if fit < best_fitness:\n                        best_solution = sol\n                        best_fitness = fit\n                        self.step_size *= 0.98\n                        \n                for _ in range(num_threads):\n                    steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n                    new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n                    new_fitnesses = np.array([func(sol) for sol in new_solutions])\n                    \n                    min_idx = np.argmin(new_fitnesses)\n                    if new_fitnesses[min_idx] < best_fitness:\n                        best_solution = new_solutions[min_idx]\n                        best_fitness = new_fitnesses[min_idx]\n                        self.step_size *= 0.98\n                    \n                    cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    cuckoo_fitness = func(cuckoo_solution)\n                    if cuckoo_fitness < best_fitness:\n                        best_solution = cuckoo_solution\n                        best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "ParallelDynamicMutationHybridFireAntCuckooOptimization", "description": "Introduce a parallel evaluation strategy to speed up convergence by evaluating multiple solutions simultaneously.", "configspace": "", "generation": 50, "fitness": 0.20920196590010753, "feedback": "The algorithm ParallelDynamicMutationHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "c75cea45-2412-474b-86a1-7e13c9db4ad8", "metadata": {"aucs": [0.4876714064607861, 0.4740495254288071, 0.48325795281812767, 0.48082573715338617, 0.5057185836152185, 0.48059135258954566, 0.47398487687548996, 0.49722500478398013, 0.5424428443702739, 0.007964935258716888, 0.031294312938305646, 9.999999999998899e-05, 0.06497811491781191, 0.08807863862381782, 9.999999999998899e-05, 9.999999999998899e-05, 0.005641041702501792, 9.999999999998899e-05, 0.06904800750102968, 0.03226043511895127, 0.08074629222728258, 0.07857397503011776, 0.07068271623671518, 0.06191331771978037, 0.09472803940698615, 0.07365671930645035, 0.07223841256963393, 0.10157737335651074, 0.03570032805155954, 0.02584661642894681, 0.0841284966384217, 0.03241665583997455, 0.060792517097599696, 0.08888819741878884, 0.062117268633868794, 0.07991851188275723, 0.9745447090001894, 0.9726042718661975, 0.9334789441435389, 0.9053961845798567, 0.93405386200904, 0.9441564627433374, 0.9544364418040517, 0.9584043896147593, 0.9695533947518513, 0.3332805298713042, 0.34649176604820375, 0.3523668864003021, 0.34086809461626977, 0.36722525803946304, 0.34609363401205073, 0.3402661204707138, 0.3407863650031774, 0.35527167318621955, 0.4025601542043785, 0.1367113291498363, 0.17105042556402805, 0.21486104426912211, 0.25540674427283505, 0.2824319269108414, 0.2393057665163204, 0.5407822485283259, 0.42285222463246275, 0.2615835642695643, 0.19253732923340716, 0.176893158270793, 0.2196711647031453, 0.1741586506303433, 0.17866997473899204, 0.19999817929738373, 0.2174697397371841, 0.1343235248208533, 0.20782962880305045, 0.14516081440081985, 0.12103135384103259, 0.18535277870261402, 0.11948403211517467, 0.1317510258241722, 0.19155555574575378, 0.24675719339671187, 0.19937485404364597, 0.04733717035451668, 0.023082301220077928, 0.012905420089279529, 0.06745819357072247, 0.004993262859789849, 0.010620595254095533, 9.999999999998899e-05, 9.999999999998899e-05, 0.03495756607985856, 0.08166183200338561, 0.08438696782477295, 0.11952152643398317, 0.09533950040103922, 0.050583696797596334, 0.08138860478865262, 0.15133962182445992, 0.06635697002187535, 0.14746099507807342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14747402092373418, 0.11093958352751776, 0.06913064845918815, 0.0759905044329573, 0.11703949884112486, 0.062498120912894084, 0.10678480033298443, 0.09328777010426836, 0.09086836797262532, 0.44361038069256153, 0.4340657223206261, 0.4390305855360015, 0.46446088708933375, 0.4616059712680525, 0.44028555613686826, 0.49110290877810314, 0.44819927307718976, 0.4495594311257285, 0.08098649889304543, 0.03238244320465855, 0.10792190579373018, 0.06090630710628653, 0.10729620206578871, 0.11120110737149136, 0.0834676257419733, 0.08477746756344551, 0.08302524245081166, 0.15856927431062995, 0.1425206687223921, 0.18876059832879022, 0.20167683879797316, 0.20910159797920036, 0.16570415183078313, 0.19017173882124305, 0.16921298097496618, 0.17387025522920863, 0.2647087341582153, 0.1602526725499268, 0.1284879924404997, 0.2640210066537355, 0.23620574062834776, 0.17780426526667903, 0.20606404707692638, 0.18166167575318481, 0.11329297445984554, 0.12020574656925687, 0.05641906561742416, 0.15068248385875993, 0.1820170669335195, 0.26276140781723656, 0.12544792467518473, 0.1699704528064545, 0.13105453806292622, 0.04097223936781025, 0.2179459955046762, 0.20849085331657058, 0.19907848576351594, 0.22120403021137258, 0.24210441559983964, 0.2040474272228857, 0.2375610269730435, 0.18191377795891472, 0.20190739232937815, 0.18573440044960043, 0.17769198164606803, 0.19334846305898767, 0.18947587212753048, 0.1892239713849725, 0.1887521294655411, 0.1827129298340877, 0.20577603209241324, 0.1792369982385762, 0.18940341544227468, 0.13764978912930892, 0.7759933710885674, 0.1152971433568708, 0.11317347968014435, 0.06198541767839816, 0.10894756400336192, 0.1262833835661944, 0.16898102560022454, 0.6448431282251423, 0.11344705523113585, 0.08326810563628118, 0.15712341141472863, 0.2136429768921374, 0.21402075187724134, 0.4475892571506709, 0.13906559385117212, 0.47405509334005913, 0.19276281220697966, 0.1657213914150527, 0.1736227551474172, 0.17647208685508198, 0.18218428732980108, 0.18570460964831392, 0.17410961632255073, 0.17449537657493552, 0.19039698494345725, 0.11747395803321758, 0.1169500355565195, 0.07161052498400655, 0.10968568807410972, 0.07487689424857058, 0.11230002894941571, 0.12504363969028287, 0.07148039722945909, 0.06354462207041545]}, "mutation_prompt": null}
{"id": "645f2919-6807-4698-b924-b2413baafca4", "solution": "import multiprocessing\n\nclass ParallelDynamicMutationHybridFireAntCuckooOptimization(DynamicMutationHybridFireAntCuckooOptimization):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        pool = multiprocessing.Pool()\n\n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = pool.map(func, new_solutions)\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        pool.close()\n        pool.join()\n        \n        return best_solution", "name": "ParallelDynamicMutationHybridFireAntCuckooOptimization", "description": "Introducing a parallel evaluation strategy to process multiple solutions concurrently to boost optimization speed.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"cannot pickle 'ioh.iohcpp.problem.Sphere' object\").", "error": "TypeError(\"cannot pickle 'ioh.iohcpp.problem.Sphere' object\")", "parent_id": "c75cea45-2412-474b-86a1-7e13c9db4ad8", "metadata": {}, "mutation_prompt": null}
{"id": "d28f5063-b01b-4381-bc28-77995bfe2077", "solution": "import concurrent.futures\n\nclass ParallelDynamicMutationHybridFireAntCuckooOptimization(DynamicMutationHybridFireAntCuckooOptimization):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        def evaluate_solution(solution):\n            return func(solution)\n        \n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                if np.random.rand() < mutation_prob:  \n                    best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    best_fitness = func(best_solution)\n                    mutation_prob *= 0.99  \n                    self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                    \n                steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n                new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n                new_fitnesses = list(executor.map(evaluate_solution, new_solutions))\n                \n                min_idx = np.argmin(new_fitnesses)\n                if new_fitnesses[min_idx] < best_fitness:\n                    best_solution = new_solutions[min_idx]\n                    best_fitness = new_fitnesses[min_idx]\n                    self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                    \n                cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                cuckoo_fitness = func(cuckoo_solution)\n                if cuckoo_fitness < best_fitness:\n                    best_solution = cuckoo_solution\n                    best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "ParallelDynamicMutationHybridFireAntCuckooOptimization", "description": "Utilize a parallel processing strategy to evaluate multiple candidate solutions simultaneously, exploiting multi-core processing power for faster convergence.", "configspace": "", "generation": 52, "fitness": 0.22383223836533167, "feedback": "The algorithm ParallelDynamicMutationHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "c75cea45-2412-474b-86a1-7e13c9db4ad8", "metadata": {"aucs": [0.5449741827183896, 0.5362412127221856, 0.5493983457812135, 0.5595595272192062, 0.558658659308739, 0.5223957738880807, 0.49436546695560557, 0.5846915324038275, 0.5328019209315371, 0.08531576613392822, 0.055865835251026286, 9.999999999998899e-05, 0.053087565351553345, 9.999999999998899e-05, 9.999999999998899e-05, 0.042197841963611205, 9.999999999998899e-05, 9.999999999998899e-05, 0.08976277286389889, 0.05810644511124319, 0.10619138322537014, 0.14491832418022454, 0.12130913671692545, 0.07108305547089855, 0.07840480652034254, 0.08568417266402317, 0.08335394217394354, 0.09169413090782108, 0.13088016379046452, 0.08216557031788474, 0.0705893049796672, 0.13491280048297083, 0.13202614240672483, 0.11020552873445577, 0.10716111912048454, 0.08764153379712569, 0.96909933525758, 0.9580184224882924, 0.8640148196186449, 0.9429918520464515, 0.8769589206849598, 0.9324330821054272, 0.9668754804291445, 0.9561974737212194, 0.9627366978785781, 0.3771087080831833, 0.3401123831422619, 0.34251646638177147, 0.38513026905824077, 0.36763513679898174, 0.3394958853819542, 0.35528895632739654, 0.37315793684475174, 0.3504648226198863, 0.2291291721516362, 0.13722708374852322, 0.1706409956852023, 0.28155550592570333, 0.21900246156418912, 0.21137699819336764, 0.23859974175347098, 0.34236063566220165, 0.2296818989194458, 0.22498817633349577, 0.21808747995021327, 0.21794636772645803, 0.2325873095515414, 0.21869752223395478, 0.2548190752515237, 0.23105624504164357, 0.19434193567906077, 0.21926115829120063, 0.23577548232054546, 0.31951171582379856, 0.2580266633132118, 0.1870321653070357, 0.23278711358802318, 0.16551877205709864, 0.21542086396165128, 0.19930585910308218, 0.20509285271834676, 0.056080805472133344, 9.999999999998899e-05, 0.07820936147367408, 0.04822628464794376, 0.08819440147940127, 9.999999999998899e-05, 0.011238882029315445, 9.999999999998899e-05, 0.010951815993526681, 0.07144567087054088, 0.06720956963431857, 0.08482515232215282, 0.042748988095103746, 0.013630076946425262, 0.01865324565909976, 0.0997639948264808, 0.02079509510627653, 0.07432512214835918, 9.999999999998899e-05, 0.05224170047267784, 0.008790101879684653, 0.006076565232197906, 0.05214129260133249, 0.0543182529861308, 0.0831422017682264, 0.06984822067391483, 0.03142938986735411, 0.1206888630346784, 0.14760737783422861, 0.09569729384440451, 0.1458355596688743, 0.10497353227584849, 0.15547333905493055, 0.1444472830616047, 0.14345570677927555, 0.1622872844443225, 0.45503393066425246, 0.4065338889708431, 0.45846371879774217, 0.4190821050645621, 0.4805798162944408, 0.44904247083516813, 0.42410088645473465, 0.46967524807515304, 0.4495803406074882, 0.10028443286796251, 0.04694844562447287, 0.12815607686939778, 0.09161148739871006, 0.12578342661004194, 0.09456969875210774, 0.13553207526068112, 0.10155602043907053, 0.10277121052035743, 0.24873798684814197, 0.1884958435370736, 0.20248055355427008, 0.2524009622563991, 0.2940531041710739, 0.2990524014725725, 0.2525782045526811, 0.2234894209413777, 0.17715257057440725, 0.3088595746290612, 0.21711250221070066, 0.1706348490472015, 0.30381444094482624, 0.22352128019959683, 0.17820328540700558, 0.2888199888892836, 0.20958983577062162, 0.1014076668759526, 0.28876846800006284, 0.19129397366462975, 0.07901079727682392, 0.23224044221575946, 0.22529458649543244, 0.1283302937173454, 0.2037767229488029, 0.17260303174422442, 0.024439322440478417, 0.19904355973249277, 0.20745593100404291, 0.19917655957042568, 0.224131087410538, 0.24075380884183928, 0.17678533525514173, 0.224746185038323, 0.18565862870991612, 0.19086011895362498, 0.1892602779608562, 0.19572845255977034, 0.2037682212036187, 0.20415953179226431, 0.1968139804395136, 0.19691930656922596, 0.1917594488088714, 0.19847892448277027, 0.22059301933400088, 0.12343615120969187, 0.13708456941198788, 0.10520694734648983, 0.17392735384093871, 0.1129817853113173, 0.062053938425852495, 0.10891167898258558, 0.11525909246986177, 0.1688400166443076, 0.7255570338894325, 0.11330881534073267, 0.6929360623125049, 0.1563540581874049, 0.21423989346926542, 0.21268933330136275, 0.6927020080907433, 0.16615423499685, 0.46478444198004065, 0.20435675744972226, 0.18652210881923748, 0.189236943720949, 0.19698275688028943, 0.20675971111405655, 0.20780981207476046, 0.19581556128731303, 0.18237504500507762, 0.18396534661118058, 0.0743498855026603, 0.07414598671392503, 0.06670387461478999, 0.08609994385151898, 0.08629715393640125, 0.11574609692359517, 0.10439840280682167, 0.09124026222899995, 0.05560635699658001]}, "mutation_prompt": null}
{"id": "1b0295b2-bbad-44a1-bb5e-b09010c56618", "solution": "class DynamicMutationHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= max(0.95, 1 - (best_fitness - func(best_solution - self.step_size)) / (best_fitness + 1e-8))\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (self.dim, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= max(0.9, 1 - (best_fitness - func(best_solution - self.step_size)) / (best_fitness + 1e-8))\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicMutationHybridFireAntCuckooOptimizationImproved", "description": "Utilize a dynamic learning rate adaptation technique to enhance convergence speed by adjusting step sizes more aggressively based on fitness improvement rates.", "configspace": "", "generation": 53, "fitness": 0.17034107699532672, "feedback": "The algorithm DynamicMutationHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.21.", "error": "", "parent_id": "c75cea45-2412-474b-86a1-7e13c9db4ad8", "metadata": {"aucs": [0.45107626528167466, 0.43248218420531603, 0.4481196859985561, 0.4609896592347994, 0.4731583946689685, 0.46514310168011375, 0.45268100878294304, 0.46076713514646994, 0.44120320633265486, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037332905704124952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11070291607376892, 0.1131466304537283, 0.03892984427984569, 0.07270930423227617, 0.0638161887749793, 0.07862063641504768, 0.07424643838867506, 0.06773958001499869, 0.050816602258547006, 0.09425085483542939, 0.08428115469204189, 0.01037236747900716, 0.06454257802710384, 0.00022166504395282338, 0.007752511308037668, 0.011513719877054407, 0.0034797353259539143, 9.999999999998899e-05, 0.986513335665249, 0.9939972559985676, 0.9909662377190723, 0.9606386290641848, 0.9493779873311866, 0.9604029523725012, 0.9628216254649482, 0.983647469975095, 0.9589830891762023, 0.18549901075822117, 0.1880968561793408, 0.17934252631855618, 0.1854388674057259, 0.09350001691853271, 0.22457927383934173, 0.29360762367645665, 0.13679145865054287, 0.12919663529066894, 0.13119963260719092, 0.06514200343037535, 0.03392676069626832, 0.0811993615918507, 0.05859349527816271, 0.0013894807267977871, 0.06733794997483933, 0.0363931710214469, 0.009458133042366312, 0.17443351535946894, 0.1444237899195272, 0.1602570048100993, 0.23096574928122815, 0.15567085980686024, 0.15573329113922008, 0.18390426578064334, 0.10264596707286999, 0.1629963571441575, 0.12502731820285373, 9.999999999998899e-05, 9.999999999998899e-05, 0.1415265766850543, 0.1148586558057002, 0.1257045908894837, 0.1880656166259529, 0.008180788687270457, 0.010553643125473022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03513518071145194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09223806124887146, 0.04204889028644043, 0.08243057891881778, 0.055693543676404444, 0.017402037647822, 0.023586298452980214, 0.16441681845162837, 0.01868034073797553, 0.0095398334717125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10395563905552807, 0.048904350698398824, 0.06618363542911065, 0.08906281497439883, 0.08595832793956448, 0.06373648808131926, 0.09770552557452994, 0.11423473305436604, 0.17825617904827373, 0.43107329823280427, 0.4358000683624691, 0.4196008862178039, 0.4331257564097959, 0.39310318385792287, 0.3026272523546272, 0.4435446602083173, 0.3819470337518722, 0.3934397993387142, 0.0852384435263972, 0.09321905046240586, 0.05271945777866549, 0.0798196039956347, 0.08775277708416163, 0.08801169909014639, 0.08869887740198668, 0.07536890133927865, 0.06378891254901098, 0.14824926504089708, 0.14398927618291835, 0.1634645993604278, 0.18485454606207619, 0.17508056712142583, 0.1879719871697979, 0.11865176970989755, 0.1666289905588224, 0.1664017280454807, 0.13047370482552256, 0.29571918271881303, 0.14618906036972545, 0.1453101381453984, 0.10653020902502686, 0.11315605124827233, 0.18061137906697533, 0.17585364736572207, 0.17504634364888427, 0.0739750671148055, 0.04430599092994658, 0.04411292032841485, 0.07871099304119766, 0.0491437623340667, 0.04716460303627645, 0.10179226617086168, 0.08075873736237049, 0.09008325615742074, 0.2213440255563568, 0.11372639759254377, 0.12544703790699274, 0.16860853486954297, 0.16636918960047475, 0.11705038995478556, 0.19413417921791432, 0.15790514880079376, 0.15688686329215507, 0.19988795035861784, 0.14195647898290575, 0.15767573913811206, 0.1653316278771153, 0.1680430095420703, 0.15958583289001926, 0.16578822143523453, 0.137818867842749, 0.17064186780042168, 0.185890389501555, 0.13664928894884454, 0.6201663017819231, 0.08853418498344068, 0.09542221272421125, 0.19782142973770722, 0.10890785576545225, 0.12673808356384875, 0.16902589463470485, 0.6090897056937938, 0.11333786647437538, 0.5946292981911087, 0.15339710400871664, 0.21328763019353414, 0.20927070508100998, 0.6390792835847964, 0.113188564834793, 0.20999315087830484, 0.1855000086587042, 0.1833798117170159, 0.1665566555078678, 0.17039302559533898, 0.17800183850401863, 0.18324915490718063, 0.2035030912856719, 0.22852595091238848, 0.20246989098732215, 0.046188226731959325, 0.008098492122296408, 0.02391682537332851, 0.05127670566944931, 0.01767060955821942, 0.02798359047978194, 0.06069978587929947, 0.004509300064323596, 0.03455488234051152]}, "mutation_prompt": null}
{"id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimization", "description": "Implement a dynamic population size adjustment strategy to enhance diversity and convergence speed.", "configspace": "", "generation": 54, "fitness": 0.22738108647946909, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "c75cea45-2412-474b-86a1-7e13c9db4ad8", "metadata": {"aucs": [0.47464823922601773, 0.4960977226639838, 0.5140920657493255, 0.4709509815243135, 0.5108802733693141, 0.5124298340539506, 0.4400184211566567, 0.4948941561581932, 0.5175751262265329, 0.014311368185425777, 0.029645082810526358, 0.001728582535117984, 0.02822469494282487, 0.014523916986128094, 9.999999999998899e-05, 0.09498457916647352, 0.04480894895491783, 9.999999999998899e-05, 0.11502643410785018, 0.08736508074697702, 0.0859407964929817, 0.06172065295509399, 0.10631267471080641, 0.09863477783921626, 0.08971656315986987, 0.12131190177317874, 0.10174138230828134, 0.07190956772781887, 0.10448746135324327, 0.07922395102595492, 0.0506268662323891, 0.09772868155424641, 0.10890559038461434, 0.09946172637899231, 0.11991548448845224, 0.09011369339214947, 0.9693911454624419, 0.9718857400461399, 0.9299569096429126, 0.920316503719304, 0.9519306469018087, 0.9379536346456472, 0.9546467168166919, 0.957468468320245, 0.9681722132685019, 0.3732561801132005, 0.359096635073639, 0.3393838847147549, 0.3386337294099664, 0.36845936290453996, 0.3485539396933869, 0.34091814791200004, 0.3464888491775898, 0.31005765319099177, 0.6403401361812735, 0.16463447616760774, 0.22364969391886125, 0.28005413047132577, 0.7243489676121303, 0.26942132740668645, 0.3417214112756978, 0.3621070212099027, 0.34270547418864006, 0.189012889482303, 0.2062572375485282, 0.1954348626537502, 0.14541752309360856, 0.21592699847203467, 0.21295171195925544, 0.2331552859820175, 0.1817150189687643, 0.19711833191800954, 0.16071116186542944, 0.2132612242660733, 0.1993650364563695, 0.1802516568741348, 0.17756071821823372, 0.17372911069010044, 0.2249983422339059, 0.19247093651321734, 0.17275020439280964, 0.02797328554428824, 0.11944810614467971, 0.031637333333603745, 0.030324273836209836, 0.027274883313309184, 0.026214997864223766, 9.999999999998899e-05, 0.008165934734150837, 9.999999999998899e-05, 0.04578574857127338, 0.21448384225338502, 0.09165634225623542, 0.05684563263719833, 0.061629206751193655, 0.03402438297379817, 0.08461886159575593, 0.0699506776421236, 0.03749075357298537, 0.03429465557871714, 0.01255153159332989, 9.999999999998899e-05, 0.014690833086259736, 0.018979423691891872, 0.028255400296974598, 0.03198870006471477, 0.02072020327540447, 0.030950636433505485, 0.1354924558667563, 0.12783908383670073, 0.12086944261658594, 0.16594125397325765, 0.13847283037238634, 0.14161022615372754, 0.1182298323117209, 0.14162766706630936, 0.13545101264675852, 0.42463423296332403, 0.410595004060501, 0.4246094821269587, 0.4281195773732338, 0.4444970578190267, 0.4504812016061689, 0.4322037897596789, 0.4444343005259377, 0.4227908993648821, 0.15556904376888359, 0.10892015050972625, 0.10180682556407739, 0.09631199354471898, 0.11068877858633097, 0.07960432694634478, 0.12788060359500575, 0.12551192298603486, 0.16386055328434412, 0.22665755038115276, 0.27437362150486655, 0.17199194785345695, 0.2516359477862363, 0.2902468030390809, 0.28190060539833617, 0.2938235035618231, 0.2712619260137611, 0.29465793632067816, 0.28872303568100366, 0.3046332984238401, 0.15730132958873255, 0.2799749371690494, 0.26059611854080245, 0.15286372125515535, 0.21692444395386978, 0.22835981865149935, 0.11070282285223387, 0.2575165150382527, 0.12238324741236462, 0.09465790681320796, 0.24474087952454016, 0.22252870741262032, 0.12504087055115776, 0.23087290507703728, 0.23438386203356243, 0.1847769040392312, 0.18262318457316684, 0.2074998854159089, 0.19425568780903923, 0.21326601439018544, 0.19413510248726285, 0.2061044875084117, 0.19599428523737483, 0.20538168791043876, 0.19350526147997238, 0.19110499562525396, 0.1964075763221086, 0.18104752230383214, 0.22048513594867836, 0.27142937312985316, 0.19949733467749686, 0.18775157959115352, 0.19418887004626673, 0.19572466915987874, 0.12320522179850346, 0.13726430453255611, 0.7449554183322589, 0.1734481453373906, 0.11245654127418325, 0.061978862094536624, 0.10871308155723636, 0.11527970203776294, 0.16916399136435245, 0.6642418501852683, 0.11310478223235843, 0.08311858692222829, 0.1689354456214387, 0.21260648818375616, 0.2126807425167817, 0.6753728343185039, 0.16888051904337753, 0.6410967292964964, 0.19261465792173593, 0.19449845668892207, 0.18544409964488184, 0.1948356689986085, 0.20352947088228412, 0.20709255486139977, 0.20971834462984773, 0.188301512036127, 0.19622964165385381, 0.09626169689870712, 0.09106155228905188, 0.05998059055124927, 0.06883053155468277, 0.08380330322335316, 0.09724897107497876, 0.0954478426727926, 0.07954298933458026, 0.08332800085459802]}, "mutation_prompt": null}
{"id": "1769d8c3-5a0f-4adc-8b97-5c82b2415078", "solution": "from concurrent.futures import ThreadPoolExecutor\n\nclass ParallelDynamicPopulationSizeHybridFireAntCuckooOptimization(DynamicPopulationSizeHybridFireAntCuckooOptimization):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        with ThreadPoolExecutor() as executor:\n            futures = []\n            for _ in range(self.budget):\n                if np.random.rand() < mutation_prob:  \n                    best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    best_fitness = func(best_solution)\n                    mutation_prob *= 0.99  \n                    self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n\n                steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n                \n                for step in steps:\n                    new_solution = np.clip(best_solution + step, self.lower_bound, self.upper_bound)\n                    futures.append(executor.submit(func, new_solution))\n                    \n                results = [future.result() for future in futures]\n                new_fitnesses = np.array(results)\n                \n                min_idx = np.argmin(new_fitnesses)\n                if new_fitnesses[min_idx] < best_fitness:\n                    best_solution = best_solution + steps[min_idx]\n                    best_fitness = new_fitnesses[min_idx]\n                    self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n\n                cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                cuckoo_fitness = func(cuckoo_solution)\n                if cuckoo_fitness < best_fitness:\n                    best_solution = cuckoo_solution\n                    best_fitness = cuckoo_fitness\n\n        return best_solution", "name": "ParallelDynamicPopulationSizeHybridFireAntCuckooOptimization", "description": "Implement a parallel evaluation strategy for multiple candidate solutions to speed up optimization convergence.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 11 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 11 is out of bounds for axis 0 with size 10')", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {}, "mutation_prompt": null}
{"id": "35f6a5ac-bb1e-431b-9019-739265604cb3", "solution": "import concurrent.futures\n\nclass ParallelDynamicPopulationSizeHybridFireAntCuckooOptimization(DynamicPopulationSizeHybridFireAntCuckooOptimization):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        def evaluate_solution(sol):\n            fitness = func(sol)\n            return sol, fitness\n        \n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                if np.random.rand() < mutation_prob:\n                    best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    best_fitness = func(best_solution)\n                    mutation_prob *= 0.99\n                    self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n\n                steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n                new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n                new_fitnesses = []\n                futures = {executor.submit(evaluate_solution, sol): sol for sol in new_solutions}\n                for future in concurrent.futures.as_completed(futures):\n                    sol, fitness = future.result()\n                    new_fitnesses.append(fitness)\n\n                min_idx = np.argmin(new_fitnesses)\n                if new_fitnesses[min_idx] < best_fitness:\n                    best_solution = new_solutions[min_idx]\n                    best_fitness = new_fitnesses[min_idx]\n                    self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n\n                cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                cuckoo_fitness = func(cuckoo_solution)\n                if cuckoo_fitness < best_fitness:\n                    best_solution = cuckoo_solution\n                    best_fitness = cuckoo_fitness\n\n        return best_solution", "name": "ParallelDynamicPopulationSizeHybridFireAntCuckooOptimization", "description": "Implement a parallel evaluation strategy to speed up optimization convergence.", "configspace": "", "generation": 56, "fitness": 0.21663652226706948, "feedback": "The algorithm ParallelDynamicPopulationSizeHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {"aucs": [0.4955183148788971, 0.5236903029650422, 0.5306063855954238, 0.4920132216213958, 0.5142533705493023, 0.5248426011697138, 0.48130292058532764, 0.5236162017559639, 0.5094183159796324, 0.012046677642799986, 9.999999999998899e-05, 9.999999999998899e-05, 0.1305104087157537, 0.014255494798496748, 9.999999999998899e-05, 9.999999999998899e-05, 0.011747618074277488, 9.999999999998899e-05, 0.09241741632401557, 0.12391256342839208, 0.08619810279751183, 0.07539445819850443, 0.09817706204733934, 0.06118815435650615, 0.11844791658415776, 0.12477806722777862, 0.12681134093464264, 0.07332441892176356, 0.06795948294954401, 0.04741753413312799, 0.11013547647585709, 0.04362551230629652, 0.07632844056128829, 0.058241945839424436, 0.08127607549687021, 0.07491275210593484, 0.9588420783149099, 0.953561955302923, 0.9174078013610686, 0.9443673988811909, 0.9525521736236053, 0.9199814273610591, 0.9578014164673745, 0.9547659806090051, 0.9676594611969003, 0.33612808606112654, 0.3440784455518415, 0.3496187960906486, 0.3309419113874822, 0.3363447522167632, 0.36158293253378293, 0.37113890377962433, 0.3420423455526147, 0.32818187300349455, 0.7905364665222164, 0.1974350564496371, 0.21902486211396044, 0.21246313709277165, 0.3452262808631361, 0.2115174150515995, 0.655240852841076, 0.3488045845000355, 0.14209131814519205, 0.1805085659300676, 0.21254884204971347, 0.20861302279667393, 0.17645087685719318, 0.19581479736042995, 0.19088009100854675, 0.1752313208051064, 0.21802778716610383, 0.19912675683851422, 0.17877713183257204, 0.18997929675926306, 0.18728224506544489, 0.18870321254582234, 0.1262058935019289, 0.1481534402509035, 0.233403727841342, 0.2071452424004646, 0.1650850230196944, 0.0337167248225283, 0.0038080061720132674, 0.000847098933524304, 0.03661107582879464, 0.0539432592533331, 0.020676133749308434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05341891232306739, 0.10953338750045638, 0.11078235089324029, 0.06920309216105702, 0.06396571079381097, 0.032478082075894754, 0.07619365065728811, 0.022541878136039695, 0.07649398935380103, 0.01782416283803756, 0.023460015443506177, 0.017033086084698668, 0.013155473097157255, 0.007042322461444206, 0.049994113750373104, 0.012483884723806682, 0.013952084852636881, 0.02004991218319696, 0.1063129864693847, 0.1564849448988287, 0.14424288998403467, 0.1369518911017802, 0.1307474932862358, 0.11776079156724206, 0.1400527343785437, 0.15982959843712452, 0.13314609972311542, 0.4173417534856604, 0.4434890188263968, 0.4226793988408162, 0.4167884600630819, 0.42890031408174334, 0.43426421447999974, 0.42020214664205646, 0.4381045123676054, 0.41315546841664996, 0.11737849500648967, 0.09021029555778437, 0.12654241281365086, 0.08899177622575172, 0.11243260941710542, 0.07683239613979531, 0.11562939521779514, 0.11245778590966315, 0.08675439616341862, 0.2750212530048187, 0.3163551084129831, 0.24963739659372042, 0.18420408363746987, 0.3084910023470596, 0.21430297296556444, 0.2823278112076163, 0.24658335959573474, 0.3136281494242902, 0.1954294707605716, 0.10841336726156936, 0.13841110302088233, 0.31281682522698573, 0.2999375788122076, 0.28959702276829025, 0.28737478436536046, 0.2141994109680886, 0.15640199138129995, 0.2479407141228699, 0.2705472872339223, 0.08992525623577674, 0.23209011572970384, 0.2048462451474834, 0.2446356346234123, 0.17177918824781369, 0.21077374710276786, 0.03457553040904493, 0.1852170903227971, 0.20572884097755173, 0.20110429585484935, 0.2028428074859251, 0.18309561888855752, 0.1985161500742897, 0.194732066092547, 0.15942210983855054, 0.21171877605820721, 0.177992731346859, 0.20238412584157073, 0.1964318505882897, 0.1883273254993454, 0.22232236797615845, 0.18963590611383985, 0.18671400223600532, 0.1769851320703827, 0.20383992592785227, 0.12349876749996602, 0.136831066919476, 0.1048152662514743, 0.10998341982413584, 0.11205690956580783, 0.11421664015425304, 0.10876432963312221, 0.12701304879162711, 0.15365763791935838, 0.6242214619932555, 0.11338884851322528, 0.029567782911244622, 0.1694796034985484, 0.10501950066136034, 0.21025045416490007, 0.16750043784917434, 0.16839785331267743, 0.6054221144815313, 0.21483485874889408, 0.20638852305375066, 0.19400848527529813, 0.1899816314773337, 0.2056557123244137, 0.1966648174094593, 0.18844327902117464, 0.19239653985128113, 0.2025942189755685, 0.0938709882899399, 0.08643269368750228, 0.09565857821325485, 0.07590184801183475, 0.07953550977871382, 0.10194055006929625, 0.10359492725156638, 0.0736509081696286, 0.05725583281549029]}, "mutation_prompt": null}
{"id": "91033f88-0598-49f9-bdbe-96039f734793", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n                population_size = int(population_size * 1.01)  # Dynamic population size adjustment for faster convergence\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimization", "description": "Utilize a dynamic population size adjustment strategy to adaptively control exploration and exploitation trade-off for faster convergence.", "configspace": "", "generation": 57, "fitness": 0.22738108647946909, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {"aucs": [0.47464823922601773, 0.4960977226639838, 0.5140920657493255, 0.4709509815243135, 0.5108802733693141, 0.5124298340539506, 0.4400184211566567, 0.4948941561581932, 0.5175751262265329, 0.014311368185425777, 0.029645082810526358, 0.001728582535117984, 0.02822469494282487, 0.014523916986128094, 9.999999999998899e-05, 0.09498457916647352, 0.04480894895491783, 9.999999999998899e-05, 0.11502643410785018, 0.08736508074697702, 0.0859407964929817, 0.06172065295509399, 0.10631267471080641, 0.09863477783921626, 0.08971656315986987, 0.12131190177317874, 0.10174138230828134, 0.07190956772781887, 0.10448746135324327, 0.07922395102595492, 0.0506268662323891, 0.09772868155424641, 0.10890559038461434, 0.09946172637899231, 0.11991548448845224, 0.09011369339214947, 0.9693911454624419, 0.9718857400461399, 0.9299569096429126, 0.920316503719304, 0.9519306469018087, 0.9379536346456472, 0.9546467168166919, 0.957468468320245, 0.9681722132685019, 0.3732561801132005, 0.359096635073639, 0.3393838847147549, 0.3386337294099664, 0.36845936290453996, 0.3485539396933869, 0.34091814791200004, 0.3464888491775898, 0.31005765319099177, 0.6403401361812735, 0.16463447616760774, 0.22364969391886125, 0.28005413047132577, 0.7243489676121303, 0.26942132740668645, 0.3417214112756978, 0.3621070212099027, 0.34270547418864006, 0.189012889482303, 0.2062572375485282, 0.1954348626537502, 0.14541752309360856, 0.21592699847203467, 0.21295171195925544, 0.2331552859820175, 0.1817150189687643, 0.19711833191800954, 0.16071116186542944, 0.2132612242660733, 0.1993650364563695, 0.1802516568741348, 0.17756071821823372, 0.17372911069010044, 0.2249983422339059, 0.19247093651321734, 0.17275020439280964, 0.02797328554428824, 0.11944810614467971, 0.031637333333603745, 0.030324273836209836, 0.027274883313309184, 0.026214997864223766, 9.999999999998899e-05, 0.008165934734150837, 9.999999999998899e-05, 0.04578574857127338, 0.21448384225338502, 0.09165634225623542, 0.05684563263719833, 0.061629206751193655, 0.03402438297379817, 0.08461886159575593, 0.0699506776421236, 0.03749075357298537, 0.03429465557871714, 0.01255153159332989, 9.999999999998899e-05, 0.014690833086259736, 0.018979423691891872, 0.028255400296974598, 0.03198870006471477, 0.02072020327540447, 0.030950636433505485, 0.1354924558667563, 0.12783908383670073, 0.12086944261658594, 0.16594125397325765, 0.13847283037238634, 0.14161022615372754, 0.1182298323117209, 0.14162766706630936, 0.13545101264675852, 0.42463423296332403, 0.410595004060501, 0.4246094821269587, 0.4281195773732338, 0.4444970578190267, 0.4504812016061689, 0.4322037897596789, 0.4444343005259377, 0.4227908993648821, 0.15556904376888359, 0.10892015050972625, 0.10180682556407739, 0.09631199354471898, 0.11068877858633097, 0.07960432694634478, 0.12788060359500575, 0.12551192298603486, 0.16386055328434412, 0.22665755038115276, 0.27437362150486655, 0.17199194785345695, 0.2516359477862363, 0.2902468030390809, 0.28190060539833617, 0.2938235035618231, 0.2712619260137611, 0.29465793632067816, 0.28872303568100366, 0.3046332984238401, 0.15730132958873255, 0.2799749371690494, 0.26059611854080245, 0.15286372125515535, 0.21692444395386978, 0.22835981865149935, 0.11070282285223387, 0.2575165150382527, 0.12238324741236462, 0.09465790681320796, 0.24474087952454016, 0.22252870741262032, 0.12504087055115776, 0.23087290507703728, 0.23438386203356243, 0.1847769040392312, 0.18262318457316684, 0.2074998854159089, 0.19425568780903923, 0.21326601439018544, 0.19413510248726285, 0.2061044875084117, 0.19599428523737483, 0.20538168791043876, 0.19350526147997238, 0.19110499562525396, 0.1964075763221086, 0.18104752230383214, 0.22048513594867836, 0.27142937312985316, 0.19949733467749686, 0.18775157959115352, 0.19418887004626673, 0.19572466915987874, 0.12320522179850346, 0.13726430453255611, 0.7449554183322589, 0.1734481453373906, 0.11245654127418325, 0.061978862094536624, 0.10871308155723636, 0.11527970203776294, 0.16916399136435245, 0.6642418501852683, 0.11310478223235843, 0.08311858692222829, 0.1689354456214387, 0.21260648818375616, 0.2126807425167817, 0.6753728343185039, 0.16888051904337753, 0.6410967292964964, 0.19261465792173593, 0.19449845668892207, 0.18544409964488184, 0.1948356689986085, 0.20352947088228412, 0.20709255486139977, 0.20971834462984773, 0.188301512036127, 0.19622964165385381, 0.09626169689870712, 0.09106155228905188, 0.05998059055124927, 0.06883053155468277, 0.08380330322335316, 0.09724897107497876, 0.0954478426727926, 0.07954298933458026, 0.08332800085459802]}, "mutation_prompt": null}
{"id": "5acf940c-538d-4be1-be05-19dc85c59f6b", "solution": "class AdaptiveStepSizeDynamicPopulationHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        successful_steps = 0\n        total_steps = 0\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                successful_steps += 1\n            else:\n                self.step_size *= 1.02  # Increase step size for unsuccessful steps to explore more space\n                \n            total_steps += 1\n            if total_steps % 10 == 0:  # Adaptive step size control every 10 steps\n                success_rate = successful_steps / 10\n                if success_rate < 0.2:\n                    self.step_size *= 0.9\n                elif success_rate > 0.8:\n                    self.step_size *= 1.1\n                successful_steps = 0\n        \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "AdaptiveStepSizeDynamicPopulationHybridFireAntCuckooOptimization", "description": "Implement an adaptive step size control mechanism to dynamically adjust the step size based on the fitness landscape to improve convergence speed.", "configspace": "", "generation": 58, "fitness": 0.20064301196156048, "feedback": "The algorithm AdaptiveStepSizeDynamicPopulationHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {"aucs": [0.41636472562192905, 0.4116414288635075, 0.44649814197811577, 0.4857589471680791, 0.4359610465477112, 0.4252239334258394, 0.43542655881753134, 0.4399802092536941, 0.42765548573435586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010052840679499409, 9.999999999998899e-05, 9.999999999998899e-05, 0.006750095101690223, 9.999999999998899e-05, 9.999999999998899e-05, 0.09627347995952873, 0.10522528260182662, 0.09016554780561237, 0.09365918629303593, 0.12977592593241027, 0.09301502509970705, 0.1339451744143827, 0.09767630212729383, 0.12446943807889987, 0.07126565900474857, 0.08314113850618343, 0.11160795852555783, 0.09895993838855865, 0.09270575468334596, 0.07189601816828639, 0.0876482132431764, 0.1169628432905494, 0.07406729635564102, 0.9717289600844851, 0.9724523077887, 0.9442223866406997, 0.9442027826154311, 0.9695360529745426, 0.9484408970717, 0.9617253174820876, 0.9689988165072726, 0.9682709290972595, 0.22963179569496672, 0.2529512087086704, 0.23024973142426353, 0.2945913540599697, 0.2496723445607295, 0.29569737359963966, 0.24028326342894935, 0.22412929973546802, 0.2168265596241219, 0.21754290028661194, 0.21999156138969433, 0.23445607527189072, 0.21314491268905666, 0.19270532569281684, 0.19250203305871316, 0.23207125018290564, 0.22570101892783545, 0.2665265794132212, 0.132542370155738, 0.16160605562346186, 0.13970295467478477, 0.12552271540693705, 0.14469264433177687, 0.19824953755526376, 0.12989915333597368, 0.14205840463726704, 0.13209500896611392, 0.14521413025067575, 0.1438513065231416, 0.19517839334291798, 0.138677338037007, 0.16950515829400514, 0.13583852215550885, 0.14910906496161547, 0.15178161363810372, 0.14495775564678604, 0.0013743125586391791, 9.999999999998899e-05, 9.999999999998899e-05, 0.00016177056739874462, 0.0017710168261624304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07214685675323684, 0.10951432543534556, 0.11677206169232701, 0.04416175997076266, 0.040907684926268506, 0.054336633210662844, 0.09139411996647084, 0.08266690137346655, 0.052537140666534254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08088936075772657, 0.11153238610640459, 0.09398551636820995, 0.062134392337685806, 0.09133668880317869, 0.06987770151318551, 0.07697689033432487, 0.1001440464541754, 0.1063888150119423, 0.41543036321441007, 0.3757974869671713, 0.38502923547814905, 0.39520592220892126, 0.3878467849415892, 0.37263387635512113, 0.3911826909981908, 0.3831137445558558, 0.3736953575896338, 0.10684541392768299, 0.0893226136961226, 0.10667756412552643, 0.09099618760894812, 0.10686662714643458, 0.07810993986633208, 0.12071607708157295, 0.11069705979375777, 0.09615699600712557, 0.1550967718395312, 0.16760568914289886, 0.17250350290347227, 0.2578739849019245, 0.170723136456996, 0.2252908225938588, 0.24465133537562234, 0.16360055003866658, 0.21188964769269647, 0.25084061681967396, 0.2479278034198008, 0.25291796060146887, 0.22628943860180706, 0.25201481563602235, 0.23861914059110756, 0.2193331995607185, 0.26698501391374585, 0.2065763458198041, 0.2154645918631527, 0.1635640895018451, 0.18578177237318916, 0.20164304957517287, 0.1637224716648743, 0.15336984135127552, 0.1769560634208861, 0.17919721832150648, 0.16820374084862977, 0.17193252633886347, 0.1907436650543609, 0.1957065382634522, 0.17740809357955456, 0.18360575715110716, 0.1769981820497727, 0.1706567921517088, 0.19082486142397304, 0.20282425253616143, 0.20003452380723097, 0.1830288019486136, 0.20591114726631288, 0.19523689965115532, 0.1937088695562169, 0.19967502962769135, 0.19259576648485577, 0.19120432597894899, 0.17599820704053892, 0.18192340364185033, 0.13406358909845417, 0.5554905275226513, 0.17314277093041897, 0.14984939252040808, 0.41993080887845213, 0.15664099265092846, 0.1425446183462582, 0.5522806743899622, 0.4828808103574119, 0.18736524779165953, 0.11553673085965599, 0.1688725311690561, 0.21129078458726858, 0.3048356334926432, 0.35290380217637374, 0.1686592854017348, 0.3866030683196897, 0.17319854888359987, 0.19617171776985232, 0.17131963711374187, 0.1835074198806208, 0.19124678012823249, 0.20047574796200107, 0.1972581170106783, 0.18389050144958297, 0.1935268062850769, 0.07526232304871505, 0.0994522909946518, 0.0627846223861721, 0.08773898224615295, 0.08819946397531608, 0.08598712772719297, 0.08205506372479343, 0.09014565686587661, 0.07307516495292965]}, "mutation_prompt": null}
{"id": "e992d58a-adbd-4f54-a125-99450f6f1aa9", "solution": "class DynamicMutatingPopulationSizeHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99 if func(best_solution) < best_fitness else 1.01  # Adaptive mutation rate\n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicMutatingPopulationSizeHybridFireAntCuckooOptimization", "description": "Implement adaptive mutation operator to dynamically adjust the mutation rate based on fitness improvement rate for faster convergence.", "configspace": "", "generation": 59, "fitness": 0.2072242961362706, "feedback": "The algorithm DynamicMutatingPopulationSizeHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {"aucs": [0.4330967615249811, 0.4715789622008849, 0.4845862331506968, 0.45051378377277007, 0.4232552460404565, 0.4947748926248089, 0.43417227930916524, 0.46537300304009954, 0.4595512824270941, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04007755927208689, 9.999999999998899e-05, 9.999999999998899e-05, 0.03453002418460782, 9.999999999998899e-05, 9.999999999998899e-05, 0.10355813688848026, 0.08597035824599975, 0.07008571778686512, 0.08197362611494485, 0.10626126834420391, 0.08922166545860344, 0.1257211480594036, 0.12123851328465063, 0.1057407365111801, 0.061062205688725446, 0.10043696181790329, 0.061286648982958436, 0.09279520441010536, 0.046963562735250375, 0.09893822115659656, 0.0960362284516747, 0.07669979341430566, 0.08492363450660978, 0.9646625494596494, 0.9714272746512518, 0.8821712139925032, 0.9051321490274196, 0.9511534584218553, 0.9065705479437399, 0.9585550020302308, 0.9567102196864719, 0.962866374253978, 0.28531553036853163, 0.31438910531866515, 0.30831106158456345, 0.29354196162402146, 0.2916262087752617, 0.30724575562828105, 0.2904254425548698, 0.33122575977840885, 0.32380944229717856, 0.22174865662373677, 0.21959418786053508, 0.2341557363386333, 0.3434498036381646, 0.35356385225869846, 0.21873562651328116, 0.2335284661241176, 0.3652462888078989, 0.17865323068272354, 0.17977784429207166, 0.18238000100394525, 0.21072257277338702, 0.21063258231948945, 0.14217154770627927, 0.16083109970860876, 0.17008558900672854, 0.146157044078993, 0.16176037659787001, 0.18358937971544576, 0.23324422717533166, 0.12944879925606423, 0.14825553799653246, 0.18752975436235786, 0.14769033344758897, 0.17183711753836872, 0.14098182991161412, 0.16232282336952175, 9.999999999998899e-05, 9.999999999998899e-05, 0.0373966020249471, 9.999999999998899e-05, 0.005823078373335955, 0.04087027181107439, 0.04041869913843488, 0.12784973847833658, 0.05505582397124431, 0.10222198025125795, 0.13316566132267804, 0.12344347573827819, 0.048548812706943445, 0.07932934408761738, 0.03912392287194666, 0.06621197498004172, 0.05765671253063431, 0.045954780070407986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10290290083946041, 0.13039260222565896, 0.11545896046118909, 0.1087994068379654, 0.12165084530539994, 0.11800381762807977, 0.11035415335170895, 0.10143743563016638, 0.09498375143095472, 0.390944970604009, 0.40278061384652697, 0.4168808597114858, 0.4118881454350395, 0.4245159258333552, 0.40310380266314527, 0.39907757031086266, 0.42144192309969053, 0.3962981908476637, 0.10723105080267037, 0.12051735530329222, 0.07497091583434323, 0.08927548975005717, 0.09782298563687652, 0.08646110856319045, 0.11664693721441821, 0.12127447359057009, 0.10961089075514086, 0.16725902940765047, 0.23079672530900897, 0.21269874105527042, 0.19797178935386905, 0.16958372931617838, 0.20184452456348212, 0.24516691013756686, 0.24816063478128536, 0.26368759983036394, 0.28875388427491433, 0.2779535849600606, 0.1136238733914533, 0.28027715012968446, 0.2842087323197324, 0.15381685048521088, 0.2123698273364465, 0.28867055236281625, 0.12849238718030753, 0.19933346061610058, 0.09060802087505448, 0.18527898008791066, 0.20414488469225822, 0.1697769561536142, 0.12440983168260478, 0.22678058171022808, 0.22975687679456047, 0.09588231509256417, 0.20155223430131763, 0.21129514635936208, 0.2309519229451139, 0.18295267627376754, 0.204174517033074, 0.22062202072859904, 0.1970458508779721, 0.2173298676823333, 0.2212695720396577, 0.2508512544574273, 0.19478011664709838, 0.17592633418907677, 0.23438599282528527, 0.2067897586770957, 0.17706039888238612, 0.18974318408596325, 0.1941371462493393, 0.18660729380334717, 0.12324438311228025, 0.13705466224724827, 0.6114210163623964, 0.1733907445784869, 0.1309378283318814, 0.062006428381748635, 0.10868456452305053, 0.11526409870518928, 0.16910853574135876, 0.5128835435080688, 0.11310160923911494, 0.08313137370738022, 0.16888089533038875, 0.21245034630855264, 0.2132607749264125, 0.6380835898025398, 0.16866775169624892, 0.3393093741650962, 0.17018757257093275, 0.17772068229853433, 0.17474935155853621, 0.19098137505927548, 0.20436898857602004, 0.1995353416783584, 0.17450047081040743, 0.18249187479331408, 0.1841620641297499, 0.10064489493865914, 0.1107050984194835, 0.06633954690958022, 0.06715114700301161, 0.08377598953541732, 0.08033752760821167, 0.1099535544105038, 0.08008861613332952, 0.08973363859418382]}, "mutation_prompt": null}
{"id": "cdba6503-bee1-430b-ba2b-e8fc1cc2333d", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        adaptive_prob_decay = 0.95  # Adaptive mutation probability decay rate\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= adaptive_prob_decay\n                self.step_size *= 0.99\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (self.population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimization", "description": "Implement adaptive mutation probabilities for faster convergence speed.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicPopulationSizeHybridFireAntCuckooOptimizati' object has no attribute 'population_size'\").", "error": "AttributeError(\"'DynamicPopulationSizeHybridFireAntCuckooOptimizati' object has no attribute 'population_size'\")", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {}, "mutation_prompt": null}
{"id": "52d8a80b-f340-41df-ac1e-fc2f875f8736", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99 + 0.02  # Adjust step size based on fitness improvement rate with dynamic learning rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98 + 0.02  # Dynamic step size adjustment for faster convergence with adaptive learning rate\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic learning rate adjustment mechanism to adapt step sizes based on fitness improvements.", "configspace": "", "generation": 61, "fitness": 0.20444976697651324, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {"aucs": [0.4402091081371873, 0.43707644862855055, 0.433374467172585, 0.4214404893687619, 0.4314338573232068, 0.4560205288708634, 0.4296342466947728, 0.43150919409966015, 0.41598887273467267, 9.999999999998899e-05, 0.000867184889835837, 9.999999999998899e-05, 0.009744595102432863, 9.999999999998899e-05, 9.999999999998899e-05, 0.04261175625565716, 9.999999999998899e-05, 9.999999999998899e-05, 0.10568221211684681, 0.10292166493979416, 0.11185313636381411, 0.11889546514082361, 0.12944661638379762, 0.11057067371383, 0.09549586606494809, 0.1037324580361958, 0.10545676449541641, 0.10816706066357151, 0.09891555506556782, 0.09467945503026842, 0.08884107540280184, 0.10697346479900405, 0.0965126023214028, 0.09422127672975111, 0.1062738630984561, 0.09899712992535858, 0.9758808918577252, 0.974411862310948, 0.9538162089393255, 0.9550008769567766, 0.9723584077712734, 0.9590045684324495, 0.9629246533977597, 0.9746564574855638, 0.9765009300121144, 0.23315822304019684, 0.22791770536923128, 0.24425306517994705, 0.2533596327057581, 0.22977316716009877, 0.27049672248625845, 0.24674789376303297, 0.21297601792920173, 0.21235295762756146, 0.274677663246377, 0.2690360981316098, 0.2712918445413153, 0.3288522268443269, 0.3180111592313002, 0.2658181027733134, 0.2997658462704229, 0.26697992087122613, 0.22047419471558838, 0.1340306497887941, 0.1497448687708789, 0.15263919224800848, 0.11839139753136951, 0.14047342655630912, 0.1705622189479593, 0.13267628783501095, 0.13681213742936837, 0.16234452157725443, 0.16311846493272786, 0.19225849107612025, 0.18613588466729536, 0.1699658434398854, 0.16735239376598599, 0.13948820364369185, 0.15189046332248868, 0.1445286631912206, 0.14484203114002525, 9.999999999998899e-05, 0.016321489752517127, 0.005587326540790527, 0.03302887701638446, 9.999999999998899e-05, 9.999999999998899e-05, 0.017388436273835906, 9.999999999998899e-05, 9.999999999998899e-05, 0.05474020092125398, 0.053891174800889674, 0.09149601999763379, 0.05227869496140081, 0.040853268263801645, 0.04120260830943645, 0.10060472532849929, 0.04949453563223849, 0.09086565287450443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11971065160582917, 0.0879882013239156, 0.10049033301744803, 0.08743924724464702, 0.09860440432895778, 0.08327357510552102, 0.07724571685343307, 0.09809391166009396, 0.09711126581098828, 0.39640957209092853, 0.3755319746219251, 0.3929183909897489, 0.41647366489707516, 0.39663600101084073, 0.3665846458804316, 0.3914881518237163, 0.40026566408433395, 0.38607044283248937, 0.09770693220910831, 0.10099449437094499, 0.11002641169095917, 0.1424491289664771, 0.11982972063896269, 0.09341706864091082, 0.11874452783329525, 0.10729330706849127, 0.1300827160535586, 0.21243848238888619, 0.1614685200436914, 0.19861660966080108, 0.22395743336338125, 0.18595538848167248, 0.22244826226163483, 0.20522123027707517, 0.18747201712914086, 0.25227417293039067, 0.270880883546298, 0.23988368870011367, 0.2526088238499907, 0.26675930034557427, 0.2523315425693181, 0.243764159942241, 0.26698744382759587, 0.22527975674128176, 0.24157026708049256, 0.1875854516746348, 0.16963616052020303, 0.18698142656130912, 0.2121827739868135, 0.2134146177428794, 0.18495196521169788, 0.1898180777844639, 0.1756605749758, 0.1623180396265168, 0.18663973864616235, 0.19090068849069453, 0.22973533417770708, 0.18354852044463266, 0.19226737384596704, 0.1905163235230407, 0.19507949796539747, 0.18483455296330442, 0.196900071817264, 0.19318129016036645, 0.19976402400883064, 0.26885211877577486, 0.19554479717797757, 0.18607483026727922, 0.20283536798420243, 0.18408687235771248, 0.19219493434713508, 0.19037952114336698, 0.1484664791836351, 0.13566172094757933, 0.5395666360683864, 0.3099827206152417, 0.18174395002229926, 0.2130524255008307, 0.11204397568681579, 0.12551872462937375, 0.3023413189837607, 0.48690499214332517, 0.1127990336399245, 0.09372534350526052, 0.1688808255712354, 0.21286707661565518, 0.2108239948961509, 0.42555745194749484, 0.16772013806092367, 0.48308720836486774, 0.18378400378080761, 0.18455472241519966, 0.17001190653621634, 0.19261087041834812, 0.18425803880419978, 0.1747762561069106, 0.17618172604474824, 0.1756026805391222, 0.18509001444785622, 0.08386085062207238, 0.09105231548656378, 0.09825956976905503, 0.08038656483656359, 0.07677968848210914, 0.08409520086007582, 0.10100954676645801, 0.07792628733453444, 0.07642981615939315]}, "mutation_prompt": null}
{"id": "d76ca5a5-ae27-4e1c-be04-e19871db18b3", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimization", "description": "Implement a dynamic population size adjustment strategy to enhance diversity and convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {"aucs": [0.47464823922601773, 0.4960977226639838, 0.5140920657493255, 0.4709509815243135, 0.5108802733693141, 0.5124298340539506, 0.4400184211566567, 0.4948941561581932, 0.5175751262265329, 0.014311368185425777, 0.029645082810526358, 0.001728582535117984, 0.02822469494282487, 0.014523916986128094, 9.999999999998899e-05, 0.09498457916647352, 0.04480894895491783, 9.999999999998899e-05, 0.11502643410785018, 0.08736508074697702, 0.0859407964929817, 0.06172065295509399, 0.10631267471080641, 0.09863477783921626, 0.08971656315986987, 0.12131190177317874, 0.10174138230828134, 0.07190956772781887, 0.10448746135324327, 0.07922395102595492, 0.0506268662323891, 0.09772868155424641, 0.10890559038461434, 0.09946172637899231, 0.11991548448845224, 0.09011369339214947, 0.9693911454624419, 0.9718857400461399, 0.9299569096429126, 0.920316503719304, 0.9519306469018087, 0.9379536346456472, 0.9546467168166919, 0.957468468320245, 0.9681722132685019, 0.3732561801132005, 0.359096635073639, 0.3393838847147549, 0.3386337294099664, 0.36845936290453996, 0.3485539396933869, 0.34091814791200004, 0.3464888491775898, 0.31005765319099177, 0.6403401361812735, 0.16463447616760774, 0.22364969391886125, 0.28005413047132577, 0.7243489676121303, 0.26942132740668645, 0.3417214112756978, 0.3621070212099027, 0.34270547418864006, 0.189012889482303, 0.2062572375485282, 0.1954348626537502, 0.14541752309360856, 0.21592699847203467, 0.21295171195925544, 0.2331552859820175, 0.1817150189687643, 0.19711833191800954, 0.16071116186542944, 0.2132612242660733, 0.1993650364563695, 0.1802516568741348, 0.17756071821823372, 0.17372911069010044, 0.2249983422339059, 0.19247093651321734, 0.17275020439280964, 0.02797328554428824, 0.11944810614467971, 0.031637333333603745, 0.030324273836209836, 0.027274883313309184, 0.026214997864223766, 9.999999999998899e-05, 0.008165934734150837, 9.999999999998899e-05, 0.04578574857127338, 0.21448384225338502, 0.09165634225623542, 0.05684563263719833, 0.061629206751193655, 0.03402438297379817, 0.08461886159575593, 0.0699506776421236, 0.03749075357298537, 0.03429465557871714, 0.01255153159332989, 9.999999999998899e-05, 0.014690833086259736, 0.018979423691891872, 0.028255400296974598, 0.03198870006471477, 0.02072020327540447, 0.030950636433505485, 0.1354924558667563, 0.12783908383670073, 0.12086944261658594, 0.16594125397325765, 0.13847283037238634, 0.14161022615372754, 0.1182298323117209, 0.14162766706630936, 0.13545101264675852, 0.42463423296332403, 0.410595004060501, 0.4246094821269587, 0.4281195773732338, 0.4444970578190267, 0.4504812016061689, 0.4322037897596789, 0.4444343005259377, 0.4227908993648821, 0.15556904376888359, 0.10892015050972625, 0.10180682556407739, 0.09631199354471898, 0.11068877858633097, 0.07960432694634478, 0.12788060359500575, 0.12551192298603486, 0.16386055328434412, 0.22665755038115276, 0.27437362150486655, 0.17199194785345695, 0.2516359477862363, 0.2902468030390809, 0.28190060539833617, 0.2938235035618231, 0.2712619260137611, 0.29465793632067816, 0.28872303568100366, 0.3046332984238401, 0.15730132958873255, 0.2799749371690494, 0.26059611854080245, 0.15286372125515535, 0.21692444395386978, 0.22835981865149935, 0.11070282285223387, 0.2575165150382527, 0.12238324741236462, 0.09465790681320796, 0.24474087952454016, 0.22252870741262032, 0.12504087055115776, 0.23087290507703728, 0.23438386203356243, 0.1847769040392312, 0.18262318457316684, 0.2074998854159089, 0.19425568780903923, 0.21326601439018544, 0.19413510248726285, 0.2061044875084117, 0.19599428523737483, 0.20538168791043876, 0.19350526147997238, 0.19110499562525396, 0.1964075763221086, 0.18104752230383214, 0.22048513594867836, 0.27142937312985316, 0.19949733467749686, 0.18775157959115352, 0.19418887004626673, 0.19572466915987874, 0.12320522179850346, 0.13726430453255611, 0.7449554183322589, 0.1734481453373906, 0.11245654127418325, 0.061978862094536624, 0.10871308155723636, 0.11527970203776294, 0.16916399136435245, 0.6642418501852683, 0.11310478223235843, 0.08311858692222829, 0.1689354456214387, 0.21260648818375616, 0.2126807425167817, 0.6753728343185039, 0.16888051904337753, 0.6410967292964964, 0.19261465792173593, 0.19449845668892207, 0.18544409964488184, 0.1948356689986085, 0.20352947088228412, 0.20709255486139977, 0.20971834462984773, 0.188301512036127, 0.19622964165385381, 0.09626169689870712, 0.09106155228905188, 0.05998059055124927, 0.06883053155468277, 0.08380330322335316, 0.09724897107497876, 0.0954478426727926, 0.07954298933458026, 0.08332800085459802]}, "mutation_prompt": null}
{"id": "a8f1475f-da7f-40bd-a503-783105812ff3", "solution": "class EnhancedDynamicPopulationSizeHybridFireAntCuckooOptimization(DynamicPopulationSizeHybridFireAntCuckooOptimization):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99 + 0.01 * (best_fitness - func(best_solution - 0.1 * np.random.uniform(-1, 1, self.dim)))\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98 + 0.02 * (best_fitness - func(best_solution - 0.1 * np.random.uniform(-1, 1, self.dim)))\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "EnhancedDynamicPopulationSizeHybridFireAntCuckooOptimization", "description": "Implement a dynamic step size adaptation based on the individual fitness improvement rate to enhance the optimization speed.", "configspace": "", "generation": 63, "fitness": 0.16370436025027305, "feedback": "The algorithm EnhancedDynamicPopulationSizeHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {"aucs": [0.4909755931962563, 0.4770681214137983, 0.46996266385572394, 0.49322442980771386, 0.5149577897125425, 0.4911033189354316, 0.47895609520004634, 0.5241541905304465, 0.5059118249560034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06587055842653788, 0.029073404452177765, 0.017714473902128325, 0.039763079465067186, 0.02563326844243352, 0.012010274908720198, 0.037689946875361424, 0.019759870117762368, 0.09743481533614284, 0.08300598097694767, 9.999999999998899e-05, 9.999999999998899e-05, 0.03451386367936593, 0.00553959472529264, 0.014479314015426237, 0.05901656962142243, 0.00970323813885865, 0.05744931540797771, 0.9724543471690219, 0.8971017274589347, 0.23973559191725602, 0.8973117990832689, 0.15317727789273738, 0.844994737615448, 0.8870585803816359, 0.9243381203146714, 0.958761453353178, 0.24922684547176888, 0.1321434881967134, 0.2042630793730036, 0.039391220455664566, 0.3267713132856178, 0.1016410640641141, 0.01821229595683871, 0.041903386171557755, 0.02012168097019873, 0.21986057238704615, 0.13666980731889855, 0.10370087746225676, 0.28392730422314383, 9.999999999998899e-05, 0.10999756670496352, 0.23942521486812418, 0.3373025544389461, 0.31332609420113045, 0.15888580359178173, 0.1128903001911663, 0.11224582068480216, 0.08097155010630563, 0.0057663650074597506, 0.15406474711392348, 0.11843419530375154, 0.060240866931597026, 0.15448993967106328, 0.21307503317782361, 9.999999999998899e-05, 0.08658166670303524, 0.16181855690691738, 0.004346517598623145, 0.138740494846311, 0.1664391455408606, 9.999999999998899e-05, 0.12471363533359525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010927209302715735, 0.003665360870054424, 0.016852819593150326, 0.023237179798087926, 0.018700315836020165, 0.10647520981114356, 0.019062959910515764, 0.0032069342264674505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07701819319694914, 0.11776585166405207, 0.09975009078395691, 0.07880682548138251, 0.11863924976207363, 0.104767365435248, 0.1011268683651142, 0.09848382811258904, 0.09458804656621667, 0.44493473207837275, 0.45755686813027674, 0.43665421087253076, 0.4331168014550041, 0.4281948793563727, 0.42827742438096117, 0.42211164321990413, 0.44252568797104963, 0.4196987228373741, 0.038843777949200575, 9.999999999998899e-05, 0.059804855525172895, 0.032726888911235985, 0.08882321435249219, 0.04500214437556427, 0.09165641922472201, 0.08392835662053344, 0.07591358631541456, 0.16491374051749952, 0.1482736965144772, 0.22385186441421612, 0.26309810039617887, 0.20299656318968318, 0.16134354788226268, 0.15907950192548392, 0.16873093714446896, 0.16066527469916558, 0.2877649210275527, 0.12583165973329635, 0.12647836701511206, 0.3015383346904008, 0.21247411783282388, 0.14568534107555875, 0.24075160848773125, 0.0942349569589862, 0.09549681759682094, 0.10140087495405115, 0.045393979111401306, 0.041414330808939304, 0.25268246999786437, 0.024002837232862895, 0.0876934354377158, 0.21134256682739683, 0.03362879498036997, 0.05682975581734395, 0.21016220728513557, 0.18324355912213508, 0.23024884217474428, 0.13940010073781528, 0.15561773714941207, 0.1805287694797626, 0.1841725250553582, 0.20828702530095256, 0.1989809617528987, 0.17917181863755083, 0.14716840050688695, 0.15111208318051517, 0.18542185690400825, 0.17080534549568616, 0.14463922269791363, 0.17866577553612784, 0.13438619592664458, 0.13071415126082864, 0.12339287230623341, 0.13736044335079056, 0.8028827863618636, 0.17353719908546683, 0.11259112979567965, 0.06201503040963163, 0.10880449863221953, 0.1152561848972522, 0.16938192775626326, 0.0945394987802396, 0.11337833536050057, 0.08312094559604011, 0.16983046541821478, 0.21329469943890145, 0.2124418131772804, 0.7085637089480725, 0.168926424590773, 0.4131339348476767, 0.16608622980107335, 0.1752766736560687, 0.2105975415747131, 0.17589891544490455, 0.23508846365469094, 0.25691394774217213, 0.1793222270206707, 0.17631392188865724, 0.18858037816008977, 0.06082095904983886, 0.020701932610644125, 0.03814594390090209, 0.03877342324507427, 0.001669347377326491, 0.025734400609133234, 0.04430711667114662, 0.01172023207656836, 0.0435090168839426]}, "mutation_prompt": null}
{"id": "7c1e9a06-d14f-4c4b-8609-fea32110aeec", "solution": "import multiprocessing\n\nclass DynamicPopulationSizeHybridFireAntCuckooOptimizationParallel(DynamicPopulationSizeHybridFireAntCuckooOptimization):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        def evaluate_solution(sol):\n            return func(sol)\n        \n        with multiprocessing.Pool(processes=multiprocessing.cpu_count()) as pool:\n            for _ in range(self.budget):\n                if np.random.rand() < mutation_prob:  \n                    best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                    best_fitness = func(best_solution)\n                    mutation_prob *= 0.99  \n                    self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                    \n                steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n                new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n                new_fitnesses = np.array(pool.map(evaluate_solution, new_solutions))\n                \n                min_idx = np.argmin(new_fitnesses)\n                if new_fitnesses[min_idx] < best_fitness:\n                    best_solution = new_solutions[min_idx]\n                    best_fitness = new_fitnesses[min_idx]\n                    self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                    \n                cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                cuckoo_fitness = func(cuckoo_solution)\n                if cuckoo_fitness < best_fitness:\n                    best_solution = cuckoo_solution\n                    best_fitness = cuckoo_fitness\n                \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationParallel", "description": "Implement a parallel evaluation strategy using multiprocessing to speed up the optimization process.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"Can't pickle local object 'DynamicPopulationSizeHybridFireAntCuckooOptimizationParallel.__call__.<locals>.evaluate_solution'\").", "error": "AttributeError(\"Can't pickle local object 'DynamicPopulationSizeHybridFireAntCuckooOptimizationParallel.__call__.<locals>.evaluate_solution'\")", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {}, "mutation_prompt": null}
{"id": "e1ac37e6-fdef-45a6-ac10-bea56fac19b8", "solution": "class ImprovedDynamicPopulationSizeHybridFireAntCuckooOptimization(DynamicPopulationSizeHybridFireAntCuckooOptimization):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            # Enhanced mutation mechanism\n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim)) + 0.1 * np.random.uniform(-1, 1, (1, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "ImprovedDynamicPopulationSizeHybridFireAntCuckooOptimization", "description": "Implement a variation of the fire ant optimization mutation mechanism to explore new solutions more aggressively, thus potentially enhancing convergence speed.", "configspace": "", "generation": 65, "fitness": 0.2146731580759514, "feedback": "The algorithm ImprovedDynamicPopulationSizeHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {"aucs": [0.449570012729656, 0.4447930777033271, 0.4510291709008831, 0.4392302022966983, 0.464860223977545, 0.4559338201358937, 0.5023966576072003, 0.4495555836052556, 0.4447090053747689, 0.058139019614145915, 0.07571039342061359, 9.999999999998899e-05, 0.033317871673413046, 0.010341966955737969, 9.999999999998899e-05, 9.999999999998899e-05, 0.001798431037662529, 9.999999999998899e-05, 0.13013469166718838, 0.09992751414969048, 0.09385803711704288, 0.10344005286118751, 0.07311686488833635, 0.062374443248921274, 0.12614277341863145, 0.1419685539117057, 0.10785728937045047, 0.08853069778073408, 0.08343122020454685, 0.08496628499107228, 0.09907676290023215, 0.07603738414697125, 0.09093341304169156, 0.10351808720290279, 0.09493019105335809, 0.11119188813285052, 0.9579824305611816, 0.9413927290009745, 0.9356037903221561, 0.9511307089672159, 0.9213443438639642, 0.9095927189178363, 0.8837440665605677, 0.9696548945061342, 0.9689916036815308, 0.30675501204306366, 0.3196753421641674, 0.3193715731375132, 0.30346007220787297, 0.3295892217945994, 0.35161114536239546, 0.3002610477981452, 0.3172658702016633, 0.3191967564838194, 0.3692542022737014, 0.34577523754016615, 0.194236891507386, 0.2785138126302197, 0.21131943704941858, 0.21886337109724086, 0.34080702988258293, 0.3059727288642108, 0.6880153820468957, 0.17700710770479655, 0.17876116282718502, 0.19028632225060338, 0.18118649364663875, 0.19325966744529866, 0.2252114879200271, 0.17462223659719345, 0.17903918589384615, 0.19910578689959513, 0.17897729553867026, 0.16906439550934427, 0.09918836629438299, 0.18896244531922712, 0.23502752033371754, 0.2194155989771176, 0.18224280720991537, 0.22231051950484704, 0.169630918819884, 0.058421838396146786, 0.04466605804808188, 0.06677704427419939, 0.051348477465068765, 0.029291325077755004, 0.05539984334666026, 9.999999999998899e-05, 0.029291070996500967, 9.999999999998899e-05, 0.06290674857289291, 0.059766573598212025, 0.13277620917366095, 0.09098058288846766, 0.004593006271768951, 0.02475750558296097, 0.12943536615548124, 0.029700979081707324, 0.044943839744166714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01859516678212514, 9.999999999998899e-05, 0.10097898704368635, 0.11556997678924841, 0.11275546904596634, 0.11531170633189047, 0.1264562685865689, 0.12313645225154524, 0.11024788278053765, 0.1277289443484284, 0.11987539741617348, 0.42477903036599574, 0.4200877350031337, 0.42067580935060167, 0.42374274725242433, 0.4346604427416524, 0.41698933176801634, 0.42094797613497326, 0.40801822569113455, 0.40367812770313016, 0.10398179940960639, 0.11327464982665425, 0.11447980325245266, 0.08690484070006699, 0.11905136620449752, 0.1403019933903068, 0.08062817986222814, 0.12634891665576065, 0.10232711381122139, 0.24269459252212455, 0.23670011359222576, 0.24484556744514052, 0.2862462582016825, 0.2520931957417438, 0.2744914096707981, 0.2543147601393745, 0.2813922370170552, 0.2195319612323653, 0.317992137791297, 0.24028364956235804, 0.16435727352075447, 0.2951583335331981, 0.28501690477596875, 0.17636513919040975, 0.2166676597812528, 0.23536974230305974, 0.11150099499031874, 0.22255183381249555, 0.1601502738409485, 0.16223038797321276, 0.19768599093590677, 0.2016528460523931, 0.12196098851379633, 0.1851177742666511, 0.23683508536912157, 0.04101527337492694, 0.1532157243356529, 0.21852164478773173, 0.21636492697046994, 0.21920076765330077, 0.22746047974427697, 0.2276351506306411, 0.18463848257789672, 0.16267379263078852, 0.1992401795078116, 0.23364755206455567, 0.23644850721638844, 0.1857538964754505, 0.22975644423489316, 0.21390967434104535, 0.18359731365308252, 0.21812828080402002, 0.20134213319450223, 0.18648900892685882, 0.12337948424879219, 0.1367237746082406, 0.7025737708942957, 0.17347014385378556, 0.11277489117426698, 0.061979737077629715, 0.10882774056748135, 0.12687495990506048, 0.16898716044440187, 0.09428329001961577, 0.11320748579740936, 0.08311208202095655, 0.16991938901048287, 0.2133067203128407, 0.21228932575250814, 0.606958746803931, 0.16817012696078415, 0.597742431380133, 0.17838724046824173, 0.18148317270537306, 0.1865470307376378, 0.18582258880515068, 0.19243783344053578, 0.18537348620599747, 0.171954757625711, 0.18079592249027499, 0.17639366472663787, 0.10608490776048474, 0.09720408374209144, 0.07846921589708267, 0.06724125193848973, 0.06776932258679114, 0.10722096970422712, 0.07991294223495793, 0.07942811971459451, 0.08655489243566516]}, "mutation_prompt": null}
{"id": "46161ba7-3506-4663-bc48-3c317153dbe4", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimization", "description": "Implement a dynamic population size adjustment strategy to enhance diversity and convergence speed.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {"aucs": [0.47464823922601773, 0.4960977226639838, 0.5140920657493255, 0.4709509815243135, 0.5108802733693141, 0.5124298340539506, 0.4400184211566567, 0.4948941561581932, 0.5175751262265329, 0.014311368185425777, 0.029645082810526358, 0.001728582535117984, 0.02822469494282487, 0.014523916986128094, 9.999999999998899e-05, 0.09498457916647352, 0.04480894895491783, 9.999999999998899e-05, 0.11502643410785018, 0.08736508074697702, 0.0859407964929817, 0.06172065295509399, 0.10631267471080641, 0.09863477783921626, 0.08971656315986987, 0.12131190177317874, 0.10174138230828134, 0.07190956772781887, 0.10448746135324327, 0.07922395102595492, 0.0506268662323891, 0.09772868155424641, 0.10890559038461434, 0.09946172637899231, 0.11991548448845224, 0.09011369339214947, 0.9693911454624419, 0.9718857400461399, 0.9299569096429126, 0.920316503719304, 0.9519306469018087, 0.9379536346456472, 0.9546467168166919, 0.957468468320245, 0.9681722132685019, 0.3732561801132005, 0.359096635073639, 0.3393838847147549, 0.3386337294099664, 0.36845936290453996, 0.3485539396933869, 0.34091814791200004, 0.3464888491775898, 0.31005765319099177, 0.6403401361812735, 0.16463447616760774, 0.22364969391886125, 0.28005413047132577, 0.7243489676121303, 0.26942132740668645, 0.3417214112756978, 0.3621070212099027, 0.34270547418864006, 0.189012889482303, 0.2062572375485282, 0.1954348626537502, 0.14541752309360856, 0.21592699847203467, 0.21295171195925544, 0.2331552859820175, 0.1817150189687643, 0.19711833191800954, 0.16071116186542944, 0.2132612242660733, 0.1993650364563695, 0.1802516568741348, 0.17756071821823372, 0.17372911069010044, 0.2249983422339059, 0.19247093651321734, 0.17275020439280964, 0.02797328554428824, 0.11944810614467971, 0.031637333333603745, 0.030324273836209836, 0.027274883313309184, 0.026214997864223766, 9.999999999998899e-05, 0.008165934734150837, 9.999999999998899e-05, 0.04578574857127338, 0.21448384225338502, 0.09165634225623542, 0.05684563263719833, 0.061629206751193655, 0.03402438297379817, 0.08461886159575593, 0.0699506776421236, 0.03749075357298537, 0.03429465557871714, 0.01255153159332989, 9.999999999998899e-05, 0.014690833086259736, 0.018979423691891872, 0.028255400296974598, 0.03198870006471477, 0.02072020327540447, 0.030950636433505485, 0.1354924558667563, 0.12783908383670073, 0.12086944261658594, 0.16594125397325765, 0.13847283037238634, 0.14161022615372754, 0.1182298323117209, 0.14162766706630936, 0.13545101264675852, 0.42463423296332403, 0.410595004060501, 0.4246094821269587, 0.4281195773732338, 0.4444970578190267, 0.4504812016061689, 0.4322037897596789, 0.4444343005259377, 0.4227908993648821, 0.15556904376888359, 0.10892015050972625, 0.10180682556407739, 0.09631199354471898, 0.11068877858633097, 0.07960432694634478, 0.12788060359500575, 0.12551192298603486, 0.16386055328434412, 0.22665755038115276, 0.27437362150486655, 0.17199194785345695, 0.2516359477862363, 0.2902468030390809, 0.28190060539833617, 0.2938235035618231, 0.2712619260137611, 0.29465793632067816, 0.28872303568100366, 0.3046332984238401, 0.15730132958873255, 0.2799749371690494, 0.26059611854080245, 0.15286372125515535, 0.21692444395386978, 0.22835981865149935, 0.11070282285223387, 0.2575165150382527, 0.12238324741236462, 0.09465790681320796, 0.24474087952454016, 0.22252870741262032, 0.12504087055115776, 0.23087290507703728, 0.23438386203356243, 0.1847769040392312, 0.18262318457316684, 0.2074998854159089, 0.19425568780903923, 0.21326601439018544, 0.19413510248726285, 0.2061044875084117, 0.19599428523737483, 0.20538168791043876, 0.19350526147997238, 0.19110499562525396, 0.1964075763221086, 0.18104752230383214, 0.22048513594867836, 0.27142937312985316, 0.19949733467749686, 0.18775157959115352, 0.19418887004626673, 0.19572466915987874, 0.12320522179850346, 0.13726430453255611, 0.7449554183322589, 0.1734481453373906, 0.11245654127418325, 0.061978862094536624, 0.10871308155723636, 0.11527970203776294, 0.16916399136435245, 0.6642418501852683, 0.11310478223235843, 0.08311858692222829, 0.1689354456214387, 0.21260648818375616, 0.2126807425167817, 0.6753728343185039, 0.16888051904337753, 0.6410967292964964, 0.19261465792173593, 0.19449845668892207, 0.18544409964488184, 0.1948356689986085, 0.20352947088228412, 0.20709255486139977, 0.20971834462984773, 0.188301512036127, 0.19622964165385381, 0.09626169689870712, 0.09106155228905188, 0.05998059055124927, 0.06883053155468277, 0.08380330322335316, 0.09724897107497876, 0.0954478426727926, 0.07954298933458026, 0.08332800085459802]}, "mutation_prompt": null}
{"id": "da698a83-7821-4487-8ab6-7058a0a18851", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            cuckoo_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimization", "description": "Accelerate convergence speed by introducing a different mutation strategy to explore the search space more efficiently while maintaining diversity.", "configspace": "", "generation": 67, "fitness": 0.22570076253538382, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {"aucs": [0.5077899813658973, 0.5070971134855295, 0.5095989483634557, 0.5558793696837823, 0.5403718164050512, 0.5178058347065071, 0.5114049697577436, 0.540085726382896, 0.5309220493115442, 0.0280626292818994, 0.01599937753576175, 9.999999999998899e-05, 0.046143875259795686, 9.999999999998899e-05, 9.999999999998899e-05, 0.05226824391873519, 0.04476237667918592, 9.999999999998899e-05, 0.07280922259323674, 0.10238875920359136, 0.05405332643383676, 0.10701833074402223, 0.12158477582278315, 0.09829129517987145, 0.10816837609744723, 0.11108122712897006, 0.07775364198877799, 0.10555680307185555, 0.05965157492091511, 0.06787602873294651, 0.08028290686635697, 0.14195038589009035, 0.12561658766879968, 0.12259001453251894, 0.0704847963461459, 0.08110109085282713, 0.9619269991286852, 0.9282167276469002, 0.8972877469049161, 0.9388245179575372, 0.9221797847484811, 0.9279926112970112, 0.912160058426154, 0.9451936378070549, 0.977845756056131, 0.345228167513156, 0.36079136422393054, 0.33600092427018236, 0.36154246323783124, 0.3485170735892268, 0.34067266185018175, 0.3308645644951258, 0.3645535815145181, 0.32220844822091754, 0.22921695962852318, 0.18856364479660193, 0.2164147097892325, 0.7141547181044086, 0.28687165821041116, 0.26907860053421595, 0.34590653794937976, 0.36990052098855186, 0.23186919036529663, 0.19381461330092253, 0.23546137870544304, 0.20433867231966885, 0.21938005239321556, 0.29470091367415296, 0.28205063591934465, 0.18932123550200997, 0.18026670634340114, 0.2390369647113626, 0.2336262748635488, 0.19301217985180608, 0.12812837961895895, 0.1738119270513867, 0.18692577964466228, 0.20050410707923538, 0.1905047994044491, 0.18525887345436742, 0.17711576895389247, 0.01197475312041385, 9.999999999998899e-05, 9.999999999998899e-05, 0.03137119012403233, 0.05427118906833672, 0.07332367938946283, 0.009809118560986319, 0.019109404810891517, 9.999999999998899e-05, 0.07585445929408707, 0.09550832864178027, 0.14632522985057472, 0.13455689715785957, 0.04281395261363519, 0.038449701332335495, 0.09521823483304648, 0.03351748899512064, 0.03914191918992915, 0.023010636480772173, 0.03255107681012048, 0.05944151871373082, 0.043902352925630606, 0.021456269938202377, 0.04943986770341924, 0.02299114755870746, 0.04324705258069339, 0.031698350307171164, 0.08414261665778433, 0.12501557158773335, 0.13168906459576069, 0.12759009944757216, 0.13915661534806656, 0.16409661721454571, 0.12057805482967665, 0.14456844292635707, 0.13492421237787167, 0.4478026342301029, 0.42900907974254254, 0.42724541138531413, 0.4218680449491051, 0.42289618063369394, 0.44591325954141814, 0.42817077388866487, 0.4518505348201852, 0.4450555734200289, 0.10711027501457915, 0.11040120331660142, 0.11016628332737455, 0.13652696732030856, 0.10245446754952281, 0.116011743926135, 0.08687198189296308, 0.0848733945074609, 0.13225768256851955, 0.2708583459740128, 0.3215964304321678, 0.25021234990523467, 0.2712150498592829, 0.2862082921716319, 0.17582940296751348, 0.25521004549701287, 0.2328345937228934, 0.26320864158989665, 0.3065857029444933, 0.29920405151011764, 0.204860373472328, 0.2950846303592142, 0.29835907568816555, 0.2812443167094747, 0.21558731982874935, 0.20343511442991113, 0.109188653366879, 0.2185618892028226, 0.21657855542680804, 0.07064552488704268, 0.25349052489962154, 0.26512308294363285, 0.24046097774013242, 0.19564088442278094, 0.15495538467508774, 0.139175900357548, 0.18533064678481825, 0.20408872705302505, 0.22428031407958837, 0.18517973057863546, 0.24700470418546894, 0.21016533722442077, 0.21540065339667092, 0.1790686828005138, 0.1982330669644331, 0.1867869062916656, 0.19393174047228257, 0.20701097276199154, 0.18504566244300347, 0.19564745717740128, 0.19570669854166467, 0.18451408098055666, 0.22035506058367804, 0.2207839041474533, 0.12325678449396071, 0.13760356845506116, 0.09938386816376188, 0.17337821240525497, 0.11281874461992625, 0.06199559882903627, 0.1087282000577563, 0.11527238752458457, 0.16807387234150195, 0.7405134025608648, 0.11344778446159198, 0.08315408287885206, 0.1700280533357703, 0.21252338084229694, 0.21275968371753018, 0.7672754919200577, 0.16842538865936474, 0.6880683895741134, 0.1875159524489306, 0.18935883598324998, 0.1930531059986611, 0.18609865661584313, 0.195264097160041, 0.19589084764690734, 0.19206805682894978, 0.19721782226851414, 0.19683866086515567, 0.08812717808379733, 0.10584046305735828, 0.0837214221429482, 0.0629979388650046, 0.07884532429271107, 0.11515750333071406, 0.1224805559084563, 0.08464979684717377, 0.08001717772548289]}, "mutation_prompt": null}
{"id": "aea5dd0f-c760-40c8-939b-0cf6e1dec4be", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.95  # Enhanced step size adjustment based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimization", "description": "Modify the step size update mechanism based on fitness improvement rate to enhance convergence speed.", "configspace": "", "generation": 68, "fitness": 0.21762383877923913, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {"aucs": [0.5802278911411293, 0.5700344258172105, 0.5261389573563371, 0.6148161999847391, 0.46873768147091555, 0.4940450413591627, 0.5929128211409938, 0.5045606748755099, 0.46704901175191216, 0.106731322375343, 9.999999999998899e-05, 9.999999999998899e-05, 0.011335120769241036, 0.02144096799406381, 9.999999999998899e-05, 0.06994294408013979, 0.02448008428770776, 9.999999999998899e-05, 0.08946828907462367, 0.07028008724118939, 0.07986001614666893, 0.06992284920051484, 0.09085950310077429, 0.08316176269553799, 0.09701608997271705, 0.13549571005865013, 0.08906034377123306, 0.07874490868452155, 0.139168130979753, 0.07032403332992931, 0.08797017392360573, 0.10061272481863415, 0.06817601584347, 0.05741471794940756, 0.06950231464516432, 0.07321160650208824, 0.9606504908772788, 0.9485140958750218, 0.3033069436628769, 0.8884150333288161, 0.9457266915628191, 0.8822555224386961, 0.9484562337512156, 0.9552720576706994, 0.9666257485241956, 0.37669662484419364, 0.33707074647623836, 0.3356611482305897, 0.36676893389334053, 0.33938638433960944, 0.32936974902247707, 0.44221265431616885, 0.3721222347805776, 0.36340788773349797, 0.2288713279388085, 0.1681814495883175, 0.3584905780683293, 0.27822443221911075, 0.2728862060684103, 0.15494006547332795, 0.2339277475888093, 0.3499721148438051, 0.17892518792319168, 0.26803304932235894, 0.13252189460925767, 0.14422532303469127, 0.18967806446870006, 0.18107245265788618, 0.15651663054945553, 0.19817090797790105, 0.16942596957154765, 0.16428182218200948, 0.22118249379802424, 0.22079427955596276, 0.29167590055112247, 0.18806674739684204, 0.22518719606023807, 0.15830317429007568, 0.19809228861916806, 0.13680106385915247, 0.1616026991606997, 0.018396572383469145, 9.999999999998899e-05, 0.0016881754769408897, 0.0644548025527274, 0.010604667495579312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030667510067807435, 0.078495878543417, 0.0916269719639462, 0.08680656207557769, 0.08739185583983489, 0.022996549717035797, 0.024528056733097436, 0.14692883384572542, 0.029135795293654287, 0.04646695246438137, 0.059680906692946345, 0.02835089291210935, 0.021886828100068256, 0.05788341573708344, 9.999999999998899e-05, 0.027500427227712287, 0.0722265682961597, 0.09354878792077181, 0.01605801552861652, 0.17047562506372393, 0.13099282493065312, 0.12976209311676468, 0.10418478575934864, 0.16672699439868066, 0.13245119714274967, 0.1365353042772125, 0.14563944203868617, 0.13960155872166924, 0.44929292765130235, 0.4691340290941144, 0.43711941292246703, 0.4434130542779765, 0.44988850407632663, 0.4151026360947532, 0.45663904713616343, 0.4586251620176912, 0.4496294203905823, 0.09671543749177125, 0.10549042557880617, 0.09944698811253694, 0.09497465243535663, 0.08990421538479654, 0.066751603888343, 0.11852189326169538, 0.12942005651738653, 0.08871139728021449, 0.3137142299335631, 0.15854112938042075, 0.18435722334188287, 0.23212471674170587, 0.24933958896814923, 0.254315503063675, 0.25657284830013205, 0.26986374796458545, 0.24002952620438, 0.3088274844984651, 0.3048846940894179, 0.106735907908735, 0.309744592238245, 0.15329144203447065, 0.29225123181680945, 0.23939627471131875, 0.17851553418374533, 0.10348337318407053, 0.2335160424795628, 0.14776840688379456, 0.1071501311554437, 0.23617296916261077, 0.2267108624818276, 0.11386279751708861, 0.16950431507642139, 0.2051950002123928, 0.04072246612182606, 0.2303209422065151, 0.18394217949652703, 0.2064768391275118, 0.21750635182603206, 0.1810996072124441, 0.19008269089489738, 0.18534040724267486, 0.23669380626186043, 0.19259974092341003, 0.22481470630159472, 0.19470990628286722, 0.17539522517435102, 0.1919886611210262, 0.2239467651948085, 0.19229595722194737, 0.2030495895937956, 0.20598140773877438, 0.1885726013120932, 0.12351569841230958, 0.13666466709148684, 0.8550224720419697, 0.17363200461694728, 0.11285697855220356, 0.062011333568565696, 0.10880454367403058, 0.11534163792946461, 0.16918846246363317, 0.6474971595948612, 0.1133250572376715, 0.08312847759354758, 0.16890630146435393, 0.2129581878894734, 0.21303696400375194, 0.7739072973628517, 0.1692014530953222, 0.45606222575786526, 0.18748648345122776, 0.1859649883108504, 0.1802271635132986, 0.2059171494943952, 0.1798784604764474, 0.19919905320458253, 0.22314886594000116, 0.2145453137329233, 0.19958965151372154, 0.09920517732103284, 0.09963202470499455, 0.07631407483947428, 0.06869141697350656, 0.0549686579202151, 0.0869040286638103, 0.07512133635059692, 0.06098089023541631, 0.06445570555213676]}, "mutation_prompt": null}
{"id": "e47d9bf1-5784-41c8-bb68-3cbf98436ac5", "solution": "class AdaptivePopulationSizeHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            # Adaptive population sizing\n            if best_fitness < 0.5:\n                population_size = min(20, int(population_size * 1.1))\n            else:\n                population_size = max(5, int(population_size * 0.9))\n                \n            cuckoo_solution = np.clip(best_solution + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            cuckoo_fitness = func(cuckoo_solution)\n            if cuckoo_fitness < best_fitness:\n                best_solution = cuckoo_solution\n                best_fitness = cuckoo_fitness\n        \n        return best_solution", "name": "AdaptivePopulationSizeHybridFireAntCuckooOptimization", "description": "Implement an adaptive population sizing strategy to dynamically adjust the number of solutions based on convergence progress.", "configspace": "", "generation": 69, "fitness": 0.22013381047781874, "feedback": "The algorithm AdaptivePopulationSizeHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {"aucs": [0.5298059267670725, 0.5140849333202235, 0.5218253580109669, 0.5157296001998144, 0.5171733987470002, 0.4973343829195763, 0.41899136992010366, 0.44020032504003537, 0.4851591689037972, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005632289926083001, 0.040379367061502136, 9.999999999998899e-05, 9.999999999998899e-05, 0.023050902642421156, 0.0005626447804898405, 9.999999999998899e-05, 0.12241554911441366, 0.09712512489690561, 0.06448348781721402, 0.08160297199716837, 0.1086830208760754, 0.12157230180866829, 0.11793817773713478, 0.12125958230602696, 0.11569990473304659, 0.12267814473570138, 0.07586579008287375, 0.09663243340659389, 0.1013577630126058, 0.0992024604876025, 0.11010657516425726, 0.09169858981318879, 0.09199312517409708, 0.10025869556575795, 0.9686855606977502, 0.9592420145637395, 0.9420495402253736, 0.8917396715492989, 0.9546259131442119, 0.9386369435814866, 0.9441414336048536, 0.9574387356179628, 0.9487564563155565, 0.41098778528184665, 0.37670832728345593, 0.38501875715721845, 0.3255297384123509, 0.3346870947432117, 0.37406811331545553, 0.4016620441426768, 0.340015217143517, 0.3650491063294006, 0.30176434487731063, 0.24025577522737218, 0.16487229483292154, 0.32547808723082694, 0.2673468031678643, 0.3576728462879659, 0.24518572316190623, 0.23561215022270887, 0.17912183376948432, 0.21732576470366716, 0.23277297715458423, 0.21438220421002796, 0.29012732047116585, 0.21995808328770616, 0.2375031190601249, 0.1688080342412055, 0.24730907255936707, 0.22105860321632276, 0.21299367920746526, 0.21908614172708296, 0.27124760682354543, 0.17450736449541293, 0.21753689755922612, 0.20463536977732533, 0.2037274669970096, 0.21612525572615737, 0.18328545069126467, 9.999999999998899e-05, 0.00807385043920017, 0.004711748599691257, 0.07837578956853541, 0.038149585456591195, 0.06242938099694462, 0.019010769286579632, 9.999999999998899e-05, 0.06312971682331592, 0.041247805946274085, 0.06534215282819511, 0.12563890609790684, 0.0768828251615622, 0.015721003427711544, 0.05725274341508979, 0.08871102436001876, 0.046939002578305744, 0.04010151087586855, 9.999999999998899e-05, 0.016594178895415812, 0.037363502446146946, 0.03353924686733223, 0.042289397917045446, 9.999999999998899e-05, 0.028318762880092052, 0.023052488074564503, 0.04627906593584352, 0.12427960807142568, 0.1513924603296367, 0.1264732217662562, 0.16137792775670567, 0.16275779001649915, 0.14887338816181672, 0.11928968981989618, 0.11168219196178542, 0.1344334543809531, 0.40410209857628254, 0.45752544923939664, 0.43288382440281026, 0.4040805703847562, 0.42282531323880923, 0.4781764363068727, 0.4416195764188152, 0.45401171173880384, 0.4398133457313115, 0.14104097821420214, 0.11620241596794079, 0.10110519875268076, 0.11210977172091185, 0.13627309760074202, 0.09202725046983873, 0.11590858105471247, 0.13985636459512096, 0.10895319297179618, 0.30121831704118107, 0.28494292666062193, 0.23103547419471082, 0.23242336495901805, 0.2550671330134271, 0.18239307223030132, 0.25953955961594155, 0.24731338162492267, 0.18996444699863257, 0.2861100985172138, 0.29838438160670766, 0.16958447469125293, 0.2872301324229597, 0.326036398323016, 0.1864606726707625, 0.20997696289068746, 0.1518317099831964, 0.25384236483139866, 0.19522558790520506, 0.2507064059386189, 0.23062767939690498, 0.25043081442202486, 0.2206966222226553, 0.22300658082700997, 0.25336583135646784, 0.18692570026248934, 0.055753164059616056, 0.19359539878904608, 0.19506181433045833, 0.204885747026748, 0.22330745584766332, 0.17750828635603066, 0.21504615075822553, 0.18389296290508406, 0.218118921098173, 0.18981608077928624, 0.21205280434623397, 0.22753352793918402, 0.20736828613270164, 0.2443739017139881, 0.20597911666779756, 0.19411999641369693, 0.21737459982241414, 0.2116792212297942, 0.19369524103762248, 0.1235400305123534, 0.13689091774676632, 0.0985067111810296, 0.17360445190970275, 0.1127607516869239, 0.06197594436486964, 0.10872642387830911, 0.11515952234287019, 0.1686105884093274, 0.0946009604707928, 0.11335716614716906, 0.08307623650907026, 0.17009779753961796, 0.21189379805077202, 0.2135878047800468, 0.6887056516805385, 0.16729943358824928, 0.5562572321837744, 0.1882941221194957, 0.1949219122876128, 0.18427972167130757, 0.19824770123613178, 0.2147964338957925, 0.2025375183622653, 0.17864285297898586, 0.1869895794621348, 0.17155449092714303, 0.060270038498991596, 0.1011763542027675, 0.08780976965284715, 0.09822679317322436, 0.06528728411683993, 0.12088692851588223, 0.07042406273355095, 0.09303954318707242, 0.0640573629831852]}, "mutation_prompt": null}
{"id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic step size adjustment strategy based on a combination of individual and global best solutions to enhance convergence speed.", "configspace": "", "generation": 70, "fitness": 0.23052779908253984, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "5edd111e-6364-4608-83a2-81aca7cffaf5", "metadata": {"aucs": [0.45739008444524676, 0.5138930607252268, 0.5029222375888969, 0.4900119886665809, 0.5117638765345158, 0.5181597211724165, 0.4905887582572753, 0.5248974462116154, 0.5060918042809228, 0.008647916376269826, 0.11602907603841706, 9.999999999998899e-05, 0.04948268612807183, 0.015613310859657226, 9.999999999998899e-05, 0.06080555139846999, 0.0324466620573276, 9.999999999998899e-05, 0.11165728079356918, 0.1131863198210149, 0.11464799654211433, 0.09480361498400558, 0.0948660730935893, 0.0737104755844602, 0.08063382154186471, 0.1077177100263681, 0.13220088289483323, 0.09306163630516262, 0.09103828614509135, 0.073250060466586, 0.09634312975219672, 0.085915105742983, 0.09711226219646274, 0.10265405623101909, 0.10344518263095293, 0.08579575067654388, 0.9594345647457962, 0.9648585852863407, 0.9255598125192915, 0.9200215710897316, 0.9516436076800208, 0.9252995765969191, 0.9511580822004331, 0.9618524376684104, 0.9677804281652652, 0.34828229572195835, 0.35660976658025456, 0.3374019450862453, 0.3333300205364581, 0.34487755465157954, 0.3376859875593986, 0.350665900084835, 0.3284876522009158, 0.3470077006461656, 0.6560634513283745, 0.22623836041602274, 0.22254963473583822, 0.3591922230821848, 0.408996040606993, 0.8552173048371612, 0.3679300983226008, 0.4101367345550866, 0.23137865355306253, 0.226631338487972, 0.20499583915481756, 0.24921187476443096, 0.1817897951582077, 0.18779156768131677, 0.20676382770705914, 0.19267339980928067, 0.21329334073237394, 0.20628423462769452, 0.18378929619768192, 0.2306386070640144, 0.18528803393093596, 0.1854235071043029, 0.19670718884945027, 0.16606492353438695, 0.1693841673954084, 0.21223235057304313, 0.18669610459312624, 0.05592610649949259, 0.010627224040500316, 0.04192215005622402, 0.0016657834700517515, 0.05436867998027595, 9.999999999998899e-05, 0.007625461435360914, 0.1016879082254365, 9.999999999998899e-05, 0.08415969223433983, 0.06558220776212043, 0.10455273725737113, 0.05649258085026154, 0.055310022205257714, 0.02745479487804603, 0.09110677488479779, 0.021850350663602303, 0.04557059994913992, 0.020107821248305457, 0.036521391341038933, 0.009492895308879978, 0.022838505557879807, 0.05439389910149417, 0.008990772185404783, 0.010417184089380305, 0.06538765335149799, 0.035375507885638036, 0.15698897123668887, 0.12543940065707648, 0.13438480492437377, 0.13596951895550935, 0.16758691304261153, 0.1521510221047616, 0.1379513934024511, 0.12713143025830376, 0.12630454995413565, 0.44088549646604724, 0.460181661225164, 0.42140665427017787, 0.44482651533271433, 0.46258942923363167, 0.41330295913122594, 0.4288920678847298, 0.4808246413999736, 0.43268181939817696, 0.11204990355726041, 0.08267081632932327, 0.10042837258130999, 0.12063974797037902, 0.12896976186366316, 0.07413804321006734, 0.0916800461331011, 0.11842503338851218, 0.14687052400826228, 0.26600134821314436, 0.24808129262487233, 0.17668460146901455, 0.22115076059057848, 0.2935075478740913, 0.2883766647414081, 0.29019196744118303, 0.21338912160986967, 0.2608970685153025, 0.30786153428499574, 0.2975890905083082, 0.1462148511009771, 0.3138285502597674, 0.30148468110013615, 0.1448108504276312, 0.30267552042918333, 0.21334618102923675, 0.10636721957629636, 0.2546597600201481, 0.20557553507190884, 0.20053809593105465, 0.25260568834129016, 0.23500598338489576, 0.12030583460548228, 0.19025805194507106, 0.16096412220398748, 0.08061844649063299, 0.20260179167516568, 0.22604564614727285, 0.21719381063238863, 0.19249418194959533, 0.21767929741437486, 0.1913255209520539, 0.21130091405874996, 0.2232102660215809, 0.17648137378823125, 0.3251515710914986, 0.21995470956422047, 0.1938006341923637, 0.200151469021845, 0.1840854011099493, 0.2002926681552618, 0.20259170503279544, 0.19298039274558165, 0.20119981210259885, 0.12325351094318737, 0.13709183828750116, 0.7833600739410311, 0.17322398414696505, 0.11293811585843128, 0.06197993321810169, 0.10882996612277673, 0.11521485717998026, 0.16922871720640975, 0.7319992843804018, 0.11354873951331412, 0.083068607139692, 0.06540673466511615, 0.21318104531871318, 0.21283624681598867, 0.6597465566021914, 0.16907822429635166, 0.4968603742770231, 0.20899783330294086, 0.1942465332628931, 0.19982419678465613, 0.20621609964575005, 0.20204163096451688, 0.19072101267098862, 0.20895759898671162, 0.1938653092941539, 0.20372828101770302, 0.09049117456120859, 0.13573659962763962, 0.07111794894616319, 0.07232495585965604, 0.08665511211279187, 0.07749189826383063, 0.09435100165786992, 0.0762234365230382, 0.07723221661291702]}, "mutation_prompt": null}
{"id": "7908948a-ad02-4c03-88d2-b5ef8d5505d0", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 1.009\n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Introducing a dynamic mutation probability adjustment to enhance exploration-exploitation balance.", "configspace": "", "generation": 71, "fitness": 0.2123111769408992, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.44812979090877303, 0.47488144005818345, 0.448187381807458, 0.47566661701394364, 0.43530361567885234, 0.512153718653731, 0.4687146833927026, 0.46668278572871147, 0.45151053548706443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024550429818723907, 0.05957878769088332, 0.0420386134024926, 9.999999999998899e-05, 0.04344157577132701, 9.999999999998899e-05, 0.08442363678861786, 0.10620752293376023, 0.10998353354588575, 0.10377960291289201, 0.0948660730935893, 0.07171404796865755, 0.0796322659711739, 0.13531758740245692, 0.10558513115424117, 0.08933855041958394, 0.07944298177753462, 0.09143415626595364, 0.08587048946531994, 0.08895777951582662, 0.07246009838323697, 0.09560400700102178, 0.11167326296341984, 0.06752755662090038, 0.9572196625825012, 0.9648585852863407, 0.8422979600349174, 0.9061707988346769, 0.9516436076800208, 0.8961197941914713, 0.9616293086440368, 0.9618524376684104, 0.969502537052636, 0.26925222130769677, 0.2892510936086298, 0.3132843081399451, 0.2958906522688447, 0.29701453394426625, 0.31452042487014853, 0.2808064376590468, 0.2837767411704095, 0.31372546674006196, 0.24973398887458154, 0.22478159779050078, 0.34816045239754323, 0.3704309186586092, 0.3334525784633019, 0.38107049571316, 0.3498851258161352, 0.4101367345550866, 0.17856956254953327, 0.1907036039114247, 0.18218817928925224, 0.1832265039574763, 0.17281979498858657, 0.18287021668687786, 0.15618574891896586, 0.15433258563911345, 0.2165455163364749, 0.15859009892109677, 0.178033805373227, 0.1556305823001226, 0.24427995887449194, 0.17406953969304595, 0.17762839100628058, 0.1409767453317703, 0.21316084104543132, 0.1459415540907052, 0.16582857311272814, 0.005302232163117204, 0.0625701162632597, 0.03378948615139399, 0.039939115897066446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013148389260902116, 0.14580700555373782, 0.05978839451112672, 0.10447371375257153, 0.05987734483881668, 0.04298252840359107, 0.02548384385532665, 0.09105802836082566, 0.021766714848598157, 0.04383839744855411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08478584432759284, 0.12545936072533714, 0.16298361546965479, 0.13202377883547867, 0.10227746321869602, 0.1445453420909727, 0.11795613036565922, 0.1094872099683738, 0.11317776546354019, 0.40976996387308595, 0.4360336355381299, 0.4375695332120889, 0.42138215368129295, 0.39317631137503173, 0.42434760378103653, 0.44064325680380056, 0.43260939842479773, 0.42829605503374246, 0.12546673180151524, 0.10044378526103359, 0.08089451562023298, 0.11578182478844501, 0.11736188051092233, 0.09376041512439459, 0.10066813692729737, 0.11842503338851218, 0.09588612854600198, 0.20213108503469546, 0.18552630050431052, 0.1725756975159286, 0.22135178826377844, 0.2890286852147712, 0.23852632760083048, 0.25888776263446744, 0.2537063906918785, 0.3268702918236067, 0.29632824904311905, 0.30455745553530167, 0.17380186794659458, 0.2695962454478873, 0.27910764264060195, 0.150834642844333, 0.28667895624321105, 0.1886714787834297, 0.30242778692755456, 0.2151036269077038, 0.17235901698243017, 0.15599406199862587, 0.22221455541591117, 0.2083174625559916, 0.11755276902733336, 0.17074007861786233, 0.1439503888487581, 0.1701153485582323, 0.19683714004005948, 0.22604564614727285, 0.24626798201543654, 0.187900837830703, 0.16643056911124876, 0.18769907619730486, 0.19016386528148965, 0.18735937117660628, 0.1845832056965051, 0.19271095760395984, 0.24141467292850483, 0.18666491933896312, 0.19717520447639247, 0.19486284806155618, 0.19937724691301306, 0.19256328758310481, 0.19298039274558165, 0.19198582449656376, 0.1233859293099191, 0.13689473915577732, 0.691760419731394, 0.173542014002938, 0.11292176596748815, 0.06197277381051025, 0.1088508549203141, 0.11525544736031845, 0.16923375488751102, 0.5935618463903263, 0.11351169775774084, 0.08305865929574252, 0.06499330937803693, 0.21291880707407285, 0.2129004567600311, 0.6038794811212727, 0.16881638709600355, 0.27341984983723544, 0.1775914699933584, 0.18063201405813034, 0.20265685638126452, 0.1923543391895327, 0.1897877140580294, 0.18748537420764988, 0.1854489617134938, 0.17802136142894032, 0.18539079530322633, 0.09049117456120859, 0.13573659962763962, 0.07591093970705809, 0.09086770992542337, 0.08380330322335316, 0.12777724034305593, 0.12021424857168894, 0.06772332352310895, 0.07691687726596408]}, "mutation_prompt": null}
{"id": "f4dce658-8b6f-4cd3-9e83-4eb57cdf0d89", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def local_search(self, func, solution):\n        neighborhood_size = 5\n        for _ in range(neighborhood_size):\n            candidate = np.clip(solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            if candidate_fitness < func(solution):\n                solution = candidate\n        return solution\n    \n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = self.local_search(func, best_solution)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a novel local search strategy to exploit the neighborhood of the current best solution for faster convergence.", "configspace": "", "generation": 72, "fitness": 0.216773167552727, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.43584912822741007, 0.49712007625427757, 0.46208051683662854, 0.460089518003753, 0.4649438269076386, 0.4746413976458437, 0.4474378328030776, 0.4699916065983334, 0.4677379870134115, 0.027990475533868797, 0.0022434564381835775, 9.999999999998899e-05, 0.037389145686712255, 0.048597021172435584, 9.999999999998899e-05, 0.08600450140266525, 9.999999999998899e-05, 9.999999999998899e-05, 0.07744223960581098, 0.10668226413858739, 0.01975543713134298, 0.06530149942146124, 0.1062874184428465, 0.08974325574849551, 0.10249333952223882, 0.1058948595988557, 0.06038753283918141, 0.10028491550509622, 0.12328094289044422, 0.06572336188877548, 0.059512944143818136, 0.12491927694676486, 0.07953473489024909, 0.05249496351403993, 0.10099122028189866, 0.1141663118812245, 0.9661479674260041, 0.9582091524422847, 0.939754976407391, 0.9397242225522382, 0.955609823999502, 0.9446106986011582, 0.9334685985076688, 0.9431731285320293, 0.9734941715819877, 0.28685502772985194, 0.3137683232872247, 0.3038841455974617, 0.3029582303819559, 0.29195138668170384, 0.3198839593668812, 0.3166911847013648, 0.3218582818205995, 0.3072602142973395, 0.35767874598566674, 0.13987742755249088, 0.16966621413820848, 0.5189518396886914, 0.2162642439878658, 0.21385778137907796, 0.3571230908450803, 0.23272799977144532, 0.6410524689486803, 0.19905657656551068, 0.20067169163664578, 0.1973435824500711, 0.1693128342251763, 0.20832576674607484, 0.2158541703324649, 0.2061089706867557, 0.22542453813421326, 0.13114029204126199, 0.18545272026033444, 0.19822503739818953, 0.11240922438684486, 0.18918856877827583, 0.21214177746476126, 0.12891199650955332, 0.18327175120053996, 0.2255876107602709, 0.1689828088359362, 9.999999999998899e-05, 0.00636050627119189, 9.999999999998899e-05, 0.04071327723008822, 0.0416749998971192, 9.999999999998899e-05, 0.02938986808430799, 9.999999999998899e-05, 0.05199754225394082, 0.12265495412935956, 0.14090330012494068, 0.1946435957664716, 0.1632657837307746, 0.03868632452736509, 0.05617422209085998, 0.22855968008428373, 0.04225087583712206, 0.1993565335444496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10508634608887657, 0.12385578038975054, 0.0868729229325329, 0.1398389277491362, 0.11333104883030543, 0.12249920372492729, 0.12056545908501648, 0.12273857710622449, 0.09938280638069386, 0.41359577627386157, 0.43767546860542994, 0.4246174129421528, 0.4260214630553697, 0.44460688321354314, 0.4519477157961972, 0.42220770569028687, 0.4309104970308416, 0.42527771102102185, 0.08656744274390471, 0.08638790487217085, 0.11237111036302305, 0.10516648689240615, 0.1668286626856128, 0.09558357135043494, 0.08845105319320645, 0.11116133712425691, 0.14389163589465392, 0.2605685310689019, 0.1501557792013567, 0.2578448759821035, 0.1713148859016499, 0.25264493353835027, 0.2614835505366119, 0.27016520624846796, 0.2765671048888928, 0.2695137918767415, 0.29843561292355225, 0.16120055195102467, 0.17362457002187015, 0.19718465138668928, 0.2921053471990065, 0.2786370140057828, 0.23845379338929984, 0.17500882349331182, 0.09563914851248467, 0.258312439987023, 0.1723374463906997, 0.1432869982894157, 0.22254587109714774, 0.2432337161117908, 0.20269112884846285, 0.19984521895360796, 0.12660801347224937, 0.05200439698281867, 0.20575274227221774, 0.2167677180732066, 0.20473191173506933, 0.21827021364509624, 0.20127709335093424, 0.23022272530873455, 0.19769814918040074, 0.17826391488153026, 0.19309324480356704, 0.2370405991757094, 0.18468129256874044, 0.16976997772086722, 0.17527094169022617, 0.19776748267397815, 0.16894125781079672, 0.21920583427655105, 0.19780473849377145, 0.18560925557924834, 0.12334064952886348, 0.13699342023958583, 0.09818699164973499, 0.17349570917949675, 0.06590506108027239, 0.06196569110533878, 0.10882543449271798, 0.11528682463491513, 0.169337560759784, 0.627011383747371, 0.11340539877487321, 0.6331452813933911, 0.16977566958317947, 0.21260716943479907, 0.21306318438055227, 0.6542931651237135, 0.1629272808512211, 0.54012143129747, 0.18055894137598316, 0.18241831931347363, 0.19937351051303587, 0.19811627913697916, 0.18698707855387564, 0.17290826446790875, 0.1835933962606051, 0.1859976869931521, 0.18208417255405784, 0.11543025305988286, 0.12320140141936431, 0.07578792263955114, 0.08519368510688508, 0.05537841892308204, 0.0800024965032291, 0.08940895389998005, 0.06790738933457718, 0.06868761042795013]}, "mutation_prompt": null}
{"id": "f32c818f-e8a8-4ce5-aa3f-cc9bab2a1bd1", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic step size adjustment strategy based on a combination of individual and global best solutions to enhance convergence speed.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.45739008444524676, 0.5138930607252268, 0.5029222375888969, 0.4900119886665809, 0.5117638765345158, 0.5181597211724165, 0.4905887582572753, 0.5248974462116154, 0.5060918042809228, 0.008647916376269826, 0.11602907603841706, 9.999999999998899e-05, 0.04948268612807183, 0.015613310859657226, 9.999999999998899e-05, 0.06080555139846999, 0.0324466620573276, 9.999999999998899e-05, 0.11165728079356918, 0.1131863198210149, 0.11464799654211433, 0.09480361498400558, 0.0948660730935893, 0.0737104755844602, 0.08063382154186471, 0.1077177100263681, 0.13220088289483323, 0.09306163630516262, 0.09103828614509135, 0.073250060466586, 0.09634312975219672, 0.085915105742983, 0.09711226219646274, 0.10265405623101909, 0.10344518263095293, 0.08579575067654388, 0.9594345647457962, 0.9648585852863407, 0.9255598125192915, 0.9200215710897316, 0.9516436076800208, 0.9252995765969191, 0.9511580822004331, 0.9618524376684104, 0.9677804281652652, 0.34828229572195835, 0.35660976658025456, 0.3374019450862453, 0.3333300205364581, 0.34487755465157954, 0.3376859875593986, 0.350665900084835, 0.3284876522009158, 0.3470077006461656, 0.6560634513283745, 0.22623836041602274, 0.22254963473583822, 0.3591922230821848, 0.408996040606993, 0.8552173048371612, 0.3679300983226008, 0.4101367345550866, 0.23137865355306253, 0.226631338487972, 0.20499583915481756, 0.24921187476443096, 0.1817897951582077, 0.18779156768131677, 0.20676382770705914, 0.19267339980928067, 0.21329334073237394, 0.20628423462769452, 0.18378929619768192, 0.2306386070640144, 0.18528803393093596, 0.1854235071043029, 0.19670718884945027, 0.16606492353438695, 0.1693841673954084, 0.21223235057304313, 0.18669610459312624, 0.05592610649949259, 0.010627224040500316, 0.04192215005622402, 0.0016657834700517515, 0.05436867998027595, 9.999999999998899e-05, 0.007625461435360914, 0.1016879082254365, 9.999999999998899e-05, 0.08415969223433983, 0.06558220776212043, 0.10455273725737113, 0.05649258085026154, 0.055310022205257714, 0.02745479487804603, 0.09110677488479779, 0.021850350663602303, 0.04557059994913992, 0.020107821248305457, 0.036521391341038933, 0.009492895308879978, 0.022838505557879807, 0.05439389910149417, 0.008990772185404783, 0.010417184089380305, 0.06538765335149799, 0.035375507885638036, 0.15698897123668887, 0.12543940065707648, 0.13438480492437377, 0.13596951895550935, 0.16758691304261153, 0.1521510221047616, 0.1379513934024511, 0.12713143025830376, 0.12630454995413565, 0.44088549646604724, 0.460181661225164, 0.42140665427017787, 0.44482651533271433, 0.46258942923363167, 0.41330295913122594, 0.4288920678847298, 0.4808246413999736, 0.43268181939817696, 0.11204990355726041, 0.08267081632932327, 0.10042837258130999, 0.12063974797037902, 0.12896976186366316, 0.07413804321006734, 0.0916800461331011, 0.11842503338851218, 0.14687052400826228, 0.26600134821314436, 0.24808129262487233, 0.17668460146901455, 0.22115076059057848, 0.2935075478740913, 0.2883766647414081, 0.29019196744118303, 0.21338912160986967, 0.2608970685153025, 0.30786153428499574, 0.2975890905083082, 0.1462148511009771, 0.3138285502597674, 0.30148468110013615, 0.1448108504276312, 0.30267552042918333, 0.21334618102923675, 0.10636721957629636, 0.2546597600201481, 0.20557553507190884, 0.20053809593105465, 0.25260568834129016, 0.23500598338489576, 0.12030583460548228, 0.19025805194507106, 0.16096412220398748, 0.08061844649063299, 0.20260179167516568, 0.22604564614727285, 0.21719381063238863, 0.19249418194959533, 0.21767929741437486, 0.1913255209520539, 0.21130091405874996, 0.2232102660215809, 0.17648137378823125, 0.3251515710914986, 0.21995470956422047, 0.1938006341923637, 0.200151469021845, 0.1840854011099493, 0.2002926681552618, 0.20259170503279544, 0.19298039274558165, 0.20119981210259885, 0.12325351094318737, 0.13709183828750116, 0.7833600739410311, 0.17322398414696505, 0.11293811585843128, 0.06197993321810169, 0.10882996612277673, 0.11521485717998026, 0.16922871720640975, 0.7319992843804018, 0.11354873951331412, 0.083068607139692, 0.06540673466511615, 0.21318104531871318, 0.21283624681598867, 0.6597465566021914, 0.16907822429635166, 0.4968603742770231, 0.20899783330294086, 0.1942465332628931, 0.19982419678465613, 0.20621609964575005, 0.20204163096451688, 0.19072101267098862, 0.20895759898671162, 0.1938653092941539, 0.20372828101770302, 0.09049117456120859, 0.13573659962763962, 0.07111794894616319, 0.07232495585965604, 0.08665511211279187, 0.07749189826383063, 0.09435100165786992, 0.0762234365230382, 0.07723221661291702]}, "mutation_prompt": null}
{"id": "51318f1e-5ec4-4bf3-b413-cc0ffc44831f", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n                # Dynamic population size adjustment\n                population_size = min(10, population_size + 1) if np.random.rand() < 0.1 else max(2, population_size - 1)\n            \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic population size adjustment strategy to enhance exploration and convergence speed.", "configspace": "", "generation": 74, "fitness": 0.18772688163371734, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.49523059011570025, 0.499320047275296, 0.6014701478851305, 0.5674063443232251, 0.5749685636766071, 0.5950987462540096, 0.545373660393863, 0.6041369390217182, 0.48626715396577236, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06083325180016819, 9.999999999998899e-05, 9.999999999998899e-05, 0.06872603311844816, 9.999999999998899e-05, 9.999999999998899e-05, 0.12060635039255574, 0.07246103267156867, 0.07129607138905136, 0.15566464621184073, 0.10469617665194164, 0.10434570040961921, 0.10719626874801613, 0.08575878191235187, 0.0715344169981561, 0.10441679739136256, 0.09086689868091269, 0.09158606856954898, 0.09139187927132808, 0.09695825349846399, 0.12964689041893418, 0.1087653682133648, 0.104298333763994, 0.07500247420331341, 0.9712869938420531, 0.11407413046417281, 0.1214294619218299, 0.9464920832631017, 0.14609578653715538, 0.1456931162703462, 0.24683823531963245, 0.24915639432041725, 0.9694741012835312, 0.2964492811886331, 0.3160886268858264, 0.23930722512486602, 0.2988643692037345, 0.26361384771651997, 0.2785929639541608, 0.2649772400071706, 0.3244214220874254, 0.23112905815044738, 0.27949128710622606, 0.20517490694255025, 0.1834423031197122, 0.21582761349784063, 0.21054970810910423, 0.24203011985974365, 0.3036277641628984, 0.2150128463539399, 0.17863248120422015, 0.16894068463984402, 0.22562786455870543, 0.18922163999412855, 0.17205149437788392, 0.18135942961553164, 0.1872348875789498, 0.1893097152095139, 0.17127508542701797, 0.19166938739785833, 0.21113855373602142, 0.1615552678365566, 0.13286453928987196, 0.15161324022770628, 0.16099396090169082, 0.15260236907766356, 0.1520660390777746, 0.15146059934720946, 0.14997113128595851, 0.01153757648114917, 9.999999999998899e-05, 0.028470946577440204, 9.999999999998899e-05, 0.0022692414813964, 0.016629583596305064, 9.999999999998899e-05, 0.02734972346144038, 9.999999999998899e-05, 0.08622339696360282, 0.05264960720797174, 0.08820663447281618, 0.06889058439308249, 0.03981312363224532, 0.01068555014712691, 0.10840000919423398, 0.02715416727821962, 0.09901070519244282, 0.05412285889845314, 0.027397162635425798, 9.999999999998899e-05, 0.07013229131114329, 9.999999999998899e-05, 0.08876636862804976, 0.012752850406723026, 0.03935311776481254, 9.999999999998899e-05, 0.1085285456703321, 0.11051278521371366, 0.08267118781299054, 0.1593267714478458, 0.14312128418263492, 0.07497900384818934, 0.11523625274335758, 0.16935964752042132, 0.10500240148258433, 0.42113000819227653, 0.4388843665560259, 0.4446649538800237, 0.44100031756116287, 0.4203760006164462, 0.4531826915025102, 0.4499231313939138, 0.48846791154887237, 0.42673930621241907, 0.1135368323182101, 0.07858976973025089, 0.07522613049205773, 0.10352193165969437, 0.1815343439379038, 0.09184698569797944, 0.09496705825884733, 0.07922421067866103, 0.1124325037483308, 0.17611932366097116, 0.18862983747388107, 0.18220427466655487, 0.3041906239163533, 0.24100834264302262, 0.14871272810067315, 0.31185267359851687, 0.1827142887630423, 0.25325916459010755, 0.2814090714616392, 0.2476980117831824, 0.17952270094498235, 0.30948248958417435, 0.2770548490722249, 0.2804554578475923, 0.28346507870092097, 0.20103773945831926, 0.10485603825850831, 0.19869179648756585, 0.19578405880139493, 0.07243868272673992, 0.23010537342554427, 0.19530210535304549, 0.13188020121540123, 0.17609534420543982, 0.15926641173941025, 0.036592090954900236, 0.19307832889141485, 0.20536419863349364, 0.16108040600030527, 0.20490788785682723, 0.23281538408738156, 0.15403524763683818, 0.23458089304176943, 0.1953006377452846, 0.22100753690568842, 0.1817744792486744, 0.20821298186074655, 0.2054218939821053, 0.18998272807201477, 0.18895464077824164, 0.1970692477698952, 0.18694097277299326, 0.1834151506889763, 0.17897936202165143, 0.12343227115242883, 0.13684412204887209, 0.09855815092739284, 0.17375382641186898, 0.11315463709764717, 0.06203665385034729, 0.1088468591538172, 0.12736693912723418, 0.16847951682207418, 0.4183232203903493, 0.11320299053648375, 0.08312589269281634, 0.16975291739248766, 0.21412295562760164, 0.2135741974216906, 0.6401273069305498, 0.16918450542071828, 0.4124721366438434, 0.1946560066176808, 0.19299449433998317, 0.19419164074632456, 0.17119450755775378, 0.1969109887367534, 0.20620045511576324, 0.2079980041662126, 0.2000777252822652, 0.2008862281148197, 0.12218431528862406, 0.12791632578961576, 0.05380499646816539, 0.10035500736751468, 0.06195057341283905, 0.11266898859330865, 0.08431905936509954, 0.07346881068895783, 0.03886348981947996]}, "mutation_prompt": null}
{"id": "e1776250-8df9-44d9-83fb-3ab2f8ab37b3", "solution": "class ImprovedDynamicPopulationSizeHybridFireAntCuckooOptimization(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = np.mean(new_solutions, axis=0)  # Use the mean of all solutions as the global best\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "ImprovedDynamicPopulationSizeHybridFireAntCuckooOptimization", "description": "Implement a dynamic step size adjustment strategy based on a combination of global best solutions to enhance optimization speed.", "configspace": "", "generation": 75, "fitness": 0.22694776044828818, "feedback": "The algorithm ImprovedDynamicPopulationSizeHybridFireAntCuckooOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.47829350687680894, 0.4877650439492922, 0.5036823752097215, 0.48342048437276375, 0.5026381003448428, 0.518037170671082, 0.4736838104343276, 0.5156024916933264, 0.49610902700844517, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03738144432367285, 0.05599161768632244, 9.999999999998899e-05, 0.02518497416126597, 0.020805920725687654, 9.999999999998899e-05, 0.10883543836617116, 0.07804925885464686, 0.09277238999553394, 0.14839307593074302, 0.12582657999051028, 0.09992845177774146, 0.09320660986238782, 0.1118065637500113, 0.11174575974515277, 0.09556227414311957, 0.06930143662329369, 0.09990041717125075, 0.08494650276569538, 0.07083067167031443, 0.10599645455237372, 0.08238328740966205, 0.14149789585882466, 0.06784199851160155, 0.9594345647457962, 0.9648585852863407, 0.9255598125192915, 0.9144011513312942, 0.9516635490081568, 0.924133931940423, 0.9548786613998662, 0.9563662359838929, 0.9676688372906441, 0.32408379271469534, 0.3817655826365719, 0.33002414203247077, 0.3171273186379997, 0.33911010556290944, 0.33338108083534224, 0.35612314110835086, 0.3304339366350191, 0.31811207319944235, 0.2309299315169855, 0.21163829854364768, 0.22128206850152088, 0.3650100700077422, 0.3543468683492912, 0.26745195387748344, 0.375190868169326, 0.3693965757417291, 0.23546965780019835, 0.1661980364276363, 0.20973202704561178, 0.2355304102408109, 0.16478866554434446, 0.21009873409977897, 0.18634446549090922, 0.21355101794996345, 0.2545931637121511, 0.21370323360090793, 0.16148944084853134, 0.18930129140189578, 0.29900275945492116, 0.17951496029680547, 0.2613289284702026, 0.17836454706966176, 0.21403935166132848, 0.19564931863833268, 0.15310808263577147, 0.04326368449150286, 0.06404151747010278, 9.999999999998899e-05, 0.022189860162667552, 0.07979801717266566, 0.08999575242873192, 9.999999999998899e-05, 0.04936110712635311, 9.999999999998899e-05, 0.08492451924541689, 0.07506037432793822, 0.07220354919800209, 0.0373215396679063, 0.033834110016754515, 0.025237498535558567, 0.22547254592129395, 0.03439799618778905, 0.05458421668856095, 0.005347669655099696, 0.0050153470501669295, 9.999999999998899e-05, 0.033651128312464085, 0.01093562124763503, 9.999999999998899e-05, 0.012353360581872752, 0.02298421310181753, 0.027278090916429742, 0.13355880834595535, 0.13336096304263179, 0.13587177974907405, 0.13172034461677562, 0.13801955064507854, 0.13418264645888356, 0.1553229834709544, 0.18601493503533895, 0.13321516896115249, 0.43992806078522484, 0.4286665252906823, 0.46034191802890356, 0.4251144325883268, 0.45598370288710643, 0.42253216544252525, 0.4509871017165661, 0.4382934865691045, 0.4404087632316749, 0.12091671791852054, 0.10772581915700752, 0.09603282934739799, 0.12714677675458774, 0.11302668908793234, 0.08237959748253998, 0.1289487685037064, 0.11320164882517436, 0.1437357064478476, 0.2525670058546948, 0.18017566531759388, 0.17210525958676592, 0.2689089511761398, 0.25210916322249033, 0.252448752541237, 0.267270126633699, 0.2504910340181383, 0.23799052389616593, 0.30919738549128617, 0.3054022374115599, 0.16387714134299225, 0.3074431605787027, 0.3314583816325276, 0.29827034630904536, 0.21384184898222147, 0.31014809326337023, 0.2997370919547856, 0.23886267010104112, 0.24603764230276226, 0.20648519893699024, 0.21297312797814605, 0.2625280955567124, 0.15233870981399233, 0.20185290750057439, 0.19129111447174996, 0.04747596538957766, 0.20791675526967435, 0.24223884412785535, 0.2273356319073061, 0.21555945019671152, 0.1968630658620817, 0.19482519179556212, 0.2904943564148491, 0.24133014767922367, 0.20606411075334663, 0.18697706899711386, 0.21374235323627944, 0.20341724138243256, 0.19386611572913848, 0.21951633843481055, 0.21421508608620632, 0.22121144356477696, 0.2150059436170888, 0.2085735890697803, 0.12334107762202473, 0.1374149955753895, 0.729888765888544, 0.17351982050881365, 0.11248793457771955, 0.06197803370782273, 0.10883993389371094, 0.11529513745000763, 0.16844265663122038, 0.733831114044236, 0.11321319606090396, 0.08310260846576545, 0.06530394244917648, 0.2128204846352162, 0.21219135608106576, 0.5961783544196522, 0.16884993826315164, 0.4623375638395121, 0.20854023985673997, 0.21540644769516915, 0.20082706934582306, 0.19659666059044467, 0.1980453847350081, 0.19783523523159297, 0.21382448950476696, 0.18902936581771368, 0.19752195275131024, 0.12004685972484408, 0.1224188207631629, 0.07108847687087183, 0.07228942064325761, 0.09143543203494975, 0.1284803159298029, 0.0887659384569166, 0.08023788276671895, 0.07635714030802387]}, "mutation_prompt": null}
{"id": "5e9e5d56-f42a-4bb6-9ab6-aab64b6626d0", "solution": "class ImprovedDynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_param = 0.3\n\n    def _chaotic_map(self, x):\n        return np.sin(x) * np.cos(x) * self.chaos_param\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n\n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:\n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99\n                self.step_size *= 0.99\n\n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n\n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98\n\n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            chaotic_map = self._chaotic_map(best_solution)\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * chaotic_map\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n\n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n\n        return best_solution", "name": "ImprovedDynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Introducing chaotic maps to diversify the search space and improve exploration-exploitation balance.", "configspace": "", "generation": 76, "fitness": 0.21883877924651246, "feedback": "The algorithm ImprovedDynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.4668158708924106, 0.485082046099482, 0.5384935907089465, 0.5339255179573563, 0.48877952473718, 0.525266790101602, 0.4903209854155237, 0.5176044122354105, 0.4865670735725871, 0.08922569806101599, 0.035319690799202164, 9.999999999998899e-05, 0.012375644008188136, 0.03726883353941035, 9.999999999998899e-05, 0.061145424861403286, 0.05956663225117298, 9.999999999998899e-05, 0.11516650391691297, 0.08713902363409087, 0.1271824973454233, 0.10476693628837386, 0.1163396812786841, 0.11224464100207876, 0.12419826893495989, 0.13180726183039382, 0.07356873405856512, 0.11686146900432559, 0.06712055082626123, 0.048937576398640714, 0.07161958620490316, 0.08584326685185151, 0.12456406134674469, 0.08508216925647016, 0.09535357221081664, 0.1016885341141317, 0.9707753359163956, 0.8533086029311189, 0.9067159930525597, 0.9479222609087009, 0.9164843620141137, 0.9326638668153056, 0.9409874844208056, 0.9255282134669519, 0.9780788322504272, 0.36791090618379874, 0.3269928935478521, 0.3403870321221262, 0.31936269822014973, 0.3712903173127191, 0.33103711482075426, 0.3645463832799807, 0.3288667503237188, 0.3456572143166845, 0.23663549928854044, 0.37348383293508325, 0.15873877914505263, 0.3408380224121498, 0.26853975262571717, 0.36932503898842617, 0.2918414443954914, 0.2324411471498875, 0.3676527845127231, 0.2943352348783679, 0.17118241129530432, 0.2083442442633674, 0.20482405491333977, 0.1935842682131128, 0.2781393689503051, 0.17807774449119484, 0.24392135855412467, 0.19784191909770754, 0.20557438080308932, 0.23040162342340142, 0.19693543046285666, 0.18756239703682487, 0.21629726870334176, 0.2468021006872122, 0.18098460570660868, 0.18762422013852253, 0.1390532581771997, 0.006770213096756961, 0.04812906856877086, 9.999999999998899e-05, 0.03703130818128575, 0.010232593537637169, 0.004922830470952655, 0.010687281866226472, 9.999999999998899e-05, 9.999999999998899e-05, 0.051282554948707926, 0.06707431703249767, 0.1132144629364571, 0.11826647989175376, 0.047957269042694484, 0.03151571917405804, 0.07164520159079857, 0.028367059916032833, 0.04299233214676712, 0.016548860969103907, 0.013645782132058248, 0.009798537150791375, 0.006512793484853341, 0.009254250635311156, 0.009425796387096286, 9.999999999998899e-05, 0.014218309382391436, 9.999999999998899e-05, 0.10600161887190951, 0.13005413589291803, 0.100821197243112, 0.1172704430302467, 0.1339946415451443, 0.11725192080549818, 0.12921584036292388, 0.10325572543663308, 0.1408665493278347, 0.4462607770854239, 0.46062332822527796, 0.4552333503292679, 0.4223371829490188, 0.45528441213511617, 0.42056146016499174, 0.4323908872010013, 0.43027761433086364, 0.41592618039014784, 0.11869278915140913, 0.0833310369790603, 0.10417887273341297, 0.11822959607595951, 0.113478610167421, 0.10824411283476643, 0.13594298960355333, 0.10423837311451012, 0.08679290404932272, 0.23441954455203173, 0.2240717871570731, 0.23068780058202776, 0.23395201622867157, 0.24868499825888224, 0.2713798549507155, 0.25128362998124376, 0.19837850510745303, 0.2636299216890158, 0.2906133197442837, 0.3305689397434777, 0.14965398679049446, 0.2983767586193966, 0.28902275651451514, 0.15980272406795448, 0.29214179372384774, 0.27008042818596967, 0.09703577040807054, 0.24087275293445232, 0.2315510790612244, 0.24205091584382254, 0.2603682363079771, 0.2354084883642057, 0.14359718820113343, 0.2323312150807284, 0.19299346398923023, 0.08460186444746154, 0.21368315213121725, 0.2441759785729276, 0.18456346659948974, 0.19810300289313076, 0.18946475680403796, 0.20483320960508322, 0.17361562496347815, 0.20711363561475815, 0.16740366563947373, 0.23393094891696087, 0.23168073250513865, 0.23744919721798208, 0.1862460722299477, 0.2056738331530601, 0.214452053735956, 0.194286957937724, 0.2412443265146471, 0.18128597012820435, 0.1230261359019662, 0.13723858341592554, 0.09859080555803068, 0.17361150353417565, 0.11253160082479208, 0.06197698422667086, 0.10875558927368256, 0.1269281465922102, 0.1686397871642994, 0.09392200675158024, 0.11338221754512412, 0.08295625279545416, 0.1696745646537009, 0.21245318766909016, 0.21275636114282337, 0.672327471613176, 0.16928865939539572, 0.6785783760087416, 0.22293322763433976, 0.2047984363316544, 0.20804912268881148, 0.19842995125028706, 0.19641144242888964, 0.1972413890393816, 0.20300728923400346, 0.19531099684826125, 0.20876928785060578, 0.08271169713412363, 0.11754778411018574, 0.0626807149866403, 0.09738327763021315, 0.07476106660700721, 0.08076114212475405, 0.08085261839569724, 0.08560040113739764, 0.08073181657163275]}, "mutation_prompt": null}
{"id": "c9e74f7d-70f6-42f2-919e-b474d1b5605a", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n\n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n\n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n\n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n\n            ## Dynamic Population Size Adjustment\n            population_size = int(min(20, 10 + 10 * np.mean(new_fitnesses) / best_fitness))\n\n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n\n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n\n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Introducing a dynamic population size adjustment strategy to adapt the search space exploration based on fitness improvement rates for faster convergence.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('negative dimensions are not allowed').", "error": "ValueError('negative dimensions are not allowed')", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {}, "mutation_prompt": null}
{"id": "1fc07b57-76ed-4e62-b9ed-120acf991177", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        dynamic_population_size = 0.5  # Initialize dynamic population size\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                dynamic_population_size = min(2.0, dynamic_population_size * 1.01)  # Increase population size dynamically\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (int(population_size * dynamic_population_size), self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution\n", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Introducing a dynamic population size adjustment strategy to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 78, "fitness": 0.22348204439278965, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.5537941713472665, 0.5493062524010386, 0.5667453916749814, 0.5760242453475835, 0.5512694338537512, 0.5665743100528177, 0.5665846188161638, 0.5283600573298602, 0.5669267223376931, 0.0741321651524075, 0.045311034258851746, 9.999999999998899e-05, 0.024809703412456252, 9.999999999998899e-05, 9.999999999998899e-05, 0.04268374449733414, 9.999999999998899e-05, 9.999999999998899e-05, 0.0785292902136322, 0.07511305167410087, 0.11543371991185103, 0.15396292195348393, 0.11767713845275685, 0.1112137590235357, 0.09899859016008572, 0.1057297700646197, 0.09217246238706156, 0.1422850341759817, 0.10322506056658898, 0.10340106346352151, 0.09827676880791769, 0.11458086131098444, 0.0945124120403078, 0.07698574733701558, 0.09470320295385393, 0.08569901626997034, 0.9503295900875008, 0.9523114554443406, 0.3010506163489125, 0.9055081976888487, 0.21000337858209173, 0.9482425727206367, 0.964243827501938, 0.9633394314583706, 0.967371977521674, 0.31347221700351524, 0.3430932986427163, 0.36921336003515703, 0.3332455536660882, 0.3627526015447856, 0.35957698211897204, 0.3370222821324469, 0.3960556449430972, 0.38669019484164224, 0.22878586261261713, 0.2273914346610011, 0.2300684960888041, 0.38490480636721613, 0.2753837112726232, 0.21413298228793098, 0.3235436511702281, 0.23680151471223232, 0.2640247853331473, 0.22134695960757922, 0.2036838318946289, 0.2300911248904054, 0.23790834548572082, 0.2229298791139438, 0.21364620547513957, 0.19429946356063765, 0.18292363176004633, 0.290612048131606, 0.2827574184898102, 0.22482397388266917, 0.19017773645795388, 0.18443260947384554, 0.18113071180635754, 0.21758637065478859, 0.19388407265883, 0.23133696936142834, 0.18198784276629631, 0.10410304087920763, 9.999999999998899e-05, 0.02086760937435106, 0.06575824056127899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00048739101696504417, 0.15980356489677994, 0.04346587135142199, 0.06696554457176584, 0.06401803898304204, 0.04653353743017108, 0.018952006341100835, 0.013622114128221785, 0.17819538930387935, 0.03210785508308023, 0.055128410146747964, 0.048164804764485813, 0.01426809143953578, 0.07232849911560846, 0.024964107078717657, 0.035736936616938886, 0.06529601814891162, 0.1023900178040541, 0.05588640603967887, 0.048567695926609256, 0.14908079731912416, 0.15575516206464868, 0.06829875872192237, 0.15060307096081382, 0.1446343423212898, 0.17341327784842875, 0.14695879344848384, 0.08833976412403721, 0.16858049463715763, 0.45677130578565095, 0.492252640961103, 0.4803959596020496, 0.4812562169838899, 0.47181271544200754, 0.4582791834784331, 0.467678723575331, 0.44961317154775093, 0.49681630108031816, 0.13390077456133953, 0.10383612184495083, 0.08200188013812892, 0.09865488427604019, 0.09504848315037229, 0.11752701345817584, 0.12875281363794544, 0.11369938945070845, 0.10622394413445746, 0.20529361546912384, 0.17709715596094788, 0.2717700679032653, 0.21097715005205964, 0.3130303231149415, 0.30443625245475703, 0.2575331525430343, 0.25483239073823694, 0.31049425806345576, 0.2995872058420077, 0.32938062653327393, 0.14350816385516685, 0.3028511261654606, 0.3479341268430801, 0.32411021475937807, 0.3089142085504657, 0.2187396556621961, 0.10220225524865834, 0.24375708864124102, 0.22872105997657455, 0.05657511553726313, 0.24545849039705858, 0.2105806964573328, 0.13704210886669765, 0.20461335365819044, 0.1809969962971799, 0.04638155039327685, 0.262916255780168, 0.23610859875510448, 0.1925962291156228, 0.17407081941571012, 0.18228650245456735, 0.22402655237556368, 0.17060197938976884, 0.2022893109715037, 0.22165175375330948, 0.19596810752172955, 0.19641574677973206, 0.2022816257784379, 0.1846200546575174, 0.20864656422622863, 0.19689895561698934, 0.21503606032709388, 0.20173979413252707, 0.2436107220926964, 0.12335752012136458, 0.13747899177782452, 0.10521678616092034, 0.11516007445182108, 0.11289221607945621, 0.06202376212753702, 0.10889795517794831, 0.12741155937734983, 0.16918819825088727, 0.6532014307318061, 0.11352203056926846, 0.7252197316899056, 0.1569381208975057, 0.21373826219505532, 0.21051644171784056, 0.5576746043065026, 0.16888570415252468, 0.4579662610663301, 0.20613795279542302, 0.20336585460326873, 0.20246024365589899, 0.19926474739457567, 0.19927589615466523, 0.19928922441442765, 0.20669354654096228, 0.1942153261173456, 0.22078160064694297, 0.06434726202567986, 0.09618688154529698, 0.04732572358496123, 0.055522426894689336, 0.06023280100717454, 0.061490383317813424, 0.12860084951533957, 0.06484014954485862, 0.06637850603598583]}, "mutation_prompt": null}
{"id": "27230ec2-4197-4324-8c4e-d06c5e00a3d7", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n            \n            # Mutation strategy for diverse exploration\n            if np.random.rand() < 0.1:  \n                reset_indices = np.random.choice(self.dim, int(0.2 * self.dim), replace=False)  \n                best_solution[reset_indices] = np.random.uniform(self.lower_bound, self.upper_bound, len(reset_indices))\n                best_fitness = func(best_solution)\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a mutation strategy that introduces diverse exploration by randomly resetting a portion of the solution components to enhance global search capabilities.", "configspace": "", "generation": 79, "fitness": 0.1546834947094272, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.14.", "error": "", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.3889980297662876, 0.35876331676743833, 0.3028828864918036, 0.39953356435096077, 0.4084645581315174, 0.30236357123774493, 0.4064107318589757, 0.32607833504733574, 0.36772461807889534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01978229101930551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0755195302899907, 0.06491298823293512, 0.08076747221566671, 0.06097780421603438, 0.0807685611337281, 0.06229319738427963, 0.06335548960920045, 0.06457142691814954, 0.0694046494847751, 0.07108036000674423, 0.07155180833014274, 0.04684080071835994, 0.07166140752969041, 0.06731065210297271, 0.02872998372775437, 0.06860759210584144, 0.06935713120934339, 0.03622140204784241, 0.9550540680308816, 0.9650302313367252, 0.09966562503369392, 0.19472861893584115, 0.268003810191097, 0.11092328733704959, 0.9592497873351515, 0.18747150522982614, 0.17724569296911885, 0.23400095168746926, 0.21059533383546136, 0.16168582086253058, 0.23279053523759252, 0.210108111481898, 0.16352870685412124, 0.21394892595976545, 0.20073811383089302, 0.17363031284015307, 0.1892972344523297, 0.1346449826257764, 0.1420989616401923, 0.25610875857651183, 0.20187074549654405, 0.18086016942068162, 0.189316389448124, 0.224338950603441, 0.21870171894486212, 0.1505918906554885, 0.1234281126436586, 0.11492843828547261, 0.15287102066748248, 0.13021209585284266, 0.19132782575439555, 0.13546251868526338, 0.14843442526569794, 0.13012533482124689, 0.13559941742802584, 0.13503470835266795, 0.11712939215823592, 0.12868327153859116, 0.15277955019419442, 0.12537357885204814, 0.14966436879584832, 0.13008915450329372, 0.14257899924554296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04749518995609048, 0.044837063275993905, 0.09876088464607546, 0.050135707523727646, 0.06693478274309328, 0.0766948611703625, 0.1010816913095125, 0.06890953461927307, 0.06742263759511558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045537700086387134, 0.06499695605607281, 0.07096875616373288, 0.09040971374056717, 0.08447758521703164, 0.10345825232321781, 0.06881702605487916, 0.04462226950583115, 0.09524956242964233, 0.33908897522200554, 0.3277150362512332, 0.32648616410558173, 0.3438888025563428, 0.3703163723599451, 0.34460363082709244, 0.36228948973037933, 0.38972169588075867, 0.3241596018028011, 0.05339736372698611, 0.05192091075061522, 0.06500616439928819, 0.05684207992337975, 0.05556940592289372, 0.06797778439023117, 0.09389863759663186, 0.08059486933822624, 0.05844556897703801, 0.1979092803916752, 0.1558639648345268, 0.1711346187975108, 0.1649530616602808, 0.19233060434443783, 0.15524722773797106, 0.18951749820795805, 0.16067826366429416, 0.18229526655669903, 0.2023859396097052, 0.18383901770667788, 0.1606192618654284, 0.22883261239128538, 0.19601903063951287, 0.21852889317153312, 0.1354916057941451, 0.15913109533279313, 0.16254928015437475, 0.15520908656557508, 0.10507135667376155, 0.15332869725388387, 0.1451363317239397, 0.12723584028512214, 0.1471486758305457, 0.10836921806616118, 0.13134909140514228, 0.13585838101734604, 0.1708965532357377, 0.17135358423588787, 0.17852603318662863, 0.18045030208557167, 0.18637606542317176, 0.14863949716454394, 0.2061253065208447, 0.15927978007568178, 0.186308999171222, 0.17488425950994735, 0.17516000391802866, 0.19560435937881482, 0.19661117996492017, 0.17377095366911144, 0.19173264038084759, 0.17428410674240769, 0.16744045577235733, 0.17838063362085455, 0.18311110908333672, 0.18759696726383734, 0.18350918582796172, 0.5214274134825407, 0.18955565260360419, 0.1930614232945269, 0.17003750307385146, 0.19960483006363927, 0.1309490160882928, 0.35692655853186817, 0.10713020789828265, 0.16561211781506613, 0.411034279968995, 0.17208602357501712, 0.2097825998086984, 0.31924311467289956, 0.15078958708531465, 0.16681832081462622, 0.2017662119545547, 0.21037567808526192, 0.19734793300276465, 0.20618515558941664, 0.18774777127123055, 0.18948312720136007, 0.21235009355184453, 0.18100351477048227, 0.20425256475731834, 0.08352777113334309, 0.09418258609664443, 0.04652440943405656, 0.05057746270536556, 0.05786596542838529, 0.05661093211528734, 0.06781926137983751, 0.057960393437470725, 0.05570185654093873]}, "mutation_prompt": null}
{"id": "6d4b4fe3-f445-4dd4-a339-44c2d6c31ae4", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                mutation_direction = np.random.choice([-1, 1], self.dim)\n                random_mutation = np.random.normal(0, 0.1, self.dim)\n                best_solution = np.clip(best_solution + mutation_direction * random_mutation, self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a novel adaptive mutation strategy based on a combination of random and directional mutations to enhance exploration-exploitation balance.", "configspace": "", "generation": 80, "fitness": 0.2285519109941126, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.49608990607059744, 0.5813326645885556, 0.5061118563130567, 0.5397477274016086, 0.6025944414844344, 0.5071356430001484, 0.5162493303891971, 0.47059074539101253, 0.5544230202058547, 9.999999999998899e-05, 0.011820239072883987, 9.999999999998899e-05, 0.007693306704734448, 0.01958585700168658, 9.999999999998899e-05, 0.029257786224045068, 0.059537563277547445, 9.999999999998899e-05, 0.1374082593986926, 0.09632503640831636, 0.10279238033174187, 0.1006927524115665, 0.03747106376115883, 0.11089463109419173, 0.1092940531362141, 0.0854515630648992, 0.10603186406589449, 0.11296641830949228, 0.06385795107876169, 0.05248906681539933, 0.07779611423433819, 0.04598656217714581, 0.07957908696017346, 0.1254359623520258, 0.03387494834807436, 0.09029421358490342, 0.9520125372933925, 0.9311402134846671, 0.9393710184712882, 0.9632749020608219, 0.9533193934576605, 0.9299058159804432, 0.9258914610271405, 0.9763707593741744, 0.967821361097979, 0.3375213326098685, 0.4066536200869243, 0.3062089947836826, 0.34937144608623616, 0.31772155786132383, 0.41983935942318185, 0.32390363241836084, 0.3569967695545624, 0.4227517706726338, 0.3785288928893983, 0.17714633802430257, 0.3822621742461353, 0.28322472475662275, 0.2767133891812926, 0.21372129915724125, 0.3844891734053314, 0.23070905993984703, 0.339696490569115, 0.20241612005222165, 0.19994751053306326, 0.1555472934782972, 0.24877369846478714, 0.22513035473974008, 0.19981851597675704, 0.19811272799212376, 0.2143150874443327, 0.20813605492544585, 0.2600302039733078, 0.25181000253690133, 0.1934644344251676, 0.1895061078610828, 0.22704565081045935, 0.21863860629655596, 0.18980904099331075, 0.18591815161430858, 0.21852342680723458, 9.999999999998899e-05, 9.999999999998899e-05, 0.00914834599014025, 9.999999999998899e-05, 0.05359971426956123, 0.014953310393592267, 0.007426733107085415, 9.999999999998899e-05, 0.011750194934555425, 0.0768747726824004, 0.04790303854061673, 0.10682173518939575, 0.04979905305116861, 0.02742286024438767, 0.01728359565113391, 0.11679185961684124, 0.042032485651000706, 0.032764947125062616, 0.0478801776373744, 0.0073862037414621495, 0.03080573637358719, 0.04170538488182807, 0.042253651204505305, 0.033043766523050855, 0.031480669328119104, 0.1017492927359055, 0.03206277383021383, 0.14938381731605854, 0.1711205884101611, 0.16292097750651213, 0.14483021229611426, 0.18478966853830403, 0.14876205210647186, 0.15922317394301155, 0.1723365592177708, 0.14405106702933268, 0.44982646668287984, 0.48568963898007567, 0.4861367598902747, 0.4665518015501906, 0.4709331720013362, 0.45822528963313935, 0.5074307329526113, 0.4566121462774074, 0.4667767406076393, 0.15222625443364013, 0.1281129746467612, 0.14741193989106727, 0.08893549196208006, 0.0919506451217631, 0.10245796561391252, 0.11355371735504305, 0.09509853241245214, 0.09377647334626671, 0.2932600537380804, 0.3171642366328199, 0.3134052176502907, 0.30569564934582627, 0.26536954460715, 0.29812328335030513, 0.1783641040471703, 0.2731715837651233, 0.25535313778477664, 0.24725067551339164, 0.3438533520050763, 0.3076279478223811, 0.32673492020552564, 0.25353368717810376, 0.18006472048652722, 0.23393602343833864, 0.24197834248352734, 0.10140780663973092, 0.1867127224873273, 0.1240216041388108, 0.18426591454464292, 0.2320713964485518, 0.24793657841774042, 0.21693108867453303, 0.23468603895918638, 0.159915935340612, 0.09472909518150685, 0.18594094354408452, 0.2035320387699152, 0.22927557160562417, 0.2018382279146571, 0.17970321198623662, 0.23788802545628174, 0.17468307915482728, 0.19456613558289615, 0.23968415038335078, 0.2004316784955935, 0.18843044052685132, 0.2328961202820541, 0.20402151988331163, 0.19622900428646495, 0.1841106557015525, 0.21198748179383387, 0.23478890952992493, 0.1900539733914165, 0.12341986570277863, 0.13695104928136115, 0.10456535679103363, 0.17301782556591183, 0.11280891202058196, 0.06203507535810637, 0.10883896576808927, 0.1272799933161768, 0.16926054560225312, 0.6746837895179675, 0.11342839052845943, 0.08317667401314743, 0.1698784950425457, 0.21377637825342244, 0.21356318261836849, 0.6673547321038881, 0.16797516488829967, 0.7420393092973958, 0.20923647029457915, 0.21541134473813095, 0.19812391137225405, 0.19168527554721426, 0.20705604541717326, 0.20558244582757557, 0.2186695991783063, 0.23947410118571888, 0.2056467168959374, 0.08732032568323778, 0.14755603079960566, 0.07288001826342283, 0.06849246738841408, 0.06840983058732109, 0.11655663126092786, 0.08592723014989168, 0.09746117085819728, 0.07285597051234816]}, "mutation_prompt": null}
{"id": "5ce9f7f8-a229-4f5c-88e8-cb454a171384", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.4  # Increased mutation probability\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.2, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.98  # Faster decrease in mutation probability\n                self.step_size *= 0.98  # Adjust step size based on fitness improvement rate more aggressively\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.96  # More aggressive dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.6, 1.2, self.dim)  # Increased mutation range\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Utilize a more aggressive mutation strategy by increasing the mutation probability and step size adjustment rate to improve convergence speed.", "configspace": "", "generation": 81, "fitness": 0.1586532219084305, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.13.", "error": "", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.47482430582901014, 0.5085002351073703, 0.5508217138636728, 0.4656880856941933, 0.45367712473655386, 0.5944424871833102, 0.4857147827100642, 0.4357047737161367, 0.5654942153211892, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005652907984933009, 9.999999999998899e-05, 0.024444509591164953, 9.999999999998899e-05, 9.999999999998899e-05, 0.10596370045937697, 0.05572753723464374, 0.1265744210808425, 0.08144625864355781, 0.0781845833543614, 0.0696591844080936, 0.13724849067953948, 0.0760626445223026, 0.07784154691231016, 0.05801636172970648, 0.05564765555079154, 0.031742452369132645, 0.05686791102902622, 0.02806174078071344, 0.06403682113632547, 0.05618853058767437, 0.07922817042673014, 0.06883444908923686, 0.3033532765602459, 0.1542269713767359, 0.11669893923461716, 0.08334972690790277, 0.1217150672895203, 0.12964866986156098, 0.095159105006006, 0.15260130229242208, 0.18236768126077318, 0.28631818062958714, 0.2684725156678279, 0.2280262355754259, 0.29301458700514005, 0.24027936643968884, 0.3408350458772317, 0.18155540632483114, 0.24625570692128163, 0.3427004080967997, 0.35745848276974435, 0.14061853685909442, 0.11842839658456628, 0.21636913052343065, 0.19235659694954588, 0.2077688540157533, 0.22208115329993583, 0.12959372739594088, 0.17782419859749554, 0.14397175876216384, 0.14956331829243263, 0.1376771923536424, 0.20257842975867524, 0.178379444888784, 0.13834881592836246, 0.14751909027281995, 0.16566733442644033, 0.1685453595083678, 0.1709111251459381, 0.24605322728939316, 0.17028445535464487, 0.13809462290351038, 0.18363262636815547, 0.15501645706166278, 0.1404215404664526, 0.18768242622840803, 0.19589337413615426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06587298428236266, 0.08920907950319579, 0.10598996028742769, 0.06998483070319705, 0.026093886267180233, 0.02855767719294877, 0.09226177659762702, 0.03712044838038486, 0.06387350608322118, 9.999999999998899e-05, 0.021695248524234212, 0.10393734418179612, 0.024597572479359564, 9.999999999998899e-05, 0.008407549386815316, 9.999999999998899e-05, 9.999999999998899e-05, 0.014468908626622201, 0.07913239185371945, 0.09899977170742791, 0.10939969892000012, 0.12397055429155568, 0.12424072184072177, 0.11952354221164263, 0.07263784559279085, 0.16258731679869742, 0.11655907035375879, 0.4245295245909153, 0.4020817778709258, 0.4410580055949981, 0.4382615938796197, 0.398089312631576, 0.4285014546114959, 0.45369420609522215, 0.46382587069983205, 0.5088262314832481, 0.08049437895625233, 0.03082821036361416, 0.08924317833612017, 0.04282359914925715, 0.12333701390765639, 0.07869219809607875, 0.1213786364181828, 0.0743921324695751, 0.10001721158862642, 0.23133035914813305, 0.1729886054867178, 0.18638430909222614, 0.1345654039100036, 0.21947895293986242, 0.27274281231674935, 0.1470921164416401, 0.15747808816374287, 0.19764528462798292, 0.1601331991512025, 0.19966647688784223, 0.14262975087229146, 0.2063199864776467, 0.2454409163039677, 0.16425718469369877, 0.23624010088383873, 0.111858694184369, 0.11093759546256132, 0.1670994193680888, 0.11785363321170372, 0.03380768573058068, 0.19698485053411063, 0.10794631375503827, 0.1375900987829195, 0.1810460859081462, 0.0536478021887935, 0.04059738844105376, 0.21857549710078883, 0.1650354676829595, 0.17726602563578742, 0.19984271111033736, 0.18988456243759322, 0.2195363231155949, 0.21529687817613175, 0.18119239675209842, 0.23681177119209806, 0.17511401923136982, 0.19134806055327558, 0.19639601915513571, 0.18171965546904523, 0.18273561567191765, 0.18378675300106684, 0.19252081419353895, 0.17944187867486905, 0.18419127929061663, 0.12349441566653929, 0.13646972334341279, 0.09970767324930452, 0.1732636544752053, 0.11146160116139092, 0.06206467577088348, 0.10888440580251357, 0.11533776166148213, 0.16896943042619983, 0.3857066698521435, 0.11346752984719188, 0.08316549996515188, 0.16945781690252826, 0.2133468726399944, 0.21396883019903146, 0.5810081977296901, 0.059233886577904404, 0.2583593193450744, 0.17438067834439885, 0.18790234782512927, 0.1864640718715308, 0.18180360088569358, 0.1995273422611843, 0.18467064423060597, 0.21036625328283465, 0.1804612630549256, 0.18050670640466648, 0.08190587768619384, 0.11512268661986857, 0.05737967791734333, 0.07919009544188793, 0.06858734125574684, 0.07338572094323736, 0.10105942671746015, 0.09228275711211287, 0.049460939330431386]}, "mutation_prompt": null}
{"id": "195b698e-bff6-4655-9eec-1cba183da00c", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n                \n            if np.random.rand() < 0.1:  # Adjust population size based on fitness improvement rate\n                population_size = max(5, min(20, int(population_size * (1 + np.random.uniform(-0.1, 0.1)))))\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic population size adaptation strategy based on fitness improvement rate to enhance convergence speed.", "configspace": "", "generation": 82, "fitness": 0.21749239438865947, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.5362695521118028, 0.515642275942034, 0.5326839806902709, 0.5356952663945016, 0.5223673760144198, 0.5594852237712711, 0.5184986688614361, 0.5570146262755025, 0.5294051845316523, 0.012218935746289517, 9.999999999998899e-05, 9.999999999998899e-05, 0.0557890109065573, 0.06691362521107969, 9.999999999998899e-05, 0.003592035142216843, 0.015903470439801448, 9.999999999998899e-05, 0.07641430571091956, 0.13140806986251286, 0.043494211566714736, 0.08343000060860761, 0.116226985790025, 0.10731798129255699, 0.10941224408778949, 0.10291613590226611, 0.08271162746204752, 0.06432418962530229, 0.1300649669908429, 0.12135829582285584, 0.0813409510716665, 0.09224125122232985, 0.0914254959800761, 0.10586168954195618, 0.08716349410236468, 0.09878274866000081, 0.9706925328135221, 0.8869705645055805, 0.1637534469765567, 0.9440710845676454, 0.2803035405024973, 0.8864480953248166, 0.9701929223693139, 0.9418658912852818, 0.9784101365172685, 0.3336125122578314, 0.33158737808111405, 0.35191223442672104, 0.3209434956233277, 0.32107291725458165, 0.33096592028494043, 0.3468844997156538, 0.35308140236118934, 0.3463065602134284, 0.3430714728234391, 0.23472800625312618, 0.21882338344483088, 0.8580009623398142, 0.2113203304648671, 0.37883334154222315, 0.3234225240941542, 0.23383913393904343, 0.40133205254932014, 0.2434780047351579, 0.17070471303991508, 0.1932866335921355, 0.22382730291647346, 0.1447771743439238, 0.18747682969382895, 0.22974298341339072, 0.17515117590711293, 0.26319220422402045, 0.19870116887696887, 0.13787255878808025, 0.22684867041388956, 0.18328224085842737, 0.16423168211752348, 0.20134857863444156, 0.17134295693763668, 0.18438229266972195, 0.17451174073777587, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018158037571627261, 0.009477109016604257, 9.999999999998899e-05, 0.08211205923376308, 0.048722868667336994, 9.999999999998899e-05, 0.011090389687192115, 0.06258454664052682, 0.03698772270329376, 0.10221607248581677, 0.08282002804344668, 0.024521510068935326, 0.01602472697805446, 0.09836426272780285, 0.020774160746606096, 0.10339340962487475, 0.07179820529421921, 0.021487889238602786, 0.058255452394621154, 0.04430172392771692, 0.0042909902984525905, 0.021253599048135174, 0.011337806549516993, 9.999999999998899e-05, 0.07396642474712645, 0.11905670432691662, 0.1399303411296583, 0.12389701113465745, 0.13787944829766074, 0.12980219108454727, 0.1385248740206957, 0.12633331751966237, 0.14864673113164317, 0.15759078850784314, 0.4491988954498235, 0.43181686706586564, 0.44945078239120284, 0.43305748020736134, 0.4224152563653175, 0.4480640528983395, 0.46296626802062246, 0.4416642960458288, 0.4411387090423501, 0.10749812929147462, 0.10667475783844038, 0.11326513996061438, 0.13131927578385183, 0.08707572155293453, 0.12159422671007036, 0.12101958617520936, 0.13734143001731336, 0.07801657845429688, 0.26411878652454623, 0.18224895010201425, 0.297696415690207, 0.27763274981929065, 0.2470997893519553, 0.2514481817582186, 0.27493766920382334, 0.23949290742417528, 0.23741578445390155, 0.30375802157283704, 0.28939431575216346, 0.2946762089478472, 0.2815887738107088, 0.28641532091905086, 0.18433968454335747, 0.2919354823692515, 0.215225912504878, 0.12291719686718605, 0.22286066661885628, 0.23205270454809734, 0.22553645073562023, 0.2536256700359866, 0.21399690290404938, 0.11594515461869848, 0.23786364760670198, 0.13110561433768197, 0.05898220484263361, 0.1610590832910921, 0.2369143495578433, 0.2354771418748004, 0.21210960498449993, 0.2638312100711365, 0.1878442488931289, 0.23401323139797248, 0.19726458636953226, 0.2090208744623967, 0.19620612466832033, 0.19552247602334605, 0.19829185220890733, 0.23022989352158596, 0.22371544460274229, 0.20807940969333627, 0.19534459430997975, 0.18672925693244546, 0.19030299678348017, 0.12329329218977836, 0.13725399565351803, 0.09952727804734873, 0.17359946183675345, 0.11281008860512842, 0.06201908766956343, 0.10880865951242669, 0.12719957772871804, 0.1686643241710193, 0.6201419387451736, 0.11313963785210923, 0.08307648450160598, 0.1697397380576522, 0.21322506018108744, 0.21303918353597462, 0.5247955835222318, 0.16848162018652202, 0.46258549229761914, 0.20134521764832658, 0.1915160994729619, 0.21415256592097986, 0.1890501609774442, 0.21390300069015622, 0.18019156767168443, 0.21399746669510145, 0.2123805383395022, 0.20094196110722773, 0.0833916327129155, 0.10078546954540835, 0.08579893007535522, 0.09610097070354018, 0.08258092075941581, 0.11090481682498743, 0.12005962947152582, 0.07769841309007153, 0.08817502036313418]}, "mutation_prompt": null}
{"id": "98b2136c-abeb-42cf-a303-aec4ce658659", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            fitness_improvement_rate = (best_fitness - new_fitnesses) / best_fitness\n            combined_solution = best_solution + self.step_size * np.dot(fitness_improvement_rate, (global_best_solution - best_solution))\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic step size adjustment strategy based on the combined fitness improvement rates of individual solutions to accelerate convergence.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('shapes (10,) and (5,) not aligned: 10 (dim 0) != 5 (dim 0)').", "error": "ValueError('shapes (10,) and (5,) not aligned: 10 (dim 0) != 5 (dim 0)')", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {}, "mutation_prompt": null}
{"id": "4ff5a9fc-3a3a-4999-a2cb-a1ade3857e59", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99 - 0.088  # Adjust mutation probability based on exploration rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98 - 0.088  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement adaptive mutation probability to dynamically adjust the exploration-exploitation trade-off during optimization.", "configspace": "", "generation": 84, "fitness": 0.1282433298737491, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.526975086020005, 0.5668472344842618, 0.529505497637512, 0.23273531521050872, 0.24413198389128998, 0.2901727687138862, 0.4405872638239887, 0.6851110965201499, 0.2715858889885452, 0.0025205654720753534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005796187121990259, 9.999999999998899e-05, 9.999999999998899e-05, 0.0933029462694025, 0.0019255263917875576, 0.02212953254805905, 0.030479002205205497, 0.04596739124268967, 0.02727522652664538, 0.03609918958565772, 0.04225535519773749, 0.04028553293792625, 0.09264213556685774, 0.013190223954783642, 0.037007268820369754, 0.05587594481123359, 9.999999999998899e-05, 0.04441472268721902, 0.04107850061712326, 9.999999999998899e-05, 0.06216007628016651, 0.09094297381569705, 0.04850430593855304, 0.06433755375466332, 0.06381252658875924, 0.06524480218467599, 0.05818974547325595, 0.06656151082335149, 0.07110947625035591, 0.06546308042274684, 0.11840473157274789, 0.015065434488053864, 0.019196289187116578, 0.11071029498616713, 0.40376504726577245, 0.06129915017066201, 0.10153968768165322, 9.999999999998899e-05, 0.2782660179266184, 0.16894882686090895, 0.1030351313270661, 0.08172187916870044, 0.21597026093209204, 0.03323954578610433, 0.06783551159046997, 0.23899897339592602, 0.10111635706271827, 0.04912891965524746, 0.0444839598459601, 0.1794768241212229, 0.14966451477804676, 9.999999999998899e-05, 0.15287667309465092, 0.008348781227017987, 0.2759730663644526, 0.07595959945970987, 0.14225265777644946, 0.22752553898843686, 0.1536826875689269, 0.12410861043445542, 0.19688359322301907, 0.36278858415868864, 0.13801955228277818, 0.134770434967576, 0.12320982689399318, 0.13172418849636436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07685830000070915, 9.999999999998899e-05, 0.011440476490643947, 9.999999999998899e-05, 9.999999999998899e-05, 0.0945966868123107, 0.06766077060955866, 0.14944753613433126, 0.07627340528799209, 0.016592539426222408, 0.024204634506312273, 0.09467084692036665, 0.01552442527868747, 0.05038673670668525, 0.051691229476308, 0.0024257916514865974, 9.999999999998899e-05, 0.020303247596880625, 0.05029379297249392, 9.999999999998899e-05, 9.999999999998899e-05, 0.12260380563560047, 9.999999999998899e-05, 9.999999999998899e-05, 0.01787408548366909, 9.999999999998899e-05, 0.03779561710421042, 0.16700552515242473, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1458358078211528, 0.4281563455805715, 0.2466615474983177, 0.4179982849009888, 0.29671661775048497, 0.17673809029923682, 0.09523399808427513, 0.4886807156520834, 0.5165060829080265, 0.5002386745326456, 0.0784819650874713, 9.999999999998899e-05, 9.999999999998899e-05, 0.027868214433428684, 0.07102175994052318, 0.03268746932537103, 0.04799771842887479, 0.11831373822420699, 0.03635483090383773, 0.21809988915302259, 0.3305175412430602, 0.14642174364530947, 0.27187073662137995, 0.29281899885232876, 0.3133027268137558, 0.1661475987120029, 0.3290621979923065, 0.2945205373453308, 0.16781791948797053, 0.19037022294648065, 0.12383002104618612, 0.21566747851702528, 0.16756735809909895, 0.12966873825848946, 0.15107334442284714, 0.11855610451573106, 0.10545363440934907, 0.1375073748147535, 0.08715007041310707, 0.041990411478591505, 0.24145764514340262, 0.099819721421049, 0.1252744199775172, 0.17845922976953332, 0.0507585260885246, 0.022607525412068008, 0.2027685758303912, 0.16608477349371953, 0.16501596542611785, 0.16259459670404375, 0.19269220134883913, 0.1881797080406712, 0.1720921425978308, 0.1636755731643874, 0.16961626228693016, 0.19673986079880568, 0.17106953174830763, 0.17161094797559306, 0.17518239518878742, 0.1919867132415397, 0.1757403829615094, 0.16949593579046973, 0.16426025133709643, 0.1648925141996902, 0.1236455391172574, 0.13766332546506654, 0.08149753106740754, 0.17368101366361077, 0.1127318623543615, 0.06202419145971705, 0.1089246407332306, 0.11529753859290726, 0.1678928912437614, 0.09391320921450408, 0.11357860575615941, 0.08294931265612593, 0.16899591023418814, 0.21031109984188512, 0.15686009618721053, 0.3809578415586026, 0.05921241609030803, 0.16202184647293894, 0.24235272550519227, 0.21394734835255735, 0.19549479465114206, 0.20079585933333943, 0.20807634261849528, 0.1850513971602875, 0.2598652946350585, 0.22349832473921138, 0.23045396854682065, 0.06923741861024613, 0.13279483277127657, 0.041890757160484515, 0.07488050687199688, 0.02632745910956913, 0.08725338251680947, 0.05972243520216325, 0.04428116519990166, 0.07394698157354618]}, "mutation_prompt": null}
{"id": "63254d69-0ec0-4046-aeba-e67d375c3086", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                best_solution = np.clip(best_solution + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n                best_fitness = func(best_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic step size adjustment strategy based on a combination of individual and global best solutions to enhance convergence speed.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.45739008444524676, 0.5138930607252268, 0.5029222375888969, 0.4900119886665809, 0.5117638765345158, 0.5181597211724165, 0.4905887582572753, 0.5248974462116154, 0.5060918042809228, 0.008647916376269826, 0.11602907603841706, 9.999999999998899e-05, 0.04948268612807183, 0.015613310859657226, 9.999999999998899e-05, 0.06080555139846999, 0.0324466620573276, 9.999999999998899e-05, 0.11165728079356918, 0.1131863198210149, 0.11464799654211433, 0.09480361498400558, 0.0948660730935893, 0.0737104755844602, 0.08063382154186471, 0.1077177100263681, 0.13220088289483323, 0.09306163630516262, 0.09103828614509135, 0.073250060466586, 0.09634312975219672, 0.085915105742983, 0.09711226219646274, 0.10265405623101909, 0.10344518263095293, 0.08579575067654388, 0.9594345647457962, 0.9648585852863407, 0.9255598125192915, 0.9200215710897316, 0.9516436076800208, 0.9252995765969191, 0.9511580822004331, 0.9618524376684104, 0.9677804281652652, 0.34828229572195835, 0.35660976658025456, 0.3374019450862453, 0.3333300205364581, 0.34487755465157954, 0.3376859875593986, 0.350665900084835, 0.3284876522009158, 0.3470077006461656, 0.6560634513283745, 0.22623836041602274, 0.22254963473583822, 0.3591922230821848, 0.408996040606993, 0.8552173048371612, 0.3679300983226008, 0.4101367345550866, 0.23137865355306253, 0.226631338487972, 0.20499583915481756, 0.24921187476443096, 0.1817897951582077, 0.18779156768131677, 0.20676382770705914, 0.19267339980928067, 0.21329334073237394, 0.20628423462769452, 0.18378929619768192, 0.2306386070640144, 0.18528803393093596, 0.1854235071043029, 0.19670718884945027, 0.16606492353438695, 0.1693841673954084, 0.21223235057304313, 0.18669610459312624, 0.05592610649949259, 0.010627224040500316, 0.04192215005622402, 0.0016657834700517515, 0.05436867998027595, 9.999999999998899e-05, 0.007625461435360914, 0.1016879082254365, 9.999999999998899e-05, 0.08415969223433983, 0.06558220776212043, 0.10455273725737113, 0.05649258085026154, 0.055310022205257714, 0.02745479487804603, 0.09110677488479779, 0.021850350663602303, 0.04557059994913992, 0.020107821248305457, 0.036521391341038933, 0.009492895308879978, 0.022838505557879807, 0.05439389910149417, 0.008990772185404783, 0.010417184089380305, 0.06538765335149799, 0.035375507885638036, 0.15698897123668887, 0.12543940065707648, 0.13438480492437377, 0.13596951895550935, 0.16758691304261153, 0.1521510221047616, 0.1379513934024511, 0.12713143025830376, 0.12630454995413565, 0.44088549646604724, 0.460181661225164, 0.42140665427017787, 0.44482651533271433, 0.46258942923363167, 0.41330295913122594, 0.4288920678847298, 0.4808246413999736, 0.43268181939817696, 0.11204990355726041, 0.08267081632932327, 0.10042837258130999, 0.12063974797037902, 0.12896976186366316, 0.07413804321006734, 0.0916800461331011, 0.11842503338851218, 0.14687052400826228, 0.26600134821314436, 0.24808129262487233, 0.17668460146901455, 0.22115076059057848, 0.2935075478740913, 0.2883766647414081, 0.29019196744118303, 0.21338912160986967, 0.2608970685153025, 0.30786153428499574, 0.2975890905083082, 0.1462148511009771, 0.3138285502597674, 0.30148468110013615, 0.1448108504276312, 0.30267552042918333, 0.21334618102923675, 0.10636721957629636, 0.2546597600201481, 0.20557553507190884, 0.20053809593105465, 0.25260568834129016, 0.23500598338489576, 0.12030583460548228, 0.19025805194507106, 0.16096412220398748, 0.08061844649063299, 0.20260179167516568, 0.22604564614727285, 0.21719381063238863, 0.19249418194959533, 0.21767929741437486, 0.1913255209520539, 0.21130091405874996, 0.2232102660215809, 0.17648137378823125, 0.3251515710914986, 0.21995470956422047, 0.1938006341923637, 0.200151469021845, 0.1840854011099493, 0.2002926681552618, 0.20259170503279544, 0.19298039274558165, 0.20119981210259885, 0.12325351094318737, 0.13709183828750116, 0.7833600739410311, 0.17322398414696505, 0.11293811585843128, 0.06197993321810169, 0.10882996612277673, 0.11521485717998026, 0.16922871720640975, 0.7319992843804018, 0.11354873951331412, 0.083068607139692, 0.06540673466511615, 0.21318104531871318, 0.21283624681598867, 0.6597465566021914, 0.16907822429635166, 0.4968603742770231, 0.20899783330294086, 0.1942465332628931, 0.19982419678465613, 0.20621609964575005, 0.20204163096451688, 0.19072101267098862, 0.20895759898671162, 0.1938653092941539, 0.20372828101770302, 0.09049117456120859, 0.13573659962763962, 0.07111794894616319, 0.07232495585965604, 0.08665511211279187, 0.07749189826383063, 0.09435100165786992, 0.0762234365230382, 0.07723221661291702]}, "mutation_prompt": null}
{"id": "5277b0c4-32a6-44ad-859e-ec551ee64e7d", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                mutation_scale = 0.1\n                rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                best_fitness = func(mutated_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic step size adjustment strategy based on a combination of individual and global best solutions to enhance convergence speed by incorporating a differential evolution-like mutation mechanism.", "configspace": "", "generation": 86, "fitness": 0.24966435982957158, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "9108c718-aef0-45e4-8ae7-7cc5afeea074", "metadata": {"aucs": [0.6002006880622432, 0.6090416430784389, 0.5860806432028483, 0.6050049286005992, 0.657628531899757, 0.6093066997071662, 0.5889218956952473, 0.6421074504969877, 0.6037671264475258, 0.08928672234410828, 0.006294656988344971, 0.00709112467228501, 0.10108989819852054, 9.999999999998899e-05, 9.999999999998899e-05, 0.024558617169832875, 0.07366936044797845, 9.999999999998899e-05, 0.10486569165321946, 0.08647094100238661, 0.1011757578583995, 0.09189536038400037, 0.1125978500531879, 0.06336561309349165, 0.1093279993714561, 0.08337368811329582, 0.12749450762239445, 0.09148683992720053, 0.11269025924506293, 0.09589311412022106, 0.10120400448269151, 0.08187946198702889, 0.12973811244515987, 0.10867794923269447, 0.14907129360972682, 0.11634364837739175, 0.962562686867425, 0.947666453453837, 0.9452940347281562, 0.9547083777307592, 0.9507640496108062, 0.9044707049624532, 0.9504258486987592, 0.9656446501945983, 0.9775971656957276, 0.4556856762820164, 0.4525089821775249, 0.4661941028773824, 0.4762738750617297, 0.4337788482827496, 0.46402478902742117, 0.4669425146871763, 0.47408208538383656, 0.4508328693457151, 0.2769793045445845, 0.19405608590266388, 0.22377230607379328, 0.30368380099203474, 0.8507268452520397, 0.3727794927883048, 0.3216852989662258, 0.7515676292760856, 0.25861056410975836, 0.24875582178693867, 0.2461572427005453, 0.2036986967035267, 0.23913152429511353, 0.25870284494749207, 0.2522458518310261, 0.24422390588080445, 0.24272398358304215, 0.23811166719223276, 0.2286165066585526, 0.2251701364571862, 0.13244608316401796, 0.22860396912257175, 0.20242389006399686, 0.21746199679484446, 0.13654357550897345, 0.14440515916606345, 0.24304427646792293, 0.0010280507550878282, 0.023226269121079945, 9.999999999998899e-05, 0.02225992209883665, 0.04525455947590673, 0.043339408384400535, 9.999999999998899e-05, 0.0891687909609733, 0.07285324791386227, 0.12246615515685932, 0.05561902328954005, 0.10446065298973772, 0.09107143454305133, 0.011706974953084481, 0.0598629029627622, 0.158489741283649, 0.06652387115158798, 0.034894581019271564, 0.04055817132119577, 0.0492120222042407, 0.05360886191638403, 0.06457629916975871, 0.11384495460021649, 0.08645274347333509, 0.03187848634095658, 0.07581032998624038, 0.07413037555458901, 0.11849634962809319, 0.20826697444954778, 0.09930934556097637, 0.1436288266207384, 0.16690838137148567, 0.18167204350050625, 0.16037425609708555, 0.23073236375712425, 0.16939129441822065, 0.5043076396746364, 0.49624017446464774, 0.49631324552903877, 0.5291155557134395, 0.488625220092049, 0.5096273393395165, 0.509465713429861, 0.5191904912854945, 0.5107407186934471, 0.11238406454776972, 0.12825534889993928, 0.1539050715385687, 0.07376099785221812, 0.09220315032838367, 0.10184114032530323, 0.07938336599997364, 0.12678457462327586, 0.11343931174984445, 0.38385017835398305, 0.20703479393148594, 0.39394729119180205, 0.3625601603019972, 0.2080255896071388, 0.3884117884982037, 0.40350713988496534, 0.18344022884215339, 0.3902120313074052, 0.33592708537800164, 0.3421521559789087, 0.15131938670295242, 0.38199110573803674, 0.22426566032452921, 0.35958917888585007, 0.36248394834374353, 0.3360308492508367, 0.11463645637871889, 0.2804885754032219, 0.10292667624933294, 0.11722680352192527, 0.30403107659543294, 0.18525389735066633, 0.28798403570430864, 0.23087806105041486, 0.15806709015396703, 0.08293247106938906, 0.26365287782195646, 0.18032969677670263, 0.2202820371637485, 0.1916094599584508, 0.18354851737006095, 0.25470327760492195, 0.21805331959892205, 0.22332265270206753, 0.19318217122822545, 0.1866735892745507, 0.19835461733882376, 0.2088256492988778, 0.18681202856273416, 0.18142639833008867, 0.1920348512090292, 0.1830367162651052, 0.1923800571019889, 0.187318731612366, 0.12347179284201826, 0.1368874566484739, 0.0989373156957497, 0.17353837727465216, 0.11292909625290537, 0.06200466765587065, 0.10882444071945296, 0.11521290244941462, 0.16905653818096822, 0.0941798077140007, 0.11300746108984183, 0.08310951198873717, 0.16971643639703493, 0.2126927148113179, 0.2132264103933088, 0.8456024879667252, 0.16722268633910586, 0.7619933860191929, 0.2215857543884131, 0.2044169512859707, 0.20252986257560424, 0.21625232871429578, 0.20740643460400754, 0.20621566105516087, 0.22686671858315466, 0.20879101378977516, 0.2190106460959168, 0.08211904418417615, 0.1443249246546766, 0.10675226615055067, 0.09902396772995359, 0.06626728052047126, 0.08979905321451986, 0.1144072618103914, 0.06604208179186621, 0.0848075713746923]}, "mutation_prompt": null}
{"id": "2489ba21-8cd7-4605-9773-2ad7792c0263", "solution": "from concurrent.futures import ThreadPoolExecutor\n\nclass ParallelPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                if np.random.rand() < mutation_prob:  \n                    mutation_scale = 0.1\n                    rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                    best_fitness = func(mutated_solution)\n                    mutation_prob *= 0.99  \n                    self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                    \n                steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n                new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n                \n                def evaluate(sol):\n                    return func(sol)\n                \n                new_fitnesses = np.array(list(executor.map(evaluate, new_solutions)))\n                \n                min_idx = np.argmin(new_fitnesses)\n                if new_fitnesses[min_idx] < best_fitness:\n                    best_solution = new_solutions[min_idx]\n                    best_fitness = new_fitnesses[min_idx]\n                    self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                    \n                global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n                combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n                combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n                combined_fitness = func(combined_solution)\n                \n                if combined_fitness < best_fitness:\n                    best_solution = combined_solution\n                    best_fitness = combined_fitness\n        \n        return best_solution", "name": "ParallelPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Introduce a parallel processing strategy to evaluate multiple candidate solutions simultaneously, enhancing convergence speed.", "configspace": "", "generation": 87, "fitness": 0.24966435982957158, "feedback": "The algorithm ParallelPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "5277b0c4-32a6-44ad-859e-ec551ee64e7d", "metadata": {"aucs": [0.6002006880622432, 0.6090416430784389, 0.5860806432028483, 0.6050049286005992, 0.657628531899757, 0.6093066997071662, 0.5889218956952473, 0.6421074504969877, 0.6037671264475258, 0.08928672234410828, 0.006294656988344971, 0.00709112467228501, 0.10108989819852054, 9.999999999998899e-05, 9.999999999998899e-05, 0.024558617169832875, 0.07366936044797845, 9.999999999998899e-05, 0.10486569165321946, 0.08647094100238661, 0.1011757578583995, 0.09189536038400037, 0.1125978500531879, 0.06336561309349165, 0.1093279993714561, 0.08337368811329582, 0.12749450762239445, 0.09148683992720053, 0.11269025924506293, 0.09589311412022106, 0.10120400448269151, 0.08187946198702889, 0.12973811244515987, 0.10867794923269447, 0.14907129360972682, 0.11634364837739175, 0.962562686867425, 0.947666453453837, 0.9452940347281562, 0.9547083777307592, 0.9507640496108062, 0.9044707049624532, 0.9504258486987592, 0.9656446501945983, 0.9775971656957276, 0.4556856762820164, 0.4525089821775249, 0.4661941028773824, 0.4762738750617297, 0.4337788482827496, 0.46402478902742117, 0.4669425146871763, 0.47408208538383656, 0.4508328693457151, 0.2769793045445845, 0.19405608590266388, 0.22377230607379328, 0.30368380099203474, 0.8507268452520397, 0.3727794927883048, 0.3216852989662258, 0.7515676292760856, 0.25861056410975836, 0.24875582178693867, 0.2461572427005453, 0.2036986967035267, 0.23913152429511353, 0.25870284494749207, 0.2522458518310261, 0.24422390588080445, 0.24272398358304215, 0.23811166719223276, 0.2286165066585526, 0.2251701364571862, 0.13244608316401796, 0.22860396912257175, 0.20242389006399686, 0.21746199679484446, 0.13654357550897345, 0.14440515916606345, 0.24304427646792293, 0.0010280507550878282, 0.023226269121079945, 9.999999999998899e-05, 0.02225992209883665, 0.04525455947590673, 0.043339408384400535, 9.999999999998899e-05, 0.0891687909609733, 0.07285324791386227, 0.12246615515685932, 0.05561902328954005, 0.10446065298973772, 0.09107143454305133, 0.011706974953084481, 0.0598629029627622, 0.158489741283649, 0.06652387115158798, 0.034894581019271564, 0.04055817132119577, 0.0492120222042407, 0.05360886191638403, 0.06457629916975871, 0.11384495460021649, 0.08645274347333509, 0.03187848634095658, 0.07581032998624038, 0.07413037555458901, 0.11849634962809319, 0.20826697444954778, 0.09930934556097637, 0.1436288266207384, 0.16690838137148567, 0.18167204350050625, 0.16037425609708555, 0.23073236375712425, 0.16939129441822065, 0.5043076396746364, 0.49624017446464774, 0.49631324552903877, 0.5291155557134395, 0.488625220092049, 0.5096273393395165, 0.509465713429861, 0.5191904912854945, 0.5107407186934471, 0.11238406454776972, 0.12825534889993928, 0.1539050715385687, 0.07376099785221812, 0.09220315032838367, 0.10184114032530323, 0.07938336599997364, 0.12678457462327586, 0.11343931174984445, 0.38385017835398305, 0.20703479393148594, 0.39394729119180205, 0.3625601603019972, 0.2080255896071388, 0.3884117884982037, 0.40350713988496534, 0.18344022884215339, 0.3902120313074052, 0.33592708537800164, 0.3421521559789087, 0.15131938670295242, 0.38199110573803674, 0.22426566032452921, 0.35958917888585007, 0.36248394834374353, 0.3360308492508367, 0.11463645637871889, 0.2804885754032219, 0.10292667624933294, 0.11722680352192527, 0.30403107659543294, 0.18525389735066633, 0.28798403570430864, 0.23087806105041486, 0.15806709015396703, 0.08293247106938906, 0.26365287782195646, 0.18032969677670263, 0.2202820371637485, 0.1916094599584508, 0.18354851737006095, 0.25470327760492195, 0.21805331959892205, 0.22332265270206753, 0.19318217122822545, 0.1866735892745507, 0.19835461733882376, 0.2088256492988778, 0.18681202856273416, 0.18142639833008867, 0.1920348512090292, 0.1830367162651052, 0.1923800571019889, 0.187318731612366, 0.12347179284201826, 0.1368874566484739, 0.0989373156957497, 0.17353837727465216, 0.11292909625290537, 0.06200466765587065, 0.10882444071945296, 0.11521290244941462, 0.16905653818096822, 0.0941798077140007, 0.11300746108984183, 0.08310951198873717, 0.16971643639703493, 0.2126927148113179, 0.2132264103933088, 0.8456024879667252, 0.16722268633910586, 0.7619933860191929, 0.2215857543884131, 0.2044169512859707, 0.20252986257560424, 0.21625232871429578, 0.20740643460400754, 0.20621566105516087, 0.22686671858315466, 0.20879101378977516, 0.2190106460959168, 0.08211904418417615, 0.1443249246546766, 0.10675226615055067, 0.09902396772995359, 0.06626728052047126, 0.08979905321451986, 0.1144072618103914, 0.06604208179186621, 0.0848075713746923]}, "mutation_prompt": null}
{"id": "1dd6b490-0606-40ba-ab7a-1e345b3b7d60", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        population_size = 10\n        \n        for _ in range(self.budget):\n            if np.random.rand() < mutation_prob:  \n                mutation_scale = 0.1\n                rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                best_fitness = func(mutated_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic step size adjustment strategy based on a combination of individual and global best solutions to enhance convergence speed by incorporating a differential evolution-like mutation mechanism.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5277b0c4-32a6-44ad-859e-ec551ee64e7d", "metadata": {"aucs": [0.6002006880622432, 0.6090416430784389, 0.5860806432028483, 0.6050049286005992, 0.657628531899757, 0.6093066997071662, 0.5889218956952473, 0.6421074504969877, 0.6037671264475258, 0.08928672234410828, 0.006294656988344971, 0.00709112467228501, 0.10108989819852054, 9.999999999998899e-05, 9.999999999998899e-05, 0.024558617169832875, 0.07366936044797845, 9.999999999998899e-05, 0.10486569165321946, 0.08647094100238661, 0.1011757578583995, 0.09189536038400037, 0.1125978500531879, 0.06336561309349165, 0.1093279993714561, 0.08337368811329582, 0.12749450762239445, 0.09148683992720053, 0.11269025924506293, 0.09589311412022106, 0.10120400448269151, 0.08187946198702889, 0.12973811244515987, 0.10867794923269447, 0.14907129360972682, 0.11634364837739175, 0.962562686867425, 0.947666453453837, 0.9452940347281562, 0.9547083777307592, 0.9507640496108062, 0.9044707049624532, 0.9504258486987592, 0.9656446501945983, 0.9775971656957276, 0.4556856762820164, 0.4525089821775249, 0.4661941028773824, 0.4762738750617297, 0.4337788482827496, 0.46402478902742117, 0.4669425146871763, 0.47408208538383656, 0.4508328693457151, 0.2769793045445845, 0.19405608590266388, 0.22377230607379328, 0.30368380099203474, 0.8507268452520397, 0.3727794927883048, 0.3216852989662258, 0.7515676292760856, 0.25861056410975836, 0.24875582178693867, 0.2461572427005453, 0.2036986967035267, 0.23913152429511353, 0.25870284494749207, 0.2522458518310261, 0.24422390588080445, 0.24272398358304215, 0.23811166719223276, 0.2286165066585526, 0.2251701364571862, 0.13244608316401796, 0.22860396912257175, 0.20242389006399686, 0.21746199679484446, 0.13654357550897345, 0.14440515916606345, 0.24304427646792293, 0.0010280507550878282, 0.023226269121079945, 9.999999999998899e-05, 0.02225992209883665, 0.04525455947590673, 0.043339408384400535, 9.999999999998899e-05, 0.0891687909609733, 0.07285324791386227, 0.12246615515685932, 0.05561902328954005, 0.10446065298973772, 0.09107143454305133, 0.011706974953084481, 0.0598629029627622, 0.158489741283649, 0.06652387115158798, 0.034894581019271564, 0.04055817132119577, 0.0492120222042407, 0.05360886191638403, 0.06457629916975871, 0.11384495460021649, 0.08645274347333509, 0.03187848634095658, 0.07581032998624038, 0.07413037555458901, 0.11849634962809319, 0.20826697444954778, 0.09930934556097637, 0.1436288266207384, 0.16690838137148567, 0.18167204350050625, 0.16037425609708555, 0.23073236375712425, 0.16939129441822065, 0.5043076396746364, 0.49624017446464774, 0.49631324552903877, 0.5291155557134395, 0.488625220092049, 0.5096273393395165, 0.509465713429861, 0.5191904912854945, 0.5107407186934471, 0.11238406454776972, 0.12825534889993928, 0.1539050715385687, 0.07376099785221812, 0.09220315032838367, 0.10184114032530323, 0.07938336599997364, 0.12678457462327586, 0.11343931174984445, 0.38385017835398305, 0.20703479393148594, 0.39394729119180205, 0.3625601603019972, 0.2080255896071388, 0.3884117884982037, 0.40350713988496534, 0.18344022884215339, 0.3902120313074052, 0.33592708537800164, 0.3421521559789087, 0.15131938670295242, 0.38199110573803674, 0.22426566032452921, 0.35958917888585007, 0.36248394834374353, 0.3360308492508367, 0.11463645637871889, 0.2804885754032219, 0.10292667624933294, 0.11722680352192527, 0.30403107659543294, 0.18525389735066633, 0.28798403570430864, 0.23087806105041486, 0.15806709015396703, 0.08293247106938906, 0.26365287782195646, 0.18032969677670263, 0.2202820371637485, 0.1916094599584508, 0.18354851737006095, 0.25470327760492195, 0.21805331959892205, 0.22332265270206753, 0.19318217122822545, 0.1866735892745507, 0.19835461733882376, 0.2088256492988778, 0.18681202856273416, 0.18142639833008867, 0.1920348512090292, 0.1830367162651052, 0.1923800571019889, 0.187318731612366, 0.12347179284201826, 0.1368874566484739, 0.0989373156957497, 0.17353837727465216, 0.11292909625290537, 0.06200466765587065, 0.10882444071945296, 0.11521290244941462, 0.16905653818096822, 0.0941798077140007, 0.11300746108984183, 0.08310951198873717, 0.16971643639703493, 0.2126927148113179, 0.2132264103933088, 0.8456024879667252, 0.16722268633910586, 0.7619933860191929, 0.2215857543884131, 0.2044169512859707, 0.20252986257560424, 0.21625232871429578, 0.20740643460400754, 0.20621566105516087, 0.22686671858315466, 0.20879101378977516, 0.2190106460959168, 0.08211904418417615, 0.1443249246546766, 0.10675226615055067, 0.09902396772995359, 0.06626728052047126, 0.08979905321451986, 0.1144072618103914, 0.06604208179186621, 0.0848075713746923]}, "mutation_prompt": null}
{"id": "e3c1a918-3448-4afc-8f17-a7d5dc6eb9be", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            population_size = np.clip(int(10 + np.random.randn()), 1, 20)  # Dynamic population size adjustment\n            if np.random.rand() < mutation_prob:  \n                mutation_scale = 0.1\n                rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                best_fitness = func(mutated_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic population size adjustment strategy to optimize the algorithm's convergence speed.", "configspace": "", "generation": 89, "fitness": 0.25743508410832044, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "5277b0c4-32a6-44ad-859e-ec551ee64e7d", "metadata": {"aucs": [0.6115066890917789, 0.6261452789445074, 0.6238345508751961, 0.6174310832890972, 0.6441054280317691, 0.6539620281227437, 0.6254244356504869, 0.6120858346037432, 0.6148686166825902, 0.03276851910769352, 0.04283876522040064, 9.999999999998899e-05, 0.05209121943863826, 0.034672645015252024, 9.999999999998899e-05, 0.018051269989687757, 0.08868011119351249, 9.999999999998899e-05, 0.08752990565061014, 0.14108578010065376, 0.1195963397566806, 0.09961894330952559, 0.12221665963353823, 0.13931946183804889, 0.10269525575443617, 0.10956135845707671, 0.08055356745146003, 0.07991066051380202, 0.0941055637929572, 0.10915400171085199, 0.1135594957696332, 0.0813706313459246, 0.07983417676232929, 0.10047784163687246, 0.09785660925606587, 0.06338402457264214, 0.9788368592029786, 0.9071622548220396, 0.9444603402516394, 0.9536282933486295, 0.9460344087023679, 0.9531943846678441, 0.9628187980659311, 0.9670242784225491, 0.9752509111937079, 0.4638895076973918, 0.47822159724878677, 0.5182792150851021, 0.4650497264494384, 0.4736126244699158, 0.4700435912868607, 0.4944402127348537, 0.5204139428205937, 0.4974612938793209, 0.23735740126734406, 0.2246908008210139, 0.13613159949502096, 0.8225003900335435, 0.1905668404760017, 0.8687800889907491, 0.765543111458784, 0.26832674903545517, 0.26013592316184786, 0.2475408635625469, 0.22728852905525565, 0.23025108892011326, 0.24578938279514062, 0.24036514029991063, 0.24125809521584307, 0.23628256288659244, 0.24417012857496123, 0.23692188576534823, 0.23946836962027795, 0.239923466560939, 0.132159412924161, 0.2520948136513773, 0.2471980922112863, 0.23300670164472836, 0.23935474365483056, 0.2405075686226662, 0.3045963225932765, 0.06627637913011764, 0.016257760282825107, 0.002812676173570061, 0.11991414298075798, 0.049152274968137344, 0.003629143621332709, 0.05651683284471487, 9.999999999998899e-05, 0.022614744173534596, 0.09591911945109166, 0.05504311108081206, 0.10334920187639296, 0.06957288215245772, 0.03566028144600075, 0.02948271569206462, 0.10115222402096447, 0.033645282597434156, 0.08514533082584252, 0.12293833296076884, 0.03292687503978342, 0.07891212475698517, 0.05112160605065752, 0.0648765315426546, 0.07599156786071248, 0.08086658154799553, 0.090618577807417, 0.053697486623348945, 0.18722056692100741, 0.1553993292503284, 0.13057459238165703, 0.18034537404641449, 0.1875677805123117, 0.1399647121946216, 0.15883716453238061, 0.18768957325769187, 0.16714105558873726, 0.5141332809658978, 0.509298116086414, 0.5106089874776061, 0.5181606218109598, 0.538961408659428, 0.5215793824680652, 0.5693390775138766, 0.537195449477698, 0.4904520807732249, 0.12788339597106335, 0.07757048708500369, 0.08705800340003211, 0.10730051621919079, 0.11377111846862131, 0.10977007575244802, 0.09096359162493028, 0.10913925502189137, 0.141914178583055, 0.3991177047589931, 0.1948472712682141, 0.20105056374083508, 0.418519701590808, 0.28073173604697266, 0.42532737252061936, 0.38025854841133844, 0.19335217571100893, 0.1889799863414925, 0.35520110669184657, 0.3766551634282381, 0.16300757568788793, 0.33298136195595684, 0.384087821515284, 0.15705828555142232, 0.37578026933902764, 0.2996166211701662, 0.17629628305161127, 0.307089358049469, 0.2512452014497366, 0.07498668015853871, 0.2647383662774825, 0.29073928226625645, 0.14350858331060623, 0.2784209808869007, 0.11440947326569673, 0.22351004430718135, 0.20424797813111284, 0.1835060308872838, 0.21494097113666089, 0.21194360777961263, 0.22036838916125412, 0.19778224418910562, 0.23531461573428814, 0.1712032861900692, 0.19848013815976906, 0.18704554859218392, 0.19738841963583165, 0.18905963059225206, 0.1747237002589518, 0.19632107397037957, 0.20213043454242563, 0.19897886017941113, 0.2023663648951166, 0.1877420627452785, 0.18935904154354732, 0.13703697786539104, 0.0980167298395549, 0.17342893469307796, 0.1125133597874507, 0.062050157028137654, 0.10872165547697843, 0.11529452477232716, 0.16853000489646675, 0.8029546170388124, 0.11335926904688476, 0.08313767134352423, 0.15713584865177943, 0.2138063495203958, 0.21111747368978084, 0.730454561870463, 0.16668967788633815, 0.7190163657193702, 0.22276133520719799, 0.23827938411575156, 0.23902114530467522, 0.2198833616692124, 0.23260605529441414, 0.21131536060755385, 0.20457587582030567, 0.21441041442344244, 0.2217243173302691, 0.09148081328756341, 0.12352788892499433, 0.07122918836508785, 0.07921013826297074, 0.05808498956105845, 0.1384267764253838, 0.14983435660854416, 0.08909948269995982, 0.10216115751186894]}, "mutation_prompt": null}
{"id": "d29079b4-2627-40c0-94c5-c408305285fd", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            population_size = np.clip(int(10 + np.random.randn()), 1, 20)  # Dynamic population size adjustment\n            if np.random.rand() < mutation_prob:  \n                mutation_scale = 0.1\n                rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                best_fitness = func(mutated_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic population size adjustment strategy to optimize the algorithm's convergence speed.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e3c1a918-3448-4afc-8f17-a7d5dc6eb9be", "metadata": {"aucs": [0.6115066890917789, 0.6261452789445074, 0.6238345508751961, 0.6174310832890972, 0.6441054280317691, 0.6539620281227437, 0.6254244356504869, 0.6120858346037432, 0.6148686166825902, 0.03276851910769352, 0.04283876522040064, 9.999999999998899e-05, 0.05209121943863826, 0.034672645015252024, 9.999999999998899e-05, 0.018051269989687757, 0.08868011119351249, 9.999999999998899e-05, 0.08752990565061014, 0.14108578010065376, 0.1195963397566806, 0.09961894330952559, 0.12221665963353823, 0.13931946183804889, 0.10269525575443617, 0.10956135845707671, 0.08055356745146003, 0.07991066051380202, 0.0941055637929572, 0.10915400171085199, 0.1135594957696332, 0.0813706313459246, 0.07983417676232929, 0.10047784163687246, 0.09785660925606587, 0.06338402457264214, 0.9788368592029786, 0.9071622548220396, 0.9444603402516394, 0.9536282933486295, 0.9460344087023679, 0.9531943846678441, 0.9628187980659311, 0.9670242784225491, 0.9752509111937079, 0.4638895076973918, 0.47822159724878677, 0.5182792150851021, 0.4650497264494384, 0.4736126244699158, 0.4700435912868607, 0.4944402127348537, 0.5204139428205937, 0.4974612938793209, 0.23735740126734406, 0.2246908008210139, 0.13613159949502096, 0.8225003900335435, 0.1905668404760017, 0.8687800889907491, 0.765543111458784, 0.26832674903545517, 0.26013592316184786, 0.2475408635625469, 0.22728852905525565, 0.23025108892011326, 0.24578938279514062, 0.24036514029991063, 0.24125809521584307, 0.23628256288659244, 0.24417012857496123, 0.23692188576534823, 0.23946836962027795, 0.239923466560939, 0.132159412924161, 0.2520948136513773, 0.2471980922112863, 0.23300670164472836, 0.23935474365483056, 0.2405075686226662, 0.3045963225932765, 0.06627637913011764, 0.016257760282825107, 0.002812676173570061, 0.11991414298075798, 0.049152274968137344, 0.003629143621332709, 0.05651683284471487, 9.999999999998899e-05, 0.022614744173534596, 0.09591911945109166, 0.05504311108081206, 0.10334920187639296, 0.06957288215245772, 0.03566028144600075, 0.02948271569206462, 0.10115222402096447, 0.033645282597434156, 0.08514533082584252, 0.12293833296076884, 0.03292687503978342, 0.07891212475698517, 0.05112160605065752, 0.0648765315426546, 0.07599156786071248, 0.08086658154799553, 0.090618577807417, 0.053697486623348945, 0.18722056692100741, 0.1553993292503284, 0.13057459238165703, 0.18034537404641449, 0.1875677805123117, 0.1399647121946216, 0.15883716453238061, 0.18768957325769187, 0.16714105558873726, 0.5141332809658978, 0.509298116086414, 0.5106089874776061, 0.5181606218109598, 0.538961408659428, 0.5215793824680652, 0.5693390775138766, 0.537195449477698, 0.4904520807732249, 0.12788339597106335, 0.07757048708500369, 0.08705800340003211, 0.10730051621919079, 0.11377111846862131, 0.10977007575244802, 0.09096359162493028, 0.10913925502189137, 0.141914178583055, 0.3991177047589931, 0.1948472712682141, 0.20105056374083508, 0.418519701590808, 0.28073173604697266, 0.42532737252061936, 0.38025854841133844, 0.19335217571100893, 0.1889799863414925, 0.35520110669184657, 0.3766551634282381, 0.16300757568788793, 0.33298136195595684, 0.384087821515284, 0.15705828555142232, 0.37578026933902764, 0.2996166211701662, 0.17629628305161127, 0.307089358049469, 0.2512452014497366, 0.07498668015853871, 0.2647383662774825, 0.29073928226625645, 0.14350858331060623, 0.2784209808869007, 0.11440947326569673, 0.22351004430718135, 0.20424797813111284, 0.1835060308872838, 0.21494097113666089, 0.21194360777961263, 0.22036838916125412, 0.19778224418910562, 0.23531461573428814, 0.1712032861900692, 0.19848013815976906, 0.18704554859218392, 0.19738841963583165, 0.18905963059225206, 0.1747237002589518, 0.19632107397037957, 0.20213043454242563, 0.19897886017941113, 0.2023663648951166, 0.1877420627452785, 0.18935904154354732, 0.13703697786539104, 0.0980167298395549, 0.17342893469307796, 0.1125133597874507, 0.062050157028137654, 0.10872165547697843, 0.11529452477232716, 0.16853000489646675, 0.8029546170388124, 0.11335926904688476, 0.08313767134352423, 0.15713584865177943, 0.2138063495203958, 0.21111747368978084, 0.730454561870463, 0.16668967788633815, 0.7190163657193702, 0.22276133520719799, 0.23827938411575156, 0.23902114530467522, 0.2198833616692124, 0.23260605529441414, 0.21131536060755385, 0.20457587582030567, 0.21441041442344244, 0.2217243173302691, 0.09148081328756341, 0.12352788892499433, 0.07122918836508785, 0.07921013826297074, 0.05808498956105845, 0.1384267764253838, 0.14983435660854416, 0.08909948269995982, 0.10216115751186894]}, "mutation_prompt": null}
{"id": "4acdaca9-0593-4ff4-91ba-6d8189b87604", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            population_size = np.clip(int(10 + np.random.randn()), 1, 20)  # Dynamic population size adjustment\n            if np.random.rand() < mutation_prob:  \n                mutation_scale = 0.1\n                rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                best_fitness = func(mutated_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic population size adjustment strategy to optimize the algorithm's convergence speed.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e3c1a918-3448-4afc-8f17-a7d5dc6eb9be", "metadata": {"aucs": [0.6115066890917789, 0.6261452789445074, 0.6238345508751961, 0.6174310832890972, 0.6441054280317691, 0.6539620281227437, 0.6254244356504869, 0.6120858346037432, 0.6148686166825902, 0.03276851910769352, 0.04283876522040064, 9.999999999998899e-05, 0.05209121943863826, 0.034672645015252024, 9.999999999998899e-05, 0.018051269989687757, 0.08868011119351249, 9.999999999998899e-05, 0.08752990565061014, 0.14108578010065376, 0.1195963397566806, 0.09961894330952559, 0.12221665963353823, 0.13931946183804889, 0.10269525575443617, 0.10956135845707671, 0.08055356745146003, 0.07991066051380202, 0.0941055637929572, 0.10915400171085199, 0.1135594957696332, 0.0813706313459246, 0.07983417676232929, 0.10047784163687246, 0.09785660925606587, 0.06338402457264214, 0.9788368592029786, 0.9071622548220396, 0.9444603402516394, 0.9536282933486295, 0.9460344087023679, 0.9531943846678441, 0.9628187980659311, 0.9670242784225491, 0.9752509111937079, 0.4638895076973918, 0.47822159724878677, 0.5182792150851021, 0.4650497264494384, 0.4736126244699158, 0.4700435912868607, 0.4944402127348537, 0.5204139428205937, 0.4974612938793209, 0.23735740126734406, 0.2246908008210139, 0.13613159949502096, 0.8225003900335435, 0.1905668404760017, 0.8687800889907491, 0.765543111458784, 0.26832674903545517, 0.26013592316184786, 0.2475408635625469, 0.22728852905525565, 0.23025108892011326, 0.24578938279514062, 0.24036514029991063, 0.24125809521584307, 0.23628256288659244, 0.24417012857496123, 0.23692188576534823, 0.23946836962027795, 0.239923466560939, 0.132159412924161, 0.2520948136513773, 0.2471980922112863, 0.23300670164472836, 0.23935474365483056, 0.2405075686226662, 0.3045963225932765, 0.06627637913011764, 0.016257760282825107, 0.002812676173570061, 0.11991414298075798, 0.049152274968137344, 0.003629143621332709, 0.05651683284471487, 9.999999999998899e-05, 0.022614744173534596, 0.09591911945109166, 0.05504311108081206, 0.10334920187639296, 0.06957288215245772, 0.03566028144600075, 0.02948271569206462, 0.10115222402096447, 0.033645282597434156, 0.08514533082584252, 0.12293833296076884, 0.03292687503978342, 0.07891212475698517, 0.05112160605065752, 0.0648765315426546, 0.07599156786071248, 0.08086658154799553, 0.090618577807417, 0.053697486623348945, 0.18722056692100741, 0.1553993292503284, 0.13057459238165703, 0.18034537404641449, 0.1875677805123117, 0.1399647121946216, 0.15883716453238061, 0.18768957325769187, 0.16714105558873726, 0.5141332809658978, 0.509298116086414, 0.5106089874776061, 0.5181606218109598, 0.538961408659428, 0.5215793824680652, 0.5693390775138766, 0.537195449477698, 0.4904520807732249, 0.12788339597106335, 0.07757048708500369, 0.08705800340003211, 0.10730051621919079, 0.11377111846862131, 0.10977007575244802, 0.09096359162493028, 0.10913925502189137, 0.141914178583055, 0.3991177047589931, 0.1948472712682141, 0.20105056374083508, 0.418519701590808, 0.28073173604697266, 0.42532737252061936, 0.38025854841133844, 0.19335217571100893, 0.1889799863414925, 0.35520110669184657, 0.3766551634282381, 0.16300757568788793, 0.33298136195595684, 0.384087821515284, 0.15705828555142232, 0.37578026933902764, 0.2996166211701662, 0.17629628305161127, 0.307089358049469, 0.2512452014497366, 0.07498668015853871, 0.2647383662774825, 0.29073928226625645, 0.14350858331060623, 0.2784209808869007, 0.11440947326569673, 0.22351004430718135, 0.20424797813111284, 0.1835060308872838, 0.21494097113666089, 0.21194360777961263, 0.22036838916125412, 0.19778224418910562, 0.23531461573428814, 0.1712032861900692, 0.19848013815976906, 0.18704554859218392, 0.19738841963583165, 0.18905963059225206, 0.1747237002589518, 0.19632107397037957, 0.20213043454242563, 0.19897886017941113, 0.2023663648951166, 0.1877420627452785, 0.18935904154354732, 0.13703697786539104, 0.0980167298395549, 0.17342893469307796, 0.1125133597874507, 0.062050157028137654, 0.10872165547697843, 0.11529452477232716, 0.16853000489646675, 0.8029546170388124, 0.11335926904688476, 0.08313767134352423, 0.15713584865177943, 0.2138063495203958, 0.21111747368978084, 0.730454561870463, 0.16668967788633815, 0.7190163657193702, 0.22276133520719799, 0.23827938411575156, 0.23902114530467522, 0.2198833616692124, 0.23260605529441414, 0.21131536060755385, 0.20457587582030567, 0.21441041442344244, 0.2217243173302691, 0.09148081328756341, 0.12352788892499433, 0.07122918836508785, 0.07921013826297074, 0.05808498956105845, 0.1384267764253838, 0.14983435660854416, 0.08909948269995982, 0.10216115751186894]}, "mutation_prompt": null}
{"id": "26662060-2351-4ba0-862f-b492fb1c3847", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            population_size = np.clip(int(10 + np.random.randn()), 1, 20)  # Dynamic population size adjustment\n            if np.random.rand() < mutation_prob:  \n                mutation_scale = 0.1\n                rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                best_fitness = func(mutated_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic population size adjustment strategy to optimize the algorithm's convergence speed.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e3c1a918-3448-4afc-8f17-a7d5dc6eb9be", "metadata": {"aucs": [0.6115066890917789, 0.6261452789445074, 0.6238345508751961, 0.6174310832890972, 0.6441054280317691, 0.6539620281227437, 0.6254244356504869, 0.6120858346037432, 0.6148686166825902, 0.03276851910769352, 0.04283876522040064, 9.999999999998899e-05, 0.05209121943863826, 0.034672645015252024, 9.999999999998899e-05, 0.018051269989687757, 0.08868011119351249, 9.999999999998899e-05, 0.08752990565061014, 0.14108578010065376, 0.1195963397566806, 0.09961894330952559, 0.12221665963353823, 0.13931946183804889, 0.10269525575443617, 0.10956135845707671, 0.08055356745146003, 0.07991066051380202, 0.0941055637929572, 0.10915400171085199, 0.1135594957696332, 0.0813706313459246, 0.07983417676232929, 0.10047784163687246, 0.09785660925606587, 0.06338402457264214, 0.9788368592029786, 0.9071622548220396, 0.9444603402516394, 0.9536282933486295, 0.9460344087023679, 0.9531943846678441, 0.9628187980659311, 0.9670242784225491, 0.9752509111937079, 0.4638895076973918, 0.47822159724878677, 0.5182792150851021, 0.4650497264494384, 0.4736126244699158, 0.4700435912868607, 0.4944402127348537, 0.5204139428205937, 0.4974612938793209, 0.23735740126734406, 0.2246908008210139, 0.13613159949502096, 0.8225003900335435, 0.1905668404760017, 0.8687800889907491, 0.765543111458784, 0.26832674903545517, 0.26013592316184786, 0.2475408635625469, 0.22728852905525565, 0.23025108892011326, 0.24578938279514062, 0.24036514029991063, 0.24125809521584307, 0.23628256288659244, 0.24417012857496123, 0.23692188576534823, 0.23946836962027795, 0.239923466560939, 0.132159412924161, 0.2520948136513773, 0.2471980922112863, 0.23300670164472836, 0.23935474365483056, 0.2405075686226662, 0.3045963225932765, 0.06627637913011764, 0.016257760282825107, 0.002812676173570061, 0.11991414298075798, 0.049152274968137344, 0.003629143621332709, 0.05651683284471487, 9.999999999998899e-05, 0.022614744173534596, 0.09591911945109166, 0.05504311108081206, 0.10334920187639296, 0.06957288215245772, 0.03566028144600075, 0.02948271569206462, 0.10115222402096447, 0.033645282597434156, 0.08514533082584252, 0.12293833296076884, 0.03292687503978342, 0.07891212475698517, 0.05112160605065752, 0.0648765315426546, 0.07599156786071248, 0.08086658154799553, 0.090618577807417, 0.053697486623348945, 0.18722056692100741, 0.1553993292503284, 0.13057459238165703, 0.18034537404641449, 0.1875677805123117, 0.1399647121946216, 0.15883716453238061, 0.18768957325769187, 0.16714105558873726, 0.5141332809658978, 0.509298116086414, 0.5106089874776061, 0.5181606218109598, 0.538961408659428, 0.5215793824680652, 0.5693390775138766, 0.537195449477698, 0.4904520807732249, 0.12788339597106335, 0.07757048708500369, 0.08705800340003211, 0.10730051621919079, 0.11377111846862131, 0.10977007575244802, 0.09096359162493028, 0.10913925502189137, 0.141914178583055, 0.3991177047589931, 0.1948472712682141, 0.20105056374083508, 0.418519701590808, 0.28073173604697266, 0.42532737252061936, 0.38025854841133844, 0.19335217571100893, 0.1889799863414925, 0.35520110669184657, 0.3766551634282381, 0.16300757568788793, 0.33298136195595684, 0.384087821515284, 0.15705828555142232, 0.37578026933902764, 0.2996166211701662, 0.17629628305161127, 0.307089358049469, 0.2512452014497366, 0.07498668015853871, 0.2647383662774825, 0.29073928226625645, 0.14350858331060623, 0.2784209808869007, 0.11440947326569673, 0.22351004430718135, 0.20424797813111284, 0.1835060308872838, 0.21494097113666089, 0.21194360777961263, 0.22036838916125412, 0.19778224418910562, 0.23531461573428814, 0.1712032861900692, 0.19848013815976906, 0.18704554859218392, 0.19738841963583165, 0.18905963059225206, 0.1747237002589518, 0.19632107397037957, 0.20213043454242563, 0.19897886017941113, 0.2023663648951166, 0.1877420627452785, 0.18935904154354732, 0.13703697786539104, 0.0980167298395549, 0.17342893469307796, 0.1125133597874507, 0.062050157028137654, 0.10872165547697843, 0.11529452477232716, 0.16853000489646675, 0.8029546170388124, 0.11335926904688476, 0.08313767134352423, 0.15713584865177943, 0.2138063495203958, 0.21111747368978084, 0.730454561870463, 0.16668967788633815, 0.7190163657193702, 0.22276133520719799, 0.23827938411575156, 0.23902114530467522, 0.2198833616692124, 0.23260605529441414, 0.21131536060755385, 0.20457587582030567, 0.21441041442344244, 0.2217243173302691, 0.09148081328756341, 0.12352788892499433, 0.07122918836508785, 0.07921013826297074, 0.05808498956105845, 0.1384267764253838, 0.14983435660854416, 0.08909948269995982, 0.10216115751186894]}, "mutation_prompt": null}
{"id": "5a1ffb0e-73a2-4971-83be-b7e475729066", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            population_size = np.clip(int(10 + np.random.randn()), 1, 20)  # Dynamic population size adjustment\n            if np.random.rand() < mutation_prob:  \n                mutation_scale = 0.1\n                rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                best_fitness = func(mutated_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic population size adjustment strategy to optimize the algorithm's convergence speed.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e3c1a918-3448-4afc-8f17-a7d5dc6eb9be", "metadata": {"aucs": [0.6115066890917789, 0.6261452789445074, 0.6238345508751961, 0.6174310832890972, 0.6441054280317691, 0.6539620281227437, 0.6254244356504869, 0.6120858346037432, 0.6148686166825902, 0.03276851910769352, 0.04283876522040064, 9.999999999998899e-05, 0.05209121943863826, 0.034672645015252024, 9.999999999998899e-05, 0.018051269989687757, 0.08868011119351249, 9.999999999998899e-05, 0.08752990565061014, 0.14108578010065376, 0.1195963397566806, 0.09961894330952559, 0.12221665963353823, 0.13931946183804889, 0.10269525575443617, 0.10956135845707671, 0.08055356745146003, 0.07991066051380202, 0.0941055637929572, 0.10915400171085199, 0.1135594957696332, 0.0813706313459246, 0.07983417676232929, 0.10047784163687246, 0.09785660925606587, 0.06338402457264214, 0.9788368592029786, 0.9071622548220396, 0.9444603402516394, 0.9536282933486295, 0.9460344087023679, 0.9531943846678441, 0.9628187980659311, 0.9670242784225491, 0.9752509111937079, 0.4638895076973918, 0.47822159724878677, 0.5182792150851021, 0.4650497264494384, 0.4736126244699158, 0.4700435912868607, 0.4944402127348537, 0.5204139428205937, 0.4974612938793209, 0.23735740126734406, 0.2246908008210139, 0.13613159949502096, 0.8225003900335435, 0.1905668404760017, 0.8687800889907491, 0.765543111458784, 0.26832674903545517, 0.26013592316184786, 0.2475408635625469, 0.22728852905525565, 0.23025108892011326, 0.24578938279514062, 0.24036514029991063, 0.24125809521584307, 0.23628256288659244, 0.24417012857496123, 0.23692188576534823, 0.23946836962027795, 0.239923466560939, 0.132159412924161, 0.2520948136513773, 0.2471980922112863, 0.23300670164472836, 0.23935474365483056, 0.2405075686226662, 0.3045963225932765, 0.06627637913011764, 0.016257760282825107, 0.002812676173570061, 0.11991414298075798, 0.049152274968137344, 0.003629143621332709, 0.05651683284471487, 9.999999999998899e-05, 0.022614744173534596, 0.09591911945109166, 0.05504311108081206, 0.10334920187639296, 0.06957288215245772, 0.03566028144600075, 0.02948271569206462, 0.10115222402096447, 0.033645282597434156, 0.08514533082584252, 0.12293833296076884, 0.03292687503978342, 0.07891212475698517, 0.05112160605065752, 0.0648765315426546, 0.07599156786071248, 0.08086658154799553, 0.090618577807417, 0.053697486623348945, 0.18722056692100741, 0.1553993292503284, 0.13057459238165703, 0.18034537404641449, 0.1875677805123117, 0.1399647121946216, 0.15883716453238061, 0.18768957325769187, 0.16714105558873726, 0.5141332809658978, 0.509298116086414, 0.5106089874776061, 0.5181606218109598, 0.538961408659428, 0.5215793824680652, 0.5693390775138766, 0.537195449477698, 0.4904520807732249, 0.12788339597106335, 0.07757048708500369, 0.08705800340003211, 0.10730051621919079, 0.11377111846862131, 0.10977007575244802, 0.09096359162493028, 0.10913925502189137, 0.141914178583055, 0.3991177047589931, 0.1948472712682141, 0.20105056374083508, 0.418519701590808, 0.28073173604697266, 0.42532737252061936, 0.38025854841133844, 0.19335217571100893, 0.1889799863414925, 0.35520110669184657, 0.3766551634282381, 0.16300757568788793, 0.33298136195595684, 0.384087821515284, 0.15705828555142232, 0.37578026933902764, 0.2996166211701662, 0.17629628305161127, 0.307089358049469, 0.2512452014497366, 0.07498668015853871, 0.2647383662774825, 0.29073928226625645, 0.14350858331060623, 0.2784209808869007, 0.11440947326569673, 0.22351004430718135, 0.20424797813111284, 0.1835060308872838, 0.21494097113666089, 0.21194360777961263, 0.22036838916125412, 0.19778224418910562, 0.23531461573428814, 0.1712032861900692, 0.19848013815976906, 0.18704554859218392, 0.19738841963583165, 0.18905963059225206, 0.1747237002589518, 0.19632107397037957, 0.20213043454242563, 0.19897886017941113, 0.2023663648951166, 0.1877420627452785, 0.18935904154354732, 0.13703697786539104, 0.0980167298395549, 0.17342893469307796, 0.1125133597874507, 0.062050157028137654, 0.10872165547697843, 0.11529452477232716, 0.16853000489646675, 0.8029546170388124, 0.11335926904688476, 0.08313767134352423, 0.15713584865177943, 0.2138063495203958, 0.21111747368978084, 0.730454561870463, 0.16668967788633815, 0.7190163657193702, 0.22276133520719799, 0.23827938411575156, 0.23902114530467522, 0.2198833616692124, 0.23260605529441414, 0.21131536060755385, 0.20457587582030567, 0.21441041442344244, 0.2217243173302691, 0.09148081328756341, 0.12352788892499433, 0.07122918836508785, 0.07921013826297074, 0.05808498956105845, 0.1384267764253838, 0.14983435660854416, 0.08909948269995982, 0.10216115751186894]}, "mutation_prompt": null}
{"id": "7448e560-96d5-420e-ba25-a0e688ada258", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            population_size = np.clip(int(10 + np.random.randn()), 1, 20)  # Dynamic population size adjustment\n            if np.random.rand() < mutation_prob:  \n                mutation_scale = 0.1\n                rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                best_fitness = func(mutated_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic population size adjustment strategy to optimize the algorithm's convergence speed.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e3c1a918-3448-4afc-8f17-a7d5dc6eb9be", "metadata": {"aucs": [0.6115066890917789, 0.6261452789445074, 0.6238345508751961, 0.6174310832890972, 0.6441054280317691, 0.6539620281227437, 0.6254244356504869, 0.6120858346037432, 0.6148686166825902, 0.03276851910769352, 0.04283876522040064, 9.999999999998899e-05, 0.05209121943863826, 0.034672645015252024, 9.999999999998899e-05, 0.018051269989687757, 0.08868011119351249, 9.999999999998899e-05, 0.08752990565061014, 0.14108578010065376, 0.1195963397566806, 0.09961894330952559, 0.12221665963353823, 0.13931946183804889, 0.10269525575443617, 0.10956135845707671, 0.08055356745146003, 0.07991066051380202, 0.0941055637929572, 0.10915400171085199, 0.1135594957696332, 0.0813706313459246, 0.07983417676232929, 0.10047784163687246, 0.09785660925606587, 0.06338402457264214, 0.9788368592029786, 0.9071622548220396, 0.9444603402516394, 0.9536282933486295, 0.9460344087023679, 0.9531943846678441, 0.9628187980659311, 0.9670242784225491, 0.9752509111937079, 0.4638895076973918, 0.47822159724878677, 0.5182792150851021, 0.4650497264494384, 0.4736126244699158, 0.4700435912868607, 0.4944402127348537, 0.5204139428205937, 0.4974612938793209, 0.23735740126734406, 0.2246908008210139, 0.13613159949502096, 0.8225003900335435, 0.1905668404760017, 0.8687800889907491, 0.765543111458784, 0.26832674903545517, 0.26013592316184786, 0.2475408635625469, 0.22728852905525565, 0.23025108892011326, 0.24578938279514062, 0.24036514029991063, 0.24125809521584307, 0.23628256288659244, 0.24417012857496123, 0.23692188576534823, 0.23946836962027795, 0.239923466560939, 0.132159412924161, 0.2520948136513773, 0.2471980922112863, 0.23300670164472836, 0.23935474365483056, 0.2405075686226662, 0.3045963225932765, 0.06627637913011764, 0.016257760282825107, 0.002812676173570061, 0.11991414298075798, 0.049152274968137344, 0.003629143621332709, 0.05651683284471487, 9.999999999998899e-05, 0.022614744173534596, 0.09591911945109166, 0.05504311108081206, 0.10334920187639296, 0.06957288215245772, 0.03566028144600075, 0.02948271569206462, 0.10115222402096447, 0.033645282597434156, 0.08514533082584252, 0.12293833296076884, 0.03292687503978342, 0.07891212475698517, 0.05112160605065752, 0.0648765315426546, 0.07599156786071248, 0.08086658154799553, 0.090618577807417, 0.053697486623348945, 0.18722056692100741, 0.1553993292503284, 0.13057459238165703, 0.18034537404641449, 0.1875677805123117, 0.1399647121946216, 0.15883716453238061, 0.18768957325769187, 0.16714105558873726, 0.5141332809658978, 0.509298116086414, 0.5106089874776061, 0.5181606218109598, 0.538961408659428, 0.5215793824680652, 0.5693390775138766, 0.537195449477698, 0.4904520807732249, 0.12788339597106335, 0.07757048708500369, 0.08705800340003211, 0.10730051621919079, 0.11377111846862131, 0.10977007575244802, 0.09096359162493028, 0.10913925502189137, 0.141914178583055, 0.3991177047589931, 0.1948472712682141, 0.20105056374083508, 0.418519701590808, 0.28073173604697266, 0.42532737252061936, 0.38025854841133844, 0.19335217571100893, 0.1889799863414925, 0.35520110669184657, 0.3766551634282381, 0.16300757568788793, 0.33298136195595684, 0.384087821515284, 0.15705828555142232, 0.37578026933902764, 0.2996166211701662, 0.17629628305161127, 0.307089358049469, 0.2512452014497366, 0.07498668015853871, 0.2647383662774825, 0.29073928226625645, 0.14350858331060623, 0.2784209808869007, 0.11440947326569673, 0.22351004430718135, 0.20424797813111284, 0.1835060308872838, 0.21494097113666089, 0.21194360777961263, 0.22036838916125412, 0.19778224418910562, 0.23531461573428814, 0.1712032861900692, 0.19848013815976906, 0.18704554859218392, 0.19738841963583165, 0.18905963059225206, 0.1747237002589518, 0.19632107397037957, 0.20213043454242563, 0.19897886017941113, 0.2023663648951166, 0.1877420627452785, 0.18935904154354732, 0.13703697786539104, 0.0980167298395549, 0.17342893469307796, 0.1125133597874507, 0.062050157028137654, 0.10872165547697843, 0.11529452477232716, 0.16853000489646675, 0.8029546170388124, 0.11335926904688476, 0.08313767134352423, 0.15713584865177943, 0.2138063495203958, 0.21111747368978084, 0.730454561870463, 0.16668967788633815, 0.7190163657193702, 0.22276133520719799, 0.23827938411575156, 0.23902114530467522, 0.2198833616692124, 0.23260605529441414, 0.21131536060755385, 0.20457587582030567, 0.21441041442344244, 0.2217243173302691, 0.09148081328756341, 0.12352788892499433, 0.07122918836508785, 0.07921013826297074, 0.05808498956105845, 0.1384267764253838, 0.14983435660854416, 0.08909948269995982, 0.10216115751186894]}, "mutation_prompt": null}
{"id": "214b03e8-a54f-467d-a239-d5fefa0d199a", "solution": "import chaospy as cp\n\nclass FastDynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        chaos_dist = cp.Uniform()\n\n        for _ in range(self.budget):\n            population_size = np.clip(int(10 + np.random.randn()), 1, 20)  # Dynamic population size adjustment\n            if np.random.rand() < mutation_prob:  \n                mutation_scale = chaos_dist.sample()  # Introduce chaotic scaling for mutation\n                rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                best_fitness = func(mutated_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "FastDynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Improve convergence speed by introducing a chaotic search strategy for enhanced exploration.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'chaospy'\").", "error": "ModuleNotFoundError(\"No module named 'chaospy'\")", "parent_id": "e3c1a918-3448-4afc-8f17-a7d5dc6eb9be", "metadata": {}, "mutation_prompt": null}
{"id": "ea63a492-982e-4a36-9e00-623013e94021", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            population_size = np.clip(int(10 + np.random.randn()), 1, 20)  # Dynamic population size adjustment\n            if np.random.rand() < mutation_prob:  \n                mutation_scale = 0.1\n                rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                best_fitness = func(mutated_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic population size adjustment strategy to optimize the algorithm's convergence speed.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e3c1a918-3448-4afc-8f17-a7d5dc6eb9be", "metadata": {"aucs": [0.6115066890917789, 0.6261452789445074, 0.6238345508751961, 0.6174310832890972, 0.6441054280317691, 0.6539620281227437, 0.6254244356504869, 0.6120858346037432, 0.6148686166825902, 0.03276851910769352, 0.04283876522040064, 9.999999999998899e-05, 0.05209121943863826, 0.034672645015252024, 9.999999999998899e-05, 0.018051269989687757, 0.08868011119351249, 9.999999999998899e-05, 0.08752990565061014, 0.14108578010065376, 0.1195963397566806, 0.09961894330952559, 0.12221665963353823, 0.13931946183804889, 0.10269525575443617, 0.10956135845707671, 0.08055356745146003, 0.07991066051380202, 0.0941055637929572, 0.10915400171085199, 0.1135594957696332, 0.0813706313459246, 0.07983417676232929, 0.10047784163687246, 0.09785660925606587, 0.06338402457264214, 0.9788368592029786, 0.9071622548220396, 0.9444603402516394, 0.9536282933486295, 0.9460344087023679, 0.9531943846678441, 0.9628187980659311, 0.9670242784225491, 0.9752509111937079, 0.4638895076973918, 0.47822159724878677, 0.5182792150851021, 0.4650497264494384, 0.4736126244699158, 0.4700435912868607, 0.4944402127348537, 0.5204139428205937, 0.4974612938793209, 0.23735740126734406, 0.2246908008210139, 0.13613159949502096, 0.8225003900335435, 0.1905668404760017, 0.8687800889907491, 0.765543111458784, 0.26832674903545517, 0.26013592316184786, 0.2475408635625469, 0.22728852905525565, 0.23025108892011326, 0.24578938279514062, 0.24036514029991063, 0.24125809521584307, 0.23628256288659244, 0.24417012857496123, 0.23692188576534823, 0.23946836962027795, 0.239923466560939, 0.132159412924161, 0.2520948136513773, 0.2471980922112863, 0.23300670164472836, 0.23935474365483056, 0.2405075686226662, 0.3045963225932765, 0.06627637913011764, 0.016257760282825107, 0.002812676173570061, 0.11991414298075798, 0.049152274968137344, 0.003629143621332709, 0.05651683284471487, 9.999999999998899e-05, 0.022614744173534596, 0.09591911945109166, 0.05504311108081206, 0.10334920187639296, 0.06957288215245772, 0.03566028144600075, 0.02948271569206462, 0.10115222402096447, 0.033645282597434156, 0.08514533082584252, 0.12293833296076884, 0.03292687503978342, 0.07891212475698517, 0.05112160605065752, 0.0648765315426546, 0.07599156786071248, 0.08086658154799553, 0.090618577807417, 0.053697486623348945, 0.18722056692100741, 0.1553993292503284, 0.13057459238165703, 0.18034537404641449, 0.1875677805123117, 0.1399647121946216, 0.15883716453238061, 0.18768957325769187, 0.16714105558873726, 0.5141332809658978, 0.509298116086414, 0.5106089874776061, 0.5181606218109598, 0.538961408659428, 0.5215793824680652, 0.5693390775138766, 0.537195449477698, 0.4904520807732249, 0.12788339597106335, 0.07757048708500369, 0.08705800340003211, 0.10730051621919079, 0.11377111846862131, 0.10977007575244802, 0.09096359162493028, 0.10913925502189137, 0.141914178583055, 0.3991177047589931, 0.1948472712682141, 0.20105056374083508, 0.418519701590808, 0.28073173604697266, 0.42532737252061936, 0.38025854841133844, 0.19335217571100893, 0.1889799863414925, 0.35520110669184657, 0.3766551634282381, 0.16300757568788793, 0.33298136195595684, 0.384087821515284, 0.15705828555142232, 0.37578026933902764, 0.2996166211701662, 0.17629628305161127, 0.307089358049469, 0.2512452014497366, 0.07498668015853871, 0.2647383662774825, 0.29073928226625645, 0.14350858331060623, 0.2784209808869007, 0.11440947326569673, 0.22351004430718135, 0.20424797813111284, 0.1835060308872838, 0.21494097113666089, 0.21194360777961263, 0.22036838916125412, 0.19778224418910562, 0.23531461573428814, 0.1712032861900692, 0.19848013815976906, 0.18704554859218392, 0.19738841963583165, 0.18905963059225206, 0.1747237002589518, 0.19632107397037957, 0.20213043454242563, 0.19897886017941113, 0.2023663648951166, 0.1877420627452785, 0.18935904154354732, 0.13703697786539104, 0.0980167298395549, 0.17342893469307796, 0.1125133597874507, 0.062050157028137654, 0.10872165547697843, 0.11529452477232716, 0.16853000489646675, 0.8029546170388124, 0.11335926904688476, 0.08313767134352423, 0.15713584865177943, 0.2138063495203958, 0.21111747368978084, 0.730454561870463, 0.16668967788633815, 0.7190163657193702, 0.22276133520719799, 0.23827938411575156, 0.23902114530467522, 0.2198833616692124, 0.23260605529441414, 0.21131536060755385, 0.20457587582030567, 0.21441041442344244, 0.2217243173302691, 0.09148081328756341, 0.12352788892499433, 0.07122918836508785, 0.07921013826297074, 0.05808498956105845, 0.1384267764253838, 0.14983435660854416, 0.08909948269995982, 0.10216115751186894]}, "mutation_prompt": null}
{"id": "ee499f94-1afd-4cfd-b4ff-7d00dca81843", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            population_size = np.clip(int(10 + np.random.randn()), 1, 20)  # Dynamic population size adjustment\n            if np.random.rand() < mutation_prob:  \n                mutation_scale = 0.1 + 0.05 * np.random.randn()  # Dynamic mutation scale adjustment\n                rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                best_fitness = func(mutated_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic population size adjustment strategy to optimize the algorithm's convergence speed further by dynamically adjusting mutation scale.", "configspace": "", "generation": 97, "fitness": 0.2613618292120621, "feedback": "The algorithm DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "e3c1a918-3448-4afc-8f17-a7d5dc6eb9be", "metadata": {"aucs": [0.5803853990744183, 0.6251952282203671, 0.6093566864727697, 0.6100422559620933, 0.5986353835355136, 0.6134732519071217, 0.6085894213520304, 0.5790311736567704, 0.6160874511424148, 0.024710115017366863, 0.061583375844333155, 9.999999999998899e-05, 0.07901997623703905, 9.999999999998899e-05, 9.999999999998899e-05, 0.06578479737231357, 9.999999999998899e-05, 9.999999999998899e-05, 0.10400252815917577, 0.08564989967713921, 0.1065372414534782, 0.10638075573513794, 0.11865296693674043, 0.12270267318608474, 0.1302116434030275, 0.07000845912843634, 0.1112708384115102, 0.10558910163883972, 0.10542619004686948, 0.13425108831597632, 0.0962638452628426, 0.09074828157844439, 0.1021633740088157, 0.1158208330067364, 0.08290712288782831, 0.08584606829974639, 0.9825642946294746, 0.946185340911402, 0.9320456337727456, 0.9287133492685962, 0.9351376685374571, 0.9603978293979321, 0.9367078071837196, 0.9648114494047779, 0.9587608140590682, 0.4467150602485601, 0.436533389090099, 0.46377810020609866, 0.4646316710750885, 0.4485742292084738, 0.47344289429122566, 0.49002199192052853, 0.4677118455411885, 0.4677019865806983, 0.7752521202132604, 0.7978539354609848, 0.1986810394315598, 0.21698225478308308, 0.3449669689567062, 0.7469455458807266, 0.7764347432456915, 0.3611891896004771, 0.700691151091076, 0.2224507206079558, 0.22488650048416614, 0.2635259643337382, 0.1926805581739207, 0.36074692855884527, 0.27585717812627153, 0.21815093501825422, 0.2251314610979156, 0.23518338540661277, 0.2512827962270857, 0.13988640727172386, 0.2123844086693083, 0.244954262221866, 0.24648020072567844, 0.23515013595509604, 0.22563955160983362, 0.2110606859732428, 0.19420169910321328, 0.11491955813525545, 0.06644046974711926, 0.002138393573276165, 0.09417177387594544, 0.02929254112187374, 0.004989123960499664, 0.02868939006343829, 9.999999999998899e-05, 0.07516967762122007, 0.06158960942548186, 0.08652842651911308, 0.10969758605915081, 0.05984743020271854, 0.10227439825587481, 0.06374931710929355, 0.06540383047455434, 0.049372141484581356, 0.08295058631833485, 0.06185689126312832, 0.04246273897841524, 0.06460474468895716, 0.05623337911040527, 0.05171565228646979, 0.08393151988021963, 0.07172675946606855, 0.10548509587050536, 0.0840977454543943, 0.1471085988415214, 0.20026531021937677, 0.20344343410520616, 0.1814256004173438, 0.13879152068769107, 0.13810720188417946, 0.16063829891332881, 0.1401305109182125, 0.15748567440033845, 0.5134525631750295, 0.48156988727777283, 0.5122317674209005, 0.5183626307939172, 0.5325012094301498, 0.5037169985380838, 0.5109071882801497, 0.5066191463582042, 0.49504147780845675, 0.11592349765672394, 0.07967628771024216, 0.1399395926404059, 0.10234831705974634, 0.1375936978881549, 0.09274297841634871, 0.06766405057545821, 0.07826765044752815, 0.09980862364012355, 0.24693931399242064, 0.20542041542752187, 0.42931951685044745, 0.35218850828818504, 0.19878317565227221, 0.2107122876748968, 0.4124816885775785, 0.31162495760194453, 0.30261880181703593, 0.37022560148275174, 0.3541299195161959, 0.17967307135814503, 0.3647980509059514, 0.36860776351185154, 0.3560269291753382, 0.3626915757143574, 0.36483911375916267, 0.12097863165610068, 0.2905459643711652, 0.3016715990698101, 0.08172377665492736, 0.26966224931947447, 0.28163467349514293, 0.30420917522066937, 0.19822375655244084, 0.2148332177475646, 0.055471050889228546, 0.19119068070826017, 0.22095143639925485, 0.20573315068608966, 0.2004230133723689, 0.21774151803450248, 0.19129296124651385, 0.22625868227534074, 0.21837734419079646, 0.22717392082050802, 0.18862010014087394, 0.19595328964266978, 0.21814675318238375, 0.18712350802281363, 0.20475538338993715, 0.20385514338521493, 0.22735065128470666, 0.16893244096213078, 0.20553368219141843, 0.18897366501212154, 0.13703372657016555, 0.09911862485324385, 0.17358450683728666, 0.11251499901607898, 0.0620100120773972, 0.10867304491327179, 0.11529476421291507, 0.16857059211147518, 0.7709309227098071, 0.11336502707787388, 0.083169221366728, 0.1573594545694288, 0.2140387937255961, 0.21114380306790959, 0.823674649033602, 0.16918530780935248, 0.7070331807336352, 0.22487781939638318, 0.22561240683883266, 0.23424546505690214, 0.21199764020472867, 0.21847292325847523, 0.21150330918391014, 0.22810339715942662, 0.2250436556928911, 0.21587138772587466, 0.11885236089543505, 0.08210282458216411, 0.07326126184507376, 0.0891841747442228, 0.09686357953084701, 0.09989173124098305, 0.08856760559828325, 0.08860357676408404, 0.07086124123294646]}, "mutation_prompt": null}
{"id": "b8ef972e-4ad4-4ff8-a27e-2dc6ca67c343", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            population_size = np.clip(int(10 + np.random.randn()), 1, 20)  # Dynamic population size adjustment\n            if np.random.rand() < mutation_prob:  \n                mutation_scale = 0.1 + 0.05 * np.random.randn()  # Dynamic mutation scale adjustment\n                rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                best_fitness = func(mutated_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic population size adjustment strategy to optimize the algorithm's convergence speed further by dynamically adjusting mutation scale.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "ee499f94-1afd-4cfd-b4ff-7d00dca81843", "metadata": {"aucs": [0.5803853990744183, 0.6251952282203671, 0.6093566864727697, 0.6100422559620933, 0.5986353835355136, 0.6134732519071217, 0.6085894213520304, 0.5790311736567704, 0.6160874511424148, 0.024710115017366863, 0.061583375844333155, 9.999999999998899e-05, 0.07901997623703905, 9.999999999998899e-05, 9.999999999998899e-05, 0.06578479737231357, 9.999999999998899e-05, 9.999999999998899e-05, 0.10400252815917577, 0.08564989967713921, 0.1065372414534782, 0.10638075573513794, 0.11865296693674043, 0.12270267318608474, 0.1302116434030275, 0.07000845912843634, 0.1112708384115102, 0.10558910163883972, 0.10542619004686948, 0.13425108831597632, 0.0962638452628426, 0.09074828157844439, 0.1021633740088157, 0.1158208330067364, 0.08290712288782831, 0.08584606829974639, 0.9825642946294746, 0.946185340911402, 0.9320456337727456, 0.9287133492685962, 0.9351376685374571, 0.9603978293979321, 0.9367078071837196, 0.9648114494047779, 0.9587608140590682, 0.4467150602485601, 0.436533389090099, 0.46377810020609866, 0.4646316710750885, 0.4485742292084738, 0.47344289429122566, 0.49002199192052853, 0.4677118455411885, 0.4677019865806983, 0.7752521202132604, 0.7978539354609848, 0.1986810394315598, 0.21698225478308308, 0.3449669689567062, 0.7469455458807266, 0.7764347432456915, 0.3611891896004771, 0.700691151091076, 0.2224507206079558, 0.22488650048416614, 0.2635259643337382, 0.1926805581739207, 0.36074692855884527, 0.27585717812627153, 0.21815093501825422, 0.2251314610979156, 0.23518338540661277, 0.2512827962270857, 0.13988640727172386, 0.2123844086693083, 0.244954262221866, 0.24648020072567844, 0.23515013595509604, 0.22563955160983362, 0.2110606859732428, 0.19420169910321328, 0.11491955813525545, 0.06644046974711926, 0.002138393573276165, 0.09417177387594544, 0.02929254112187374, 0.004989123960499664, 0.02868939006343829, 9.999999999998899e-05, 0.07516967762122007, 0.06158960942548186, 0.08652842651911308, 0.10969758605915081, 0.05984743020271854, 0.10227439825587481, 0.06374931710929355, 0.06540383047455434, 0.049372141484581356, 0.08295058631833485, 0.06185689126312832, 0.04246273897841524, 0.06460474468895716, 0.05623337911040527, 0.05171565228646979, 0.08393151988021963, 0.07172675946606855, 0.10548509587050536, 0.0840977454543943, 0.1471085988415214, 0.20026531021937677, 0.20344343410520616, 0.1814256004173438, 0.13879152068769107, 0.13810720188417946, 0.16063829891332881, 0.1401305109182125, 0.15748567440033845, 0.5134525631750295, 0.48156988727777283, 0.5122317674209005, 0.5183626307939172, 0.5325012094301498, 0.5037169985380838, 0.5109071882801497, 0.5066191463582042, 0.49504147780845675, 0.11592349765672394, 0.07967628771024216, 0.1399395926404059, 0.10234831705974634, 0.1375936978881549, 0.09274297841634871, 0.06766405057545821, 0.07826765044752815, 0.09980862364012355, 0.24693931399242064, 0.20542041542752187, 0.42931951685044745, 0.35218850828818504, 0.19878317565227221, 0.2107122876748968, 0.4124816885775785, 0.31162495760194453, 0.30261880181703593, 0.37022560148275174, 0.3541299195161959, 0.17967307135814503, 0.3647980509059514, 0.36860776351185154, 0.3560269291753382, 0.3626915757143574, 0.36483911375916267, 0.12097863165610068, 0.2905459643711652, 0.3016715990698101, 0.08172377665492736, 0.26966224931947447, 0.28163467349514293, 0.30420917522066937, 0.19822375655244084, 0.2148332177475646, 0.055471050889228546, 0.19119068070826017, 0.22095143639925485, 0.20573315068608966, 0.2004230133723689, 0.21774151803450248, 0.19129296124651385, 0.22625868227534074, 0.21837734419079646, 0.22717392082050802, 0.18862010014087394, 0.19595328964266978, 0.21814675318238375, 0.18712350802281363, 0.20475538338993715, 0.20385514338521493, 0.22735065128470666, 0.16893244096213078, 0.20553368219141843, 0.18897366501212154, 0.13703372657016555, 0.09911862485324385, 0.17358450683728666, 0.11251499901607898, 0.0620100120773972, 0.10867304491327179, 0.11529476421291507, 0.16857059211147518, 0.7709309227098071, 0.11336502707787388, 0.083169221366728, 0.1573594545694288, 0.2140387937255961, 0.21114380306790959, 0.823674649033602, 0.16918530780935248, 0.7070331807336352, 0.22487781939638318, 0.22561240683883266, 0.23424546505690214, 0.21199764020472867, 0.21847292325847523, 0.21150330918391014, 0.22810339715942662, 0.2250436556928911, 0.21587138772587466, 0.11885236089543505, 0.08210282458216411, 0.07326126184507376, 0.0891841747442228, 0.09686357953084701, 0.09989173124098305, 0.08856760559828325, 0.08860357676408404, 0.07086124123294646]}, "mutation_prompt": null}
{"id": "7acf67e5-bc21-405e-9116-a7e9366ee279", "solution": "class DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved(FireAntOptimizationMutationImproved):\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        mutation_prob = 0.2\n        \n        for _ in range(self.budget):\n            population_size = np.clip(int(10 + np.random.randn()), 1, 20)  # Dynamic population size adjustment\n            if np.random.rand() < mutation_prob:  \n                mutation_scale = 0.1 + 0.05 * np.random.randn()  # Dynamic mutation scale adjustment\n                rand_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                mutated_solution = best_solution + mutation_scale * (rand_solution - best_solution)\n                best_fitness = func(mutated_solution)\n                mutation_prob *= 0.99  \n                self.step_size *= 0.99  # Adjust step size based on fitness improvement rate\n                \n            steps = self.step_size * np.random.uniform(-1, 1, (population_size, self.dim))\n            new_solutions = np.clip(best_solution + steps, self.lower_bound, self.upper_bound)\n            new_fitnesses = np.array([func(sol) for sol in new_solutions])\n            \n            min_idx = np.argmin(new_fitnesses)\n            if new_fitnesses[min_idx] < best_fitness:\n                best_solution = new_solutions[min_idx]\n                best_fitness = new_fitnesses[min_idx]\n                self.step_size *= 0.98  # Dynamic step size adjustment for faster convergence\n                \n            global_best_solution = new_solutions[np.argmin(new_fitnesses)]\n            combined_solution = best_solution + self.step_size * (global_best_solution - best_solution) * np.random.uniform(0.5, 1.0, self.dim)\n            combined_solution = np.clip(combined_solution, self.lower_bound, self.upper_bound)\n            combined_fitness = func(combined_solution)\n            \n            if combined_fitness < best_fitness:\n                best_solution = combined_solution\n                best_fitness = combined_fitness\n        \n        return best_solution", "name": "DynamicPopulationSizeHybridFireAntCuckooOptimizationImproved", "description": "Implement a dynamic population size adjustment strategy to optimize the algorithm's convergence speed further by dynamically adjusting mutation scale.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "ee499f94-1afd-4cfd-b4ff-7d00dca81843", "metadata": {"aucs": [0.5803853990744183, 0.6251952282203671, 0.6093566864727697, 0.6100422559620933, 0.5986353835355136, 0.6134732519071217, 0.6085894213520304, 0.5790311736567704, 0.6160874511424148, 0.024710115017366863, 0.061583375844333155, 9.999999999998899e-05, 0.07901997623703905, 9.999999999998899e-05, 9.999999999998899e-05, 0.06578479737231357, 9.999999999998899e-05, 9.999999999998899e-05, 0.10400252815917577, 0.08564989967713921, 0.1065372414534782, 0.10638075573513794, 0.11865296693674043, 0.12270267318608474, 0.1302116434030275, 0.07000845912843634, 0.1112708384115102, 0.10558910163883972, 0.10542619004686948, 0.13425108831597632, 0.0962638452628426, 0.09074828157844439, 0.1021633740088157, 0.1158208330067364, 0.08290712288782831, 0.08584606829974639, 0.9825642946294746, 0.946185340911402, 0.9320456337727456, 0.9287133492685962, 0.9351376685374571, 0.9603978293979321, 0.9367078071837196, 0.9648114494047779, 0.9587608140590682, 0.4467150602485601, 0.436533389090099, 0.46377810020609866, 0.4646316710750885, 0.4485742292084738, 0.47344289429122566, 0.49002199192052853, 0.4677118455411885, 0.4677019865806983, 0.7752521202132604, 0.7978539354609848, 0.1986810394315598, 0.21698225478308308, 0.3449669689567062, 0.7469455458807266, 0.7764347432456915, 0.3611891896004771, 0.700691151091076, 0.2224507206079558, 0.22488650048416614, 0.2635259643337382, 0.1926805581739207, 0.36074692855884527, 0.27585717812627153, 0.21815093501825422, 0.2251314610979156, 0.23518338540661277, 0.2512827962270857, 0.13988640727172386, 0.2123844086693083, 0.244954262221866, 0.24648020072567844, 0.23515013595509604, 0.22563955160983362, 0.2110606859732428, 0.19420169910321328, 0.11491955813525545, 0.06644046974711926, 0.002138393573276165, 0.09417177387594544, 0.02929254112187374, 0.004989123960499664, 0.02868939006343829, 9.999999999998899e-05, 0.07516967762122007, 0.06158960942548186, 0.08652842651911308, 0.10969758605915081, 0.05984743020271854, 0.10227439825587481, 0.06374931710929355, 0.06540383047455434, 0.049372141484581356, 0.08295058631833485, 0.06185689126312832, 0.04246273897841524, 0.06460474468895716, 0.05623337911040527, 0.05171565228646979, 0.08393151988021963, 0.07172675946606855, 0.10548509587050536, 0.0840977454543943, 0.1471085988415214, 0.20026531021937677, 0.20344343410520616, 0.1814256004173438, 0.13879152068769107, 0.13810720188417946, 0.16063829891332881, 0.1401305109182125, 0.15748567440033845, 0.5134525631750295, 0.48156988727777283, 0.5122317674209005, 0.5183626307939172, 0.5325012094301498, 0.5037169985380838, 0.5109071882801497, 0.5066191463582042, 0.49504147780845675, 0.11592349765672394, 0.07967628771024216, 0.1399395926404059, 0.10234831705974634, 0.1375936978881549, 0.09274297841634871, 0.06766405057545821, 0.07826765044752815, 0.09980862364012355, 0.24693931399242064, 0.20542041542752187, 0.42931951685044745, 0.35218850828818504, 0.19878317565227221, 0.2107122876748968, 0.4124816885775785, 0.31162495760194453, 0.30261880181703593, 0.37022560148275174, 0.3541299195161959, 0.17967307135814503, 0.3647980509059514, 0.36860776351185154, 0.3560269291753382, 0.3626915757143574, 0.36483911375916267, 0.12097863165610068, 0.2905459643711652, 0.3016715990698101, 0.08172377665492736, 0.26966224931947447, 0.28163467349514293, 0.30420917522066937, 0.19822375655244084, 0.2148332177475646, 0.055471050889228546, 0.19119068070826017, 0.22095143639925485, 0.20573315068608966, 0.2004230133723689, 0.21774151803450248, 0.19129296124651385, 0.22625868227534074, 0.21837734419079646, 0.22717392082050802, 0.18862010014087394, 0.19595328964266978, 0.21814675318238375, 0.18712350802281363, 0.20475538338993715, 0.20385514338521493, 0.22735065128470666, 0.16893244096213078, 0.20553368219141843, 0.18897366501212154, 0.13703372657016555, 0.09911862485324385, 0.17358450683728666, 0.11251499901607898, 0.0620100120773972, 0.10867304491327179, 0.11529476421291507, 0.16857059211147518, 0.7709309227098071, 0.11336502707787388, 0.083169221366728, 0.1573594545694288, 0.2140387937255961, 0.21114380306790959, 0.823674649033602, 0.16918530780935248, 0.7070331807336352, 0.22487781939638318, 0.22561240683883266, 0.23424546505690214, 0.21199764020472867, 0.21847292325847523, 0.21150330918391014, 0.22810339715942662, 0.2250436556928911, 0.21587138772587466, 0.11885236089543505, 0.08210282458216411, 0.07326126184507376, 0.0891841747442228, 0.09686357953084701, 0.09989173124098305, 0.08856760559828325, 0.08860357676408404, 0.07086124123294646]}, "mutation_prompt": null}
