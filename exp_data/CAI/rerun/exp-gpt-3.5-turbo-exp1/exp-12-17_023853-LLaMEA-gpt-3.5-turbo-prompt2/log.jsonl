{"id": "4e4d100d-1416-4a6f-96f4-9e8a0d2f8560", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.5\n        self.F = 0.5\n        self.NP = 10\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3])\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                else:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "AdaptiveDE", "description": "An adaptive differential evolution algorithm that dynamically adjusts its strategies and parameters during optimization to effectively explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.27048213516887715, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7799192219942593, 0.8623295876014947, 0.9118866925083066, 0.8863377158025478, 0.6679768229395813, 0.8779215741005497, 0.9057777726751952, 0.8830935456444118, 0.8988729413552163, 0.21923003107340822, 0.7797633197122559, 0.7476058971841404, 0.793130295082797, 0.7855655421487424, 9.999999999998899e-05, 0.766032330699213, 0.7904082774114958, 0.42261241136292627, 0.1525730307494828, 0.15232111119164515, 0.08698511486295524, 0.2688731018503421, 0.12322043803953897, 0.7863489535508068, 0.12640128837433262, 0.1230719673402173, 0.17489918814653793, 0.144451156911093, 0.1153390136433281, 0.12189127732948912, 0.12756376193698038, 0.1470808690129074, 0.035283543608267576, 0.748923702689414, 0.1435287675001835, 0.1288896590168046, 0.9510686208382506, 0.9696054746481124, 0.9265961375966021, 0.9717809880190028, 0.9695350337284779, 0.9848162795637916, 0.9210217160111096, 0.21580289287262489, 0.9765575117811458, 0.11292091339789934, 0.4138434833347927, 0.325848663128806, 0.11231696959680226, 0.20686476161860712, 0.2938280427237997, 0.10912031683858314, 0.253157118237457, 0.20612658537557105, 0.22263447595721664, 0.20596340358129972, 0.22768654886608009, 0.3268832963671384, 0.20961349253684636, 0.11680264986380684, 0.17048252992942892, 0.22626656364303022, 0.2289341534944801, 0.15218101081100976, 0.007232309741659115, 0.139463717534844, 0.14799947303248195, 0.1769502344699998, 0.13501540928842914, 0.20771270449449453, 0.13015489873986952, 0.13888024347612826, 0.14152260983565834, 0.09759207161743433, 0.12775343420587693, 0.22182716815201275, 0.3488349579709791, 0.14833072026951233, 0.1568539399629244, 0.14116291527032188, 0.15840466849788515, 0.039352157870670035, 0.12182025038282196, 0.04056343875871693, 0.006440348390172934, 0.019888274689088048, 9.999999999998899e-05, 0.0035976083317899032, 0.0010985012160706908, 0.11209050856206393, 0.0625016878833694, 0.04963325802337071, 0.11399940982799839, 0.09475136146308782, 0.009288515858482227, 0.045471525241744915, 0.09760037087016571, 0.09781557460860146, 0.1327951474617104, 0.12692074997139569, 0.05553099791572258, 0.13710485329311572, 0.059721253792098805, 0.1636921565951912, 0.08664803748152483, 0.010357061679250767, 0.12833972883894695, 0.02495299688794972, 0.21564037247523815, 0.08279252413826721, 0.18142912717581872, 0.17553014303105463, 0.11800368000081762, 0.11320463475656883, 0.07493389855957344, 0.19773608533891807, 0.049152012988619154, 0.5555727903611833, 0.5538313724723072, 0.4627498250085017, 0.3665300966521038, 0.5064804373054075, 0.24717835717242276, 0.45874447143782515, 0.5390882173335072, 0.3904850318090676, 0.28389478337130547, 0.09597254120507337, 0.060776909607215046, 0.08943976721409652, 0.0943565107904657, 0.10644440074205974, 0.09328281691720552, 0.08845437309251303, 0.11062692070354119, 0.12672209884408203, 0.12356472548153308, 0.1911086254868577, 0.13136037269464995, 0.14680027538322138, 0.13421316795074267, 0.1502407467249135, 0.14051137171950412, 0.13938051923840744, 0.44118067379236003, 0.29111443828193073, 0.4620055342131917, 0.424831762723641, 0.21025563007720816, 0.28806998705547626, 0.38380144498834656, 0.2475799217044582, 0.26693975571840844, 0.19250303249352174, 0.21129450076256961, 0.11946272854279882, 0.35470282086808425, 0.1816480570578195, 0.25648520200352154, 0.1707783858495734, 0.18176276361185517, 0.25604509557265853, 0.19952417199152073, 0.20487733847714384, 0.191245994880907, 0.21028774811900453, 0.1882371133272367, 0.19977226386548796, 0.20622062998729707, 0.17312500006430276, 0.177979366733924, 0.1898866118644984, 0.1824457103487792, 0.21293245848244413, 0.24237312299941927, 0.18078279780348927, 0.21200812174099115, 0.24075497664608614, 0.21523551947316133, 0.20551758041393886, 0.18610350881959548, 0.7911207903748604, 0.8707358315996814, 0.8819459308019771, 0.801956687982251, 0.35886827494967166, 0.1857201360963563, 0.165644745862092, 0.16106370759352062, 0.4605997838849214, 0.20391721614466496, 0.35615466663345063, 0.4936395468525667, 0.16182337063515528, 0.11804301221866209, 0.293964455956508, 0.11081201572861554, 0.15754894542281184, 0.17982874638984614, 0.1719659202195165, 0.1646819610449627, 0.1711960504687704, 0.18867459923181717, 0.16966891488737146, 0.17387827583762905, 0.16630238822228116, 0.17809140176173555, 0.07672139452074933, 0.07547121142167834, 0.08557612807691417, 0.1039771341309006, 0.06948294897454421, 0.10304434265117302, 0.08533563887671336, 0.08502311230745163, 0.0834193203061302]}, "mutation_prompt": null}
{"id": "c05ce209-8c58-4a63-b55c-5e14f2549cbe", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.5\n        self.F = 0.5\n        self.NP = 10\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3])\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                else:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            \n            # Dynamic adaptation of mutation factor F\n            self.F = max(0.1, min(0.9, self.F + np.random.normal(0, 0.1)))\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhancing the mutation strategy by incorporating a dynamic adaptation mechanism to adjust the mutation factor F during optimization.", "configspace": "", "generation": 1, "fitness": 0.24636117028455026, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "4e4d100d-1416-4a6f-96f4-9e8a0d2f8560", "metadata": {"aucs": [0.8578747840214365, 0.7921166317770504, 0.37723265036122644, 0.8450829250914287, 0.6169982872075612, 0.21208050831027214, 0.8422503436640854, 0.5994309952756143, 0.3466945978212155, 0.7206613274041003, 0.7757345617283571, 9.999999999998899e-05, 0.6793685303973811, 0.5551733637826084, 9.999999999998899e-05, 0.7246325951324284, 0.7591300513523767, 0.07029580874619801, 0.5460461356472739, 0.1234393863568839, 0.13923005137941524, 0.1420023625430773, 0.0888330872080001, 0.12006249495619137, 0.5699901709427653, 0.11699903775962395, 0.13070543368140586, 0.12303730166441673, 0.0422468639147322, 0.12988402456422932, 0.17631321074103268, 0.06665772313988638, 0.14035764644919968, 0.1157098644299418, 0.09620879911138724, 0.13696616092630154, 0.9713381771203359, 0.6213799586674154, 0.9543912390506221, 0.975259651341105, 0.964157689124123, 0.979764089539618, 0.9760831675682495, 0.7590479174922264, 0.9552959345363475, 0.5228545773040809, 0.013032659158257798, 0.14115393103927365, 0.39912621148224103, 0.2210762069360248, 0.08650113193852504, 0.3928820558477194, 0.08153549525649195, 0.14409778702641818, 0.43116671965986975, 0.10833308525030949, 0.22093549608590768, 0.8047275821992317, 0.09272142272827855, 0.17545113501567344, 0.6310427222889368, 0.11181797935116988, 0.14439831873229447, 0.192637686258176, 0.14533360450843757, 0.16071258616091377, 0.24115969883385957, 9.999999999998899e-05, 0.17740673051203248, 0.14251616229530517, 0.31883086982921427, 0.032548746782253724, 0.17016187066717703, 0.09447076682891897, 0.131541998690344, 0.24032385089136388, 0.15037941166917512, 0.11496419798559088, 0.17818331342993554, 0.13909439520807976, 0.2814070623716075, 9.999999999998899e-05, 0.037939806456311675, 9.999999999998899e-05, 9.999999999998899e-05, 0.025448412046530033, 9.999999999998899e-05, 0.04287679452722892, 9.999999999998899e-05, 0.08242884228523506, 0.12931115685927375, 0.052778572951213576, 0.10747598419931514, 0.06534388315803519, 0.07645413106381838, 0.0411813430164053, 0.15957865591615117, 0.10103881907732248, 0.04715912927328225, 0.16773658795174728, 0.022924491096344868, 9.999999999998899e-05, 0.12483053712750225, 0.15160369479747948, 0.013936892202160878, 0.14932085584617705, 0.1778885165419033, 9.999999999998899e-05, 0.16722247020201286, 0.11031233277163732, 0.05565498764284493, 0.15244537549442594, 0.1269719622358545, 0.04398955274611194, 0.10523959968034646, 0.11588266371754818, 0.0699148773399253, 0.5226380721463607, 0.4593212669712047, 0.2696361815416959, 0.5143268440390478, 0.5106474403138588, 0.42293412220178683, 0.616326198916048, 0.5081404778619107, 0.20857576463333016, 0.07168555558367751, 0.12686141777140036, 0.10451528136414512, 0.12209930220358334, 0.13197483569790658, 0.08922258976346853, 0.11049038150673673, 0.1395906253178173, 0.10793889015153912, 0.10661069553177949, 0.1255784783311643, 0.16396153677085878, 0.1509888980293317, 0.13358013935114577, 0.27390780094853695, 0.11047198027883331, 0.12899182063466919, 0.18733901666872632, 0.4200278367914838, 0.2727292711978243, 0.263873734328523, 0.37669749411549014, 0.22553075868919192, 0.22098988760694172, 0.3534155253673823, 0.27190771544887604, 0.22170539180861448, 0.28189955175870296, 0.24997391040916117, 0.13449492472931002, 0.2931374138693049, 0.2018094646572688, 0.2455781484111994, 0.24299993861997227, 0.3659709769644631, 0.1545258468697258, 0.19008289335393502, 0.194315222853771, 0.21983725692901868, 0.19251831250464124, 0.19188224178896485, 0.2069692538220217, 0.1981193498146656, 0.20297754864819062, 0.21063299114161504, 0.20360134461958845, 0.1942073001465484, 0.17538952535359675, 0.2328211557257831, 0.20122894690607562, 0.17700454339667626, 0.21272751559430814, 0.17980269438189622, 0.21042898592917436, 0.18487826769237303, 0.1987723710410898, 0.1856364199372419, 0.8740922489853733, 0.19573340237667747, 0.4695027633044684, 0.15117484461634867, 0.17214186812410348, 0.15186733967331822, 0.41255083029347484, 0.10731276286452707, 0.21655167151910837, 0.6750441065921764, 0.12017113173800187, 0.2031994595115416, 0.17129162950733134, 0.1510169616538909, 0.14963365378796512, 0.1720782816740517, 0.17785617329393022, 0.2196414760125277, 0.166837384590104, 0.16583164254470462, 0.16989738597891335, 0.17490885545181223, 0.17255977261504396, 0.1795844839464733, 0.06544935673216279, 0.08541762187145163, 0.08114677629986167, 0.09886283920391181, 0.07738744829853494, 0.059695726396199134, 0.07720493626254699, 0.078451786976238, 0.09387467063452115]}, "mutation_prompt": null}
{"id": "19f55d57-ca05-4f72-907e-d2304793dc86", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.5\n        self.F = 0.5\n        self.NP = 10\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3])\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                else:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "AdaptiveDE", "description": "An adaptive differential evolution algorithm that dynamically adjusts its strategies and parameters during optimization to effectively explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "4e4d100d-1416-4a6f-96f4-9e8a0d2f8560", "metadata": {"aucs": [0.7799192219942593, 0.8623295876014947, 0.9118866925083066, 0.8863377158025478, 0.6679768229395813, 0.8779215741005497, 0.9057777726751952, 0.8830935456444118, 0.8988729413552163, 0.21923003107340822, 0.7797633197122559, 0.7476058971841404, 0.793130295082797, 0.7855655421487424, 9.999999999998899e-05, 0.766032330699213, 0.7904082774114958, 0.42261241136292627, 0.1525730307494828, 0.15232111119164515, 0.08698511486295524, 0.2688731018503421, 0.12322043803953897, 0.7863489535508068, 0.12640128837433262, 0.1230719673402173, 0.17489918814653793, 0.144451156911093, 0.1153390136433281, 0.12189127732948912, 0.12756376193698038, 0.1470808690129074, 0.035283543608267576, 0.748923702689414, 0.1435287675001835, 0.1288896590168046, 0.9510686208382506, 0.9696054746481124, 0.9265961375966021, 0.9717809880190028, 0.9695350337284779, 0.9848162795637916, 0.9210217160111096, 0.21580289287262489, 0.9765575117811458, 0.11292091339789934, 0.4138434833347927, 0.325848663128806, 0.11231696959680226, 0.20686476161860712, 0.2938280427237997, 0.10912031683858314, 0.253157118237457, 0.20612658537557105, 0.22263447595721664, 0.20596340358129972, 0.22768654886608009, 0.3268832963671384, 0.20961349253684636, 0.11680264986380684, 0.17048252992942892, 0.22626656364303022, 0.2289341534944801, 0.15218101081100976, 0.007232309741659115, 0.139463717534844, 0.14799947303248195, 0.1769502344699998, 0.13501540928842914, 0.20771270449449453, 0.13015489873986952, 0.13888024347612826, 0.14152260983565834, 0.09759207161743433, 0.12775343420587693, 0.22182716815201275, 0.3488349579709791, 0.14833072026951233, 0.1568539399629244, 0.14116291527032188, 0.15840466849788515, 0.039352157870670035, 0.12182025038282196, 0.04056343875871693, 0.006440348390172934, 0.019888274689088048, 9.999999999998899e-05, 0.0035976083317899032, 0.0010985012160706908, 0.11209050856206393, 0.0625016878833694, 0.04963325802337071, 0.11399940982799839, 0.09475136146308782, 0.009288515858482227, 0.045471525241744915, 0.09760037087016571, 0.09781557460860146, 0.1327951474617104, 0.12692074997139569, 0.05553099791572258, 0.13710485329311572, 0.059721253792098805, 0.1636921565951912, 0.08664803748152483, 0.010357061679250767, 0.12833972883894695, 0.02495299688794972, 0.21564037247523815, 0.08279252413826721, 0.18142912717581872, 0.17553014303105463, 0.11800368000081762, 0.11320463475656883, 0.07493389855957344, 0.19773608533891807, 0.049152012988619154, 0.5555727903611833, 0.5538313724723072, 0.4627498250085017, 0.3665300966521038, 0.5064804373054075, 0.24717835717242276, 0.45874447143782515, 0.5390882173335072, 0.3904850318090676, 0.28389478337130547, 0.09597254120507337, 0.060776909607215046, 0.08943976721409652, 0.0943565107904657, 0.10644440074205974, 0.09328281691720552, 0.08845437309251303, 0.11062692070354119, 0.12672209884408203, 0.12356472548153308, 0.1911086254868577, 0.13136037269464995, 0.14680027538322138, 0.13421316795074267, 0.1502407467249135, 0.14051137171950412, 0.13938051923840744, 0.44118067379236003, 0.29111443828193073, 0.4620055342131917, 0.424831762723641, 0.21025563007720816, 0.28806998705547626, 0.38380144498834656, 0.2475799217044582, 0.26693975571840844, 0.19250303249352174, 0.21129450076256961, 0.11946272854279882, 0.35470282086808425, 0.1816480570578195, 0.25648520200352154, 0.1707783858495734, 0.18176276361185517, 0.25604509557265853, 0.19952417199152073, 0.20487733847714384, 0.191245994880907, 0.21028774811900453, 0.1882371133272367, 0.19977226386548796, 0.20622062998729707, 0.17312500006430276, 0.177979366733924, 0.1898866118644984, 0.1824457103487792, 0.21293245848244413, 0.24237312299941927, 0.18078279780348927, 0.21200812174099115, 0.24075497664608614, 0.21523551947316133, 0.20551758041393886, 0.18610350881959548, 0.7911207903748604, 0.8707358315996814, 0.8819459308019771, 0.801956687982251, 0.35886827494967166, 0.1857201360963563, 0.165644745862092, 0.16106370759352062, 0.4605997838849214, 0.20391721614466496, 0.35615466663345063, 0.4936395468525667, 0.16182337063515528, 0.11804301221866209, 0.293964455956508, 0.11081201572861554, 0.15754894542281184, 0.17982874638984614, 0.1719659202195165, 0.1646819610449627, 0.1711960504687704, 0.18867459923181717, 0.16966891488737146, 0.17387827583762905, 0.16630238822228116, 0.17809140176173555, 0.07672139452074933, 0.07547121142167834, 0.08557612807691417, 0.1039771341309006, 0.06948294897454421, 0.10304434265117302, 0.08533563887671336, 0.08502311230745163, 0.0834193203061302]}, "mutation_prompt": null}
{"id": "8d4e320e-e85b-4af7-b226-b06c228f7dec", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.5\n        self.F = 0.5\n        self.NP_min = 5\n        self.NP_max = 20\n\n    def __call__(self, func):\n        def generate_population(NP):\n            return np.random.uniform(-5.0, 5.0, size=(NP, self.dim))\n\n        NP = self.NP_min\n        population = generate_population(NP)\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(NP):\n                idxs = [idx for idx in range(NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3])\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                else:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n            avg_fitness = np.mean([func(ind) for ind in population])\n            NP = min(self.NP_max, max(self.NP_min, int(NP * (1 + (avg_fitness - func(best_solution)) / (avg_fitness + 1e-10))))\n\n        return best_solution", "name": "ImprovedAdaptiveDE", "description": "Improved AdaptiveDE algorithm by introducing a dynamic population size adaptation mechanism based on fitness evaluation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 50, 9, '        return best_solution\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 50, 9, '        return best_solution\\n'))", "parent_id": "4e4d100d-1416-4a6f-96f4-9e8a0d2f8560", "metadata": {}, "mutation_prompt": null}
{"id": "567e2a27-3779-4b44-a23a-c8b05554f276", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.5\n        self.F = 0.5\n        self.NP = 10\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3])\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                else:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n            # Dynamic population size adjustment\n            fitness_scores = [func(ind) for ind in population]\n            mean_fitness = np.mean(fitness_scores)\n            if mean_fitness != 0:\n                self.NP = int(np.clip(10 * np.std(fitness_scores) / mean_fitness, 2, 50))\n                population = np.vstack([population, generate_population()[:50 - self.NP]])\n                self.NP = 50\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhanced AdaptiveDE algorithm by incorporating a dynamic population size adjustment strategy based on individual fitness.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 48 is out of bounds for axis 0 with size 12').", "error": "IndexError('index 48 is out of bounds for axis 0 with size 12')", "parent_id": "4e4d100d-1416-4a6f-96f4-9e8a0d2f8560", "metadata": {}, "mutation_prompt": null}
{"id": "d2fb5294-0dc7-40f0-9fb1-90ab34d69ac2", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.CR = 0.5\n        self.F = 0.5\n        self.NP = 10\n\n    def crowding_distance(self, population):\n        distances = np.zeros(len(population))\n        sorted_indices = np.argsort([func(ind) for ind in population])\n        distances[sorted_indices[0]] = distances[sorted_indices[-1]] = np.inf\n        for i in range(1, len(population) - 1):\n            distances[sorted_indices[i]] += np.linalg.norm(population[sorted_indices[i+1]] - population[sorted_indices[i-1]])\n        return distances\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            distances = self.crowding_distance(population)\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3])\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                else:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                elif func(trial_ind) < func(population[i]) or distances[i] > np.median(distances):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "ImprovedAdaptiveDE", "description": "Improving diversity maintenance by introducing crowding distance-based selection for better exploration.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "4e4d100d-1416-4a6f-96f4-9e8a0d2f8560", "metadata": {}, "mutation_prompt": null}
{"id": "7371a5f2-aef0-4515-a4a2-c12c7eb53677", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution) + self.F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhancing the diversity of the population by introducing a new mutation strategy to explore different regions of the search space.", "configspace": "", "generation": 6, "fitness": 0.2993826197419272, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "4e4d100d-1416-4a6f-96f4-9e8a0d2f8560", "metadata": {"aucs": [0.8689889795105712, 0.8608441109156582, 0.8724946390981818, 0.8715245508223631, 0.8613412430338573, 0.8745967898698431, 0.8451416246465903, 0.8868445531167123, 0.8711520366107984, 0.7376916771777409, 0.5943198265221186, 0.6899507738384575, 0.7902959960458389, 0.7626749517372008, 0.7452623539647807, 0.6928313899457166, 0.6859363812298268, 0.7627271064176808, 0.14800913919571645, 0.15024550402615422, 0.17364837549652168, 0.13897269125131317, 0.1801161737432041, 0.10729492050651623, 0.16595262734391691, 0.14312484736254538, 0.12078111876532549, 0.14712807118332005, 0.16187595038574631, 0.11408230096683969, 0.11512098857516206, 0.13567179283992736, 0.14258013083936816, 0.17054451795259462, 0.11206975475716097, 0.09246811032584845, 0.9786569369712604, 0.9745681172344719, 0.9660115894496049, 0.9550384420231902, 0.9679480560866438, 0.9587899029521023, 0.9664081968102821, 0.9760177570616488, 0.9483895079606188, 0.25211289116802227, 0.2901372737504331, 0.21666501132759997, 0.37333051469001444, 0.31562858339192035, 0.3254915090890851, 0.5589057641195209, 0.2903521985139228, 0.3060762710018997, 0.7822000933248002, 0.20004923932255625, 0.6714664636066635, 0.5808498432154192, 0.3258504701078133, 0.3506889669405078, 0.3226538647775735, 0.3682850023223354, 0.1614030241620208, 0.20685529888459064, 0.19305885198607098, 0.15025272735119033, 0.15507268146909414, 0.1275823939575017, 0.22434391283779687, 0.1453749702357391, 0.12780060677494798, 0.14992856145118216, 0.15330042973188407, 0.12620167655744186, 0.14700572419420166, 0.29756655338313254, 0.18824010121125057, 0.17831386863817755, 0.18508971565358778, 0.15185480601641244, 0.1229084441757039, 0.0042973476150954815, 0.00022903008788921486, 0.022789831357579393, 0.06289749821699242, 0.023893956652396797, 0.00644708677325756, 0.01795297716356059, 9.999999999998899e-05, 0.05187916193353104, 0.24688870604300306, 0.11332019116523462, 0.11736277678544937, 0.07272784132531507, 0.01585227935837774, 0.04922798415106555, 0.07330119269127244, 0.028896552398066877, 0.04592240335221798, 0.08807592429541622, 0.040343315224468324, 0.2038279782028536, 0.10378749631034134, 0.12611011591765342, 0.11155978516657761, 0.08792934267601904, 0.08959604246503983, 0.047015979643439065, 0.10871641891421546, 0.26154201445103087, 0.14899948107845684, 0.19838155843410654, 0.20816010342456326, 0.18288737528676025, 0.17892381518702438, 0.2528484203151822, 0.10564091555486887, 0.516113075157977, 0.380310488537453, 0.5982847032619167, 0.5185644713140805, 0.5615861116770076, 0.5148241839139076, 0.525568478343831, 0.49239132518375417, 0.5607886878023594, 0.10275232374865295, 0.11661773689667221, 0.18777719233220336, 0.09524323279846225, 0.1034416819952414, 0.0770207468770916, 0.09203825272576838, 0.09734974222681958, 0.10752820516104422, 0.15180714073292656, 0.1349155726829766, 0.13416920403552468, 0.11785359699703313, 0.12370585534738077, 0.1425727891313472, 0.11634278663658804, 0.11989246719812385, 0.12436566935964533, 0.3896383239960115, 0.35676237963106117, 0.28481233858503696, 0.4579803647606232, 0.48714787100150214, 0.4019310004975106, 0.5084379344010743, 0.4019372298254318, 0.23338821891708872, 0.2305216193638776, 0.28039538795474217, 0.15945802209244542, 0.31656220005135316, 0.1727107218588515, 0.23651627061223224, 0.23159989273285242, 0.2229916161122737, 0.19441849010982304, 0.1854721985030674, 0.1990379382453602, 0.20058809829492374, 0.19343349232681906, 0.16421634775178495, 0.18432815182893925, 0.18804404476846015, 0.1834877541181309, 0.17924655997539374, 0.23978976972028532, 0.21571902121562803, 0.24560468957771886, 0.21001316375919743, 0.24345614595127352, 0.2167584514810349, 0.21528540529089235, 0.5551075954186697, 0.2062636068343171, 0.8775956403112405, 0.1755998034346813, 0.629562659874839, 0.8785469888950921, 0.18875056953458225, 0.1622146936112231, 0.5112857958554731, 0.5893256644622862, 0.1671414020755878, 0.7041995096889262, 0.3885219563193939, 0.461469231809598, 0.15606669009985907, 0.19515786912030575, 0.207205957264042, 0.6580657127484495, 0.19517157308635769, 0.1614862572507052, 0.16579076763669331, 0.1603105468311249, 0.18260994610567716, 0.17936904989923386, 0.16453993024901592, 0.15888565357886508, 0.18432169853453073, 0.17320988854788244, 0.1589710509243334, 0.0721391800289457, 0.08075583258054997, 0.07606586845176555, 0.07523469629821777, 0.06841032138956593, 0.07544291051246677, 0.08865176080883708, 0.08359331284058646, 0.09672171842260013]}, "mutation_prompt": null}
{"id": "ad8fabda-c9ae-4887-b0a9-d7403bda16f6", "solution": "class EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.success_rate = 0.5  # Initialize success rate\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                if strategy == 0:\n                    F_mut = self.F  # Original DE mutation factor\n                else:\n                    F_mut = self.F * np.random.uniform(0.5, 1.0) + 0.5 * np.random.uniform(0, 0.5)  # Adaptive mutation factor\n\n                if strategy == 0:\n                    mutant = population[a] + F_mut * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F_mut * (population[b] - population[c]) + F_mut * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F_mut * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F_mut * (population[a] - best_solution) + F_mut * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F_mut * (population[b] - population[c]) + F_mut * (population[a] - best_solution) + F_mut * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                    self.success_rate = 0.2 * 1 + 0.8 * self.success_rate  # Update success rate\n                else:\n                    trial_population.append(population[i])\n                    self.success_rate = 0.2 * 0 + 0.8 * self.success_rate  # Update success rate\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Introducing adaptive control of mutation parameters based on the success rate of current solutions, improving exploration and exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.290633388815574, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "7371a5f2-aef0-4515-a4a2-c12c7eb53677", "metadata": {"aucs": [0.8794189030484335, 0.8396652634444275, 0.88945241184648, 0.8693257825375558, 0.7855791618143535, 0.8665147400620479, 0.8789950534635799, 0.8376306155288945, 0.8753616337144388, 0.802048142284323, 0.5713588197480348, 0.7805567571630444, 0.8039002491547842, 0.7658644572300946, 0.7473933776674876, 0.775345579960387, 0.6763510724283088, 0.7796711441025309, 0.1458881656481058, 0.14694205414129646, 0.14802565891246144, 0.6165296773473617, 0.7141667169162935, 0.17558111570000945, 0.14947885148446238, 0.6693138381902595, 0.7398594771204023, 0.1252092591478473, 0.13899944156477562, 0.09123867492559568, 0.15875473316926203, 0.1470941405536763, 0.06146744661769099, 0.15224524064081757, 0.13007292987635033, 0.09202408862613842, 0.966354433619437, 0.9680998453107506, 0.9667442164138462, 0.954922475795438, 0.9762330244491733, 0.9773728816431044, 0.941989055771858, 0.9727354369997284, 0.9643935586026139, 0.31608698746945074, 0.31875678143675934, 0.36611233165854407, 0.5162109501255965, 0.5380840084533444, 0.48771293718238673, 0.27004668582076286, 0.1677154142177738, 0.2773882998991182, 0.3531767329719735, 0.11088566522349452, 0.35499106513745404, 0.40805726678898924, 0.3492176944942057, 0.18957894028243993, 0.15866452918240626, 0.2267303228337757, 0.2287806012386575, 0.16586002830745183, 0.1514174819434846, 0.17007105701100844, 0.42361128739873044, 9.999999999998899e-05, 0.17940271757958492, 0.1586514698378333, 0.2413718541409028, 0.12655373166890949, 0.21423454487357563, 0.16933358465957304, 0.13938898381436715, 0.15582161396071093, 0.12654275417716832, 0.13014213751770454, 0.15297577072675161, 0.1326424672178409, 0.2009248171650706, 9.999999999998899e-05, 9.999999999998899e-05, 0.036593048761814906, 0.020147185802401713, 0.00793554242347605, 9.999999999998899e-05, 0.054779642679643636, 0.06219928123121554, 0.08351437585389265, 0.0699788828318606, 0.07802991545454352, 0.13617506626093567, 0.05205499210447884, 0.04991081125502517, 0.08180648747954378, 0.05382635478503894, 0.08590617643042442, 0.04813061265434149, 0.13848242165572955, 0.11588270900758957, 0.2107713244410454, 0.07917008275221193, 0.1449041397613814, 0.03328810858695108, 0.051896810885413314, 0.08480742427435817, 0.04900680801931645, 0.02173270503319613, 0.16241078861867864, 0.3218595008840178, 0.1728879829994876, 0.14129085284904142, 0.048081316950988495, 0.1147653912933132, 0.14083131848876018, 0.06252166219891164, 0.5109273049030083, 0.5252921254444234, 0.452242982760368, 0.5087868148241383, 0.5308477590433502, 0.5375011209502939, 0.5450637915163357, 0.3776319515201081, 0.35843873249917046, 0.11222319235780831, 0.11500865744076705, 0.13072711919108027, 0.09053894331526502, 0.11123744225956511, 0.10331972431639824, 0.09322076720668915, 0.09960554315404857, 0.08946761805355341, 0.12461879854106805, 0.11067816280934584, 0.12890942580628484, 0.15451243667052972, 0.12149973994976593, 0.22166107240538646, 0.14723405242463083, 0.10955270881989143, 0.14864462776493803, 0.24570552752615427, 0.35993870430152597, 0.39331725353855584, 0.42616774789574297, 0.2733251351967545, 0.435409105848681, 0.3758337319937899, 0.36899333135832035, 0.2445504603657529, 0.20560428705019285, 0.2775252616749918, 0.31073929657483024, 0.2891661818414596, 0.2354607001925222, 0.2779694342416801, 0.21419827824026128, 0.17501520494700595, 0.21998179255677464, 0.2004699150071173, 0.17981634611914088, 0.2149948863629645, 0.2017316077924418, 0.2099442971289025, 0.19285722341302036, 0.20319144725067306, 0.19617403589350835, 0.20991466696403427, 0.24381055484020786, 0.21436398275961932, 0.21038396247905033, 0.2106901153997115, 0.22484149146691346, 0.6030134001462945, 0.21393958756786646, 0.20205711770213097, 0.20462657561453546, 0.18458886152749143, 0.181055670160587, 0.17362564143958503, 0.9025683165482007, 0.19843644528168747, 0.1950694082757748, 0.7406483191599795, 0.15771786660864384, 0.1549628449600441, 0.20649358208972513, 0.40440741462809227, 0.18450252600809414, 0.1976038007690608, 0.1685695589338091, 0.14762657867345919, 0.6089718432891174, 0.14669235574291184, 0.09356399618903455, 0.19432810374855425, 0.17108867204989842, 0.16378290876388268, 0.17649337441264856, 0.16621323672926647, 0.16876609739904236, 0.18001454414788565, 0.17544900694748577, 0.15772027791598797, 0.08607606897681164, 0.08452881410709501, 0.0818701024567916, 0.09500474251228985, 0.06843682633911308, 0.08381715300458203, 0.07391656297027982, 0.07562320958428559, 0.09216914109665564]}, "mutation_prompt": null}
{"id": "bf417145-a077-4aec-9909-ebd0ea8d09d4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                distance = np.linalg.norm(population[a] - population[b])\n                dynamic_CR = max(0.1, min(0.9, 0.1 + 0.8 * (distance / 10.0)))  # Dynamic crossover rate based on distance\n\n                mutant = population[a] + self.F * (population[b] - population[c])\n                trial_ind = np.array([mutant[j] if np.random.rand() < dynamic_CR else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhancing the diversity by incorporating a dynamic mutation strategy based on the distance between individuals and a dynamically adjusted crossover rate.", "configspace": "", "generation": 8, "fitness": 0.23040563088750646, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "7371a5f2-aef0-4515-a4a2-c12c7eb53677", "metadata": {"aucs": [0.7395668355165872, 0.6965419709033773, 0.7461776080680181, 0.7454009292008368, 0.7273070480120287, 0.2317275712652358, 0.7633009881774038, 0.7370162946310391, 0.7266309318796769, 0.610174643512639, 0.027173458288313523, 0.592577198878562, 0.5760780635320564, 0.10723936214988095, 0.6145013132472092, 0.5478951775336751, 0.6005417053967982, 0.5976368817050347, 0.1676541974956397, 0.16989957709736225, 0.13832483845692933, 0.4446415470026033, 0.16683042653795055, 0.48926759513702467, 0.3756207876512877, 0.15275046110676815, 0.17556900762674377, 0.16135996397263275, 0.16344839325011362, 0.15136389603579614, 0.2558034830745648, 0.12873241009533454, 0.16557583735083714, 0.14681450672416996, 0.1722612203027185, 0.09601848684909364, 0.8714909438157312, 0.9318981215546811, 0.8742595867871903, 0.9486510080683588, 0.9776844065524519, 0.9163467453608505, 0.890853388498837, 0.9740109585508102, 0.9398090563287025, 0.12929798521856029, 0.07547008088896112, 0.20756833247882833, 0.13508642865060005, 0.18630615999256062, 0.19334481566723238, 0.20690273266799042, 0.12608943604487555, 0.1337188603407523, 0.22855110345456975, 0.10564529465459016, 0.1954337114491147, 0.254631508001252, 0.2428941550342515, 0.27856207701369806, 0.22380950640415354, 0.21057537877927124, 0.22102932943666775, 0.17102360084313062, 0.15983453079490173, 0.16415123398235498, 0.1739291603593479, 0.10361361532762492, 0.1634024645946116, 0.21541468529328, 0.1414884999437751, 0.21579805863612223, 0.1333048405994558, 0.1109916430357607, 0.13849184263253977, 0.1600746920367221, 0.13226611683259126, 0.14396922691682734, 0.14251342347450247, 0.08198661521806005, 0.12428798648742012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024399135830616148, 0.021181648969991307, 9.999999999998899e-05, 0.03686723737373154, 0.08237602748964779, 0.07704300995408653, 0.1089163601928671, 0.11541785926755599, 0.05823209721352618, 0.05997535779386909, 0.12715972994230706, 0.11116086287966087, 0.15299578719867446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00217574868006154, 0.0004255693426890028, 0.013998823486386036, 0.08046506047279689, 0.07805839007206616, 0.07201460919909186, 0.03317766342406758, 0.11941180227551706, 0.051479040665778686, 0.08411100151303674, 0.04471228689903528, 0.05506436090099265, 0.4272292700961954, 0.39855115428672194, 0.42582855391948793, 0.27937675601535905, 0.4260387887753815, 0.39797278608889597, 0.38560572567948304, 0.37834609335187785, 0.41766755406935097, 0.08159811563060904, 0.09487014672516525, 0.08970425514078872, 0.0899824828640714, 0.09825789041652733, 0.09216358219483756, 0.07570495767522045, 0.0727238434272589, 0.08268987441425235, 0.1484967891304102, 0.13191771094285287, 0.14527817271251753, 0.12114415585375204, 0.10855421244996977, 0.1678659873561701, 0.13029472774568063, 0.1378302736294359, 0.1771901142549468, 0.23043407162482588, 0.2600497989041113, 0.2672818779000391, 0.22333147322794988, 0.2491870186165419, 0.2286254734972596, 0.2528111742909136, 0.29245105015002715, 0.22359421814357816, 0.13735072259165593, 0.18687932810802999, 0.15902340908595847, 0.1799196956848811, 0.1888218595935207, 0.178054734812638, 0.19609167264223237, 0.20129633798776192, 0.16021378295408262, 0.19315642374844488, 0.18349032300688473, 0.205150959544391, 0.20177092438880095, 0.19260168795012578, 0.167673732170442, 0.1782253036101138, 0.18841397265378723, 0.1858975091758478, 0.23810316884144245, 0.20295253486861098, 0.23008794988827952, 0.23413831926593853, 0.19098694005459282, 0.21626220770583504, 0.2258499244373251, 0.20266180416695212, 0.2166586030157428, 0.1758413359230402, 0.176056894062653, 0.18084440036186744, 0.5386017398159415, 0.47344969032688844, 0.3561259079925909, 0.5361836531461863, 0.16283200182532076, 0.15119132494212895, 0.3234381073414204, 0.17939870442753614, 0.19827234162257334, 0.19097827195629324, 0.10918630018549169, 0.14400717364585147, 0.16290609252424582, 0.1648212291838227, 0.14733476654002298, 0.18386012170238797, 0.17382791719168023, 0.16883309645481548, 0.17648046283049368, 0.17299067555418535, 0.19950902760166966, 0.17827542482295178, 0.17022312648247173, 0.16089240019916817, 0.08383025637494101, 0.07273597171555812, 0.08464586622190384, 0.08117394816500634, 0.07891444309744133, 0.08962225005652746, 0.07245663967987526, 0.07262029177793228, 0.06692223763070904]}, "mutation_prompt": null}
{"id": "12b5f3fb-d91a-4c5a-81f4-b469eec4cae5", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_probs = np.random.rand(5)  # Initialize mutation probabilities\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4], p=self.mutation_probs)  # Use mutation probabilities\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution) + self.F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n            # Update mutation probabilities based on population performance\n            mean_fitness = np.mean([func(ind) for ind in population])\n            self.mutation_probs = np.maximum(self.mutation_probs + 0.1 * (mean_fitness - func(best_solution)), 0.1)\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Improving mutation diversity by dynamically adjusting mutation probabilities based on population performance.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities do not sum to 1').", "error": "ValueError('probabilities do not sum to 1')", "parent_id": "7371a5f2-aef0-4515-a4a2-c12c7eb53677", "metadata": {}, "mutation_prompt": null}
{"id": "7e3ee73f-1e2e-457a-87de-f74638f0f814", "solution": "class EnhancedDynamicAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_probs = np.full(self.NP, 0.5)  # Initialize mutation probabilities\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution) + self.F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.mutation_probs[i] or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                    self.mutation_probs[i] *= 1.1  # Increase mutation probability for successful individuals\n                else:\n                    trial_population.append(population[i])\n                    self.mutation_probs[i] *= 0.9  # Decrease mutation probability for unsuccessful individuals\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedDynamicAdaptiveDE", "description": "Introducing a dynamic adaptation of mutation probability based on individual performance to improve convergence speed.", "configspace": "", "generation": 10, "fitness": 0.2641444838787677, "feedback": "The algorithm EnhancedDynamicAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.26.", "error": "", "parent_id": "7371a5f2-aef0-4515-a4a2-c12c7eb53677", "metadata": {"aucs": [0.8619360615867498, 0.8583847914862115, 0.8735551200158459, 0.8253836794839432, 0.8596891044317965, 0.8537676639921551, 0.8332898917338407, 0.8496492082484632, 0.8775495937058038, 0.7090743946147381, 0.7548861647269374, 0.716007387136298, 0.719490362849975, 0.7435947360012019, 0.7398399593238686, 0.7789529735372389, 0.7239623595684005, 0.7561838978485319, 0.6437973269081902, 0.6506954123019202, 0.6671784012470791, 0.17509757656527158, 0.18184568607310314, 0.6817875837165461, 0.17805078312228084, 0.170113735808744, 0.683011516132046, 0.17718105107720727, 0.06975661638946529, 0.16978070154369396, 0.6229045124686508, 0.5524916042959205, 0.5931992987699118, 0.17486365025580963, 0.5949752025179269, 0.1702119981722714, 0.9786014405463781, 0.9770584956151358, 0.971660994194874, 0.9552171427205246, 0.9691314476407176, 0.9515100303373131, 0.9593587563817775, 0.9801006265637394, 0.9210317228073202, 0.2269993723463275, 0.16244175339092648, 0.15401561626504157, 0.21900614705630383, 0.17266783946082054, 0.232795257240618, 0.2489084828503334, 0.16120543086003947, 0.18007987282150228, 0.20727671859978503, 0.10598339226301845, 0.13345445531641653, 0.22247672663273577, 0.16336683192858636, 0.24798103665569915, 0.20897027232889376, 0.16496675530530813, 0.22065510247505127, 0.1467276063051195, 0.14869498738826692, 0.22299754212970724, 0.1345559215009391, 0.21960071819762195, 0.21918725358248425, 0.12239520381744462, 0.14042520218287136, 0.159258524868231, 0.1298546170115369, 0.11763789219541554, 0.14336111403405194, 0.14685254307476447, 0.14721027927219343, 0.15404719546654322, 0.13297296937796577, 0.009400953322624472, 0.1469464813827417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0650796030810552, 0.022272082763455936, 0.06062923996233893, 0.07647387277737705, 0.04157998752101122, 0.03596566407203117, 0.06709374137132817, 0.002784042849784618, 0.0761145756633792, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006504893457598415, 0.11237889666644185, 9.999999999998899e-05, 0.015295403527572637, 0.0030091556841607137, 0.07890916476432797, 9.999999999998899e-05, 0.08617636793757444, 0.07191684433232226, 0.11204956419502765, 0.13261462588356465, 0.08691034539955111, 0.10206125075651196, 0.13195651699707156, 0.10302018098182975, 0.0853689064335651, 0.47552736270345886, 0.42812651058251705, 0.4455995661893639, 0.4143687172543633, 0.40403904130897617, 0.42186811548936853, 0.4087763030291981, 0.41015477012680335, 0.47544137875311454, 0.08865042999273864, 0.10548161382293197, 0.07470433276528365, 0.10446892594862334, 0.08377658537193822, 0.08231944408144787, 0.08758453984431813, 0.0922063721020906, 0.08962645302758032, 0.1764904029176816, 0.13731468258573154, 0.18264021977453004, 0.14761168258278268, 0.13051863936865216, 0.13626460635808801, 0.12388701286814408, 0.14159132461366675, 0.13695285475441565, 0.20197377335019717, 0.20473213638831156, 0.15998713858416047, 0.2417886717893254, 0.22302889203134368, 0.23095116542760585, 0.252894993677624, 0.21978471991431137, 0.19762612895196774, 0.15126373617508704, 0.20803032565726942, 0.11960235464036573, 0.18445323699498084, 0.1334849292508763, 0.18210895207560795, 0.17204726816570293, 0.2144243803686574, 0.15817679469481483, 0.1917307593673031, 0.19735968217326927, 0.1774084648786749, 0.19076351858779872, 0.17259757769739625, 0.19695353803467774, 0.19650443178814425, 0.16467870611489654, 0.2056382550327105, 0.22527252956433197, 0.20397655799467906, 0.22322126773025253, 0.23109298094594188, 0.2460812590591076, 0.18893403832096756, 0.20899430377933126, 0.19475700496336645, 0.19514358627176964, 0.3270910105260181, 0.19304996087878157, 0.27714326341067386, 0.34225672708919586, 0.2286594053980503, 0.1892454425343021, 0.2097847888754787, 0.16042609544095343, 0.20835484736897514, 0.3325155500902185, 0.21985684427600083, 0.15800808051228254, 0.16051484520281534, 0.14483345928482672, 0.18847141183343075, 0.13710640937079732, 0.1497743644338565, 0.18728982198968347, 0.17133147022441375, 0.18174323219036737, 0.18233462451996885, 0.17688032276221444, 0.15884826442419397, 0.17809678282469632, 0.1702423010077948, 0.18651019959412674, 0.1847702274023797, 0.07152207986567194, 0.07046465325595219, 0.07830129313326739, 0.10303953569638413, 0.07589206432764983, 0.09041897586081671, 0.0857743430809722, 0.08676072812126134, 0.1116358860039407]}, "mutation_prompt": null}
{"id": "1d01dca2-3148-4582-8a9c-77a63cb128f8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution) + self.F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhancing the diversity of the population by introducing a new mutation strategy to explore different regions of the search space.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7371a5f2-aef0-4515-a4a2-c12c7eb53677", "metadata": {"aucs": [0.8689889795105712, 0.8608441109156582, 0.8724946390981818, 0.8715245508223631, 0.8613412430338573, 0.8745967898698431, 0.8451416246465903, 0.8868445531167123, 0.8711520366107984, 0.7376916771777409, 0.5943198265221186, 0.6899507738384575, 0.7902959960458389, 0.7626749517372008, 0.7452623539647807, 0.6928313899457166, 0.6859363812298268, 0.7627271064176808, 0.14800913919571645, 0.15024550402615422, 0.17364837549652168, 0.13897269125131317, 0.1801161737432041, 0.10729492050651623, 0.16595262734391691, 0.14312484736254538, 0.12078111876532549, 0.14712807118332005, 0.16187595038574631, 0.11408230096683969, 0.11512098857516206, 0.13567179283992736, 0.14258013083936816, 0.17054451795259462, 0.11206975475716097, 0.09246811032584845, 0.9786569369712604, 0.9745681172344719, 0.9660115894496049, 0.9550384420231902, 0.9679480560866438, 0.9587899029521023, 0.9664081968102821, 0.9760177570616488, 0.9483895079606188, 0.25211289116802227, 0.2901372737504331, 0.21666501132759997, 0.37333051469001444, 0.31562858339192035, 0.3254915090890851, 0.5589057641195209, 0.2903521985139228, 0.3060762710018997, 0.7822000933248002, 0.20004923932255625, 0.6714664636066635, 0.5808498432154192, 0.3258504701078133, 0.3506889669405078, 0.3226538647775735, 0.3682850023223354, 0.1614030241620208, 0.20685529888459064, 0.19305885198607098, 0.15025272735119033, 0.15507268146909414, 0.1275823939575017, 0.22434391283779687, 0.1453749702357391, 0.12780060677494798, 0.14992856145118216, 0.15330042973188407, 0.12620167655744186, 0.14700572419420166, 0.29756655338313254, 0.18824010121125057, 0.17831386863817755, 0.18508971565358778, 0.15185480601641244, 0.1229084441757039, 0.0042973476150954815, 0.00022903008788921486, 0.022789831357579393, 0.06289749821699242, 0.023893956652396797, 0.00644708677325756, 0.01795297716356059, 9.999999999998899e-05, 0.05187916193353104, 0.24688870604300306, 0.11332019116523462, 0.11736277678544937, 0.07272784132531507, 0.01585227935837774, 0.04922798415106555, 0.07330119269127244, 0.028896552398066877, 0.04592240335221798, 0.08807592429541622, 0.040343315224468324, 0.2038279782028536, 0.10378749631034134, 0.12611011591765342, 0.11155978516657761, 0.08792934267601904, 0.08959604246503983, 0.047015979643439065, 0.10871641891421546, 0.26154201445103087, 0.14899948107845684, 0.19838155843410654, 0.20816010342456326, 0.18288737528676025, 0.17892381518702438, 0.2528484203151822, 0.10564091555486887, 0.516113075157977, 0.380310488537453, 0.5982847032619167, 0.5185644713140805, 0.5615861116770076, 0.5148241839139076, 0.525568478343831, 0.49239132518375417, 0.5607886878023594, 0.10275232374865295, 0.11661773689667221, 0.18777719233220336, 0.09524323279846225, 0.1034416819952414, 0.0770207468770916, 0.09203825272576838, 0.09734974222681958, 0.10752820516104422, 0.15180714073292656, 0.1349155726829766, 0.13416920403552468, 0.11785359699703313, 0.12370585534738077, 0.1425727891313472, 0.11634278663658804, 0.11989246719812385, 0.12436566935964533, 0.3896383239960115, 0.35676237963106117, 0.28481233858503696, 0.4579803647606232, 0.48714787100150214, 0.4019310004975106, 0.5084379344010743, 0.4019372298254318, 0.23338821891708872, 0.2305216193638776, 0.28039538795474217, 0.15945802209244542, 0.31656220005135316, 0.1727107218588515, 0.23651627061223224, 0.23159989273285242, 0.2229916161122737, 0.19441849010982304, 0.1854721985030674, 0.1990379382453602, 0.20058809829492374, 0.19343349232681906, 0.16421634775178495, 0.18432815182893925, 0.18804404476846015, 0.1834877541181309, 0.17924655997539374, 0.23978976972028532, 0.21571902121562803, 0.24560468957771886, 0.21001316375919743, 0.24345614595127352, 0.2167584514810349, 0.21528540529089235, 0.5551075954186697, 0.2062636068343171, 0.8775956403112405, 0.1755998034346813, 0.629562659874839, 0.8785469888950921, 0.18875056953458225, 0.1622146936112231, 0.5112857958554731, 0.5893256644622862, 0.1671414020755878, 0.7041995096889262, 0.3885219563193939, 0.461469231809598, 0.15606669009985907, 0.19515786912030575, 0.207205957264042, 0.6580657127484495, 0.19517157308635769, 0.1614862572507052, 0.16579076763669331, 0.1603105468311249, 0.18260994610567716, 0.17936904989923386, 0.16453993024901592, 0.15888565357886508, 0.18432169853453073, 0.17320988854788244, 0.1589710509243334, 0.0721391800289457, 0.08075583258054997, 0.07606586845176555, 0.07523469629821777, 0.06841032138956593, 0.07544291051246677, 0.08865176080883708, 0.08359331284058646, 0.09672171842260013]}, "mutation_prompt": null}
{"id": "fa9c7162-7676-4af9-90ba-c8791dac725a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.strategy_probabilities = np.ones(5) / 5  # Initialize with equal probabilities\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                \n                strategy = np.random.choice(np.arange(5), p=self.strategy_probabilities)  # Select strategy based on probabilities\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution) + self.F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n            # Update strategy probabilities based on performance\n            successful_strategies = np.where([func(trial_population[j]) < func(population[j]) for j in range(self.NP)])[0]\n            self.strategy_probabilities[successful_strategies] += 0.1\n            self.strategy_probabilities /= np.sum(self.strategy_probabilities)  # Normalize probabilities\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Introducing a dynamic adaptive mechanism to adjust the mutation strategy probabilities during optimization.", "configspace": "", "generation": 12, "fitness": 0.25068142889148826, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "7371a5f2-aef0-4515-a4a2-c12c7eb53677", "metadata": {"aucs": [0.7962889611126188, 0.7811772795642726, 0.7814123644422392, 0.7477193338241186, 0.7965199447458025, 0.10910055140104613, 0.7654359456263988, 0.754373997980935, 0.7921107053688474, 0.49819603565664383, 0.6085275580936249, 0.6486977375968275, 0.6341107675707784, 0.29177559414363674, 0.5686148604577674, 0.5280620841173913, 0.6599744197942339, 0.6461634953572712, 0.1475349072727299, 0.11345134281813885, 0.14012332781669956, 0.16348953617485873, 0.19363310092031416, 0.11920524013556255, 0.153704562116193, 0.4050479281289151, 0.4081502057656975, 0.11937764617760094, 0.145002634722338, 0.10238790851642043, 0.06714770174251805, 0.1433084226965866, 0.10040423684142241, 0.11403376720133496, 0.10413313811888725, 0.13338763110141938, 0.9682898138390448, 0.9717317915939885, 0.9628631502435598, 0.9429331043269547, 0.9719365062511669, 0.9404318330225683, 0.8895316246608047, 0.968355555588574, 0.8906548436432025, 0.3139285561891799, 0.3093776282258467, 0.13633264447321658, 0.25277052317460624, 0.27452954896088555, 0.16902919109164083, 0.18619417172039465, 0.33709771255550336, 0.14326224205102533, 0.21852641089866787, 0.308896367868845, 0.33515215710133484, 0.19242553749230928, 0.2492197790362648, 0.20286391385728075, 0.22125129248450315, 0.3020559810282637, 0.2047498255231477, 0.12679704611228682, 0.16386072539429064, 0.13201092478917342, 0.17681364034862124, 0.3531369333492359, 0.32250554502476614, 0.18007401265345657, 0.21856479293524134, 0.13506868004594086, 0.13872570631853598, 0.12233280549701142, 0.13782951642995012, 0.12035262670407032, 0.1541977516145353, 0.12085802961550474, 0.1372203732347148, 0.14724247596225082, 0.1264359909801831, 9.999999999998899e-05, 0.008267103754786898, 9.999999999998899e-05, 0.017034123335369022, 9.999999999998899e-05, 0.028323746120272886, 0.008979526808322258, 0.0020423243152725146, 9.999999999998899e-05, 0.0694366868306312, 0.0189263541024024, 0.029464884578946804, 0.10305925386395554, 0.036378028795294504, 0.0004541856822964929, 0.08984860443711062, 0.08523134435573998, 0.10140184391335183, 0.08841962122553737, 0.031221536312505682, 0.07777723988906693, 0.02681981453795801, 0.1452731712568317, 0.1305244130748795, 0.0556328297941483, 0.09939768176349917, 0.024640253428258818, 0.1586302148764227, 0.05731119611391389, 0.1410456020643147, 0.11805603112596397, 0.12940570065687573, 0.08455656696198788, 9.999999999998899e-05, 0.10157934170604621, 0.061131551271632945, 0.46926428074809834, 0.4718019508691692, 0.4505655486739004, 0.46721109638315217, 0.5068978087535613, 0.44044083732652606, 0.4742378282194756, 0.5044315990597592, 0.5454701055813298, 0.09712214228665383, 0.11233667009556048, 0.06725343385901328, 0.07508817573177007, 0.07730756702429975, 0.0989150505970321, 0.06403529448866863, 0.058956821294198214, 0.0655369292773641, 0.10671982753154008, 0.11241632370587917, 0.126555955140494, 0.14020931144466353, 0.11278235611603615, 0.10457754461217916, 0.11319326818141984, 0.11192551679011742, 0.0940556452255783, 0.23136070439476064, 0.24646915423250915, 0.3588275090462747, 0.2921341556066491, 0.3063879840851248, 0.23341194562866252, 0.1940819732347283, 0.28196229218602, 0.23647586641919116, 0.21715195300617396, 0.26859948759421404, 0.15990696690286643, 0.21182078112470226, 0.20370619116891475, 0.2253676179425841, 0.19080712705750325, 0.18544721516331097, 0.2135030225798702, 0.18599008675986728, 0.2096327441511896, 0.18294673698439212, 0.17742167301104494, 0.14488864560886372, 0.19744005473831483, 0.177066886556705, 0.20159012398683973, 0.17607388004007585, 0.5430008419912067, 0.19494667911411567, 0.1914862876627853, 0.1940436038113501, 0.27719460366372495, 0.17145474239370162, 0.19104704871548395, 0.2108809329231217, 0.38440456592480865, 0.614795991085587, 0.17990382772698066, 0.3314079302723191, 0.7739454787143083, 0.19183253359170394, 0.16230742997710845, 0.6191134122514848, 0.11460362790967937, 0.14889517083305914, 0.5520468386070518, 0.19405782607332422, 0.1979076509825648, 0.29529598048529515, 0.1431823312497802, 0.2067100153860184, 0.4130209206387151, 0.14533307157574016, 0.14815090765364025, 0.1664612225175468, 0.1695232610138908, 0.17270044023452535, 0.15745337626088785, 0.17095789485359147, 0.15886230346570696, 0.15994118011382852, 0.17277140664390211, 0.15393907648466687, 0.0597065005861821, 0.07229603379148797, 0.06283101105610567, 0.0744037094736979, 0.056452944429972396, 0.08152751663433666, 0.07120226907235594, 0.06238903348457647, 0.06204260501250969]}, "mutation_prompt": null}
{"id": "ccfe3c99-2e1c-405c-a25f-abb7573731db", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Dynamic mutation strategy based on individual performance\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n                else:  # Enhanced dynamic mutation strategy\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution) + self.F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedDynamicAdaptiveDE", "description": "Enhancing the diversity and convergence of the population by introducing a dynamic mutation strategy based on individual performance in the search space.", "configspace": "", "generation": 13, "fitness": 0.2993826197419272, "feedback": "The algorithm EnhancedDynamicAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "7371a5f2-aef0-4515-a4a2-c12c7eb53677", "metadata": {"aucs": [0.8689889795105712, 0.8608441109156582, 0.8724946390981818, 0.8715245508223631, 0.8613412430338573, 0.8745967898698431, 0.8451416246465903, 0.8868445531167123, 0.8711520366107984, 0.7376916771777409, 0.5943198265221186, 0.6899507738384575, 0.7902959960458389, 0.7626749517372008, 0.7452623539647807, 0.6928313899457166, 0.6859363812298268, 0.7627271064176808, 0.14800913919571645, 0.15024550402615422, 0.17364837549652168, 0.13897269125131317, 0.1801161737432041, 0.10729492050651623, 0.16595262734391691, 0.14312484736254538, 0.12078111876532549, 0.14712807118332005, 0.16187595038574631, 0.11408230096683969, 0.11512098857516206, 0.13567179283992736, 0.14258013083936816, 0.17054451795259462, 0.11206975475716097, 0.09246811032584845, 0.9786569369712604, 0.9745681172344719, 0.9660115894496049, 0.9550384420231902, 0.9679480560866438, 0.9587899029521023, 0.9664081968102821, 0.9760177570616488, 0.9483895079606188, 0.25211289116802227, 0.2901372737504331, 0.21666501132759997, 0.37333051469001444, 0.31562858339192035, 0.3254915090890851, 0.5589057641195209, 0.2903521985139228, 0.3060762710018997, 0.7822000933248002, 0.20004923932255625, 0.6714664636066635, 0.5808498432154192, 0.3258504701078133, 0.3506889669405078, 0.3226538647775735, 0.3682850023223354, 0.1614030241620208, 0.20685529888459064, 0.19305885198607098, 0.15025272735119033, 0.15507268146909414, 0.1275823939575017, 0.22434391283779687, 0.1453749702357391, 0.12780060677494798, 0.14992856145118216, 0.15330042973188407, 0.12620167655744186, 0.14700572419420166, 0.29756655338313254, 0.18824010121125057, 0.17831386863817755, 0.18508971565358778, 0.15185480601641244, 0.1229084441757039, 0.0042973476150954815, 0.00022903008788921486, 0.022789831357579393, 0.06289749821699242, 0.023893956652396797, 0.00644708677325756, 0.01795297716356059, 9.999999999998899e-05, 0.05187916193353104, 0.24688870604300306, 0.11332019116523462, 0.11736277678544937, 0.07272784132531507, 0.01585227935837774, 0.04922798415106555, 0.07330119269127244, 0.028896552398066877, 0.04592240335221798, 0.08807592429541622, 0.040343315224468324, 0.2038279782028536, 0.10378749631034134, 0.12611011591765342, 0.11155978516657761, 0.08792934267601904, 0.08959604246503983, 0.047015979643439065, 0.10871641891421546, 0.26154201445103087, 0.14899948107845684, 0.19838155843410654, 0.20816010342456326, 0.18288737528676025, 0.17892381518702438, 0.2528484203151822, 0.10564091555486887, 0.516113075157977, 0.380310488537453, 0.5982847032619167, 0.5185644713140805, 0.5615861116770076, 0.5148241839139076, 0.525568478343831, 0.49239132518375417, 0.5607886878023594, 0.10275232374865295, 0.11661773689667221, 0.18777719233220336, 0.09524323279846225, 0.1034416819952414, 0.0770207468770916, 0.09203825272576838, 0.09734974222681958, 0.10752820516104422, 0.15180714073292656, 0.1349155726829766, 0.13416920403552468, 0.11785359699703313, 0.12370585534738077, 0.1425727891313472, 0.11634278663658804, 0.11989246719812385, 0.12436566935964533, 0.3896383239960115, 0.35676237963106117, 0.28481233858503696, 0.4579803647606232, 0.48714787100150214, 0.4019310004975106, 0.5084379344010743, 0.4019372298254318, 0.23338821891708872, 0.2305216193638776, 0.28039538795474217, 0.15945802209244542, 0.31656220005135316, 0.1727107218588515, 0.23651627061223224, 0.23159989273285242, 0.2229916161122737, 0.19441849010982304, 0.1854721985030674, 0.1990379382453602, 0.20058809829492374, 0.19343349232681906, 0.16421634775178495, 0.18432815182893925, 0.18804404476846015, 0.1834877541181309, 0.17924655997539374, 0.23978976972028532, 0.21571902121562803, 0.24560468957771886, 0.21001316375919743, 0.24345614595127352, 0.2167584514810349, 0.21528540529089235, 0.5551075954186697, 0.2062636068343171, 0.8775956403112405, 0.1755998034346813, 0.629562659874839, 0.8785469888950921, 0.18875056953458225, 0.1622146936112231, 0.5112857958554731, 0.5893256644622862, 0.1671414020755878, 0.7041995096889262, 0.3885219563193939, 0.461469231809598, 0.15606669009985907, 0.19515786912030575, 0.207205957264042, 0.6580657127484495, 0.19517157308635769, 0.1614862572507052, 0.16579076763669331, 0.1603105468311249, 0.18260994610567716, 0.17936904989923386, 0.16453993024901592, 0.15888565357886508, 0.18432169853453073, 0.17320988854788244, 0.1589710509243334, 0.0721391800289457, 0.08075583258054997, 0.07606586845176555, 0.07523469629821777, 0.06841032138956593, 0.07544291051246677, 0.08865176080883708, 0.08359331284058646, 0.09672171842260013]}, "mutation_prompt": null}
{"id": "9baa8e4c-ec80-4fa6-96f5-9ab4025add50", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n\n                performance_diff = np.abs(func(best_solution) - func(population[i]))\n                if performance_diff <= 0.1:  # Dynamic adaptation based on performance\n                    strategy = 4\n                else:\n                    strategy = np.random.choice([0, 1, 2, 3])\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n                else:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution) + self.F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Optimizing the mutation strategy selection process by incorporating a dynamic adaptive mechanism based on individual performance.", "configspace": "", "generation": 14, "fitness": 0.23267465115565666, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "7371a5f2-aef0-4515-a4a2-c12c7eb53677", "metadata": {"aucs": [0.6299370469190629, 0.5547762566775519, 0.6249299212413575, 0.600045698167951, 0.5973907505502922, 0.5940221482218031, 0.6360876003566801, 0.5768135865791453, 0.635442574131219, 0.47763749765318086, 0.4750316749103286, 0.44802988643493036, 0.4099518570129509, 0.24664898519231893, 0.36109334282363226, 0.3705189675251269, 0.5048341155187805, 0.5209135546079061, 0.35809198745828796, 0.1434045467534628, 0.16560231217800592, 0.11798172994644485, 0.13332315505200165, 0.14649970576631277, 0.40908641293594594, 0.15925576712052258, 0.15780805627952466, 0.12469982220514342, 0.1300804303760773, 0.08184994384725086, 0.1060514569513723, 0.05757790972691912, 0.08132493220996984, 0.1150136301185547, 0.1322818522566711, 0.1062465383777651, 0.9542703835039847, 0.9488681789691312, 0.8551290887620292, 0.9620046643668723, 0.9399927689764762, 0.9651477228542776, 0.8863344788783123, 0.9152803261264978, 0.9661310503513791, 0.24505333535466423, 0.19250066282587552, 0.20364853641953595, 0.2698355527165167, 0.29093775590674786, 0.18293734642058634, 0.18758423331770868, 0.20063083984646668, 0.2721192985380181, 0.2150442937436775, 0.12812077246322406, 0.1432339488797395, 0.39574218882891166, 0.15090811202829668, 0.17450183491854165, 0.19350614510891617, 0.4349555874412845, 0.4330177626269752, 0.14768653858807756, 0.15082745226416194, 0.14555372444391945, 0.2461060428105427, 0.16240495136269584, 0.2886020220425941, 0.18997955178934023, 0.15115867543522776, 0.19060976393885576, 0.17631058404942102, 0.12703481318175236, 0.11927330560428584, 0.14258822131767102, 0.16877638291128938, 0.15562894803392968, 0.16684979202321137, 0.11012489552258709, 0.16522465227099836, 0.0305063302327655, 9.999999999998899e-05, 0.002571741878258038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07151306107897581, 0.031065372018941884, 0.04518042606713313, 0.043540270162309436, 0.021649180271389956, 0.019165170097543927, 0.09751461079214241, 0.15657776510224541, 0.08951646413148573, 0.08942704245376587, 0.15004801982027727, 0.07542869359463189, 0.1426021578320953, 0.052195943077373186, 0.12494013591538189, 0.020599392688720797, 0.01712363150479379, 0.08120392852725289, 0.021303795907855028, 0.1876754135233788, 0.15639055526554257, 0.0891778785427183, 0.10501204563218658, 0.10109791093318687, 0.15088604976518272, 0.0883976784597773, 0.12694327984112463, 0.05058443683258451, 0.4295742620445874, 0.41756470829051096, 0.39656027752348644, 0.4106004263827874, 0.4232689960314968, 0.38261120056923115, 0.44667394249355485, 0.40438253737288643, 0.3914011023570966, 0.09439957302792878, 0.07886519619379051, 0.069805728007584, 0.07381762551671256, 0.09078947841370777, 0.07742639246499528, 0.09349772387263622, 0.08139879510745718, 0.13105931222550282, 0.12283902203188446, 0.1475436210768114, 0.12508256742442536, 0.11142902592386639, 0.12687961611964216, 0.17040726303583031, 0.10208756549667919, 0.10540647929962765, 0.10766981723554159, 0.28610882382235003, 0.2956320016052154, 0.3464360403767357, 0.32672175538364945, 0.19248088169149602, 0.16432277474056922, 0.21432588975868982, 0.2966452155178698, 0.2341768003670237, 0.23364778115639384, 0.20833219430101158, 0.24047445909983178, 0.19965729493589957, 0.15659016495072597, 0.22419386760708804, 0.16501850935323858, 0.2593382718352738, 0.1190520351043558, 0.1989617835613401, 0.1844973356086047, 0.1804791603946313, 0.19028100971107287, 0.17443706509946788, 0.17710968709049724, 0.17507275255441634, 0.17932995992825695, 0.19168118281318358, 0.22516345942061067, 0.23334783740138154, 0.1808508980663741, 0.18385748446617178, 0.20963842001679267, 0.2051281138754536, 0.1790084907833731, 0.2304168227381359, 0.17127142918436455, 0.17954722827640401, 0.16527517461719177, 0.17697111172577484, 0.6673562490392255, 0.3926279076938909, 0.5762388818893805, 0.17975371551998032, 0.1865115645232559, 0.1452678691681265, 0.44743491985650496, 0.20215341455497915, 0.39108789679091593, 0.12404308243012296, 0.17629378401508145, 0.18025871294907225, 0.1740535813654951, 0.14016649705908313, 0.16197756140748953, 0.18675112050910425, 0.14986204136555392, 0.15740894232865577, 0.17350813678621635, 0.17026464919001005, 0.15571881066546356, 0.17342109620547086, 0.15836442519502147, 0.16336748153666591, 0.08913168322627407, 0.07893286927120358, 0.08057484715702645, 0.08039505700215321, 0.08678815381195915, 0.08232981392049787, 0.06737052181126324, 0.07527664476637164, 0.071608068328467]}, "mutation_prompt": null}
{"id": "cac5fbbc-2ffa-4c61-9704-5a85e393a6ae", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                if strategy == 0:\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + self.F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + self.F * (population[a] - best_solution) + self.F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - best_solution) + self.F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhancing the diversity of the population by introducing a new mutation strategy to explore different regions of the search space.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7371a5f2-aef0-4515-a4a2-c12c7eb53677", "metadata": {"aucs": [0.8689889795105712, 0.8608441109156582, 0.8724946390981818, 0.8715245508223631, 0.8613412430338573, 0.8745967898698431, 0.8451416246465903, 0.8868445531167123, 0.8711520366107984, 0.7376916771777409, 0.5943198265221186, 0.6899507738384575, 0.7902959960458389, 0.7626749517372008, 0.7452623539647807, 0.6928313899457166, 0.6859363812298268, 0.7627271064176808, 0.14800913919571645, 0.15024550402615422, 0.17364837549652168, 0.13897269125131317, 0.1801161737432041, 0.10729492050651623, 0.16595262734391691, 0.14312484736254538, 0.12078111876532549, 0.14712807118332005, 0.16187595038574631, 0.11408230096683969, 0.11512098857516206, 0.13567179283992736, 0.14258013083936816, 0.17054451795259462, 0.11206975475716097, 0.09246811032584845, 0.9786569369712604, 0.9745681172344719, 0.9660115894496049, 0.9550384420231902, 0.9679480560866438, 0.9587899029521023, 0.9664081968102821, 0.9760177570616488, 0.9483895079606188, 0.25211289116802227, 0.2901372737504331, 0.21666501132759997, 0.37333051469001444, 0.31562858339192035, 0.3254915090890851, 0.5589057641195209, 0.2903521985139228, 0.3060762710018997, 0.7822000933248002, 0.20004923932255625, 0.6714664636066635, 0.5808498432154192, 0.3258504701078133, 0.3506889669405078, 0.3226538647775735, 0.3682850023223354, 0.1614030241620208, 0.20685529888459064, 0.19305885198607098, 0.15025272735119033, 0.15507268146909414, 0.1275823939575017, 0.22434391283779687, 0.1453749702357391, 0.12780060677494798, 0.14992856145118216, 0.15330042973188407, 0.12620167655744186, 0.14700572419420166, 0.29756655338313254, 0.18824010121125057, 0.17831386863817755, 0.18508971565358778, 0.15185480601641244, 0.1229084441757039, 0.0042973476150954815, 0.00022903008788921486, 0.022789831357579393, 0.06289749821699242, 0.023893956652396797, 0.00644708677325756, 0.01795297716356059, 9.999999999998899e-05, 0.05187916193353104, 0.24688870604300306, 0.11332019116523462, 0.11736277678544937, 0.07272784132531507, 0.01585227935837774, 0.04922798415106555, 0.07330119269127244, 0.028896552398066877, 0.04592240335221798, 0.08807592429541622, 0.040343315224468324, 0.2038279782028536, 0.10378749631034134, 0.12611011591765342, 0.11155978516657761, 0.08792934267601904, 0.08959604246503983, 0.047015979643439065, 0.10871641891421546, 0.26154201445103087, 0.14899948107845684, 0.19838155843410654, 0.20816010342456326, 0.18288737528676025, 0.17892381518702438, 0.2528484203151822, 0.10564091555486887, 0.516113075157977, 0.380310488537453, 0.5982847032619167, 0.5185644713140805, 0.5615861116770076, 0.5148241839139076, 0.525568478343831, 0.49239132518375417, 0.5607886878023594, 0.10275232374865295, 0.11661773689667221, 0.18777719233220336, 0.09524323279846225, 0.1034416819952414, 0.0770207468770916, 0.09203825272576838, 0.09734974222681958, 0.10752820516104422, 0.15180714073292656, 0.1349155726829766, 0.13416920403552468, 0.11785359699703313, 0.12370585534738077, 0.1425727891313472, 0.11634278663658804, 0.11989246719812385, 0.12436566935964533, 0.3896383239960115, 0.35676237963106117, 0.28481233858503696, 0.4579803647606232, 0.48714787100150214, 0.4019310004975106, 0.5084379344010743, 0.4019372298254318, 0.23338821891708872, 0.2305216193638776, 0.28039538795474217, 0.15945802209244542, 0.31656220005135316, 0.1727107218588515, 0.23651627061223224, 0.23159989273285242, 0.2229916161122737, 0.19441849010982304, 0.1854721985030674, 0.1990379382453602, 0.20058809829492374, 0.19343349232681906, 0.16421634775178495, 0.18432815182893925, 0.18804404476846015, 0.1834877541181309, 0.17924655997539374, 0.23978976972028532, 0.21571902121562803, 0.24560468957771886, 0.21001316375919743, 0.24345614595127352, 0.2167584514810349, 0.21528540529089235, 0.5551075954186697, 0.2062636068343171, 0.8775956403112405, 0.1755998034346813, 0.629562659874839, 0.8785469888950921, 0.18875056953458225, 0.1622146936112231, 0.5112857958554731, 0.5893256644622862, 0.1671414020755878, 0.7041995096889262, 0.3885219563193939, 0.461469231809598, 0.15606669009985907, 0.19515786912030575, 0.207205957264042, 0.6580657127484495, 0.19517157308635769, 0.1614862572507052, 0.16579076763669331, 0.1603105468311249, 0.18260994610567716, 0.17936904989923386, 0.16453993024901592, 0.15888565357886508, 0.18432169853453073, 0.17320988854788244, 0.1589710509243334, 0.0721391800289457, 0.08075583258054997, 0.07606586845176555, 0.07523469629821777, 0.06841032138956593, 0.07544291051246677, 0.08865176080883708, 0.08359331284058646, 0.09672171842260013]}, "mutation_prompt": null}
{"id": "0f3a4bd8-1f52-40fe-a985-f4bcd432e27f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n\n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhancing the mutation strategy by dynamically adjusting the differential weight F during the optimization process.", "configspace": "", "generation": 16, "fitness": 0.30634579883490737, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "7371a5f2-aef0-4515-a4a2-c12c7eb53677", "metadata": {"aucs": [0.8693164233209776, 0.8583088632806739, 0.8608748854452848, 0.8435293750749123, 0.8578820779097723, 0.8675355888081376, 0.8547793353195533, 0.8888699075912434, 0.872890044352165, 0.7714030399354459, 0.7163825458506288, 0.7264116643886006, 0.7738822093743718, 0.7642942576677846, 0.7960824533840262, 0.764621916284236, 0.5882961185168789, 0.7929530452654703, 0.13748363360323435, 0.1366734566846931, 0.17229655570477465, 0.14200945473938942, 0.25598915465848127, 0.12705130658735542, 0.15076969159929576, 0.16381466995482008, 0.12454313196109013, 0.5077448101171216, 0.11569694576972156, 0.13903245004198417, 0.13829891226432445, 0.1367135577277866, 0.1385363708755354, 0.16779296648686848, 0.11313522426414313, 0.09334954307320709, 0.9786564049976848, 0.9745636338429031, 0.966011038081036, 0.955032053100447, 0.9679461497920208, 0.95878988296688, 0.9664061460457236, 0.976019838502353, 0.9483760800546761, 0.3022650692586446, 0.33524184119652467, 0.46763733697283827, 0.3995405518563674, 0.4017550754881566, 0.3103130999798749, 0.3260214960330906, 0.291279556916166, 0.15951535450907595, 0.6919469328352715, 0.17830790462194324, 0.7266185277824297, 0.8466487263514463, 0.7252447780570566, 0.357181224443185, 0.47749232364040817, 0.3564174914556115, 0.21044851257439046, 0.1849727660845244, 0.15644861471311888, 0.17766567878611328, 0.16645060324721217, 0.12753502737167932, 0.2571292030394978, 0.15687842585860234, 0.14982865480295404, 0.16500506227302902, 0.13826447836799927, 0.12550510214008992, 0.14181148529815746, 0.1403776616850715, 0.1697458229575426, 0.17741112047535612, 0.213483586230649, 0.17276483339107596, 0.12144543840967603, 0.004870076253808087, 9.999999999998899e-05, 0.037167357902820886, 0.05366178191818616, 0.012447946389247178, 0.06354329068111242, 0.010118753415579662, 9.999999999998899e-05, 0.09084009671007787, 0.11580954039745961, 0.1309657886146226, 0.1230337590037005, 0.07325182084383908, 0.017281209417508214, 0.042975667545673946, 0.14158317774178564, 0.05160173038545213, 0.055885592509106186, 0.09450044260565538, 0.05669483337700454, 0.19946612962762966, 0.1280091420654702, 0.1273621548820698, 0.11347871474178794, 0.07540016853308718, 0.08211053165567284, 0.04724804181770614, 0.13856103467946157, 0.23601656907101554, 0.1861215102210939, 0.25491009908665596, 0.13610979225252262, 0.21928330264744622, 0.1567647587017693, 0.2919783089448177, 0.11050163431892235, 0.4953872803709163, 0.4825115611291413, 0.5084993446017828, 0.5227342338198919, 0.47169317777165365, 0.5410905613451431, 0.560025541171068, 0.5273908763643655, 0.5426685765610131, 0.08327871081483829, 0.14491433267122034, 0.0942101914717901, 0.09611266917369354, 0.09607731535324948, 0.08140900083538616, 0.08928281769892943, 0.11013123904560906, 0.12212204287015116, 0.1111694503277727, 0.13771350935186233, 0.12290914225530492, 0.14450923240858682, 0.1265288731609444, 0.17256008128224753, 0.19508699107767702, 0.11141229055684232, 0.12039915405145818, 0.33283719776466825, 0.27891847063728703, 0.41807160318062153, 0.40743917572542054, 0.4195622869884641, 0.42299740890137505, 0.5623061207079003, 0.4878980171731826, 0.23191980223698916, 0.28645184223289855, 0.289965301605152, 0.2163174088798332, 0.30154387110937975, 0.17872288714996065, 0.23436123282203858, 0.3459008685363044, 0.23209332668791072, 0.20531638276108088, 0.1889536377154788, 0.1857954178570006, 0.20501890275406753, 0.258055392090924, 0.1846015526658603, 0.19813928951815218, 0.18509069299566283, 0.15861992505417566, 0.19530285472792608, 0.24059900432855774, 0.19779505732969327, 0.24394466662206182, 0.19929262868953124, 0.24380633924435247, 0.19441222738844144, 0.20388761569620506, 0.20748530084707595, 0.2286972598815722, 0.8654713462351642, 0.468863699519636, 0.6994595511100643, 0.8866318357582654, 0.18880609180439856, 0.16219948447554167, 0.16298724397333986, 0.6189886159077216, 0.16714500460480064, 0.6885979140613638, 0.2741066019040068, 0.41385992566395635, 0.1557418278733268, 0.1952752790249851, 0.20722769991587464, 0.7008410818704732, 0.19556673208773356, 0.16160581058667045, 0.182783018677249, 0.16239542511755023, 0.16479747911075338, 0.18066842499181457, 0.1916648120628115, 0.16078311148577218, 0.16832703574589336, 0.1765781572748112, 0.19028631181451872, 0.06815291026287973, 0.0708960491459949, 0.07305782374568992, 0.05573233062547678, 0.07271265741275124, 0.07501395330450156, 0.0779409555482714, 0.07802646867190688, 0.116149765581958]}, "mutation_prompt": null}
{"id": "f4079a51-bed3-43ef-a392-136cb830aa4f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        strategy_probs = np.array([0.2, 0.2, 0.2, 0.2, 0.2])  # Probabilistic selection of mutation strategy\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                \n                strategy = np.random.choice([0, 1, 2, 3, 4], p=strategy_probs)  # Probabilistic selection\n\n                F = self.F * np.exp(-_ / self.budget)  \n\n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  \n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Improving mutation strategy diversity by introducing a probabilistic selection of mutation strategy based on historical performance.", "configspace": "", "generation": 17, "fitness": 0.29417459569207516, "feedback": "The algorithm EnhancedAdaptiveDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "0f3a4bd8-1f52-40fe-a985-f4bcd432e27f", "metadata": {"aucs": [0.8728294372001673, 0.8577040321175827, 0.8950652904866266, 0.8628924469656145, 0.8704840060150039, 0.10988274057648972, 0.864411330252635, 0.8513831718213082, 0.8791194902635756, 0.7497124932669106, 0.7780213485522668, 0.7749513061907635, 0.7842974159614293, 0.3100909836440219, 0.7842125419944128, 0.71789037512232, 0.7682279081073549, 0.7791926466923537, 0.1559314280512596, 0.17175039680588366, 0.17582116597657294, 0.6638015847157315, 0.36745775724463614, 0.12096432208376495, 0.1701038902621702, 0.17748437141972295, 0.17767595711048711, 0.14996080233497755, 0.12537767309046888, 0.13174020568051747, 0.11021565941875755, 0.14768872534470023, 0.147638288756475, 0.13635982041189687, 0.11213161811232786, 0.10850458288784826, 0.9805359627839695, 0.9822767223275433, 0.976905063746193, 0.9647987608934867, 0.9825572761009594, 0.9638252040627509, 0.9330785597375727, 0.9806281369404183, 0.9338477587813316, 0.42015866092201315, 0.47935545305000615, 0.1640968169981204, 0.3969679581043579, 0.46953502105763967, 0.2920693675897912, 0.3773528023176491, 0.23303510447491405, 0.18023881513902706, 0.5953111222118526, 0.3530131408359801, 0.6333297795031709, 0.20053204589574847, 0.7168642518285908, 0.18218332574125184, 0.23097973894318313, 0.22524378047453286, 0.21626870615258387, 0.14504742700063267, 0.15936023399938026, 0.14106285103529503, 0.22328359811653786, 0.25495530500860164, 0.31003863858695924, 0.2499256110111865, 0.2507321959906247, 0.14114880564967958, 0.13941705749592115, 0.14661505649488227, 0.14656415807310585, 0.126269942793785, 0.14830367068807537, 0.12597561796486056, 0.13949256389549902, 0.14388418791125168, 0.1342343233823794, 0.030264804538716272, 0.020110770737151507, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03964069515468149, 0.030215473674349624, 0.043352251216390636, 9.999999999998899e-05, 0.0538414450152821, 0.051619318662385894, 0.03589320107818583, 0.08580775253405204, 0.04830668338097932, 0.05083554394792922, 0.15904941917577164, 0.08686476551368105, 0.13277795834275907, 0.129304089803291, 0.1285969873351187, 0.13404162638471295, 0.04717672514562543, 0.22807985996568014, 0.1539351410205292, 0.1302203761178944, 0.1604992768490935, 0.027089964947116796, 0.18408554869846128, 0.10362276956628214, 0.17549215654305095, 0.1629453855690597, 0.15544722778043396, 0.23668554338459435, 9.999999999998899e-05, 0.15673622122668274, 0.07327490631116129, 0.5344820376122281, 0.5413330824055603, 0.501321194445305, 0.5029465270532543, 0.5112552044281609, 0.49078549705284225, 0.5171161119978315, 0.5046129652810821, 0.5191813049220981, 0.08651642483795075, 0.1335069782348801, 0.0726156667943173, 0.09864592464305733, 0.08427325768703398, 0.13322440575620753, 0.08272563641986397, 0.07598243966451301, 0.07833579577199001, 0.11918140956017054, 0.19117434478709106, 0.2047611556279494, 0.1203152230490303, 0.13191309694421038, 0.10649255048239625, 0.13237911491618504, 0.09950593405017172, 0.267600735381441, 0.25053485530189856, 0.2545444591882874, 0.3455538650619123, 0.317995134361704, 0.485463711772794, 0.4211885081426482, 0.19923199077042242, 0.28701104264334465, 0.22219164680157089, 0.3182583761330037, 0.26752036190615225, 0.3022724069027545, 0.2478700361688213, 0.24149250584103366, 0.3878038257593972, 0.1799001803717829, 0.1640647326727538, 0.17891735719076673, 0.20796237955774854, 0.2032136832272018, 0.19712664303363558, 0.22802061810775032, 0.19935361127730988, 0.22309727798129486, 0.20173424447194177, 0.19435916985293833, 0.17980658638437985, 0.595621700395969, 0.20977108716144288, 0.2192538899383476, 0.21644313425854766, 0.5779973833450128, 0.2091517410184257, 0.23388806854359678, 0.21975891149380966, 0.2132837915480562, 0.7473660161372888, 0.18414500594799443, 0.6772184520256755, 0.8127073359561079, 0.19633066611766403, 0.16583023275268882, 0.622853670422528, 0.11695217688126924, 0.1512654150488394, 0.7337938752971094, 0.1608903846349724, 0.23658858122943693, 0.3201727567796091, 0.15421936820149562, 0.21030091191784817, 0.7002358434318852, 0.150631813186494, 0.1571898771021084, 0.169203707105544, 0.20151089531676247, 0.17471155503947666, 0.17093601499159072, 0.16641161684928318, 0.1630682168331825, 0.16502371525650394, 0.17088450059963634, 0.1663741886679514, 0.08259833824333096, 0.07383062578753974, 0.07920588196287426, 0.10044959875364257, 0.08085647693777698, 0.09797017956810683, 0.08620876824780166, 0.07426131776564848, 0.06708006382185228]}, "mutation_prompt": null}
{"id": "0a38ce6d-56e1-413c-a3fc-6bd99876eae6", "solution": "import numpy as np\n\nclass ImprovedReflectiveEnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n\n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n\n                mutant = np.clip(mutant, -5.0, 5.0)  # Reflective Boundary Handling\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "ImprovedReflectiveEnhancedAdaptiveDE", "description": "Improving the mutation strategies and handling boundary constraints by implementing a novel boundary handling technique called Reflective Boundary Handling in EnhancedAdaptiveDE algorithm.", "configspace": "", "generation": 18, "fitness": 0.2935030269374235, "feedback": "The algorithm ImprovedReflectiveEnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "0f3a4bd8-1f52-40fe-a985-f4bcd432e27f", "metadata": {"aucs": [0.8832454648370692, 0.8761820999678647, 0.5467987914754319, 0.8837714076892846, 0.8571275133481319, 0.8617587532531601, 0.8518082244777447, 0.8756143002081686, 0.8840408779081963, 0.733569456227273, 0.042486689772391006, 0.7950630035837476, 0.7609911408593851, 0.750024728921398, 0.11531543110784992, 0.7923766934688325, 0.7497606076487056, 0.737107223205598, 0.1400810520656025, 0.1691896817408125, 0.09568890513187911, 0.07201192787684174, 0.17491884516665301, 0.17060258972076603, 0.1657360248331612, 0.17180066124763138, 0.14828400444317325, 0.1244247010609899, 0.14756177921216973, 0.15552994756170702, 0.16673973798315933, 0.5604392618526423, 0.11588505170446173, 0.10771407661148913, 0.1724381176331673, 0.17911482255721056, 0.9766749967700343, 0.9625703769792353, 0.9431963540226697, 0.8554450713398066, 0.9597511418184885, 0.9485579080669858, 0.9640553512933319, 0.9547449663916152, 0.9608227876276192, 0.34075535730708195, 0.20770277998944353, 0.4322713378226821, 0.5243377945269753, 0.2535496837403264, 0.203491378098985, 0.38546461360216877, 0.2685745343561411, 0.20814185558995912, 0.2227036279336997, 0.11197145619253912, 0.16161382690240134, 0.3111943887664985, 0.3780586877799096, 0.21164662382448296, 0.773008790632243, 0.28972824963342547, 0.3446390242012538, 0.15745094686725136, 0.2576020932233366, 0.14669105199848287, 0.155724576495618, 0.1292464015881114, 0.31691862600609444, 0.18997057269640483, 0.12374978874371168, 0.1399324716170649, 0.13826447836799927, 0.062423299539092314, 0.1389451080324936, 0.20073394566915082, 0.1603107123805958, 0.17798424993298756, 0.213483586230649, 0.14046751188997642, 0.2361380690674878, 0.05975683907040874, 9.999999999998899e-05, 0.06194040567941206, 9.999999999998899e-05, 0.042357134658095985, 0.06030001541264551, 0.015820788845108513, 0.012235407342386151, 0.004554112287631917, 0.15658169194258076, 0.11595881204864822, 0.16467451721576476, 0.07766722447421726, 0.1667153288162776, 0.03163478626842442, 0.18452386705871626, 0.1756133422552304, 0.13495736596798014, 0.14805789468706954, 0.04494632268833376, 0.17251062786445526, 0.1335064579476497, 0.11363135117855216, 0.11716310849577838, 0.09242414959280354, 0.32677287392551335, 0.09878567461218479, 0.19507755811830307, 0.06744362625266809, 0.20656956354973577, 0.13948643410579575, 0.20722653762090626, 0.20362711543610446, 0.17397594444245823, 0.20144079979381557, 0.14734941819190295, 0.45829082917623354, 0.530071106339197, 0.5546705373896648, 0.5052188220441869, 0.6265629225472253, 0.4916249792473002, 0.5716200273906977, 0.49072211864772475, 0.5467892527193993, 0.10837669653866455, 0.07769599637977331, 0.11019672931827662, 0.08496773922357204, 0.09758729672766453, 0.08616272151726989, 0.11237812382762857, 0.11005863887870837, 0.07935196245583376, 0.12433535491775294, 0.1654833724195729, 0.24288802941440546, 0.23836658290754598, 0.11692179551039972, 0.19291472253042397, 0.14795470462205718, 0.12504273188479675, 0.13994987467773823, 0.42596378833962634, 0.4697860637054555, 0.33441751977248946, 0.46162308914844596, 0.36482518147002907, 0.2994297664397132, 0.5131589585182639, 0.4809455270502887, 0.4092893293712444, 0.26794396592984215, 0.23830501135676574, 0.29776151400657613, 0.22850852256305632, 0.19993634917073533, 0.22494138553194232, 0.3515208623900421, 0.29487261231496864, 0.27538018997357216, 0.1791399696673821, 0.1598652863218547, 0.2361141472983791, 0.258055392090924, 0.15961916060460535, 0.20093179178865384, 0.19500818468579506, 0.1805589977372003, 0.17814452504489786, 0.2024487833059322, 0.211860462230274, 0.1882397361575714, 0.20582439049385237, 0.21074050854728354, 0.21115374203508963, 0.20141155913166753, 0.2380541764339863, 0.21437080224761962, 0.18251587123152846, 0.17276388481433314, 0.8607900971962871, 0.5982374046075165, 0.1892041463721904, 0.19235128559200676, 0.7712159578329565, 0.20572640209438864, 0.528059456458374, 0.5590236609266999, 0.5687688389446548, 0.1522923985638055, 0.10975549300837606, 0.3963489157132024, 0.20748708580976016, 0.7110126962229211, 0.14901697549717596, 0.15809250786518236, 0.1627643843164236, 0.1709607793865371, 0.17631894812971227, 0.18504299608942887, 0.18198222838398648, 0.16688589418351207, 0.17058488555874607, 0.17883940239935558, 0.1780914250114487, 0.08476623377646808, 0.06922054430297231, 0.07045688795634963, 0.08639440689873767, 0.06584728591575473, 0.07821299240074808, 0.06677572438729307, 0.07176769165225017, 0.08132195708482637]}, "mutation_prompt": null}
{"id": "ca49b7de-2b5f-4b9b-ac1a-b49ee0572b4a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n\n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhancing the mutation strategy by dynamically adjusting the differential weight F during the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0f3a4bd8-1f52-40fe-a985-f4bcd432e27f", "metadata": {"aucs": [0.8693164233209776, 0.8583088632806739, 0.8608748854452848, 0.8435293750749123, 0.8578820779097723, 0.8675355888081376, 0.8547793353195533, 0.8888699075912434, 0.872890044352165, 0.7714030399354459, 0.7163825458506288, 0.7264116643886006, 0.7738822093743718, 0.7642942576677846, 0.7960824533840262, 0.764621916284236, 0.5882961185168789, 0.7929530452654703, 0.13748363360323435, 0.1366734566846931, 0.17229655570477465, 0.14200945473938942, 0.25598915465848127, 0.12705130658735542, 0.15076969159929576, 0.16381466995482008, 0.12454313196109013, 0.5077448101171216, 0.11569694576972156, 0.13903245004198417, 0.13829891226432445, 0.1367135577277866, 0.1385363708755354, 0.16779296648686848, 0.11313522426414313, 0.09334954307320709, 0.9786564049976848, 0.9745636338429031, 0.966011038081036, 0.955032053100447, 0.9679461497920208, 0.95878988296688, 0.9664061460457236, 0.976019838502353, 0.9483760800546761, 0.3022650692586446, 0.33524184119652467, 0.46763733697283827, 0.3995405518563674, 0.4017550754881566, 0.3103130999798749, 0.3260214960330906, 0.291279556916166, 0.15951535450907595, 0.6919469328352715, 0.17830790462194324, 0.7266185277824297, 0.8466487263514463, 0.7252447780570566, 0.357181224443185, 0.47749232364040817, 0.3564174914556115, 0.21044851257439046, 0.1849727660845244, 0.15644861471311888, 0.17766567878611328, 0.16645060324721217, 0.12753502737167932, 0.2571292030394978, 0.15687842585860234, 0.14982865480295404, 0.16500506227302902, 0.13826447836799927, 0.12550510214008992, 0.14181148529815746, 0.1403776616850715, 0.1697458229575426, 0.17741112047535612, 0.213483586230649, 0.17276483339107596, 0.12144543840967603, 0.004870076253808087, 9.999999999998899e-05, 0.037167357902820886, 0.05366178191818616, 0.012447946389247178, 0.06354329068111242, 0.010118753415579662, 9.999999999998899e-05, 0.09084009671007787, 0.11580954039745961, 0.1309657886146226, 0.1230337590037005, 0.07325182084383908, 0.017281209417508214, 0.042975667545673946, 0.14158317774178564, 0.05160173038545213, 0.055885592509106186, 0.09450044260565538, 0.05669483337700454, 0.19946612962762966, 0.1280091420654702, 0.1273621548820698, 0.11347871474178794, 0.07540016853308718, 0.08211053165567284, 0.04724804181770614, 0.13856103467946157, 0.23601656907101554, 0.1861215102210939, 0.25491009908665596, 0.13610979225252262, 0.21928330264744622, 0.1567647587017693, 0.2919783089448177, 0.11050163431892235, 0.4953872803709163, 0.4825115611291413, 0.5084993446017828, 0.5227342338198919, 0.47169317777165365, 0.5410905613451431, 0.560025541171068, 0.5273908763643655, 0.5426685765610131, 0.08327871081483829, 0.14491433267122034, 0.0942101914717901, 0.09611266917369354, 0.09607731535324948, 0.08140900083538616, 0.08928281769892943, 0.11013123904560906, 0.12212204287015116, 0.1111694503277727, 0.13771350935186233, 0.12290914225530492, 0.14450923240858682, 0.1265288731609444, 0.17256008128224753, 0.19508699107767702, 0.11141229055684232, 0.12039915405145818, 0.33283719776466825, 0.27891847063728703, 0.41807160318062153, 0.40743917572542054, 0.4195622869884641, 0.42299740890137505, 0.5623061207079003, 0.4878980171731826, 0.23191980223698916, 0.28645184223289855, 0.289965301605152, 0.2163174088798332, 0.30154387110937975, 0.17872288714996065, 0.23436123282203858, 0.3459008685363044, 0.23209332668791072, 0.20531638276108088, 0.1889536377154788, 0.1857954178570006, 0.20501890275406753, 0.258055392090924, 0.1846015526658603, 0.19813928951815218, 0.18509069299566283, 0.15861992505417566, 0.19530285472792608, 0.24059900432855774, 0.19779505732969327, 0.24394466662206182, 0.19929262868953124, 0.24380633924435247, 0.19441222738844144, 0.20388761569620506, 0.20748530084707595, 0.2286972598815722, 0.8654713462351642, 0.468863699519636, 0.6994595511100643, 0.8866318357582654, 0.18880609180439856, 0.16219948447554167, 0.16298724397333986, 0.6189886159077216, 0.16714500460480064, 0.6885979140613638, 0.2741066019040068, 0.41385992566395635, 0.1557418278733268, 0.1952752790249851, 0.20722769991587464, 0.7008410818704732, 0.19556673208773356, 0.16160581058667045, 0.182783018677249, 0.16239542511755023, 0.16479747911075338, 0.18066842499181457, 0.1916648120628115, 0.16078311148577218, 0.16832703574589336, 0.1765781572748112, 0.19028631181451872, 0.06815291026287973, 0.0708960491459949, 0.07305782374568992, 0.05573233062547678, 0.07271265741275124, 0.07501395330450156, 0.0779409555482714, 0.07802646867190688, 0.116149765581958]}, "mutation_prompt": null}
{"id": "a6ad6fe0-5b49-42c6-b659-12fd309479fc", "solution": "class EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            fitness_values = [func(ind) for ind in population]\n            fitness_rankings = np.argsort(fitness_values)\n            selection_probabilities = np.array([1 / (rank + 1) for rank in range(self.NP)]) / sum([1 / (rank + 1) for rank in range(self.NP)])\n\n            for i in range(self.NP):\n                idxs = np.random.choice(range(self.NP), 3, replace=False, p=selection_probabilities)\n                a, b, c = idxs\n\n                strategy = np.random.choice([0, 1, 2, 3, 4])\n\n                F = self.F * np.exp(-_ / self.budget)\n\n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhancing the selection mechanism by introducing a probabilistic selection based on fitness rankings to promote better solutions.", "configspace": "", "generation": 20, "fitness": 0.26427569752810504, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "0f3a4bd8-1f52-40fe-a985-f4bcd432e27f", "metadata": {"aucs": [0.7835688371845705, 0.7813635359911131, 0.8597361859310351, 0.8059568020160875, 0.8066569973248765, 0.7980271564348902, 0.7807121400100403, 0.8000195573983874, 0.8242897743939129, 0.6180733044892728, 0.7256439475736196, 0.6620738188279531, 0.660233635234059, 0.6866033465824795, 0.6736856288157491, 0.6871260169660496, 0.6993591920767263, 0.6330785373809144, 0.14509566761775572, 0.1538042068444061, 0.1337555292718915, 0.16313307777897768, 0.13223759783526223, 0.11592996082625051, 0.14454300329783565, 0.15590963659827628, 0.09874550212335997, 0.11508916473634778, 0.11083676365938822, 0.12773800695260995, 0.14428287686461716, 0.1461208277766295, 0.09623513388286609, 0.12765390660434528, 0.12780386730623394, 0.1416722157659187, 0.976827427069325, 0.9453135788972631, 0.9628649643710618, 0.892007539435978, 0.9378695358802305, 0.9434964374760276, 0.9385805159341059, 0.9457443698881111, 0.9393410116156731, 0.26233113846627465, 0.16426044089019398, 0.11445588721905076, 0.447343966471638, 0.22293466217258262, 0.3048916915899791, 0.1862970901069556, 0.3121371680576851, 0.1384935224831837, 0.2015205843573522, 0.10946442217736352, 0.16525912771096773, 0.4461190782997725, 0.18250694565442005, 0.3453420297266253, 0.22520052587504158, 0.21957737787067266, 0.3204875072051303, 0.1324862977869321, 0.1409207815121707, 0.17245460253478084, 0.10495282550174745, 0.1414169756282383, 0.1748542401535771, 0.1690115684122293, 0.19039730376140973, 0.15170552889035427, 0.18152873138932613, 0.19553427954282976, 0.12384716238789328, 0.12664022319918222, 0.23868330298726237, 0.12870906279300054, 0.16017682782358844, 0.11903514046458807, 0.11758971180284439, 0.01010183649700247, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05423564067332132, 9.999999999998899e-05, 9.999999999998899e-05, 0.0728080314291043, 0.03187207247658319, 0.05256433845591435, 0.07057314541572501, 0.03127565476341787, 0.05855002195855308, 0.09845433603420461, 0.05161684903784902, 0.09363327390857867, 0.03853277313116632, 0.08147882643426618, 0.221353329444391, 0.0059067724918390185, 0.10360220768629547, 0.05403107313491651, 0.049102476750881086, 0.21433760594681794, 0.05446313202556552, 0.139995838275911, 0.1572278307456727, 0.14791328967987005, 0.08864961868530152, 0.15994010790305602, 0.17988693235526865, 0.0811210256450664, 0.04905560912497897, 0.03995814033690526, 0.48375944279338834, 0.5011038644694955, 0.5653742869063734, 0.5357610212922235, 0.3408039788510029, 0.39173341640367376, 0.45124877443157807, 0.43900531768094475, 0.5009040144069319, 0.08334419211523969, 0.07606671349978811, 0.11832308580793938, 0.07796018896218737, 0.09564793633913704, 0.08759035962435868, 0.08193992271044914, 0.12035953478511785, 0.07201246951412754, 0.12901864981244038, 0.14699672527278385, 0.20413137865891318, 0.13726828146155312, 0.1282782391832319, 0.12220242989853214, 0.11240158030754188, 0.10964182175372006, 0.1479613602001293, 0.31804308471634746, 0.31966406464390207, 0.238415016679002, 0.26079391176258604, 0.35961668843501216, 0.3522270941682163, 0.40404237275283383, 0.33490052261277425, 0.2108658245734959, 0.23991037525597614, 0.2457332767545336, 0.3367042563822401, 0.30889594986838864, 0.22880448355659633, 0.27367959365661376, 0.22801594632768096, 0.23619041388586137, 0.244869560803895, 0.18278344888580045, 0.22341706039919895, 0.1884750058370659, 0.177021374379293, 0.16893673074252769, 0.19082487733065723, 0.2068024672635156, 0.19365843681974215, 0.1796512758407791, 0.21573697767140898, 0.1899533411049672, 0.22820772729771388, 0.18905776719537015, 0.187854900034774, 0.1903432108339943, 0.1934020434911563, 0.20690590028727807, 0.2016321554335162, 0.18238977684474034, 0.7064088683237446, 0.1586209202049944, 0.5379271891506732, 0.6898929215724998, 0.8407082847545686, 0.1874267105775922, 0.1138654406601538, 0.14994739301220705, 0.6206850829455417, 0.18755043309601782, 0.3541935339775686, 0.19574344547403244, 0.20266835217759493, 0.20135495158626104, 0.49204328953342047, 0.15093716226462295, 0.22746292514275335, 0.16308575136741854, 0.1593520474839326, 0.17849862657412252, 0.16536143050943952, 0.16406513351336438, 0.17161702338875073, 0.17494709221691152, 0.17194713513070414, 0.16473363986017397, 0.06257363863629051, 0.08167039516307284, 0.054575920090061514, 0.06281830850542724, 0.07742487520589547, 0.09373924444143034, 0.07266876809809986, 0.06750015582713986, 0.09991840963419785]}, "mutation_prompt": null}
{"id": "79d02ebf-a0b9-40fa-bdb6-1025e2b7ae2d", "solution": "class EnhancedAdaptiveDECR(EnhancedAdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.CR = 0.5 + 0.5 * np.exp(-_ / self.budget)  # Adaptive adjustment of CR\n\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n\n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDECR", "description": "Introducing a mechanism to adaptively adjust the crossover rate CR during the optimization process.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'best_solution' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'best_solution' referenced before assignment\")", "parent_id": "0f3a4bd8-1f52-40fe-a985-f4bcd432e27f", "metadata": {}, "mutation_prompt": null}
{"id": "366da02f-b76f-4d9b-a649-1aa68f0ff953", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n\n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < self.CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhancing the mutation strategy by dynamically adjusting the differential weight F during the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "0f3a4bd8-1f52-40fe-a985-f4bcd432e27f", "metadata": {"aucs": [0.8693164233209776, 0.8583088632806739, 0.8608748854452848, 0.8435293750749123, 0.8578820779097723, 0.8675355888081376, 0.8547793353195533, 0.8888699075912434, 0.872890044352165, 0.7714030399354459, 0.7163825458506288, 0.7264116643886006, 0.7738822093743718, 0.7642942576677846, 0.7960824533840262, 0.764621916284236, 0.5882961185168789, 0.7929530452654703, 0.13748363360323435, 0.1366734566846931, 0.17229655570477465, 0.14200945473938942, 0.25598915465848127, 0.12705130658735542, 0.15076969159929576, 0.16381466995482008, 0.12454313196109013, 0.5077448101171216, 0.11569694576972156, 0.13903245004198417, 0.13829891226432445, 0.1367135577277866, 0.1385363708755354, 0.16779296648686848, 0.11313522426414313, 0.09334954307320709, 0.9786564049976848, 0.9745636338429031, 0.966011038081036, 0.955032053100447, 0.9679461497920208, 0.95878988296688, 0.9664061460457236, 0.976019838502353, 0.9483760800546761, 0.3022650692586446, 0.33524184119652467, 0.46763733697283827, 0.3995405518563674, 0.4017550754881566, 0.3103130999798749, 0.3260214960330906, 0.291279556916166, 0.15951535450907595, 0.6919469328352715, 0.17830790462194324, 0.7266185277824297, 0.8466487263514463, 0.7252447780570566, 0.357181224443185, 0.47749232364040817, 0.3564174914556115, 0.21044851257439046, 0.1849727660845244, 0.15644861471311888, 0.17766567878611328, 0.16645060324721217, 0.12753502737167932, 0.2571292030394978, 0.15687842585860234, 0.14982865480295404, 0.16500506227302902, 0.13826447836799927, 0.12550510214008992, 0.14181148529815746, 0.1403776616850715, 0.1697458229575426, 0.17741112047535612, 0.213483586230649, 0.17276483339107596, 0.12144543840967603, 0.004870076253808087, 9.999999999998899e-05, 0.037167357902820886, 0.05366178191818616, 0.012447946389247178, 0.06354329068111242, 0.010118753415579662, 9.999999999998899e-05, 0.09084009671007787, 0.11580954039745961, 0.1309657886146226, 0.1230337590037005, 0.07325182084383908, 0.017281209417508214, 0.042975667545673946, 0.14158317774178564, 0.05160173038545213, 0.055885592509106186, 0.09450044260565538, 0.05669483337700454, 0.19946612962762966, 0.1280091420654702, 0.1273621548820698, 0.11347871474178794, 0.07540016853308718, 0.08211053165567284, 0.04724804181770614, 0.13856103467946157, 0.23601656907101554, 0.1861215102210939, 0.25491009908665596, 0.13610979225252262, 0.21928330264744622, 0.1567647587017693, 0.2919783089448177, 0.11050163431892235, 0.4953872803709163, 0.4825115611291413, 0.5084993446017828, 0.5227342338198919, 0.47169317777165365, 0.5410905613451431, 0.560025541171068, 0.5273908763643655, 0.5426685765610131, 0.08327871081483829, 0.14491433267122034, 0.0942101914717901, 0.09611266917369354, 0.09607731535324948, 0.08140900083538616, 0.08928281769892943, 0.11013123904560906, 0.12212204287015116, 0.1111694503277727, 0.13771350935186233, 0.12290914225530492, 0.14450923240858682, 0.1265288731609444, 0.17256008128224753, 0.19508699107767702, 0.11141229055684232, 0.12039915405145818, 0.33283719776466825, 0.27891847063728703, 0.41807160318062153, 0.40743917572542054, 0.4195622869884641, 0.42299740890137505, 0.5623061207079003, 0.4878980171731826, 0.23191980223698916, 0.28645184223289855, 0.289965301605152, 0.2163174088798332, 0.30154387110937975, 0.17872288714996065, 0.23436123282203858, 0.3459008685363044, 0.23209332668791072, 0.20531638276108088, 0.1889536377154788, 0.1857954178570006, 0.20501890275406753, 0.258055392090924, 0.1846015526658603, 0.19813928951815218, 0.18509069299566283, 0.15861992505417566, 0.19530285472792608, 0.24059900432855774, 0.19779505732969327, 0.24394466662206182, 0.19929262868953124, 0.24380633924435247, 0.19441222738844144, 0.20388761569620506, 0.20748530084707595, 0.2286972598815722, 0.8654713462351642, 0.468863699519636, 0.6994595511100643, 0.8866318357582654, 0.18880609180439856, 0.16219948447554167, 0.16298724397333986, 0.6189886159077216, 0.16714500460480064, 0.6885979140613638, 0.2741066019040068, 0.41385992566395635, 0.1557418278733268, 0.1952752790249851, 0.20722769991587464, 0.7008410818704732, 0.19556673208773356, 0.16160581058667045, 0.182783018677249, 0.16239542511755023, 0.16479747911075338, 0.18066842499181457, 0.1916648120628115, 0.16078311148577218, 0.16832703574589336, 0.1765781572748112, 0.19028631181451872, 0.06815291026287973, 0.0708960491459949, 0.07305782374568992, 0.05573233062547678, 0.07271265741275124, 0.07501395330450156, 0.0779409555482714, 0.07802646867190688, 0.116149765581958]}, "mutation_prompt": null}
{"id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Enhancing the mutation strategy by incorporating a dynamic adaptation of the crossover rate CR during the optimization process.", "configspace": "", "generation": 23, "fitness": 0.3063562570359777, "feedback": "The algorithm EnhancedAdaptiveDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "0f3a4bd8-1f52-40fe-a985-f4bcd432e27f", "metadata": {"aucs": [0.8754207554563223, 0.85375946418306, 0.8769202518345625, 0.8696534936898641, 0.8603009132802601, 0.8731484727698736, 0.8550128800831438, 0.8879378670081487, 0.8638805887100308, 0.7817727564130605, 0.5524248969334076, 0.6952308513692389, 0.7598665868182877, 0.5666261220399946, 0.7776599363872913, 0.7638343642510219, 0.7439007706886138, 0.7155530396913943, 0.13736727065710075, 0.1275734487954715, 0.18147477101310783, 0.15592894622077058, 0.6432365268964494, 0.12107009360235699, 0.1507756695562108, 0.16441810880742957, 0.12558690089871294, 0.17472561248057228, 0.11569696639646043, 0.13961271112780194, 0.13821390581901216, 0.13147944181480076, 0.13853838795211681, 0.16789351890389148, 0.1131312620232715, 0.09334954027515907, 0.9786564049976848, 0.9745636338429031, 0.966011038081036, 0.955032053100447, 0.9679461497920208, 0.95878988296688, 0.9664061460457236, 0.976019838502353, 0.9483760800546761, 0.20084085935665763, 0.26250947972952177, 0.17889493334692474, 0.47972907624759276, 0.6240259286184895, 0.597986623302367, 0.4749589835599698, 0.18257553937553905, 0.38727823856149923, 0.6520350404247848, 0.21037901376861823, 0.7604411605839793, 0.8526658452762831, 0.7777863118852285, 0.7518491222575232, 0.345919109455296, 0.17047448470994764, 0.21044851257439046, 0.18645828628923022, 0.15641427087205861, 0.19652427848779142, 0.15522963212505803, 0.12652691227430424, 0.2193732794313008, 0.15029104038372976, 0.13601439443120233, 0.161296500575435, 0.13353858061934787, 0.1250918265639671, 0.13941038580721254, 0.13967159904081272, 0.20541576211945511, 0.18295550594507481, 0.19730472763365714, 0.20014813676679222, 0.120537953829145, 0.004760057764934711, 0.0017321719372579425, 0.017410361087007886, 0.05366817268127433, 0.009405970779663986, 0.06495054451534166, 0.035044062350527594, 0.0022818915833653364, 0.050951464902411536, 0.11436868395114741, 0.13096501185935072, 0.12061229246752059, 0.056569052030410405, 0.019446993624445685, 0.04270243200455093, 0.0719076683566493, 0.016771956520852283, 0.060567687124821856, 0.08809474868610945, 0.05556244098969998, 0.2630424602790724, 0.14024664254254204, 0.05219794424663271, 0.056519508807776786, 0.134381818441643, 0.10531878214699786, 0.04978559702321128, 0.15077523247619118, 0.2413253674056075, 0.16638384031049025, 0.2446669784998412, 0.16088276754231878, 0.21926378172222738, 0.17200948148988715, 0.30016060335606, 0.11021393314869787, 0.4981123538429446, 0.5735618066568671, 0.48819799111717965, 0.4739370613986521, 0.4890348322860675, 0.5568407921947953, 0.5268451179437803, 0.5533522636796548, 0.5689497641645578, 0.08348153006577708, 0.1461143598864839, 0.1028260349499398, 0.21819120592451213, 0.09491212215283562, 0.06179695465555268, 0.09735376888522773, 0.11193946657375187, 0.11860978775553432, 0.11997057404978773, 0.13722485011493568, 0.12537917255471498, 0.14450923240858682, 0.1310566964690737, 0.17256008128224753, 0.19076914451014104, 0.13192141756259357, 0.12039915405145818, 0.37921393999773256, 0.37513648809630806, 0.4277041340802521, 0.3440434512284376, 0.38875153890238934, 0.32796195280273355, 0.31462488971356195, 0.31299332578495676, 0.2302265452037182, 0.2840063765440436, 0.2405656549991, 0.19607817043740017, 0.30609406672655637, 0.21366217556674805, 0.251982614915933, 0.31677090397986274, 0.20715716324034705, 0.2083250377680016, 0.17519162439996128, 0.1857954178570006, 0.20501890275406753, 0.23327655976203032, 0.1846015526658603, 0.19813928951815218, 0.18162884366506127, 0.18930230491346012, 0.19855873540962898, 0.2317020982704746, 0.21452476844150692, 0.24301698560734197, 0.19929400485854853, 0.2437775545227835, 0.200650572934845, 0.19738177822804515, 0.23381399647608203, 0.20281234318210883, 0.7799038478439096, 0.4565498263875647, 0.666277720637086, 0.8866318357582654, 0.18881225967639392, 0.16185603845139773, 0.16299193334521989, 0.6169631749482054, 0.16714574249995262, 0.6023312147796633, 0.4861447355394094, 0.5695356036716568, 0.15607104722721976, 0.1952571775988926, 0.20722769779293249, 0.6412235157540891, 0.1955666771865262, 0.16159772917664028, 0.18396767014124782, 0.16239542511755023, 0.16479747911075338, 0.18566406952139236, 0.1916648120628115, 0.1568158603590133, 0.16957805558320238, 0.1765781572748112, 0.19028631181451872, 0.06815291026287973, 0.0730598916036932, 0.07305782374568992, 0.0547631398794598, 0.07374694477634369, 0.07796957333554566, 0.06982801894194268, 0.07802646867190688, 0.116149765581958]}, "mutation_prompt": null}
{"id": "d13e7021-5da4-4d7c-b1f7-e0c28b7a6882", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Enhancing the mutation strategy by incorporating a dynamic adaptation of the crossover rate CR during the optimization process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.8754207554563223, 0.85375946418306, 0.8769202518345625, 0.8696534936898641, 0.8603009132802601, 0.8731484727698736, 0.8550128800831438, 0.8879378670081487, 0.8638805887100308, 0.7817727564130605, 0.5524248969334076, 0.6952308513692389, 0.7598665868182877, 0.5666261220399946, 0.7776599363872913, 0.7638343642510219, 0.7439007706886138, 0.7155530396913943, 0.13736727065710075, 0.1275734487954715, 0.18147477101310783, 0.15592894622077058, 0.6432365268964494, 0.12107009360235699, 0.1507756695562108, 0.16441810880742957, 0.12558690089871294, 0.17472561248057228, 0.11569696639646043, 0.13961271112780194, 0.13821390581901216, 0.13147944181480076, 0.13853838795211681, 0.16789351890389148, 0.1131312620232715, 0.09334954027515907, 0.9786564049976848, 0.9745636338429031, 0.966011038081036, 0.955032053100447, 0.9679461497920208, 0.95878988296688, 0.9664061460457236, 0.976019838502353, 0.9483760800546761, 0.20084085935665763, 0.26250947972952177, 0.17889493334692474, 0.47972907624759276, 0.6240259286184895, 0.597986623302367, 0.4749589835599698, 0.18257553937553905, 0.38727823856149923, 0.6520350404247848, 0.21037901376861823, 0.7604411605839793, 0.8526658452762831, 0.7777863118852285, 0.7518491222575232, 0.345919109455296, 0.17047448470994764, 0.21044851257439046, 0.18645828628923022, 0.15641427087205861, 0.19652427848779142, 0.15522963212505803, 0.12652691227430424, 0.2193732794313008, 0.15029104038372976, 0.13601439443120233, 0.161296500575435, 0.13353858061934787, 0.1250918265639671, 0.13941038580721254, 0.13967159904081272, 0.20541576211945511, 0.18295550594507481, 0.19730472763365714, 0.20014813676679222, 0.120537953829145, 0.004760057764934711, 0.0017321719372579425, 0.017410361087007886, 0.05366817268127433, 0.009405970779663986, 0.06495054451534166, 0.035044062350527594, 0.0022818915833653364, 0.050951464902411536, 0.11436868395114741, 0.13096501185935072, 0.12061229246752059, 0.056569052030410405, 0.019446993624445685, 0.04270243200455093, 0.0719076683566493, 0.016771956520852283, 0.060567687124821856, 0.08809474868610945, 0.05556244098969998, 0.2630424602790724, 0.14024664254254204, 0.05219794424663271, 0.056519508807776786, 0.134381818441643, 0.10531878214699786, 0.04978559702321128, 0.15077523247619118, 0.2413253674056075, 0.16638384031049025, 0.2446669784998412, 0.16088276754231878, 0.21926378172222738, 0.17200948148988715, 0.30016060335606, 0.11021393314869787, 0.4981123538429446, 0.5735618066568671, 0.48819799111717965, 0.4739370613986521, 0.4890348322860675, 0.5568407921947953, 0.5268451179437803, 0.5533522636796548, 0.5689497641645578, 0.08348153006577708, 0.1461143598864839, 0.1028260349499398, 0.21819120592451213, 0.09491212215283562, 0.06179695465555268, 0.09735376888522773, 0.11193946657375187, 0.11860978775553432, 0.11997057404978773, 0.13722485011493568, 0.12537917255471498, 0.14450923240858682, 0.1310566964690737, 0.17256008128224753, 0.19076914451014104, 0.13192141756259357, 0.12039915405145818, 0.37921393999773256, 0.37513648809630806, 0.4277041340802521, 0.3440434512284376, 0.38875153890238934, 0.32796195280273355, 0.31462488971356195, 0.31299332578495676, 0.2302265452037182, 0.2840063765440436, 0.2405656549991, 0.19607817043740017, 0.30609406672655637, 0.21366217556674805, 0.251982614915933, 0.31677090397986274, 0.20715716324034705, 0.2083250377680016, 0.17519162439996128, 0.1857954178570006, 0.20501890275406753, 0.23327655976203032, 0.1846015526658603, 0.19813928951815218, 0.18162884366506127, 0.18930230491346012, 0.19855873540962898, 0.2317020982704746, 0.21452476844150692, 0.24301698560734197, 0.19929400485854853, 0.2437775545227835, 0.200650572934845, 0.19738177822804515, 0.23381399647608203, 0.20281234318210883, 0.7799038478439096, 0.4565498263875647, 0.666277720637086, 0.8866318357582654, 0.18881225967639392, 0.16185603845139773, 0.16299193334521989, 0.6169631749482054, 0.16714574249995262, 0.6023312147796633, 0.4861447355394094, 0.5695356036716568, 0.15607104722721976, 0.1952571775988926, 0.20722769779293249, 0.6412235157540891, 0.1955666771865262, 0.16159772917664028, 0.18396767014124782, 0.16239542511755023, 0.16479747911075338, 0.18566406952139236, 0.1916648120628115, 0.1568158603590133, 0.16957805558320238, 0.1765781572748112, 0.19028631181451872, 0.06815291026287973, 0.0730598916036932, 0.07305782374568992, 0.0547631398794598, 0.07374694477634369, 0.07796957333554566, 0.06982801894194268, 0.07802646867190688, 0.116149765581958]}, "mutation_prompt": null}
{"id": "3523c8ae-7010-4819-a1d4-c82cb6390a29", "solution": "class EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                scaling_factor = np.random.uniform(0.5, 1.0)  # Introducing novel scaling factor\n                \n                mutant = population[a] + scaling_factor * F * (population[b] - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Enhancing the mutation strategy by introducing a novel scaling factor for the differential variation based on individual fitness evaluation.", "configspace": "", "generation": 25, "fitness": 0.2144256187648305, "feedback": "The algorithm EnhancedAdaptiveDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.7128170369411904, 0.8821557176209138, 0.8755250545900605, 0.6075030801205599, 0.5431417981833743, 0.5494578226462654, 0.5710568680220451, 0.49481530612833513, 0.2215744950990265, 9.999999999998899e-05, 0.4893234865569428, 0.1008556468830537, 0.11824462659716095, 0.41842175768576495, 0.44465697965123996, 0.0834832710577108, 0.10303221890713432, 9.999999999998899e-05, 0.15279536845188557, 0.13997739518378582, 0.15257074816798866, 0.1632811921678229, 0.07213386227480256, 0.08051015878626144, 0.07994570201713957, 0.15517215416016805, 0.25873178625051907, 0.15784640662269267, 0.14223956723183617, 0.09896529961511946, 0.13958041428468637, 0.12117410893840097, 0.10691699103433527, 0.15356035068060814, 0.17336299987616444, 0.11101984315043645, 0.9597840746123687, 0.9714426895640786, 0.10657794227599238, 0.916501964134377, 0.1225737406599341, 0.9582742255830609, 0.21157155335778133, 0.10218189838232228, 0.9380116719341725, 0.10234422144981858, 0.05455643252938802, 0.1086446787573403, 0.11116030265752108, 0.059896242056451277, 0.14694360316038024, 0.08563464798605058, 0.08638892252679509, 0.2970778353658222, 0.18071262689437884, 0.09649300100384794, 0.31146784469455513, 0.7471743858608818, 0.21398456670315835, 0.1565060883904611, 0.3806714583405255, 0.161456907891521, 0.36937095874241854, 0.19199988215673258, 0.20371400726791666, 0.17408262562258037, 0.12117418718854656, 0.23611627326092188, 0.17798801768571904, 0.02481410804404327, 0.09244686686499903, 0.1519199218074636, 0.42733021960641515, 0.13857426451155208, 0.14703685584545656, 0.27333981632223736, 0.26657103705669183, 0.1515772425309071, 0.14778211097445004, 0.10966737750058941, 0.13630996218707203, 0.013827873923528244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01844432358824577, 0.027493699456400233, 9.999999999998899e-05, 9.999999999998899e-05, 0.1573248981974209, 0.0324376587408578, 0.07790697003208968, 0.08301352986835608, 0.004452419520677875, 0.04179632643810216, 0.1280362342776865, 0.054601828770317606, 0.09305622398550784, 0.08933361846312549, 0.07015778932221872, 0.1817554722633573, 0.10357711127717739, 0.08244472075130505, 0.08427458644958241, 0.035459032784279754, 0.11156729986962333, 0.08674930870858166, 0.12364880872234896, 0.15069610142169043, 0.23125699535392874, 0.1551046375237929, 0.11622917192432292, 0.09422411980002887, 0.11868034595456833, 0.20622276116849392, 0.018716737769916114, 0.47042406297874073, 0.492158277342598, 0.5550568981902702, 0.42719534884262333, 0.2795913371266806, 0.4634460567736257, 0.4398115003535281, 0.39126459974596495, 0.519250198213893, 0.10209947697018706, 0.10929946886338715, 0.10561920198716002, 0.09730067424319877, 0.14307491934161953, 0.13073847803321537, 0.07761562164572611, 0.12218346001161806, 0.11267452999853211, 0.12819041295463374, 0.13001060462585956, 0.1341127729587499, 0.15088321438045316, 0.11927202729431663, 0.23638200572832457, 0.10870025479544088, 0.16892407952401733, 0.12493683100413366, 0.22965434279989816, 0.2755049084170603, 0.28305701641568526, 0.3819708958978143, 0.2815533960726051, 0.28989954186480693, 0.3419174850196586, 0.2902899545427712, 0.4819388312128463, 0.29347047530879034, 0.25644745638076893, 0.21251958203201515, 0.23933340957097804, 0.1748063595344278, 0.27818930631454886, 0.22449550786533068, 0.2081436985324696, 0.25238055111129776, 0.19724853475894089, 0.18088196451681193, 0.18107988919591822, 0.17812107553754764, 0.17842182290681463, 0.18890847438319458, 0.18644088888191168, 0.20412500423092772, 0.20790316823322874, 0.19659839728524042, 0.20094887446540977, 0.2201357453232642, 0.1995412838454098, 0.2392993200497826, 0.2044056162352269, 0.18170610131884923, 0.16917028743479023, 0.1773419891772191, 0.17874420038273964, 0.18334549794594246, 0.1821581821270567, 0.30168060735305724, 0.18702635057703143, 0.7806027325598217, 0.31044062145078966, 0.3288310069352406, 0.16063327299196084, 0.42080435220615686, 0.2027185422275587, 0.2849914284982493, 0.1671946017051278, 0.19907794761199837, 0.20226263907736552, 0.2142204941816671, 0.16217587844077985, 0.1620519732338358, 0.17727444824898198, 0.18209356847925384, 0.18903549131184216, 0.16812349737778642, 0.16948540716626925, 0.16146526629252, 0.16257803756152467, 0.1691145074761704, 0.16794578365272173, 0.06631947391843329, 0.08253090172679989, 0.08342870389281654, 0.07714588734628924, 0.07680973523892443, 0.10271176935888127, 0.07862371791844724, 0.07115103483528129, 0.07407923742864464]}, "mutation_prompt": null}
{"id": "c32fb0cf-2749-4934-bc49-5dfeb969abe6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Enhancing the mutation strategy by incorporating a dynamic adaptation of the crossover rate CR during the optimization process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.8754207554563223, 0.85375946418306, 0.8769202518345625, 0.8696534936898641, 0.8603009132802601, 0.8731484727698736, 0.8550128800831438, 0.8879378670081487, 0.8638805887100308, 0.7817727564130605, 0.5524248969334076, 0.6952308513692389, 0.7598665868182877, 0.5666261220399946, 0.7776599363872913, 0.7638343642510219, 0.7439007706886138, 0.7155530396913943, 0.13736727065710075, 0.1275734487954715, 0.18147477101310783, 0.15592894622077058, 0.6432365268964494, 0.12107009360235699, 0.1507756695562108, 0.16441810880742957, 0.12558690089871294, 0.17472561248057228, 0.11569696639646043, 0.13961271112780194, 0.13821390581901216, 0.13147944181480076, 0.13853838795211681, 0.16789351890389148, 0.1131312620232715, 0.09334954027515907, 0.9786564049976848, 0.9745636338429031, 0.966011038081036, 0.955032053100447, 0.9679461497920208, 0.95878988296688, 0.9664061460457236, 0.976019838502353, 0.9483760800546761, 0.20084085935665763, 0.26250947972952177, 0.17889493334692474, 0.47972907624759276, 0.6240259286184895, 0.597986623302367, 0.4749589835599698, 0.18257553937553905, 0.38727823856149923, 0.6520350404247848, 0.21037901376861823, 0.7604411605839793, 0.8526658452762831, 0.7777863118852285, 0.7518491222575232, 0.345919109455296, 0.17047448470994764, 0.21044851257439046, 0.18645828628923022, 0.15641427087205861, 0.19652427848779142, 0.15522963212505803, 0.12652691227430424, 0.2193732794313008, 0.15029104038372976, 0.13601439443120233, 0.161296500575435, 0.13353858061934787, 0.1250918265639671, 0.13941038580721254, 0.13967159904081272, 0.20541576211945511, 0.18295550594507481, 0.19730472763365714, 0.20014813676679222, 0.120537953829145, 0.004760057764934711, 0.0017321719372579425, 0.017410361087007886, 0.05366817268127433, 0.009405970779663986, 0.06495054451534166, 0.035044062350527594, 0.0022818915833653364, 0.050951464902411536, 0.11436868395114741, 0.13096501185935072, 0.12061229246752059, 0.056569052030410405, 0.019446993624445685, 0.04270243200455093, 0.0719076683566493, 0.016771956520852283, 0.060567687124821856, 0.08809474868610945, 0.05556244098969998, 0.2630424602790724, 0.14024664254254204, 0.05219794424663271, 0.056519508807776786, 0.134381818441643, 0.10531878214699786, 0.04978559702321128, 0.15077523247619118, 0.2413253674056075, 0.16638384031049025, 0.2446669784998412, 0.16088276754231878, 0.21926378172222738, 0.17200948148988715, 0.30016060335606, 0.11021393314869787, 0.4981123538429446, 0.5735618066568671, 0.48819799111717965, 0.4739370613986521, 0.4890348322860675, 0.5568407921947953, 0.5268451179437803, 0.5533522636796548, 0.5689497641645578, 0.08348153006577708, 0.1461143598864839, 0.1028260349499398, 0.21819120592451213, 0.09491212215283562, 0.06179695465555268, 0.09735376888522773, 0.11193946657375187, 0.11860978775553432, 0.11997057404978773, 0.13722485011493568, 0.12537917255471498, 0.14450923240858682, 0.1310566964690737, 0.17256008128224753, 0.19076914451014104, 0.13192141756259357, 0.12039915405145818, 0.37921393999773256, 0.37513648809630806, 0.4277041340802521, 0.3440434512284376, 0.38875153890238934, 0.32796195280273355, 0.31462488971356195, 0.31299332578495676, 0.2302265452037182, 0.2840063765440436, 0.2405656549991, 0.19607817043740017, 0.30609406672655637, 0.21366217556674805, 0.251982614915933, 0.31677090397986274, 0.20715716324034705, 0.2083250377680016, 0.17519162439996128, 0.1857954178570006, 0.20501890275406753, 0.23327655976203032, 0.1846015526658603, 0.19813928951815218, 0.18162884366506127, 0.18930230491346012, 0.19855873540962898, 0.2317020982704746, 0.21452476844150692, 0.24301698560734197, 0.19929400485854853, 0.2437775545227835, 0.200650572934845, 0.19738177822804515, 0.23381399647608203, 0.20281234318210883, 0.7799038478439096, 0.4565498263875647, 0.666277720637086, 0.8866318357582654, 0.18881225967639392, 0.16185603845139773, 0.16299193334521989, 0.6169631749482054, 0.16714574249995262, 0.6023312147796633, 0.4861447355394094, 0.5695356036716568, 0.15607104722721976, 0.1952571775988926, 0.20722769779293249, 0.6412235157540891, 0.1955666771865262, 0.16159772917664028, 0.18396767014124782, 0.16239542511755023, 0.16479747911075338, 0.18566406952139236, 0.1916648120628115, 0.1568158603590133, 0.16957805558320238, 0.1765781572748112, 0.19028631181451872, 0.06815291026287973, 0.0730598916036932, 0.07305782374568992, 0.0547631398794598, 0.07374694477634369, 0.07796957333554566, 0.06982801894194268, 0.07802646867190688, 0.116149765581958]}, "mutation_prompt": null}
{"id": "06a36018-a2b8-45b3-8495-7b9086ac7db4", "solution": "class EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                # New self-adaptive mutation probability\n                p_mutate = np.clip(np.random.normal(0.5, 0.1), 0.1, 0.9)\n\n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Enhancing the mutation strategy with a self-adaptive approach to adjust the mutation probability dynamically during the optimization process. ", "configspace": "", "generation": 27, "fitness": 0.30375104138847075, "feedback": "The algorithm EnhancedAdaptiveDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.889848075967847, 0.8690565062564262, 0.8690237596429488, 0.8662269345122359, 0.852794304514544, 0.8547660599890943, 0.8895299240373369, 0.8567879314645518, 0.8546912897010034, 0.7690943974980827, 0.7610855869172451, 0.7769457680975388, 0.7746673449555789, 0.12186584468231054, 0.77656052576966, 0.7874809778056614, 0.7638705145311987, 0.7578714985792953, 0.15188475622306674, 0.1684091192332382, 0.12837499900396065, 0.6372183456436172, 0.1560399905802755, 0.1805543507195433, 0.09339917060121894, 0.1726371964865988, 0.6353859592966629, 0.10729209515928073, 0.11500810736878098, 0.11670819104814067, 0.15281601619617335, 0.10545191488053784, 0.13384486906372606, 0.17076431967547945, 0.5397824879783426, 0.11562659950609344, 0.975382749839513, 0.9633320600037085, 0.9620032309326897, 0.9767498696280922, 0.9702148899088605, 0.9636592206340537, 0.9722039966651554, 0.9772159742659657, 0.9720495942135481, 0.25700246555396977, 0.6170571972596459, 0.21812346808421312, 0.41341785708209655, 0.2773260118662615, 0.17881737004810094, 0.24799315750172746, 0.5661959631733984, 0.46704266293444485, 0.22247673068090013, 0.2046395435122802, 0.16351115157492402, 0.20983665338854884, 0.2021109120537281, 0.26661536718994827, 0.22692108680249534, 0.21296300908289034, 0.16659176976950874, 0.20800682811696403, 0.12328625806421767, 0.15856237053597144, 0.1061957140617138, 0.16599919617454595, 0.14707880775063453, 0.17907541938117033, 0.1545453222530978, 0.682368746122789, 0.14759500386872293, 0.12405658151026944, 0.1192051631608847, 0.2065067441031062, 0.3712484949192527, 0.18584213560482232, 0.17207564644355222, 0.19040458318942655, 0.19748968871523176, 0.010771152740465917, 0.025410165856123657, 0.032158516565287565, 0.019527425847692625, 0.03434274886147304, 9.999999999998899e-05, 0.09109290923655222, 0.127570045431192, 0.0629747014012737, 0.1257142399303891, 0.15279892769038528, 0.06296792242713323, 0.11946611108392258, 0.10576966149416078, 0.11801693517899481, 0.08191240160085489, 0.08053247945809527, 0.09896452841910652, 0.18498198631171603, 0.07530073657019598, 0.09357111619097447, 0.07428824492952824, 0.16573322421538816, 0.15904267631034308, 0.05316764650118089, 0.026917186546665084, 0.09790110721930578, 0.161861894933364, 0.048536197538213255, 0.20975156684803886, 0.16629643644521852, 0.23458080213322674, 0.13528772056428828, 0.042057029267446366, 0.17906431896779573, 0.05134976605824226, 0.5620538342349854, 0.4775052479417199, 0.5500369089231119, 0.520789746725194, 0.497328464300535, 0.6121091218571939, 0.5302698001651146, 0.5170090954612758, 0.5223940704040348, 0.12260615831808463, 0.0994596939859379, 0.07084653854528444, 0.11026037322760074, 0.11327960234900003, 0.08061436263942856, 0.0874617338746857, 0.08721452277373642, 0.08834050728390919, 0.13661625806959277, 0.12493028853367338, 0.38370659563898424, 0.14574831893791218, 0.11940156201719443, 0.12320918918451584, 0.12273838314962704, 0.11765874176523028, 0.13616013861985832, 0.42970652425434797, 0.3478715855603489, 0.3504238690764524, 0.2205885981254837, 0.2541651834179106, 0.45561817846654384, 0.34468594146612863, 0.22342208814369746, 0.2358635973926696, 0.10705713185044674, 0.32599920508620284, 0.2657190302650736, 0.18793548977370567, 0.19882606279884885, 0.22702798984664485, 0.18357942407517247, 0.30397765704685575, 0.21476599311693, 0.20377813173688664, 0.17327072434577073, 0.19840124350734745, 0.17117694970487696, 0.17497469559212508, 0.1963774821553418, 0.2048820473824292, 0.20116049012241144, 0.17349282080278605, 0.6853273215465157, 0.2326407640898176, 0.19928353722652414, 0.20843311948888, 0.19533770085922975, 0.20304500698046224, 0.20415660932167723, 0.19815434628734152, 0.6069574096379554, 0.16631494290194893, 0.8379499994852093, 0.18503256900755283, 0.878824527867692, 0.6609483120625905, 0.7391337625411323, 0.793232552508698, 0.12257312989860236, 0.7444064954922023, 0.6535487448124758, 0.3857201088425021, 0.20297456564719896, 0.15962937865001936, 0.6845135110435703, 0.16354509490652513, 0.10351510910699657, 0.0927855712189174, 0.4107291345581814, 0.17092832156249826, 0.1639566812641815, 0.18431215449718308, 0.17003366535856623, 0.16218114638564252, 0.16928579904247332, 0.17145474866844723, 0.19019266717050243, 0.1723575114634086, 0.07068149572393545, 0.08544702627980894, 0.06950718337487483, 0.07704419604635837, 0.07758316911528673, 0.10340924505687721, 0.07138117348720774, 0.09571424152086516, 0.07740086187171691]}, "mutation_prompt": null}
{"id": "ee35cea4-f498-473e-891d-b7f2281d6538", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Enhancing the mutation strategy by incorporating a dynamic adaptation of the crossover rate CR during the optimization process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.8754207554563223, 0.85375946418306, 0.8769202518345625, 0.8696534936898641, 0.8603009132802601, 0.8731484727698736, 0.8550128800831438, 0.8879378670081487, 0.8638805887100308, 0.7817727564130605, 0.5524248969334076, 0.6952308513692389, 0.7598665868182877, 0.5666261220399946, 0.7776599363872913, 0.7638343642510219, 0.7439007706886138, 0.7155530396913943, 0.13736727065710075, 0.1275734487954715, 0.18147477101310783, 0.15592894622077058, 0.6432365268964494, 0.12107009360235699, 0.1507756695562108, 0.16441810880742957, 0.12558690089871294, 0.17472561248057228, 0.11569696639646043, 0.13961271112780194, 0.13821390581901216, 0.13147944181480076, 0.13853838795211681, 0.16789351890389148, 0.1131312620232715, 0.09334954027515907, 0.9786564049976848, 0.9745636338429031, 0.966011038081036, 0.955032053100447, 0.9679461497920208, 0.95878988296688, 0.9664061460457236, 0.976019838502353, 0.9483760800546761, 0.20084085935665763, 0.26250947972952177, 0.17889493334692474, 0.47972907624759276, 0.6240259286184895, 0.597986623302367, 0.4749589835599698, 0.18257553937553905, 0.38727823856149923, 0.6520350404247848, 0.21037901376861823, 0.7604411605839793, 0.8526658452762831, 0.7777863118852285, 0.7518491222575232, 0.345919109455296, 0.17047448470994764, 0.21044851257439046, 0.18645828628923022, 0.15641427087205861, 0.19652427848779142, 0.15522963212505803, 0.12652691227430424, 0.2193732794313008, 0.15029104038372976, 0.13601439443120233, 0.161296500575435, 0.13353858061934787, 0.1250918265639671, 0.13941038580721254, 0.13967159904081272, 0.20541576211945511, 0.18295550594507481, 0.19730472763365714, 0.20014813676679222, 0.120537953829145, 0.004760057764934711, 0.0017321719372579425, 0.017410361087007886, 0.05366817268127433, 0.009405970779663986, 0.06495054451534166, 0.035044062350527594, 0.0022818915833653364, 0.050951464902411536, 0.11436868395114741, 0.13096501185935072, 0.12061229246752059, 0.056569052030410405, 0.019446993624445685, 0.04270243200455093, 0.0719076683566493, 0.016771956520852283, 0.060567687124821856, 0.08809474868610945, 0.05556244098969998, 0.2630424602790724, 0.14024664254254204, 0.05219794424663271, 0.056519508807776786, 0.134381818441643, 0.10531878214699786, 0.04978559702321128, 0.15077523247619118, 0.2413253674056075, 0.16638384031049025, 0.2446669784998412, 0.16088276754231878, 0.21926378172222738, 0.17200948148988715, 0.30016060335606, 0.11021393314869787, 0.4981123538429446, 0.5735618066568671, 0.48819799111717965, 0.4739370613986521, 0.4890348322860675, 0.5568407921947953, 0.5268451179437803, 0.5533522636796548, 0.5689497641645578, 0.08348153006577708, 0.1461143598864839, 0.1028260349499398, 0.21819120592451213, 0.09491212215283562, 0.06179695465555268, 0.09735376888522773, 0.11193946657375187, 0.11860978775553432, 0.11997057404978773, 0.13722485011493568, 0.12537917255471498, 0.14450923240858682, 0.1310566964690737, 0.17256008128224753, 0.19076914451014104, 0.13192141756259357, 0.12039915405145818, 0.37921393999773256, 0.37513648809630806, 0.4277041340802521, 0.3440434512284376, 0.38875153890238934, 0.32796195280273355, 0.31462488971356195, 0.31299332578495676, 0.2302265452037182, 0.2840063765440436, 0.2405656549991, 0.19607817043740017, 0.30609406672655637, 0.21366217556674805, 0.251982614915933, 0.31677090397986274, 0.20715716324034705, 0.2083250377680016, 0.17519162439996128, 0.1857954178570006, 0.20501890275406753, 0.23327655976203032, 0.1846015526658603, 0.19813928951815218, 0.18162884366506127, 0.18930230491346012, 0.19855873540962898, 0.2317020982704746, 0.21452476844150692, 0.24301698560734197, 0.19929400485854853, 0.2437775545227835, 0.200650572934845, 0.19738177822804515, 0.23381399647608203, 0.20281234318210883, 0.7799038478439096, 0.4565498263875647, 0.666277720637086, 0.8866318357582654, 0.18881225967639392, 0.16185603845139773, 0.16299193334521989, 0.6169631749482054, 0.16714574249995262, 0.6023312147796633, 0.4861447355394094, 0.5695356036716568, 0.15607104722721976, 0.1952571775988926, 0.20722769779293249, 0.6412235157540891, 0.1955666771865262, 0.16159772917664028, 0.18396767014124782, 0.16239542511755023, 0.16479747911075338, 0.18566406952139236, 0.1916648120628115, 0.1568158603590133, 0.16957805558320238, 0.1765781572748112, 0.19028631181451872, 0.06815291026287973, 0.0730598916036932, 0.07305782374568992, 0.0547631398794598, 0.07374694477634369, 0.07796957333554566, 0.06982801894194268, 0.07802646867190688, 0.116149765581958]}, "mutation_prompt": null}
{"id": "f29fe4a6-b182-4ff4-94f6-cd20ab681530", "solution": "class EnhancedAdaptiveDEImprovedRefined(EnhancedAdaptiveDEImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        success = [0] * self.NP\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                    success[i] += 1\n                else:\n                    trial_population.append(population[i])\n                    success[i] -= 1\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n            if _ % 10 == 0:\n                success_rate = np.array(success) / 10\n                success = [0] * self.NP\n                self.F = np.clip(self.F * (1.0 + 1.0 / self.NP * (success_rate.mean() - 0.2)), 0.1, 0.9)\n                self.CR = np.clip(self.CR * (1.0 + 1.0 / self.NP * (success_rate.mean() - 0.2)), 0.1, 0.9)\n\n        return best_solution", "name": "EnhancedAdaptiveDEImprovedRefined", "description": "Incorporating a self-adaptive mechanism for mutation and crossover rate adjustments based on individual success rates during the optimization.", "configspace": "", "generation": 29, "fitness": 0.2604489979223282, "feedback": "The algorithm EnhancedAdaptiveDEImprovedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.7944606869306545, 0.8698668246904424, 0.8957373197482146, 0.879601726314492, 0.8701740975944925, 0.46788706630664223, 0.8192328294900382, 0.7755995741151746, 0.8807773666685486, 0.7366847492533289, 0.8058403223818499, 0.21562638041722404, 0.7824065782143024, 0.7867117635082259, 0.7957811183385151, 0.7009250482992597, 0.3754085162266697, 0.32396823599594227, 0.11147122057512604, 0.15292204538618248, 0.14256015897289342, 0.12133332879754144, 0.17643869519316502, 0.2810933092144856, 0.39585658865951456, 0.17491772261306082, 0.09313422963806983, 0.1354598672905697, 0.1278142870881398, 0.13077971885908068, 0.14429328281151688, 0.1731848462440717, 0.1683870411325843, 0.13374029719320313, 0.16045162025478388, 0.1113670342519183, 0.9790826803546645, 0.9744453333320999, 0.9719416551878574, 0.9653428078395493, 0.9708678436054484, 0.9438767228679018, 0.966255471124164, 0.9760252075405575, 0.9594997220263031, 0.15103057002120424, 0.07718858374420323, 0.4303199921610823, 0.19739436602908167, 0.27522668280640494, 0.23980437942502908, 0.325589637330589, 0.09275457900513284, 0.1288290842096732, 0.21944392334370144, 0.20551174478398215, 0.21754406142671867, 0.3719036594902093, 0.20173702674405292, 0.20263631377814373, 0.17628404256825847, 0.20335274420885374, 0.10903551464605787, 0.1543581132594447, 0.14611769366161675, 0.14711005064769067, 0.1427738840572178, 0.1475615883260285, 0.2705512071725147, 0.15767895827496592, 0.1372223281383067, 0.16446992877044597, 0.12457202913916987, 0.12647398944005195, 0.1635568903221427, 0.2466776449086353, 0.1317766004168468, 0.19001689392981258, 0.1623810219903662, 0.10797114722301882, 0.12140808890081556, 0.020711957245647894, 9.999999999998899e-05, 0.037501636293941876, 0.0012566738855482873, 0.03378212191190921, 0.0078052579428269375, 0.003556568544975214, 9.999999999998899e-05, 9.999999999998899e-05, 0.03192416707844603, 0.07207677910807941, 0.028620286089197533, 0.07502465695183924, 0.034140199273618776, 0.01446293653219377, 0.17465594664337802, 0.0023226278801583566, 0.042183616453527084, 9.999999999998899e-05, 9.999999999998899e-05, 0.14283683434160177, 0.058601623006720005, 0.018779432217640557, 0.07984463714991141, 0.026325933405644486, 0.030392127042911832, 0.1860059336433435, 0.036597784099608344, 0.27891581480350314, 0.11743430705235336, 0.1211213539699254, 0.12827859515321938, 0.20825007236155824, 0.027039675763777637, 0.17194520797415058, 0.11027852926246573, 0.5552351734796261, 0.5500682176597538, 0.4671481170484941, 0.4450202150034518, 0.45336990856499193, 0.43315745168210174, 0.37360261759229385, 0.5242472984766289, 0.4730892072464984, 0.15170232272049633, 0.10660347973483164, 0.11334422345736961, 0.13940657400698786, 0.14556691327602844, 0.09683604504622234, 0.11154285648614293, 0.12417292134345392, 0.07371163106084155, 0.15160164460177838, 0.18370548920483276, 0.19401711302360602, 0.14827146344993092, 0.1273128612238461, 0.22021128463944217, 0.2004077932190832, 0.11525343271707056, 0.11779884872050805, 0.3577544741336297, 0.27097197676499907, 0.3270293397682249, 0.34955174504862496, 0.2890206635940331, 0.2910957940284762, 0.47744260218774337, 0.24145401218236295, 0.2385306008821444, 0.2699721346961098, 0.19894294142418, 0.2237482802784806, 0.29356870199287055, 0.19805195565675726, 0.2589536610936707, 0.2310137006099694, 0.23263701793267233, 0.1993694359184891, 0.21604507740752688, 0.1750777185341167, 0.21698398180420098, 0.18605644376150354, 0.1843401037061213, 0.2107552674131683, 0.2009456042964478, 0.2305764448452241, 0.1967257770448837, 0.2425040941845089, 0.4370653624635169, 0.20591527008832666, 0.22346943072043823, 0.21548990061951623, 0.21773740932392127, 0.19327212016900042, 0.2350913239497593, 0.3996851836768478, 0.48755373847187655, 0.12025518534686852, 0.6477587014481576, 0.32404236359388183, 0.3618528375129366, 0.14441551910738015, 0.16135186942222413, 0.13291347742356352, 0.16569438921787527, 0.22523856687577126, 0.3261749341790442, 0.2478667301005687, 0.15754059501693718, 0.18765257919306255, 0.20802712079320784, 0.35376133658792497, 0.20443221327551475, 0.16274881653248563, 0.18119266112582255, 0.16660543028293318, 0.16697207288342364, 0.16134435360249877, 0.16451794264952768, 0.16969584609008392, 0.1750026841480068, 0.18653815233701576, 0.1683850508319763, 0.07824253154456273, 0.08927730986654936, 0.07544141468437626, 0.06975325137324484, 0.06718048896085471, 0.0871137164516893, 0.08223025492714264, 0.08650952828046343, 0.11777803026108125]}, "mutation_prompt": null}
{"id": "294b99aa-2511-484e-a5ff-8567b7a5849f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Enhancing the mutation strategy by incorporating a dynamic adaptation of the crossover rate CR during the optimization process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.8754207554563223, 0.85375946418306, 0.8769202518345625, 0.8696534936898641, 0.8603009132802601, 0.8731484727698736, 0.8550128800831438, 0.8879378670081487, 0.8638805887100308, 0.7817727564130605, 0.5524248969334076, 0.6952308513692389, 0.7598665868182877, 0.5666261220399946, 0.7776599363872913, 0.7638343642510219, 0.7439007706886138, 0.7155530396913943, 0.13736727065710075, 0.1275734487954715, 0.18147477101310783, 0.15592894622077058, 0.6432365268964494, 0.12107009360235699, 0.1507756695562108, 0.16441810880742957, 0.12558690089871294, 0.17472561248057228, 0.11569696639646043, 0.13961271112780194, 0.13821390581901216, 0.13147944181480076, 0.13853838795211681, 0.16789351890389148, 0.1131312620232715, 0.09334954027515907, 0.9786564049976848, 0.9745636338429031, 0.966011038081036, 0.955032053100447, 0.9679461497920208, 0.95878988296688, 0.9664061460457236, 0.976019838502353, 0.9483760800546761, 0.20084085935665763, 0.26250947972952177, 0.17889493334692474, 0.47972907624759276, 0.6240259286184895, 0.597986623302367, 0.4749589835599698, 0.18257553937553905, 0.38727823856149923, 0.6520350404247848, 0.21037901376861823, 0.7604411605839793, 0.8526658452762831, 0.7777863118852285, 0.7518491222575232, 0.345919109455296, 0.17047448470994764, 0.21044851257439046, 0.18645828628923022, 0.15641427087205861, 0.19652427848779142, 0.15522963212505803, 0.12652691227430424, 0.2193732794313008, 0.15029104038372976, 0.13601439443120233, 0.161296500575435, 0.13353858061934787, 0.1250918265639671, 0.13941038580721254, 0.13967159904081272, 0.20541576211945511, 0.18295550594507481, 0.19730472763365714, 0.20014813676679222, 0.120537953829145, 0.004760057764934711, 0.0017321719372579425, 0.017410361087007886, 0.05366817268127433, 0.009405970779663986, 0.06495054451534166, 0.035044062350527594, 0.0022818915833653364, 0.050951464902411536, 0.11436868395114741, 0.13096501185935072, 0.12061229246752059, 0.056569052030410405, 0.019446993624445685, 0.04270243200455093, 0.0719076683566493, 0.016771956520852283, 0.060567687124821856, 0.08809474868610945, 0.05556244098969998, 0.2630424602790724, 0.14024664254254204, 0.05219794424663271, 0.056519508807776786, 0.134381818441643, 0.10531878214699786, 0.04978559702321128, 0.15077523247619118, 0.2413253674056075, 0.16638384031049025, 0.2446669784998412, 0.16088276754231878, 0.21926378172222738, 0.17200948148988715, 0.30016060335606, 0.11021393314869787, 0.4981123538429446, 0.5735618066568671, 0.48819799111717965, 0.4739370613986521, 0.4890348322860675, 0.5568407921947953, 0.5268451179437803, 0.5533522636796548, 0.5689497641645578, 0.08348153006577708, 0.1461143598864839, 0.1028260349499398, 0.21819120592451213, 0.09491212215283562, 0.06179695465555268, 0.09735376888522773, 0.11193946657375187, 0.11860978775553432, 0.11997057404978773, 0.13722485011493568, 0.12537917255471498, 0.14450923240858682, 0.1310566964690737, 0.17256008128224753, 0.19076914451014104, 0.13192141756259357, 0.12039915405145818, 0.37921393999773256, 0.37513648809630806, 0.4277041340802521, 0.3440434512284376, 0.38875153890238934, 0.32796195280273355, 0.31462488971356195, 0.31299332578495676, 0.2302265452037182, 0.2840063765440436, 0.2405656549991, 0.19607817043740017, 0.30609406672655637, 0.21366217556674805, 0.251982614915933, 0.31677090397986274, 0.20715716324034705, 0.2083250377680016, 0.17519162439996128, 0.1857954178570006, 0.20501890275406753, 0.23327655976203032, 0.1846015526658603, 0.19813928951815218, 0.18162884366506127, 0.18930230491346012, 0.19855873540962898, 0.2317020982704746, 0.21452476844150692, 0.24301698560734197, 0.19929400485854853, 0.2437775545227835, 0.200650572934845, 0.19738177822804515, 0.23381399647608203, 0.20281234318210883, 0.7799038478439096, 0.4565498263875647, 0.666277720637086, 0.8866318357582654, 0.18881225967639392, 0.16185603845139773, 0.16299193334521989, 0.6169631749482054, 0.16714574249995262, 0.6023312147796633, 0.4861447355394094, 0.5695356036716568, 0.15607104722721976, 0.1952571775988926, 0.20722769779293249, 0.6412235157540891, 0.1955666771865262, 0.16159772917664028, 0.18396767014124782, 0.16239542511755023, 0.16479747911075338, 0.18566406952139236, 0.1916648120628115, 0.1568158603590133, 0.16957805558320238, 0.1765781572748112, 0.19028631181451872, 0.06815291026287973, 0.0730598916036932, 0.07305782374568992, 0.0547631398794598, 0.07374694477634369, 0.07796957333554566, 0.06982801894194268, 0.07802646867190688, 0.116149765581958]}, "mutation_prompt": null}
{"id": "62e3bbe5-9be3-4572-8c6c-ed64495a7a8c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n                \n                success_rate_i = 1.0 - func(population[i]) / func(best_solution)  # Adaptive success rate calculation\n                F = self.F * np.exp(-success_rate_i)  # Adaptive adjustment of F based on individual performance\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Introducing a novel adaptive mechanism to adjust the mutation factor F based on the individual performance of solutions.", "configspace": "", "generation": 31, "fitness": 0.1719510740310439, "feedback": "The algorithm EnhancedAdaptiveDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.24.", "error": "", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.7678269051966391, 0.7633183737181001, 0.7896618710651783, 0.7507689337295654, 0.7654559286042014, 0.7656919268585191, 0.7212180206951785, 0.7702043911961926, 0.7774537766419468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.35655241318642394, 0.08674092233066022, 0.41973377992106453, 0.07383719120692445, 0.0527176825050123, 0.046160280007396026, 0.06328887350471268, 0.07404901713251222, 0.05515834879121084, 0.08280100026021431, 0.03510848132758604, 0.14587617116452134, 0.032711825615206025, 0.021359588098501026, 0.04217579923058634, 0.028383644679807918, 0.030041183970948238, 0.03601386338509982, 0.9574712595084092, 0.977992780945072, 0.953444904476768, 0.9376691481541574, 0.9519504233034624, 0.939180743391317, 0.9755374977154792, 0.9604503873292813, 0.9518382773384555, 0.06700980869901518, 0.04372987683253615, 0.01646970320072416, 0.02984441307361907, 0.05511886003483979, 0.04199768012047245, 9.999999999998899e-05, 0.07247305580947194, 0.027924366458751182, 0.11364570075586766, 0.07413814985524225, 0.10219113566965665, 0.09300564422301927, 0.03348679260236043, 0.10473639324149586, 0.08574411110021707, 0.10186654176443166, 0.10852445441044034, 9.999999999998899e-05, 0.027054032349084767, 9.999999999998899e-05, 0.12487464796094883, 0.16682205916078363, 0.0226163080270384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006412924817359444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013384959622540715, 9.999999999998899e-05, 9.999999999998899e-05, 0.01745126658654028, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023695638621248682, 0.0010511282113356835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006114771624012083, 0.0926738465513246, 0.0035645770459428183, 0.02008412087381073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013849669630983108, 9.999999999998899e-05, 9.999999999998899e-05, 0.00584971839076609, 0.01503065582006824, 0.01005264977436604, 0.07459435885963561, 0.5190879979354588, 0.4792861121690549, 0.4791094941236178, 0.4306533320026511, 0.4736927463919619, 0.24632213194076247, 0.4326961295056333, 0.49051294793479006, 0.4639445914091118, 0.09625632355102787, 0.08800562142644175, 0.08371970812859586, 0.025977580757178487, 0.048798534189344545, 0.07130482659962978, 0.03781962182531862, 0.051942017782141914, 0.07751335085801836, 0.10223988848911447, 0.1325732396260455, 0.11056794116907387, 0.11118038604515701, 0.11335886781363747, 0.11266849111295629, 0.0923281022668676, 0.14544097720518456, 0.12223533160374012, 0.21477555747742338, 0.2732356227857584, 0.17534254447134812, 0.22722103901978286, 0.22946092252540973, 0.19806589906204808, 0.42888946855130006, 0.42663352848653346, 0.23141817887574112, 0.15967498952363146, 0.15335530870976222, 0.15342559683610868, 0.11616612665455683, 0.08859061927614365, 0.10966339534283687, 0.24978680423335642, 0.16654634645873923, 0.16001158843525187, 0.2292858788842953, 0.17075067776730646, 0.19416220043413024, 0.1666573567627474, 0.17802879999268062, 0.1687977980526868, 0.19824420766057815, 0.1967211776056822, 0.18730992442887118, 0.13237480144668046, 0.4806489438379603, 0.17626504132672094, 0.09853037008621757, 0.05864993125801865, 0.13161392564000907, 0.004995131128685215, 0.11817355062587265, 0.05432361071140346, 0.15937321884326316, 0.14149328559625796, 0.3301652028642025, 0.1116444565539394, 0.1404430020335452, 0.12189971184523962, 0.5636498554503888, 0.12025954809360428, 0.16165429699115463, 0.3912882279519726, 0.3170477772498418, 0.3100619601000305, 0.15312032764645533, 0.18599423743352794, 0.18726246979559324, 0.184006295404329, 0.14852551729796637, 0.09390573671033742, 0.16724990189084565, 0.1491247858218212, 0.15253290202006042, 0.16116447332540407, 0.14591839425732667, 0.15483182141988494, 0.1638897108994486, 0.1568099374983074, 0.18803210318216657, 0.06967915974338212, 0.05990678874365152, 0.06129486235553161, 0.0643817806179372, 0.06217119582474684, 0.07462334334184029, 0.04831055131857376, 0.05919305142839948, 0.06567047588412656]}, "mutation_prompt": null}
{"id": "dac9a46f-8cdc-4815-8779-373b7764c6f3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImprovedRefined(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5])  # Enhanced mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                else:  # Enhanced mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c]) + F * (population[a] - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImprovedRefined", "description": "Enhance the mutation diversity by introducing a new mutation strategy based on the best solution and further promote population diversity through adaptive control of crossover rate CR.", "configspace": "", "generation": 32, "fitness": 0.30486842013602206, "feedback": "The algorithm EnhancedAdaptiveDEImprovedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.8443441034436117, 0.8801297224503424, 0.8502225745093843, 0.8646719203963024, 0.8564209392427334, 0.854360834650336, 0.831611310101633, 0.8510630284029446, 0.8460239181956523, 0.7235803887268955, 0.7017055554972143, 0.7205038353503876, 0.7395386126529615, 0.7097031120295625, 0.7314433643547322, 0.7594491544059173, 0.780726284689548, 0.7740141646502441, 0.14539551282017327, 0.17431288108729148, 0.5715093529081172, 0.7183754944026186, 0.6255384687671353, 0.4538217982767139, 0.17538557734470783, 0.16954778634374756, 0.16764257568895646, 0.1738021804839165, 0.14667481995680864, 0.14687350269538324, 0.14405463252526785, 0.16238788289546924, 0.130252218272911, 0.11846164505810741, 0.13945789241704387, 0.1327564904095896, 0.9547511931908155, 0.964896864688385, 0.9819004943128182, 0.9768984977707195, 0.9526489663454274, 0.981505230274765, 0.9642735603169873, 0.9772194176056106, 0.9826061674193639, 0.6025257882633867, 0.40497495796443983, 0.4191513032853891, 0.3315673486372913, 0.5100808591762195, 0.6083066041847098, 0.326960765807336, 0.4742027078122786, 0.3893822650967542, 0.21967699930191464, 0.20903823431904767, 0.5378572451554716, 0.2625106215269897, 0.5409794298338881, 0.35913399127755086, 0.2273039695059461, 0.3583289383233025, 0.3017489022690708, 0.18335227311471292, 0.17536556920500512, 0.22026536598157886, 0.1888320529002926, 0.3442424945709981, 0.12380742868837769, 0.20147523626192199, 0.23056058430200832, 0.19087585188524592, 0.15980921935652204, 0.11746062374584221, 0.1570686637103137, 0.18056836408204557, 0.1478340666049095, 0.17366685033259532, 0.1740545724289987, 0.12685290652042347, 0.11315001007383818, 9.999999999998899e-05, 0.01448194460421559, 9.999999999998899e-05, 0.028149547652196127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006194801975216269, 0.032948481166080845, 0.07069589671778376, 0.10127753153714569, 0.05282363419395275, 0.0327409104217562, 0.02364801360044788, 0.07597289357031856, 0.14141596433021875, 0.052898462170980154, 9.999999999998899e-05, 0.012794912034320594, 0.025859584841864125, 0.009652192722162556, 0.023748352479681656, 0.1080776540456585, 0.1473386554063869, 0.04827511583725663, 0.02876332348047217, 0.03924115636380954, 0.15828991149023475, 0.14342263953144863, 0.09932857794315864, 0.24081225645826976, 0.177647779199668, 0.19245240995682866, 0.07744455946889761, 0.14789363003953437, 0.09793781643158783, 0.5023071028281214, 0.48242295527483536, 0.5009413079979761, 0.47414222565930586, 0.5102561725235859, 0.521070656648061, 0.5164197117820617, 0.5424998737577951, 0.5488463924524196, 0.08570356112572586, 0.10720859343508293, 0.11142979112434748, 0.08422852952936266, 0.11643757687886358, 0.09293949841808824, 0.09015642371517074, 0.09994440968440099, 0.07312286298100734, 0.12249416957241377, 0.10748948803773162, 0.10099191125216367, 0.11881698254898532, 0.13227752097068823, 0.145797489629236, 0.11963647657777055, 0.13447010725944597, 0.15594533049811254, 0.28619218039411654, 0.37422891132250446, 0.294261907158734, 0.38344052865895095, 0.392886340915072, 0.3892596378246822, 0.24621498635556094, 0.41493745049988506, 0.48793640685606054, 0.23218755309180816, 0.21827258158424534, 0.23952416223627637, 0.16701112450842903, 0.3064147307064843, 0.26149005278598514, 0.18936917411099397, 0.1982832690399542, 0.253571857667809, 0.18705830581191374, 0.17534507429189794, 0.17427861248836674, 0.20450986769052681, 0.1788144084791773, 0.1957045165144723, 0.198131558693313, 0.19542529186744484, 0.20218198828185774, 0.621948190052303, 0.23934831634730902, 0.19705130645799496, 0.18960333354613101, 0.21109057904524053, 0.21475300671667152, 0.3337918182000672, 0.5177011706722991, 0.23700680757317982, 0.1640205783000187, 0.7932503578184906, 0.5070673573655815, 0.7713121296911432, 0.16201574403363395, 0.18336310372422437, 0.8493927350783954, 0.16001304722827825, 0.15423394018577674, 0.7401394287448853, 0.147378079053201, 0.3875402951112352, 0.23707091810168013, 0.7060111792328034, 0.20078547819847758, 0.1518319352726032, 0.4509741325520892, 0.15976237256377057, 0.17826347425799705, 0.1709361250574084, 0.1742204580263702, 0.17223465702021656, 0.17277221659746322, 0.1665693491968545, 0.1766917076426493, 0.17582742070572244, 0.18818097872059347, 0.07576984181562274, 0.07320980125151622, 0.07652656613956021, 0.06278378501178772, 0.07549239465969526, 0.0834873446482618, 0.06999789387534983, 0.08812702724421784, 0.07883516143529545]}, "mutation_prompt": null}
{"id": "dabae206-58ce-4bd4-bbd9-b04f82c2a3a3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                # New mechanism for self-adaptive control of mutation step sizes based on individual performance\n                step_size = 0.1 + 0.9 * np.random.rand() if func(population[i]) <= func(best_solution) else 0.1 + 0.1 * np.random.rand()\n                mutant = population[a] + step_size * (population[b] - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Introducing a new mechanism for self-adaptive control of mutation step sizes based on individual performance to enhance exploration during the optimization process.", "configspace": "", "generation": 33, "fitness": 0.11775662667189314, "feedback": "The algorithm EnhancedAdaptiveDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.08.", "error": "", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.28018639646585486, 0.20570502044272088, 0.20624551313903183, 0.200987520035247, 0.3158350085419521, 0.17088181813461667, 0.15626272918554585, 0.31185592916153737, 0.15415878729677768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1852661968589281, 9.999999999998899e-05, 0.07624916316910768, 0.09117438112611709, 0.09525785691959532, 0.11184842721911992, 0.1344707846329689, 0.11617354968475702, 0.11318900627038053, 0.13268218235318996, 0.14153534677601254, 0.09883260524524862, 0.08409822815053525, 0.040351866603190456, 0.08461763159747515, 0.13275201474671283, 0.017058914980217388, 0.114028253252634, 0.11137396898189167, 0.09571010888813469, 0.1292540135732554, 0.15301909914586254, 0.07690930319931089, 0.11990216274988308, 0.0902710676082017, 0.0944403669979842, 0.1384351453520405, 0.07849125131878776, 0.08999544166399587, 0.0610906488065317, 0.060425713352364796, 0.05246547284651226, 0.04912497853531417, 0.02959235654073311, 0.10571266409696234, 0.055627508858805186, 0.023407326623720692, 0.13396106468144275, 0.21954450150537153, 0.09681917960897024, 0.11143652055205, 0.1910673872133979, 0.07901769527551261, 0.14047175518173627, 0.09337663124211126, 0.12071079552130437, 0.1703653475706275, 0.04611856388404589, 0.07140948335815123, 0.11243155779333025, 0.0785726982985554, 9.999999999998899e-05, 9.999999999998899e-05, 0.20313684917356511, 0.039592218033633775, 0.042403196477298066, 0.1332670524782379, 0.0852946100431029, 0.16290139890691113, 0.028747616345001004, 0.15150488790862204, 0.12353814077076786, 0.06982038410381064, 0.0811180987004051, 0.12899392021513745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04692529809500412, 0.17362741906828738, 0.03863779637517817, 0.06137293596827298, 0.06287928307001311, 0.024347533670922017, 0.01108903105248027, 0.0482503624226831, 0.05123906740025108, 0.06873898992906902, 9.999999999998899e-05, 0.02369803631903411, 9.999999999998899e-05, 0.11325379406202263, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06788661599544521, 9.999999999998899e-05, 0.03662258253166406, 0.08261128845017063, 9.999999999998899e-05, 0.008466063407961855, 0.04068899558147909, 0.003442963886925443, 0.050194989332915996, 0.04531142645608344, 9.999999999998899e-05, 0.41157053361808316, 0.1863475813527048, 0.1880364911617286, 0.2514653416707018, 0.29994771417724986, 0.1978968763143084, 0.1988175505117028, 0.19365974115431406, 0.1959741694923156, 0.07111084503683163, 0.1154543751774505, 0.11624271227417082, 0.1331322782185158, 0.08639609438265383, 0.10821416004654238, 0.09430288462642733, 0.11518288872756544, 0.11479816496222539, 0.18881300715401672, 0.1504843096928946, 0.13343721663395258, 0.1615820890771702, 0.1920508249615147, 0.3335973786081107, 0.1333083218748019, 0.1584310462745676, 0.17996334531749658, 0.1798760326956299, 0.27339203129578604, 0.22393186626029815, 0.23706708931285547, 0.17192820064459668, 0.15552143914242822, 0.1804422361880379, 0.1893808219395421, 0.2455652917591047, 0.18576122423728159, 0.20719660809419127, 0.09544242418127746, 0.11920921865703638, 0.14247021098349522, 0.1193874801281487, 0.14237650284305747, 0.10449360468313384, 0.18066444579139096, 0.19220382998036534, 0.16696892836530575, 0.20895730454344663, 0.16884195715244477, 0.1750076388104408, 0.20929044903217342, 0.2038008011955813, 0.1582715151413826, 0.22507100959207016, 0.18756012841823577, 9.999999999998899e-05, 0.18758223575832578, 0.19281952702193894, 0.1803492965176423, 0.155805583460361, 0.18299906242277697, 0.17250476322635, 0.1731839893541559, 0.152562253035749, 0.11429674088943498, 0.1574863386074845, 0.2784182780400096, 0.18306768453337674, 0.17452991494131476, 0.1609156656957741, 0.13596054508963806, 0.16165947558384663, 0.21156986662921795, 0.1615909715626156, 0.21667370387942775, 0.11757433322032962, 0.16083294406690807, 0.11758734592771414, 0.16430019868426893, 0.13125415996114476, 0.1185218310528302, 0.16685720379034408, 0.16492169548343505, 0.15783763574747078, 0.16153184438998847, 0.17438537398212484, 0.17385734465364222, 0.16679253663834082, 0.1835503122338018, 0.17258270555796085, 0.06627284363592101, 0.06687401237644042, 0.05775863267212333, 0.06483512531604008, 0.060711405255524875, 0.097149456432983, 0.0764150754067574, 0.06220367832872764, 0.07198977744717416]}, "mutation_prompt": null}
{"id": "818216c2-25c4-4e5f-a998-a16259bb820b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Enhancing the mutation strategy by incorporating a dynamic adaptation of the crossover rate CR during the optimization process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.8754207554563223, 0.85375946418306, 0.8769202518345625, 0.8696534936898641, 0.8603009132802601, 0.8731484727698736, 0.8550128800831438, 0.8879378670081487, 0.8638805887100308, 0.7817727564130605, 0.5524248969334076, 0.6952308513692389, 0.7598665868182877, 0.5666261220399946, 0.7776599363872913, 0.7638343642510219, 0.7439007706886138, 0.7155530396913943, 0.13736727065710075, 0.1275734487954715, 0.18147477101310783, 0.15592894622077058, 0.6432365268964494, 0.12107009360235699, 0.1507756695562108, 0.16441810880742957, 0.12558690089871294, 0.17472561248057228, 0.11569696639646043, 0.13961271112780194, 0.13821390581901216, 0.13147944181480076, 0.13853838795211681, 0.16789351890389148, 0.1131312620232715, 0.09334954027515907, 0.9786564049976848, 0.9745636338429031, 0.966011038081036, 0.955032053100447, 0.9679461497920208, 0.95878988296688, 0.9664061460457236, 0.976019838502353, 0.9483760800546761, 0.20084085935665763, 0.26250947972952177, 0.17889493334692474, 0.47972907624759276, 0.6240259286184895, 0.597986623302367, 0.4749589835599698, 0.18257553937553905, 0.38727823856149923, 0.6520350404247848, 0.21037901376861823, 0.7604411605839793, 0.8526658452762831, 0.7777863118852285, 0.7518491222575232, 0.345919109455296, 0.17047448470994764, 0.21044851257439046, 0.18645828628923022, 0.15641427087205861, 0.19652427848779142, 0.15522963212505803, 0.12652691227430424, 0.2193732794313008, 0.15029104038372976, 0.13601439443120233, 0.161296500575435, 0.13353858061934787, 0.1250918265639671, 0.13941038580721254, 0.13967159904081272, 0.20541576211945511, 0.18295550594507481, 0.19730472763365714, 0.20014813676679222, 0.120537953829145, 0.004760057764934711, 0.0017321719372579425, 0.017410361087007886, 0.05366817268127433, 0.009405970779663986, 0.06495054451534166, 0.035044062350527594, 0.0022818915833653364, 0.050951464902411536, 0.11436868395114741, 0.13096501185935072, 0.12061229246752059, 0.056569052030410405, 0.019446993624445685, 0.04270243200455093, 0.0719076683566493, 0.016771956520852283, 0.060567687124821856, 0.08809474868610945, 0.05556244098969998, 0.2630424602790724, 0.14024664254254204, 0.05219794424663271, 0.056519508807776786, 0.134381818441643, 0.10531878214699786, 0.04978559702321128, 0.15077523247619118, 0.2413253674056075, 0.16638384031049025, 0.2446669784998412, 0.16088276754231878, 0.21926378172222738, 0.17200948148988715, 0.30016060335606, 0.11021393314869787, 0.4981123538429446, 0.5735618066568671, 0.48819799111717965, 0.4739370613986521, 0.4890348322860675, 0.5568407921947953, 0.5268451179437803, 0.5533522636796548, 0.5689497641645578, 0.08348153006577708, 0.1461143598864839, 0.1028260349499398, 0.21819120592451213, 0.09491212215283562, 0.06179695465555268, 0.09735376888522773, 0.11193946657375187, 0.11860978775553432, 0.11997057404978773, 0.13722485011493568, 0.12537917255471498, 0.14450923240858682, 0.1310566964690737, 0.17256008128224753, 0.19076914451014104, 0.13192141756259357, 0.12039915405145818, 0.37921393999773256, 0.37513648809630806, 0.4277041340802521, 0.3440434512284376, 0.38875153890238934, 0.32796195280273355, 0.31462488971356195, 0.31299332578495676, 0.2302265452037182, 0.2840063765440436, 0.2405656549991, 0.19607817043740017, 0.30609406672655637, 0.21366217556674805, 0.251982614915933, 0.31677090397986274, 0.20715716324034705, 0.2083250377680016, 0.17519162439996128, 0.1857954178570006, 0.20501890275406753, 0.23327655976203032, 0.1846015526658603, 0.19813928951815218, 0.18162884366506127, 0.18930230491346012, 0.19855873540962898, 0.2317020982704746, 0.21452476844150692, 0.24301698560734197, 0.19929400485854853, 0.2437775545227835, 0.200650572934845, 0.19738177822804515, 0.23381399647608203, 0.20281234318210883, 0.7799038478439096, 0.4565498263875647, 0.666277720637086, 0.8866318357582654, 0.18881225967639392, 0.16185603845139773, 0.16299193334521989, 0.6169631749482054, 0.16714574249995262, 0.6023312147796633, 0.4861447355394094, 0.5695356036716568, 0.15607104722721976, 0.1952571775988926, 0.20722769779293249, 0.6412235157540891, 0.1955666771865262, 0.16159772917664028, 0.18396767014124782, 0.16239542511755023, 0.16479747911075338, 0.18566406952139236, 0.1916648120628115, 0.1568158603590133, 0.16957805558320238, 0.1765781572748112, 0.19028631181451872, 0.06815291026287973, 0.0730598916036932, 0.07305782374568992, 0.0547631398794598, 0.07374694477634369, 0.07796957333554566, 0.06982801894194268, 0.07802646867190688, 0.116149765581958]}, "mutation_prompt": null}
{"id": "61efcb6d-6832-4991-b1a4-3cf27ed1de53", "solution": "class SelfAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                \n                F = self.F * np.exp(-_ / self.budget)\n                CR = self.CR * np.exp(-_ / self.budget)\n\n                strategy = np.random.choice([0, 1, 2]) if np.random.rand() < 0.5 else np.random.choice([3, 4, 5])  # Self-adaptive mutation strategy selection\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "SelfAdaptiveDEImproved", "description": "Introducing a self-adaptive mechanism for the mutation strategy selection to dynamically adjust the exploration and exploitation balance during optimization.", "configspace": "", "generation": 35, "fitness": 0.2965726043211191, "feedback": "The algorithm SelfAdaptiveDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.8587350237738061, 0.8457994409261548, 0.8816935354017306, 0.8350505128492632, 0.8579805221766644, 0.8621981301752359, 0.829165973840431, 0.8593315515477788, 0.8762240474059584, 0.7569529714374814, 0.7303124813881947, 0.7724165918928343, 0.75527416476786, 0.6664796356323721, 0.758741158046776, 0.691771788145301, 0.7632490828748796, 0.7452629231592045, 0.17117269277951852, 0.1761560689692686, 0.1209449192331018, 0.1827775322806573, 0.18008398156110195, 0.15841297931845222, 0.15392825377124464, 0.1652351390954685, 0.15224909126921482, 0.16756899345923393, 0.10429215097924605, 0.13513379409137982, 0.10835584891691541, 0.14906469756332885, 0.14012606146568074, 0.1542503291176618, 0.11028122419913611, 0.1422114089441504, 0.9703553875136246, 0.9659397873206785, 0.9732423232781867, 0.9498447534355615, 0.9852346319483793, 0.9648050711127233, 0.95248830384852, 0.9844406886117183, 0.9799618695219848, 0.3354367477696597, 0.43824661136554544, 0.4911444298944606, 0.49149436589711526, 0.406006853564156, 0.5609460887938265, 0.27107924015650176, 0.3077344812692242, 0.4163869354466073, 0.23997558134395036, 0.1309866933680519, 0.7074725266662976, 0.2600157130472819, 0.5444210361516761, 0.7335564006472307, 0.33199412500316494, 0.2171769580613403, 0.7043398437594082, 0.1628071174970933, 0.16932412509308759, 0.16781119133235867, 0.13846737002936338, 0.14469281467179462, 0.1486731781485774, 0.18840260361118333, 0.15247279062495123, 0.14946927012050237, 0.14939014545797769, 0.06583713560932447, 0.12931497013869486, 0.16324372897942485, 0.12049803309885787, 0.1401389651932059, 0.18068338879412293, 0.17797285788640294, 0.13534178195163715, 0.06871052734478655, 0.007973690915603737, 9.999999999998899e-05, 0.013264395858970657, 0.0042537468052223915, 9.999999999998899e-05, 0.06333642001280948, 0.09866351758442582, 0.08537730496570672, 0.03195834141242171, 0.05486380887775033, 0.06540944416093242, 0.02178789564764505, 9.999999999998899e-05, 0.02361335560967892, 0.19951246490987828, 0.032552926002649696, 0.05561326699568159, 0.05812629984672346, 0.13587803014808508, 0.1044559964616657, 0.06797826442700461, 0.18579373060098603, 0.008871944801523202, 0.1955503934808518, 0.06785408938352377, 0.2473288858137368, 0.24313187496063204, 0.13500821513250627, 0.15819485936717048, 0.1922408879319314, 0.18643875515408348, 0.19038786283730869, 0.13120850317489952, 0.05947818586522624, 0.14771934380177443, 0.4604544652881135, 0.4508559054732083, 0.5959104669552762, 0.5175348813279091, 0.5183461921029257, 0.5164525945930645, 0.5534792657403462, 0.4246807209003187, 0.5668398067581284, 0.12985272903759282, 0.08754453628253012, 0.08213967472943062, 0.08110389512807159, 0.09512449724591787, 0.13778053678625424, 0.11328792307284052, 0.1291613329626765, 0.07288673102980414, 0.11916648760927606, 0.12175843301065448, 0.12271851934750788, 0.10362569537195154, 0.11592697869991331, 0.14534605047285254, 0.11868353496578421, 0.15701930580427237, 0.11308294541372366, 0.3884811924188465, 0.40126698969961083, 0.3471293236154961, 0.36978243946245926, 0.4158264087696444, 0.41971714818319106, 0.28701134758604363, 0.31016425726882846, 0.3976097891921174, 0.30901553742484433, 0.20710453933815332, 0.175643233700696, 0.19733966650225931, 0.28636420712171895, 0.26493105685557516, 0.2686481608644863, 0.20620465145479583, 0.2719946608574827, 0.19317565468572717, 0.17493777482351525, 0.1641090105745081, 0.17936739910059152, 0.19792385050236994, 0.19429960592087625, 0.21257535480161527, 0.1960525348898544, 0.1934011030450693, 0.5547326201366882, 0.20977979625073184, 0.543378831099145, 0.21729883294380903, 0.1985370450410867, 0.4952268797986057, 0.20836759673648553, 0.4425839491460045, 0.21375557499633302, 0.17502290699576606, 0.18902576319444986, 0.17430614791705046, 0.19701678209171636, 0.7276296756873581, 0.8129027940089478, 0.15391602382205494, 0.11257479212493648, 0.4843450592027382, 0.5985920406723926, 0.1970999605521241, 0.2928826723561406, 0.1962617617913185, 0.20702132268203333, 0.20158224395650604, 0.473191103729121, 0.14565521917309143, 0.16214054086107155, 0.1670412025015272, 0.17938927050063047, 0.16211759024021177, 0.1608176756978702, 0.16412722824300274, 0.1545159467267596, 0.17404640118447734, 0.15512189803079146, 0.1647211434058079, 0.0818851110208485, 0.07909634774824859, 0.08260874246930594, 0.07848511761021237, 0.09055979651874169, 0.11501529508178387, 0.07805080880820803, 0.06865143992028677, 0.07677172612867056]}, "mutation_prompt": null}
{"id": "963eff43-6f58-45f8-8a40-b584f21b60dd", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Enhancing the mutation strategy by incorporating a dynamic adaptation of the crossover rate CR during the optimization process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.8754207554563223, 0.85375946418306, 0.8769202518345625, 0.8696534936898641, 0.8603009132802601, 0.8731484727698736, 0.8550128800831438, 0.8879378670081487, 0.8638805887100308, 0.7817727564130605, 0.5524248969334076, 0.6952308513692389, 0.7598665868182877, 0.5666261220399946, 0.7776599363872913, 0.7638343642510219, 0.7439007706886138, 0.7155530396913943, 0.13736727065710075, 0.1275734487954715, 0.18147477101310783, 0.15592894622077058, 0.6432365268964494, 0.12107009360235699, 0.1507756695562108, 0.16441810880742957, 0.12558690089871294, 0.17472561248057228, 0.11569696639646043, 0.13961271112780194, 0.13821390581901216, 0.13147944181480076, 0.13853838795211681, 0.16789351890389148, 0.1131312620232715, 0.09334954027515907, 0.9786564049976848, 0.9745636338429031, 0.966011038081036, 0.955032053100447, 0.9679461497920208, 0.95878988296688, 0.9664061460457236, 0.976019838502353, 0.9483760800546761, 0.20084085935665763, 0.26250947972952177, 0.17889493334692474, 0.47972907624759276, 0.6240259286184895, 0.597986623302367, 0.4749589835599698, 0.18257553937553905, 0.38727823856149923, 0.6520350404247848, 0.21037901376861823, 0.7604411605839793, 0.8526658452762831, 0.7777863118852285, 0.7518491222575232, 0.345919109455296, 0.17047448470994764, 0.21044851257439046, 0.18645828628923022, 0.15641427087205861, 0.19652427848779142, 0.15522963212505803, 0.12652691227430424, 0.2193732794313008, 0.15029104038372976, 0.13601439443120233, 0.161296500575435, 0.13353858061934787, 0.1250918265639671, 0.13941038580721254, 0.13967159904081272, 0.20541576211945511, 0.18295550594507481, 0.19730472763365714, 0.20014813676679222, 0.120537953829145, 0.004760057764934711, 0.0017321719372579425, 0.017410361087007886, 0.05366817268127433, 0.009405970779663986, 0.06495054451534166, 0.035044062350527594, 0.0022818915833653364, 0.050951464902411536, 0.11436868395114741, 0.13096501185935072, 0.12061229246752059, 0.056569052030410405, 0.019446993624445685, 0.04270243200455093, 0.0719076683566493, 0.016771956520852283, 0.060567687124821856, 0.08809474868610945, 0.05556244098969998, 0.2630424602790724, 0.14024664254254204, 0.05219794424663271, 0.056519508807776786, 0.134381818441643, 0.10531878214699786, 0.04978559702321128, 0.15077523247619118, 0.2413253674056075, 0.16638384031049025, 0.2446669784998412, 0.16088276754231878, 0.21926378172222738, 0.17200948148988715, 0.30016060335606, 0.11021393314869787, 0.4981123538429446, 0.5735618066568671, 0.48819799111717965, 0.4739370613986521, 0.4890348322860675, 0.5568407921947953, 0.5268451179437803, 0.5533522636796548, 0.5689497641645578, 0.08348153006577708, 0.1461143598864839, 0.1028260349499398, 0.21819120592451213, 0.09491212215283562, 0.06179695465555268, 0.09735376888522773, 0.11193946657375187, 0.11860978775553432, 0.11997057404978773, 0.13722485011493568, 0.12537917255471498, 0.14450923240858682, 0.1310566964690737, 0.17256008128224753, 0.19076914451014104, 0.13192141756259357, 0.12039915405145818, 0.37921393999773256, 0.37513648809630806, 0.4277041340802521, 0.3440434512284376, 0.38875153890238934, 0.32796195280273355, 0.31462488971356195, 0.31299332578495676, 0.2302265452037182, 0.2840063765440436, 0.2405656549991, 0.19607817043740017, 0.30609406672655637, 0.21366217556674805, 0.251982614915933, 0.31677090397986274, 0.20715716324034705, 0.2083250377680016, 0.17519162439996128, 0.1857954178570006, 0.20501890275406753, 0.23327655976203032, 0.1846015526658603, 0.19813928951815218, 0.18162884366506127, 0.18930230491346012, 0.19855873540962898, 0.2317020982704746, 0.21452476844150692, 0.24301698560734197, 0.19929400485854853, 0.2437775545227835, 0.200650572934845, 0.19738177822804515, 0.23381399647608203, 0.20281234318210883, 0.7799038478439096, 0.4565498263875647, 0.666277720637086, 0.8866318357582654, 0.18881225967639392, 0.16185603845139773, 0.16299193334521989, 0.6169631749482054, 0.16714574249995262, 0.6023312147796633, 0.4861447355394094, 0.5695356036716568, 0.15607104722721976, 0.1952571775988926, 0.20722769779293249, 0.6412235157540891, 0.1955666771865262, 0.16159772917664028, 0.18396767014124782, 0.16239542511755023, 0.16479747911075338, 0.18566406952139236, 0.1916648120628115, 0.1568158603590133, 0.16957805558320238, 0.1765781572748112, 0.19028631181451872, 0.06815291026287973, 0.0730598916036932, 0.07305782374568992, 0.0547631398794598, 0.07374694477634369, 0.07796957333554566, 0.06982801894194268, 0.07802646867190688, 0.116149765581958]}, "mutation_prompt": null}
{"id": "32c2d9f6-465a-45ed-a1b5-6955d4c16049", "solution": "class EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.NP_min = 4  # Minimum population size\n        self.NP_max = 20  # Maximum population size\n        self.NP = self.NP_min  # Initial population size\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n\n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n            if _ % (self.budget // 10) == 0 and self.NP < self.NP_max:\n                self.NP += 1  # Increase population size every 10% of the budget\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Introducing a dynamic population size adjustment strategy to adapt the algorithm's exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 4 is out of bounds for axis 0 with size 4').", "error": "IndexError('index 4 is out of bounds for axis 0 with size 4')", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {}, "mutation_prompt": null}
{"id": "0c839f2d-3d9a-4dfb-811d-e48aed5ac7cf", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n                \n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                    \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Introducing a self-adaptive mechanism to dynamically adjust the mutation strategies during the optimization process.", "configspace": "", "generation": 38, "fitness": 0.3063562570359777, "feedback": "The algorithm EnhancedAdaptiveDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.8754207554563223, 0.85375946418306, 0.8769202518345625, 0.8696534936898641, 0.8603009132802601, 0.8731484727698736, 0.8550128800831438, 0.8879378670081487, 0.8638805887100308, 0.7817727564130605, 0.5524248969334076, 0.6952308513692389, 0.7598665868182877, 0.5666261220399946, 0.7776599363872913, 0.7638343642510219, 0.7439007706886138, 0.7155530396913943, 0.13736727065710075, 0.1275734487954715, 0.18147477101310783, 0.15592894622077058, 0.6432365268964494, 0.12107009360235699, 0.1507756695562108, 0.16441810880742957, 0.12558690089871294, 0.17472561248057228, 0.11569696639646043, 0.13961271112780194, 0.13821390581901216, 0.13147944181480076, 0.13853838795211681, 0.16789351890389148, 0.1131312620232715, 0.09334954027515907, 0.9786564049976848, 0.9745636338429031, 0.966011038081036, 0.955032053100447, 0.9679461497920208, 0.95878988296688, 0.9664061460457236, 0.976019838502353, 0.9483760800546761, 0.20084085935665763, 0.26250947972952177, 0.17889493334692474, 0.47972907624759276, 0.6240259286184895, 0.597986623302367, 0.4749589835599698, 0.18257553937553905, 0.38727823856149923, 0.6520350404247848, 0.21037901376861823, 0.7604411605839793, 0.8526658452762831, 0.7777863118852285, 0.7518491222575232, 0.345919109455296, 0.17047448470994764, 0.21044851257439046, 0.18645828628923022, 0.15641427087205861, 0.19652427848779142, 0.15522963212505803, 0.12652691227430424, 0.2193732794313008, 0.15029104038372976, 0.13601439443120233, 0.161296500575435, 0.13353858061934787, 0.1250918265639671, 0.13941038580721254, 0.13967159904081272, 0.20541576211945511, 0.18295550594507481, 0.19730472763365714, 0.20014813676679222, 0.120537953829145, 0.004760057764934711, 0.0017321719372579425, 0.017410361087007886, 0.05366817268127433, 0.009405970779663986, 0.06495054451534166, 0.035044062350527594, 0.0022818915833653364, 0.050951464902411536, 0.11436868395114741, 0.13096501185935072, 0.12061229246752059, 0.056569052030410405, 0.019446993624445685, 0.04270243200455093, 0.0719076683566493, 0.016771956520852283, 0.060567687124821856, 0.08809474868610945, 0.05556244098969998, 0.2630424602790724, 0.14024664254254204, 0.05219794424663271, 0.056519508807776786, 0.134381818441643, 0.10531878214699786, 0.04978559702321128, 0.15077523247619118, 0.2413253674056075, 0.16638384031049025, 0.2446669784998412, 0.16088276754231878, 0.21926378172222738, 0.17200948148988715, 0.30016060335606, 0.11021393314869787, 0.4981123538429446, 0.5735618066568671, 0.48819799111717965, 0.4739370613986521, 0.4890348322860675, 0.5568407921947953, 0.5268451179437803, 0.5533522636796548, 0.5689497641645578, 0.08348153006577708, 0.1461143598864839, 0.1028260349499398, 0.21819120592451213, 0.09491212215283562, 0.06179695465555268, 0.09735376888522773, 0.11193946657375187, 0.11860978775553432, 0.11997057404978773, 0.13722485011493568, 0.12537917255471498, 0.14450923240858682, 0.1310566964690737, 0.17256008128224753, 0.19076914451014104, 0.13192141756259357, 0.12039915405145818, 0.37921393999773256, 0.37513648809630806, 0.4277041340802521, 0.3440434512284376, 0.38875153890238934, 0.32796195280273355, 0.31462488971356195, 0.31299332578495676, 0.2302265452037182, 0.2840063765440436, 0.2405656549991, 0.19607817043740017, 0.30609406672655637, 0.21366217556674805, 0.251982614915933, 0.31677090397986274, 0.20715716324034705, 0.2083250377680016, 0.17519162439996128, 0.1857954178570006, 0.20501890275406753, 0.23327655976203032, 0.1846015526658603, 0.19813928951815218, 0.18162884366506127, 0.18930230491346012, 0.19855873540962898, 0.2317020982704746, 0.21452476844150692, 0.24301698560734197, 0.19929400485854853, 0.2437775545227835, 0.200650572934845, 0.19738177822804515, 0.23381399647608203, 0.20281234318210883, 0.7799038478439096, 0.4565498263875647, 0.666277720637086, 0.8866318357582654, 0.18881225967639392, 0.16185603845139773, 0.16299193334521989, 0.6169631749482054, 0.16714574249995262, 0.6023312147796633, 0.4861447355394094, 0.5695356036716568, 0.15607104722721976, 0.1952571775988926, 0.20722769779293249, 0.6412235157540891, 0.1955666771865262, 0.16159772917664028, 0.18396767014124782, 0.16239542511755023, 0.16479747911075338, 0.18566406952139236, 0.1916648120628115, 0.1568158603590133, 0.16957805558320238, 0.1765781572748112, 0.19028631181451872, 0.06815291026287973, 0.0730598916036932, 0.07305782374568992, 0.0547631398794598, 0.07374694477634369, 0.07796957333554566, 0.06982801894194268, 0.07802646867190688, 0.116149765581958]}, "mutation_prompt": null}
{"id": "5ef0b6e7-34b1-4912-9bee-16069cea3ef7", "solution": "class EnhancedAdaptiveDEImprovedRefined(EnhancedAdaptiveDEImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        convergence_rate = 0.0  # Initializing convergence rate\n        prev_best_solution = best_solution\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            if func(best_solution) == func(prev_best_solution):  # Check convergence\n                convergence_rate += 1.0\n\n            if convergence_rate >= 0.1:  # Adapt population size dynamically\n                self.NP = int(self.NP * 1.1)\n                population = generate_population()\n                convergence_rate = 0.0\n\n            prev_best_solution = best_solution\n\n        return best_solution", "name": "EnhancedAdaptiveDEImprovedRefined", "description": "Introducing a dynamic population size adaptation mechanism based on the convergence rate of the algorithm to enhance exploration and exploitation balance.", "configspace": "", "generation": 39, "fitness": 0.12235285469183212, "feedback": "The algorithm EnhancedAdaptiveDEImprovedRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.23786904239079365, 0.1786129213565959, 0.20864465048025893, 0.21105326849071238, 0.16871153882065082, 0.16923553514861778, 0.1811725415765154, 0.17707059756293586, 0.17223316737561667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441882031815936, 0.04666202965180821, 0.04468663213933599, 0.04758816193365056, 0.03950366110642878, 0.041645722713310684, 0.04944507383074748, 0.04233062500988982, 0.056630967285731804, 0.04057714517251332, 0.029762311557529952, 0.04787100555165835, 0.028657438426779258, 0.04374367336025298, 0.025292455317681206, 0.026638184839233303, 0.052904350166441905, 0.03260688404319423, 0.961172806010593, 0.8480021133519089, 0.9568680797463829, 0.8972916709975473, 0.9101112257315985, 0.9690962594685538, 0.8611126631037436, 0.9765525325109589, 0.8358422110824231, 0.07459740879107901, 0.09686986475865611, 0.06293595326530299, 0.10061200053556618, 0.07209084450417358, 0.0632159841805725, 0.07177070359361915, 0.08381810020344616, 0.05518949476591384, 0.15319457491889865, 0.15059633308208487, 0.09988467160533687, 0.1004693780514172, 0.09785470689072773, 0.12117528879061046, 0.1204558243777688, 0.10921729758052023, 0.13213796750022988, 0.009065329588179849, 0.01213173177242477, 9.999999999998899e-05, 0.00627899349892691, 9.999999999998899e-05, 0.006073691186512353, 0.016854572814829383, 0.0054637959397049185, 0.0001738339639738573, 0.045262783306728616, 0.004420319607105427, 9.999999999998899e-05, 0.023973654286385537, 0.024311057625762578, 0.034969995554789746, 0.0024474393290029317, 0.006357797741589066, 0.008984264703560618, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023944785318510964, 0.04437725842954554, 0.041045051077933215, 0.035943744123744015, 0.0419623163549151, 0.0484537977239865, 0.025740901235540736, 0.043141833298684484, 0.0462181570946093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008662590906387768, 9.999999999998899e-05, 0.006832677778535801, 0.19689537741088492, 0.2144608090715825, 0.2024835327796446, 0.21671346548189063, 0.208528209170739, 0.1991120314499325, 0.19366058163929079, 0.19144013389633108, 0.2126943708464809, 0.051125107156609784, 0.04611579599030868, 0.04774002715798509, 0.06037844522660141, 0.04335473350163377, 0.059045996519521804, 0.04676843950998588, 0.050636583461256435, 0.06615167024450441, 0.17896706263930773, 0.11918782373439318, 0.1258689016122142, 0.1569678961348584, 0.1353231871029349, 0.12991400133167064, 0.13472858098637175, 0.12708780965386157, 0.12863960707343136, 0.1426428433348712, 0.19438143318742196, 0.16109462228462035, 0.16706146995163107, 0.17052919579830217, 0.15322021110491735, 0.17246811223341407, 0.1662735175625183, 0.1689031990737183, 0.0864185814424101, 0.11177318100257949, 0.09529703976401072, 0.11769519235417047, 0.10711332971363552, 0.10546932836394685, 0.1048677897580148, 0.10388215490287478, 0.11070805755780744, 0.15062550333681357, 0.151965250043943, 0.15288404722864235, 0.1799383675169407, 0.13467597665009035, 0.15119297451590696, 0.1534092445774763, 0.17733488668569075, 0.1535161234539546, 0.1330480741027541, 0.15041831311650244, 0.14457845014818538, 0.13634956442084312, 0.1600855162229946, 0.14736898678915222, 0.13303758614573347, 0.13002816994923905, 0.14677777850445106, 0.15540540375604728, 0.16331198464249486, 0.1634145783915545, 0.21681672323360057, 0.16057997767948273, 0.23588687422222843, 0.1775304793940904, 0.15902053698014862, 0.1351207274014682, 0.12956183396980958, 0.17280466819428786, 0.1324070433899549, 0.10949161948732455, 0.12291685896805904, 0.12036686274224861, 0.11649592739437153, 0.15139724668310195, 0.10694538720180513, 0.17919348169275529, 0.17173183531813951, 0.16214496444215643, 0.16481405284748363, 0.17317344870299456, 0.17235361587303, 0.1775197595574527, 0.1641580175181282, 0.1696061485691044, 0.05486118680832919, 0.04922238690890646, 0.04636905868539398, 0.04286039886974036, 0.05534708842618363, 0.05784137220789398, 0.051081453807875765, 0.06267460980388262, 0.06826800679124811]}, "mutation_prompt": null}
{"id": "4e1c0796-2671-4c5b-b3cf-32dcfbc6c17f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Enhancing the mutation strategy by incorporating a dynamic adaptation of the crossover rate CR during the optimization process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.8754207554563223, 0.85375946418306, 0.8769202518345625, 0.8696534936898641, 0.8603009132802601, 0.8731484727698736, 0.8550128800831438, 0.8879378670081487, 0.8638805887100308, 0.7817727564130605, 0.5524248969334076, 0.6952308513692389, 0.7598665868182877, 0.5666261220399946, 0.7776599363872913, 0.7638343642510219, 0.7439007706886138, 0.7155530396913943, 0.13736727065710075, 0.1275734487954715, 0.18147477101310783, 0.15592894622077058, 0.6432365268964494, 0.12107009360235699, 0.1507756695562108, 0.16441810880742957, 0.12558690089871294, 0.17472561248057228, 0.11569696639646043, 0.13961271112780194, 0.13821390581901216, 0.13147944181480076, 0.13853838795211681, 0.16789351890389148, 0.1131312620232715, 0.09334954027515907, 0.9786564049976848, 0.9745636338429031, 0.966011038081036, 0.955032053100447, 0.9679461497920208, 0.95878988296688, 0.9664061460457236, 0.976019838502353, 0.9483760800546761, 0.20084085935665763, 0.26250947972952177, 0.17889493334692474, 0.47972907624759276, 0.6240259286184895, 0.597986623302367, 0.4749589835599698, 0.18257553937553905, 0.38727823856149923, 0.6520350404247848, 0.21037901376861823, 0.7604411605839793, 0.8526658452762831, 0.7777863118852285, 0.7518491222575232, 0.345919109455296, 0.17047448470994764, 0.21044851257439046, 0.18645828628923022, 0.15641427087205861, 0.19652427848779142, 0.15522963212505803, 0.12652691227430424, 0.2193732794313008, 0.15029104038372976, 0.13601439443120233, 0.161296500575435, 0.13353858061934787, 0.1250918265639671, 0.13941038580721254, 0.13967159904081272, 0.20541576211945511, 0.18295550594507481, 0.19730472763365714, 0.20014813676679222, 0.120537953829145, 0.004760057764934711, 0.0017321719372579425, 0.017410361087007886, 0.05366817268127433, 0.009405970779663986, 0.06495054451534166, 0.035044062350527594, 0.0022818915833653364, 0.050951464902411536, 0.11436868395114741, 0.13096501185935072, 0.12061229246752059, 0.056569052030410405, 0.019446993624445685, 0.04270243200455093, 0.0719076683566493, 0.016771956520852283, 0.060567687124821856, 0.08809474868610945, 0.05556244098969998, 0.2630424602790724, 0.14024664254254204, 0.05219794424663271, 0.056519508807776786, 0.134381818441643, 0.10531878214699786, 0.04978559702321128, 0.15077523247619118, 0.2413253674056075, 0.16638384031049025, 0.2446669784998412, 0.16088276754231878, 0.21926378172222738, 0.17200948148988715, 0.30016060335606, 0.11021393314869787, 0.4981123538429446, 0.5735618066568671, 0.48819799111717965, 0.4739370613986521, 0.4890348322860675, 0.5568407921947953, 0.5268451179437803, 0.5533522636796548, 0.5689497641645578, 0.08348153006577708, 0.1461143598864839, 0.1028260349499398, 0.21819120592451213, 0.09491212215283562, 0.06179695465555268, 0.09735376888522773, 0.11193946657375187, 0.11860978775553432, 0.11997057404978773, 0.13722485011493568, 0.12537917255471498, 0.14450923240858682, 0.1310566964690737, 0.17256008128224753, 0.19076914451014104, 0.13192141756259357, 0.12039915405145818, 0.37921393999773256, 0.37513648809630806, 0.4277041340802521, 0.3440434512284376, 0.38875153890238934, 0.32796195280273355, 0.31462488971356195, 0.31299332578495676, 0.2302265452037182, 0.2840063765440436, 0.2405656549991, 0.19607817043740017, 0.30609406672655637, 0.21366217556674805, 0.251982614915933, 0.31677090397986274, 0.20715716324034705, 0.2083250377680016, 0.17519162439996128, 0.1857954178570006, 0.20501890275406753, 0.23327655976203032, 0.1846015526658603, 0.19813928951815218, 0.18162884366506127, 0.18930230491346012, 0.19855873540962898, 0.2317020982704746, 0.21452476844150692, 0.24301698560734197, 0.19929400485854853, 0.2437775545227835, 0.200650572934845, 0.19738177822804515, 0.23381399647608203, 0.20281234318210883, 0.7799038478439096, 0.4565498263875647, 0.666277720637086, 0.8866318357582654, 0.18881225967639392, 0.16185603845139773, 0.16299193334521989, 0.6169631749482054, 0.16714574249995262, 0.6023312147796633, 0.4861447355394094, 0.5695356036716568, 0.15607104722721976, 0.1952571775988926, 0.20722769779293249, 0.6412235157540891, 0.1955666771865262, 0.16159772917664028, 0.18396767014124782, 0.16239542511755023, 0.16479747911075338, 0.18566406952139236, 0.1916648120628115, 0.1568158603590133, 0.16957805558320238, 0.1765781572748112, 0.19028631181451872, 0.06815291026287973, 0.0730598916036932, 0.07305782374568992, 0.0547631398794598, 0.07374694477634369, 0.07796957333554566, 0.06982801894194268, 0.07802646867190688, 0.116149765581958]}, "mutation_prompt": null}
{"id": "30bf0c23-5a08-497a-8537-1b4e4a687dd7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4])  # Added new mutation strategy\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                else:  # New mutation strategy\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                \n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImproved", "description": "Enhancing the mutation strategy by incorporating a dynamic adaptation of the crossover rate CR during the optimization process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.8754207554563223, 0.85375946418306, 0.8769202518345625, 0.8696534936898641, 0.8603009132802601, 0.8731484727698736, 0.8550128800831438, 0.8879378670081487, 0.8638805887100308, 0.7817727564130605, 0.5524248969334076, 0.6952308513692389, 0.7598665868182877, 0.5666261220399946, 0.7776599363872913, 0.7638343642510219, 0.7439007706886138, 0.7155530396913943, 0.13736727065710075, 0.1275734487954715, 0.18147477101310783, 0.15592894622077058, 0.6432365268964494, 0.12107009360235699, 0.1507756695562108, 0.16441810880742957, 0.12558690089871294, 0.17472561248057228, 0.11569696639646043, 0.13961271112780194, 0.13821390581901216, 0.13147944181480076, 0.13853838795211681, 0.16789351890389148, 0.1131312620232715, 0.09334954027515907, 0.9786564049976848, 0.9745636338429031, 0.966011038081036, 0.955032053100447, 0.9679461497920208, 0.95878988296688, 0.9664061460457236, 0.976019838502353, 0.9483760800546761, 0.20084085935665763, 0.26250947972952177, 0.17889493334692474, 0.47972907624759276, 0.6240259286184895, 0.597986623302367, 0.4749589835599698, 0.18257553937553905, 0.38727823856149923, 0.6520350404247848, 0.21037901376861823, 0.7604411605839793, 0.8526658452762831, 0.7777863118852285, 0.7518491222575232, 0.345919109455296, 0.17047448470994764, 0.21044851257439046, 0.18645828628923022, 0.15641427087205861, 0.19652427848779142, 0.15522963212505803, 0.12652691227430424, 0.2193732794313008, 0.15029104038372976, 0.13601439443120233, 0.161296500575435, 0.13353858061934787, 0.1250918265639671, 0.13941038580721254, 0.13967159904081272, 0.20541576211945511, 0.18295550594507481, 0.19730472763365714, 0.20014813676679222, 0.120537953829145, 0.004760057764934711, 0.0017321719372579425, 0.017410361087007886, 0.05366817268127433, 0.009405970779663986, 0.06495054451534166, 0.035044062350527594, 0.0022818915833653364, 0.050951464902411536, 0.11436868395114741, 0.13096501185935072, 0.12061229246752059, 0.056569052030410405, 0.019446993624445685, 0.04270243200455093, 0.0719076683566493, 0.016771956520852283, 0.060567687124821856, 0.08809474868610945, 0.05556244098969998, 0.2630424602790724, 0.14024664254254204, 0.05219794424663271, 0.056519508807776786, 0.134381818441643, 0.10531878214699786, 0.04978559702321128, 0.15077523247619118, 0.2413253674056075, 0.16638384031049025, 0.2446669784998412, 0.16088276754231878, 0.21926378172222738, 0.17200948148988715, 0.30016060335606, 0.11021393314869787, 0.4981123538429446, 0.5735618066568671, 0.48819799111717965, 0.4739370613986521, 0.4890348322860675, 0.5568407921947953, 0.5268451179437803, 0.5533522636796548, 0.5689497641645578, 0.08348153006577708, 0.1461143598864839, 0.1028260349499398, 0.21819120592451213, 0.09491212215283562, 0.06179695465555268, 0.09735376888522773, 0.11193946657375187, 0.11860978775553432, 0.11997057404978773, 0.13722485011493568, 0.12537917255471498, 0.14450923240858682, 0.1310566964690737, 0.17256008128224753, 0.19076914451014104, 0.13192141756259357, 0.12039915405145818, 0.37921393999773256, 0.37513648809630806, 0.4277041340802521, 0.3440434512284376, 0.38875153890238934, 0.32796195280273355, 0.31462488971356195, 0.31299332578495676, 0.2302265452037182, 0.2840063765440436, 0.2405656549991, 0.19607817043740017, 0.30609406672655637, 0.21366217556674805, 0.251982614915933, 0.31677090397986274, 0.20715716324034705, 0.2083250377680016, 0.17519162439996128, 0.1857954178570006, 0.20501890275406753, 0.23327655976203032, 0.1846015526658603, 0.19813928951815218, 0.18162884366506127, 0.18930230491346012, 0.19855873540962898, 0.2317020982704746, 0.21452476844150692, 0.24301698560734197, 0.19929400485854853, 0.2437775545227835, 0.200650572934845, 0.19738177822804515, 0.23381399647608203, 0.20281234318210883, 0.7799038478439096, 0.4565498263875647, 0.666277720637086, 0.8866318357582654, 0.18881225967639392, 0.16185603845139773, 0.16299193334521989, 0.6169631749482054, 0.16714574249995262, 0.6023312147796633, 0.4861447355394094, 0.5695356036716568, 0.15607104722721976, 0.1952571775988926, 0.20722769779293249, 0.6412235157540891, 0.1955666771865262, 0.16159772917664028, 0.18396767014124782, 0.16239542511755023, 0.16479747911075338, 0.18566406952139236, 0.1916648120628115, 0.1568158603590133, 0.16957805558320238, 0.1765781572748112, 0.19028631181451872, 0.06815291026287973, 0.0730598916036932, 0.07305782374568992, 0.0547631398794598, 0.07374694477634369, 0.07796957333554566, 0.06982801894194268, 0.07802646867190688, 0.116149765581958]}, "mutation_prompt": null}
{"id": "6b38b5d3-8f74-448d-8a76-850d09543ef2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImprovedOpposition(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5])  # Added new mutation strategy for opposition-based learning\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                else:  # New mutation strategy for opposition-based learning\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImprovedOpposition", "description": "Introducing a novel mutation strategy based on opposition-based learning to explore the search space more effectively.", "configspace": "", "generation": 42, "fitness": 0.3092706595819467, "feedback": "The algorithm EnhancedAdaptiveDEImprovedOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "5fbb26c1-410b-48aa-8a40-daafced40df9", "metadata": {"aucs": [0.8733883139501242, 0.8602589025086554, 0.8570881951812502, 0.8572229515107916, 0.8420241410714839, 0.8541666036301119, 0.8568357174545652, 0.8679759372278734, 0.8858221072752683, 0.7568015837002167, 0.7369798420834341, 0.7216765733993551, 0.7497775155830135, 0.7444569830019404, 0.7381723471059694, 0.7733380451873637, 0.755979766853906, 0.7688297583466263, 0.6804033332234238, 0.17634611466599381, 0.16834257519696771, 0.14794243806056606, 0.5386448294068245, 0.1674405167957087, 0.1713494897194332, 0.10241227163962918, 0.09642695442030813, 0.13715888715742564, 0.12530368456777363, 0.13891233515475265, 0.13896185962391028, 0.11263040261061419, 0.09610221228456461, 0.13765409000308004, 0.14560490476308863, 0.1358670139782796, 0.9820717736182217, 0.9774863825367058, 0.9872450537215437, 0.9730346440387433, 0.964879933126993, 0.9660024164324548, 0.9815362316472762, 0.97155658271582, 0.979817603053013, 0.5392537934387375, 0.47438622953868825, 0.46524864029654556, 0.43861567209426944, 0.40606364774700043, 0.542555366685163, 0.54257896920341, 0.47229160009914073, 0.45536041433328267, 0.2226539133466724, 0.5744240324124104, 0.2206186688191999, 0.18411960246121895, 0.19993840541361274, 0.2048241934583669, 0.22541583264625753, 0.22098033917644921, 0.32194066759133655, 0.12851431495103438, 0.16301153144892344, 0.17952526021553206, 0.12121608518443794, 0.3198311461299329, 0.18503682528565812, 0.12553599121628867, 0.22701651954489221, 0.23164203577107279, 0.20334067111880305, 0.13358652941107507, 0.18894429965313453, 0.21089662075485793, 0.3521756800016771, 0.2004318796138993, 0.12454669742599456, 0.09844635774139388, 0.10296099054590702, 9.999999999998899e-05, 0.02693958182986933, 0.03250401316058449, 0.009205934491068879, 0.00269159669179031, 0.0023300387614967333, 0.013886727215883132, 0.021249793904437486, 9.999999999998899e-05, 0.07300654018488983, 0.03986311373989937, 0.1056140213709168, 0.09823426676974178, 0.14667662252014457, 0.08355263251818856, 0.08773800218597794, 0.10191484474172974, 0.08001648752304358, 0.008659982915697806, 0.07567456699849773, 0.08824215505349164, 0.0511896518540389, 0.05521693539126826, 0.09519533625094245, 0.09411577916384284, 0.1467841041884571, 0.04809012063090545, 0.13357004238449477, 0.15210487249957205, 0.19130623465897922, 0.10060777012472155, 0.2257668528785688, 0.14890862826486628, 0.1424411035048172, 0.11059359201039753, 0.13165875512728997, 0.5575964428802369, 0.52286924014712, 0.5682998238487034, 0.5382412725355039, 0.5499916135043488, 0.5071394138156744, 0.48919705243204803, 0.5623032064448399, 0.509073768293026, 0.10004772994668032, 0.07723357841355283, 0.09047701508795414, 0.10135810759437447, 0.10453147336406887, 0.12183954946762388, 0.058112426321520805, 0.10199278949725743, 0.09063518485936306, 0.1472821332013966, 0.10375488084200313, 0.13384983629399194, 0.13515801265837868, 0.11658559017854186, 0.12126085909644968, 0.15189484090879868, 0.12055451278544538, 0.12108542424862312, 0.42444654320970865, 0.38567896023049086, 0.37859356597090066, 0.491335660257773, 0.30268401931705435, 0.3415422708486675, 0.29646024318623887, 0.4536519616722614, 0.47775816876989396, 0.1652865416691529, 0.3149336477849367, 0.20478032253058587, 0.32136823680180804, 0.2078571885314736, 0.2897186187827734, 0.190308779223191, 0.20896566853069376, 0.20370161844868195, 0.2007275437528938, 0.1905188677849422, 0.1648432427649552, 0.17334382032703688, 0.18163625196933586, 0.18036236082965096, 0.21514163479857962, 0.21460898437299336, 0.1970712570889278, 0.6214651120861793, 0.2254213404056411, 0.42751188046912547, 0.6501693945493401, 0.5907942629347869, 0.20045659118975023, 0.19771596663603086, 0.19889610304652905, 0.19955486102082898, 0.1729542937159182, 0.8339648370848928, 0.7467992550239695, 0.8631827907641998, 0.19541013404724006, 0.16469167911312488, 0.807493180691235, 0.7097303012728248, 0.1627163016217713, 0.7420214880466315, 0.20502227294125364, 0.3789353705777254, 0.16658824300099695, 0.5361124828611727, 0.20960822737828244, 0.14946570571401008, 0.2842170941607707, 0.15976623152529956, 0.15842077554482514, 0.17051260358901454, 0.1859572392409028, 0.16838999541897426, 0.1731133623720036, 0.16310219334061238, 0.1650855123573487, 0.16928878286685323, 0.16217418209351986, 0.07409356588346405, 0.0666135346156741, 0.06269218250938446, 0.08272780149686987, 0.07396360889526987, 0.07582732509118228, 0.08975384202197734, 0.07267805269546856, 0.07210080414262632]}, "mutation_prompt": null}
{"id": "870f3129-da56-426a-a26c-a546035e57a8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImprovedOppositionRefined(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.scale_factor = 0.5\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        diversity_factor = np.std(population)\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5])  # Added new mutation strategy for opposition-based learning\n\n                F = self.F * np.exp(-_ / self.budget) * self.scale_factor * diversity_factor  # Adaptive scaling factor based on diversity\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                else:  # New mutation strategy for opposition-based learning\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            diversity_factor = np.std(population)\n\n        return best_solution", "name": "EnhancedAdaptiveDEImprovedOppositionRefined", "description": "Introducing a novel adaptive scaling factor based on population diversity to enhance exploration in the opposition-based learning strategy.", "configspace": "", "generation": 43, "fitness": 0.22907646179137947, "feedback": "The algorithm EnhancedAdaptiveDEImprovedOppositionRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.26.", "error": "", "parent_id": "6b38b5d3-8f74-448d-8a76-850d09543ef2", "metadata": {"aucs": [0.8910698524525648, 0.8675799071517096, 0.875327690192717, 0.7128344561565942, 0.7277970392595567, 0.8033087391703149, 0.8546610241711219, 0.8560999176800488, 0.8679678378045919, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03448189421116221, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11915245157622434, 0.13867909834227576, 0.09050108668563606, 0.16961301987702115, 0.13922625613934392, 0.33860882298584893, 0.14546718723993635, 0.14013797908656866, 0.1343145503048545, 0.09384292205107503, 0.09854106641880989, 0.11653032435806177, 0.14956981227464639, 0.14737908257405286, 0.06637051377222847, 0.11591950392716643, 0.0889853365681158, 0.1096228613572845, 0.9806027113066819, 0.9905349699025703, 0.9898439984500123, 0.9777937374851265, 0.9755820010299707, 0.9918056871171966, 0.9828340732599848, 0.9815097279598056, 0.9723726264106757, 0.4234613999277608, 9.999999999998899e-05, 9.999999999998899e-05, 0.04710904980792108, 0.19825437926525402, 0.34479132701122783, 0.07884393645752319, 0.011293333694524565, 9.999999999998899e-05, 0.205693892965644, 0.7031746404298811, 0.8250935363662996, 0.3430091055566489, 0.26170343924936856, 0.6616774524842964, 0.5650271152829001, 0.3060890440467362, 0.19456129421122292, 0.21723193115018335, 0.1370897626672447, 0.1967839077585849, 0.1574037240661812, 9.999999999998899e-05, 0.1994509179241738, 0.2191057495491886, 0.23251384900197514, 0.26007798330247955, 0.15293055456814875, 0.09228693603735594, 0.09258690486182952, 0.07917066229990377, 0.08332258949458105, 0.13097437565611547, 0.057872861158616784, 0.09945410661887433, 0.10406260277791501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017121636183485167, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03955724101792768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12210660495048398, 0.07454726457973826, 0.05154102454012266, 0.20404812186812205, 0.12265852950332168, 0.1072185918700268, 0.0962407015782939, 0.13982360396330373, 0.10291545045969774, 0.10256214984502243, 0.08697437773609618, 0.07542198264117883, 0.49619182330882017, 0.492840036436084, 0.5394394311143486, 0.502408352301715, 0.4163723679675182, 0.4336173778502549, 0.5466092595535532, 0.5126151793743279, 0.25640206468838966, 0.07934135484169924, 0.0865009397614036, 0.08803991535711742, 0.09883191896693844, 0.10662393882324561, 0.08869111259122764, 0.0952919073241737, 0.13115575026776582, 0.10397433309418991, 0.1324322998521651, 0.12588489603510045, 0.09602319001696724, 0.10007552347188686, 0.10415709870596124, 0.11831505750835714, 0.17980031177823652, 0.10508909795504473, 0.09694543428391644, 0.44114248853771654, 0.27040973650166567, 0.26681383743080744, 0.28381815587395576, 0.298512335679598, 0.30500929493464723, 0.41435718203531524, 0.3484796956202907, 0.3491179105970519, 0.252767081023197, 0.256748524785654, 0.19804386784017147, 0.1909058225221857, 0.2764809310317792, 0.30439675782893016, 0.29060445741723884, 0.20838741937999483, 0.24136369983455375, 0.16906486072943117, 0.19800321758852357, 0.21309637416029936, 0.1784021305572363, 0.19102592508263283, 0.19106221195538187, 0.18843447552737114, 0.19069537553616722, 0.183472515603039, 0.20649070533953762, 0.1884203370225047, 0.7401887433001875, 0.19876828513380274, 0.20299270549254755, 0.1812766108911773, 0.1984157040689245, 0.1908326807970513, 0.21527332930200505, 0.14887877108643044, 0.15882268985591708, 0.18420402690123716, 0.876850941153786, 0.18495772102536856, 0.1379448945975289, 0.12271737415999118, 0.6637221714885595, 0.14632318171548608, 0.08196805443963673, 0.129055224912082, 0.39441336327005083, 0.16076317974305931, 0.16912466590294095, 0.20807617810004053, 0.09293337670323365, 0.1798013116909355, 0.14322466577534743, 0.16450031908122487, 0.15821720294473252, 0.15441198137312295, 0.1577016942360948, 0.16376458812814287, 0.1607297166060313, 0.20660610190258744, 0.16108812993086608, 0.15181014652681346, 0.07339640000045689, 0.0653996786055252, 0.07507627381011595, 0.07562351354850383, 0.06821854360474366, 0.07779178543776011, 0.08610326765042775, 0.08729202075449904, 0.0873478169827746]}, "mutation_prompt": null}
{"id": "01416b89-88af-4d37-ae4c-9fcbb310a859", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImprovedOpposition(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5])  # Added new mutation strategy for opposition-based learning\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                else:  # New mutation strategy for opposition-based learning\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImprovedOpposition", "description": "Introducing a novel mutation strategy based on opposition-based learning to explore the search space more effectively.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6b38b5d3-8f74-448d-8a76-850d09543ef2", "metadata": {"aucs": [0.8733883139501242, 0.8602589025086554, 0.8570881951812502, 0.8572229515107916, 0.8420241410714839, 0.8541666036301119, 0.8568357174545652, 0.8679759372278734, 0.8858221072752683, 0.7568015837002167, 0.7369798420834341, 0.7216765733993551, 0.7497775155830135, 0.7444569830019404, 0.7381723471059694, 0.7733380451873637, 0.755979766853906, 0.7688297583466263, 0.6804033332234238, 0.17634611466599381, 0.16834257519696771, 0.14794243806056606, 0.5386448294068245, 0.1674405167957087, 0.1713494897194332, 0.10241227163962918, 0.09642695442030813, 0.13715888715742564, 0.12530368456777363, 0.13891233515475265, 0.13896185962391028, 0.11263040261061419, 0.09610221228456461, 0.13765409000308004, 0.14560490476308863, 0.1358670139782796, 0.9820717736182217, 0.9774863825367058, 0.9872450537215437, 0.9730346440387433, 0.964879933126993, 0.9660024164324548, 0.9815362316472762, 0.97155658271582, 0.979817603053013, 0.5392537934387375, 0.47438622953868825, 0.46524864029654556, 0.43861567209426944, 0.40606364774700043, 0.542555366685163, 0.54257896920341, 0.47229160009914073, 0.45536041433328267, 0.2226539133466724, 0.5744240324124104, 0.2206186688191999, 0.18411960246121895, 0.19993840541361274, 0.2048241934583669, 0.22541583264625753, 0.22098033917644921, 0.32194066759133655, 0.12851431495103438, 0.16301153144892344, 0.17952526021553206, 0.12121608518443794, 0.3198311461299329, 0.18503682528565812, 0.12553599121628867, 0.22701651954489221, 0.23164203577107279, 0.20334067111880305, 0.13358652941107507, 0.18894429965313453, 0.21089662075485793, 0.3521756800016771, 0.2004318796138993, 0.12454669742599456, 0.09844635774139388, 0.10296099054590702, 9.999999999998899e-05, 0.02693958182986933, 0.03250401316058449, 0.009205934491068879, 0.00269159669179031, 0.0023300387614967333, 0.013886727215883132, 0.021249793904437486, 9.999999999998899e-05, 0.07300654018488983, 0.03986311373989937, 0.1056140213709168, 0.09823426676974178, 0.14667662252014457, 0.08355263251818856, 0.08773800218597794, 0.10191484474172974, 0.08001648752304358, 0.008659982915697806, 0.07567456699849773, 0.08824215505349164, 0.0511896518540389, 0.05521693539126826, 0.09519533625094245, 0.09411577916384284, 0.1467841041884571, 0.04809012063090545, 0.13357004238449477, 0.15210487249957205, 0.19130623465897922, 0.10060777012472155, 0.2257668528785688, 0.14890862826486628, 0.1424411035048172, 0.11059359201039753, 0.13165875512728997, 0.5575964428802369, 0.52286924014712, 0.5682998238487034, 0.5382412725355039, 0.5499916135043488, 0.5071394138156744, 0.48919705243204803, 0.5623032064448399, 0.509073768293026, 0.10004772994668032, 0.07723357841355283, 0.09047701508795414, 0.10135810759437447, 0.10453147336406887, 0.12183954946762388, 0.058112426321520805, 0.10199278949725743, 0.09063518485936306, 0.1472821332013966, 0.10375488084200313, 0.13384983629399194, 0.13515801265837868, 0.11658559017854186, 0.12126085909644968, 0.15189484090879868, 0.12055451278544538, 0.12108542424862312, 0.42444654320970865, 0.38567896023049086, 0.37859356597090066, 0.491335660257773, 0.30268401931705435, 0.3415422708486675, 0.29646024318623887, 0.4536519616722614, 0.47775816876989396, 0.1652865416691529, 0.3149336477849367, 0.20478032253058587, 0.32136823680180804, 0.2078571885314736, 0.2897186187827734, 0.190308779223191, 0.20896566853069376, 0.20370161844868195, 0.2007275437528938, 0.1905188677849422, 0.1648432427649552, 0.17334382032703688, 0.18163625196933586, 0.18036236082965096, 0.21514163479857962, 0.21460898437299336, 0.1970712570889278, 0.6214651120861793, 0.2254213404056411, 0.42751188046912547, 0.6501693945493401, 0.5907942629347869, 0.20045659118975023, 0.19771596663603086, 0.19889610304652905, 0.19955486102082898, 0.1729542937159182, 0.8339648370848928, 0.7467992550239695, 0.8631827907641998, 0.19541013404724006, 0.16469167911312488, 0.807493180691235, 0.7097303012728248, 0.1627163016217713, 0.7420214880466315, 0.20502227294125364, 0.3789353705777254, 0.16658824300099695, 0.5361124828611727, 0.20960822737828244, 0.14946570571401008, 0.2842170941607707, 0.15976623152529956, 0.15842077554482514, 0.17051260358901454, 0.1859572392409028, 0.16838999541897426, 0.1731133623720036, 0.16310219334061238, 0.1650855123573487, 0.16928878286685323, 0.16217418209351986, 0.07409356588346405, 0.0666135346156741, 0.06269218250938446, 0.08272780149686987, 0.07396360889526987, 0.07582732509118228, 0.08975384202197734, 0.07267805269546856, 0.07210080414262632]}, "mutation_prompt": null}
{"id": "0b2b01e9-c0e8-42fd-891a-3c1adb68fcad", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImprovedOpposition(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5])  # Added new mutation strategy for opposition-based learning\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                else:  # New mutation strategy for opposition-based learning\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImprovedOpposition", "description": "Introducing a novel mutation strategy based on opposition-based learning to explore the search space more effectively.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6b38b5d3-8f74-448d-8a76-850d09543ef2", "metadata": {"aucs": [0.8733883139501242, 0.8602589025086554, 0.8570881951812502, 0.8572229515107916, 0.8420241410714839, 0.8541666036301119, 0.8568357174545652, 0.8679759372278734, 0.8858221072752683, 0.7568015837002167, 0.7369798420834341, 0.7216765733993551, 0.7497775155830135, 0.7444569830019404, 0.7381723471059694, 0.7733380451873637, 0.755979766853906, 0.7688297583466263, 0.6804033332234238, 0.17634611466599381, 0.16834257519696771, 0.14794243806056606, 0.5386448294068245, 0.1674405167957087, 0.1713494897194332, 0.10241227163962918, 0.09642695442030813, 0.13715888715742564, 0.12530368456777363, 0.13891233515475265, 0.13896185962391028, 0.11263040261061419, 0.09610221228456461, 0.13765409000308004, 0.14560490476308863, 0.1358670139782796, 0.9820717736182217, 0.9774863825367058, 0.9872450537215437, 0.9730346440387433, 0.964879933126993, 0.9660024164324548, 0.9815362316472762, 0.97155658271582, 0.979817603053013, 0.5392537934387375, 0.47438622953868825, 0.46524864029654556, 0.43861567209426944, 0.40606364774700043, 0.542555366685163, 0.54257896920341, 0.47229160009914073, 0.45536041433328267, 0.2226539133466724, 0.5744240324124104, 0.2206186688191999, 0.18411960246121895, 0.19993840541361274, 0.2048241934583669, 0.22541583264625753, 0.22098033917644921, 0.32194066759133655, 0.12851431495103438, 0.16301153144892344, 0.17952526021553206, 0.12121608518443794, 0.3198311461299329, 0.18503682528565812, 0.12553599121628867, 0.22701651954489221, 0.23164203577107279, 0.20334067111880305, 0.13358652941107507, 0.18894429965313453, 0.21089662075485793, 0.3521756800016771, 0.2004318796138993, 0.12454669742599456, 0.09844635774139388, 0.10296099054590702, 9.999999999998899e-05, 0.02693958182986933, 0.03250401316058449, 0.009205934491068879, 0.00269159669179031, 0.0023300387614967333, 0.013886727215883132, 0.021249793904437486, 9.999999999998899e-05, 0.07300654018488983, 0.03986311373989937, 0.1056140213709168, 0.09823426676974178, 0.14667662252014457, 0.08355263251818856, 0.08773800218597794, 0.10191484474172974, 0.08001648752304358, 0.008659982915697806, 0.07567456699849773, 0.08824215505349164, 0.0511896518540389, 0.05521693539126826, 0.09519533625094245, 0.09411577916384284, 0.1467841041884571, 0.04809012063090545, 0.13357004238449477, 0.15210487249957205, 0.19130623465897922, 0.10060777012472155, 0.2257668528785688, 0.14890862826486628, 0.1424411035048172, 0.11059359201039753, 0.13165875512728997, 0.5575964428802369, 0.52286924014712, 0.5682998238487034, 0.5382412725355039, 0.5499916135043488, 0.5071394138156744, 0.48919705243204803, 0.5623032064448399, 0.509073768293026, 0.10004772994668032, 0.07723357841355283, 0.09047701508795414, 0.10135810759437447, 0.10453147336406887, 0.12183954946762388, 0.058112426321520805, 0.10199278949725743, 0.09063518485936306, 0.1472821332013966, 0.10375488084200313, 0.13384983629399194, 0.13515801265837868, 0.11658559017854186, 0.12126085909644968, 0.15189484090879868, 0.12055451278544538, 0.12108542424862312, 0.42444654320970865, 0.38567896023049086, 0.37859356597090066, 0.491335660257773, 0.30268401931705435, 0.3415422708486675, 0.29646024318623887, 0.4536519616722614, 0.47775816876989396, 0.1652865416691529, 0.3149336477849367, 0.20478032253058587, 0.32136823680180804, 0.2078571885314736, 0.2897186187827734, 0.190308779223191, 0.20896566853069376, 0.20370161844868195, 0.2007275437528938, 0.1905188677849422, 0.1648432427649552, 0.17334382032703688, 0.18163625196933586, 0.18036236082965096, 0.21514163479857962, 0.21460898437299336, 0.1970712570889278, 0.6214651120861793, 0.2254213404056411, 0.42751188046912547, 0.6501693945493401, 0.5907942629347869, 0.20045659118975023, 0.19771596663603086, 0.19889610304652905, 0.19955486102082898, 0.1729542937159182, 0.8339648370848928, 0.7467992550239695, 0.8631827907641998, 0.19541013404724006, 0.16469167911312488, 0.807493180691235, 0.7097303012728248, 0.1627163016217713, 0.7420214880466315, 0.20502227294125364, 0.3789353705777254, 0.16658824300099695, 0.5361124828611727, 0.20960822737828244, 0.14946570571401008, 0.2842170941607707, 0.15976623152529956, 0.15842077554482514, 0.17051260358901454, 0.1859572392409028, 0.16838999541897426, 0.1731133623720036, 0.16310219334061238, 0.1650855123573487, 0.16928878286685323, 0.16217418209351986, 0.07409356588346405, 0.0666135346156741, 0.06269218250938446, 0.08272780149686987, 0.07396360889526987, 0.07582732509118228, 0.08975384202197734, 0.07267805269546856, 0.07210080414262632]}, "mutation_prompt": null}
{"id": "6c2b30c4-19f5-4f39-84b1-2cb99a85b623", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImprovedOpposition(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5])  # Added new mutation strategy for opposition-based learning\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                else:  # New mutation strategy for opposition-based learning\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImprovedOpposition", "description": "Introducing a novel mutation strategy based on opposition-based learning to explore the search space more effectively.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6b38b5d3-8f74-448d-8a76-850d09543ef2", "metadata": {"aucs": [0.8733883139501242, 0.8602589025086554, 0.8570881951812502, 0.8572229515107916, 0.8420241410714839, 0.8541666036301119, 0.8568357174545652, 0.8679759372278734, 0.8858221072752683, 0.7568015837002167, 0.7369798420834341, 0.7216765733993551, 0.7497775155830135, 0.7444569830019404, 0.7381723471059694, 0.7733380451873637, 0.755979766853906, 0.7688297583466263, 0.6804033332234238, 0.17634611466599381, 0.16834257519696771, 0.14794243806056606, 0.5386448294068245, 0.1674405167957087, 0.1713494897194332, 0.10241227163962918, 0.09642695442030813, 0.13715888715742564, 0.12530368456777363, 0.13891233515475265, 0.13896185962391028, 0.11263040261061419, 0.09610221228456461, 0.13765409000308004, 0.14560490476308863, 0.1358670139782796, 0.9820717736182217, 0.9774863825367058, 0.9872450537215437, 0.9730346440387433, 0.964879933126993, 0.9660024164324548, 0.9815362316472762, 0.97155658271582, 0.979817603053013, 0.5392537934387375, 0.47438622953868825, 0.46524864029654556, 0.43861567209426944, 0.40606364774700043, 0.542555366685163, 0.54257896920341, 0.47229160009914073, 0.45536041433328267, 0.2226539133466724, 0.5744240324124104, 0.2206186688191999, 0.18411960246121895, 0.19993840541361274, 0.2048241934583669, 0.22541583264625753, 0.22098033917644921, 0.32194066759133655, 0.12851431495103438, 0.16301153144892344, 0.17952526021553206, 0.12121608518443794, 0.3198311461299329, 0.18503682528565812, 0.12553599121628867, 0.22701651954489221, 0.23164203577107279, 0.20334067111880305, 0.13358652941107507, 0.18894429965313453, 0.21089662075485793, 0.3521756800016771, 0.2004318796138993, 0.12454669742599456, 0.09844635774139388, 0.10296099054590702, 9.999999999998899e-05, 0.02693958182986933, 0.03250401316058449, 0.009205934491068879, 0.00269159669179031, 0.0023300387614967333, 0.013886727215883132, 0.021249793904437486, 9.999999999998899e-05, 0.07300654018488983, 0.03986311373989937, 0.1056140213709168, 0.09823426676974178, 0.14667662252014457, 0.08355263251818856, 0.08773800218597794, 0.10191484474172974, 0.08001648752304358, 0.008659982915697806, 0.07567456699849773, 0.08824215505349164, 0.0511896518540389, 0.05521693539126826, 0.09519533625094245, 0.09411577916384284, 0.1467841041884571, 0.04809012063090545, 0.13357004238449477, 0.15210487249957205, 0.19130623465897922, 0.10060777012472155, 0.2257668528785688, 0.14890862826486628, 0.1424411035048172, 0.11059359201039753, 0.13165875512728997, 0.5575964428802369, 0.52286924014712, 0.5682998238487034, 0.5382412725355039, 0.5499916135043488, 0.5071394138156744, 0.48919705243204803, 0.5623032064448399, 0.509073768293026, 0.10004772994668032, 0.07723357841355283, 0.09047701508795414, 0.10135810759437447, 0.10453147336406887, 0.12183954946762388, 0.058112426321520805, 0.10199278949725743, 0.09063518485936306, 0.1472821332013966, 0.10375488084200313, 0.13384983629399194, 0.13515801265837868, 0.11658559017854186, 0.12126085909644968, 0.15189484090879868, 0.12055451278544538, 0.12108542424862312, 0.42444654320970865, 0.38567896023049086, 0.37859356597090066, 0.491335660257773, 0.30268401931705435, 0.3415422708486675, 0.29646024318623887, 0.4536519616722614, 0.47775816876989396, 0.1652865416691529, 0.3149336477849367, 0.20478032253058587, 0.32136823680180804, 0.2078571885314736, 0.2897186187827734, 0.190308779223191, 0.20896566853069376, 0.20370161844868195, 0.2007275437528938, 0.1905188677849422, 0.1648432427649552, 0.17334382032703688, 0.18163625196933586, 0.18036236082965096, 0.21514163479857962, 0.21460898437299336, 0.1970712570889278, 0.6214651120861793, 0.2254213404056411, 0.42751188046912547, 0.6501693945493401, 0.5907942629347869, 0.20045659118975023, 0.19771596663603086, 0.19889610304652905, 0.19955486102082898, 0.1729542937159182, 0.8339648370848928, 0.7467992550239695, 0.8631827907641998, 0.19541013404724006, 0.16469167911312488, 0.807493180691235, 0.7097303012728248, 0.1627163016217713, 0.7420214880466315, 0.20502227294125364, 0.3789353705777254, 0.16658824300099695, 0.5361124828611727, 0.20960822737828244, 0.14946570571401008, 0.2842170941607707, 0.15976623152529956, 0.15842077554482514, 0.17051260358901454, 0.1859572392409028, 0.16838999541897426, 0.1731133623720036, 0.16310219334061238, 0.1650855123573487, 0.16928878286685323, 0.16217418209351986, 0.07409356588346405, 0.0666135346156741, 0.06269218250938446, 0.08272780149686987, 0.07396360889526987, 0.07582732509118228, 0.08975384202197734, 0.07267805269546856, 0.07210080414262632]}, "mutation_prompt": null}
{"id": "d4913065-31cd-407f-bdc2-1bf11188159b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImprovedOpposition(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5])  # Added new mutation strategy for opposition-based learning\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                else:  # New mutation strategy for opposition-based learning\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImprovedOpposition", "description": "Introducing a novel mutation strategy based on opposition-based learning to explore the search space more effectively.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6b38b5d3-8f74-448d-8a76-850d09543ef2", "metadata": {"aucs": [0.8733883139501242, 0.8602589025086554, 0.8570881951812502, 0.8572229515107916, 0.8420241410714839, 0.8541666036301119, 0.8568357174545652, 0.8679759372278734, 0.8858221072752683, 0.7568015837002167, 0.7369798420834341, 0.7216765733993551, 0.7497775155830135, 0.7444569830019404, 0.7381723471059694, 0.7733380451873637, 0.755979766853906, 0.7688297583466263, 0.6804033332234238, 0.17634611466599381, 0.16834257519696771, 0.14794243806056606, 0.5386448294068245, 0.1674405167957087, 0.1713494897194332, 0.10241227163962918, 0.09642695442030813, 0.13715888715742564, 0.12530368456777363, 0.13891233515475265, 0.13896185962391028, 0.11263040261061419, 0.09610221228456461, 0.13765409000308004, 0.14560490476308863, 0.1358670139782796, 0.9820717736182217, 0.9774863825367058, 0.9872450537215437, 0.9730346440387433, 0.964879933126993, 0.9660024164324548, 0.9815362316472762, 0.97155658271582, 0.979817603053013, 0.5392537934387375, 0.47438622953868825, 0.46524864029654556, 0.43861567209426944, 0.40606364774700043, 0.542555366685163, 0.54257896920341, 0.47229160009914073, 0.45536041433328267, 0.2226539133466724, 0.5744240324124104, 0.2206186688191999, 0.18411960246121895, 0.19993840541361274, 0.2048241934583669, 0.22541583264625753, 0.22098033917644921, 0.32194066759133655, 0.12851431495103438, 0.16301153144892344, 0.17952526021553206, 0.12121608518443794, 0.3198311461299329, 0.18503682528565812, 0.12553599121628867, 0.22701651954489221, 0.23164203577107279, 0.20334067111880305, 0.13358652941107507, 0.18894429965313453, 0.21089662075485793, 0.3521756800016771, 0.2004318796138993, 0.12454669742599456, 0.09844635774139388, 0.10296099054590702, 9.999999999998899e-05, 0.02693958182986933, 0.03250401316058449, 0.009205934491068879, 0.00269159669179031, 0.0023300387614967333, 0.013886727215883132, 0.021249793904437486, 9.999999999998899e-05, 0.07300654018488983, 0.03986311373989937, 0.1056140213709168, 0.09823426676974178, 0.14667662252014457, 0.08355263251818856, 0.08773800218597794, 0.10191484474172974, 0.08001648752304358, 0.008659982915697806, 0.07567456699849773, 0.08824215505349164, 0.0511896518540389, 0.05521693539126826, 0.09519533625094245, 0.09411577916384284, 0.1467841041884571, 0.04809012063090545, 0.13357004238449477, 0.15210487249957205, 0.19130623465897922, 0.10060777012472155, 0.2257668528785688, 0.14890862826486628, 0.1424411035048172, 0.11059359201039753, 0.13165875512728997, 0.5575964428802369, 0.52286924014712, 0.5682998238487034, 0.5382412725355039, 0.5499916135043488, 0.5071394138156744, 0.48919705243204803, 0.5623032064448399, 0.509073768293026, 0.10004772994668032, 0.07723357841355283, 0.09047701508795414, 0.10135810759437447, 0.10453147336406887, 0.12183954946762388, 0.058112426321520805, 0.10199278949725743, 0.09063518485936306, 0.1472821332013966, 0.10375488084200313, 0.13384983629399194, 0.13515801265837868, 0.11658559017854186, 0.12126085909644968, 0.15189484090879868, 0.12055451278544538, 0.12108542424862312, 0.42444654320970865, 0.38567896023049086, 0.37859356597090066, 0.491335660257773, 0.30268401931705435, 0.3415422708486675, 0.29646024318623887, 0.4536519616722614, 0.47775816876989396, 0.1652865416691529, 0.3149336477849367, 0.20478032253058587, 0.32136823680180804, 0.2078571885314736, 0.2897186187827734, 0.190308779223191, 0.20896566853069376, 0.20370161844868195, 0.2007275437528938, 0.1905188677849422, 0.1648432427649552, 0.17334382032703688, 0.18163625196933586, 0.18036236082965096, 0.21514163479857962, 0.21460898437299336, 0.1970712570889278, 0.6214651120861793, 0.2254213404056411, 0.42751188046912547, 0.6501693945493401, 0.5907942629347869, 0.20045659118975023, 0.19771596663603086, 0.19889610304652905, 0.19955486102082898, 0.1729542937159182, 0.8339648370848928, 0.7467992550239695, 0.8631827907641998, 0.19541013404724006, 0.16469167911312488, 0.807493180691235, 0.7097303012728248, 0.1627163016217713, 0.7420214880466315, 0.20502227294125364, 0.3789353705777254, 0.16658824300099695, 0.5361124828611727, 0.20960822737828244, 0.14946570571401008, 0.2842170941607707, 0.15976623152529956, 0.15842077554482514, 0.17051260358901454, 0.1859572392409028, 0.16838999541897426, 0.1731133623720036, 0.16310219334061238, 0.1650855123573487, 0.16928878286685323, 0.16217418209351986, 0.07409356588346405, 0.0666135346156741, 0.06269218250938446, 0.08272780149686987, 0.07396360889526987, 0.07582732509118228, 0.08975384202197734, 0.07267805269546856, 0.07210080414262632]}, "mutation_prompt": null}
{"id": "667ed782-ef38-4a1c-a5ac-8415335a1de0", "solution": "class ChaoticAdaptiveDEImprovedOpposition(EnhancedAdaptiveDEImprovedOpposition):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        def chaotic_map(x, a=3.57, b=0.6):\n            return b * x * (1 - x) if x < 0.5 else b * (1 - x) * x\n\n        # Initialize population and best solution\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                # Mutation based on chaotic map\n                chaotic_val = chaotic_map(_ / self.budget)\n                mutant = population[a] + F * (population[b] - population[c]) + chaotic_val * (best_solution - population[i])\n\n                # Crossover and selection\n\n        return best_solution", "name": "ChaoticAdaptiveDEImprovedOpposition", "description": "Enhancing population diversity by incorporating a chaotic map for mutation to improve exploration capability.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'population' is not defined\").", "error": "NameError(\"name 'population' is not defined\")", "parent_id": "6b38b5d3-8f74-448d-8a76-850d09543ef2", "metadata": {}, "mutation_prompt": null}
{"id": "ffebba91-5ab2-4410-b365-1a91336ba12e", "solution": "class EnhancedAdaptiveDEImprovedOppositionHybrid(EnhancedAdaptiveDEImprovedOpposition):\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5])  # Added new mutation strategy for opposition-based learning\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                else:  # New mutation strategy for opposition-based learning\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n\n                if np.random.rand() < 0.5:  # Introduce a hybrid strategy by combining with DE\n                    de_mutant = population[a] + F * (population[b] - population[c])\n                    mutant = (mutant + de_mutant) / 2\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImprovedOppositionHybrid", "description": "Introducing a hybrid mutation strategy combining opposition-based learning with differential evolution to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 49, "fitness": 0.303999098761825, "feedback": "The algorithm EnhancedAdaptiveDEImprovedOppositionHybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "6b38b5d3-8f74-448d-8a76-850d09543ef2", "metadata": {"aucs": [0.88580806017038, 0.8861110789095784, 0.8717017034272546, 0.8811682751471622, 0.8746186948172715, 0.8702745993467286, 0.86930934065808, 0.8905524644971149, 0.8870205955875891, 0.6887900582090893, 0.8003117040568752, 0.805106869550518, 0.7662270655346324, 0.7902116298787742, 0.7929154106365435, 0.7735837479943852, 0.8170357099767858, 0.7992233474523344, 0.11784638365742617, 0.49741333024792767, 0.14514293242996246, 0.11774119111595305, 0.17592753500545255, 0.14427021495834957, 0.5136856357396312, 0.1649173627941647, 0.1732400671847827, 0.136445828377874, 0.14549330618383993, 0.12544223635671825, 0.11765635826082321, 0.11399005027049958, 0.166519050002768, 0.17154063481788184, 0.10917735827700237, 0.13878189600598745, 0.9745374911880663, 0.9678367131309, 0.9812926812029542, 0.9745880317913401, 0.9642144688463288, 0.9736843900099489, 0.9744049872744696, 0.9794374017685895, 0.9637233612775304, 0.46918223889712884, 0.3937505096026377, 0.5516231996870102, 0.4606330596750895, 0.37537607504404136, 0.4582598958465264, 0.3795329624912319, 0.24026533063364086, 0.3975942687245231, 0.18387846649020734, 0.11605890607625136, 0.22016811948026316, 0.3477829805609739, 0.36163452791587236, 0.2114350455546644, 0.2241201846154548, 0.232749119311354, 0.23648744165588542, 0.2838045417394792, 0.16178478212474168, 0.18425570042163586, 0.12806056245626463, 0.22511665084231336, 0.35966848768193604, 0.1816923142095992, 0.1721545851221461, 0.21803680456064223, 0.14799312819777244, 0.18977596504528083, 0.22449767335254067, 0.2605365983883824, 0.22080974623666694, 0.18289528208871175, 0.18568152119411452, 0.12578689966204581, 0.1798058507950916, 0.04901625569180745, 0.06617468555214423, 9.999999999998899e-05, 0.025827401822099305, 0.07582260444670086, 0.07544624380488107, 9.999999999998899e-05, 0.005400531206890213, 0.0015005599054184193, 0.10085441062340283, 0.05578003715989943, 0.05203307693768111, 0.09249475747346603, 0.02472957947642862, 0.09383842882136528, 0.06214501490998914, 0.13085279470641853, 0.19200775393031722, 0.1254689212445319, 0.04909207224112999, 0.17557609469698432, 0.06324728901207088, 0.08844597097557783, 0.08706206069112155, 0.04577548352363314, 0.12260025632323235, 0.08015119183696773, 0.17803538775241523, 0.08526080048709339, 0.11784168559414387, 0.18348870711945298, 0.13894113707452704, 0.21363480185932526, 0.23553662638234696, 0.11479974928274772, 0.2322257398007792, 0.45239951167940484, 0.5347338481359806, 0.5607320232951674, 0.5052870277758038, 0.5793200801032455, 0.4900214631700983, 0.554175113811414, 0.5138467383440444, 0.6051197020831367, 0.1077683574855901, 0.09987813951930025, 0.0987905915271109, 0.09229086034498846, 0.08962648680759755, 0.10009575135818616, 0.08531458455545193, 0.10006047442307231, 0.11208930455834942, 0.11658083800968255, 0.12620000296137446, 0.13715998844060773, 0.1610349953556628, 0.1484903503144226, 0.11976129372599642, 0.11992336871177778, 0.1270151416443407, 0.12216960422265744, 0.37798262711661423, 0.4431407170245517, 0.3835971325283326, 0.4392628257785832, 0.4685571952351313, 0.4146226918503436, 0.20079963926055822, 0.21689150536334345, 0.20957364462644523, 0.33635200226408446, 0.2870201115414919, 0.28995612339935783, 0.25840290378862363, 0.3097196354266296, 0.35855396162092346, 0.19427475368582758, 0.3143756235070464, 0.18002496657811784, 0.19768430181997088, 0.18745079925243113, 0.19151241040707656, 0.18923297892384427, 0.18715630151888074, 0.18293248367256532, 0.1848761093222847, 0.2187112548696346, 0.19541549966079086, 0.19585031208936787, 0.24517780082181573, 0.20532488615004174, 0.21270162302665663, 0.2119955877338835, 0.221328958488753, 0.20846391566250444, 0.2225064056459466, 0.23409602260840368, 0.713069701694357, 0.1694605047018084, 0.8970279924938972, 0.7760839330423287, 0.19566717248334864, 0.19737940153200484, 0.7256805455413418, 0.1613375852966925, 0.15858928663067196, 0.4582510021514634, 0.19739592202625178, 0.6556419428683673, 0.5463848791918589, 0.20071725268238683, 0.20832429297554234, 0.44206061177948497, 0.1569154557199356, 0.39518930789160966, 0.17472190861976578, 0.16656529855407376, 0.17647731484509133, 0.162806698390903, 0.17604413226471405, 0.16319450372321587, 0.1711453293257429, 0.16470504159904265, 0.16607170829400364, 0.09105235316359117, 0.09043360383728583, 0.0781102469013022, 0.09686261534207974, 0.08568283167716073, 0.08348886499859998, 0.06143707525025022, 0.07070097134904896, 0.08059789630227954]}, "mutation_prompt": null}
{"id": "cfc21d75-3fa9-4866-a13f-ddafdea4d462", "solution": "class EnhancedAdaptiveDEImprovedOppositionRefined(EnhancedAdaptiveDEImprovedOpposition):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.NP = max(5, int(np.ceil(10 + 2 * np.sqrt(dim))))  # Dynamic population size adjustment\n\n    def __call__(self, func):\n        return super().__call__(func)", "name": "EnhancedAdaptiveDEImprovedOppositionRefined", "description": "EnhancedAdaptiveDEImprovedOppositionRefined: Incorporating dynamic adaptation of population size to balance exploration and exploitation efficiently.", "configspace": "", "generation": 50, "fitness": 0.300887046095312, "feedback": "The algorithm EnhancedAdaptiveDEImprovedOppositionRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "6b38b5d3-8f74-448d-8a76-850d09543ef2", "metadata": {"aucs": [0.8200331915816343, 0.7901556908815691, 0.7885754365499474, 0.821998447346885, 0.8233525766583673, 0.7993040200850655, 0.8112310664321722, 0.8216021869060095, 0.8207377812674757, 0.6679834972369885, 0.6975857842650306, 0.6556607340822571, 0.6844849133727346, 0.6539848355068087, 0.697821421674979, 0.6661374298916305, 0.7013069816980286, 0.6892539436146511, 0.34600190797934616, 0.17166551008026876, 0.4963752107179623, 0.14662226973547166, 0.17013822500604947, 0.44010615282900023, 0.1483729139729123, 0.2963885495132622, 0.42919772939883094, 0.1599659950756641, 0.13361569502234738, 0.12003150137224727, 0.10877983957604753, 0.1397305446058008, 0.13354054498723467, 0.1376572355560547, 0.2868710459404684, 0.1329671750941619, 0.9881967415094512, 0.956216035302276, 0.9720216436447583, 0.9885448140511013, 0.9698332170870865, 0.976674736242595, 0.9879732925262, 0.9807775785243584, 0.9765821858881956, 0.35038071674483673, 0.36974619035297196, 0.39480367113496717, 0.43312439016173043, 0.4426547458590583, 0.3689380648338457, 0.3111041134224384, 0.33393095499498426, 0.363304397348292, 0.6083595388808658, 0.2087510111801011, 0.5056085700658064, 0.5589735786781702, 0.4667502894073752, 0.5952613751189941, 0.45179105962222843, 0.2135799850745872, 0.6215747900723148, 0.14863672298962105, 0.17411741308683837, 0.1810481646582227, 0.1188395294127349, 0.19707627337046374, 0.17715698718827222, 0.1976787876868209, 0.17257505100988169, 0.17953024878456514, 0.26640100419364043, 0.09742196033893413, 0.17306681000658664, 0.17400280708412807, 0.25697212023576255, 0.23735163247710445, 0.2398178221665488, 0.14719793897000577, 0.20997321814136793, 0.012147421992736218, 0.00017193042187824137, 9.999999999998899e-05, 9.999999999998899e-05, 0.045219827737718155, 9.999999999998899e-05, 0.03470104054611767, 0.0014573890489048003, 0.014635021247877411, 0.15147700184472523, 0.0657909980340542, 0.1171645815767135, 0.07494806820872824, 0.03300761778991668, 0.04947071622344279, 0.16192749277583407, 0.15805061050281188, 0.12513211138892488, 0.13256835285703783, 0.00550357245405908, 0.043041921315900566, 0.04129048382302081, 0.008155219860996432, 0.02123574106956716, 0.040231124920432904, 0.04044191136174391, 0.06160029159883784, 0.16216862279574418, 0.12634986167333084, 0.2110402834099644, 0.23593131687940438, 0.17375903644542323, 0.17304202328033202, 0.12615606064869933, 0.13281688610599973, 0.15640372597584717, 0.5090727350498341, 0.5114100714040168, 0.5295687135217041, 0.5510901897358593, 0.4931906117877094, 0.515810993605569, 0.5047679424727494, 0.5123119859962426, 0.5167624538278983, 0.07792995711294948, 0.09823705019759887, 0.0925045837515579, 0.07882013443726243, 0.08208915875292044, 0.09092239820733539, 0.10039141768676962, 0.08657333328805839, 0.08480003873087738, 0.12035871997013803, 0.14029364440735914, 0.13381033071187198, 0.12509011724456287, 0.1234140741600962, 0.12903000056551228, 0.13624956137734812, 0.1255898025059594, 0.10789374282219233, 0.3228767668698901, 0.36802942045775466, 0.3812549067458447, 0.3072685943796206, 0.35703868308729814, 0.35787737020628596, 0.38184772239844256, 0.42883627460511153, 0.4197994555001061, 0.22450838740041468, 0.20493872083157183, 0.20196397657204024, 0.2304666786692109, 0.2559365595998727, 0.2536773217217264, 0.18259981293712546, 0.201117637800857, 0.21778032947403003, 0.1806033626584398, 0.1897930673312782, 0.17690490182802387, 0.17864441444478252, 0.19377400104289932, 0.17925095304909644, 0.19306482373467182, 0.18441059960800021, 0.1859829876085034, 0.2023118881950221, 0.22803019044495954, 0.1971180831430086, 0.21494383385125693, 0.2382123303357414, 0.20746413879034553, 0.5481961176113425, 0.2063591093319973, 0.20998305028543385, 0.7919869173361805, 0.17895271528439738, 0.15792721359638018, 0.17040773040710278, 0.7013180674678494, 0.1644333477857003, 0.5874557791622128, 0.7747616925884289, 0.15009290194682812, 0.6479881804503446, 0.19810487589364367, 0.2359203683524297, 0.6284194400106089, 0.19177692686109016, 0.19801352796467753, 0.19651923012196015, 0.42192551752178054, 0.5006068946431292, 0.1780422259583655, 0.1665371747048997, 0.17358888190950383, 0.16895082005622664, 0.18519688702124348, 0.16741533490813454, 0.16416966759797869, 0.1713819166539231, 0.17354819965744828, 0.07122897022249819, 0.07645062882114706, 0.07319364425189201, 0.0595593463079116, 0.07802636930571116, 0.07725990930403315, 0.07626980353920321, 0.07834630446468605, 0.07407587776071489]}, "mutation_prompt": null}
{"id": "78d6ee6a-2c76-4e70-bb87-d87dbadaf78d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEImprovedOpposition(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5])  # Added new mutation strategy for opposition-based learning\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                else:  # New mutation strategy for opposition-based learning\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedAdaptiveDEImprovedOpposition", "description": "Introducing a novel mutation strategy based on opposition-based learning to explore the search space more effectively.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6b38b5d3-8f74-448d-8a76-850d09543ef2", "metadata": {"aucs": [0.8733883139501242, 0.8602589025086554, 0.8570881951812502, 0.8572229515107916, 0.8420241410714839, 0.8541666036301119, 0.8568357174545652, 0.8679759372278734, 0.8858221072752683, 0.7568015837002167, 0.7369798420834341, 0.7216765733993551, 0.7497775155830135, 0.7444569830019404, 0.7381723471059694, 0.7733380451873637, 0.755979766853906, 0.7688297583466263, 0.6804033332234238, 0.17634611466599381, 0.16834257519696771, 0.14794243806056606, 0.5386448294068245, 0.1674405167957087, 0.1713494897194332, 0.10241227163962918, 0.09642695442030813, 0.13715888715742564, 0.12530368456777363, 0.13891233515475265, 0.13896185962391028, 0.11263040261061419, 0.09610221228456461, 0.13765409000308004, 0.14560490476308863, 0.1358670139782796, 0.9820717736182217, 0.9774863825367058, 0.9872450537215437, 0.9730346440387433, 0.964879933126993, 0.9660024164324548, 0.9815362316472762, 0.97155658271582, 0.979817603053013, 0.5392537934387375, 0.47438622953868825, 0.46524864029654556, 0.43861567209426944, 0.40606364774700043, 0.542555366685163, 0.54257896920341, 0.47229160009914073, 0.45536041433328267, 0.2226539133466724, 0.5744240324124104, 0.2206186688191999, 0.18411960246121895, 0.19993840541361274, 0.2048241934583669, 0.22541583264625753, 0.22098033917644921, 0.32194066759133655, 0.12851431495103438, 0.16301153144892344, 0.17952526021553206, 0.12121608518443794, 0.3198311461299329, 0.18503682528565812, 0.12553599121628867, 0.22701651954489221, 0.23164203577107279, 0.20334067111880305, 0.13358652941107507, 0.18894429965313453, 0.21089662075485793, 0.3521756800016771, 0.2004318796138993, 0.12454669742599456, 0.09844635774139388, 0.10296099054590702, 9.999999999998899e-05, 0.02693958182986933, 0.03250401316058449, 0.009205934491068879, 0.00269159669179031, 0.0023300387614967333, 0.013886727215883132, 0.021249793904437486, 9.999999999998899e-05, 0.07300654018488983, 0.03986311373989937, 0.1056140213709168, 0.09823426676974178, 0.14667662252014457, 0.08355263251818856, 0.08773800218597794, 0.10191484474172974, 0.08001648752304358, 0.008659982915697806, 0.07567456699849773, 0.08824215505349164, 0.0511896518540389, 0.05521693539126826, 0.09519533625094245, 0.09411577916384284, 0.1467841041884571, 0.04809012063090545, 0.13357004238449477, 0.15210487249957205, 0.19130623465897922, 0.10060777012472155, 0.2257668528785688, 0.14890862826486628, 0.1424411035048172, 0.11059359201039753, 0.13165875512728997, 0.5575964428802369, 0.52286924014712, 0.5682998238487034, 0.5382412725355039, 0.5499916135043488, 0.5071394138156744, 0.48919705243204803, 0.5623032064448399, 0.509073768293026, 0.10004772994668032, 0.07723357841355283, 0.09047701508795414, 0.10135810759437447, 0.10453147336406887, 0.12183954946762388, 0.058112426321520805, 0.10199278949725743, 0.09063518485936306, 0.1472821332013966, 0.10375488084200313, 0.13384983629399194, 0.13515801265837868, 0.11658559017854186, 0.12126085909644968, 0.15189484090879868, 0.12055451278544538, 0.12108542424862312, 0.42444654320970865, 0.38567896023049086, 0.37859356597090066, 0.491335660257773, 0.30268401931705435, 0.3415422708486675, 0.29646024318623887, 0.4536519616722614, 0.47775816876989396, 0.1652865416691529, 0.3149336477849367, 0.20478032253058587, 0.32136823680180804, 0.2078571885314736, 0.2897186187827734, 0.190308779223191, 0.20896566853069376, 0.20370161844868195, 0.2007275437528938, 0.1905188677849422, 0.1648432427649552, 0.17334382032703688, 0.18163625196933586, 0.18036236082965096, 0.21514163479857962, 0.21460898437299336, 0.1970712570889278, 0.6214651120861793, 0.2254213404056411, 0.42751188046912547, 0.6501693945493401, 0.5907942629347869, 0.20045659118975023, 0.19771596663603086, 0.19889610304652905, 0.19955486102082898, 0.1729542937159182, 0.8339648370848928, 0.7467992550239695, 0.8631827907641998, 0.19541013404724006, 0.16469167911312488, 0.807493180691235, 0.7097303012728248, 0.1627163016217713, 0.7420214880466315, 0.20502227294125364, 0.3789353705777254, 0.16658824300099695, 0.5361124828611727, 0.20960822737828244, 0.14946570571401008, 0.2842170941607707, 0.15976623152529956, 0.15842077554482514, 0.17051260358901454, 0.1859572392409028, 0.16838999541897426, 0.1731133623720036, 0.16310219334061238, 0.1650855123573487, 0.16928878286685323, 0.16217418209351986, 0.07409356588346405, 0.0666135346156741, 0.06269218250938446, 0.08272780149686987, 0.07396360889526987, 0.07582732509118228, 0.08975384202197734, 0.07267805269546856, 0.07210080414262632]}, "mutation_prompt": null}
{"id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 52, "fitness": 0.3120706439806252, "feedback": "The algorithm NovelOppositionBasedDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "6b38b5d3-8f74-448d-8a76-850d09543ef2", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "1cfe302b-aaab-4f11-95df-b709b5460ddc", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "2938e9f5-68c4-42c8-854c-694a46807872", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "73596f95-d7a0-46eb-80a5-4b4aec346b2c", "solution": "class EnhancedNovelOppositionBasedDEImproved(NovelOppositionBasedDEImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def crowding_selection(population, trial_population):\n            combined_pop = np.vstack((population, trial_population))\n            unique_idx = np.unique(combined_pop, axis=0, return_index=True)[1]\n            selected_idx = unique_idx[:self.NP]\n            return combined_pop[selected_idx]\n\n        population = self.generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])\n\n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = crowding_selection(population, np.array(trial_population))\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedNovelOppositionBasedDEImproved", "description": "Enhancing diversity maintenance by incorporating a crowding-based selection mechanism to preserve unique solutions and prevent premature convergence.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 15, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 15, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {}, "mutation_prompt": null}
{"id": "2967b600-8f49-404b-a299-4a880ee463fd", "solution": "import numpy as np\n\nclass ImprovedOppositionBasedDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n\n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    curvature = np.gradient([func(ind) for ind in population])[i]  # Calculate curvature of function landscape\n                    mutant = best_solution + F * curvature * (population[b] - population[c])  # Use curvature for mutation\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "ImprovedOppositionBasedDE", "description": "Introducing a dynamic adaptive mutation strategy based on the function landscape curvature for improved exploration-exploitation balance.", "configspace": "", "generation": 56, "fitness": 0.24986787599626775, "feedback": "The algorithm ImprovedOppositionBasedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.7995690621339412, 0.768290368720042, 0.7684006905332045, 0.8084299463902056, 0.7272781197587337, 0.7991507150748501, 0.7333203901928398, 0.7933272688514952, 0.7859458754376992, 0.6542274219625133, 0.5582920485602502, 0.5648969064016659, 0.6378089898281836, 0.5805831887096313, 0.6558977827762043, 0.6615675818894751, 0.6498688804546651, 0.5587079092647655, 0.12366172459601299, 0.10447467739412475, 0.12948265924226832, 0.13154235337167286, 0.1365870119014595, 0.147574675604908, 0.16855722085679314, 0.1322940037157717, 0.09023245223799603, 0.15866171662921202, 0.1173465571318969, 0.13706673057104357, 0.1268820593051725, 0.11728291834207616, 0.12613866118616757, 0.11243786236438957, 0.30386327956229775, 0.13948551196562853, 0.9882142677540141, 0.9641125607153272, 0.9811087334042315, 0.968871055049801, 0.9630682784959977, 0.9573056353812411, 0.9628962483837377, 0.9719602022995163, 0.9150491452309109, 0.29960619991491944, 0.23967727853840815, 0.20886378287517693, 0.37123282656437573, 0.21108042320966958, 0.21541706074101907, 0.32093191730615267, 0.28367692400417777, 0.27931699254738895, 0.5924228601842864, 0.2879540785157252, 0.30192504252953967, 0.20977344141725596, 0.5408395398293924, 0.24365635827701626, 0.22965393392725642, 0.1448611229472645, 0.2793317183303702, 0.14219613798071007, 0.13430618745028655, 0.15789146096506068, 0.09045337845861834, 0.10633266872884617, 0.17721188261856446, 0.1383484493112075, 0.1724345580799871, 0.11289879830612937, 0.15172415395693295, 0.11030324934080804, 0.11767992812091577, 0.11666217094613962, 0.13463582554733933, 0.1417085758836032, 0.160750625049203, 0.10355182473534552, 0.10703863500005772, 0.0016710148729091046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00027239781108090444, 0.0011152905486873088, 9.999999999998899e-05, 0.00922776555175897, 0.024490926025754978, 0.07814402336264614, 0.047039986675447065, 0.07066228896335958, 0.09294193388482541, 0.005435834850705978, 0.07907875771783601, 0.06454876786168606, 0.07471498174784408, 0.0819175524138327, 0.07704011797232946, 0.018589717076316847, 0.0742836624671046, 0.015927263705571737, 0.0023946528564163794, 0.09281309684247718, 0.0115207466426418, 0.0027266898048319277, 0.047800121506480164, 0.17392424784938698, 0.1506262280569901, 0.042588692780664905, 0.33963742121603446, 0.17807149599620498, 0.11595952033413559, 0.19704524129450418, 0.033897018105995436, 0.10112840603249607, 0.5356815494424069, 0.45989381766517845, 0.4516838823216546, 0.4552209256528301, 0.41546062531368466, 0.44749629969664007, 0.41562969646459236, 0.43026330524856526, 0.5238548132281957, 0.10244728980194429, 0.09846118357080669, 0.08631171408682115, 0.08969770474026917, 0.09483215662133826, 0.12921510640982692, 0.08610874476134434, 0.10780446453740855, 0.09113269741737529, 0.12016308621805072, 0.121336747335821, 0.1311320355600506, 0.13118090280305827, 0.09784787405576334, 0.10449735536045301, 0.10670515808879188, 0.14551518226052207, 0.127670825835287, 0.3229805139951544, 0.2248021033493085, 0.2433691249150235, 0.32801805911486837, 0.32308604302749355, 0.310013722459225, 0.2787419872531697, 0.2742399702209374, 0.27216885000911517, 0.22140045433973532, 0.22154383566952118, 0.19241033489906734, 0.1748398374716691, 0.17482896895546585, 0.25694079568622064, 0.24108005945347755, 0.176997596202225, 0.1681424374574475, 0.22019507029587104, 0.1840059063281575, 0.17708567714709644, 0.17130922808113414, 0.1959483880128391, 0.19337897754089794, 0.1689822900679654, 0.1599347927068675, 0.18865916842852148, 0.17267830123382777, 0.20655004104232544, 0.18853086308108735, 0.18844699790037922, 0.1786688404297886, 0.20868508055317636, 0.18414741961147119, 0.19306019251601436, 0.2343338225812185, 0.1734965103398266, 0.4665829102814181, 0.12412055182826554, 0.7898075902916283, 0.1853392173819841, 0.5105424339871258, 0.1547807079252973, 0.11029228777911593, 0.14634001016232323, 0.1484414764025569, 0.18728330556646555, 0.14769946420049795, 0.22794965438107517, 0.19583156072185448, 0.1979482148385231, 0.10064635746878248, 0.14213012208626497, 0.2507458867277206, 0.15690264787394914, 0.15898597530412117, 0.17028272909909647, 0.15788483774982576, 0.1560789820144458, 0.17271555435883834, 0.17767961788633657, 0.18672084887870866, 0.16907100586182455, 0.06996253428939492, 0.08321661167425831, 0.06018797966061851, 0.07462665820265624, 0.07995225652896987, 0.061562970779758475, 0.08507608363825225, 0.07205618275825798, 0.06536135512520846]}, "mutation_prompt": null}
{"id": "4c3d3a4c-dc75-4840-ae7f-7d96651726c0", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "be3518d5-6440-4875-b49f-4362ca9c295f", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "d816d59b-bff5-480f-a629-de3c92e640cd", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "17948921-8358-4a90-ab25-6332319833f1", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        populations = [generate_population() for _ in range(5)]  # Initialize multiple diverse populations\n        best_solutions = [pop[np.argmin([func(ind) for ind in pop])] for pop in populations]\n\n        for _ in range(self.budget):\n            trial_populations = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])\n\n                F = self.F * np.exp(-_ / self.budget)\n                CR = self.CR * np.exp(-_ / self.budget)\n\n                if strategy == 0:\n                    mutant = populations[0][a] + F * (populations[1][b] - populations[2][c])\n                elif strategy == 1:\n                    mutant = populations[0][a] + F * (populations[1][b] - populations[2][c]) + F * (populations[0][a] - best_solutions[0])\n                elif strategy == 2:\n                    mutant = best_solutions[0] + F * (populations[1][b] - populations[2][c])\n                elif strategy == 3:\n                    mutant = best_solutions[0] + F * (populations[0][a] - best_solutions[0]) + F * (populations[1][b] - populations[2][c])\n                elif strategy == 4:\n                    mutant = populations[0][a] + F * (populations[1][b] - populations[2][c]) + F * (populations[0][a] - best_solutions[0]) + F * (best_solutions[0] - populations[2][c])\n                elif strategy == 5:\n                    opposite = 2 * best_solutions[0] - populations[0][i]\n                    mutant = best_solutions[0] + F * (opposite - populations[1][a])\n                else:\n                    opposite = 2 * best_solutions[0] - populations[0][i]\n                    mutant = best_solutions[0] + F * (opposite - populations[1][a]) + F * (populations[2][b] - best_solutions[0]) + F * (best_solutions[0] - populations[3][c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else populations[0][i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(populations[0][i]):\n                    trial_populations.append(trial_ind)\n                else:\n                    trial_populations.append(populations[0][i])\n\n            populations[0] = np.array(trial_populations)\n            best_solutions[0] = populations[0][np.argmin([func(ind) for ind in populations[0])]\n\n        return best_solutions[0]", "name": "EnhancedOppositionBasedDE", "description": "Enhancing mutation strategy by incorporating a multi-population approach with diverse initialization to improve exploration and exploitation trade-off.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 50, 94, '            best_solutions[0] = populations[0][np.argmin([func(ind) for ind in populations[0])]')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 50, 94, '            best_solutions[0] = populations[0][np.argmin([func(ind) for ind in populations[0])]'))", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {}, "mutation_prompt": null}
{"id": "42a4a361-11a6-49d4-b5f3-a48cdf315b74", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedOppositionBasedDE", "description": "Enhancing population diversity through dynamic opposition-based learning and adaptive mutation strategies.", "configspace": "", "generation": 61, "fitness": 0.3120706439806252, "feedback": "The algorithm EnhancedOppositionBasedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "bbfbea10-7610-4f0a-8a37-fa2d8e3aa3f6", "solution": "import numpy as np\n\nclass DynamicMutationDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3])  # Updated mutation strategies with dynamic adaptation based on landscape analysis\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                else:  # Dynamic mutation strategy based on fitness landscape analysis\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "DynamicMutationDEImproved", "description": "Introducing a dynamic adaptation of mutation strategies based on fitness landscape analysis for improved exploration and exploitation.", "configspace": "", "generation": 62, "fitness": 0.27116893675643344, "feedback": "The algorithm DynamicMutationDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.5467670284280056, 0.8426766121175735, 0.8975571321587834, 0.9030907711656045, 0.884097248327682, 0.8701620374800018, 0.8964252706715478, 0.8058535691896918, 0.8914301001073279, 0.4139266474059744, 0.25225812766922906, 0.7680161590238623, 0.7800897581497015, 0.7946146685395762, 9.999999999998899e-05, 0.7799236163916964, 0.08841617371793087, 0.7357818846067692, 0.17981419181998703, 0.1535036541152911, 0.09020349942298622, 0.15773980133653276, 0.12317580966081865, 0.18194941231803385, 0.23914048911926, 0.13223641196695812, 0.7423889427221608, 0.10985723255925206, 0.13469179001264708, 0.10768029715698213, 0.12923928097452786, 0.0720399590594667, 0.03811051932406606, 0.1294810689842708, 0.15315919181221815, 0.09817606031735182, 0.9510465533798558, 0.9696018631179948, 0.9265566122462414, 0.9717804471886003, 0.9695340047267176, 0.984816209216533, 0.920928982258021, 0.20353598288148778, 0.9765573709282503, 0.44052327867981744, 0.2512593848371246, 0.423954048403271, 0.12478471783419154, 0.2175232403807067, 0.31043951531822533, 0.1223317257859835, 0.15529324983899095, 0.1991590540721181, 0.21819707200857452, 0.21530776793007433, 0.22772981698740125, 0.356438561118561, 0.35246149299768514, 0.13840337070795738, 0.1478751699965356, 0.22615927285835058, 0.2806542912934258, 0.14248165321243744, 0.022710857076223667, 0.14329440079992983, 0.148298358773429, 0.11176246631004838, 0.1526208546168889, 0.1861359513993952, 0.12076531576926319, 0.15066984263736083, 0.13393212674681076, 0.09793224685378632, 0.12896522763063112, 0.2266278522033507, 0.6606990355615108, 0.15896628094419607, 0.15096408320811494, 0.130903901628454, 0.147457818803591, 0.11478335031091724, 0.06667466539677769, 0.05806894208711533, 0.07344553596768, 9.999999999998899e-05, 0.011942021458773211, 0.03256925855815973, 9.999999999998899e-05, 0.048833128205694076, 0.04642000936991986, 0.05282979518198905, 0.08499336453133732, 0.08555963663247879, 0.0001185594744501639, 0.08517125547520066, 0.10205595010535284, 0.12109942351530356, 0.10397170459554472, 0.11651852158785092, 0.05554374867408207, 0.14588540602417965, 0.04967866900578388, 0.16900484616185552, 0.08126932906710849, 0.009260990134639324, 0.09195088487290592, 0.0237910532200456, 0.2950173952175411, 0.07607856685512704, 0.18503698474974883, 0.08179555241496839, 0.11134354137502556, 0.07113366830884948, 0.04215814185729727, 0.21849506347248682, 0.04949786839469705, 0.45072319357145174, 0.5087293876179713, 0.3612602028925235, 0.3452754906413099, 0.49665629195740635, 0.32150726335065005, 0.46075047753889453, 0.5204460967539893, 0.4220215888593295, 0.1189412988156402, 0.11068748110838134, 0.08237467537578846, 0.10313551793732845, 0.08208459494781217, 0.10383486672268338, 0.1430347884677149, 0.09296444004858362, 0.10015692770465445, 0.139670806539682, 0.17021364350028234, 0.17470925743286858, 0.16892377231376177, 0.13380007056748577, 0.12154071202425143, 0.12674991245295109, 0.10731229048363133, 0.13737440841493187, 0.386542718538915, 0.37939878047043407, 0.5149646934364236, 0.5044724546049635, 0.20976314809817787, 0.5473926987697246, 0.562543893034434, 0.24695026546457433, 0.23294655291889343, 0.1897370271192126, 0.22940272905588266, 0.29311957686343304, 0.19955278243753038, 0.17982581637097173, 0.272076383859969, 0.23329522508058143, 0.17892596812824635, 0.2568148089953536, 0.21106787517568137, 0.18170445440610827, 0.22161106319599921, 0.212852235087866, 0.21707896108975766, 0.208215648139235, 0.21114322270493802, 0.2144405692771718, 0.18230663236084754, 0.1950624807056106, 0.18215584655406347, 0.20176205699102434, 0.5873550582240821, 0.17782761138925585, 0.20605802881093838, 0.21842150015980488, 0.18585688027569003, 0.4703610445668005, 0.1861189836562176, 0.7939874760481869, 0.8735432089210202, 0.8859710382645517, 0.8138611662027049, 0.3337057025690575, 0.1857363199577543, 0.16554269476547057, 0.16110581584500838, 0.44851513358148154, 0.20360841030911192, 0.404635613392338, 0.5184759901369022, 0.1609012924506702, 0.1157186742594134, 0.42860313417862006, 0.11085627040690083, 0.15615050265242936, 0.165008875239384, 0.16232508254960998, 0.16494864667972342, 0.17269155100862377, 0.16766007173384023, 0.1735055652036881, 0.17172786431407527, 0.16828372539615977, 0.16792897966344722, 0.07327082997275425, 0.07608288490325299, 0.07725375542050772, 0.08181510509557322, 0.0716131115142572, 0.10676206661793608, 0.08815782610231293, 0.0719301844382424, 0.07258805427105686]}, "mutation_prompt": null}
{"id": "327bb385-2c30-4721-8031-0abb347055ca", "solution": "class AdaptiveOppositionBasedDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6, 7])  # Updated mutation strategies including adaptive opposition-based learning\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                elif strategy == 6:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n                else:  # Adaptive opposition-based mutation strategy\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "AdaptiveOppositionBasedDE", "description": "Enhancing the mutation strategy by incorporating adaptive opposition-based learning with differential evolution for improved exploration and exploitation in optimization.", "configspace": "", "generation": 63, "fitness": 0.30047336225303883, "feedback": "The algorithm AdaptiveOppositionBasedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8200430781041949, 0.8589287685750293, 0.8731236641759645, 0.8816516331038678, 0.8670744636722039, 0.8155684869654657, 0.8484145781832008, 0.8649329737593451, 0.8517827445653969, 0.7299365808525156, 0.7091791601242187, 0.7286783501813958, 0.6751083943325009, 0.7573037035069355, 0.7667912124732894, 0.7383108816868146, 0.734970778451708, 0.7403587052627081, 0.15411357354911215, 0.17631897752626668, 0.16903293131523567, 0.12906469326781156, 0.17194498910171274, 0.11795146112421495, 0.117238326211761, 0.4927954256392888, 0.4991123369146824, 0.16962750958464146, 0.16746585222478227, 0.06884372612720513, 0.14377017328050967, 0.13196457144314622, 0.10713369480609924, 0.15712234010552306, 0.08149828694988337, 0.1428208667269908, 0.9827630071448016, 0.979397305767129, 0.9846408656259694, 0.9871540943865712, 0.9799115759068874, 0.9934530708087224, 0.9849067943882971, 0.9818013181749998, 0.9855634835834433, 0.4052687396709068, 0.34355495778116274, 0.4056964909464945, 0.44189975051572106, 0.5001995610763703, 0.46920779475631236, 0.4088721307587564, 0.32486799843762215, 0.29239204243649375, 0.22664502357741145, 0.21685366884863144, 0.21824030988222842, 0.5065145322940139, 0.24769054180124916, 0.32840128193794793, 0.631955609052292, 0.6097739398405709, 0.7029177193730184, 0.20320242058306137, 0.1947923956663853, 0.17692230347979498, 0.18970874231318935, 0.2911237234811067, 0.19310494638700704, 0.22361306281661342, 0.17872474887007828, 0.20890291415552853, 0.20701555121814774, 0.09072973701205922, 0.15611928440201028, 0.1915753867902782, 0.26857860781350495, 0.18166861926933786, 0.21289075723291218, 0.18280009118623242, 0.2437337119380566, 0.049116052246058084, 0.03287047319757219, 0.0020170043873607435, 0.0005298435184125649, 0.058641872819506724, 0.005105231726722392, 0.0739259215538981, 0.02222408242426377, 0.017281975357682167, 0.08678287685153396, 0.10819122034202477, 0.07652418490970592, 0.0876504689102039, 0.053558109566533285, 0.03837992417334246, 0.07957140020263942, 0.11730852083112475, 0.14092404878713694, 0.07739506272496388, 0.09788347502652273, 0.09279888804653202, 0.1654977638247055, 0.13496910168056997, 0.033266886712077004, 0.01565493116560157, 0.2080216507017446, 0.1491243633948992, 0.24210458823365244, 0.14898024946930677, 0.2735161006771234, 0.20769126746505984, 0.1628121097824058, 0.13514669075627972, 0.09352150519424662, 0.13587640690440328, 0.09139231779910661, 0.4998400922233607, 0.5324964952069766, 0.5189730664348886, 0.5262417918462139, 0.5223606458601056, 0.49977918533327825, 0.5880385619626269, 0.541377071115154, 0.5422148145640833, 0.08515636226979784, 0.09829262276250716, 0.1248493684730585, 0.09382560113092764, 0.09528229975905145, 0.09198815761772439, 0.08309287479441119, 0.08754520915513508, 0.10012134375502557, 0.10146507195128962, 0.14801438775216214, 0.10665407988911269, 0.13810417308854306, 0.12404164997083922, 0.17993757991952175, 0.11270609426551981, 0.1233110144902787, 0.10455667015264913, 0.30705393271017056, 0.3661107167159475, 0.2926583985582836, 0.43792943326446876, 0.3435709554213249, 0.3934042166831274, 0.4351337168163867, 0.4807865631426297, 0.3835824346698964, 0.27003893294298553, 0.21466173663121157, 0.2270361362689174, 0.2651212722886692, 0.19564161161348959, 0.26812246978895227, 0.3233549118979646, 0.14688075770131326, 0.21105623178425303, 0.2029687307120528, 0.20026736485340946, 0.19042422998176356, 0.18660836687049642, 0.17423245246502483, 0.1822131858899232, 0.1812546833113673, 0.17689362539418985, 0.174034670554991, 0.20823190652292556, 0.19599739060639743, 0.25994559895398484, 0.1887458276942039, 0.2293160129753261, 0.23660633301209244, 0.23706139825966077, 0.40256596868691363, 0.19022490420927385, 0.16192635891938711, 0.1565638475713793, 0.7641308145349597, 0.8573330554889834, 0.7625094995592631, 0.16849584131589768, 0.1869480957642512, 0.1302707978147546, 0.15760438134839438, 0.12294663505242609, 0.19952987634943353, 0.5160146416097955, 0.38563439753983053, 0.1627950150463503, 0.2041948342243327, 0.6685537913093254, 0.16261487614205528, 0.10166390800176794, 0.17302298625838353, 0.16052357432153952, 0.16723240314218712, 0.15916747599101144, 0.19533241565786885, 0.1694477856709855, 0.16699563488946256, 0.15754778083184906, 0.16246936149380886, 0.07193468067050401, 0.060725987878119114, 0.07233813438172243, 0.06350700729701497, 0.06667859300486889, 0.09053141466897685, 0.0770364383801665, 0.07911572247670373, 0.07691973782052286]}, "mutation_prompt": null}
{"id": "9cd7066c-f8ba-407a-9aba-b3306a58b02f", "solution": "import numpy as np\n\nclass HybridOppositionPSO(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6, 7])  # Updated mutation strategies including the hybrid approach\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                elif strategy == 6:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n                else:  # New hybrid strategy combining opposition-based learning and particle swarm optimization\n                    pso_velocity = np.random.uniform(0, 1, size=self.dim) * (best_solution - population[i]) + np.random.uniform(0, 1, size=self.dim) * (population[a] - population[i])\n                    hybrid_mutant = population[i] + F * pso_velocity\n                    mutant = best_solution + F * (hybrid_mutant - best_solution)\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "HybridOppositionPSO", "description": "Introducing a novel hybrid strategy combining opposition-based learning and particle swarm optimization for improved convergence and exploration.", "configspace": "", "generation": 64, "fitness": 0.2851589513611034, "feedback": "The algorithm HybridOppositionPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.9102446492877556, 0.8844601211579188, 0.908771352184104, 0.8776218523753583, 0.8796101173259839, 0.8800997078189338, 0.8833409384362018, 0.9135775233145036, 0.9145990968537805, 0.8033160008948553, 0.7897854650236537, 0.7952820590221016, 0.8074124155633662, 0.817080961511402, 0.7938813003765709, 0.8035962625199009, 0.8333623646202084, 0.8121220644447292, 0.17994032480843125, 0.09849536674593162, 0.15270946311969924, 0.1153728597203657, 0.08074509763246329, 0.15617690315523247, 0.15504525029028515, 0.1301629574345725, 0.12145322459966101, 0.18391846692567804, 0.13361078598441, 0.10882207693129808, 0.11487931030405929, 0.15531835127285265, 0.10487647042128279, 0.11070144078385036, 0.13880183458536544, 0.14753782187636366, 0.9810457427280231, 0.9697700771438583, 0.9711226919563436, 0.9847873743257763, 0.9839827680773645, 0.9765492392269556, 0.9613489830801194, 0.9717830218630047, 0.9791987131275504, 0.41732803311858646, 0.40531682946293257, 0.4996786334309784, 0.5549873122109255, 0.639156197448635, 0.35780480378893675, 0.20046824763166626, 0.3412252544716122, 0.5795766601207291, 0.21169196836913096, 0.20494231266953733, 0.17123541010932464, 0.2107289215534296, 0.11755194273431024, 0.15378977732492916, 0.16990886810453354, 0.221709220688722, 0.2283476014953617, 0.12455574534084868, 0.17509077030790832, 0.15792131628844197, 0.13171822153743284, 0.16849732575766252, 0.24395979141395507, 0.21267607822329204, 0.247244703800647, 0.21272227529466314, 0.16828795455695633, 0.4371498159330456, 0.15425993272537508, 0.16293181236871246, 0.14011747022208643, 0.17940129219782008, 0.1827070973320286, 0.1184667944246599, 0.13168800749128495, 0.10303971613291019, 0.002586392939677329, 0.04049330656947603, 0.0018060008793032711, 0.0007214592535886855, 0.009948472235421835, 0.057596172863698114, 0.05331810107068391, 0.07037997798809503, 0.1034740817732942, 0.04367488697573896, 0.0713799601684526, 0.0716179354443357, 0.005265324887678058, 0.10072326554650246, 0.18641359371452904, 0.05404163335451373, 0.17799394353109, 0.14340881976562125, 0.23061529564061467, 0.1606072032869008, 0.04979595694874772, 0.13756682086119743, 0.06465380781184304, 0.005295558101659825, 0.06725887358154525, 0.08066251410116687, 0.053818735768449866, 0.08594925986359336, 0.0956679234545651, 0.11148352569905218, 0.2056950815639268, 0.03077731344746315, 0.13557877889838077, 0.20564152524300772, 0.04758202675706236, 0.5054782829274225, 0.6007924351631737, 0.4817853126375259, 0.5550392849131061, 0.6174341247976824, 0.5496499684164847, 0.5107706663911096, 0.5648530056521228, 0.6331281346768325, 0.1012962285830401, 0.14494586837088685, 0.09777331335818285, 0.09015408255330093, 0.09177945780533481, 0.11583441690214824, 0.11386954511703551, 0.14140451035896862, 0.12604766615143237, 0.1580911608603479, 0.1326062574215413, 0.18029482508487638, 0.1445545244135905, 0.12061826513058771, 0.13124080069487432, 0.16648260093684475, 0.13687255522217423, 0.13430703281025524, 0.4037097295095847, 0.3359447528890499, 0.2145008350043156, 0.2963300098170565, 0.3969224909165687, 0.2805809598750397, 0.4358914734003305, 0.2570561375453114, 0.33760327757678055, 0.24752655191630035, 0.2228219005171912, 0.29393988943922045, 0.2365046130054731, 0.16371554553441015, 0.2247486088442785, 0.1865112681611183, 0.2782251354082197, 0.24010494182277342, 0.2161281305977375, 0.19951693159668582, 0.20216810066265456, 0.19935363019189123, 0.19551256950114215, 0.1868650131664943, 0.17905124855329635, 0.16801962104021972, 0.2056274817467476, 0.1892047268367023, 0.22253109980435215, 0.19158500771039266, 0.6294121418165147, 0.17337633792244833, 0.1975805628280486, 0.21596766171483528, 0.20706448969749558, 0.22235307039584062, 0.18619097853208644, 0.17320915888761756, 0.19205147122323774, 0.9237651910476601, 0.20060123974797373, 0.14520523847694944, 0.15445670229011943, 0.14345293059619146, 0.18970968661839493, 0.6705042480432384, 0.3200500442816008, 0.07282884218458552, 0.12481080889186247, 0.15209813202529188, 0.20761059374902657, 0.11142008709753048, 0.150440871141736, 0.16355791865375102, 0.17617590298014152, 0.15787002626165703, 0.16326482934547726, 0.1750484147090412, 0.1702319639910842, 0.196497712759245, 0.16563094435316528, 0.14989410788915536, 0.19260537669494904, 0.09416061311149293, 0.07888179440035348, 0.08845284217589378, 0.12444343511615008, 0.09744038465673188, 0.07846185249049198, 0.08934975178546845, 0.06962628295607576, 0.06557432358849113]}, "mutation_prompt": null}
{"id": "9c3ee23a-f184-4085-92e0-43742d143974", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "a22dc375-bfe9-4d0f-a200-ac1b78f0bc4d", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "d1f98494-3f11-471b-b577-08f93171c0d7", "solution": "import numpy as np\n\nclass NovelCrowdingBasedDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    # Introducing crowding-based selection mechanism\n                    crowding_candidates = np.random.choice([idx for idx in range(self.NP) if idx != i], 2, replace=False)\n                    selected_candidate = min(crowding_candidates, key=lambda x: np.linalg.norm(population[x] - trial_ind))\n                    trial_population.append(population[selected_candidate])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelCrowdingBasedDE", "description": "Enhancing diversity maintenance by introducing a novel crowding-based selection mechanism.", "configspace": "", "generation": 67, "fitness": 0.19433071761979231, "feedback": "The algorithm NovelCrowdingBasedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.23.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.765327832031348, 0.7750344443480333, 0.5659811529382981, 0.8022455244372093, 0.44913779678116506, 0.79441876724661, 0.6075832065037633, 0.28766838055112853, 0.21626425336970556, 0.36093661260166077, 9.999999999998899e-05, 9.999999999998899e-05, 0.38272545024168103, 0.016915497886371145, 0.49752340424700214, 0.5475193759455677, 0.65671535195382, 0.728261328011848, 0.06471093562297303, 0.12337336166900714, 0.06643153220045006, 0.09147452937818557, 0.0808598117445084, 0.022197378465569795, 0.06333433313779258, 0.06420999404380379, 0.04318167250720595, 0.0940794142193736, 0.01054481681127617, 0.06823169898357295, 0.09386628455505375, 0.013014534723340465, 0.05629058933238629, 0.08478260290086437, 0.11824195258088455, 0.058748322386412255, 0.9768596727327169, 0.9706936387929924, 0.9822018359342339, 0.9662697126395561, 0.9635478426762177, 0.9782484897822995, 0.9848301644488854, 0.9764838196631996, 0.9720042955797255, 0.10175885940046958, 0.34797184935759995, 0.14374121734448586, 0.20313213214293846, 0.02571388934145047, 0.12284405518815422, 0.21896587117432975, 0.1802933873087561, 0.0007346733466608857, 0.16289438048918692, 0.12909875918812996, 0.05307718077553114, 0.12413858212895523, 0.08385894601560173, 0.13458247657905753, 0.1030160781187135, 0.1326097934570868, 0.1367050351717648, 0.003501650218337815, 0.10618978454465977, 0.1462616222639581, 0.10146133962543569, 0.12262046192859855, 9.999999999998899e-05, 0.1161158950476503, 0.1229308808326578, 0.3789190197871596, 0.18435055723952432, 0.10157036128481667, 9.999999999998899e-05, 0.06033010457916699, 0.1958906937201076, 0.1209677300031059, 0.16417224317288914, 0.045717444893697445, 0.1791675020303115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026021818970266564, 0.05833273399225125, 0.11839526498894282, 9.999999999998899e-05, 0.029713218821847076, 9.999999999998899e-05, 0.01742114940987871, 0.05148939251510287, 0.013803531193926522, 9.999999999998899e-05, 0.0864077874756829, 0.11269681144068378, 0.023591250959805965, 0.05846551284051238, 0.04246700640895429, 0.032971716321822164, 0.1987195658344164, 0.06365159479363924, 0.06236157469675985, 0.03117150185935824, 0.15138514878637688, 0.23545852179359894, 0.12767463648176958, 0.17609353101105296, 9.999999999998899e-05, 0.03518080725937012, 0.0914119422687707, 0.41165034221528707, 0.42870047686503, 0.4892878749550943, 0.36675353797592813, 0.48537655480495945, 0.45299868060602644, 0.5044352804572614, 0.3925535456272007, 0.4151582410664645, 0.06513648943935002, 0.021467220122878827, 0.09951824622788186, 0.04005663487742217, 0.060508697625751506, 0.04498501248617681, 0.04155590186297087, 0.04613676494279684, 0.06654894253271737, 0.18747781720891066, 0.07405241889993852, 0.14425597449010907, 0.09855305120349966, 0.06581597144687368, 0.0836299536887507, 0.1429267217923662, 0.09982735399225762, 0.07726393575557644, 0.14163162427998544, 0.21185726625414136, 0.2271139515078373, 0.22596239823019082, 0.20634723482513306, 0.19158839233405556, 0.1422707104436406, 0.24800750342039846, 0.14258150311817808, 0.09617096526960522, 0.1192531800170209, 0.12299170838015072, 0.23727990231771878, 0.1179727117954179, 0.12410211144729111, 0.1683986521435492, 0.17243993686198156, 0.11562566777088246, 0.1503778664347627, 0.1713217826796949, 0.13562303667734743, 0.186136600525052, 0.1596446539818106, 0.17771799793233445, 0.1412175785816795, 0.14013740440552958, 0.16421872971222307, 0.1589928824191098, 0.22122545796299686, 0.1773459757315834, 0.17179345424537007, 0.25069112474427946, 0.1513740906508919, 0.15313947675084438, 0.17418433151351476, 0.15833340530887474, 0.4851714469406837, 0.16562274634905239, 0.14740643542228427, 0.8863647842940022, 0.16773605453782126, 0.1948829890318623, 0.11210769084707795, 0.1562965145486387, 0.15949231555398824, 0.04871881866355254, 0.16143599336833536, 0.2497628359200016, 0.09678204924221534, 0.16571469828249552, 0.2070551284536225, 0.10528695615143047, 0.15049522759401657, 0.10367962797782826, 0.16448255721875216, 0.19012010191727458, 0.14763022729669195, 0.16166153172621467, 0.12004457528929857, 0.1573012396314749, 0.14226998056252904, 0.21411557980600004, 0.14689007985489466, 0.05594462729436378, 0.03096674892304563, 0.07218300233260855, 0.04869860222300049, 0.04744333635411824, 0.06685245408083629, 0.0538012823160563, 0.049413344948272764, 0.05845804971604407]}, "mutation_prompt": null}
{"id": "a40c4a6d-0f18-4d9e-94d7-1c2f9174b008", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def chaotic_map(self, x):\n        return 4 * x * (1 - x)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    chaotic_value = self.chaotic_map(_ / self.budget)\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c]) + chaotic_value\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedOppositionBasedDEImproved", "description": "Enhancing the exploration capability by incorporating chaotic maps in mutation strategies for improved convergence speed.", "configspace": "", "generation": 68, "fitness": 0.3061815748242396, "feedback": "The algorithm EnhancedOppositionBasedDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8688015485346854, 0.8322486347053625, 0.8706141631448627, 0.8555664176535827, 0.800502182312173, 0.8580859603644739, 0.8524764530440465, 0.8449062590713304, 0.8663273133070823, 0.7286957781382295, 0.7276603251565681, 0.7433910582771932, 0.7528815570160631, 0.7257070633250315, 0.7252209501320364, 0.7717834420643801, 0.7013582941353939, 0.7421067835340206, 0.13508860719943605, 0.167087187686208, 0.6080339294969921, 0.14199742537205462, 0.1721087468123409, 0.17611074428088358, 0.5971911248845367, 0.17016444385053964, 0.16053042032097053, 0.07674676579663953, 0.5000658603424004, 0.12806143479045784, 0.16514057968140916, 0.13864390039328578, 0.1456249965502424, 0.1797071717604053, 0.108554844141867, 0.12923992063715228, 0.9894684332147657, 0.9772576857431676, 0.9856636302423112, 0.9881137957239231, 0.9744422592816864, 0.9808346393979965, 0.9738419895062332, 0.9816651223160108, 0.9795779802812732, 0.4300288434734544, 0.44354634736439247, 0.43339950926096193, 0.5296362683012132, 0.38525874893383527, 0.4021383872372165, 0.40780541830476236, 0.3377573299426788, 0.3589926414046658, 0.35519068449583735, 0.21112598057504584, 0.6572821888435627, 0.3308680080528478, 0.17566265915135792, 0.20491794645418526, 0.3526381266863383, 0.4906289092609475, 0.6457828467359576, 0.22328753372875176, 0.14170266371330476, 0.18790210595755885, 0.18773359411006163, 0.2508498240231629, 0.30375425052984295, 0.23888705709555313, 0.12212755157075916, 0.1783231742232152, 0.2752384269936212, 0.16479683261903233, 0.12390018887217724, 0.16687156738978015, 0.26440372769071496, 0.20435788494631135, 0.27248994653416114, 0.10509338970679405, 0.19741314690732348, 9.999999999998899e-05, 9.999999999998899e-05, 0.06108304311393897, 9.999999999998899e-05, 9.999999999998899e-05, 0.04245366343136958, 9.999999999998899e-05, 0.11203800340424752, 9.999999999998899e-05, 0.0462699102151759, 0.07331797271671348, 0.0604376229018182, 0.12466132581284983, 0.0524651370087893, 0.10523932386566326, 0.07140217464511678, 0.09363825912046453, 0.11766642708960862, 0.010364031272634189, 0.03703197438274475, 0.07047475660581526, 0.01666699579502151, 0.10674832257940581, 0.17779711213800597, 0.061576177333055426, 0.025283223121764786, 0.01857158185761676, 0.09823890874691155, 0.19263412308826977, 0.17341372905911945, 0.1443203454222861, 0.18311975954048265, 0.17436984317958104, 0.1333617665149066, 0.1309154456146101, 0.1434951431028052, 0.5264335251365675, 0.5441606528809044, 0.49081897638283556, 0.5120877572941253, 0.5136669529271667, 0.5065364755001625, 0.5654220332039364, 0.579572911034295, 0.5352066823522335, 0.10667429581286958, 0.1084404107296032, 0.08127034212345441, 0.10591636363263246, 0.07904198992487854, 0.11146617158695504, 0.10607077722616709, 0.09468424203579562, 0.09291698032120876, 0.11135143066004005, 0.11474360829045649, 0.13928580634687937, 0.13516692582491996, 0.11629950205981399, 0.12127751388394303, 0.13279989702885853, 0.10809703470348264, 0.12564543008788154, 0.351933061531693, 0.3031247319421019, 0.4293277751570852, 0.4151058692065883, 0.3984815616754257, 0.4536419134784978, 0.47308875668709494, 0.4337400197210157, 0.2449225274544632, 0.21257999724123844, 0.25392016925117256, 0.1783705474838604, 0.18821212824753553, 0.23502338037744852, 0.2777722551048193, 0.22582921989413174, 0.2983563586240918, 0.26445475315266054, 0.1859460326861787, 0.17762636125041265, 0.22407239762645415, 0.17341648633039908, 0.18000957232625892, 0.23253447472871358, 0.21555299011658635, 0.17997178449472084, 0.18085177834276422, 0.18790804163584307, 0.3498428269931715, 0.47077615198122236, 0.2181096852513532, 0.19744769064702328, 0.21918596411282487, 0.21216436350351608, 0.23411080067499135, 0.19308276742421926, 0.15669951590040276, 0.7131796016874492, 0.8219672647145952, 0.7984710719503126, 0.7149169049971179, 0.6409559041685291, 0.10699068196779205, 0.11329795357667005, 0.15578228116114456, 0.6996558634985375, 0.20372643831312276, 0.6284856957546552, 0.20086882247581206, 0.1729935042359928, 0.20542535421904518, 0.19228354976377937, 0.16052319626897915, 0.1529581235832369, 0.16899139179563138, 0.17291433502395337, 0.16958362977450758, 0.1697098412149759, 0.17290643875935818, 0.1788970069382536, 0.17478104216998636, 0.17836347587989698, 0.1693616767951558, 0.07682479621535199, 0.06796819396663545, 0.07272748735160717, 0.07995305096461014, 0.08171706152565161, 0.06780842855120339, 0.07106089409124783, 0.08365674815668467, 0.08251541188032951]}, "mutation_prompt": null}
{"id": "81fa09ba-0bae-42e5-a396-8a8631d2bffc", "solution": "class ImprovedOppositionBasedDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including adaptive opposition-based learning\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # Adaptive opposition-based learning with dynamically adjusted control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "ImprovedOppositionBasedDE", "description": "Introducing adaptive opposition-based learning with dynamically adjusted control parameters for improved exploration-exploitation balance.", "configspace": "", "generation": 69, "fitness": 0.3120706439806252, "feedback": "The algorithm ImprovedOppositionBasedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "58850f4d-97d8-491c-bf79-ca6d2b3a2bee", "solution": "class AdaptiveOppositionBasedDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6, 7])  # Updated mutation strategies including the adaptive opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                elif strategy == 6:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n                else:  # Adaptive opposition-based mutation with hybrid strategies\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (opposite - population[b]) + F * (opposite - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "AdaptiveOppositionBasedDE", "description": "Introducing adaptive opposition-based learning with hybrid mutation strategies for improved exploration and exploitation balance", "configspace": "", "generation": 70, "fitness": 0.3006516077280992, "feedback": "The algorithm AdaptiveOppositionBasedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8660108326788015, 0.8280364900695474, 0.8447328696384534, 0.8370962263907586, 0.8482539576178383, 0.8578165728355939, 0.8428698866354344, 0.8620785877811273, 0.8564778934815687, 0.6922533636800557, 0.7167622281012724, 0.6952070941032473, 0.6853726581531714, 0.7068119021334928, 0.7057959415247554, 0.7128920732928865, 0.6873335982663731, 0.7240243663863489, 0.44098124093871915, 0.15037978703839872, 0.14759271103308513, 0.1747669754069533, 0.5287706908374734, 0.14372874791639934, 0.48867618113013245, 0.45243695602427747, 0.5759978170946783, 0.11497173462398891, 0.11171287610034919, 0.16006725021307777, 0.1324632767605406, 0.13398589710946385, 0.13223508178959797, 0.12749212469027849, 0.13130216538508555, 0.15701828680316354, 0.9749743713076582, 0.9889743306173464, 0.9871228352724946, 0.9873178787932109, 0.9755606373196288, 0.9924170201741587, 0.9688355143811018, 0.974270714709812, 0.9769654753865696, 0.44434690613907746, 0.3397118405748678, 0.3720884757900339, 0.4403611572794992, 0.3657255397809709, 0.3998227019909065, 0.44350651796568485, 0.4039260069470727, 0.35521982462026547, 0.5747549063526634, 0.3698341466274112, 0.5382936650722938, 0.561485467984983, 0.5383918852561856, 0.20131113368799147, 0.2144523576364823, 0.5175131477973773, 0.21895373889897718, 0.30965088549493835, 0.12292217970456731, 0.40592021238405485, 0.18193349665948166, 0.17635698905078412, 0.19879958766253014, 0.21562267648637345, 0.17119101786206847, 0.20183484545330144, 0.20112145775700285, 0.16190725614719736, 0.1770548352258724, 0.20273788923314873, 0.22363342455005897, 0.1839883016827112, 0.23787150579808913, 0.09443047381102165, 0.2277584789234044, 0.02972050748972288, 9.999999999998899e-05, 0.07949835402317362, 0.003702597515828576, 0.05080123687735849, 0.04733616312827593, 0.024020282322696818, 0.0059407534449872346, 0.10536591430742559, 0.06206846791872356, 0.0815374011305563, 0.08762908471250708, 0.061156078157456606, 0.04423803497555623, 0.021417499780643112, 0.11234782304568203, 0.08633491515438507, 0.19721003106544788, 0.06930386183736248, 0.0445758591551314, 0.04584465333858623, 0.04052142922820334, 0.04206105759202461, 0.03170577143590303, 0.0017593299791138772, 0.03267452438543439, 0.06025418705604402, 0.1677497495932212, 0.17229410124211042, 0.11563116018205222, 0.20506095730617502, 0.21749728118785372, 0.1620397516877381, 0.15637129954849627, 0.11753772222729864, 0.09497324144998143, 0.535892390269356, 0.5633281052343705, 0.5487894935070834, 0.5315841191803726, 0.5491456883448035, 0.4875788587224511, 0.5569660609113699, 0.5419252373791066, 0.5772488006970102, 0.11236884604286801, 0.08951271874192823, 0.08511455416078095, 0.07199934773773498, 0.10888883827716378, 0.08982851052990248, 0.06317108353878653, 0.08028867523128813, 0.08216514876459091, 0.1353223358470821, 0.1261818653370821, 0.1384559558348355, 0.1304909012924692, 0.12138005634746152, 0.15387212659876315, 0.11270609426551981, 0.11611008551811663, 0.11601107022482915, 0.37544540645650515, 0.3727160354796992, 0.31580215534244926, 0.39769893587725325, 0.37047816165964864, 0.4057263453330371, 0.38578538186989375, 0.322449056012147, 0.42484020207827566, 0.22142674164900333, 0.21706922372817394, 0.23907025372877522, 0.24281236938296724, 0.14242013383955632, 0.24203789531853181, 0.24095030138437523, 0.17373484599921252, 0.2631191116128966, 0.19084646085685453, 0.166590990204306, 0.18336553713362436, 0.1668331812625412, 0.17296688307677344, 0.17983602658129572, 0.2409221067059979, 0.1958086455558692, 0.1662079744329964, 0.19820396887717695, 0.20107413438462696, 0.2167472471008992, 0.21602803201896692, 0.21812366903973157, 0.18017168171435605, 0.19488537025170383, 0.20658599555416235, 0.20689577998008712, 0.16625960700719045, 0.18111843116901305, 0.7625029546904507, 0.8270324505783619, 0.7043659355224992, 0.16844972360286958, 0.183911105045242, 0.11842901210825607, 0.14788053707400317, 0.42134882083913505, 0.19998957594589106, 0.5474196731115697, 0.16302230844852916, 0.27707758984546427, 0.2072660105830677, 0.10939188005359468, 0.34626345091689004, 0.5658266657841106, 0.1894529468229994, 0.16979785402676406, 0.1612781498457161, 0.1715488453438656, 0.1716377508638941, 0.1713560399037486, 0.1579980298352751, 0.17183437398270385, 0.16971942054725164, 0.08001555183381748, 0.07601232397939872, 0.08620656218400569, 0.06530989360804984, 0.061949088117819295, 0.06814163924511119, 0.07024242805969938, 0.07460487137079597, 0.07052141794999245]}, "mutation_prompt": null}
{"id": "df83c4c1-1f75-44cb-93aa-1419837ac427", "solution": "import numpy as np\n\nclass ImprovedOppositionBasedDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6, 7])  # Updated mutation strategies including the novel opposition-based mutation with Levy flights\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                elif strategy == 6:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - best_solution) + F * (population[c] - best_solution)\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters and Levy flights\n                    levy = np.random.standard_cauchy(self.dim)\n                    mutant = best_solution + F * levy * (population[a] - best_solution) + F * levy * (population[b] - best_solution) + F * levy * (population[c] - best_solution)\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "ImprovedOppositionBasedDE", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance by incorporating Levy flights for enhanced global search capabilities.", "configspace": "", "generation": 71, "fitness": 0.30374576114955476, "feedback": "The algorithm ImprovedOppositionBasedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8733151496817253, 0.8706222414682756, 0.8746083670824959, 0.8655217625782476, 0.8687243548730696, 0.8791905791367688, 0.8659855036091267, 0.8651171310795267, 0.883469937630111, 0.7661226836784022, 0.7552154244275139, 0.7783273748673566, 0.7750720955622723, 0.7236903503318103, 0.7807169467268117, 0.7707810570354279, 0.7555481491849028, 0.7517729961882589, 0.16916277072420638, 0.17252572240922615, 0.12199376826128061, 0.14565417001221936, 0.5407698338302047, 0.15019898426563905, 0.14777861589663044, 0.17108735198369673, 0.15090511263799378, 0.1132236153692775, 0.13099075221270018, 0.1510172844107165, 0.1378768102105563, 0.11311695266049682, 0.10946709159366363, 0.11152366466638541, 0.11407528258044253, 0.09615990224378179, 0.9708984164421591, 0.9924497322634859, 0.9749098383075184, 0.9695389503737932, 0.9905344579980002, 0.9892283197346242, 0.968333046186961, 0.9721700368032183, 0.9607528755079578, 0.5912656607854383, 0.23882085820933485, 0.509559359293954, 0.5208466769887976, 0.3888746623524676, 0.360595807540533, 0.3546558116015214, 0.446686752987945, 0.4415376730568098, 0.20752196610761076, 0.22320815484727696, 0.12398244646255352, 0.1756806038595805, 0.1081221736104595, 0.36188733085137725, 0.6766732483654312, 0.4320308069052057, 0.34539009116266106, 0.1518156945782928, 0.1627266147886992, 0.3221968418435184, 0.20899547569155918, 0.1787253032350241, 0.39385360180854156, 0.1296067291629739, 0.17706723378408606, 0.3640086613936825, 0.21952583712697515, 0.09695619703714387, 0.26884663156899347, 0.1855680805799379, 0.19283724302128968, 0.18344199730115984, 0.2192481295606662, 0.20970232706658387, 0.1539135664248854, 0.06965416030319338, 0.01999853472003177, 9.999999999998899e-05, 0.028401510072083136, 0.00817847339719624, 0.04145083386384363, 0.015926941942701833, 9.999999999998899e-05, 9.999999999998899e-05, 0.053316354191772386, 0.13187453085245615, 0.0729155948721294, 0.042913600927141804, 0.015035083092766577, 0.10713471568097666, 0.14321815353392953, 0.15700524806822413, 0.15724467367812178, 0.10974974963449258, 9.999999999998899e-05, 0.07245823262827344, 0.09797918031190145, 0.22642715838236904, 0.029382075491368953, 0.04748092011719396, 0.15863928881806966, 0.09188639428467305, 0.08602030145912631, 0.16301463200329347, 0.185866048556116, 0.16573349838883222, 0.22942985985705644, 0.151784381986657, 0.1468560118295038, 0.24376817360992364, 0.13468158854759604, 0.570865202202672, 0.5790277309591739, 0.5159945325348272, 0.5072070774395787, 0.5016025218852167, 0.5031645373056998, 0.49694631184601434, 0.5055113352816278, 0.5809471066536716, 0.11776595097941422, 0.09959010404040691, 0.09033414817206209, 0.12089933287500898, 0.11078548092686413, 0.10483066109517636, 0.07922550550473006, 0.08046372629338983, 0.1067318250104301, 0.12412159897431507, 0.12627824280737643, 0.13311354852266521, 0.12377017871163987, 0.12472678119050018, 0.15300977874455168, 0.14231594482556198, 0.11317135147756685, 0.12790533853297437, 0.24144022297228174, 0.34445385302260934, 0.41377265993343204, 0.5099676098239345, 0.37523130794394477, 0.3341792656053866, 0.44528956334240644, 0.4524492609819031, 0.48349527189415675, 0.2699590497362223, 0.2984581380012906, 0.2320441008869436, 0.25173450033007405, 0.20007348758440868, 0.2575279062738186, 0.28012259293301256, 0.25385688147803764, 0.19504849187977913, 0.17926975383544652, 0.20307369358362015, 0.17256652206383372, 0.1908340168968906, 0.17763082580422618, 0.23039460008056134, 0.19316296465625815, 0.17971988917574455, 0.23031362135455302, 0.70971969974284, 0.2314180909303707, 0.6828536355378754, 0.23431153966342855, 0.21036079446596245, 0.22012306335189957, 0.6816544734160159, 0.21588898232344567, 0.20922922561374346, 0.1773284517821081, 0.6694432793669925, 0.17655328948831195, 0.8600203026012344, 0.1915642753807557, 0.1494409052440151, 0.171797118467803, 0.18964910827598247, 0.15021128865818412, 0.6815007042875253, 0.20842413412866956, 0.44824053250503326, 0.11777664681532951, 0.205553657805971, 0.20031388268997585, 0.11218752395140874, 0.09959741935485178, 0.6230547582265499, 0.17706164984691664, 0.15914428345508835, 0.16743802003291075, 0.20321121406483278, 0.1577298402509838, 0.16766843078614002, 0.16728725941935751, 0.16971398100856427, 0.16521427748879758, 0.08146605770279658, 0.0650844160294406, 0.08479847494902115, 0.09577518269749885, 0.08518025068282664, 0.09185294676850275, 0.07597622594835918, 0.07737203279516869, 0.08016955263750991]}, "mutation_prompt": null}
{"id": "c58e4f1d-40eb-4a71-95e3-be17ca4d9d77", "solution": "import numpy as np\n\nclass DynamicOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy_probs = np.array([0.15, 0.15, 0.15, 0.15, 0.15, 0.1, 0.1])  # Dynamic strategy probabilities based on individual performance\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                strategy = np.random.choice(range(7), p=strategy_probs)  # Selecting mutation strategy based on probabilities\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with dynamic adaptation\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "DynamicOppositionBasedDEImproved", "description": "Introducing dynamic adaptation of mutation strategies based on individual performance for improved convergence in the opposition-based differential evolution algorithm.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities do not sum to 1').", "error": "ValueError('probabilities do not sum to 1')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {}, "mutation_prompt": null}
{"id": "ffdfac84-bda7-4ab8-a959-980cfab1eaf8", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "093d37b9-b64b-47c3-b886-ca8f3c078787", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "59b7e37b-36b6-4b6c-83f1-6f89490bf65c", "solution": "class DynamicPopSizeOppositionBasedDEImproved(NovelOppositionBasedDEImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n            # Dynamic population size adaptation based on fitness diversity\n            if np.std([func(ind) for ind in population]) < 0.1:\n                self.NP += 2\n                population = np.vstack((population, generate_population()))\n\n        return best_solution", "name": "DynamicPopSizeOppositionBasedDEImproved", "description": "Integrate a dynamic population size adaptation mechanism based on fitness diversity to enhance the algorithm's robustness and adaptability.", "configspace": "", "generation": 75, "fitness": 0.26132262919510957, "feedback": "The algorithm DynamicPopSizeOppositionBasedDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.6682943875073215, 0.636707544328313, 0.6890568151784655, 0.7498518763736528, 0.5937776971196191, 0.668781156248676, 0.7363237534902193, 0.6384841577183445, 0.7116749369044039, 0.6052620138605291, 0.5097242150995788, 0.4919886076040523, 0.5559736987301678, 0.56462961304236, 0.5222083640020958, 0.5844641117244718, 0.6055853238347715, 0.4945785793454015, 0.13913526737369375, 0.18355991798771032, 0.1609629776303656, 0.2000448413178586, 0.13734203638888598, 0.12830535435643342, 0.34316066848615423, 0.16858518602922412, 0.1595019624278844, 0.09740781165968893, 0.12361240409710283, 0.11983650759725073, 0.12457986010070654, 0.13138218686800263, 0.12056386429708144, 0.2396553490287382, 0.13674300999539102, 0.14699186994005597, 0.9867170949805537, 0.9702397553029097, 0.9813728992345475, 0.9845400507940051, 0.9662636138260808, 0.9753249150135158, 0.965701038406089, 0.976171253844905, 0.9732893907232846, 0.24712823974122922, 0.2994830338946606, 0.2767700972412491, 0.39273404663369316, 0.3083140613204508, 0.2886553796143395, 0.2561708956970812, 0.24880029011828186, 0.29026546734536396, 0.5324560929859181, 0.25324002451807504, 0.15618916590164245, 0.5351339998086755, 0.18706235841760455, 0.20053435990598167, 0.6697014548734918, 0.5995629384267558, 0.2928102157142719, 0.1818322812370199, 0.09891715631933107, 0.15722572190665018, 0.1543863586222185, 0.16780023116557963, 0.25553961782966705, 0.1690140886135556, 0.11834884589473171, 0.1674036505673283, 0.2296748107570038, 0.11124312111672774, 0.12698550078417725, 0.17238945052968213, 0.22262810452531467, 0.1912243936709972, 0.2111866681764879, 0.08884411768686273, 0.17163323750356452, 0.0008293833186470145, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005600028697927417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023236884182466944, 0.00021732019718889717, 0.04715446477869589, 0.14680874127455878, 0.0343818572313247, 0.09028719324582213, 0.025776125157794594, 0.16669166775624455, 0.13040589138269865, 0.1056998077970186, 0.12261765001850922, 9.999999999998899e-05, 0.024897229936125975, 0.0652498754524693, 0.003569250908379562, 0.07367540371472092, 0.1351852089226353, 0.03765014815918344, 0.041005302262540844, 0.05147386861608083, 0.12146811635968224, 0.0951576985427861, 0.11866314261776789, 0.20521549767172886, 0.12524299489939927, 0.16304940155186598, 0.115193810060635, 0.10322344577623133, 0.054190782342622534, 0.46331539989004367, 0.454417642778842, 0.4322197460773346, 0.464475818557741, 0.43353512158938334, 0.4252335532083503, 0.4473179816435232, 0.4675742300610788, 0.44417074370255116, 0.10308640480131959, 0.0837787591018152, 0.07038170122592857, 0.10228460002980178, 0.0699914054304932, 0.10726293550900934, 0.0771996906191813, 0.07477198144802055, 0.07325205375763377, 0.10217467956541804, 0.1124691183601837, 0.13787395626090726, 0.13191430375304602, 0.10630414562467194, 0.13149391631065188, 0.11345887809214816, 0.10548804528033762, 0.13253030646603725, 0.28928038962378966, 0.24648420468269572, 0.29291067265904636, 0.3453132785087657, 0.298495737594176, 0.3607208437670132, 0.32320740190506336, 0.3341154725408605, 0.21606419255937104, 0.18584329475933015, 0.2226990334004597, 0.20958168664817944, 0.19155637283218274, 0.17849237712749677, 0.23673187431892373, 0.23951692896047438, 0.17012857990454489, 0.2701881167083928, 0.19725886949007254, 0.1618199095950642, 0.17447128319498173, 0.19933089518927494, 0.17720752143072516, 0.18477273421346863, 0.1830181568661623, 0.17358555164781664, 0.18589788182176203, 0.2008536782728182, 0.2099824378433921, 0.2110471420223925, 0.21384011368795064, 0.26594911637370244, 0.2183664239615306, 0.34208847900468686, 0.22504427158042284, 0.22042745481234338, 0.15373166125656101, 0.4881150751282779, 0.7377928009837174, 0.6712749177560535, 0.6574987622664574, 0.43645635922362547, 0.1285024682135525, 0.11255087590680646, 0.15280557888757607, 0.5756520923843955, 0.1995605750210364, 0.5374673404558619, 0.19586826548616343, 0.1334853254877233, 0.20221420705421345, 0.09770248727358721, 0.1571906552740756, 0.2619371690182627, 0.167305776325138, 0.1672398358848528, 0.1621965160090112, 0.1555533743723101, 0.18423659668711412, 0.18221528851285407, 0.1678817891668024, 0.16887648049682158, 0.17157857365030393, 0.07896073601634834, 0.07374475455723728, 0.06897860142101742, 0.07265193503411993, 0.07636406707309429, 0.08111682273706988, 0.06365300316862266, 0.07672944239264345, 0.0733026110137085]}, "mutation_prompt": null}
{"id": "8fe87a08-c22d-48df-abed-e66013c4215f", "solution": "import numpy as np\n\nclass EnhancedOppositionBasedDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6, 7])  # Updated mutation strategies including an enhanced variant\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                elif strategy == 6:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n                else:  # New mutation strategy for the enhanced variant\n                    mutant = best_solution + F * (population[a] - population[b]) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedOppositionBasedDE", "description": "Enhancing the mutation strategy by incorporating a differential evolution variant with adaptive control parameters and opposition-based learning.", "configspace": "", "generation": 76, "fitness": 0.30124318672385, "feedback": "The algorithm EnhancedOppositionBasedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8818020865614756, 0.8502513353152021, 0.8673944722969535, 0.8662608496417553, 0.8771051698079011, 0.8501402736384875, 0.8577148638690292, 0.8235828840688577, 0.8563267704316989, 0.7394330619828926, 0.76185560302897, 0.7440671584352353, 0.7596597620804071, 0.7315193168458516, 0.7509535212870267, 0.7347112416082949, 0.7680713901036966, 0.746585012091151, 0.7398292801552444, 0.17266367359734924, 0.163105692087533, 0.13405793592671456, 0.1340622603920517, 0.15143248785893104, 0.520379334776204, 0.124479758386566, 0.5567089644598346, 0.13378884866365592, 0.07946519072315916, 0.12557511769287522, 0.1174171569317658, 0.09634292696713798, 0.10803264483342923, 0.11304795310224347, 0.17223402438835878, 0.12319946265500259, 0.9790170318844347, 0.9829186543254252, 0.9881376245131996, 0.9818342108488852, 0.9792145461326519, 0.9784627643683753, 0.9559871635283381, 0.9853942303465093, 0.9695763666784633, 0.5120025520201967, 0.4723308144784335, 0.23304292335394072, 0.4403570081442001, 0.544694297315341, 0.5321965001874683, 0.4010436940315345, 0.3787832361995366, 0.43675290481361306, 0.33864006428424764, 0.2499833558124751, 0.34402237414036696, 0.20068473591450953, 0.20781036229576189, 0.15284072595539233, 0.20772176655443875, 0.7092110688711387, 0.7111881058547314, 0.2385894071324064, 0.26366170998666105, 0.23856243154121337, 0.3239650436847975, 0.1053577500561036, 0.19775379684975847, 0.2123762894286858, 0.17093719124611595, 0.13004964471258207, 0.20987061015539388, 0.18181803171029787, 0.21679214557104065, 0.18111413780756158, 0.2090075716554307, 0.19758422874700332, 0.23301360346214328, 0.19425579732825982, 0.2651289561219379, 0.07503401618434347, 9.999999999998899e-05, 0.042774278078002714, 0.02244694976419337, 0.03231894816669634, 0.02686794558365313, 0.024289371085666644, 9.999999999998899e-05, 0.15877295076772568, 0.045528119968004654, 0.04884739117023307, 0.11092428908984298, 0.15642599657739997, 0.0363390988157265, 0.016768869849295487, 0.16263758699572095, 0.07682449724712492, 0.08865361196081789, 0.04159836044085019, 0.056294716385550836, 0.022094212602143726, 0.060473987521871275, 0.034210280859018005, 0.12560559025898532, 0.01034997856275821, 0.16153143477797038, 0.14314992476163058, 0.1376792230231484, 0.1610603954522074, 0.14242218715160704, 0.16356703803781636, 0.18549818651823868, 0.1858109366407118, 0.10475969862062462, 0.13457939502216631, 0.14425552669032515, 0.557014407892459, 0.535678075193993, 0.5325784755132565, 0.5612179331581514, 0.5233699679657448, 0.5111380505175036, 0.5537021885854001, 0.5552512951920578, 0.6018656077437599, 0.10458842330589269, 0.07272911077564637, 0.10734865242469116, 0.08368104500423523, 0.08356470104009972, 0.11821613456896962, 0.10264919438351805, 0.09168537927859466, 0.07010797705198679, 0.12193229908916292, 0.12101142085325212, 0.26182250119275763, 0.1208749076504817, 0.12305452666894257, 0.15448617679085053, 0.10448635836825249, 0.18763855019371933, 0.12101149092591457, 0.40165519165079, 0.3946750628777429, 0.3557420794529761, 0.2762756779023047, 0.25199976821055137, 0.3602542019018068, 0.39563246094940996, 0.33894124894413247, 0.4163156968349224, 0.19965453177396275, 0.23556755049285594, 0.23949538560226746, 0.2120695946322042, 0.15339448303239134, 0.29172072463507714, 0.22165590301851046, 0.15191513697815318, 0.24022656787445806, 0.17995817923153112, 0.16384399800584104, 0.19422104910865112, 0.19088359129216848, 0.1725833086722216, 0.16641849532408703, 0.19885599701310908, 0.19411097134047361, 0.2046075672796136, 0.19020722863148243, 0.20890303366119933, 0.20999318438714276, 0.19609331758778137, 0.2174223723660007, 0.21867324016097855, 0.2130525390268747, 0.23157742723861652, 0.18086806669728772, 0.18240173136124527, 0.16796161388948316, 0.8546966129549959, 0.9005019965622542, 0.739876772950431, 0.16875511296297296, 0.1835917984243931, 0.12039869798345604, 0.1609330643947322, 0.5757627764544933, 0.1907339416134578, 0.5827813205402652, 0.16258118602703509, 0.10186012800882671, 0.20828601530496416, 0.2783507076580216, 0.3596392937977274, 0.1654043062494377, 0.1727650630855445, 0.15468459974477577, 0.17585481649637857, 0.16925556224323446, 0.1625181685845235, 0.1710211493125564, 0.19323797454544756, 0.16855673517550074, 0.17397368618598397, 0.0747070562748966, 0.06110710119579721, 0.07461983363432867, 0.0763125282601459, 0.07391180335152514, 0.0594291678058978, 0.0658339697186604, 0.08414894384955218, 0.08236349925375164]}, "mutation_prompt": null}
{"id": "57c9bdef-da2b-46e2-be1e-a3571eb32f61", "solution": "import numpy as np\n\nclass DynamicOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5])  # Updated mutation strategies including the dynamic adaptive opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                adapt_param = np.random.uniform(0.5, 1.0, size=self.dim)  # Adaptive control parameters\n\n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                else:  # Updated mutation strategy for dynamic adaptive opposition-based learning with self-adaptive control parameters\n                    opposite = 2 * adapt_param * best_solution - population[i]\n                    mutant = adapt_param * best_solution + F * (opposite - population[a]) + F * (population[b] - adapt_param * best_solution) + F * (adapt_param * best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "DynamicOppositionBasedDEImproved", "description": "Introducing a dynamic adaptive opposition-based mutation strategy with self-adaptive control parameters for improved exploration-exploitation balance.", "configspace": "", "generation": 77, "fitness": 0.28907665544475475, "feedback": "The algorithm DynamicOppositionBasedDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8722491969643563, 0.8634728971990658, 0.879413021169267, 0.8505145165822026, 0.8078868600785258, 0.8232228021435394, 0.8736300264129175, 0.8476561412828791, 0.8430802230855947, 0.6958527296610397, 0.7162808577215147, 0.7008827760827532, 0.7425502435764699, 0.7449537739001866, 0.720372294487404, 0.7319581748819507, 0.7279039630359339, 0.6999729724368731, 0.14091046681902775, 0.5010700616728347, 0.5818679854414932, 0.5750282985518265, 0.10951296248482523, 0.16708373716609148, 0.16072165683156947, 0.1537925408902291, 0.1555803171888379, 0.13097177748737288, 0.10832817535046346, 0.10751932420776489, 0.10623090317375428, 0.14463966626054592, 0.15636146309362342, 0.14543061285978542, 0.1315793598626659, 0.09430402083389222, 0.9683513397323235, 0.9848924646293709, 0.9421293860322243, 0.969161517270621, 0.9852525971655739, 0.9686083129361851, 0.9675494819284816, 0.929617062493125, 0.9743640830832467, 0.3145523966179259, 0.44204550697472345, 0.1658779648710189, 0.3226428764838344, 0.3687617861627045, 0.3424762830637028, 0.39845111683432377, 0.28277805129944644, 0.3738695842664307, 0.35243228310544306, 0.4894837871126603, 0.21679913559248298, 0.2726258987433797, 0.2690900221021846, 0.25575151419032605, 0.21805906633599526, 0.34382621223366405, 0.2297376513875874, 0.21593914248602664, 0.22043688138349404, 0.16087710522486398, 0.1269480016111606, 0.1451175348716932, 0.45325858147455034, 0.13990253885938586, 0.17836077767621628, 0.31068691611221944, 0.1658344761330618, 0.16668788350488484, 0.3112794182764502, 0.1413412049402053, 0.17546297987969406, 0.13421911601772407, 0.16153439664988178, 0.16726399653362822, 0.12425784861484934, 0.038368272613397814, 0.056200667773031676, 0.04079305583800452, 9.999999999998899e-05, 0.11151683276387592, 9.999999999998899e-05, 0.06833507602164879, 0.019009829723115046, 0.011159893561608403, 0.08426132756429339, 0.06918887282905617, 0.0728735242910532, 0.0711792219023284, 0.08627974742830158, 0.006949959108248582, 0.05918090455228253, 0.03381605877132732, 0.08428475213336473, 0.049849319617084276, 0.06829876630882625, 0.1303678860395523, 0.12432553829232418, 0.06429746802716108, 0.011902775913157915, 0.106004058088224, 0.18712032350439456, 0.04159768172701628, 0.17410493893765233, 0.08513169868398729, 0.19967389594063156, 0.18490818570180323, 0.1147170569637308, 0.21001092098974317, 0.15153442866228328, 0.1722309572379982, 0.1050140921301207, 0.5008426704660343, 0.5023822320077765, 0.5023348496721052, 0.4739266828320329, 0.5194297255060893, 0.4828617696289631, 0.4825607090507077, 0.5483969071009027, 0.4832136258030656, 0.08280630027985281, 0.09827213211333619, 0.09115143558508876, 0.09027965454902154, 0.0907604348720471, 0.09592595116857405, 0.10736239568023997, 0.10408665971787356, 0.10098730182611781, 0.12584062900377035, 0.10894882207968004, 0.12350613261682597, 0.12528819774832733, 0.11908139241777937, 0.1380344651613994, 0.1199999945742396, 0.1330890478142397, 0.14192786051905115, 0.2959248157542974, 0.3282536146695323, 0.3019848839857653, 0.3300976226745298, 0.2948151542463333, 0.4016235129896091, 0.47723355365317266, 0.41987467567162773, 0.2095907232900327, 0.26307984640022164, 0.23454675882931764, 0.231604929878372, 0.19972993193190236, 0.23012631989503507, 0.29527909990604984, 0.20519025131097512, 0.18992679830400117, 0.28898801999667845, 0.180392623314499, 0.1826077689080906, 0.17986115827978588, 0.1914124011478987, 0.18486938465777913, 0.18924728117237988, 0.1917081884450954, 0.22776118744547957, 0.1753805662554203, 0.21687690868537735, 0.18339204970606227, 0.21748733401893028, 0.2057706274661979, 0.20470577349271912, 0.3995592280089725, 0.23063952059755055, 0.22039234753444603, 0.229847038550833, 0.16812253567202806, 0.16051001654563757, 0.18221677985683327, 0.8741726691701619, 0.7310131094155663, 0.7708643489271243, 0.14941713485879937, 0.19641024324670409, 0.1637023097407535, 0.5820139045367956, 0.2080157723252578, 0.20366049409479414, 0.2246347014711626, 0.3973393571262115, 0.19957712133022265, 0.3511533837533056, 0.1962807811779248, 0.15985016689263543, 0.16007370899358264, 0.1692114596433264, 0.1823460130008966, 0.18166817673398505, 0.15980098556155775, 0.17357535728578677, 0.18235648288508954, 0.17971359735122228, 0.175615665216746, 0.07537557131312855, 0.061816140855709856, 0.06721605581416756, 0.08997452281173013, 0.09027485995084483, 0.07199383953552752, 0.08772037115019937, 0.07018625676615775, 0.08353282676665108]}, "mutation_prompt": null}
{"id": "289f7ac7-cc12-4192-8d44-ebde55e47084", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "f6dc2b58-988a-4fbc-b4b6-20dab6f6747a", "solution": "import numpy as np\n\nclass AdaptiveOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the adaptive opposition-based learning\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # Enhanced mutation strategy for adaptive opposition-based learning with varying control parameters\n                    control_param = np.random.uniform(0, 1, size=self.dim)\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * np.multiply(control_param, (opposite - population[a])) + F * np.multiply(control_param, (population[b] - best_solution)) + F * np.multiply(control_param, (best_solution - population[c]))\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "AdaptiveOppositionBasedDEImproved", "description": "Enhancing the mutation strategy by incorporating adaptive opposition-based learning with varying control parameters for improved exploration and exploitation in the Differential Evolution algorithm.", "configspace": "", "generation": 79, "fitness": 0.2919983687580575, "feedback": "The algorithm AdaptiveOppositionBasedDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8784204184825143, 0.9014060481297119, 0.8812497893492148, 0.8396908100085391, 0.8546494937299577, 0.8591545547686285, 0.8401091965379792, 0.8820623529175444, 0.8854943930819162, 0.801178893801768, 0.7834390538102651, 0.7808349748514326, 0.7702949441699627, 0.7687561304453906, 0.7719008301463428, 0.7467459987001871, 0.7861055682580261, 0.7979983052174517, 0.5494020964577664, 0.1498066930743902, 0.654309257665449, 0.15105674209592068, 0.1720700889880178, 0.16645884529334176, 0.09564296627962121, 0.17499742684754094, 0.1353678293669658, 0.129413781779539, 0.12048160051045875, 0.17055997061102535, 0.14975797588244, 0.13324993459673784, 0.07592537271911604, 0.12592783866516488, 0.09298945296998606, 0.14488841257810692, 0.9830677403949825, 0.9894441750058783, 0.9879369291004899, 0.9734258901545515, 0.972764650108507, 0.9908013848252202, 0.9658919117794927, 0.9762885279429963, 0.984916014508216, 0.4896296283785748, 0.460439127027676, 0.5444156371096063, 0.3681877580460817, 0.3448650748733979, 0.35927656847515044, 0.44832406588539575, 0.3887393181722758, 0.4022775755251907, 0.1603814470042988, 0.34337297866890815, 0.21115049810544884, 0.20978517227006632, 0.20256410952063286, 0.20485891341992324, 0.10727470283354579, 0.17520731283129043, 0.21938542373196301, 0.26347719691506477, 0.2045778663775074, 0.16098082768357203, 0.24520289355013525, 0.1314534478965559, 0.1602183942208747, 0.21509675522412208, 0.12245193545725797, 0.1629484878163756, 0.2936929189281936, 0.17131176141504, 0.17738912561792552, 0.2248396220372182, 0.2571177025041812, 0.24643033449533092, 0.12928352459401593, 0.17390969216513819, 0.06823806586836234, 9.999999999998899e-05, 0.03842949712956034, 0.03137952207751482, 9.999999999998899e-05, 0.026622048880355798, 9.999999999998899e-05, 0.02052964396161372, 0.0030534391135768058, 0.09745075164428252, 0.12625773787595385, 0.12786920252990763, 0.08791766141753155, 0.14187596504216582, 0.06706493438649719, 0.012375745883585698, 0.10996822837280174, 0.08177938155432041, 0.1131739911568691, 0.0451779891531191, 0.13311756899715288, 0.11044265006459042, 0.3101336498529874, 0.07589880180638031, 0.03381444489493135, 0.1162893243796479, 0.024752135521272756, 0.040515193861153764, 0.11210178872003018, 0.2050887813165836, 0.1342235269183757, 0.1518362365527679, 0.11585126486102149, 0.18302013564902897, 0.15328985856116928, 0.20616485149572672, 0.09618107769795592, 0.5013799996954764, 0.499500403391556, 0.5347472651926148, 0.4932436788684126, 0.515136162828221, 0.5675948093953096, 0.5052240259834, 0.5100546737187137, 0.5421849526129248, 0.08214329402802578, 0.08615532205239762, 0.11568877497239205, 0.08724233358207434, 0.10901006282876191, 0.09790061484712365, 0.09058318759434625, 0.0973290557954204, 0.07940450655553699, 0.33261720536548756, 0.12777823060174087, 0.13534206473227606, 0.16550025945191593, 0.1546116937067027, 0.12818508804966278, 0.26358172881622155, 0.15074947572385677, 0.12353565059776206, 0.33048418613975794, 0.43353471516253084, 0.2931366986514907, 0.4695082144442766, 0.36269269358850165, 0.33134646280310376, 0.42699025627656206, 0.39461781236499105, 0.3149008194235151, 0.1991140612766209, 0.22860642962380506, 0.320243234545334, 0.3071834828788811, 0.18050060895712217, 0.20323609393266728, 0.2073853131069724, 0.14466043537257844, 0.3218527439381942, 0.1862314051119709, 0.21222764520994575, 0.20093429248556394, 0.18102794224510244, 0.1756503210169279, 0.1995778811256127, 0.22199743053170928, 0.21087774923638258, 0.1963369361166114, 0.171867144347284, 0.20035239723714215, 0.19744176823605752, 0.22975928103067045, 0.18699560086727918, 0.24219348985924138, 0.21719468282990007, 0.19841935957525947, 0.20621010665658557, 0.18543615680389514, 0.7943296047180491, 0.17713973835577124, 0.8471332466100054, 0.19320906430862583, 0.1604573366160743, 0.16356993667484931, 0.1128136784650069, 0.1514208363002053, 0.8489843507713821, 0.19335743567628438, 0.47309934384435615, 0.13982657659942033, 0.1944335625195731, 0.20807677724960194, 0.12248457496725274, 0.09996781923403775, 0.14675173013508247, 0.16749063139348053, 0.15855223176411304, 0.16463196907911393, 0.17542762633803177, 0.15683429730734055, 0.16095521152491088, 0.1740831681120062, 0.17657903518538276, 0.1852379444904919, 0.08149900622013151, 0.08379377623773776, 0.07419957010704381, 0.07668205744952139, 0.07767551449969867, 0.07308378840445062, 0.09442342316007013, 0.08321085544305129, 0.06404339539440373]}, "mutation_prompt": null}
{"id": "99ea5f61-603b-4d63-a229-9748f1b17254", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "6276619d-29c1-47fc-80ac-5d2dc319b597", "solution": "class EnhancedOppositionBasedDE(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.NP = 50  # Update population size for increased diversity\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "EnhancedOppositionBasedDE", "description": "Enhancing diversity by introducing a novel opposition-based mutation selection strategy with adaptive parameters and a dynamic population size.", "configspace": "", "generation": 81, "fitness": 0.17799984469165422, "feedback": "The algorithm EnhancedOppositionBasedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.47845044446413554, 0.42908548825994763, 0.45755134465421854, 0.4551503746845478, 0.4233018561047457, 0.4386097169708091, 0.4965227267408141, 0.43119890657185345, 0.4615210269747466, 0.12641210978596684, 0.12594556719076266, 0.17656913698231658, 0.1633584891196258, 0.13521745576011202, 0.16585865714498216, 0.1825883445528521, 0.13217125405126662, 0.1440508688494503, 0.09070796535601, 0.08477849672648241, 0.09649035609050804, 0.11044605045865263, 0.09666876042757144, 0.09450734627843083, 0.08921465784823412, 0.10277994219600406, 0.08259152496301325, 0.07133342879032079, 0.07630089579189825, 0.06905443013481183, 0.08138254083292684, 0.07522770178538596, 0.07975411560760026, 0.07171387645401572, 0.08731631764744652, 0.08123677958479125, 0.9551716865998722, 0.9546289005577527, 0.967481606331933, 0.9528971094259743, 0.9559488425164573, 0.9469109872666472, 0.966886273598898, 0.9398390683730101, 0.9667103314974311, 0.13151789503505007, 0.11902325320259244, 0.11079039857629536, 0.13001679483385054, 0.11100325101670405, 0.12234760480659024, 0.1295013400689069, 0.11949105509943492, 0.08743795402232335, 0.18770201905933281, 0.1987441354982027, 0.16880702926306734, 0.23234325061427175, 0.20108249156873415, 0.21070305057037741, 0.21021865966777808, 0.1899731545753538, 0.19948875089486173, 0.10587558901684146, 0.07900636908575653, 0.08720942590434078, 0.09766282042801855, 0.09959977804936804, 0.09907705861694194, 0.11069978406249081, 0.09399918822983178, 0.12839737924830896, 0.09895219246924736, 0.0912356267239427, 0.10111652583740449, 0.10180016256436286, 0.10523922866855906, 0.11002780069551832, 0.11826521988747152, 0.051861401128121876, 0.11343552474548069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04834231041909931, 0.018175289593575727, 0.0690163384859177, 0.04761375216776964, 0.021299949394476103, 0.03458714525749729, 0.04654809427778406, 0.05035377417836262, 0.024326882310666376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06427864501506153, 0.031113029382142998, 0.0565782344209429, 0.0603674770803867, 0.07619676417858368, 0.061640168513816374, 0.06331673670805815, 0.060429426389401075, 0.0529880053884072, 0.3511922519754255, 0.3725911056254888, 0.36952080978185164, 0.32239276654237037, 0.33982438846315777, 0.36821891456677736, 0.35154247883503054, 0.34646805426402427, 0.3501585857890471, 0.06501116643585969, 0.06483355212702158, 0.06819831336373428, 0.08221266139469374, 0.07327539360965107, 0.08633456877799295, 0.07806015737839467, 0.06658801239871259, 0.06425818057962884, 0.11356349094430096, 0.10806488165624073, 0.11842175776965747, 0.1248516291474292, 0.13336912505995535, 0.1320252059758672, 0.1303634151869414, 0.09250073603379683, 0.12040992955709173, 0.22340478444482237, 0.1943546029967952, 0.23087180011195685, 0.22312529143356075, 0.23604072699747514, 0.23282494141807042, 0.2329600894216639, 0.24480808314583613, 0.24086093770621497, 0.15021678713516817, 0.15636866997864785, 0.16542461807295716, 0.16877253722408825, 0.1649298185222391, 0.1691415238366748, 0.15878210101017098, 0.18821354120969291, 0.16388217338796662, 0.15507566226723501, 0.16538999968016066, 0.18469671966343326, 0.18195657404320742, 0.17833730883065924, 0.16960349471021496, 0.17743654599158032, 0.17395526257397398, 0.1922730382018618, 0.16436506812307272, 0.16552674139679857, 0.16158357406332546, 0.1624650577356188, 0.1641508082856511, 0.16784191781384306, 0.16051784771710698, 0.16666606888408664, 0.17614072999924124, 0.328759508686999, 0.16393491435606444, 0.18432458331114088, 0.34336703487579157, 0.24037959414057863, 0.16690495512919756, 0.32564954863314965, 0.1457702379001916, 0.3087523273628472, 0.32822230714487055, 0.18497663633709716, 0.15443685614747116, 0.15912196772472031, 0.1346539562364023, 0.17888008113822196, 0.11325609614059629, 0.1813309821869189, 0.11576874781379609, 0.17510505233035578, 0.16080524024241516, 0.16352901464000535, 0.16648014419736668, 0.16569613631673907, 0.16675560517806642, 0.16421328002218671, 0.17685969900633258, 0.17028611011520456, 0.06300755418291049, 0.06580533867756455, 0.057238994080822336, 0.057496294190329755, 0.06693820995050104, 0.06459437071421692, 0.05995155970238253, 0.05795747093019832, 0.06537011347552801]}, "mutation_prompt": null}
{"id": "209459fa-b7b2-4c86-96df-55d2524e1553", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "c71cd2fe-e0de-475c-820a-ab0333742c75", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "8d48e61a-46b0-4cb7-ab46-af5ac5f9e22b", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "dac3668d-471a-42a6-a8f0-59d0c411066d", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "b98de525-4a5c-419e-a87a-e2ac9f7fe642", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "7ef5057b-1045-4ee3-8654-9c7e724902a3", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "55a9b325-6430-4714-9720-a5d8bfbcb174", "solution": "class DynamicAdaptiveOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                performance_ratio = func(population[i]) / func(best_solution)  # Compare individual performance with the best solution\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters based on performance ratio\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + performance_ratio * F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "DynamicAdaptiveOppositionBasedDEImproved", "description": "Introduce a dynamic adaptive mutation strategy based on individual performance for improved exploration-exploitation balance.", "configspace": "", "generation": 88, "fitness": 0.25038770774004343, "feedback": "The algorithm DynamicAdaptiveOppositionBasedDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.7505741593736688, 0.7458845107534977, 0.7901451697867711, 0.7719371246581823, 0.7440805782034021, 0.69674619523744, 0.7693488736692182, 0.7572628949689661, 0.7485223607361728, 0.5660570807607775, 0.5080483678397381, 0.5463507432562207, 0.5822225842866284, 0.5540093062224936, 0.6040861636928148, 0.5382702923903051, 0.5367856893145905, 0.5800544210935323, 0.1544092983446178, 0.12355876876500183, 0.12435175115949093, 0.16155477276203578, 0.14659469958457672, 0.12729419470165193, 0.310229692674876, 0.12457422039316812, 0.15814447528110465, 0.14065080909799343, 0.1480805428398254, 0.11180693211216308, 0.13035291311429542, 0.10049838421657076, 0.10047542578682933, 0.1188012853206879, 0.09387639095402434, 0.09161585320643795, 0.982458283030706, 0.9640265949397497, 0.9768151579191435, 0.9805991006147374, 0.9578257634388844, 0.967985429475827, 0.9527770446838992, 0.9695732604673267, 0.9663527983260944, 0.2543223035468064, 0.28770087993214, 0.24025250414533483, 0.25291368369585043, 0.2993184247704018, 0.29922890418919956, 0.3128431147381009, 0.24241723834279993, 0.23532093225894424, 0.2894374447119319, 0.267856052645002, 0.19868617756521811, 0.5199570032978501, 0.24035931885883888, 0.13623716755308246, 0.20863490954102049, 0.26900606503491076, 0.1804562822700373, 0.11638339292015476, 0.14451606934153916, 0.1675977590033142, 0.20175705716575998, 0.11695922029975447, 0.2125222886418563, 0.15302732874195812, 0.1582114001955559, 0.11141813617617358, 0.12153755893047458, 0.1320599377547118, 0.11028491014946284, 0.12700951743229583, 0.19517453057138134, 0.18205466208419796, 0.1706263475488744, 0.09137340186319365, 0.1492204722165803, 9.999999999998899e-05, 9.999999999998899e-05, 0.004997154839059603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019929166421115196, 0.0750025219102316, 0.035762934457592044, 0.0730113409871419, 0.07683584175847813, 0.009435187818444546, 0.07583224207855621, 0.060284234709554796, 0.02194425423760127, 0.07804026696734923, 0.055088234653848156, 0.015744842903837708, 0.022277027890120316, 0.0134149712035041, 0.026510695788848126, 0.1548649337949437, 0.008479616701370873, 0.03360351161714026, 0.01984911744768958, 0.12369728953951398, 0.10396773767595824, 0.09080228092625708, 0.1073450657984939, 0.1264564752358054, 0.1465272143989763, 0.09105857422829744, 0.05775616393092864, 0.039304381606282024, 0.4555418200040231, 0.5226239752142472, 0.5282697341035237, 0.4652026690566712, 0.43509020846995805, 0.43463076678423773, 0.5232829836889356, 0.4772660921900701, 0.48706120069033554, 0.08248661009256919, 0.08651074596794284, 0.09103266589469838, 0.08418273479673899, 0.07692512411809571, 0.09407950429754253, 0.1041459737243613, 0.08615669134373916, 0.07661286614513885, 0.10906897338558008, 0.1278440841117554, 0.1380819666498142, 0.1078648314767151, 0.10299205486181251, 0.12035377670627734, 0.10710374941138268, 0.10387384612951522, 0.11167751563923212, 0.3271746544209654, 0.30445364839551037, 0.301061508669174, 0.4161536757034393, 0.39990882269078454, 0.3060849801195935, 0.3153874804256642, 0.3181255723536647, 0.29478134145848767, 0.22011305817869464, 0.20599699084327117, 0.19811355524426066, 0.2694559654025027, 0.20067039427111943, 0.23586813611446855, 0.17525924341504084, 0.17473240293714043, 0.2569989786625497, 0.16444452775313279, 0.20557654837909134, 0.18012393283018535, 0.18919989053926622, 0.186507659488106, 0.1634974090618092, 0.18355947054519184, 0.1607058707451522, 0.19145805507785074, 0.3632759252179638, 0.20350747910690237, 0.18623412770826964, 0.1956201995838378, 0.20509626112777135, 0.19146270255625275, 0.39402367153653894, 0.28211461070742794, 0.20914543470601044, 0.1517138107622079, 0.16814892086605537, 0.6729127764710136, 0.6785648399831639, 0.18693606244232575, 0.3916130310322383, 0.13427504914453636, 0.11251374802113645, 0.1489288675813335, 0.39659427555661164, 0.1948458125647221, 0.5550290625417988, 0.2460144185804798, 0.15935297998482534, 0.19987253946524808, 0.19333573011804306, 0.14674510112317818, 0.17041373710840235, 0.16297219453231593, 0.16783046084221187, 0.1655652371368488, 0.17768657530050846, 0.1551581078687263, 0.1542996853198343, 0.15891527146461337, 0.16572850790011873, 0.16003950852349957, 0.07028035839947588, 0.07915564948439247, 0.06610957690325836, 0.08930598505029264, 0.07229971943953639, 0.05855440647555388, 0.06923698736014272, 0.06765177164832259, 0.07841071480261397]}, "mutation_prompt": null}
{"id": "58a3e0be-9132-4168-a8f7-3c5d713e2a9e", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "39e94250-4876-4664-8fa1-5e35d2d08f67", "solution": "import numpy as np\n\nclass NovelOppositionBasedDEImproved(AdaptiveDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget)  # Dynamic adjustment of F with budget\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "NovelOppositionBasedDEImproved", "description": "Introducing a novel opposition-based mutation strategy with adaptive control parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8820458602542167, 0.8273117708021606, 0.8652179858394777, 0.8665428581120133, 0.8118647051729124, 0.8564759145479406, 0.8617952487433855, 0.8385458750022434, 0.8292211917754299, 0.7562735296909397, 0.7320454959230003, 0.7496891643796365, 0.7665334444188693, 0.7459141637969222, 0.7462399734725202, 0.7828472378033983, 0.7768603739112028, 0.7234795457429417, 0.14684958417013605, 0.16607337473536554, 0.17075163014136974, 0.3989606296440792, 0.1528713319455285, 0.1387048596728082, 0.582083836394744, 0.17643023051825746, 0.16962205046977108, 0.10120504641499917, 0.13521019809902324, 0.12432530511248152, 0.11174093138343089, 0.14103619356753283, 0.10260521504701825, 0.09458789366411924, 0.09546593747330767, 0.14391918138802684, 0.9894684332147657, 0.9772577732486698, 0.9856636302423112, 0.9881137957239231, 0.9744422195157093, 0.9808347957981288, 0.9738419895062332, 0.9816651223160108, 0.9795785088031826, 0.44963009496361295, 0.4550361580129415, 0.45188669711313056, 0.6012375073670743, 0.4600122472871704, 0.43913059572228597, 0.37581642332150533, 0.3918641735051416, 0.4130130684137461, 0.6593048568748386, 0.29769060583651696, 0.16049579665560199, 0.6885034659872582, 0.19658248088967267, 0.20480122838749615, 0.7536324317727119, 0.6324220758942081, 0.5468080195397629, 0.22420733348379474, 0.11603802809076313, 0.19617028058242192, 0.1970365983293585, 0.18901928571817594, 0.34196800071618505, 0.20288091989373191, 0.12406457036311513, 0.1815611087122997, 0.27208098830420735, 0.11861817377403783, 0.16616598094845936, 0.21571553345569383, 0.274341916339934, 0.23796430068359786, 0.2761066441181059, 0.09585551095441114, 0.21266129668639489, 0.006882916027583619, 9.999999999998899e-05, 0.0013292067354133685, 0.012502149690711284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948090359843572, 0.004372806569665766, 0.05054462397469428, 0.1791532696316972, 0.05129317417732149, 0.09721510000789946, 0.028892489991672154, 0.20102015323131806, 0.14987486805738282, 0.13403306597044173, 0.13136147280382626, 9.999999999998899e-05, 0.03288571224371406, 0.07280961185729196, 0.01893907748823298, 0.11012157976214199, 0.16551731718705054, 0.05322883425688529, 0.0632395499898124, 0.061389488358858935, 0.14102403565449062, 0.10953285342062558, 0.13679897328440072, 0.24736256292330328, 0.1535028634081771, 0.1981460214201698, 0.14425758278838108, 0.11718230218237968, 0.0811333973964049, 0.5067389737109966, 0.49555800123339644, 0.5754836169803116, 0.5008442707532348, 0.5359199903526778, 0.5408313719054214, 0.5658468027840751, 0.5588408249247676, 0.5340195568704864, 0.10724671931993579, 0.09304170104910359, 0.08496760503365675, 0.1151365949030202, 0.08079727365886447, 0.11434257772485268, 0.08382239383539358, 0.08460796407590265, 0.08461623148006547, 0.10772678340304886, 0.1147330939107436, 0.1435748721309359, 0.13284255229364916, 0.1139935563957164, 0.1373984371039726, 0.11612648878742571, 0.11002957633450827, 0.13510648516800428, 0.3100850679116316, 0.3455809344774028, 0.41983971686126254, 0.4108832370316443, 0.4512114241452183, 0.46167415382045174, 0.3654918148319546, 0.4434192351388131, 0.22327149269793423, 0.2087623010788474, 0.24217345495574216, 0.2278616264445411, 0.20314640760815328, 0.19477540402874127, 0.2711118572852417, 0.28917165347026774, 0.18404231926004722, 0.30911927648022874, 0.1997204538760301, 0.1716647734591663, 0.17872036266150226, 0.20188859748295185, 0.19164337705084578, 0.18800893410588038, 0.18843525941883532, 0.18388399254990084, 0.19067040194884444, 0.20427128259137128, 0.21566537159113697, 0.22377562023837905, 0.21849530666945205, 0.4410206843833011, 0.2293214714405739, 0.5194751993341007, 0.2343300431719223, 0.3680729701895673, 0.1571082915292653, 0.7251792741484182, 0.8418280763303075, 0.8048693556200699, 0.7483782298793635, 0.6205909539320056, 0.1391580893300849, 0.1132852802928459, 0.1557216259844998, 0.7730288133833271, 0.20360797069886105, 0.6459460533982633, 0.20086444522699964, 0.13972748061396467, 0.20564036542642494, 0.09970494304729671, 0.16056594167595173, 0.4918305591369604, 0.1688161342868989, 0.17204483347711863, 0.16355360385622808, 0.157995751676556, 0.18739219778485017, 0.18735213414599827, 0.17030364495491324, 0.17067123503558745, 0.17510428271611023, 0.08340503842831026, 0.07928063893384696, 0.07438542134934978, 0.07589050449065726, 0.07925299366239646, 0.08515000861942079, 0.06970531311947148, 0.08193296859309773, 0.07504044882336858]}, "mutation_prompt": null}
{"id": "f4d3f4f5-4146-4581-8ef6-da65e93fe2a7", "solution": "class ImprovedNovelOppositionBasedDEImproved(NovelOppositionBasedDEImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget) * (1 + np.random.normal(0, 1) * 0.1)  # Dynamic adjustment of F with budget and adaptive mutation scale\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "ImprovedNovelOppositionBasedDEImproved", "description": "Introducing a dynamic adaptive mutation scale based on function evaluations to improve local exploration-exploitation balance.", "configspace": "", "generation": 91, "fitness": 0.3158838165266071, "feedback": "The algorithm ImprovedNovelOppositionBasedDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "97c240b1-3404-4d5b-8f5b-a80bfef2e25e", "metadata": {"aucs": [0.8534432994135027, 0.8756343173644918, 0.8452605927811566, 0.8395667686994819, 0.8724298852281134, 0.853045296763377, 0.8287764049697715, 0.8595305678749524, 0.8482899900187852, 0.7167838164183593, 0.7690417919550859, 0.7378460651037184, 0.7399983743988011, 0.7639306476755843, 0.7718779893492878, 0.7085010079573096, 0.7693169240840063, 0.7815200655304709, 0.16498924766329814, 0.14914189751487905, 0.16523628199950835, 0.16400217773910375, 0.14421337520289013, 0.1525304675930822, 0.13427249359559734, 0.17038361563841442, 0.1654696908916261, 0.10519836617215095, 0.11236957709098461, 0.1298731473740039, 0.11529206855011165, 0.15012706851776692, 0.10394835585956175, 0.1298517977733027, 0.16926605245338155, 0.12752699072378204, 0.9769505793797887, 0.9615830274313982, 0.9879560233024054, 0.9539293736406194, 0.9790612713651793, 0.982949568995977, 0.9713736083384726, 0.974407482538196, 0.9741511232271142, 0.45963050863063115, 0.4749970476554497, 0.43047676807344004, 0.4691204356077008, 0.4228710464037807, 0.48114246126387983, 0.4919897521324337, 0.42586840619689703, 0.363087953124579, 0.5832665893678695, 0.7023835941199338, 0.7029279189936752, 0.6674936790458954, 0.20104137569117797, 0.18488053280426953, 0.32840630635211043, 0.19842174946233126, 0.21451184968860693, 0.1841270560936733, 0.20556697289692183, 0.19230136138216536, 0.17903086191199347, 0.2019860727906535, 0.27072541520581916, 0.20587127223650392, 0.44830569435612255, 0.20433823120328432, 0.19717759605706064, 0.15140956338288125, 0.17868296788234816, 0.4352466123734241, 0.17123015484960413, 0.22444973071067453, 0.24453854387562546, 0.20095481310488772, 0.23458737664393225, 0.0012192954669588696, 0.09474237585840817, 0.010708154600533648, 0.05415047439450482, 9.999999999998899e-05, 0.01520438935680013, 0.004114343085522942, 0.03660794491258801, 0.0944196566961788, 0.03447775160208366, 0.09744476067828856, 0.08671819162222039, 0.1025562915471131, 0.016772614512207795, 0.0401989780523887, 0.12745418955922738, 0.1255895283718539, 0.04577961424922172, 0.08949043286605252, 0.0014536429749075763, 0.07988706269315826, 0.08106342374475484, 0.02783177382795876, 0.04609071126281106, 0.08622034353184371, 0.03165948612637437, 0.05786612267411162, 0.12148063555836319, 0.22963753947210475, 0.1387814734398991, 0.17700426657399893, 0.16940330703735484, 0.14656269850042258, 0.1618009590943762, 0.13627812287411312, 0.10332824585547751, 0.5116754905055654, 0.5375239118424123, 0.5555107726011879, 0.5628293980936621, 0.5517942144326056, 0.5410820899846202, 0.5403186166336247, 0.5555826802179366, 0.5327473501302643, 0.08533435510884924, 0.09387053129548695, 0.10209174000770616, 0.10607151616777066, 0.08825697143177735, 0.09309317211683155, 0.08372238991710312, 0.11679448885554122, 0.10686680637403001, 0.14534025036132792, 0.11625865001536007, 0.11402213779414683, 0.12395469843740392, 0.15443997096678708, 0.10807770325929811, 0.10656547162419938, 0.11684381715704406, 0.11060741471900415, 0.2777557869497326, 0.41318521080955406, 0.2759981354755847, 0.3634751453324524, 0.3315670258291953, 0.2906569880098676, 0.3715202946577152, 0.5114512897287589, 0.3863749512087171, 0.21646278222142368, 0.22751701718962258, 0.28437024085448737, 0.2922663754114032, 0.2420796188332821, 0.26645725313611723, 0.22821695531103492, 0.2383715829707146, 0.3562348026706541, 0.21374851666231776, 0.19585201028090526, 0.19153428445919018, 0.17793457933731094, 0.18208551672792705, 0.22286654569186104, 0.19248457530021512, 0.1847163382796162, 0.17117678838411066, 0.2066739367280418, 0.32906021712119415, 0.6643860071219914, 0.4041629092846979, 0.23177623925317115, 0.21293787803276576, 0.2044542491507314, 0.18583511626400195, 0.23857914583212525, 0.17496034830740625, 0.8460756409007538, 0.8025697433279531, 0.8595896207389401, 0.6450602625934589, 0.8153203905338865, 0.81819808409723, 0.14197168200396115, 0.3987161529091793, 0.6987780645787169, 0.12524438742673305, 0.6873301709164981, 0.5036310235253316, 0.1664594637529916, 0.20671133803657915, 0.10436369788938049, 0.15492715403275814, 0.5222045977148471, 0.1773408181965591, 0.16656230953693996, 0.16034211028614864, 0.15242665325398008, 0.16275179258757289, 0.15959209832417398, 0.17058706541373014, 0.1656621563127697, 0.1634753026715352, 0.0719058922963115, 0.06852230752941268, 0.06872501942457598, 0.06939416393580755, 0.07540986406886474, 0.08209455161552814, 0.0686639306917386, 0.08239036031621394, 0.08944761902935261]}, "mutation_prompt": null}
{"id": "10d46fb3-9588-4f61-ac4a-253821de6159", "solution": "class ImprovedNovelOppositionBasedDEImproved(NovelOppositionBasedDEImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget) * (1 + np.random.normal(0, 1) * 0.1)  # Dynamic adjustment of F with budget and adaptive mutation scale\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "ImprovedNovelOppositionBasedDEImproved", "description": "Introducing a dynamic adaptive mutation scale based on function evaluations to improve local exploration-exploitation balance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f4d3f4f5-4146-4581-8ef6-da65e93fe2a7", "metadata": {"aucs": [0.8534432994135027, 0.8756343173644918, 0.8452605927811566, 0.8395667686994819, 0.8724298852281134, 0.853045296763377, 0.8287764049697715, 0.8595305678749524, 0.8482899900187852, 0.7167838164183593, 0.7690417919550859, 0.7378460651037184, 0.7399983743988011, 0.7639306476755843, 0.7718779893492878, 0.7085010079573096, 0.7693169240840063, 0.7815200655304709, 0.16498924766329814, 0.14914189751487905, 0.16523628199950835, 0.16400217773910375, 0.14421337520289013, 0.1525304675930822, 0.13427249359559734, 0.17038361563841442, 0.1654696908916261, 0.10519836617215095, 0.11236957709098461, 0.1298731473740039, 0.11529206855011165, 0.15012706851776692, 0.10394835585956175, 0.1298517977733027, 0.16926605245338155, 0.12752699072378204, 0.9769505793797887, 0.9615830274313982, 0.9879560233024054, 0.9539293736406194, 0.9790612713651793, 0.982949568995977, 0.9713736083384726, 0.974407482538196, 0.9741511232271142, 0.45963050863063115, 0.4749970476554497, 0.43047676807344004, 0.4691204356077008, 0.4228710464037807, 0.48114246126387983, 0.4919897521324337, 0.42586840619689703, 0.363087953124579, 0.5832665893678695, 0.7023835941199338, 0.7029279189936752, 0.6674936790458954, 0.20104137569117797, 0.18488053280426953, 0.32840630635211043, 0.19842174946233126, 0.21451184968860693, 0.1841270560936733, 0.20556697289692183, 0.19230136138216536, 0.17903086191199347, 0.2019860727906535, 0.27072541520581916, 0.20587127223650392, 0.44830569435612255, 0.20433823120328432, 0.19717759605706064, 0.15140956338288125, 0.17868296788234816, 0.4352466123734241, 0.17123015484960413, 0.22444973071067453, 0.24453854387562546, 0.20095481310488772, 0.23458737664393225, 0.0012192954669588696, 0.09474237585840817, 0.010708154600533648, 0.05415047439450482, 9.999999999998899e-05, 0.01520438935680013, 0.004114343085522942, 0.03660794491258801, 0.0944196566961788, 0.03447775160208366, 0.09744476067828856, 0.08671819162222039, 0.1025562915471131, 0.016772614512207795, 0.0401989780523887, 0.12745418955922738, 0.1255895283718539, 0.04577961424922172, 0.08949043286605252, 0.0014536429749075763, 0.07988706269315826, 0.08106342374475484, 0.02783177382795876, 0.04609071126281106, 0.08622034353184371, 0.03165948612637437, 0.05786612267411162, 0.12148063555836319, 0.22963753947210475, 0.1387814734398991, 0.17700426657399893, 0.16940330703735484, 0.14656269850042258, 0.1618009590943762, 0.13627812287411312, 0.10332824585547751, 0.5116754905055654, 0.5375239118424123, 0.5555107726011879, 0.5628293980936621, 0.5517942144326056, 0.5410820899846202, 0.5403186166336247, 0.5555826802179366, 0.5327473501302643, 0.08533435510884924, 0.09387053129548695, 0.10209174000770616, 0.10607151616777066, 0.08825697143177735, 0.09309317211683155, 0.08372238991710312, 0.11679448885554122, 0.10686680637403001, 0.14534025036132792, 0.11625865001536007, 0.11402213779414683, 0.12395469843740392, 0.15443997096678708, 0.10807770325929811, 0.10656547162419938, 0.11684381715704406, 0.11060741471900415, 0.2777557869497326, 0.41318521080955406, 0.2759981354755847, 0.3634751453324524, 0.3315670258291953, 0.2906569880098676, 0.3715202946577152, 0.5114512897287589, 0.3863749512087171, 0.21646278222142368, 0.22751701718962258, 0.28437024085448737, 0.2922663754114032, 0.2420796188332821, 0.26645725313611723, 0.22821695531103492, 0.2383715829707146, 0.3562348026706541, 0.21374851666231776, 0.19585201028090526, 0.19153428445919018, 0.17793457933731094, 0.18208551672792705, 0.22286654569186104, 0.19248457530021512, 0.1847163382796162, 0.17117678838411066, 0.2066739367280418, 0.32906021712119415, 0.6643860071219914, 0.4041629092846979, 0.23177623925317115, 0.21293787803276576, 0.2044542491507314, 0.18583511626400195, 0.23857914583212525, 0.17496034830740625, 0.8460756409007538, 0.8025697433279531, 0.8595896207389401, 0.6450602625934589, 0.8153203905338865, 0.81819808409723, 0.14197168200396115, 0.3987161529091793, 0.6987780645787169, 0.12524438742673305, 0.6873301709164981, 0.5036310235253316, 0.1664594637529916, 0.20671133803657915, 0.10436369788938049, 0.15492715403275814, 0.5222045977148471, 0.1773408181965591, 0.16656230953693996, 0.16034211028614864, 0.15242665325398008, 0.16275179258757289, 0.15959209832417398, 0.17058706541373014, 0.1656621563127697, 0.1634753026715352, 0.0719058922963115, 0.06852230752941268, 0.06872501942457598, 0.06939416393580755, 0.07540986406886474, 0.08209455161552814, 0.0686639306917386, 0.08239036031621394, 0.08944761902935261]}, "mutation_prompt": null}
{"id": "f2b04e5d-f53f-4345-acf1-ba44a135c620", "solution": "class BoundaryHandledImprovedNovelOppositionBasedDEImproved(ImprovedNovelOppositionBasedDEImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def clip_to_bounds(solution):\n            return np.clip(solution, -5.0, 5.0)\n\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = clip_to_bounds(population[np.argmin([func(ind) for ind in population])])\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget) * (1 + np.random.normal(0, 1) * 0.1)  # Dynamic adjustment of F with budget and adaptive mutation scale\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = clip_to_bounds(population[a] + F * (population[b] - population[c]))\n                elif strategy == 1:\n                    mutant = clip_to_bounds(population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution))\n                elif strategy == 2:\n                    mutant = clip_to_bounds(best_solution + F * (population[b] - population[c]))\n                elif strategy == 3:\n                    mutant = clip_to_bounds(best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c]))\n                elif strategy == 4:\n                    mutant = clip_to_bounds(population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c]))\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = clip_to_bounds(best_solution + F * (opposite - population[a]))\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = clip_to_bounds(best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c]))\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = clip_to_bounds(population[np.argmin([func(ind) for ind in population])])\n\n        return best_solution", "name": "BoundaryHandledImprovedNovelOppositionBasedDEImproved", "description": "Introducing boundary handling to prevent solutions from going beyond the search space limits.", "configspace": "", "generation": 93, "fitness": 0.2812461420661197, "feedback": "The algorithm BoundaryHandledImprovedNovelOppositionBasedDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "f4d3f4f5-4146-4581-8ef6-da65e93fe2a7", "metadata": {"aucs": [0.8463790828753912, 0.8599818148404117, 0.8573257186298289, 0.8881995016103635, 0.8782371879030325, 0.1882333970181429, 0.8624875266676226, 0.864505440289147, 0.8590035461393712, 0.7585568483885818, 0.765605151003031, 0.7411625623560634, 0.7434505321392675, 0.7857451548242694, 0.7462109592454689, 0.7682354641268423, 0.05327255084407101, 0.7827965564708972, 0.1274032759038557, 0.12093739299392725, 0.5662398157488118, 0.12299891449189837, 0.17389410042700804, 0.153233989077311, 0.1135788312260283, 0.7069983609819853, 0.16433859631436987, 0.1315585392412022, 0.1371464965651945, 0.14824016545355534, 0.12172821866126438, 0.1558289258389699, 0.10459531882758422, 0.10569581922291471, 0.14981760776947883, 0.11263036138756466, 0.9882178618281316, 0.9656114505974053, 0.9891578628734519, 0.9750846747938745, 0.9773222465913216, 0.9829045026225219, 0.9598085962988488, 0.9733688611216302, 0.9647828623183202, 0.05830873453631502, 0.05926884081730355, 0.537844991373448, 0.1485947069680027, 0.3922130497030727, 0.44264089477276536, 0.45697973405976844, 0.46591875346851663, 0.08560182194935584, 0.21058395344514425, 0.1368267498620267, 0.20927958293198057, 0.2732221633975853, 0.6044658007240163, 0.20744500357950701, 0.3062426377743044, 0.1141500984263839, 0.2211469300978426, 0.1987487842249287, 0.10626736885095378, 0.2014048054614649, 0.12269071683133825, 0.0846820523382823, 0.12282727490879952, 0.12850697369765585, 0.24445851551232722, 0.21319186549550606, 0.29475065694796243, 0.12579472684244997, 0.29641324087688015, 0.4352466123734241, 0.1911965871271496, 0.20799199032110638, 0.21233717604756097, 0.12323895513522598, 0.2593483940262876, 0.06249795040225037, 0.015403453617576224, 0.07645295875279157, 0.07012512291080042, 0.0007218095938543723, 9.999999999998899e-05, 0.011373383473432641, 0.022223179107087154, 0.00030483610175646714, 0.06939136835959692, 0.0316834437296275, 0.08315572763040524, 0.08667165953850398, 0.17104504577793778, 0.025851483872260883, 0.13735570209655634, 0.10387539938365076, 0.05632876637981621, 0.056015825710350686, 0.036386745082128025, 0.11583184071014097, 0.07603183398126989, 0.07793539955082018, 0.06559285313532437, 0.09642694942918784, 0.06516043910617941, 0.05722529055709491, 0.15035173551150693, 0.09718977736577383, 9.999999999998899e-05, 0.24624810185293222, 0.15652479355872206, 0.19201214739439354, 0.04700990645183589, 0.04638010559214234, 0.12954961134313803, 0.574850097898197, 0.574123580030068, 0.5136114049324135, 0.5535764522350713, 0.533658425919121, 0.6145064881359605, 0.5053067509915656, 0.5387388807094613, 0.5788396645072713, 0.1102406651887684, 0.106886977359258, 0.08368203227382931, 0.09257051591352339, 0.11393748366910572, 0.09946684435829889, 0.10612581503410345, 0.10278967464455413, 0.06833644200298039, 0.1449000042821149, 0.15048772221456153, 0.27996600274663974, 0.13105246376801627, 0.11474259508074136, 0.13123097619244617, 0.13191595799918798, 0.14619962004639298, 0.1323734859707293, 0.3349709294912655, 0.3664790006401405, 0.44253924519206034, 0.293227164914584, 0.3062417204117044, 0.23486634088716551, 0.40232759859710676, 0.4159676401352187, 0.20644616843478703, 0.20254053817309448, 0.21820055218976764, 0.21829569514357094, 0.20237638633507138, 0.14232262387799965, 0.2609544084432911, 0.2733583625635597, 0.27809073977467946, 0.23543613706309263, 0.21374851666231776, 0.1795776924215694, 0.18348451746624705, 0.18063023775642084, 0.17933550965379563, 0.17545267694316657, 0.17452820924244694, 0.17627286535562503, 0.1846499209025142, 0.21434252273540144, 0.1977088658774313, 0.6004048630197751, 0.18568047861895254, 0.19810133806546393, 0.6112107481777325, 0.21596512258834977, 0.21608020205884226, 0.2340221706972806, 0.1993979282067294, 0.15642422946852896, 0.2636904965241843, 0.8012027900904873, 0.17262783004169435, 0.14093363772558354, 0.7696979871619437, 0.200036326781438, 0.16277256012350683, 0.41771713828818524, 0.5546463396476198, 0.11529004704821821, 0.539253434937702, 0.1632754938903641, 0.2085958345815615, 0.10350757083533368, 0.1472789379272308, 0.10653440793275948, 0.17744219230957026, 0.1764002245907732, 0.17098980997084634, 0.1705430189673952, 0.18626714304952707, 0.16858833089869463, 0.1700698013308447, 0.16591532987097757, 0.17906152871538084, 0.07813677319102075, 0.08079203738087093, 0.07099686885087464, 0.08686182303762435, 0.06848838360353349, 0.07796944835837172, 0.0723362100550623, 0.07972883556502308, 0.076862764188805]}, "mutation_prompt": null}
{"id": "30b0c272-f042-45c8-be92-d9a407d1d90d", "solution": "class ImprovedNovelOppositionBasedDEImproved(NovelOppositionBasedDEImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget) * (1 + np.random.normal(0, 1) * 0.1)  # Dynamic adjustment of F with budget and adaptive mutation scale\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "ImprovedNovelOppositionBasedDEImproved", "description": "Introducing a dynamic adaptive mutation scale based on function evaluations to improve local exploration-exploitation balance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f4d3f4f5-4146-4581-8ef6-da65e93fe2a7", "metadata": {"aucs": [0.8534432994135027, 0.8756343173644918, 0.8452605927811566, 0.8395667686994819, 0.8724298852281134, 0.853045296763377, 0.8287764049697715, 0.8595305678749524, 0.8482899900187852, 0.7167838164183593, 0.7690417919550859, 0.7378460651037184, 0.7399983743988011, 0.7639306476755843, 0.7718779893492878, 0.7085010079573096, 0.7693169240840063, 0.7815200655304709, 0.16498924766329814, 0.14914189751487905, 0.16523628199950835, 0.16400217773910375, 0.14421337520289013, 0.1525304675930822, 0.13427249359559734, 0.17038361563841442, 0.1654696908916261, 0.10519836617215095, 0.11236957709098461, 0.1298731473740039, 0.11529206855011165, 0.15012706851776692, 0.10394835585956175, 0.1298517977733027, 0.16926605245338155, 0.12752699072378204, 0.9769505793797887, 0.9615830274313982, 0.9879560233024054, 0.9539293736406194, 0.9790612713651793, 0.982949568995977, 0.9713736083384726, 0.974407482538196, 0.9741511232271142, 0.45963050863063115, 0.4749970476554497, 0.43047676807344004, 0.4691204356077008, 0.4228710464037807, 0.48114246126387983, 0.4919897521324337, 0.42586840619689703, 0.363087953124579, 0.5832665893678695, 0.7023835941199338, 0.7029279189936752, 0.6674936790458954, 0.20104137569117797, 0.18488053280426953, 0.32840630635211043, 0.19842174946233126, 0.21451184968860693, 0.1841270560936733, 0.20556697289692183, 0.19230136138216536, 0.17903086191199347, 0.2019860727906535, 0.27072541520581916, 0.20587127223650392, 0.44830569435612255, 0.20433823120328432, 0.19717759605706064, 0.15140956338288125, 0.17868296788234816, 0.4352466123734241, 0.17123015484960413, 0.22444973071067453, 0.24453854387562546, 0.20095481310488772, 0.23458737664393225, 0.0012192954669588696, 0.09474237585840817, 0.010708154600533648, 0.05415047439450482, 9.999999999998899e-05, 0.01520438935680013, 0.004114343085522942, 0.03660794491258801, 0.0944196566961788, 0.03447775160208366, 0.09744476067828856, 0.08671819162222039, 0.1025562915471131, 0.016772614512207795, 0.0401989780523887, 0.12745418955922738, 0.1255895283718539, 0.04577961424922172, 0.08949043286605252, 0.0014536429749075763, 0.07988706269315826, 0.08106342374475484, 0.02783177382795876, 0.04609071126281106, 0.08622034353184371, 0.03165948612637437, 0.05786612267411162, 0.12148063555836319, 0.22963753947210475, 0.1387814734398991, 0.17700426657399893, 0.16940330703735484, 0.14656269850042258, 0.1618009590943762, 0.13627812287411312, 0.10332824585547751, 0.5116754905055654, 0.5375239118424123, 0.5555107726011879, 0.5628293980936621, 0.5517942144326056, 0.5410820899846202, 0.5403186166336247, 0.5555826802179366, 0.5327473501302643, 0.08533435510884924, 0.09387053129548695, 0.10209174000770616, 0.10607151616777066, 0.08825697143177735, 0.09309317211683155, 0.08372238991710312, 0.11679448885554122, 0.10686680637403001, 0.14534025036132792, 0.11625865001536007, 0.11402213779414683, 0.12395469843740392, 0.15443997096678708, 0.10807770325929811, 0.10656547162419938, 0.11684381715704406, 0.11060741471900415, 0.2777557869497326, 0.41318521080955406, 0.2759981354755847, 0.3634751453324524, 0.3315670258291953, 0.2906569880098676, 0.3715202946577152, 0.5114512897287589, 0.3863749512087171, 0.21646278222142368, 0.22751701718962258, 0.28437024085448737, 0.2922663754114032, 0.2420796188332821, 0.26645725313611723, 0.22821695531103492, 0.2383715829707146, 0.3562348026706541, 0.21374851666231776, 0.19585201028090526, 0.19153428445919018, 0.17793457933731094, 0.18208551672792705, 0.22286654569186104, 0.19248457530021512, 0.1847163382796162, 0.17117678838411066, 0.2066739367280418, 0.32906021712119415, 0.6643860071219914, 0.4041629092846979, 0.23177623925317115, 0.21293787803276576, 0.2044542491507314, 0.18583511626400195, 0.23857914583212525, 0.17496034830740625, 0.8460756409007538, 0.8025697433279531, 0.8595896207389401, 0.6450602625934589, 0.8153203905338865, 0.81819808409723, 0.14197168200396115, 0.3987161529091793, 0.6987780645787169, 0.12524438742673305, 0.6873301709164981, 0.5036310235253316, 0.1664594637529916, 0.20671133803657915, 0.10436369788938049, 0.15492715403275814, 0.5222045977148471, 0.1773408181965591, 0.16656230953693996, 0.16034211028614864, 0.15242665325398008, 0.16275179258757289, 0.15959209832417398, 0.17058706541373014, 0.1656621563127697, 0.1634753026715352, 0.0719058922963115, 0.06852230752941268, 0.06872501942457598, 0.06939416393580755, 0.07540986406886474, 0.08209455161552814, 0.0686639306917386, 0.08239036031621394, 0.08944761902935261]}, "mutation_prompt": null}
{"id": "79dfb9a7-c02e-47ed-849a-7d18dbc58ca4", "solution": "class ImprovedNovelOppositionBasedDEImproved(NovelOppositionBasedDEImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget) * (1 + np.random.normal(0, 1) * 0.1)  # Dynamic adjustment of F with budget and adaptive mutation scale\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "ImprovedNovelOppositionBasedDEImproved", "description": "Introducing a dynamic adaptive mutation scale based on function evaluations to improve local exploration-exploitation balance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f4d3f4f5-4146-4581-8ef6-da65e93fe2a7", "metadata": {"aucs": [0.8534432994135027, 0.8756343173644918, 0.8452605927811566, 0.8395667686994819, 0.8724298852281134, 0.853045296763377, 0.8287764049697715, 0.8595305678749524, 0.8482899900187852, 0.7167838164183593, 0.7690417919550859, 0.7378460651037184, 0.7399983743988011, 0.7639306476755843, 0.7718779893492878, 0.7085010079573096, 0.7693169240840063, 0.7815200655304709, 0.16498924766329814, 0.14914189751487905, 0.16523628199950835, 0.16400217773910375, 0.14421337520289013, 0.1525304675930822, 0.13427249359559734, 0.17038361563841442, 0.1654696908916261, 0.10519836617215095, 0.11236957709098461, 0.1298731473740039, 0.11529206855011165, 0.15012706851776692, 0.10394835585956175, 0.1298517977733027, 0.16926605245338155, 0.12752699072378204, 0.9769505793797887, 0.9615830274313982, 0.9879560233024054, 0.9539293736406194, 0.9790612713651793, 0.982949568995977, 0.9713736083384726, 0.974407482538196, 0.9741511232271142, 0.45963050863063115, 0.4749970476554497, 0.43047676807344004, 0.4691204356077008, 0.4228710464037807, 0.48114246126387983, 0.4919897521324337, 0.42586840619689703, 0.363087953124579, 0.5832665893678695, 0.7023835941199338, 0.7029279189936752, 0.6674936790458954, 0.20104137569117797, 0.18488053280426953, 0.32840630635211043, 0.19842174946233126, 0.21451184968860693, 0.1841270560936733, 0.20556697289692183, 0.19230136138216536, 0.17903086191199347, 0.2019860727906535, 0.27072541520581916, 0.20587127223650392, 0.44830569435612255, 0.20433823120328432, 0.19717759605706064, 0.15140956338288125, 0.17868296788234816, 0.4352466123734241, 0.17123015484960413, 0.22444973071067453, 0.24453854387562546, 0.20095481310488772, 0.23458737664393225, 0.0012192954669588696, 0.09474237585840817, 0.010708154600533648, 0.05415047439450482, 9.999999999998899e-05, 0.01520438935680013, 0.004114343085522942, 0.03660794491258801, 0.0944196566961788, 0.03447775160208366, 0.09744476067828856, 0.08671819162222039, 0.1025562915471131, 0.016772614512207795, 0.0401989780523887, 0.12745418955922738, 0.1255895283718539, 0.04577961424922172, 0.08949043286605252, 0.0014536429749075763, 0.07988706269315826, 0.08106342374475484, 0.02783177382795876, 0.04609071126281106, 0.08622034353184371, 0.03165948612637437, 0.05786612267411162, 0.12148063555836319, 0.22963753947210475, 0.1387814734398991, 0.17700426657399893, 0.16940330703735484, 0.14656269850042258, 0.1618009590943762, 0.13627812287411312, 0.10332824585547751, 0.5116754905055654, 0.5375239118424123, 0.5555107726011879, 0.5628293980936621, 0.5517942144326056, 0.5410820899846202, 0.5403186166336247, 0.5555826802179366, 0.5327473501302643, 0.08533435510884924, 0.09387053129548695, 0.10209174000770616, 0.10607151616777066, 0.08825697143177735, 0.09309317211683155, 0.08372238991710312, 0.11679448885554122, 0.10686680637403001, 0.14534025036132792, 0.11625865001536007, 0.11402213779414683, 0.12395469843740392, 0.15443997096678708, 0.10807770325929811, 0.10656547162419938, 0.11684381715704406, 0.11060741471900415, 0.2777557869497326, 0.41318521080955406, 0.2759981354755847, 0.3634751453324524, 0.3315670258291953, 0.2906569880098676, 0.3715202946577152, 0.5114512897287589, 0.3863749512087171, 0.21646278222142368, 0.22751701718962258, 0.28437024085448737, 0.2922663754114032, 0.2420796188332821, 0.26645725313611723, 0.22821695531103492, 0.2383715829707146, 0.3562348026706541, 0.21374851666231776, 0.19585201028090526, 0.19153428445919018, 0.17793457933731094, 0.18208551672792705, 0.22286654569186104, 0.19248457530021512, 0.1847163382796162, 0.17117678838411066, 0.2066739367280418, 0.32906021712119415, 0.6643860071219914, 0.4041629092846979, 0.23177623925317115, 0.21293787803276576, 0.2044542491507314, 0.18583511626400195, 0.23857914583212525, 0.17496034830740625, 0.8460756409007538, 0.8025697433279531, 0.8595896207389401, 0.6450602625934589, 0.8153203905338865, 0.81819808409723, 0.14197168200396115, 0.3987161529091793, 0.6987780645787169, 0.12524438742673305, 0.6873301709164981, 0.5036310235253316, 0.1664594637529916, 0.20671133803657915, 0.10436369788938049, 0.15492715403275814, 0.5222045977148471, 0.1773408181965591, 0.16656230953693996, 0.16034211028614864, 0.15242665325398008, 0.16275179258757289, 0.15959209832417398, 0.17058706541373014, 0.1656621563127697, 0.1634753026715352, 0.0719058922963115, 0.06852230752941268, 0.06872501942457598, 0.06939416393580755, 0.07540986406886474, 0.08209455161552814, 0.0686639306917386, 0.08239036031621394, 0.08944761902935261]}, "mutation_prompt": null}
{"id": "4360c75c-6934-4118-9722-f4a58a15d7a6", "solution": "class ImprovedNovelOppositionBasedDEImproved(NovelOppositionBasedDEImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget) * (1 + np.random.normal(0, 1) * 0.1)  # Dynamic adjustment of F with budget and adaptive mutation scale\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "ImprovedNovelOppositionBasedDEImproved", "description": "Introducing a dynamic adaptive mutation scale based on function evaluations to improve local exploration-exploitation balance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f4d3f4f5-4146-4581-8ef6-da65e93fe2a7", "metadata": {"aucs": [0.8534432994135027, 0.8756343173644918, 0.8452605927811566, 0.8395667686994819, 0.8724298852281134, 0.853045296763377, 0.8287764049697715, 0.8595305678749524, 0.8482899900187852, 0.7167838164183593, 0.7690417919550859, 0.7378460651037184, 0.7399983743988011, 0.7639306476755843, 0.7718779893492878, 0.7085010079573096, 0.7693169240840063, 0.7815200655304709, 0.16498924766329814, 0.14914189751487905, 0.16523628199950835, 0.16400217773910375, 0.14421337520289013, 0.1525304675930822, 0.13427249359559734, 0.17038361563841442, 0.1654696908916261, 0.10519836617215095, 0.11236957709098461, 0.1298731473740039, 0.11529206855011165, 0.15012706851776692, 0.10394835585956175, 0.1298517977733027, 0.16926605245338155, 0.12752699072378204, 0.9769505793797887, 0.9615830274313982, 0.9879560233024054, 0.9539293736406194, 0.9790612713651793, 0.982949568995977, 0.9713736083384726, 0.974407482538196, 0.9741511232271142, 0.45963050863063115, 0.4749970476554497, 0.43047676807344004, 0.4691204356077008, 0.4228710464037807, 0.48114246126387983, 0.4919897521324337, 0.42586840619689703, 0.363087953124579, 0.5832665893678695, 0.7023835941199338, 0.7029279189936752, 0.6674936790458954, 0.20104137569117797, 0.18488053280426953, 0.32840630635211043, 0.19842174946233126, 0.21451184968860693, 0.1841270560936733, 0.20556697289692183, 0.19230136138216536, 0.17903086191199347, 0.2019860727906535, 0.27072541520581916, 0.20587127223650392, 0.44830569435612255, 0.20433823120328432, 0.19717759605706064, 0.15140956338288125, 0.17868296788234816, 0.4352466123734241, 0.17123015484960413, 0.22444973071067453, 0.24453854387562546, 0.20095481310488772, 0.23458737664393225, 0.0012192954669588696, 0.09474237585840817, 0.010708154600533648, 0.05415047439450482, 9.999999999998899e-05, 0.01520438935680013, 0.004114343085522942, 0.03660794491258801, 0.0944196566961788, 0.03447775160208366, 0.09744476067828856, 0.08671819162222039, 0.1025562915471131, 0.016772614512207795, 0.0401989780523887, 0.12745418955922738, 0.1255895283718539, 0.04577961424922172, 0.08949043286605252, 0.0014536429749075763, 0.07988706269315826, 0.08106342374475484, 0.02783177382795876, 0.04609071126281106, 0.08622034353184371, 0.03165948612637437, 0.05786612267411162, 0.12148063555836319, 0.22963753947210475, 0.1387814734398991, 0.17700426657399893, 0.16940330703735484, 0.14656269850042258, 0.1618009590943762, 0.13627812287411312, 0.10332824585547751, 0.5116754905055654, 0.5375239118424123, 0.5555107726011879, 0.5628293980936621, 0.5517942144326056, 0.5410820899846202, 0.5403186166336247, 0.5555826802179366, 0.5327473501302643, 0.08533435510884924, 0.09387053129548695, 0.10209174000770616, 0.10607151616777066, 0.08825697143177735, 0.09309317211683155, 0.08372238991710312, 0.11679448885554122, 0.10686680637403001, 0.14534025036132792, 0.11625865001536007, 0.11402213779414683, 0.12395469843740392, 0.15443997096678708, 0.10807770325929811, 0.10656547162419938, 0.11684381715704406, 0.11060741471900415, 0.2777557869497326, 0.41318521080955406, 0.2759981354755847, 0.3634751453324524, 0.3315670258291953, 0.2906569880098676, 0.3715202946577152, 0.5114512897287589, 0.3863749512087171, 0.21646278222142368, 0.22751701718962258, 0.28437024085448737, 0.2922663754114032, 0.2420796188332821, 0.26645725313611723, 0.22821695531103492, 0.2383715829707146, 0.3562348026706541, 0.21374851666231776, 0.19585201028090526, 0.19153428445919018, 0.17793457933731094, 0.18208551672792705, 0.22286654569186104, 0.19248457530021512, 0.1847163382796162, 0.17117678838411066, 0.2066739367280418, 0.32906021712119415, 0.6643860071219914, 0.4041629092846979, 0.23177623925317115, 0.21293787803276576, 0.2044542491507314, 0.18583511626400195, 0.23857914583212525, 0.17496034830740625, 0.8460756409007538, 0.8025697433279531, 0.8595896207389401, 0.6450602625934589, 0.8153203905338865, 0.81819808409723, 0.14197168200396115, 0.3987161529091793, 0.6987780645787169, 0.12524438742673305, 0.6873301709164981, 0.5036310235253316, 0.1664594637529916, 0.20671133803657915, 0.10436369788938049, 0.15492715403275814, 0.5222045977148471, 0.1773408181965591, 0.16656230953693996, 0.16034211028614864, 0.15242665325398008, 0.16275179258757289, 0.15959209832417398, 0.17058706541373014, 0.1656621563127697, 0.1634753026715352, 0.0719058922963115, 0.06852230752941268, 0.06872501942457598, 0.06939416393580755, 0.07540986406886474, 0.08209455161552814, 0.0686639306917386, 0.08239036031621394, 0.08944761902935261]}, "mutation_prompt": null}
{"id": "fd0508ca-7379-4824-a69e-7d63432bba06", "solution": "class ImprovedDynamicPopSizeOppositionBasedDEImproved(ImprovedNovelOppositionBasedDEImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.NP = 10  # Initial population size\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget) * (1 + np.random.normal(0, 1) * 0.1)  # Dynamic adjustment of F with budget and adaptive mutation scale\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "ImprovedDynamicPopSizeOppositionBasedDEImproved", "description": "Implementing a dynamic population size adjustment strategy to enhance diversity and exploration.", "configspace": "", "generation": 97, "fitness": 0.3158838165266071, "feedback": "The algorithm ImprovedDynamicPopSizeOppositionBasedDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "f4d3f4f5-4146-4581-8ef6-da65e93fe2a7", "metadata": {"aucs": [0.8534432994135027, 0.8756343173644918, 0.8452605927811566, 0.8395667686994819, 0.8724298852281134, 0.853045296763377, 0.8287764049697715, 0.8595305678749524, 0.8482899900187852, 0.7167838164183593, 0.7690417919550859, 0.7378460651037184, 0.7399983743988011, 0.7639306476755843, 0.7718779893492878, 0.7085010079573096, 0.7693169240840063, 0.7815200655304709, 0.16498924766329814, 0.14914189751487905, 0.16523628199950835, 0.16400217773910375, 0.14421337520289013, 0.1525304675930822, 0.13427249359559734, 0.17038361563841442, 0.1654696908916261, 0.10519836617215095, 0.11236957709098461, 0.1298731473740039, 0.11529206855011165, 0.15012706851776692, 0.10394835585956175, 0.1298517977733027, 0.16926605245338155, 0.12752699072378204, 0.9769505793797887, 0.9615830274313982, 0.9879560233024054, 0.9539293736406194, 0.9790612713651793, 0.982949568995977, 0.9713736083384726, 0.974407482538196, 0.9741511232271142, 0.45963050863063115, 0.4749970476554497, 0.43047676807344004, 0.4691204356077008, 0.4228710464037807, 0.48114246126387983, 0.4919897521324337, 0.42586840619689703, 0.363087953124579, 0.5832665893678695, 0.7023835941199338, 0.7029279189936752, 0.6674936790458954, 0.20104137569117797, 0.18488053280426953, 0.32840630635211043, 0.19842174946233126, 0.21451184968860693, 0.1841270560936733, 0.20556697289692183, 0.19230136138216536, 0.17903086191199347, 0.2019860727906535, 0.27072541520581916, 0.20587127223650392, 0.44830569435612255, 0.20433823120328432, 0.19717759605706064, 0.15140956338288125, 0.17868296788234816, 0.4352466123734241, 0.17123015484960413, 0.22444973071067453, 0.24453854387562546, 0.20095481310488772, 0.23458737664393225, 0.0012192954669588696, 0.09474237585840817, 0.010708154600533648, 0.05415047439450482, 9.999999999998899e-05, 0.01520438935680013, 0.004114343085522942, 0.03660794491258801, 0.0944196566961788, 0.03447775160208366, 0.09744476067828856, 0.08671819162222039, 0.1025562915471131, 0.016772614512207795, 0.0401989780523887, 0.12745418955922738, 0.1255895283718539, 0.04577961424922172, 0.08949043286605252, 0.0014536429749075763, 0.07988706269315826, 0.08106342374475484, 0.02783177382795876, 0.04609071126281106, 0.08622034353184371, 0.03165948612637437, 0.05786612267411162, 0.12148063555836319, 0.22963753947210475, 0.1387814734398991, 0.17700426657399893, 0.16940330703735484, 0.14656269850042258, 0.1618009590943762, 0.13627812287411312, 0.10332824585547751, 0.5116754905055654, 0.5375239118424123, 0.5555107726011879, 0.5628293980936621, 0.5517942144326056, 0.5410820899846202, 0.5403186166336247, 0.5555826802179366, 0.5327473501302643, 0.08533435510884924, 0.09387053129548695, 0.10209174000770616, 0.10607151616777066, 0.08825697143177735, 0.09309317211683155, 0.08372238991710312, 0.11679448885554122, 0.10686680637403001, 0.14534025036132792, 0.11625865001536007, 0.11402213779414683, 0.12395469843740392, 0.15443997096678708, 0.10807770325929811, 0.10656547162419938, 0.11684381715704406, 0.11060741471900415, 0.2777557869497326, 0.41318521080955406, 0.2759981354755847, 0.3634751453324524, 0.3315670258291953, 0.2906569880098676, 0.3715202946577152, 0.5114512897287589, 0.3863749512087171, 0.21646278222142368, 0.22751701718962258, 0.28437024085448737, 0.2922663754114032, 0.2420796188332821, 0.26645725313611723, 0.22821695531103492, 0.2383715829707146, 0.3562348026706541, 0.21374851666231776, 0.19585201028090526, 0.19153428445919018, 0.17793457933731094, 0.18208551672792705, 0.22286654569186104, 0.19248457530021512, 0.1847163382796162, 0.17117678838411066, 0.2066739367280418, 0.32906021712119415, 0.6643860071219914, 0.4041629092846979, 0.23177623925317115, 0.21293787803276576, 0.2044542491507314, 0.18583511626400195, 0.23857914583212525, 0.17496034830740625, 0.8460756409007538, 0.8025697433279531, 0.8595896207389401, 0.6450602625934589, 0.8153203905338865, 0.81819808409723, 0.14197168200396115, 0.3987161529091793, 0.6987780645787169, 0.12524438742673305, 0.6873301709164981, 0.5036310235253316, 0.1664594637529916, 0.20671133803657915, 0.10436369788938049, 0.15492715403275814, 0.5222045977148471, 0.1773408181965591, 0.16656230953693996, 0.16034211028614864, 0.15242665325398008, 0.16275179258757289, 0.15959209832417398, 0.17058706541373014, 0.1656621563127697, 0.1634753026715352, 0.0719058922963115, 0.06852230752941268, 0.06872501942457598, 0.06939416393580755, 0.07540986406886474, 0.08209455161552814, 0.0686639306917386, 0.08239036031621394, 0.08944761902935261]}, "mutation_prompt": null}
{"id": "4eea08fd-956f-40ec-9bb8-17d201a26f04", "solution": "class HybridOppositionDESA(NovelOppositionBasedDEImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6, 7])  # Updated mutation strategies including the hybrid approach\n\n                F = self.F * np.exp(-_ / self.budget) * (1 + np.random.normal(0, 1) * 0.1)  # Dynamic adjustment of F with budget and adaptive mutation scale\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                elif strategy == 6:\n                    mutant = best_solution + F * (population[b] - population[c]) + F * (best_solution - population[a])\n                else:  # Hybrid mutation strategy combining DE with SA for enhanced exploration-exploitation\n                    sa_mutant = population[i] + np.random.normal(0, 1, self.dim)  # Simulated annealing component\n                    mutant = sa_mutant if func(sa_mutant) < func(population[i]) else population[i]\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "HybridOppositionDESA", "description": "Introducing a hybrid mutation strategy combining differential evolution with simulated annealing for enhanced exploration-exploitation balance.", "configspace": "", "generation": 98, "fitness": 0.29514460785559943, "feedback": "The algorithm HybridOppositionDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "f4d3f4f5-4146-4581-8ef6-da65e93fe2a7", "metadata": {"aucs": [0.8637307218086008, 0.8416465860927878, 0.8284464802670097, 0.8349887720878174, 0.8406133175675476, 0.8270196568327556, 0.8381003358643266, 0.830139424316465, 0.8673282890446622, 0.7555519573289107, 0.6840896986925974, 0.7113001201611441, 0.7475813002011242, 0.7128843657732364, 0.6776936752500855, 0.7268307447053239, 0.7728460499857204, 0.7051448749104761, 0.15724748499943653, 0.6593305149640827, 0.1650105682324211, 0.12599261215280144, 0.14673612811757797, 0.15487715603327756, 0.1443409434227062, 0.12876061162431474, 0.1349910970657906, 0.13777116270804235, 0.11612041321902633, 0.09188791478989966, 0.15238948611303094, 0.12747967037251817, 0.1010988950022651, 0.11591347957967468, 0.13161062034005155, 0.12887042643383173, 0.9787699489545598, 0.977733916329559, 0.9814180733049391, 0.9830402267719354, 0.977330682788691, 0.9779506937639841, 0.9702649682166369, 0.9772344312587546, 0.9551384927168326, 0.33369630314825927, 0.4296267556367259, 0.28513081182656996, 0.45050967061808767, 0.3966600643543907, 0.39968167777064956, 0.420344899499717, 0.32238188640781795, 0.2776849483477144, 0.33059498335468807, 0.227799859799114, 0.23915911169638449, 0.3458062558825943, 0.2488066122062237, 0.3254363418367161, 0.21515918611625406, 0.16655789883362526, 0.2046133669766973, 0.15239765567574082, 0.1260064409756464, 0.1783627782849717, 0.12131404673637736, 0.1226736598807715, 0.22977591215590232, 0.16169892867654256, 0.15745076535467384, 0.12665382194762298, 0.12817289761631423, 0.2140449726728063, 0.14175784286085802, 0.21654170784231752, 0.11144535925100008, 0.23333160634259953, 0.18857302092110362, 0.16332720281226232, 0.1981915747350731, 0.0027181555151971626, 0.004074986277973425, 0.0025039432024109853, 0.014899889671980415, 0.06143021526694448, 0.00454088569684008, 0.018221394727828577, 0.004045226233526766, 9.999999999998899e-05, 0.051520144478165664, 0.0346386016789354, 0.06280832374952172, 0.07288893135827601, 0.033331236986558155, 0.041804863727168406, 0.0769015825353776, 0.03028247938675699, 0.12377709625143729, 0.01799375770418643, 0.08304507845082221, 0.049424098557200535, 0.011771306225768385, 0.006330666724908451, 0.05181105885535031, 0.03923610202516592, 0.04326972400598006, 0.05587363165741421, 0.15728456361971443, 0.1346560694038761, 0.10734375150310094, 0.13244394979009866, 0.22134589115915893, 0.16517683509851577, 0.16428629772652548, 0.1437658071893102, 0.18940054697571174, 0.5549361403151207, 0.5278831470269507, 0.545002817945647, 0.4849410720285676, 0.5422485136804622, 0.4996319387468028, 0.555629156827769, 0.5147671198964845, 0.5154484045191152, 0.09427598309633467, 0.08613982250174901, 0.08216161568079261, 0.0977902330079169, 0.09031836098827262, 0.07094038686226345, 0.07631284589178744, 0.07564098024179888, 0.08228082578177232, 0.14269751619158833, 0.13328127157794767, 0.13005019921963246, 0.1467988527076639, 0.14476373436016787, 0.12022129789687408, 0.13204674130233907, 0.13346390444352074, 0.11527324016793294, 0.3855316048787768, 0.31636849878631423, 0.30322566577953947, 0.34137833996518896, 0.396560333308159, 0.2709187638688382, 0.3636761987597058, 0.39112445184062883, 0.30593662032420743, 0.24102797519380836, 0.21717308393868684, 0.2700804794309817, 0.307160793420606, 0.2667527848900516, 0.28304178217020404, 0.19943037116189133, 0.20409943363052951, 0.24067686129306187, 0.1993412280743604, 0.17971397066161154, 0.17509624370261878, 0.16098123480808413, 0.19049396633729454, 0.20324482940443966, 0.1978541365110249, 0.16760423281009806, 0.1736617082767723, 0.2216512243389649, 0.22641355543884834, 0.35279416507227745, 0.2161176119178443, 0.23266267475861324, 0.18680378526264918, 0.683317046865447, 0.6912787863936221, 0.1947200622139943, 0.5461206640134857, 0.21675260877043812, 0.680063173706285, 0.8238343547113478, 0.19321318260845144, 0.7886676927759229, 0.7502584342626839, 0.6734891934583271, 0.15132538317165833, 0.7368478319878409, 0.5148170370664467, 0.6572185289021779, 0.18866347923030102, 0.16742973516199067, 0.20824179970643286, 0.10352993694591517, 0.5462626918417939, 0.16537680275761701, 0.16185844867856158, 0.16932245263549517, 0.1684042943104922, 0.18159103725130077, 0.17414436860996718, 0.1932852120854276, 0.16728691458482003, 0.16289077455507817, 0.1605000976674864, 0.07486057808228053, 0.062165875036963136, 0.06569249342788686, 0.07042768706820401, 0.09081631420170833, 0.07218729606428931, 0.08348874037319365, 0.07384272168115091, 0.08193191837928315]}, "mutation_prompt": null}
{"id": "4427e9ba-6a03-451a-9e24-9d31d1be0afa", "solution": "class ImprovedNovelOppositionBasedDEImproved(NovelOppositionBasedDEImproved):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def generate_population():\n            return np.random.uniform(-5.0, 5.0, size=(self.NP, self.dim))\n\n        population = generate_population()\n        best_solution = population[np.argmin([func(ind) for ind in population])]\n        \n        for _ in range(self.budget):\n            trial_population = []\n            for i in range(self.NP):\n                idxs = [idx for idx in range(self.NP) if idx != i]\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                strategy = np.random.choice([0, 1, 2, 3, 4, 5, 6])  # Updated mutation strategies including the novel opposition-based mutation\n\n                F = self.F * np.exp(-_ / self.budget) * (1 + np.random.normal(0, 1) * 0.1)  # Dynamic adjustment of F with budget and adaptive mutation scale\n                CR = self.CR * np.exp(-_ / self.budget)  # Dynamic adjustment of CR with budget\n                \n                if strategy == 0:\n                    mutant = population[a] + F * (population[b] - population[c])\n                elif strategy == 1:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution)\n                elif strategy == 2:\n                    mutant = best_solution + F * (population[b] - population[c])\n                elif strategy == 3:\n                    mutant = best_solution + F * (population[a] - best_solution) + F * (population[b] - population[c])\n                elif strategy == 4:\n                    mutant = population[a] + F * (population[b] - population[c]) + F * (population[a] - best_solution) + F * (best_solution - population[c])\n                elif strategy == 5:\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a])\n                else:  # New mutation strategy for opposition-based learning with adaptive control parameters\n                    opposite = 2 * best_solution - population[i]\n                    mutant = best_solution + F * (opposite - population[a]) + F * (population[b] - best_solution) + F * (best_solution - population[c])\n\n                j_rand = np.random.randint(self.dim)\n                trial_ind = np.array([mutant[j] if np.random.rand() < CR or j == j_rand else population[i, j] for j in range(self.dim)])\n\n                if func(trial_ind) < func(population[i]):\n                    trial_population.append(trial_ind)\n                else:\n                    trial_population.append(population[i])\n\n            population = np.array(trial_population)\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n\n        return best_solution", "name": "ImprovedNovelOppositionBasedDEImproved", "description": "Introducing a dynamic adaptive mutation scale based on function evaluations to improve local exploration-exploitation balance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f4d3f4f5-4146-4581-8ef6-da65e93fe2a7", "metadata": {"aucs": [0.8534432994135027, 0.8756343173644918, 0.8452605927811566, 0.8395667686994819, 0.8724298852281134, 0.853045296763377, 0.8287764049697715, 0.8595305678749524, 0.8482899900187852, 0.7167838164183593, 0.7690417919550859, 0.7378460651037184, 0.7399983743988011, 0.7639306476755843, 0.7718779893492878, 0.7085010079573096, 0.7693169240840063, 0.7815200655304709, 0.16498924766329814, 0.14914189751487905, 0.16523628199950835, 0.16400217773910375, 0.14421337520289013, 0.1525304675930822, 0.13427249359559734, 0.17038361563841442, 0.1654696908916261, 0.10519836617215095, 0.11236957709098461, 0.1298731473740039, 0.11529206855011165, 0.15012706851776692, 0.10394835585956175, 0.1298517977733027, 0.16926605245338155, 0.12752699072378204, 0.9769505793797887, 0.9615830274313982, 0.9879560233024054, 0.9539293736406194, 0.9790612713651793, 0.982949568995977, 0.9713736083384726, 0.974407482538196, 0.9741511232271142, 0.45963050863063115, 0.4749970476554497, 0.43047676807344004, 0.4691204356077008, 0.4228710464037807, 0.48114246126387983, 0.4919897521324337, 0.42586840619689703, 0.363087953124579, 0.5832665893678695, 0.7023835941199338, 0.7029279189936752, 0.6674936790458954, 0.20104137569117797, 0.18488053280426953, 0.32840630635211043, 0.19842174946233126, 0.21451184968860693, 0.1841270560936733, 0.20556697289692183, 0.19230136138216536, 0.17903086191199347, 0.2019860727906535, 0.27072541520581916, 0.20587127223650392, 0.44830569435612255, 0.20433823120328432, 0.19717759605706064, 0.15140956338288125, 0.17868296788234816, 0.4352466123734241, 0.17123015484960413, 0.22444973071067453, 0.24453854387562546, 0.20095481310488772, 0.23458737664393225, 0.0012192954669588696, 0.09474237585840817, 0.010708154600533648, 0.05415047439450482, 9.999999999998899e-05, 0.01520438935680013, 0.004114343085522942, 0.03660794491258801, 0.0944196566961788, 0.03447775160208366, 0.09744476067828856, 0.08671819162222039, 0.1025562915471131, 0.016772614512207795, 0.0401989780523887, 0.12745418955922738, 0.1255895283718539, 0.04577961424922172, 0.08949043286605252, 0.0014536429749075763, 0.07988706269315826, 0.08106342374475484, 0.02783177382795876, 0.04609071126281106, 0.08622034353184371, 0.03165948612637437, 0.05786612267411162, 0.12148063555836319, 0.22963753947210475, 0.1387814734398991, 0.17700426657399893, 0.16940330703735484, 0.14656269850042258, 0.1618009590943762, 0.13627812287411312, 0.10332824585547751, 0.5116754905055654, 0.5375239118424123, 0.5555107726011879, 0.5628293980936621, 0.5517942144326056, 0.5410820899846202, 0.5403186166336247, 0.5555826802179366, 0.5327473501302643, 0.08533435510884924, 0.09387053129548695, 0.10209174000770616, 0.10607151616777066, 0.08825697143177735, 0.09309317211683155, 0.08372238991710312, 0.11679448885554122, 0.10686680637403001, 0.14534025036132792, 0.11625865001536007, 0.11402213779414683, 0.12395469843740392, 0.15443997096678708, 0.10807770325929811, 0.10656547162419938, 0.11684381715704406, 0.11060741471900415, 0.2777557869497326, 0.41318521080955406, 0.2759981354755847, 0.3634751453324524, 0.3315670258291953, 0.2906569880098676, 0.3715202946577152, 0.5114512897287589, 0.3863749512087171, 0.21646278222142368, 0.22751701718962258, 0.28437024085448737, 0.2922663754114032, 0.2420796188332821, 0.26645725313611723, 0.22821695531103492, 0.2383715829707146, 0.3562348026706541, 0.21374851666231776, 0.19585201028090526, 0.19153428445919018, 0.17793457933731094, 0.18208551672792705, 0.22286654569186104, 0.19248457530021512, 0.1847163382796162, 0.17117678838411066, 0.2066739367280418, 0.32906021712119415, 0.6643860071219914, 0.4041629092846979, 0.23177623925317115, 0.21293787803276576, 0.2044542491507314, 0.18583511626400195, 0.23857914583212525, 0.17496034830740625, 0.8460756409007538, 0.8025697433279531, 0.8595896207389401, 0.6450602625934589, 0.8153203905338865, 0.81819808409723, 0.14197168200396115, 0.3987161529091793, 0.6987780645787169, 0.12524438742673305, 0.6873301709164981, 0.5036310235253316, 0.1664594637529916, 0.20671133803657915, 0.10436369788938049, 0.15492715403275814, 0.5222045977148471, 0.1773408181965591, 0.16656230953693996, 0.16034211028614864, 0.15242665325398008, 0.16275179258757289, 0.15959209832417398, 0.17058706541373014, 0.1656621563127697, 0.1634753026715352, 0.0719058922963115, 0.06852230752941268, 0.06872501942457598, 0.06939416393580755, 0.07540986406886474, 0.08209455161552814, 0.0686639306917386, 0.08239036031621394, 0.08944761902935261]}, "mutation_prompt": null}
