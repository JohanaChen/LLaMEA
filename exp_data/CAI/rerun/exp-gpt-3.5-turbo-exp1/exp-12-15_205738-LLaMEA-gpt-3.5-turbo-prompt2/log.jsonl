{"id": "6682933d-e2a8-42f5-9393-f57bf489e3bc", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # SA update\n                new_pos = swarm[i] + np.random.normal(0, curr_temp, self.dim)\n                new_pos = np.clip(new_pos, lb, ub)\n                new_fitness = func(new_pos)\n\n                if new_fitness < fitness or np.random.rand() < np.exp((fitness - new_fitness) / curr_temp):\n                    swarm[i] = new_pos.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "HybridPSOSA", "description": "An innovative hybrid algorithm that combines Particle Swarm Optimization (PSO) with Simulated Annealing to efficiently explore the search space and exploit promising regions while avoiding local optima.", "configspace": "", "generation": 0, "fitness": 0.22247499042875737, "feedback": "The algorithm HybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7089415204195217, 0.7333326870423496, 0.8131937639516917, 0.32224135129266873, 0.7036164339796872, 0.5799583069017915, 0.7639734854795621, 0.7707363830109326, 0.6374487439809282, 0.0037028511802371655, 0.013401590587848844, 0.009196497342133791, 0.08076592596505672, 9.999999999998899e-05, 0.0052276960136652395, 0.0017071879539111157, 0.018260150517492413, 0.003392076881472361, 0.08300555530108122, 0.13967213462881667, 0.11318550719455611, 0.10802240700266375, 0.07664941154588889, 0.10380479444617907, 0.08447632059019439, 0.14460455684609208, 0.09636779763161007, 0.09833840527515259, 0.12196346898372012, 0.07167078357829793, 0.10281385737144699, 0.07812703299917956, 0.09301809305334263, 0.06389076973905139, 0.0862027819196981, 0.08622503438303775, 0.9923563233235478, 0.998940722606904, 0.9716763175679701, 0.993438995852743, 0.9939546102544256, 0.9941459240921412, 0.9967025648215649, 0.993814139535754, 0.9969111502920889, 0.27402877551751637, 0.5243440008996472, 0.30983211317361214, 0.31139732610397486, 0.22885010039584663, 0.2172612834125217, 0.23295583416909793, 0.1914089402245649, 0.22450690403897122, 0.23068126461173377, 0.21148895816227953, 0.4710493293798258, 0.26779168818671917, 0.15786340488071038, 0.20655825198109445, 0.3268942986051554, 0.21931502621407462, 0.396094202609266, 0.160518365140085, 0.2233878791761268, 0.23936008636754413, 0.0803188911968904, 0.2169618943334094, 0.0617420822649708, 0.2921210726447778, 0.11494143368327592, 0.15043593895714202, 0.22758872616805736, 0.11510391365677153, 0.11897852294757194, 0.2079475962564854, 0.1490940049446683, 0.19215535606872125, 0.2756706947393536, 0.1916782281421765, 0.15318121096050674, 0.05647825996049183, 0.0001973396371315328, 0.007013184261596694, 0.030118023416999096, 0.04732403612589442, 0.01628665522448447, 0.012975738352488997, 9.999999999998899e-05, 0.007546668182903504, 0.11398648244667542, 0.09935110353141385, 0.20872038761330147, 0.1757842219517015, 0.07343249475500757, 0.1531218673988265, 0.26819929751281457, 0.10660901066999506, 0.11024280188149549, 0.029591573867137067, 0.06456575955662447, 0.09437691094697898, 0.07997772200620745, 0.06777600220608437, 0.08046794613371455, 0.09747659168045752, 0.13391343696444669, 0.06855946641892174, 0.09758977452024842, 0.2661667426520471, 0.2149879203751791, 0.06306863081208536, 0.012907936430848532, 0.12639564123820424, 0.1793063517543787, 0.03746471241817906, 0.09597852693870446, 0.4340984420899038, 0.4248504733455105, 0.4809330257037311, 0.44220707266998993, 0.46618058238873794, 0.47776463455137175, 0.45741813488044425, 0.4412121596281884, 0.44208664860924474, 0.12408732601427985, 0.06415349849510243, 0.14259160566368523, 0.09929582141637816, 0.09347844983604015, 0.08520136566581205, 0.08381230480936852, 0.1399332521932105, 0.0716593373086496, 0.1500544486777715, 0.1757670514307531, 0.14209036475706993, 0.17146491432397248, 0.19180260310206843, 0.1523522995818647, 0.13941361658290985, 0.15095737342574755, 0.16687553268358313, 0.2918442472737536, 0.24458137779783728, 0.25344053054264193, 0.2668772604048222, 0.24438319304670397, 0.2385235708913137, 0.22639143066553202, 0.24799022101322055, 0.22725892774691459, 0.19992065228678024, 0.2341079868941358, 0.19361875106158555, 0.3612142759055681, 0.1780691644276905, 0.24879676102057136, 0.14968871160402575, 0.18383470300696858, 0.18562311952918742, 0.19734435567557107, 0.22805323275291067, 0.17451822777215953, 0.22946090911089945, 0.1849319051931102, 0.2191158924918163, 0.19045878235204905, 0.23984632512661563, 0.19787973338030984, 0.1723131855699841, 0.17435123228292437, 0.17810321522120098, 0.1764983411971922, 0.17969125048912427, 0.18917862206608527, 0.21001286795271723, 0.17428388262496464, 0.1739136341099996, 0.14702858541112418, 0.1457555574609396, 0.14680305781989722, 0.1570081496432374, 0.18691205703152514, 0.1672661965166553, 0.15748675024364633, 0.16197785500087847, 0.1599243908696375, 0.5881484159427715, 0.14345251066346532, 0.13901436172919512, 0.15148831624545833, 0.13611344822180094, 0.15738778687518895, 0.18162703101718436, 0.17772589043478837, 0.1834604510628155, 0.17472394749917441, 0.1741125668587361, 0.17079174138002673, 0.17913041043417965, 0.17752926678786551, 0.1777289080210741, 0.1850938581885262, 0.18134300258023517, 0.17271510536803836, 0.07378735859619068, 0.09183415998407651, 0.06810159505286917, 0.1013019650901047, 0.08247527437172031, 0.0950535855899658, 0.09975172949239586, 0.0808913277150557, 0.07704556368996018]}, "mutation_prompt": null}
{"id": "a25fa6ef-65dc-4549-825d-28b5131ecb58", "solution": "class HybridPSOSAImproved(HybridPSOSA):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, inertia_min=0.4, inertia_max=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n        \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            inertia_weight = self.inertia_max - ((_ + 1) / self.max_iterations) * (self.inertia_max - self.inertia_min)\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = inertia_weight * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                new_pos = swarm[i] + np.random.normal(0, curr_temp, self.dim)\n                new_pos = np.clip(new_pos, lb, ub)\n                new_fitness = func(new_pos)\n\n                if new_fitness < fitness or np.random.rand() < np.exp((fitness - new_fitness) / curr_temp):\n                    swarm[i] = new_pos.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "HybridPSOSAImproved", "description": "Improved HybridPSOSA algorithm with adaptive inertia weight to enhance exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.16460644725423504, "feedback": "The algorithm HybridPSOSAImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "6682933d-e2a8-42f5-9393-f57bf489e3bc", "metadata": {"aucs": [0.30205327231921164, 0.2847103167910088, 0.28408958357266223, 0.3201293003747223, 0.3070037777769117, 0.3587381939163694, 0.2661135842179605, 0.28967696137239685, 0.31827390284863644, 0.04205340004334723, 0.02869311808898345, 0.002160921082603129, 0.0036950229527332734, 0.011006031025192042, 0.0010479685596644917, 0.007957160857069545, 0.015096733054794309, 0.015961764028637693, 0.07497824804989706, 0.09939239485902707, 0.12678879091186723, 0.08093621286366692, 0.09390034199341901, 0.08792107829309681, 0.08120945829260273, 0.0991097266148252, 0.06944384308182616, 0.08387969039686938, 0.07305311314864993, 0.046821988311975704, 0.07075368707614638, 0.06497715102193147, 0.0718773031192581, 0.06861912273435067, 0.05077261525715038, 0.060930634109839565, 0.9923389639955115, 0.998940722606904, 0.9786086369346824, 0.993438995852743, 0.9939546102544256, 0.9941459240921412, 0.9967025648215649, 0.993814139535754, 0.9969111502920889, 0.14291510500589133, 0.14240644916476453, 0.14182101937355496, 0.14395084284168203, 0.15336289745290888, 0.12863140469652712, 0.15654477896707353, 0.14807325114685466, 0.1353410516712915, 0.1777849532998118, 0.15979084162342028, 0.29038935666163623, 0.21474225546965686, 0.16164553348995925, 0.18826211751823663, 0.14839028192052717, 0.1672873901881674, 0.24201311057903618, 0.14160898386086085, 0.10191217913838191, 0.013849810965688492, 0.14393652224667042, 0.16439841646101105, 0.029447149168690734, 0.2132555936486854, 0.1490881730236393, 0.13599360570976893, 0.14317404674674183, 0.05564358094626043, 0.049680938332941516, 0.12297220514531215, 0.12630806728911048, 0.19954920623287142, 0.11632127408079829, 0.17576347839200812, 0.10706869196925561, 9.999999999998899e-05, 0.00843472534972245, 9.999999999998899e-05, 0.004723253825185569, 0.007980546109875086, 0.004836187139748094, 0.017346322381671775, 0.005908478872959866, 0.05942749705863737, 0.05441992325245826, 0.08828102639810498, 0.04913462610214936, 0.11255948767158919, 0.01344770210420354, 0.045512053563851795, 0.12000392775028013, 0.05629365336770975, 0.04592632570648769, 0.01133334081504489, 0.0358577914324536, 0.025046192847768767, 0.0020039935948885645, 9.999999999998899e-05, 0.02446455207838172, 0.02349263468417795, 0.04086535175718964, 0.019011356716751804, 0.062110472325122124, 0.13628258195816711, 0.03794988108197961, 0.03169979495956543, 0.02189805334421413, 0.12039525731789291, 0.09037894161937987, 0.044065910976784695, 0.06191308713867638, 0.21526105851695898, 0.27659140410526695, 0.28370614604696287, 0.28695494259018095, 0.23532204338551665, 0.24060528748209886, 0.32514885113279945, 0.2843011607952103, 0.28063734701920184, 0.06514457519245209, 0.0656182666620927, 0.08427364576759866, 0.08157187638056729, 0.07302987741236411, 0.07575504885242756, 0.09297174108873985, 0.052820468658440256, 0.07223583807521572, 0.13910406660260866, 0.13894123163294114, 0.1422915252134781, 0.15243595299621537, 0.1666239441894637, 0.18339593749636263, 0.13181428466720824, 0.1567596310672088, 0.13611939202267953, 0.17243388832561135, 0.18252646520002913, 0.20869688380490103, 0.1859554593965056, 0.1542936965493984, 0.207820342252646, 0.1936191991484213, 0.2061542177677067, 0.1758080474664715, 0.16374268875749753, 0.1513718958235386, 0.1796452087190823, 0.16040909756880828, 0.14447547367495994, 0.1434395978326959, 0.18143411832770917, 0.194945348708232, 0.177225736097687, 0.17532045338790725, 0.1722844321941368, 0.18294675461354737, 0.16338401702468786, 0.20071324734082352, 0.18090812063526407, 0.18157318266764522, 0.17961687316278874, 0.16730782604690808, 0.1742076139065979, 0.17079098497696799, 0.16730514144068187, 0.20152876658214158, 0.1896331532464829, 0.18912543874724408, 0.18387334321571713, 0.1811667426396686, 0.19181867992471946, 0.1409519492746889, 0.12799580553170342, 0.1480180864780436, 0.15257245721456603, 0.16653888686673035, 0.1439832650337719, 0.1273936834242777, 0.14991224210828424, 0.14489303352464666, 0.14896359253622682, 0.13921332349219828, 0.1252268319430716, 0.1261544576275091, 0.130279724588225, 0.13548851214802815, 0.16753614646607917, 0.16205725539635119, 0.17139438121682837, 0.17695809876428337, 0.17023191872107146, 0.16430623742377615, 0.17683421351260864, 0.1859000085894129, 0.16937166778394153, 0.17671058550017837, 0.16768987079288322, 0.1712176695584765, 0.06788273999237249, 0.061995719779178615, 0.06613095909812472, 0.06610593459845548, 0.05610516649761599, 0.07106419667199315, 0.06980630457777748, 0.06276387245654591, 0.06909450835885944]}, "mutation_prompt": null}
{"id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "solution": "import numpy as np\n\nclass HybridPSOSA_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "HybridPSOSA_DE", "description": "Enhance HybridPSOSA by incorporating Differential Evolution (DE) for global exploration and exploitation.", "configspace": "", "generation": 2, "fitness": 0.3636651728567654, "feedback": "The algorithm HybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "6682933d-e2a8-42f5-9393-f57bf489e3bc", "metadata": {"aucs": [0.8707055654675772, 0.8766003748189569, 0.8763484093466505, 0.8678436576335489, 0.8517254337236138, 0.8516521195230213, 0.8739246935247962, 0.8473996383000417, 0.8709467071302934, 0.6719864664758288, 0.5845089947537789, 0.7412608817262458, 0.7197305939627947, 0.04603962724984845, 9.999999999998899e-05, 0.7438022654721446, 0.5852779035463651, 0.516036016573904, 0.1433837002536409, 0.12644297118753456, 0.1258233171035148, 0.14669114145596418, 0.0913935873499333, 0.17810908917555968, 0.10698137555605047, 0.11716569772809982, 0.07670963236512252, 0.14992296266953942, 0.1210243174318768, 0.10084962025263977, 0.12384301188464464, 0.1107055494884085, 0.10899085653418739, 0.114181166719039, 0.09895333195190836, 0.1068691230573644, 0.9784528983324515, 0.9821987286719702, 0.9706620666967269, 0.9575845360192484, 0.9758832617683164, 0.9695999500308592, 0.9588894579629943, 0.9651791177053786, 0.9681391096917878, 0.6345805175070365, 0.582791994585556, 0.6507143200593988, 0.6513663488920611, 0.6781107563255551, 0.6085910503648931, 0.6081114048413819, 0.4264456940001754, 0.6003613686426139, 0.8812879844225634, 0.23168885231118896, 0.8690695089158691, 0.9023618875066972, 0.8464393171568731, 0.20636449716957395, 0.17801298186368952, 0.23384957439206522, 0.9002512287515373, 0.7079873206417606, 0.2681934653381206, 0.19652275496589378, 0.13246835663733236, 0.6697130324967947, 0.7512755618341376, 0.2767511880357594, 0.45241899432159605, 0.68027679418398, 0.20762935754919842, 0.14045855538747076, 0.13311594315986153, 0.13842560138024074, 0.1312806769175462, 0.17814673112371782, 0.2070066376127, 0.12096790404282043, 0.11402293729299451, 0.09424891153697867, 9.999999999998899e-05, 9.999999999998899e-05, 0.474967433442433, 0.5475677710759244, 0.05377689207131664, 0.1010700371024843, 0.008297481346148938, 0.22822722360120917, 0.21957603408585624, 0.13991937923980602, 0.1825658451742841, 0.1866879091783955, 0.13517657040897302, 0.6700087501601995, 0.8049224089641125, 0.734636131787169, 0.7137106086725011, 0.0755810477510096, 0.40969287301422175, 0.057607880209462725, 0.2610897123250182, 0.1572525609932478, 0.10449950573330646, 0.19256553177483005, 0.11497548997661944, 0.19597320789291173, 0.4041375895899809, 0.04324637934699638, 0.22272977867007482, 0.11397815094865638, 0.5462983524798632, 0.24303430757203792, 0.2969313881485266, 0.10270882867291298, 0.13914496453020275, 0.8189733842643108, 0.80926821119244, 0.8120515737291993, 0.8129458788914379, 0.6154857271374601, 0.6677253187125816, 0.7165952659120668, 0.7546480197555621, 0.7843761337128777, 0.18530709097939912, 0.10486876467590978, 0.08707906912455254, 0.12294292885028624, 0.12329301077772747, 0.12482912069871199, 0.10740279150916754, 0.10311053597829323, 0.14734163496921537, 0.2525704856125215, 0.23517687819498911, 0.15820087710459885, 0.7765156430541466, 0.7661270746583687, 0.20819861703090525, 0.17478690506864225, 0.19204333781824912, 0.27217202503535565, 0.27366702715426383, 0.3329555182222812, 0.4057571358395772, 0.44402881466966393, 0.3044980890499961, 0.49083579628481444, 0.43436062742560255, 0.6003715353482175, 0.5193507408977932, 0.367727352827088, 0.2205113455499318, 0.22114897605013162, 0.253968384424781, 0.20169788307887737, 0.30233012050271246, 0.24603770599129582, 0.3123597499623286, 0.28248915973066524, 0.19712357414784465, 0.19368140611698925, 0.21767098036648802, 0.18347487339929847, 0.1986750692834791, 0.20151385649688336, 0.20527256614909584, 0.20292201011222633, 0.20779896555196586, 0.20737411297287534, 0.20541840201946704, 0.20509221573828174, 0.19855440437513583, 0.2471655367895963, 0.22081810355999054, 0.20602458518786881, 0.2113650690937724, 0.20707285418565713, 0.8809912094363723, 0.12591913564021706, 0.15424205759310294, 0.9124452961302318, 0.1994060757561411, 0.19864363142929897, 0.15615128285334579, 0.12570956926548427, 0.898666921347215, 0.8618000929485052, 0.1567379140894778, 0.2055021265857211, 0.1677312632620791, 0.20844788229925448, 0.2090996368045096, 0.8701532893048799, 0.20071489924549601, 0.2088155363580717, 0.18000187312491323, 0.1793106541972349, 0.18867994255131304, 0.19439427402871357, 0.1712391818476382, 0.17991196019666422, 0.18224533239420815, 0.19252600434747746, 0.18153270466782878, 0.0932020014184165, 0.08417894192217246, 0.09115825332378502, 0.08134583830138586, 0.08453715847823717, 0.11176466312837019, 0.10817667250605123, 0.1175557478205228, 0.0790004930685807]}, "mutation_prompt": null}
{"id": "782738d2-18ba-4ebc-b3da-d1fc1ac51180", "solution": "class DynamicHybridPSOSA_DE(HybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_min=0.2, f_max=0.8, cr_min=0.5, cr_max=1.0):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr)\n        self.f_min = f_min\n        self.f_max = f_max\n        self.cr_min = cr_min\n        self.cr_max = cr_max\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update with dynamic adjustment of mutation and crossover rates\n                f = np.random.uniform(self.f_min, self.f_max)\n                cr = np.random.uniform(self.cr_min, self.cr_max)\n\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "DynamicHybridPSOSA_DE", "description": "Enhance HybridPSOSA by introducing a dynamic adjustment of the mutation and crossover rates in Differential Evolution for improved exploration and exploitation.", "configspace": "", "generation": 3, "fitness": 0.34270127503543896, "feedback": "The algorithm DynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.8495776468051459, 0.8626961503197292, 0.8686996508338811, 0.8579587343934687, 0.8546319026678741, 0.8498278265814481, 0.8711484775445795, 0.861929424980842, 0.867004872122979, 0.7406778189010893, 0.6524579560263486, 0.582630285898891, 0.06526432787084357, 0.5684898835306721, 0.7038711863013105, 0.5450245197859724, 0.7326074868641494, 0.5976627252701331, 0.112708531544499, 0.12063989827626831, 0.13541201368438682, 0.1384072915351522, 0.11760965803869061, 0.11130561079109125, 0.12475206888195933, 0.16290029769199532, 0.1306041738860544, 0.14121763770323592, 0.0933116026140498, 0.08505048858048081, 0.13560505388345212, 0.11359884126833242, 0.1291233259082556, 0.15911785153416835, 0.11050303325238708, 0.10794647061135931, 0.9821077076765978, 0.9811548661481994, 0.9757395486410483, 0.9699383775700595, 0.9557685904986736, 0.966694260109849, 0.9704442149095522, 0.9832117052186277, 0.9695406352651931, 0.6271881887524453, 0.5991300430295705, 0.6418823418071002, 0.6847317460531934, 0.6427619500919999, 0.6561199902234213, 0.6803727558920509, 0.08839875170675837, 0.1402451985284211, 0.3925640798274842, 0.8523274304604466, 0.8577381405761013, 0.205422623679978, 0.8577369258432039, 0.19177450239757055, 0.12560992702339413, 0.8707494515586554, 0.7924314931875762, 0.44425918026458455, 0.22749712037078051, 0.20162272376365986, 0.13034842796960544, 0.19286044135119518, 0.15174466083747107, 0.24160662404783406, 0.1299706706460949, 0.2602586781099028, 0.4879483758211455, 0.2210336579451554, 0.22908351604190536, 0.19173809372680617, 0.13012397066812897, 0.13454245350769212, 0.1336796519209723, 0.12205032989652498, 0.131789231967552, 9.999999999998899e-05, 0.14028625858210964, 0.005074306557297681, 0.03316044701187948, 9.999999999998899e-05, 0.08563017941050788, 0.09995125934586047, 9.999999999998899e-05, 0.3203888284043963, 0.6302798414697407, 0.05609242741232223, 0.646398032912, 0.12014547453107993, 0.26042253793344583, 0.12402161189094218, 0.3559559645036512, 0.3053713895917627, 0.20864526647297144, 0.3037568626764843, 0.033539533677064304, 0.11141760084624097, 0.07483064181414467, 0.1341729405129023, 0.09480615251389701, 0.3121261230631994, 0.1723421772154512, 0.08090520226416353, 0.2443855983802582, 0.2713776854913891, 0.09223271420315682, 0.3933624482682567, 0.5077723708187163, 0.5175385907183265, 0.25820927816453143, 0.2794438746248784, 0.10659910828698282, 0.704904249650109, 0.8054751684254782, 0.6459418393091918, 0.7665350501642373, 0.6512884629472931, 0.6366325368875403, 0.7206883976367289, 0.7266783623832086, 0.6485575765181112, 0.15195850422921064, 0.08216885338264224, 0.0947138986852546, 0.11606911389712038, 0.10942824939646578, 0.12947530646098437, 0.09496773546276815, 0.17427333398276257, 0.09101874775229413, 0.2863255648484997, 0.1440258370311167, 0.2562561508861996, 0.240083657651041, 0.7311640508161172, 0.3066251164786401, 0.23707772507787972, 0.3141897424879897, 0.16762410649165482, 0.40547483404390516, 0.21198197105849392, 0.5062645650884731, 0.1958186796092246, 0.5544655657831379, 0.4068529917904017, 0.5529200908863177, 0.5546905443193212, 0.40143753351289746, 0.3267720534055609, 0.3222990016749572, 0.2559995797457173, 0.3088115042161176, 0.21243395563328926, 0.40570792914375364, 0.259422732830082, 0.28238710907999887, 0.23922284101245073, 0.2132813519002399, 0.2154891003597681, 0.192785894574251, 0.20849485379235455, 0.20487465373432534, 0.24173493110401045, 0.20904672061481877, 0.20867966816619954, 0.1871968177886706, 0.18752971253467676, 0.20664268883265713, 0.22193559277389985, 0.2112834607348787, 0.19518422618947584, 0.16916668662728174, 0.18712542315134795, 0.1797800861961527, 0.1959161806798767, 0.16526343034240287, 0.16740024919035712, 0.1541552414574331, 0.9221806135392504, 0.20088385486987814, 0.1986860981732047, 0.8848453899084798, 0.17007921454431818, 0.16133536560636208, 0.9073002138646162, 0.15538391948121677, 0.1680158439149403, 0.20951917876260717, 0.16817961193736064, 0.20806086277076485, 0.8361579698651074, 0.10452814649200459, 0.8214480076190134, 0.183614812970613, 0.18443226943917712, 0.19314754335199724, 0.1699130605243685, 0.17961940968464984, 0.17662297848675335, 0.1955301302648299, 0.18261944654114248, 0.18471525947883738, 0.08294029842507311, 0.07872484910646216, 0.09373757720193043, 0.07708960016150379, 0.07616268794722814, 0.07554189538851408, 0.08460139720708959, 0.08264294955953555, 0.07827644655688637]}, "mutation_prompt": null}
{"id": "3310a0c2-501a-4f70-a926-1fa8171931b8", "solution": "import numpy as np\n\nclass HybridPSOSA_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "HybridPSOSA_DE", "description": "Enhance HybridPSOSA by incorporating Differential Evolution (DE) for global exploration and exploitation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.8707055654675772, 0.8766003748189569, 0.8763484093466505, 0.8678436576335489, 0.8517254337236138, 0.8516521195230213, 0.8739246935247962, 0.8473996383000417, 0.8709467071302934, 0.6719864664758288, 0.5845089947537789, 0.7412608817262458, 0.7197305939627947, 0.04603962724984845, 9.999999999998899e-05, 0.7438022654721446, 0.5852779035463651, 0.516036016573904, 0.1433837002536409, 0.12644297118753456, 0.1258233171035148, 0.14669114145596418, 0.0913935873499333, 0.17810908917555968, 0.10698137555605047, 0.11716569772809982, 0.07670963236512252, 0.14992296266953942, 0.1210243174318768, 0.10084962025263977, 0.12384301188464464, 0.1107055494884085, 0.10899085653418739, 0.114181166719039, 0.09895333195190836, 0.1068691230573644, 0.9784528983324515, 0.9821987286719702, 0.9706620666967269, 0.9575845360192484, 0.9758832617683164, 0.9695999500308592, 0.9588894579629943, 0.9651791177053786, 0.9681391096917878, 0.6345805175070365, 0.582791994585556, 0.6507143200593988, 0.6513663488920611, 0.6781107563255551, 0.6085910503648931, 0.6081114048413819, 0.4264456940001754, 0.6003613686426139, 0.8812879844225634, 0.23168885231118896, 0.8690695089158691, 0.9023618875066972, 0.8464393171568731, 0.20636449716957395, 0.17801298186368952, 0.23384957439206522, 0.9002512287515373, 0.7079873206417606, 0.2681934653381206, 0.19652275496589378, 0.13246835663733236, 0.6697130324967947, 0.7512755618341376, 0.2767511880357594, 0.45241899432159605, 0.68027679418398, 0.20762935754919842, 0.14045855538747076, 0.13311594315986153, 0.13842560138024074, 0.1312806769175462, 0.17814673112371782, 0.2070066376127, 0.12096790404282043, 0.11402293729299451, 0.09424891153697867, 9.999999999998899e-05, 9.999999999998899e-05, 0.474967433442433, 0.5475677710759244, 0.05377689207131664, 0.1010700371024843, 0.008297481346148938, 0.22822722360120917, 0.21957603408585624, 0.13991937923980602, 0.1825658451742841, 0.1866879091783955, 0.13517657040897302, 0.6700087501601995, 0.8049224089641125, 0.734636131787169, 0.7137106086725011, 0.0755810477510096, 0.40969287301422175, 0.057607880209462725, 0.2610897123250182, 0.1572525609932478, 0.10449950573330646, 0.19256553177483005, 0.11497548997661944, 0.19597320789291173, 0.4041375895899809, 0.04324637934699638, 0.22272977867007482, 0.11397815094865638, 0.5462983524798632, 0.24303430757203792, 0.2969313881485266, 0.10270882867291298, 0.13914496453020275, 0.8189733842643108, 0.80926821119244, 0.8120515737291993, 0.8129458788914379, 0.6154857271374601, 0.6677253187125816, 0.7165952659120668, 0.7546480197555621, 0.7843761337128777, 0.18530709097939912, 0.10486876467590978, 0.08707906912455254, 0.12294292885028624, 0.12329301077772747, 0.12482912069871199, 0.10740279150916754, 0.10311053597829323, 0.14734163496921537, 0.2525704856125215, 0.23517687819498911, 0.15820087710459885, 0.7765156430541466, 0.7661270746583687, 0.20819861703090525, 0.17478690506864225, 0.19204333781824912, 0.27217202503535565, 0.27366702715426383, 0.3329555182222812, 0.4057571358395772, 0.44402881466966393, 0.3044980890499961, 0.49083579628481444, 0.43436062742560255, 0.6003715353482175, 0.5193507408977932, 0.367727352827088, 0.2205113455499318, 0.22114897605013162, 0.253968384424781, 0.20169788307887737, 0.30233012050271246, 0.24603770599129582, 0.3123597499623286, 0.28248915973066524, 0.19712357414784465, 0.19368140611698925, 0.21767098036648802, 0.18347487339929847, 0.1986750692834791, 0.20151385649688336, 0.20527256614909584, 0.20292201011222633, 0.20779896555196586, 0.20737411297287534, 0.20541840201946704, 0.20509221573828174, 0.19855440437513583, 0.2471655367895963, 0.22081810355999054, 0.20602458518786881, 0.2113650690937724, 0.20707285418565713, 0.8809912094363723, 0.12591913564021706, 0.15424205759310294, 0.9124452961302318, 0.1994060757561411, 0.19864363142929897, 0.15615128285334579, 0.12570956926548427, 0.898666921347215, 0.8618000929485052, 0.1567379140894778, 0.2055021265857211, 0.1677312632620791, 0.20844788229925448, 0.2090996368045096, 0.8701532893048799, 0.20071489924549601, 0.2088155363580717, 0.18000187312491323, 0.1793106541972349, 0.18867994255131304, 0.19439427402871357, 0.1712391818476382, 0.17991196019666422, 0.18224533239420815, 0.19252600434747746, 0.18153270466782878, 0.0932020014184165, 0.08417894192217246, 0.09115825332378502, 0.08134583830138586, 0.08453715847823717, 0.11176466312837019, 0.10817667250605123, 0.1175557478205228, 0.0790004930685807]}, "mutation_prompt": null}
{"id": "5190046d-b5bf-419e-a97d-32c5cae7ab87", "solution": "import numpy as np\n\nclass ImprovedHybridPSOSA_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.f = f\n        self.cr = cr\n        self.mutation_rate = 0.5\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update with dynamic mutation\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                \n                if personal_best_val[i] < global_best_val:\n                    self.mutation_rate = 0.9\n                else:\n                    self.mutation_rate = 0.5\n                \n                trial[crossover] = np.clip(mutant[crossover], lb, ub) if np.random.rand() < self.mutation_rate else trial[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "ImprovedHybridPSOSA_DE", "description": "Improve convergence rate by incorporating a dynamic mutation strategy based on individual fitness history.", "configspace": "", "generation": 5, "fitness": 0.32050981996801786, "feedback": "The algorithm ImprovedHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.8940710955971388, 0.8771046918918817, 0.8762325476001515, 0.8789271406358271, 0.8530867371702634, 0.19087659572527205, 0.880405574338951, 0.8764412520640816, 0.873387638277469, 0.565944327861968, 0.41223863591013243, 0.4877903292448589, 0.5632665299771014, 0.042340516602483835, 0.597911814225621, 0.5678664716123647, 0.6646717716742605, 0.5746947511013798, 0.10394668593407586, 0.09985758602928307, 0.1319304547493534, 0.09865003336678602, 0.11231214369625286, 0.11376082766438544, 0.10896789118733319, 0.741689861062748, 0.10927882340614747, 0.08933771620712139, 0.06273457230336787, 0.04603038540282289, 0.12370532986221694, 0.0940326041483972, 0.10785461395561302, 0.10945772653172403, 0.11533603918153734, 0.08178400000676755, 0.9864065474996091, 0.9898815085225872, 0.9762048289794112, 0.9774264106135037, 0.9745353876811405, 0.9679646026781915, 0.9736505282436838, 0.976012556915786, 0.9793064991285005, 0.4708788123678159, 0.6249210658388187, 0.6191532550117704, 0.6802012183016671, 0.740985175077654, 0.7045213556260724, 0.6836725731112101, 0.6700821445327378, 0.6257367183782709, 0.228535678995323, 0.867794924788647, 0.8714249207692355, 0.20369383983480294, 0.1886229352206299, 0.19251705314996326, 0.12244330755843347, 0.15201292926216525, 0.11609567647091767, 0.29414502200923365, 0.5959377823533611, 0.12369494421023497, 0.15275758752182156, 0.566916743379533, 0.6175463843473855, 0.37802725131732406, 0.14850321731369787, 0.26809923674427694, 0.13216316453678478, 0.15989597697307056, 0.12997100465756706, 0.22015467521815468, 0.31188995363328786, 0.1334058828815774, 0.13396130891326252, 0.677671634679514, 0.13390822598344654, 0.1111681496084328, 0.0072708078116165975, 0.25506678737864164, 0.07408546454963894, 0.0228947159483619, 0.04343164273916078, 0.23427871598243, 0.05729035455610809, 0.1025344781184202, 0.1274431323818047, 0.1282006727320577, 0.28079378899328533, 0.12593664742645538, 0.04041664765797082, 0.102220810988506, 0.2949848465935563, 0.26076782628325323, 0.1253130691906743, 0.18573681781708584, 9.999999999998899e-05, 0.0851554548148914, 0.22670237898947487, 0.09588923202788757, 0.1872733602159291, 0.15784798074489337, 0.12880790124741393, 0.07715936642307075, 0.2600060906390731, 0.4019567485975306, 0.5016227408987657, 0.09042346105768595, 0.006518421088885451, 0.06084635746055922, 0.04871921263526002, 0.04790171881166805, 0.08184545115606001, 0.6078785459412865, 0.8349620638885253, 0.7173300799313564, 0.6940944320089601, 0.6125530508816007, 0.7118678741768945, 0.6070501366092652, 0.5874971792082297, 0.7008065348039073, 0.1122843718577422, 0.07161318536981431, 0.06928620044342693, 0.0743114304462924, 0.10817858431377458, 0.07856787284187716, 0.08549631441920413, 0.17954148674756143, 0.0795960051355512, 0.2501793038867147, 0.2082556796884487, 0.1887068963649503, 0.29222190544835025, 0.2811557411320953, 0.19678202504527875, 0.2000569056424475, 0.24187222485834636, 0.17778474697251345, 0.22029031239063002, 0.3672446179325536, 0.4432669541735481, 0.4266730923070934, 0.19325032500586314, 0.2997958289474222, 0.41414466032144204, 0.24927908871776794, 0.19715601402594463, 0.2963352753874202, 0.2729500652057526, 0.2475121066479462, 0.26330232180312363, 0.18005242213912265, 0.2833591840936328, 0.2324501062496772, 0.27308111862143447, 0.18285028275558313, 0.20089996768238805, 0.19082962308690254, 0.18075848411973205, 0.27015287976478874, 0.2059372911724484, 0.32088729271341476, 0.24150438942389263, 0.2010829434363891, 0.20529191397412383, 0.17990212445580378, 0.16573334272341145, 0.18071871420425978, 0.20246873574492197, 0.20973388963020123, 0.20979531324767997, 0.19438241696131453, 0.20006373733419947, 0.22358870919771812, 0.18769655553627596, 0.15759149809091255, 0.15354190359088993, 0.9357190918098004, 0.20111321409379102, 0.19902093830140744, 0.09968412325278808, 0.16978623083150812, 0.20920475656074644, 0.8295168615421393, 0.15653340250116776, 0.5922525694261618, 0.8934489474239599, 0.20949307355268132, 0.2088532009088161, 0.8429126256713156, 0.16862828315398715, 0.7879421950333317, 0.19087120546593428, 0.17511186903545406, 0.19488504955729624, 0.2013384411968333, 0.1742106496671575, 0.20364411153266704, 0.18909316078347016, 0.1824340768639049, 0.18349376959410413, 0.09957442395591876, 0.08975018974300908, 0.10585524697487125, 0.08548312724300866, 0.09941740721082881, 0.08812404583161804, 0.08297758530882726, 0.0774203546111134, 0.09697118256446102]}, "mutation_prompt": null}
{"id": "65e92812-2d94-441b-a6f7-3b78c5d4c164", "solution": "class ImprovedHybridPSOSA_DE(HybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_min=0.2, f_max=0.8, cr_min=0.2, cr_max=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr)\n        self.f_min = f_min\n        self.f_max = f_max\n        self.cr_min = cr_min\n        self.cr_max = cr_max\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update with dynamic parameters\n                f = np.random.uniform(self.f_min, self.f_max)\n                cr = np.random.uniform(self.cr_min, self.cr_max)\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "ImprovedHybridPSOSA_DE", "description": "Improve convergence by dynamically adjusting the DE parameters during optimization.", "configspace": "", "generation": 6, "fitness": 0.33358503774340015, "feedback": "The algorithm ImprovedHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.8567654530658172, 0.8615726831866389, 0.873237323398903, 0.8600902467713379, 0.8635930530597427, 0.4770650960296141, 0.8667463908373668, 0.8764301400250327, 0.8762605547529535, 0.683752092850501, 0.7169972713699628, 0.7241191990555749, 0.7353306282301345, 0.6717136388853064, 0.734760104351939, 0.729892362622337, 0.7368130713170359, 0.7017031437226846, 0.5262710839440993, 0.14058916060961457, 0.12829002182150073, 0.1325896904945254, 0.15840021377285596, 0.10867776843706256, 0.054753494989093654, 0.11565212977772066, 0.10631528535356372, 0.1357849013761977, 0.08023515462682607, 0.10469885420135194, 0.11413887302740455, 0.1104550984436915, 0.13436752265213747, 0.10323957772125869, 0.13344364127472874, 0.1113677743327478, 0.9803365410375495, 0.977732018958992, 0.9774148191648817, 0.978960762381905, 0.9769051434615651, 0.9767679518536316, 0.9793357037771258, 0.9773368081728386, 0.9807575251436297, 0.7060011385323934, 0.6543002746171352, 0.675107753961269, 0.684513192451464, 0.6701467728230994, 0.6757142615981964, 0.6123996049570964, 0.6168816976595985, 0.5756117369993796, 0.24635373448417353, 0.2234253474057586, 0.3299799913286694, 0.2764434548102227, 0.18926753355907966, 0.8834575049365654, 0.12463522523616499, 0.17927114725744775, 0.22818259213273506, 0.24429108583336057, 0.12927450513490224, 0.17589930725143588, 0.7478312117676434, 0.13044012154748796, 0.1296977408250054, 0.27226638948524773, 0.7436396676452285, 0.1962614586834025, 0.18651535623260562, 0.2224693718916495, 0.19891697755482995, 0.16082634397264606, 0.3379828074249044, 0.21013903783188448, 0.19240399638973937, 0.11518080782682427, 0.1327694007358201, 9.999999999998899e-05, 9.999999999998899e-05, 0.15428810797892767, 0.0635222345464399, 0.18110792037922574, 9.999999999998899e-05, 0.13351413114543065, 0.0056118372603115585, 0.07854984629834383, 0.22196185202220675, 0.06720969012139688, 0.26541574238760857, 0.15841538957011125, 0.048159020688937515, 0.1270872640196662, 0.7549942057496517, 0.2048405391867857, 0.05378460824908049, 0.06594516444027776, 0.03559850056261804, 0.052708952267532694, 0.2057319762195523, 0.1877942791732663, 0.07714406359173176, 0.12023740743779832, 0.07005260784410805, 0.22566319759775777, 0.19093557096620484, 0.20232717697684344, 0.17550881272057173, 0.2654988026141605, 0.36150027674062135, 0.152676861267124, 0.08271584707951629, 0.06840010426130594, 0.08994520669720552, 0.7562257596573411, 0.711695670583533, 0.6998227689178329, 0.6240944748512145, 0.6656103192196705, 0.5835753773900101, 0.7501815088968495, 0.6594276353697537, 0.5887184947290883, 0.08681598304669702, 0.14445383707624992, 0.06240231220093151, 0.147559556312011, 0.14939471380414016, 0.1594060430475447, 0.14127392565282404, 0.09237679028363932, 0.1212169121313198, 0.282205218441544, 0.2440543110096366, 0.19079725515350987, 0.2780677385070086, 0.2568401845687427, 0.6400879879959811, 0.24238142538281904, 0.229097870033802, 0.19699268143287452, 0.35960339303350686, 0.41601583027699796, 0.23550018834686393, 0.48635993731907223, 0.5034065299497172, 0.37085603114602794, 0.22734403289914773, 0.4994174969733767, 0.3936254342475619, 0.2996548892937574, 0.24874038731059167, 0.35199831246444624, 0.24684899032683283, 0.1762776078166748, 0.23990350837370988, 0.18976419093192598, 0.23728291415881042, 0.20060672241780508, 0.21410360400900685, 0.21202600093472423, 0.19431174667359463, 0.19185723819431044, 0.18460825509062484, 0.20372142734567955, 0.195864624461084, 0.19385015302991493, 0.20836235544977977, 0.22629120647807455, 0.2492478556910226, 0.7052747850930734, 0.19646360392470585, 0.24502742462734972, 0.2060862663335572, 0.18371001074394755, 0.2491060940954034, 0.22271832321073803, 0.1655676032070763, 0.15709862767389238, 0.15436747535803463, 0.9104309250849519, 0.20132072503748522, 0.1985178161020178, 0.15709626846402802, 0.864745969356784, 0.1533665943888094, 0.8887079813151848, 0.1563082445881433, 0.8993132700806667, 0.2083651581916871, 0.22173582501466926, 0.20867961268232227, 0.7804024218959941, 0.10458390711468324, 0.11252343050018065, 0.18144840355162606, 0.17606508335910476, 0.18272948098683528, 0.20557357624130557, 0.18583336873392642, 0.17266245808023106, 0.18683674779145543, 0.1658305554113263, 0.17045540846441454, 0.09504045513892101, 0.08383635999493455, 0.08462256751443875, 0.09084192185757489, 0.09458998757565384, 0.08509408372263227, 0.1102280280757666, 0.10019406209509674, 0.089433894363806]}, "mutation_prompt": null}
{"id": "a92f549e-faeb-4901-ae38-3eb33532544b", "solution": "class DynamicHybridPSOSA_DE(HybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr)\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        self.num_particles = 15 if func is highly multimodal else 30\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "DynamicHybridPSOSA_DE", "description": "Enhance HybridPSOSA_DE by dynamically adjusting the population size based on function landscape characteristics.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 7, 51, '        self.num_particles = 15 if func is highly multimodal else 30\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 7, 51, '        self.num_particles = 15 if func is highly multimodal else 30\\n'))", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {}, "mutation_prompt": null}
{"id": "fc3a47c6-4de3-462a-8951-9cef2c5defda", "solution": "import numpy as np\n\nclass HybridPSOSA_DE_Levy:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update with Levy flights\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                levy = np.random.standard_t(1.5, self.dim) / np.sqrt(np.abs(velocity[i]) + 1e-10)\n                swarm[i] = np.clip(swarm[i] + velocity[i] + levy, lb, ub)\n\n                # DE update\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "HybridPSOSA_DE_Levy", "description": "Enhance the exploration capability by introducing Levy flights to update particle positions.", "configspace": "", "generation": 8, "fitness": 0.1348039822063043, "feedback": "The algorithm HybridPSOSA_DE_Levy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.21871210784952932, 0.1716335685480329, 0.21751323171350034, 0.22893119664880657, 0.21071393909228098, 0.21222760029785437, 0.19270820472529215, 0.21033969647529205, 0.19048977840475323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05243466133349406, 0.050665111453658596, 0.07499206035447936, 0.05389793708181312, 0.05934323949802223, 0.05737851636258984, 0.06804825339958931, 0.05078928660404525, 0.06218504198581398, 0.04825291962345868, 0.027493338938610612, 0.04279937397749023, 0.033423703616176303, 0.05225039180207236, 0.032873754531465016, 0.034956776938743994, 0.03996336324172667, 0.03544321931234151, 0.9784091759406652, 0.972977600801526, 0.9804327716676253, 0.9722067245910135, 0.9779403794715246, 0.9592312279553034, 0.9855152991387133, 0.9765593787307114, 0.9767450220740452, 0.08798220650025601, 0.10558659510292367, 0.09084151346022895, 0.16746817436980477, 0.10465221795024082, 0.09067717306125433, 0.08536897785822462, 0.11488269909795035, 0.10543357093156591, 0.14219645907241008, 0.13068436771934888, 0.1330139122753401, 0.15935393622387217, 0.15204086124758165, 0.1375254334625724, 0.14980452380908404, 0.14479419942667393, 0.150293402544174, 0.04373138288514655, 0.044928434186567445, 0.025169366298627982, 0.017072268131957058, 0.028197201048331455, 0.02592903336618524, 0.022305943309090748, 0.03996466609967242, 9.999999999998899e-05, 0.016994283151081202, 0.02629199979076713, 0.015282810211753373, 0.0435131813918761, 0.013879403514632238, 0.005033751124028041, 0.005157863151963427, 0.007115141535578684, 0.009315333086526878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0654398493788716, 0.033099294716452676, 0.06736350946141878, 0.01269358795843456, 0.07949039483624931, 0.06253645872507152, 0.04928020716826109, 0.044243370601938614, 0.04768666509732211, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019889928741202434, 9.999999999998899e-05, 0.0035294665459094654, 9.999999999998899e-05, 0.015835579563458158, 0.007953902418155856, 0.008218142607784418, 0.008081250471694723, 0.21031975561790472, 0.2021476018466325, 0.20192883189510513, 0.21143305165476656, 0.2121789072713517, 0.23078435699638677, 0.20914409489675956, 0.2088744821474996, 0.20729509212632347, 0.07091276620469111, 0.07975729407238141, 0.08362813134224634, 0.046665732634531554, 0.059136685227707986, 0.063780376543777, 0.04858905254245094, 0.05956805736968618, 0.06233861751276182, 0.13254096656515135, 0.15387749469690593, 0.12737861301039444, 0.12818595747473027, 0.12089843471903206, 0.12117244314365139, 0.13162615492036112, 0.12458457364637998, 0.12284482440131539, 0.18938475919944886, 0.18338065668535286, 0.18069444794933265, 0.16791150664477994, 0.18028745259031698, 0.17465753215764468, 0.1680193422754579, 0.17397451942123665, 0.18043612382234764, 0.11631722777623321, 0.11176943176783916, 0.10593355659544501, 0.1202157252922037, 0.13535489757097097, 0.12801188709383282, 0.1322354781868328, 0.1266077012383252, 0.12407177170860029, 0.15813671510064664, 0.14906682858396547, 0.17411449599556328, 0.16306811573193258, 0.1493361590972463, 0.16939990176139585, 0.16674041854709687, 0.1500429214851885, 0.16387162413126366, 0.15973873144343265, 0.14443916938353063, 0.1458167186614655, 0.1566744379088072, 0.15031829820705367, 0.14576917094193342, 0.15074041755196577, 0.14245758614070325, 0.1500785827503922, 0.13475534719297744, 0.23400802311599134, 0.13092847519152784, 0.28360348062279184, 0.15816259521180887, 0.2100108093664439, 0.14219407806767836, 0.1544404609625737, 0.1609171974871686, 0.2243716152465438, 0.18100158655699528, 0.15995962468398195, 0.15174887010358928, 0.14838341952307454, 0.12025410591027963, 0.1891356769588477, 0.18965269513212613, 0.18238929887976385, 0.18757782737539808, 0.17976584941749385, 0.19102706775278222, 0.1758399303158551, 0.176763220765068, 0.18203562930622952, 0.1787410727283233, 0.18497730591517647, 0.1807697583827278, 0.061632455626919325, 0.055764615813188034, 0.06442773018179027, 0.06651184401834342, 0.05553056415467239, 0.05926356708508851, 0.05951638004375304, 0.0608987316399523, 0.05653177093963235]}, "mutation_prompt": null}
{"id": "3eb69f08-cb6f-4428-b2c9-d24f97151d9c", "solution": "class ImprovedHybridPSOSA_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_min=0.1, f_max=0.9, f_decay=0.95, f_inc=1.05):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.f = f\n        self.cr = cr\n        self.f_min = f_min\n        self.f_max = f_max\n        self.f_decay = f_decay\n        self.f_inc = f_inc\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            # Update mutation factor 'f' dynamically\n            self.f = max(self.f_min, min(self.f_max, self.f * self.f_decay)) if np.random.rand() > 0.5 else min(self.f_max, self.f * self.f_inc)\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "ImprovedHybridPSOSA_DE", "description": "Improve HybridPSOSA_DE by adding a dynamic adjustment to the mutation factor 'f' to balance exploration and exploitation.", "configspace": "", "generation": 9, "fitness": 0.34719116111717335, "feedback": "The algorithm ImprovedHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.8716959751991654, 0.872914617911658, 0.8729036257746197, 0.874131142786993, 0.8635684652091461, 0.8829628606366836, 0.8667255806407045, 0.18178330006707566, 0.17513652083312048, 0.6967376966986645, 0.03976304129883701, 0.7688503251982541, 0.7172284281777279, 0.7418622376335418, 0.03830076797013715, 0.6831740475091347, 0.7035848060723511, 0.5445879551254622, 0.10534634136920362, 0.1527533428921659, 0.09050629175138436, 0.12389391781143533, 0.14182576025649363, 0.09476856275654133, 0.10895329942409082, 0.14661936426974675, 0.12126160294352051, 0.13125338755705396, 0.11184849083018655, 0.10617204349024689, 0.10633136706397783, 0.10017538258269743, 0.08584481581576842, 0.10298251635820121, 0.0924274831563009, 0.10347090917447643, 0.9789890351240567, 0.9822239641716473, 0.9722562341185207, 0.9554122845106341, 0.9801157341167634, 0.9641529206268098, 0.9535475422235118, 0.9661359964211159, 0.9488402018050482, 0.6227486273043965, 0.508108647739451, 0.6628214397168452, 0.6635211753811068, 0.5938172140168838, 0.6444350576873252, 0.7029945315924088, 0.2687721463016076, 0.6792629028611548, 0.22644346388011327, 0.8273324754682312, 0.8991648702378192, 0.19378615249745668, 0.8913558233001622, 0.2019493137017685, 0.9086512218315146, 0.8657826050596606, 0.8942028199440814, 0.18211243110172903, 0.3480625030248594, 0.13326327043174002, 0.12716379507992315, 0.6615604377797031, 0.12345625703579788, 0.2681769317582159, 0.1844163782398387, 0.27003966437765015, 0.19072043255965831, 0.0802588986847299, 0.7812576545421575, 0.21619844202682692, 0.45048693648405236, 0.25178053520083643, 0.19606456772868985, 0.6823700421890085, 0.21836927713068977, 0.13423235574377235, 9.999999999998899e-05, 0.2752072336899498, 0.0006774620469554016, 0.4599031900450461, 9.999999999998899e-05, 0.10674232133557904, 0.11924337763467718, 0.022323709697611216, 0.35548364377592645, 0.6074666890489578, 0.26419752906461236, 0.15822208148297068, 0.12645224659728904, 0.026610303204513408, 0.6059673584177641, 0.7159685918720488, 0.18425418580066688, 0.4271342619477767, 0.12505354818321934, 0.0656287782094459, 0.28798357495327265, 0.13892938760775342, 0.07972972818402868, 0.14078201999621975, 0.09526807679565752, 0.21442088862928832, 0.46966444293980125, 0.30248090352540613, 0.16263233321776138, 0.006554131809677677, 0.42279338917297205, 0.03508830440131083, 0.05334664028312075, 0.0564337490795509, 0.08646101068961853, 0.7342235139993608, 0.8264757653078336, 0.5693512856762413, 0.7268385123486882, 0.20661129944722523, 0.6530558996502045, 0.6882330939622545, 0.653247982598705, 0.6974365649233643, 0.08636391962017809, 0.10359083407236391, 0.09465813370222187, 0.11438003128738328, 0.11745721826754485, 0.15465991854408678, 0.11508276253270067, 0.09048970244256693, 0.11344538535202187, 0.18191125680338915, 0.2389370361520582, 0.18543472312189668, 0.7646924746445967, 0.737064707389526, 0.16360661722409475, 0.32627158681798385, 0.25270711626588116, 0.20177334421544502, 0.5447500076020875, 0.5545553906693537, 0.4686686292602472, 0.4964501811962473, 0.5595806477094392, 0.3507163480419867, 0.4554854547544742, 0.5025521097572146, 0.26876279207721077, 0.15557818628993847, 0.2458188282592748, 0.37259127444653617, 0.2595657576001046, 0.19093651340704754, 0.24608278466342293, 0.21994751716617644, 0.29772778966972446, 0.2817044621101582, 0.184340427599181, 0.18571815274675219, 0.1991987152389405, 0.22032388828647909, 0.20474245069562558, 0.20730020423551554, 0.21284340785381417, 0.2103187482500707, 0.19955705322564632, 0.1934690119733582, 0.18300388835517356, 0.1788713328553183, 0.19068024465742206, 0.24046755633776606, 0.20621596949725896, 0.2056690962753166, 0.18197496505445832, 0.1799520919778257, 0.18695131498638573, 0.1259535879273671, 0.17104232638249994, 0.9213191773767343, 0.20057215926102367, 0.19880608553062973, 0.09964524260371221, 0.14797960541299526, 0.16548637455160675, 0.8692617066060473, 0.1567511656752496, 0.7049112445050505, 0.1676380238626154, 0.16600833605524223, 0.21017974851136534, 0.5060899257743332, 0.8426948578123233, 0.7562842714259722, 0.17909557561186196, 0.1944801719062218, 0.17956232472686895, 0.18752076506353743, 0.1859754172391216, 0.17647297103202564, 0.19346683390176045, 0.18030183192139848, 0.1807385536202355, 0.09803755344402676, 0.1076540295421442, 0.07597853351709327, 0.08942236832195971, 0.0888252722826568, 0.07892238329174561, 0.1032911085830408, 0.08524064129494058, 0.07814016523408085]}, "mutation_prompt": null}
{"id": "9a6075a6-84a7-4ad3-8b0b-4c8590503a08", "solution": "import numpy as np\n\nclass HybridPSOSA_DE_SA:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, sa_acceptance_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.f = f\n        self.cr = cr\n        self.sa_acceptance_rate = sa_acceptance_rate\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness or np.random.rand() < self.sa_acceptance_rate:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "HybridPSOSA_DE_SA", "description": "Enhance HybridPSOSA by incorporating Simulated Annealing for enhanced global exploration and exploitation.", "configspace": "", "generation": 10, "fitness": 0.12000821810732275, "feedback": "The algorithm HybridPSOSA_DE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.16083207174983527, 0.19854472023901304, 0.16361312394679572, 0.24016606098893634, 0.21245883798651, 0.2120719949389792, 0.18140827527918313, 0.17899891255077416, 0.20334051776121453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024002052763019255, 0.04247281178597895, 0.0410162536205777, 0.041724103748521535, 0.05018297929173621, 0.047443891636512636, 0.034047266105593166, 0.04505765547251772, 0.06942105983257663, 0.020043924671714564, 0.013891392097493238, 0.022601301256447215, 0.0236131227335854, 0.031432888086129096, 0.018580980385921042, 0.03457101902793236, 0.04612762080399713, 0.02469097655244734, 0.936427103231811, 0.9655181547562813, 0.9720370066514142, 0.8894932113554049, 0.9391634299560774, 0.9510718680888665, 0.9158846081217444, 0.9120771133775805, 0.934894603572285, 0.07201948853035012, 0.06698199662010917, 0.06257767330566733, 0.06468905933969615, 0.08587098874840904, 0.07291917994321051, 0.0841766548921381, 0.10688389381459051, 0.08058600380775538, 0.11987101383102794, 0.07310394530658537, 0.14183937549450898, 0.1365788369219021, 0.1402058287169391, 0.11993960919950242, 0.11148881378533537, 0.10587698324211614, 0.13754942803326153, 9.999999999998899e-05, 9.999999999998899e-05, 0.00043977078017543025, 0.009859732314235203, 9.999999999998899e-05, 0.008639193110057786, 0.011188665895770833, 9.999999999998899e-05, 9.999999999998899e-05, 0.05547289652937992, 9.999999999998899e-05, 0.01012098794907812, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006263402006195795, 0.01856833755952758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02839032296527544, 0.0526905561202855, 0.030944363689837884, 0.02222375617763206, 0.01860921120797321, 0.011153607366434004, 0.013624404977515936, 0.04385450743910424, 0.03758185814127368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002337954325289826, 9.999999999998899e-05, 0.000322505858560862, 0.009949043961742454, 9.999999999998899e-05, 9.999999999998899e-05, 0.0041628969326833465, 0.012387563252277523, 0.18149966431375275, 0.19576339137453858, 0.22646517048971815, 0.21500271188465714, 0.1850206080928377, 0.19720311512578503, 0.19292777774689807, 0.18688568095405833, 0.20504608399315105, 0.05566693850855631, 0.052477374236850505, 0.04984204932401881, 0.04136242389021427, 0.032960839955611165, 0.04742764949703049, 0.04333059501217773, 0.032788558284184144, 0.03873998513410426, 0.13087495734474286, 0.12683709520602238, 0.12174650235819517, 0.14041302521577204, 0.12525191635238753, 0.1348700070919544, 0.1286936586250087, 0.13672027789354124, 0.11942257300459092, 0.15822260963321932, 0.16066267929654676, 0.18033117480787075, 0.1558807246691244, 0.15801205040981037, 0.157282986822049, 0.1677146670345928, 0.17426401220573262, 0.17526886235828787, 0.09796540087333583, 0.1175119331202843, 0.10042732942761923, 0.10915472439111251, 0.11472003206951464, 0.10231948948830905, 0.11965260770102615, 0.12986336470775972, 0.11099051771928592, 0.14695822330064456, 0.14210721828128003, 0.1371973272315452, 0.13930323966326463, 0.14442937350167429, 0.12863057372505793, 0.14824822008883531, 0.15687264483339858, 0.16043629071848176, 0.15034256097602794, 0.13972209967139348, 0.1502240047084319, 0.09963542524871705, 0.12697628263302163, 0.1504923112735369, 0.1362830205948038, 0.12272700577585471, 0.11624545080064541, 0.15824627144718684, 0.1434475103556655, 0.19536564968023784, 0.1469118125038409, 0.13921144165812638, 0.12663605953041057, 0.14411068724777087, 0.15044841534487585, 0.12360328783006136, 0.1757436780116194, 0.15024832501108576, 0.1426557511812926, 0.11121241216689648, 0.1347701648242875, 0.11094922091113912, 0.1759557604730051, 0.16170160553901824, 0.1322822515501605, 0.1758994848065678, 0.18457475904947673, 0.168718524273342, 0.17405260123021804, 0.17162525930655248, 0.18144641416828455, 0.17425397294574685, 0.17963216207620902, 0.1655542199140897, 0.04248749964886589, 0.046145795713387505, 0.040704636092226965, 0.03615122140886018, 0.047576603507283655, 0.04992063185362472, 0.04758008271161884, 0.04477500705953885, 0.045528694763438904]}, "mutation_prompt": null}
{"id": "bcae8986-d81e-4fc2-8f3c-14bfe21a3c20", "solution": "class HybridPSOSA_DE_Improved(HybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, dynamic_factor=0.1):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr)\n        self.dynamic_factor = dynamic_factor\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update with dynamic mutation factor\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                dynamic_f = self.f * (1 - np.exp(-self.dynamic_factor * _))\n                mutant = np.clip(a + dynamic_f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "HybridPSOSA_DE_Improved", "description": "Improve HybridPSOSA_DE by adding a dynamic mutation factor to control the exploration-exploitation trade-off.", "configspace": "", "generation": 11, "fitness": 0.3427795356812311, "feedback": "The algorithm HybridPSOSA_DE_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.8748926746034837, 0.8643170880429187, 0.8781196489536196, 0.876463738812846, 0.8675416368925207, 0.8149849266295072, 0.8822953754446696, 0.8715438239598805, 0.8861827504363086, 0.6021534468824806, 0.5307634778983198, 0.7470357324299695, 0.6565025993678167, 0.34276901917911595, 9.999999999998899e-05, 0.5564412499349674, 0.7387365535804931, 0.673902612539059, 0.17509236402973238, 0.13390853617348042, 0.10971139777668215, 0.11341017643921081, 0.12496446293173158, 0.07860835362033813, 0.09397551086532907, 0.04845709514844054, 0.09638465406241903, 0.09344219818930799, 0.10196506477325362, 0.05511869389655388, 0.08728010989523027, 0.13155445384910147, 0.09952141510253276, 0.09884912816129288, 0.09267966771245173, 0.1494310492228016, 0.954542321575854, 0.9761168210290714, 0.9772705791045887, 0.9645233537876355, 0.9531984783987568, 0.9552175747478155, 0.970936546472346, 0.962550555431781, 0.9407427903066984, 0.5592926592826353, 0.05900837339131848, 0.11227526296283064, 0.6882908523049773, 0.658810561892431, 0.6762544793062955, 0.675054008112706, 0.39178810847236023, 0.481566158091851, 0.9180279454609546, 0.7902019719358379, 0.5110785577673126, 0.38284849565761947, 0.901392162951627, 0.8994273805342077, 0.2253062449770169, 0.1509329601135201, 0.19147454833520405, 0.21950523444272663, 0.12322088889511251, 0.22754994648256044, 0.13300644604306655, 0.6774671085121096, 0.7754129618666787, 0.5293715258907992, 0.32514703435387915, 0.2843950779469705, 0.19511490884645255, 0.11709083918773211, 0.40182300028136164, 0.535645228360855, 0.2117534090673734, 0.17253357862472563, 0.5771502738973482, 0.2905745138886121, 0.20502766828443098, 0.1379772191570242, 0.0541661889767181, 0.05986916540305087, 0.028523574320998724, 0.12239017387366258, 0.04444086431408145, 0.10958951280171936, 0.027613879277586406, 0.1515052889368559, 0.06319805005408452, 0.2523891842680571, 0.20650721786970017, 0.18464037509001896, 0.19544345889830972, 0.09342107954388934, 0.34023420968090257, 0.7459044900607505, 0.37637005237196675, 0.04893864347426846, 0.05159900316126442, 0.14975417937190216, 0.07728879845781989, 0.1909401252505868, 0.2169623619029145, 0.17459164094574675, 0.24857418396350517, 0.06914783642642253, 0.252680647107279, 0.2185959048530377, 0.4787602092524791, 0.09855437857636407, 0.44799571046735154, 0.0064190317681873665, 0.23060694351425193, 0.04816493140269462, 0.08632603673796146, 0.6463009978630319, 0.715709984648097, 0.607986028935213, 0.6011487050871284, 0.7607377455859969, 0.8057842307146809, 0.7324305644181921, 0.8163826098679523, 0.82248527168776, 0.072547055255062, 0.08156054419743686, 0.07181885598503779, 0.1267786176503669, 0.1504320191377878, 0.14958029516207083, 0.11154212395336016, 0.11033708977669199, 0.07080112076580303, 0.2844589280204384, 0.29134961969935, 0.3626839599843277, 0.7484005756825651, 0.7813391912481573, 0.17086550147276192, 0.28417400814294114, 0.20448881915442385, 0.2065585761235833, 0.2724744303850912, 0.275389726808425, 0.5753494049015911, 0.34090682392294835, 0.2433128651199259, 0.3011190076090917, 0.2469842148267961, 0.6729625425991965, 0.5679605437678267, 0.3017537221184239, 0.3073441796931071, 0.21106825817871333, 0.18249829267483586, 0.23481444873488555, 0.5019785178315899, 0.1864714460221215, 0.3482993725702884, 0.15845429258621357, 0.20296350294650534, 0.19635462335802178, 0.22048363619653844, 0.20722363994253123, 0.20953619834545978, 0.23002427378536172, 0.1891495423846421, 0.1921215036369014, 0.191671354914711, 0.19606792760052172, 0.20916773625566654, 0.21688220776713818, 0.22174268396003594, 0.2081836344796948, 0.20756182816402757, 0.7521942105193444, 0.18230225070916073, 0.21051640875607036, 0.16281109518698555, 0.12656467689807904, 0.15209753917799373, 0.9362389856850543, 0.20076352088544236, 0.20034757038488193, 0.11609042782668932, 0.12630061868362463, 0.1669225064203027, 0.8881066149155793, 0.15661188337143372, 0.898947004880945, 0.21006681959611073, 0.16578286703526213, 0.20997279115500211, 0.1043792017932057, 0.10373585947261599, 0.9061328881634626, 0.18198009579480234, 0.1841770871066679, 0.18516382309128065, 0.20924522068623896, 0.1945906009738323, 0.18467254299804292, 0.18363191357802655, 0.18655315308407794, 0.18723532521783182, 0.09552768330961736, 0.09513342471974762, 0.07747955565852138, 0.08395790168731532, 0.09223785453017086, 0.07371435211676403, 0.09333165002200872, 0.08446467236539412, 0.08433304812995701]}, "mutation_prompt": null}
{"id": "4dddbaaa-3278-4630-8f7c-20b5b7dbbd2b", "solution": "import numpy as np\n\nclass HybridPSOSA_DE_SA:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n                else:\n                    acceptance_prob = np.exp((fitness - trial_fitness) / curr_temp)\n                    if np.random.rand() < acceptance_prob:\n                        swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "HybridPSOSA_DE_SA", "description": "Integrate simulated annealing to enhance the exploitation capability of the HybridPSOSA_DE algorithm.", "configspace": "", "generation": 12, "fitness": 0.2641333648200972, "feedback": "The algorithm HybridPSOSA_DE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.19.", "error": "", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.36299594466926455, 0.3662751589298787, 0.36553280467890814, 0.3542490037001875, 0.3586064395162132, 0.36759702343337963, 0.3900794011801719, 0.348361047126152, 0.3601975879519227, 0.22523391131364157, 0.3363704221188769, 0.3632155269326044, 0.30414352712374193, 0.30333618303650256, 0.32503799961813507, 0.36964048728590004, 0.32736237649863464, 0.32177047255410485, 0.12116789962445729, 0.13904318341900235, 0.11285514179278544, 0.1278609896092221, 0.10132322189432819, 0.10844805445203598, 0.11890500840459173, 0.11144086588180602, 0.09150821242145735, 0.11571533450478055, 0.11596926227454518, 0.07437379762362162, 0.10465283204663633, 0.10574369887834922, 0.1184858935308144, 0.10427434880647757, 0.12500664402934158, 0.08897671068622381, 0.9787901251651236, 0.9588974245293492, 0.9792621696086162, 0.9575696621976074, 0.9764782908239299, 0.9489541351686244, 0.942670277828518, 0.9451653493152586, 0.9757460828783919, 0.32793926943051155, 0.35642523769271506, 0.2839096742066213, 0.36953766307664904, 0.2791704679750133, 0.3529367971356946, 0.3520886667763271, 0.34910697492604736, 0.3384292053324891, 0.4526145371538858, 0.577104219516134, 0.6156582038132004, 0.4671354052251492, 0.5699153613085826, 0.5114376990071812, 0.49743757721810333, 0.5924099241552787, 0.5613565146406516, 0.28553331422515726, 0.2877966029913158, 0.30780840694489287, 0.2777372819874032, 0.30814492931518567, 0.25353131230500825, 0.3036339317856872, 0.2729504932882968, 0.2545502491276347, 0.29868513351337367, 0.06261256414404848, 0.2678900720140114, 0.2656294909873409, 0.2335606844407786, 0.2735160113399794, 0.29649181344798814, 0.11777374319828182, 0.13006982658604538, 0.062031276823059645, 9.999999999998899e-05, 0.3788728702797224, 0.016629477851178076, 0.052552029930018396, 0.36426139974801075, 0.3408952999771274, 0.3327529815740028, 0.3840069779521511, 0.38806152121733806, 0.3249265351880981, 0.3962419475774742, 0.38911270106197493, 0.05552280557439282, 0.05093167592547454, 0.38710193357400036, 0.3574474606028546, 0.38990284701256483, 0.07061792221533869, 0.035072058917103854, 0.0637899257496145, 0.35505699019509296, 0.07560902101726974, 0.33155328453076227, 0.14156031901808896, 0.09725127821033253, 0.1968599914347825, 0.2369813150332334, 0.22360719610435975, 0.26902877816044835, 0.23732196617586088, 0.2608279464074037, 0.24709253848789547, 0.05513560057767686, 0.07632059443284611, 0.2513870575549748, 0.348376784191637, 0.33238462314956374, 0.3502367486233525, 0.3536987492445006, 0.3593611240440212, 0.3230915048056532, 0.3335823537220143, 0.33216560566147135, 0.34862746104306086, 0.09810010326408314, 0.09022979768472561, 0.10200751481951842, 0.09755720101870446, 0.12791714393331877, 0.10651377015736796, 0.15608291481646142, 0.3253226284973685, 0.1094577604335445, 0.18569205796447452, 0.1565826221496558, 0.17444534640146558, 0.16748027804893095, 0.1535460104931997, 0.15187324712640726, 0.16848880609729988, 0.2340136948602285, 0.13877987608503517, 0.26263051663704384, 0.25039616423479005, 0.2517235998730355, 0.2530713702969709, 0.25468986981079655, 0.2517814637820077, 0.23035093289579567, 0.2528882782823453, 0.24776910195880242, 0.1996965732961059, 0.15649695184184342, 0.2576853565067898, 0.2323334231016677, 0.2345602770803662, 0.21719018770528087, 0.2233785768860299, 0.23641561357263385, 0.20559384875113407, 0.1791558294409833, 0.17301920742704502, 0.18559379192341252, 0.19076376194538147, 0.17165069819240475, 0.19000757149079672, 0.19249866975866636, 0.17285569299939907, 0.16987038289610823, 0.2137810623696711, 0.21113281025678166, 0.21158087424577665, 0.19210312257816442, 0.20443737428002895, 0.19192403613615605, 0.19791701429752007, 0.22921445987200606, 0.19178845342774709, 0.17729919083354562, 0.16098504497994925, 0.14840596261780503, 0.16368795962986005, 0.1925930140463773, 0.1252724104578672, 0.1826368539765394, 0.4697525559877954, 0.18940879086605622, 0.4999197861622271, 0.16732140457464706, 0.1658524685495797, 0.5654549060484081, 0.17936623065231638, 0.17426050839652873, 0.19322326488103847, 0.20363558736546505, 0.2027962447680749, 0.17376314828277994, 0.1675866723706404, 0.17913116585808564, 0.19336952089978898, 0.1875252178670045, 0.18326375263594363, 0.20442080991725886, 0.17721948039747726, 0.16565685136510655, 0.07267011170845217, 0.06854229999211636, 0.07590747661085262, 0.0718708215205075, 0.08613669458498896, 0.08867685433249739, 0.08107633653343926, 0.0764211059222698, 0.07588892576984507]}, "mutation_prompt": null}
{"id": "e1eab532-7a2d-4489-81af-58a9f9119e9d", "solution": "import numpy as np\n\nclass HybridPSOSA_DE_SA:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, sa_acceptance_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.f = f\n        self.cr = cr\n        self.sa_acceptance_prob = sa_acceptance_prob\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n                elif np.random.rand() < self.sa_acceptance_prob:\n                    delta_fitness = trial_fitness - fitness\n                    if np.random.rand() < np.exp(-delta_fitness / curr_temp):\n                        swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "HybridPSOSA_DE_SA", "description": "Enhance HybridPSOSA by incorporating Simulated Annealing (SA) for improved local search exploration.", "configspace": "", "generation": 13, "fitness": 0.2890250116873615, "feedback": "The algorithm HybridPSOSA_DE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.21.", "error": "", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.42331836884505014, 0.4514156817886249, 0.4286429097354819, 0.43417927268429435, 0.44751736612735893, 0.189582604937779, 0.46083231234639277, 0.4338741244726375, 0.45532097255890125, 0.3794208909106681, 9.999999999998899e-05, 0.039238554101479695, 0.3528379842669961, 0.3578966929296358, 0.3821866393041382, 0.39473259624415136, 0.32906950400343826, 0.38609456059249436, 0.10540301025347543, 0.103313200854245, 0.11516307116101399, 0.10535337781465426, 0.13962889385137733, 0.11592535002994486, 0.10480570871101369, 0.11148690295687103, 0.11839916224896208, 0.1381353734443319, 0.10803008027482042, 0.11646808461631974, 0.09428890842718096, 0.1167513123018371, 0.1022316399373232, 0.12954895331313088, 0.1167564235150731, 0.0992077520162642, 0.9821614173060528, 0.9686367890040227, 0.9689682302872937, 0.9902689788668523, 0.9702946262580854, 0.9693325760657214, 0.9827825423599336, 0.9656834973482937, 0.9497330967659716, 0.44052324837353996, 0.35315534341393573, 0.35931297849864363, 0.4103789213747191, 0.39829421749098415, 0.1506919593070174, 0.3860952148567429, 0.3897533259482143, 0.4139719403305233, 0.2274264810287131, 0.8081472719244679, 0.5593008600411493, 0.20478045322402194, 0.5513956449307797, 0.23753490721680448, 0.5099732655877204, 0.6974838819745603, 0.7199072049775073, 0.3547711324971069, 0.3315998646626014, 0.2754177628776925, 0.3851583172415365, 0.3306296399582149, 0.3032525159287969, 0.3384049230805033, 0.2567093677286434, 0.3604864908116069, 0.2969559427286039, 0.37377801438876335, 0.12613176195832965, 0.29168836784520746, 0.3076972427224194, 0.42904277043494987, 0.3625282667476295, 0.38398777975110265, 0.13164290901846476, 0.06842292551845752, 0.05605503939903389, 9.999999999998899e-05, 0.05597170616397329, 0.4049560848882485, 0.01578073415996406, 0.24487739532588637, 0.009267211192592884, 0.4752262160542283, 0.3923744310438758, 0.43597977590795767, 0.5091785247919365, 0.4128475182927255, 0.19347174317646976, 0.32747071172109377, 0.4958807918794421, 0.4061505163477651, 0.49142905409680804, 0.26009575180790834, 0.08468780966418543, 0.3744220788060795, 0.31519498507542043, 0.10759890439282349, 0.17556491193412627, 0.22716188815668703, 0.2834873110666378, 0.0730224500975517, 0.12479805455198134, 0.3185412944925311, 0.18398133083254864, 0.26925555913761745, 0.29560813052302415, 0.2514738358646952, 0.24350124416833707, 0.08043020910299925, 0.08152948515673597, 0.365661837969704, 0.3931321896622879, 0.3999751572649337, 0.38747303352721496, 0.3925806010365793, 0.397568769764031, 0.38961808011602195, 0.39711717681074865, 0.3782268353105056, 0.09846733866135915, 0.11051170531286059, 0.1047825140633889, 0.13815728527300886, 0.1309326893714815, 0.10521392323650747, 0.10661759626675882, 0.12308278197222222, 0.1436486518332718, 0.16566284725202263, 0.20113067806771, 0.16113655707358887, 0.15906130467826918, 0.3070040550579707, 0.21132497467554434, 0.13356481763608063, 0.13237686411116933, 0.1774618661707218, 0.28995280713448424, 0.28911169997982655, 0.29206471421170943, 0.29982601975122236, 0.20589752173840614, 0.2830902367135295, 0.3155091695058073, 0.2650121395520332, 0.28978653120829645, 0.2303724515449107, 0.23180998604525616, 0.27625730409097327, 0.2695731630778425, 0.18151658580573826, 0.28002455660237924, 0.2493991914644932, 0.2824484722660999, 0.23633875044509944, 0.1842426230430657, 0.19092131656894185, 0.1899278789321398, 0.17689850594531542, 0.22390053482243377, 0.18372246963065697, 0.19671116767758356, 0.1869041834198426, 0.187064236958022, 0.21923691276119683, 0.19210955273370123, 0.21670461113836548, 0.217260645320277, 0.1967047892622028, 0.21106425151963226, 0.20004877491723227, 0.20358006462849276, 0.2205684527406917, 0.6688132652582057, 0.7157570615337683, 0.1523904534240038, 0.12672801355129104, 0.19809199300213864, 0.1929961213346021, 0.18508595463343447, 0.16758628156406685, 0.5767738753248545, 0.6773364299768652, 0.7108124435372347, 0.1525101622277445, 0.20393258103204648, 0.20040077513641286, 0.20766464555488462, 0.6670669298444407, 0.12602485043781597, 0.20529669798977013, 0.19240438363283918, 0.1803735111439957, 0.1843134624785564, 0.19067055152739432, 0.18511396256960422, 0.17591768517489437, 0.18258287355843061, 0.19506468971280444, 0.19604862092901043, 0.0803215796752591, 0.09162939639730938, 0.07093738814284867, 0.08075661367700626, 0.07507872413438421, 0.08782404605688421, 0.07719355003622819, 0.06596057936120248, 0.06606216404983101]}, "mutation_prompt": null}
{"id": "88d5a66e-b500-4fc3-b7ae-9dd45714af82", "solution": "import numpy as np\n\nclass HybridPSOSA_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "HybridPSOSA_DE", "description": "Enhance HybridPSOSA by incorporating Differential Evolution (DE) for global exploration and exploitation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.8707055654675772, 0.8766003748189569, 0.8763484093466505, 0.8678436576335489, 0.8517254337236138, 0.8516521195230213, 0.8739246935247962, 0.8473996383000417, 0.8709467071302934, 0.6719864664758288, 0.5845089947537789, 0.7412608817262458, 0.7197305939627947, 0.04603962724984845, 9.999999999998899e-05, 0.7438022654721446, 0.5852779035463651, 0.516036016573904, 0.1433837002536409, 0.12644297118753456, 0.1258233171035148, 0.14669114145596418, 0.0913935873499333, 0.17810908917555968, 0.10698137555605047, 0.11716569772809982, 0.07670963236512252, 0.14992296266953942, 0.1210243174318768, 0.10084962025263977, 0.12384301188464464, 0.1107055494884085, 0.10899085653418739, 0.114181166719039, 0.09895333195190836, 0.1068691230573644, 0.9784528983324515, 0.9821987286719702, 0.9706620666967269, 0.9575845360192484, 0.9758832617683164, 0.9695999500308592, 0.9588894579629943, 0.9651791177053786, 0.9681391096917878, 0.6345805175070365, 0.582791994585556, 0.6507143200593988, 0.6513663488920611, 0.6781107563255551, 0.6085910503648931, 0.6081114048413819, 0.4264456940001754, 0.6003613686426139, 0.8812879844225634, 0.23168885231118896, 0.8690695089158691, 0.9023618875066972, 0.8464393171568731, 0.20636449716957395, 0.17801298186368952, 0.23384957439206522, 0.9002512287515373, 0.7079873206417606, 0.2681934653381206, 0.19652275496589378, 0.13246835663733236, 0.6697130324967947, 0.7512755618341376, 0.2767511880357594, 0.45241899432159605, 0.68027679418398, 0.20762935754919842, 0.14045855538747076, 0.13311594315986153, 0.13842560138024074, 0.1312806769175462, 0.17814673112371782, 0.2070066376127, 0.12096790404282043, 0.11402293729299451, 0.09424891153697867, 9.999999999998899e-05, 9.999999999998899e-05, 0.474967433442433, 0.5475677710759244, 0.05377689207131664, 0.1010700371024843, 0.008297481346148938, 0.22822722360120917, 0.21957603408585624, 0.13991937923980602, 0.1825658451742841, 0.1866879091783955, 0.13517657040897302, 0.6700087501601995, 0.8049224089641125, 0.734636131787169, 0.7137106086725011, 0.0755810477510096, 0.40969287301422175, 0.057607880209462725, 0.2610897123250182, 0.1572525609932478, 0.10449950573330646, 0.19256553177483005, 0.11497548997661944, 0.19597320789291173, 0.4041375895899809, 0.04324637934699638, 0.22272977867007482, 0.11397815094865638, 0.5462983524798632, 0.24303430757203792, 0.2969313881485266, 0.10270882867291298, 0.13914496453020275, 0.8189733842643108, 0.80926821119244, 0.8120515737291993, 0.8129458788914379, 0.6154857271374601, 0.6677253187125816, 0.7165952659120668, 0.7546480197555621, 0.7843761337128777, 0.18530709097939912, 0.10486876467590978, 0.08707906912455254, 0.12294292885028624, 0.12329301077772747, 0.12482912069871199, 0.10740279150916754, 0.10311053597829323, 0.14734163496921537, 0.2525704856125215, 0.23517687819498911, 0.15820087710459885, 0.7765156430541466, 0.7661270746583687, 0.20819861703090525, 0.17478690506864225, 0.19204333781824912, 0.27217202503535565, 0.27366702715426383, 0.3329555182222812, 0.4057571358395772, 0.44402881466966393, 0.3044980890499961, 0.49083579628481444, 0.43436062742560255, 0.6003715353482175, 0.5193507408977932, 0.367727352827088, 0.2205113455499318, 0.22114897605013162, 0.253968384424781, 0.20169788307887737, 0.30233012050271246, 0.24603770599129582, 0.3123597499623286, 0.28248915973066524, 0.19712357414784465, 0.19368140611698925, 0.21767098036648802, 0.18347487339929847, 0.1986750692834791, 0.20151385649688336, 0.20527256614909584, 0.20292201011222633, 0.20779896555196586, 0.20737411297287534, 0.20541840201946704, 0.20509221573828174, 0.19855440437513583, 0.2471655367895963, 0.22081810355999054, 0.20602458518786881, 0.2113650690937724, 0.20707285418565713, 0.8809912094363723, 0.12591913564021706, 0.15424205759310294, 0.9124452961302318, 0.1994060757561411, 0.19864363142929897, 0.15615128285334579, 0.12570956926548427, 0.898666921347215, 0.8618000929485052, 0.1567379140894778, 0.2055021265857211, 0.1677312632620791, 0.20844788229925448, 0.2090996368045096, 0.8701532893048799, 0.20071489924549601, 0.2088155363580717, 0.18000187312491323, 0.1793106541972349, 0.18867994255131304, 0.19439427402871357, 0.1712391818476382, 0.17991196019666422, 0.18224533239420815, 0.19252600434747746, 0.18153270466782878, 0.0932020014184165, 0.08417894192217246, 0.09115825332378502, 0.08134583830138586, 0.08453715847823717, 0.11176466312837019, 0.10817667250605123, 0.1175557478205228, 0.0790004930685807]}, "mutation_prompt": null}
{"id": "85630a11-cd17-4420-94b7-6f91e493071b", "solution": "import numpy as np\n\nclass HybridPSOSA_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            # Dynamic adjustment of f and cr\n            self.f = max(0.1, self.f * 0.95)\n            self.cr = min(0.9, self.cr * 1.05)\n\n        return global_best_val", "name": "HybridPSOSA_DE", "description": "Improve HybridPSOSA_DE by adding a dynamic adjustment of f and cr parameters during the optimization process.", "configspace": "", "generation": 15, "fitness": 0.3111053454172468, "feedback": "The algorithm HybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.862367574601923, 0.8725938774340906, 0.8860108890034687, 0.8663391671940475, 0.836365785382518, 0.8737820804176997, 0.8649504265123232, 0.8597951729252948, 0.8786395280360562, 0.7323676864964772, 0.39047987437897547, 0.26408055098770555, 0.33985927143325434, 0.04847081181434476, 9.999999999998899e-05, 0.7644815117926452, 0.708614650640498, 0.5513654867311519, 0.13753319761187655, 0.14154428311428224, 0.11372779295024482, 0.12191175933232457, 0.12267601393047267, 0.12391301914954311, 0.0806370051183769, 0.0980798887872043, 0.11944236884673498, 0.10286573704412216, 0.1069535213479137, 0.1141961464828235, 0.1030592386157021, 0.18049137981930652, 0.08659120226454109, 0.11943693732490868, 0.10085133723789674, 0.1045887943007181, 0.9784428728829229, 0.982214994258984, 0.9719283946614264, 0.9607014834971743, 0.9737906278068457, 0.9720254861005486, 0.9569923900621224, 0.9641792670409258, 0.9680714798096144, 0.11302880890794442, 0.6830153188491961, 0.5006001708203243, 0.5799395732180386, 0.6532544847535497, 0.7079173279136918, 0.4232869401522049, 0.546310364770078, 0.6870401979496817, 0.3428924452981419, 0.8908551677691715, 0.3833833446488282, 0.21005247279959327, 0.15549753003579558, 0.2066107530309671, 0.9158885225196154, 0.37639112320957224, 0.2336925334625699, 0.15482510221403645, 0.20212934848540975, 0.1746284348630388, 0.13124131107275006, 0.35795602825414263, 0.14762011809419695, 0.1641795393476042, 0.1881382574392132, 0.5686258027632993, 0.1665897564387353, 0.12050321206947934, 0.14536767394728778, 0.15646173813351127, 0.1447638076055786, 0.17490258605416642, 0.2016503069444111, 0.2999546589620903, 0.10074133559751086, 0.1906762487986804, 9.999999999998899e-05, 0.08395324112156954, 0.05323662411385177, 0.08903008816789937, 9.999999999998899e-05, 0.12931121164297643, 9.999999999998899e-05, 0.20178358328158297, 0.19219280287549467, 0.08936743432441485, 0.13856395020671775, 0.16440917835460445, 0.024504557489397505, 0.12770383883374847, 0.2974365299180236, 0.1614509724638461, 0.3619494296268225, 0.15443646026743552, 0.2017504462831925, 0.17420933756116408, 0.12484018772245586, 0.3133590816953492, 0.07569346478525218, 0.13610456126022985, 0.15800332711004816, 0.12368840380367019, 0.2602877160089617, 0.04251406556773929, 0.207853740966079, 0.1836597395583317, 0.006564064411286208, 0.12287257553407072, 0.23680722831599643, 0.20643326791873928, 0.0949819552120631, 0.5179027519846797, 0.5756252595076818, 0.5856309713884833, 0.6005917307444399, 0.5994478468914295, 0.5958055943855308, 0.5574993443156864, 0.6095666375044662, 0.6120539739096469, 0.09962126991234632, 0.11508554783178426, 0.11373474220143931, 0.13608887299469274, 0.09716291382487363, 0.13919337757944905, 0.12247699590768846, 0.10447674181836519, 0.11288842569050772, 0.21232518648808996, 0.26045135300608724, 0.6797135081985817, 0.3473579610751759, 0.3785395924457593, 0.1967569082047096, 0.22199215209015566, 0.2536326697313449, 0.20734767908021678, 0.4046108697989218, 0.34110049881623106, 0.29022449536986805, 0.3832626894481953, 0.28450640461293464, 0.35149300150083684, 0.26409089535855035, 0.4659283783407655, 0.3845521642020203, 0.2656506292217877, 0.20644158463795614, 0.21968160188400498, 0.34992865235163473, 0.21415049511199957, 0.2639330881354953, 0.30867795421398236, 0.5463398699003539, 0.3619070386718902, 0.21854731251103088, 0.21246844112507401, 0.22357529356170813, 0.20899464468396545, 0.223280115721591, 0.2059546574098109, 0.24159813774183225, 0.19926375023255805, 0.209655942657481, 0.17192755742453714, 0.1804627941777922, 0.18691061977972978, 0.22371530063041456, 0.18180415326688792, 0.18117600986114124, 0.17282355616783973, 0.19599030343780233, 0.20669586246728866, 0.9204236544783292, 0.16379022975285407, 0.15267484821858035, 0.9270301298005778, 0.20046956602885002, 0.1988192676687871, 0.15726090692239125, 0.16633029409561217, 0.9113751414346399, 0.9068575745535625, 0.1566043703643336, 0.3736171290565766, 0.16806096676095517, 0.16634104711543218, 0.20797102594029804, 0.3407082774382144, 0.09453844735320871, 0.10429386968681031, 0.20803966637632043, 0.18329949407064416, 0.1970966751339447, 0.1720744929929633, 0.18935686587999834, 0.1848586721914819, 0.19333346841973864, 0.18200807020918996, 0.20720004543647663, 0.08418445831649513, 0.083698057711599, 0.08288845100150188, 0.08446617938937051, 0.09358916342214596, 0.08920232577350884, 0.12251496530722383, 0.08443138071700995, 0.08767427917731097]}, "mutation_prompt": null}
{"id": "97b03039-f08d-41a4-a355-5182d52418a8", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, dynamic_mut_prob=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.f = f\n        self.cr = cr\n        self.dynamic_mut_prob = dynamic_mut_prob\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update with dynamic mutation\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = np.where(np.random.rand(self.dim) < self.dynamic_mut_prob, np.random.uniform(lb, ub), mutant)[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "EnhancedHybridPSOSA_DE", "description": "Enhance HybridPSOSA by adding a dynamic mutation strategy to balance exploration and exploitation.", "configspace": "", "generation": 16, "fitness": 0.3373503919732355, "feedback": "The algorithm EnhancedHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.8690542171549389, 0.8579943813842207, 0.8772848385899681, 0.8356742105728486, 0.8520514228057081, 0.8543521508592217, 0.8795988830417698, 0.8635482274713716, 0.8658842681919968, 0.7097043716389679, 0.7129760045572546, 0.6957782586030439, 0.7156742071414927, 0.7455004424064304, 0.7499249003136158, 0.7173229331381732, 0.7189643310552105, 0.7300974962873714, 0.15688022564998028, 0.15832870543301958, 0.16781900638393632, 0.3242812282108619, 0.1911943006397251, 0.14717078599651146, 0.3405529571858108, 0.16357613104319968, 0.1429175512223968, 0.12161762044798796, 0.1697553393170298, 0.12921321931997243, 0.14863258910508526, 0.12755933082412718, 0.14137861719734302, 0.12487716310923902, 0.09945688563500876, 0.12132349811228593, 0.978326513755924, 0.9762291852562353, 0.9830624292438147, 0.9685198414449965, 0.9689384401864454, 0.9657317883974543, 0.9814911416664693, 0.9743347793758971, 0.9795119841995417, 0.6344109116485412, 0.6012832197047351, 0.5858160149186096, 0.1499623292371116, 0.18132140667597552, 0.5897588395564097, 0.5657306934909455, 0.6653928194727046, 0.5167353655359533, 0.23001607531642554, 0.8972234002804532, 0.24318371867116895, 0.2178620000027287, 0.32904261626207076, 0.20521675684550889, 0.21984428742981865, 0.8721921759417305, 0.8939371536092665, 0.16008620444388666, 0.16961871104119963, 0.2324720964630662, 0.3261332486402476, 0.20308224796252605, 0.27164794403863335, 0.1602117496601706, 0.43424939441020216, 0.16751899198980957, 0.1952071677012186, 0.1591920618905075, 0.23596818536846653, 0.3691969397213273, 0.4986591436700625, 0.2099494621745459, 0.21989918795081154, 0.190170253234218, 0.11639209044969379, 9.999999999998899e-05, 9.999999999998899e-05, 0.04079901133037345, 0.03741081911076416, 0.008407237506512177, 0.10156863938725402, 0.07830545289125634, 0.0012734818744244425, 0.3800148753634376, 0.2075720183919334, 0.1374517839507755, 0.1211088275696035, 0.18591216625308682, 0.06306364512810214, 0.09679187635998898, 0.7760282203570326, 0.1521150763218886, 0.10940443785919796, 0.11851719847643072, 0.03091132268081731, 0.16758568821270148, 0.0973112416750932, 0.08315769059065314, 0.24243655093407668, 0.16170438178487967, 0.11418758078367997, 0.10147834776347031, 0.12778606840162265, 0.38889733873783894, 0.17524901246209323, 0.22463521785960205, 0.2722418287011191, 0.43105537447772513, 0.08225014524555097, 0.05199757958271911, 0.08163429559200208, 0.627942650381839, 0.6249306468268242, 0.7509938134012033, 0.6547568860634714, 0.6325219379728334, 0.7836261586986016, 0.7892634411147554, 0.6576942357709827, 0.6203096433719362, 0.14139409414610238, 0.12896877434209963, 0.11165396707418529, 0.15203003283367345, 0.10506286124143094, 0.1440082585147222, 0.11449798811034018, 0.1158780500897767, 0.09024874755967904, 0.18189287454100145, 0.2533769775151903, 0.16346993232854934, 0.4554835914576507, 0.18689483638098858, 0.24152085214938956, 0.16698245343733853, 0.20958414103427703, 0.21819850889753456, 0.284997899035495, 0.2661188231350349, 0.32070571941329395, 0.3272066632503887, 0.288895479234232, 0.36440683018182607, 0.29086416917385016, 0.36834108775507335, 0.5592597551082661, 0.24361684198189448, 0.20624341593255036, 0.28929079797955404, 0.2850079331222093, 0.15012030488236727, 0.271669001789663, 0.22616802691657112, 0.24524796357642664, 0.20622272193166424, 0.19089629451910772, 0.24754653718254405, 0.23686049635441941, 0.1978171926040443, 0.2565842757896363, 0.22564845086374907, 0.21555674166932293, 0.19236109520003197, 0.20509219219633323, 0.6096323705382288, 0.209048981373129, 0.2236384569476575, 0.1980808353830723, 0.22976012239753707, 0.1962092711487219, 0.17961258521313117, 0.20343946122007595, 0.21712662835279173, 0.18687338202698867, 0.8502696441332057, 0.1759146677293515, 0.8504652508388651, 0.1997609391915759, 0.19925743079322478, 0.16437104393163826, 0.157347402571537, 0.15827343826546947, 0.8298312369026665, 0.156589860178599, 0.7101330444651752, 0.8397027668850326, 0.2079583745454303, 0.20871044861653953, 0.21113884307057418, 0.8741114392470619, 0.30093567549760303, 0.19424252193522618, 0.17714513148019972, 0.17197035853032672, 0.1923154627243001, 0.18044218823549796, 0.18423708627533353, 0.17737282202891547, 0.17777613258139902, 0.2146049338405689, 0.08260018982302553, 0.10395588114721355, 0.07807043327106788, 0.08931090706543454, 0.07937502367038318, 0.09901216746635633, 0.09578008119160986, 0.0881975111284623, 0.07403306372039442]}, "mutation_prompt": null}
{"id": "82f8ffb5-498d-4173-834c-7e5ef4de19d9", "solution": "import numpy as np\n\nclass HybridPSOSA_DE:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                # PSO update\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                # DE update\n                idxs = [idx for idx in range(self.num_particles) if idx != i]\n                a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "HybridPSOSA_DE", "description": "Enhance HybridPSOSA by incorporating Differential Evolution (DE) for global exploration and exploitation.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.8707055654675772, 0.8766003748189569, 0.8763484093466505, 0.8678436576335489, 0.8517254337236138, 0.8516521195230213, 0.8739246935247962, 0.8473996383000417, 0.8709467071302934, 0.6719864664758288, 0.5845089947537789, 0.7412608817262458, 0.7197305939627947, 0.04603962724984845, 9.999999999998899e-05, 0.7438022654721446, 0.5852779035463651, 0.516036016573904, 0.1433837002536409, 0.12644297118753456, 0.1258233171035148, 0.14669114145596418, 0.0913935873499333, 0.17810908917555968, 0.10698137555605047, 0.11716569772809982, 0.07670963236512252, 0.14992296266953942, 0.1210243174318768, 0.10084962025263977, 0.12384301188464464, 0.1107055494884085, 0.10899085653418739, 0.114181166719039, 0.09895333195190836, 0.1068691230573644, 0.9784528983324515, 0.9821987286719702, 0.9706620666967269, 0.9575845360192484, 0.9758832617683164, 0.9695999500308592, 0.9588894579629943, 0.9651791177053786, 0.9681391096917878, 0.6345805175070365, 0.582791994585556, 0.6507143200593988, 0.6513663488920611, 0.6781107563255551, 0.6085910503648931, 0.6081114048413819, 0.4264456940001754, 0.6003613686426139, 0.8812879844225634, 0.23168885231118896, 0.8690695089158691, 0.9023618875066972, 0.8464393171568731, 0.20636449716957395, 0.17801298186368952, 0.23384957439206522, 0.9002512287515373, 0.7079873206417606, 0.2681934653381206, 0.19652275496589378, 0.13246835663733236, 0.6697130324967947, 0.7512755618341376, 0.2767511880357594, 0.45241899432159605, 0.68027679418398, 0.20762935754919842, 0.14045855538747076, 0.13311594315986153, 0.13842560138024074, 0.1312806769175462, 0.17814673112371782, 0.2070066376127, 0.12096790404282043, 0.11402293729299451, 0.09424891153697867, 9.999999999998899e-05, 9.999999999998899e-05, 0.474967433442433, 0.5475677710759244, 0.05377689207131664, 0.1010700371024843, 0.008297481346148938, 0.22822722360120917, 0.21957603408585624, 0.13991937923980602, 0.1825658451742841, 0.1866879091783955, 0.13517657040897302, 0.6700087501601995, 0.8049224089641125, 0.734636131787169, 0.7137106086725011, 0.0755810477510096, 0.40969287301422175, 0.057607880209462725, 0.2610897123250182, 0.1572525609932478, 0.10449950573330646, 0.19256553177483005, 0.11497548997661944, 0.19597320789291173, 0.4041375895899809, 0.04324637934699638, 0.22272977867007482, 0.11397815094865638, 0.5462983524798632, 0.24303430757203792, 0.2969313881485266, 0.10270882867291298, 0.13914496453020275, 0.8189733842643108, 0.80926821119244, 0.8120515737291993, 0.8129458788914379, 0.6154857271374601, 0.6677253187125816, 0.7165952659120668, 0.7546480197555621, 0.7843761337128777, 0.18530709097939912, 0.10486876467590978, 0.08707906912455254, 0.12294292885028624, 0.12329301077772747, 0.12482912069871199, 0.10740279150916754, 0.10311053597829323, 0.14734163496921537, 0.2525704856125215, 0.23517687819498911, 0.15820087710459885, 0.7765156430541466, 0.7661270746583687, 0.20819861703090525, 0.17478690506864225, 0.19204333781824912, 0.27217202503535565, 0.27366702715426383, 0.3329555182222812, 0.4057571358395772, 0.44402881466966393, 0.3044980890499961, 0.49083579628481444, 0.43436062742560255, 0.6003715353482175, 0.5193507408977932, 0.367727352827088, 0.2205113455499318, 0.22114897605013162, 0.253968384424781, 0.20169788307887737, 0.30233012050271246, 0.24603770599129582, 0.3123597499623286, 0.28248915973066524, 0.19712357414784465, 0.19368140611698925, 0.21767098036648802, 0.18347487339929847, 0.1986750692834791, 0.20151385649688336, 0.20527256614909584, 0.20292201011222633, 0.20779896555196586, 0.20737411297287534, 0.20541840201946704, 0.20509221573828174, 0.19855440437513583, 0.2471655367895963, 0.22081810355999054, 0.20602458518786881, 0.2113650690937724, 0.20707285418565713, 0.8809912094363723, 0.12591913564021706, 0.15424205759310294, 0.9124452961302318, 0.1994060757561411, 0.19864363142929897, 0.15615128285334579, 0.12570956926548427, 0.898666921347215, 0.8618000929485052, 0.1567379140894778, 0.2055021265857211, 0.1677312632620791, 0.20844788229925448, 0.2090996368045096, 0.8701532893048799, 0.20071489924549601, 0.2088155363580717, 0.18000187312491323, 0.1793106541972349, 0.18867994255131304, 0.19439427402871357, 0.1712391818476382, 0.17991196019666422, 0.18224533239420815, 0.19252600434747746, 0.18153270466782878, 0.0932020014184165, 0.08417894192217246, 0.09115825332378502, 0.08134583830138586, 0.08453715847823717, 0.11176466312837019, 0.10817667250605123, 0.1175557478205228, 0.0790004930685807]}, "mutation_prompt": null}
{"id": "1c0b5cff-1fe9-4e9a-b2d1-a0ccadf44d4f", "solution": "class DynamicHybridPSOSA_DE(HybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr)\n        self.f_lower = f_lower\n        self.f_upper = f_upper\n        self.cr_lower = cr_lower\n        self.cr_upper = cr_upper\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.f + (self.f_upper - self.f_lower) * np.random.rand()))  # Dynamic F\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.cr + (self.cr_upper - self.cr_lower) * np.random.rand()))  # Dynamic CR\n\n        return global_best_val", "name": "DynamicHybridPSOSA_DE", "description": "Improve exploration-exploitation balance by dynamically adjusting differential evolution parameters during the optimization process.", "configspace": "", "generation": 18, "fitness": 0.366753395655203, "feedback": "The algorithm DynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.29.", "error": "", "parent_id": "e6535e84-6ffc-41f2-b9f7-0f3cc259a75a", "metadata": {"aucs": [0.8510351779802632, 0.8694260356251269, 0.8713800451132899, 0.862315836250332, 0.7815854935769965, 0.8161823126549262, 0.8550909949358914, 0.8588728753055234, 0.84360581179627, 0.6875732098492277, 0.6877192121403455, 9.999999999998899e-05, 0.678904118308409, 0.3397621908367653, 0.7050183207332948, 0.04990859108081691, 0.05515979824443329, 0.057488289042187724, 0.10911267437406713, 0.10964221883269087, 0.12324878573704734, 0.1211140008560766, 0.11335169036871562, 0.1293069197002773, 0.11629242529481831, 0.12390666267116246, 0.09822434378109124, 0.09430513861392631, 0.09153931343710187, 0.13955581114389026, 0.09159284898452458, 0.07593561425827189, 0.14918121496981807, 0.08305401759662434, 0.13376603056269065, 0.04289584664243862, 0.9798746572255668, 0.9804290622560553, 0.9782166530587577, 0.9759085106031654, 0.9683160065130307, 0.9712167838923301, 0.9811093980442558, 0.9783873415065478, 0.9791708441776308, 0.5046388641381896, 0.05880988741940185, 0.49526300120870537, 0.5194103027472987, 0.5011114006250913, 0.14827934796185926, 0.5281404099822103, 0.516456844969898, 0.08622678299056585, 0.8976283177724566, 0.38589234700727726, 0.8146440237465294, 0.21065834404502548, 0.8693949046032984, 0.2103539169030164, 0.8609597815377024, 0.8290146941734402, 0.8629006061500628, 0.5634232808140376, 0.12911504431997167, 0.3490459835255053, 0.1301460490757157, 0.550283166980273, 0.6384768006808554, 0.6075004807339657, 0.5334209208932708, 0.5187265315247553, 0.6162334892548713, 0.01006905583439599, 0.4838754999453746, 0.6898205258372068, 0.5347846125750878, 0.6237720572638867, 0.1316106414084015, 0.10469558642818011, 0.21981401279697688, 0.06862209051318913, 0.06742395145379065, 0.0642172659401955, 9.999999999998899e-05, 0.583557215538813, 0.5184770572201423, 0.46360377481140647, 9.999999999998899e-05, 0.3910333135485424, 0.6171013778483139, 0.6860912574406677, 0.6886075009961633, 0.5405248475496538, 0.5972809627304024, 0.30926449035756365, 0.7481803296142633, 0.5307796844214036, 0.7053529626378544, 0.3148487352748882, 0.04680721531591481, 9.999999999998899e-05, 0.2945230544492339, 0.08058785730973939, 0.27157342640388693, 0.19161711414975313, 0.07639444929945383, 0.08147772200232062, 0.4844181830684251, 0.49639835767991236, 0.3529524022811683, 0.00632968859517391, 0.006351426540178506, 0.4373350600788549, 0.38276779317757537, 0.4681684862568172, 0.3554636247242682, 0.8122399587440545, 0.8188379631738882, 0.8001313585442834, 0.8080956412167342, 0.7587405988648259, 0.7775440218416758, 0.8056725296265196, 0.7857361285262546, 0.8293387581801851, 0.12939216492547223, 0.10625471020425903, 0.10560220517087948, 0.10901563484320775, 0.11846534388465357, 0.1006230686080567, 0.15563897250359382, 0.1432454980701503, 0.0886007812719285, 0.176302444155798, 0.21506320853831562, 0.1440272808553571, 0.2251037659572629, 0.505992637556517, 0.1475994010838032, 0.2826951964396831, 0.2574055225625653, 0.2268765572550271, 0.3795791358372538, 0.27979397147344476, 0.3782931468677825, 0.5131009328054771, 0.33728342493829255, 0.30475618162177043, 0.4316533705609179, 0.46975390266688566, 0.5301585667948222, 0.23557894755519615, 0.1791999672548643, 0.24829131736218246, 0.28198572145880385, 0.20172359437644916, 0.2861620523459544, 0.26633869314969794, 0.45867726244365226, 0.3712477035319076, 0.221121743765483, 0.18142250898145307, 0.19457605543899636, 0.18771798848466614, 0.2057032423799341, 0.1804875804387175, 0.22808830858593554, 0.23836861071500282, 0.21382658690052958, 0.18561201112004433, 0.20558602622401112, 0.20847470310177063, 0.20942212692537598, 0.19880797560619545, 0.16994079059796108, 0.18529516467896867, 0.21126200891681934, 0.20924447555248116, 0.8867257637279232, 0.18465451636708163, 0.18640459932690767, 0.16830915680974246, 0.2005227878381839, 0.861728454211782, 0.15168337329757398, 0.16635092364579285, 0.16789250117073662, 0.8981321511124607, 0.15627563018590285, 0.7644109436006539, 0.16412611828903778, 0.16815752611520185, 0.8072465908432986, 0.20851796454608906, 0.09425422838629005, 0.10492393043588888, 0.18612836002905775, 0.17537369980697282, 0.19003494159480883, 0.1805654897155069, 0.17047998914423312, 0.17904660993870092, 0.18413051874769726, 0.175758153249014, 0.1999710047999952, 0.08310511952289379, 0.08328757147754329, 0.1129556427467947, 0.07150474837883125, 0.0758242202753201, 0.08463907719508657, 0.07664184133717977, 0.07304351808989629, 0.08033531581775]}, "mutation_prompt": null}
{"id": "98c44f57-800e-4434-a031-bb53ee4da8ac", "solution": "class DynamicHybridPSOSA_DE(HybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr)\n        self.f_lower = f_lower\n        self.f_upper = f_upper\n        self.cr_lower = cr_lower\n        self.cr_upper = cr_upper\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.f + (self.f_upper - self.f_lower) * np.random.rand()))  # Dynamic F\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.cr + (self.cr_upper - self.cr_lower) * np.random.rand()))  # Dynamic CR\n\n        return global_best_val", "name": "DynamicHybridPSOSA_DE", "description": "Improve exploration-exploitation balance by dynamically adjusting differential evolution parameters during the optimization process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c0b5cff-1fe9-4e9a-b2d1-a0ccadf44d4f", "metadata": {"aucs": [0.8510351779802632, 0.8694260356251269, 0.8713800451132899, 0.862315836250332, 0.7815854935769965, 0.8161823126549262, 0.8550909949358914, 0.8588728753055234, 0.84360581179627, 0.6875732098492277, 0.6877192121403455, 9.999999999998899e-05, 0.678904118308409, 0.3397621908367653, 0.7050183207332948, 0.04990859108081691, 0.05515979824443329, 0.057488289042187724, 0.10911267437406713, 0.10964221883269087, 0.12324878573704734, 0.1211140008560766, 0.11335169036871562, 0.1293069197002773, 0.11629242529481831, 0.12390666267116246, 0.09822434378109124, 0.09430513861392631, 0.09153931343710187, 0.13955581114389026, 0.09159284898452458, 0.07593561425827189, 0.14918121496981807, 0.08305401759662434, 0.13376603056269065, 0.04289584664243862, 0.9798746572255668, 0.9804290622560553, 0.9782166530587577, 0.9759085106031654, 0.9683160065130307, 0.9712167838923301, 0.9811093980442558, 0.9783873415065478, 0.9791708441776308, 0.5046388641381896, 0.05880988741940185, 0.49526300120870537, 0.5194103027472987, 0.5011114006250913, 0.14827934796185926, 0.5281404099822103, 0.516456844969898, 0.08622678299056585, 0.8976283177724566, 0.38589234700727726, 0.8146440237465294, 0.21065834404502548, 0.8693949046032984, 0.2103539169030164, 0.8609597815377024, 0.8290146941734402, 0.8629006061500628, 0.5634232808140376, 0.12911504431997167, 0.3490459835255053, 0.1301460490757157, 0.550283166980273, 0.6384768006808554, 0.6075004807339657, 0.5334209208932708, 0.5187265315247553, 0.6162334892548713, 0.01006905583439599, 0.4838754999453746, 0.6898205258372068, 0.5347846125750878, 0.6237720572638867, 0.1316106414084015, 0.10469558642818011, 0.21981401279697688, 0.06862209051318913, 0.06742395145379065, 0.0642172659401955, 9.999999999998899e-05, 0.583557215538813, 0.5184770572201423, 0.46360377481140647, 9.999999999998899e-05, 0.3910333135485424, 0.6171013778483139, 0.6860912574406677, 0.6886075009961633, 0.5405248475496538, 0.5972809627304024, 0.30926449035756365, 0.7481803296142633, 0.5307796844214036, 0.7053529626378544, 0.3148487352748882, 0.04680721531591481, 9.999999999998899e-05, 0.2945230544492339, 0.08058785730973939, 0.27157342640388693, 0.19161711414975313, 0.07639444929945383, 0.08147772200232062, 0.4844181830684251, 0.49639835767991236, 0.3529524022811683, 0.00632968859517391, 0.006351426540178506, 0.4373350600788549, 0.38276779317757537, 0.4681684862568172, 0.3554636247242682, 0.8122399587440545, 0.8188379631738882, 0.8001313585442834, 0.8080956412167342, 0.7587405988648259, 0.7775440218416758, 0.8056725296265196, 0.7857361285262546, 0.8293387581801851, 0.12939216492547223, 0.10625471020425903, 0.10560220517087948, 0.10901563484320775, 0.11846534388465357, 0.1006230686080567, 0.15563897250359382, 0.1432454980701503, 0.0886007812719285, 0.176302444155798, 0.21506320853831562, 0.1440272808553571, 0.2251037659572629, 0.505992637556517, 0.1475994010838032, 0.2826951964396831, 0.2574055225625653, 0.2268765572550271, 0.3795791358372538, 0.27979397147344476, 0.3782931468677825, 0.5131009328054771, 0.33728342493829255, 0.30475618162177043, 0.4316533705609179, 0.46975390266688566, 0.5301585667948222, 0.23557894755519615, 0.1791999672548643, 0.24829131736218246, 0.28198572145880385, 0.20172359437644916, 0.2861620523459544, 0.26633869314969794, 0.45867726244365226, 0.3712477035319076, 0.221121743765483, 0.18142250898145307, 0.19457605543899636, 0.18771798848466614, 0.2057032423799341, 0.1804875804387175, 0.22808830858593554, 0.23836861071500282, 0.21382658690052958, 0.18561201112004433, 0.20558602622401112, 0.20847470310177063, 0.20942212692537598, 0.19880797560619545, 0.16994079059796108, 0.18529516467896867, 0.21126200891681934, 0.20924447555248116, 0.8867257637279232, 0.18465451636708163, 0.18640459932690767, 0.16830915680974246, 0.2005227878381839, 0.861728454211782, 0.15168337329757398, 0.16635092364579285, 0.16789250117073662, 0.8981321511124607, 0.15627563018590285, 0.7644109436006539, 0.16412611828903778, 0.16815752611520185, 0.8072465908432986, 0.20851796454608906, 0.09425422838629005, 0.10492393043588888, 0.18612836002905775, 0.17537369980697282, 0.19003494159480883, 0.1805654897155069, 0.17047998914423312, 0.17904660993870092, 0.18413051874769726, 0.175758153249014, 0.1999710047999952, 0.08310511952289379, 0.08328757147754329, 0.1129556427467947, 0.07150474837883125, 0.0758242202753201, 0.08463907719508657, 0.07664184133717977, 0.07304351808989629, 0.08033531581775]}, "mutation_prompt": null}
{"id": "5b44b99b-b430-4650-895e-524243f49bab", "solution": "class DynamicHybridPSOSA_DE(HybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr)\n        self.f_lower = f_lower\n        self.f_upper = f_upper\n        self.cr_lower = cr_lower\n        self.cr_upper = cr_upper\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.f + (self.f_upper - self.f_lower) * np.random.rand()))  # Dynamic F\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.cr + (self.cr_upper - self.cr_lower) * np.random.rand()))  # Dynamic CR\n\n        return global_best_val", "name": "DynamicHybridPSOSA_DE", "description": "Improve exploration-exploitation balance by dynamically adjusting differential evolution parameters during the optimization process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c0b5cff-1fe9-4e9a-b2d1-a0ccadf44d4f", "metadata": {"aucs": [0.8510351779802632, 0.8694260356251269, 0.8713800451132899, 0.862315836250332, 0.7815854935769965, 0.8161823126549262, 0.8550909949358914, 0.8588728753055234, 0.84360581179627, 0.6875732098492277, 0.6877192121403455, 9.999999999998899e-05, 0.678904118308409, 0.3397621908367653, 0.7050183207332948, 0.04990859108081691, 0.05515979824443329, 0.057488289042187724, 0.10911267437406713, 0.10964221883269087, 0.12324878573704734, 0.1211140008560766, 0.11335169036871562, 0.1293069197002773, 0.11629242529481831, 0.12390666267116246, 0.09822434378109124, 0.09430513861392631, 0.09153931343710187, 0.13955581114389026, 0.09159284898452458, 0.07593561425827189, 0.14918121496981807, 0.08305401759662434, 0.13376603056269065, 0.04289584664243862, 0.9798746572255668, 0.9804290622560553, 0.9782166530587577, 0.9759085106031654, 0.9683160065130307, 0.9712167838923301, 0.9811093980442558, 0.9783873415065478, 0.9791708441776308, 0.5046388641381896, 0.05880988741940185, 0.49526300120870537, 0.5194103027472987, 0.5011114006250913, 0.14827934796185926, 0.5281404099822103, 0.516456844969898, 0.08622678299056585, 0.8976283177724566, 0.38589234700727726, 0.8146440237465294, 0.21065834404502548, 0.8693949046032984, 0.2103539169030164, 0.8609597815377024, 0.8290146941734402, 0.8629006061500628, 0.5634232808140376, 0.12911504431997167, 0.3490459835255053, 0.1301460490757157, 0.550283166980273, 0.6384768006808554, 0.6075004807339657, 0.5334209208932708, 0.5187265315247553, 0.6162334892548713, 0.01006905583439599, 0.4838754999453746, 0.6898205258372068, 0.5347846125750878, 0.6237720572638867, 0.1316106414084015, 0.10469558642818011, 0.21981401279697688, 0.06862209051318913, 0.06742395145379065, 0.0642172659401955, 9.999999999998899e-05, 0.583557215538813, 0.5184770572201423, 0.46360377481140647, 9.999999999998899e-05, 0.3910333135485424, 0.6171013778483139, 0.6860912574406677, 0.6886075009961633, 0.5405248475496538, 0.5972809627304024, 0.30926449035756365, 0.7481803296142633, 0.5307796844214036, 0.7053529626378544, 0.3148487352748882, 0.04680721531591481, 9.999999999998899e-05, 0.2945230544492339, 0.08058785730973939, 0.27157342640388693, 0.19161711414975313, 0.07639444929945383, 0.08147772200232062, 0.4844181830684251, 0.49639835767991236, 0.3529524022811683, 0.00632968859517391, 0.006351426540178506, 0.4373350600788549, 0.38276779317757537, 0.4681684862568172, 0.3554636247242682, 0.8122399587440545, 0.8188379631738882, 0.8001313585442834, 0.8080956412167342, 0.7587405988648259, 0.7775440218416758, 0.8056725296265196, 0.7857361285262546, 0.8293387581801851, 0.12939216492547223, 0.10625471020425903, 0.10560220517087948, 0.10901563484320775, 0.11846534388465357, 0.1006230686080567, 0.15563897250359382, 0.1432454980701503, 0.0886007812719285, 0.176302444155798, 0.21506320853831562, 0.1440272808553571, 0.2251037659572629, 0.505992637556517, 0.1475994010838032, 0.2826951964396831, 0.2574055225625653, 0.2268765572550271, 0.3795791358372538, 0.27979397147344476, 0.3782931468677825, 0.5131009328054771, 0.33728342493829255, 0.30475618162177043, 0.4316533705609179, 0.46975390266688566, 0.5301585667948222, 0.23557894755519615, 0.1791999672548643, 0.24829131736218246, 0.28198572145880385, 0.20172359437644916, 0.2861620523459544, 0.26633869314969794, 0.45867726244365226, 0.3712477035319076, 0.221121743765483, 0.18142250898145307, 0.19457605543899636, 0.18771798848466614, 0.2057032423799341, 0.1804875804387175, 0.22808830858593554, 0.23836861071500282, 0.21382658690052958, 0.18561201112004433, 0.20558602622401112, 0.20847470310177063, 0.20942212692537598, 0.19880797560619545, 0.16994079059796108, 0.18529516467896867, 0.21126200891681934, 0.20924447555248116, 0.8867257637279232, 0.18465451636708163, 0.18640459932690767, 0.16830915680974246, 0.2005227878381839, 0.861728454211782, 0.15168337329757398, 0.16635092364579285, 0.16789250117073662, 0.8981321511124607, 0.15627563018590285, 0.7644109436006539, 0.16412611828903778, 0.16815752611520185, 0.8072465908432986, 0.20851796454608906, 0.09425422838629005, 0.10492393043588888, 0.18612836002905775, 0.17537369980697282, 0.19003494159480883, 0.1805654897155069, 0.17047998914423312, 0.17904660993870092, 0.18413051874769726, 0.175758153249014, 0.1999710047999952, 0.08310511952289379, 0.08328757147754329, 0.1129556427467947, 0.07150474837883125, 0.0758242202753201, 0.08463907719508657, 0.07664184133717977, 0.07304351808989629, 0.08033531581775]}, "mutation_prompt": null}
{"id": "4bed327d-c09f-4d3f-bb00-c1c224b9dee2", "solution": "class ChaoticHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, chaotic_map='logistic'):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.chaotic_map = chaotic_map\n\n    def chaotic_map_func(self, x):\n        if self.chaotic_map == 'logistic':\n            return 4.0 * x * (1.0 - x)\n        elif self.chaotic_map == 'sinusoidal':\n            return np.sin(np.pi * x)\n        elif self.chaotic_map == 'tent':\n            return np.where(x < 0.5, 2.0 * x, 2.0 * (1.0 - x))\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                chaotic_values = self.chaotic_map_func(mutant)  # Inject diversity using chaotic map\n                mutant = np.clip(mutant + chaotic_values, lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.f + (self.f_upper - self.f_lower) * np.random.rand()))  # Dynamic F\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.cr + (self.cr_upper - self.cr_lower) * np.random.rand()))  # Dynamic CR\n\n        return global_best_val", "name": "ChaoticHybridPSOSA_DE", "description": "Enhance exploration by incorporating a mutation strategy based on chaotic maps to inject diversity into the search process.", "configspace": "", "generation": 21, "fitness": 0.23377941352413417, "feedback": "The algorithm ChaoticHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.24.", "error": "", "parent_id": "1c0b5cff-1fe9-4e9a-b2d1-a0ccadf44d4f", "metadata": {"aucs": [0.8011372074358466, 0.828714159096216, 0.8692521459999011, 0.8635648827162679, 0.791544138932695, 0.8097764203329165, 0.8384063127924142, 0.5169896108847973, 0.8267716848762552, 0.12635560560548398, 0.00021376943010142924, 0.09518914908171972, 0.1578465231860362, 0.06044296903656998, 9.999999999998899e-05, 9.999999999998899e-05, 0.24249178165963736, 9.999999999998899e-05, 0.11026060859156461, 0.051465122321373014, 0.0999223953502445, 0.09661505439813589, 0.10751704646490834, 0.12046381868097655, 0.09477781593272228, 0.12050613539327182, 0.09069350552225819, 0.07407582944754287, 0.028309489788330366, 0.07311399125533757, 0.09649607673600202, 0.07910573822097089, 0.08287520337128285, 0.1315902115087858, 0.03241783890098959, 0.08455474906353178, 0.9790367309362891, 0.9795367692293784, 0.9788457988709978, 0.9654181748289866, 0.969409628365962, 0.9772956322618995, 0.9983649378217471, 0.985631418936032, 0.9856841097894072, 0.08015252172379062, 0.055450857677130316, 0.25803590020655587, 0.11250178307593106, 0.0926281206272046, 0.09050967892428785, 0.12316037926395562, 0.3595573794904533, 9.999999999998899e-05, 0.22495905857119547, 0.3885657100265053, 0.13980516902987639, 0.19437131102569394, 0.1884789261297839, 0.3802712838798181, 0.11148021281226206, 0.13045702263979453, 0.17123098162809147, 0.19606372803144234, 0.12596672300950051, 0.13315244488469047, 0.18250961663265086, 0.12714499805329083, 0.12918244706395932, 0.157717715224034, 0.12607591228929793, 0.21279258692992153, 0.21748916552005015, 0.11504970153946903, 0.17556028635171883, 0.14899619964612687, 0.18410462607281675, 0.1270261080496633, 0.13325089272231727, 0.006494733590901358, 0.11494805633729843, 9.999999999998899e-05, 0.045472223777378584, 0.011625690661750898, 0.028684962125750335, 0.02612676013496007, 9.999999999998899e-05, 0.013822822716242578, 0.12415968848201375, 0.0576583314554826, 0.06675052907979284, 0.10739149130234704, 0.09668420113307441, 0.1255579624245673, 0.05970098220260189, 0.03609279655114428, 0.12886729524703078, 0.07518648671734396, 0.21303609943196056, 0.18992397518045379, 0.12792959921752867, 0.04835837516722308, 0.07201725780645774, 0.07605065980873238, 0.0753620788819348, 0.09344188348663174, 0.0942223942432604, 0.2890364472446092, 0.09772832966431522, 0.07058843454453467, 0.3991629854891894, 0.10538401258654262, 0.30247979667647806, 0.21286064241095337, 0.10441009267186141, 9.999999999998899e-05, 0.08239125529216385, 0.5451822327238808, 0.4524365258916053, 0.6793770877815897, 0.591361986640077, 0.6506182991269129, 0.532997505902521, 0.4457868830572411, 0.41502133126161034, 0.49159052379175106, 0.04748641157480937, 0.1142277814464584, 0.11142049733138337, 0.07403894825040458, 0.08970557233202525, 0.1370643213348094, 0.07928983808740975, 0.13163954232168962, 0.0688796662923935, 0.21544773265474282, 0.16676327852655226, 0.13875302530896583, 0.18474269703135582, 0.2222287719293632, 0.1792850347542635, 0.2234457152245064, 0.171114088331084, 0.2090523609445719, 0.20109611662774085, 0.2725477071535576, 0.2781751045681572, 0.32931362561324873, 0.21585832175230035, 0.3272608229849252, 0.25166152645776474, 0.23840360708487995, 0.1880404212098934, 0.19049765151146836, 0.25278486566243596, 0.20560416047031438, 0.18270609873483956, 0.14923069606950268, 0.19904055565785284, 0.21893086177752108, 0.2289912636427618, 0.14300196682726585, 0.20607711342125246, 0.23626844239177602, 0.24881545247752823, 0.21034462019813438, 0.19723844643136446, 0.22294332296056052, 0.2047302419235929, 0.19106055672145983, 0.24010388660610138, 0.19537953070727376, 0.19280118143950753, 0.1780816500048411, 0.17914230448620438, 0.1781170786952695, 0.1737793487325422, 0.17545932354706018, 0.19204943182382206, 0.2103798981721683, 0.874989318699644, 0.16142489780349756, 0.18641550174360377, 0.8960174014747846, 0.19988204604801874, 0.1998761165966897, 0.15076076578978337, 0.1660649853898063, 0.7880810050272186, 0.39052527313587815, 0.1562479150035626, 0.11105339900919842, 0.20838014481432388, 0.22093346171929729, 0.20537156665523415, 0.10320319204211392, 0.147387758737211, 0.21122023520585775, 0.18637809143297468, 0.17833174965365872, 0.16878403883966842, 0.18794780375712505, 0.17542082505370904, 0.1876491711035585, 0.17831897471443992, 0.1847668458724484, 0.17462580500060199, 0.11415092208805144, 0.09504992146859836, 0.08024446601512158, 0.10531339978380716, 0.10334568808752775, 0.07196638683037837, 0.0758533973577159, 0.08642118010229827, 0.09238582920112548]}, "mutation_prompt": null}
{"id": "eed4ca80-ff36-48ee-a6e1-95b25099b810", "solution": "class DynamicHybridPSOSA_DE(HybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr)\n        self.f_lower = f_lower\n        self.f_upper = f_upper\n        self.cr_lower = cr_lower\n        self.cr_upper = cr_upper\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.f + (self.f_upper - self.f_lower) * np.random.rand()))  # Dynamic F\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.cr + (self.cr_upper - self.cr_lower) * np.random.rand()))  # Dynamic CR\n\n        return global_best_val", "name": "DynamicHybridPSOSA_DE", "description": "Improve exploration-exploitation balance by dynamically adjusting differential evolution parameters during the optimization process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c0b5cff-1fe9-4e9a-b2d1-a0ccadf44d4f", "metadata": {"aucs": [0.8510351779802632, 0.8694260356251269, 0.8713800451132899, 0.862315836250332, 0.7815854935769965, 0.8161823126549262, 0.8550909949358914, 0.8588728753055234, 0.84360581179627, 0.6875732098492277, 0.6877192121403455, 9.999999999998899e-05, 0.678904118308409, 0.3397621908367653, 0.7050183207332948, 0.04990859108081691, 0.05515979824443329, 0.057488289042187724, 0.10911267437406713, 0.10964221883269087, 0.12324878573704734, 0.1211140008560766, 0.11335169036871562, 0.1293069197002773, 0.11629242529481831, 0.12390666267116246, 0.09822434378109124, 0.09430513861392631, 0.09153931343710187, 0.13955581114389026, 0.09159284898452458, 0.07593561425827189, 0.14918121496981807, 0.08305401759662434, 0.13376603056269065, 0.04289584664243862, 0.9798746572255668, 0.9804290622560553, 0.9782166530587577, 0.9759085106031654, 0.9683160065130307, 0.9712167838923301, 0.9811093980442558, 0.9783873415065478, 0.9791708441776308, 0.5046388641381896, 0.05880988741940185, 0.49526300120870537, 0.5194103027472987, 0.5011114006250913, 0.14827934796185926, 0.5281404099822103, 0.516456844969898, 0.08622678299056585, 0.8976283177724566, 0.38589234700727726, 0.8146440237465294, 0.21065834404502548, 0.8693949046032984, 0.2103539169030164, 0.8609597815377024, 0.8290146941734402, 0.8629006061500628, 0.5634232808140376, 0.12911504431997167, 0.3490459835255053, 0.1301460490757157, 0.550283166980273, 0.6384768006808554, 0.6075004807339657, 0.5334209208932708, 0.5187265315247553, 0.6162334892548713, 0.01006905583439599, 0.4838754999453746, 0.6898205258372068, 0.5347846125750878, 0.6237720572638867, 0.1316106414084015, 0.10469558642818011, 0.21981401279697688, 0.06862209051318913, 0.06742395145379065, 0.0642172659401955, 9.999999999998899e-05, 0.583557215538813, 0.5184770572201423, 0.46360377481140647, 9.999999999998899e-05, 0.3910333135485424, 0.6171013778483139, 0.6860912574406677, 0.6886075009961633, 0.5405248475496538, 0.5972809627304024, 0.30926449035756365, 0.7481803296142633, 0.5307796844214036, 0.7053529626378544, 0.3148487352748882, 0.04680721531591481, 9.999999999998899e-05, 0.2945230544492339, 0.08058785730973939, 0.27157342640388693, 0.19161711414975313, 0.07639444929945383, 0.08147772200232062, 0.4844181830684251, 0.49639835767991236, 0.3529524022811683, 0.00632968859517391, 0.006351426540178506, 0.4373350600788549, 0.38276779317757537, 0.4681684862568172, 0.3554636247242682, 0.8122399587440545, 0.8188379631738882, 0.8001313585442834, 0.8080956412167342, 0.7587405988648259, 0.7775440218416758, 0.8056725296265196, 0.7857361285262546, 0.8293387581801851, 0.12939216492547223, 0.10625471020425903, 0.10560220517087948, 0.10901563484320775, 0.11846534388465357, 0.1006230686080567, 0.15563897250359382, 0.1432454980701503, 0.0886007812719285, 0.176302444155798, 0.21506320853831562, 0.1440272808553571, 0.2251037659572629, 0.505992637556517, 0.1475994010838032, 0.2826951964396831, 0.2574055225625653, 0.2268765572550271, 0.3795791358372538, 0.27979397147344476, 0.3782931468677825, 0.5131009328054771, 0.33728342493829255, 0.30475618162177043, 0.4316533705609179, 0.46975390266688566, 0.5301585667948222, 0.23557894755519615, 0.1791999672548643, 0.24829131736218246, 0.28198572145880385, 0.20172359437644916, 0.2861620523459544, 0.26633869314969794, 0.45867726244365226, 0.3712477035319076, 0.221121743765483, 0.18142250898145307, 0.19457605543899636, 0.18771798848466614, 0.2057032423799341, 0.1804875804387175, 0.22808830858593554, 0.23836861071500282, 0.21382658690052958, 0.18561201112004433, 0.20558602622401112, 0.20847470310177063, 0.20942212692537598, 0.19880797560619545, 0.16994079059796108, 0.18529516467896867, 0.21126200891681934, 0.20924447555248116, 0.8867257637279232, 0.18465451636708163, 0.18640459932690767, 0.16830915680974246, 0.2005227878381839, 0.861728454211782, 0.15168337329757398, 0.16635092364579285, 0.16789250117073662, 0.8981321511124607, 0.15627563018590285, 0.7644109436006539, 0.16412611828903778, 0.16815752611520185, 0.8072465908432986, 0.20851796454608906, 0.09425422838629005, 0.10492393043588888, 0.18612836002905775, 0.17537369980697282, 0.19003494159480883, 0.1805654897155069, 0.17047998914423312, 0.17904660993870092, 0.18413051874769726, 0.175758153249014, 0.1999710047999952, 0.08310511952289379, 0.08328757147754329, 0.1129556427467947, 0.07150474837883125, 0.0758242202753201, 0.08463907719508657, 0.07664184133717977, 0.07304351808989629, 0.08033531581775]}, "mutation_prompt": null}
{"id": "50424625-0bb9-4c14-bad4-f53bdeb1b7a5", "solution": "class ProbabilisticDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, prob_update=0.1):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.prob_update = prob_update\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                if np.random.rand() < self.prob_update:  # Update position probabilistically\n                    a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                    mutant = np.clip(a + self.f * (b - c), lb, ub)\n                    crossover = np.random.rand(self.dim) < self.cr\n                    trial = swarm[i].copy()\n                    trial[crossover] = mutant[crossover]\n                    trial_fitness = func(trial)\n\n                    if trial_fitness < fitness:\n                        swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.f + (self.f_upper - self.f_lower) * np.random.rand()))  # Dynamic F\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.cr + (self.cr_upper - self.cr_lower) * np.random.rand()))  # Dynamic CR\n\n        return global_best_val\n", "name": "ProbabilisticDynamicHybridPSOSA_DE", "description": "Improve exploration-exploitation balance by dynamically adjusting differential evolution parameters and updating particle positions based on a probabilistic approach.", "configspace": "", "generation": 23, "fitness": 0.281497183317922, "feedback": "The algorithm ProbabilisticDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "1c0b5cff-1fe9-4e9a-b2d1-a0ccadf44d4f", "metadata": {"aucs": [0.9214589621987406, 0.9191437421611239, 0.9200108427928491, 0.8870786170690144, 0.8160751359515906, 0.7851240585817537, 0.9295398118100535, 0.9306410352204516, 0.916781872324128, 0.7824801695894545, 9.999999999998899e-05, 9.999999999998899e-05, 0.37060158852365277, 0.042871771568119166, 0.1752704649608151, 0.4009073427035177, 0.17398432107739392, 0.377242257029873, 0.08941762345922255, 0.09709982027664699, 0.1253105598944092, 0.14577728034213144, 0.09724668765569111, 0.09283029381845098, 0.08319623110982632, 0.07986266495822547, 0.10679946860706169, 0.09360129630853586, 0.04769247413007327, 0.06808690238198889, 0.07148833773054408, 0.06450628044135953, 0.08958350442865248, 0.049545386715824535, 0.1171957411939264, 0.038895232756041564, 0.9858164749561624, 0.9905678600414645, 0.9883300806521745, 0.9790042709124321, 0.9824268868926732, 0.9789765193637983, 0.9817333259813622, 0.9894361168131963, 0.9851601389297105, 0.20678482183515834, 0.5149315642237594, 0.28039255943843133, 0.15485893680332896, 0.5600321304295661, 0.3900138023188975, 0.18063619288321375, 0.1259788888981056, 0.8117067077923524, 0.2541585575432358, 0.14032926219323905, 0.13134864226007448, 0.20502976280893848, 0.20709820875038398, 0.2145200590745696, 0.09057550290384186, 0.1774410772616628, 0.22877167846317736, 0.5890933788127075, 0.12660251347072848, 0.19656626285305667, 0.20132973128098297, 0.13131492047117643, 0.20194793618740547, 0.34293800968171195, 0.542237139388577, 0.16639432438022372, 0.29014808899556077, 0.1384460290204037, 0.13367478934213828, 0.17522545574407267, 0.1322647938629814, 0.21338551314645293, 0.2669013913842734, 0.14250571724100425, 0.10812052825646001, 0.10941278091125062, 9.999999999998899e-05, 0.11367506932482829, 0.06242740755558007, 9.999999999998899e-05, 9.999999999998899e-05, 0.040849798787293334, 9.999999999998899e-05, 0.18296964777435165, 0.09124017660058037, 0.1016190147888405, 0.14277641418138298, 0.13553955141712326, 0.028812676585847075, 0.07964978830507519, 0.24659317857758156, 0.11743696225119715, 0.10414144109156709, 0.045558685350506334, 0.03652502732756857, 0.22340681078457825, 0.33934868312933586, 0.08298546800780748, 0.08217440845740343, 0.14986477968264622, 0.1415099735638391, 0.08314787878716356, 0.27468745047887955, 0.1759463783725731, 0.34898850094950007, 0.0067950825704203854, 0.22053881734701009, 0.23190371422501332, 0.11434649793733365, 0.20487997242588374, 0.08511821999798341, 0.6421273241068478, 0.5802790529626258, 0.6145632956884362, 0.6834669034623653, 0.6314154989905643, 0.6267599497269589, 0.8171498832995412, 0.717851335094946, 0.7367216605936355, 0.05165122627342644, 0.05926501437098208, 0.08273408986821229, 0.08089388610209458, 0.10097512366547512, 0.13465922346394565, 0.14600955115044212, 0.08636445999303399, 0.07297118387117008, 0.2857939025989725, 0.19505771601948685, 0.2930939608062665, 0.25678547937301144, 0.16635484018376667, 0.16063616978135398, 0.2184127079099203, 0.19380239705487357, 0.1920082712324661, 0.4129632260192526, 0.2705834206132205, 0.24166640669219475, 0.20215285957785578, 0.24730747078272253, 0.3423721911224318, 0.214351792591716, 0.2407115882855081, 0.27204912264843184, 0.27299033180821475, 0.24675308215386083, 0.22465126406071223, 0.22173638493851744, 0.19961098072843186, 0.30194279687032133, 0.2123900043210467, 0.24036714011757598, 0.18153816513659637, 0.22250308772330718, 0.15991176879447577, 0.27378937942953563, 0.22882283659006397, 0.23377362094255216, 0.22663189796458982, 0.2664560163767291, 0.21071374785587105, 0.2300588429444228, 0.1921731797644276, 0.18494309951648702, 0.1958304027346066, 0.20450892814267074, 0.20134374271582933, 0.2176157437060925, 0.1800771696114345, 0.18740585391453624, 0.1834518086480904, 0.9477600941782964, 0.1691182783997185, 0.15279318379237994, 0.9381286633825998, 0.20148852983929477, 0.20123279015114626, 0.15395545989749604, 0.16909067474669626, 0.20404731147655486, 0.69654118271342, 0.15739912962158398, 0.44444116034856795, 0.21159315567719483, 0.16813227578097356, 0.8862194300686088, 0.10375444425918812, 0.10496144028465293, 0.6505843794527291, 0.22078404994486234, 0.24080677057427124, 0.19416725258820833, 0.22347201294354269, 0.25476308238443657, 0.2053347234245959, 0.2403484024060637, 0.2656043868580621, 0.2522309660429891, 0.09482429422285443, 0.10999414130237617, 0.084992114972821, 0.09770707507233911, 0.09398679379574237, 0.0807814201904613, 0.09856075348311755, 0.07746267397065498, 0.08440104366956624]}, "mutation_prompt": null}
{"id": "ba839e25-2654-4948-8574-7a8b36f00834", "solution": "class DynamicHybridPSOSA_DE(HybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr)\n        self.f_lower = f_lower\n        self.f_upper = f_upper\n        self.cr_lower = cr_lower\n        self.cr_upper = cr_upper\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.f + (self.f_upper - self.f_lower) * np.random.rand()))  # Dynamic F\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.cr + (self.cr_upper - self.cr_lower) * np.random.rand()))  # Dynamic CR\n\n        return global_best_val", "name": "DynamicHybridPSOSA_DE", "description": "Improve exploration-exploitation balance by dynamically adjusting differential evolution parameters during the optimization process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1c0b5cff-1fe9-4e9a-b2d1-a0ccadf44d4f", "metadata": {"aucs": [0.8510351779802632, 0.8694260356251269, 0.8713800451132899, 0.862315836250332, 0.7815854935769965, 0.8161823126549262, 0.8550909949358914, 0.8588728753055234, 0.84360581179627, 0.6875732098492277, 0.6877192121403455, 9.999999999998899e-05, 0.678904118308409, 0.3397621908367653, 0.7050183207332948, 0.04990859108081691, 0.05515979824443329, 0.057488289042187724, 0.10911267437406713, 0.10964221883269087, 0.12324878573704734, 0.1211140008560766, 0.11335169036871562, 0.1293069197002773, 0.11629242529481831, 0.12390666267116246, 0.09822434378109124, 0.09430513861392631, 0.09153931343710187, 0.13955581114389026, 0.09159284898452458, 0.07593561425827189, 0.14918121496981807, 0.08305401759662434, 0.13376603056269065, 0.04289584664243862, 0.9798746572255668, 0.9804290622560553, 0.9782166530587577, 0.9759085106031654, 0.9683160065130307, 0.9712167838923301, 0.9811093980442558, 0.9783873415065478, 0.9791708441776308, 0.5046388641381896, 0.05880988741940185, 0.49526300120870537, 0.5194103027472987, 0.5011114006250913, 0.14827934796185926, 0.5281404099822103, 0.516456844969898, 0.08622678299056585, 0.8976283177724566, 0.38589234700727726, 0.8146440237465294, 0.21065834404502548, 0.8693949046032984, 0.2103539169030164, 0.8609597815377024, 0.8290146941734402, 0.8629006061500628, 0.5634232808140376, 0.12911504431997167, 0.3490459835255053, 0.1301460490757157, 0.550283166980273, 0.6384768006808554, 0.6075004807339657, 0.5334209208932708, 0.5187265315247553, 0.6162334892548713, 0.01006905583439599, 0.4838754999453746, 0.6898205258372068, 0.5347846125750878, 0.6237720572638867, 0.1316106414084015, 0.10469558642818011, 0.21981401279697688, 0.06862209051318913, 0.06742395145379065, 0.0642172659401955, 9.999999999998899e-05, 0.583557215538813, 0.5184770572201423, 0.46360377481140647, 9.999999999998899e-05, 0.3910333135485424, 0.6171013778483139, 0.6860912574406677, 0.6886075009961633, 0.5405248475496538, 0.5972809627304024, 0.30926449035756365, 0.7481803296142633, 0.5307796844214036, 0.7053529626378544, 0.3148487352748882, 0.04680721531591481, 9.999999999998899e-05, 0.2945230544492339, 0.08058785730973939, 0.27157342640388693, 0.19161711414975313, 0.07639444929945383, 0.08147772200232062, 0.4844181830684251, 0.49639835767991236, 0.3529524022811683, 0.00632968859517391, 0.006351426540178506, 0.4373350600788549, 0.38276779317757537, 0.4681684862568172, 0.3554636247242682, 0.8122399587440545, 0.8188379631738882, 0.8001313585442834, 0.8080956412167342, 0.7587405988648259, 0.7775440218416758, 0.8056725296265196, 0.7857361285262546, 0.8293387581801851, 0.12939216492547223, 0.10625471020425903, 0.10560220517087948, 0.10901563484320775, 0.11846534388465357, 0.1006230686080567, 0.15563897250359382, 0.1432454980701503, 0.0886007812719285, 0.176302444155798, 0.21506320853831562, 0.1440272808553571, 0.2251037659572629, 0.505992637556517, 0.1475994010838032, 0.2826951964396831, 0.2574055225625653, 0.2268765572550271, 0.3795791358372538, 0.27979397147344476, 0.3782931468677825, 0.5131009328054771, 0.33728342493829255, 0.30475618162177043, 0.4316533705609179, 0.46975390266688566, 0.5301585667948222, 0.23557894755519615, 0.1791999672548643, 0.24829131736218246, 0.28198572145880385, 0.20172359437644916, 0.2861620523459544, 0.26633869314969794, 0.45867726244365226, 0.3712477035319076, 0.221121743765483, 0.18142250898145307, 0.19457605543899636, 0.18771798848466614, 0.2057032423799341, 0.1804875804387175, 0.22808830858593554, 0.23836861071500282, 0.21382658690052958, 0.18561201112004433, 0.20558602622401112, 0.20847470310177063, 0.20942212692537598, 0.19880797560619545, 0.16994079059796108, 0.18529516467896867, 0.21126200891681934, 0.20924447555248116, 0.8867257637279232, 0.18465451636708163, 0.18640459932690767, 0.16830915680974246, 0.2005227878381839, 0.861728454211782, 0.15168337329757398, 0.16635092364579285, 0.16789250117073662, 0.8981321511124607, 0.15627563018590285, 0.7644109436006539, 0.16412611828903778, 0.16815752611520185, 0.8072465908432986, 0.20851796454608906, 0.09425422838629005, 0.10492393043588888, 0.18612836002905775, 0.17537369980697282, 0.19003494159480883, 0.1805654897155069, 0.17047998914423312, 0.17904660993870092, 0.18413051874769726, 0.175758153249014, 0.1999710047999952, 0.08310511952289379, 0.08328757147754329, 0.1129556427467947, 0.07150474837883125, 0.0758242202753201, 0.08463907719508657, 0.07664184133717977, 0.07304351808989629, 0.08033531581775]}, "mutation_prompt": null}
{"id": "fb540dc7-d286-415e-9025-261da0331963", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 25, "fitness": 0.3846107710107131, "feedback": "The algorithm ImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.29.", "error": "", "parent_id": "1c0b5cff-1fe9-4e9a-b2d1-a0ccadf44d4f", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "671750fa-db6b-49e6-96ab-8a7023aeccc4", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "63c37605-6997-49c5-a9a3-1a5cb8cceecd", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def local_search(self, position, func):\n        lb, ub = -5.0, 5.0\n        best_position = position.copy()\n        best_fitness = func(position)\n        \n        for _ in range(10):  # Perform local search for a fixed number of iterations\n            candidate = np.clip(position + 0.1 * np.random.randn(self.dim), lb, ub)  # Perturb the position\n            candidate_fitness = func(candidate)\n            if candidate_fitness < best_fitness:\n                best_fitness = candidate_fitness\n                best_position = candidate\n        \n        return best_position\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n                else:\n                    swarm[i] = self.local_search(swarm[i], func)  # Integrate local search if the trial is not accepted\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Integrate a local search mechanism within the algorithm to exploit promising regions and improve convergence speed.", "configspace": "", "generation": 27, "fitness": 0.23897627886538422, "feedback": "The algorithm ImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.48184894936501754, 0.4741893211391536, 0.4755499190804019, 0.49858648092047675, 0.5063438420767192, 0.5463911965201471, 0.4743605676467604, 0.49824391344881935, 0.44662343936281534, 0.0905594615142905, 0.13702582138526354, 0.024001301095970318, 0.11463565637137396, 0.09844120904014597, 0.1313462105156692, 0.08797963671446363, 0.10125681459371605, 0.05340728257526173, 0.10463951087407586, 0.10072039915329223, 0.09548148690720426, 0.09895588131023159, 0.07986268512137007, 0.09559970305212295, 0.09465452702910093, 0.09614375184865331, 0.10986934451745178, 0.09616300193518323, 0.08477594064805338, 0.08000591870842055, 0.08858166595271122, 0.08434729903756233, 0.05682279157084846, 0.07216160988214582, 0.09455849044000808, 0.07605460257789187, 0.9440514821162485, 0.9535249368870525, 0.9592633382725562, 0.9055084459975213, 0.9558223946555908, 0.9039325152577324, 0.9174867728472081, 0.9490069698425506, 0.9204792020477066, 0.2509536992435716, 0.25446806038623604, 0.26438474258794, 0.2813078183019091, 0.2545444165223528, 0.2414833358602061, 0.2682639297658429, 0.2369945284494478, 0.20935460601615774, 0.7515193566016722, 0.35243214223953634, 0.5824955464328624, 0.2530914596977447, 0.4870375570868263, 0.37308273403283576, 0.3631241997290644, 0.6157973075776553, 0.4205697888177752, 0.12166773000549036, 0.16173111065079304, 0.1833541145165325, 0.1622245802098623, 0.11701301773072537, 0.20063747805499177, 0.15473474360225703, 0.10980059867496128, 0.14936597291148102, 0.19665079782209527, 0.10082857295158887, 0.16337583972489755, 0.22302401182860654, 0.1485323635076118, 0.12155408318071659, 0.18257398992178797, 0.13781733612347047, 0.09997511435166395, 0.04933526382775544, 0.04586346722676915, 0.045723012335299296, 0.042964173678100126, 0.0002605810598852454, 0.056722625342417454, 0.02618343014742419, 0.0956558471028347, 0.0012637581204139048, 0.18729129639910502, 0.09855033045297801, 0.2420833151294357, 0.19841322558165042, 0.03941947630445519, 0.09287874269796415, 0.20716887004212647, 0.18914889690496162, 0.18364279127168692, 0.03266025400070571, 0.019541873180021097, 0.018168452369171972, 0.0350245429537559, 0.047640323584099864, 0.04999965902086789, 0.08904538594166134, 0.01653820035568132, 0.03089714206411387, 0.1417940750463751, 0.14520605401316244, 0.13454446277588683, 0.13626044312338725, 0.1236970702725062, 0.15143486720169863, 0.09505919107696192, 0.12327204583212692, 0.07636901048258715, 0.43666791968228647, 0.44910383322748615, 0.4648721400145648, 0.4376091985423608, 0.41688240760873874, 0.40178694779090196, 0.4763225175979042, 0.42791804966024916, 0.3968375197202104, 0.0902674269297189, 0.09572248880752054, 0.10160033558776227, 0.09531158357099889, 0.10345375969248238, 0.10724832391713135, 0.10153108482307849, 0.1058866366957616, 0.0853833085105683, 0.28729317033160395, 0.21962015242258393, 0.27836047129833075, 0.23364000322087308, 0.22310009438300527, 0.1665337390817494, 0.3051073619262771, 0.1943958124007713, 0.16656889183762613, 0.2797221544931805, 0.28114597900139293, 0.26396602866729, 0.2806628129692428, 0.26067966307981916, 0.2606136847938676, 0.2264705276945631, 0.29273398387571603, 0.23364537096183124, 0.1517698498985277, 0.20915989979013994, 0.2370793650872477, 0.18136209278393278, 0.1502716391547687, 0.17569465132204387, 0.18556391801848282, 0.24381490091103464, 0.21325184233048777, 0.22412803365552714, 0.20276258363889033, 0.19957995649215932, 0.21373956815002615, 0.2008142252101065, 0.21034364434648534, 0.22865654723173434, 0.20854360766917435, 0.2205447752560713, 0.2908092237981028, 0.1991541513856605, 0.21634074616831933, 0.19393262918602072, 0.18525120382771287, 0.20130516748351268, 0.18041629629228062, 0.18931120717619276, 0.19627653004266454, 0.43577553507906086, 0.5617757434966351, 0.18136948387928464, 0.6506382591351958, 0.19607297015265968, 0.16946503992357143, 0.14138462070557867, 0.15552866327127157, 0.6954446488002397, 0.7972957965249257, 0.49384034218627837, 0.10766583916829464, 0.6184026083277492, 0.3270027056833793, 0.20177475027890457, 0.19717401376603116, 0.19891700023297276, 0.6409161933354561, 0.1877664631874062, 0.17292197668802511, 0.18955340170617363, 0.1860471966880647, 0.1847790753272528, 0.1863921927876645, 0.19346717057864848, 0.18837472713203574, 0.17663775806847826, 0.07002922999266015, 0.06424325590297808, 0.0726218518657864, 0.09221942112587844, 0.07816438315761243, 0.08026327664903732, 0.07384528908577159, 0.08430459301551341, 0.0835025829935998]}, "mutation_prompt": null}
{"id": "49c4b394-ad08-42c7-830a-87dd098a339f", "solution": "class ImprovedAdaptiveDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, inertia_min=0.4, inertia_max=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * np.random.rand()\n                velocity[i] = inertia_weight * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedAdaptiveDynamicHybridPSOSA_DE", "description": "Introduce adaptive inertia weight to dynamically adjust the exploration and exploitation trade-off during the optimization process.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedAdaptiveDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedAdaptiveDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "6d77edb5-4a05-4cb3-aacf-4620dd852e7a", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, mutation_rate=0.5):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.mutation_rate = mutation_rate\n\n    def diversity_based_mutation(self, swarm):\n        diversity = np.std(swarm, axis=0)\n        return np.clip(np.random.normal(self.mutation_rate, 0.1) * diversity, 0.1, 0.9)\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            self.mutation_rate = self.diversity_based_mutation(swarm)  # Dynamic mutation rate based on diversity\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a dynamic mutation rate based on the population's diversity to adapt the search strategy during optimization.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "a27551e1-b6ca-4743-a8e6-a05884b38f1a", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            if _ % (self.max_iterations // self.budget) == 0:  # Adapt population size based on fitness evaluations\n                self.num_particles = max(10, int(self.num_particles * 1.1))\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Utilize a dynamic population size adaptation strategy based on fitness evaluations to improve convergence and exploration capabilities.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: ZeroDivisionError('integer division or modulo by zero').", "error": "ZeroDivisionError('integer division or modulo by zero')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "5d331e92-86c5-4ea1-b3ff-1f918e87299e", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "4a13532c-d240-465e-878c-43cb4d7ca192", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, w_lower=0.1, w_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.w_lower = w_lower\n        self.w_upper = w_upper\n\n    def dynamic_inertia_weight(self, w):\n        return max(self.w_lower, min(self.w_upper, self.chaotic_map(w)))  # Dynamic inertia weight using chaotic map\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = self.dynamic_inertia_weight(0.5) * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = self.dynamic_inertia_weight(self.f)  # Dynamic F using chaotic map\n            self.cr = self.dynamic_inertia_weight(self.cr)  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Utilize a dynamic inertia weight strategy to balance exploration and exploitation.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "54e13d6b-1ee2-463d-8a84-3eeaa1cd2990", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def dynamic_population(self, swarm, personal_best_pos, personal_best_val):\n        if np.random.rand() < 0.1:  # 2% change - randomly remove a particle\n            remove_idx = np.random.randint(self.num_particles)\n            swarm = np.delete(swarm, remove_idx, axis=0)\n            personal_best_pos = np.delete(personal_best_pos, remove_idx, axis=0)\n            personal_best_val = np.delete(personal_best_val, remove_idx)\n            \n        if np.random.rand() < 0.1:  # 2% change - randomly add a particle\n            new_particle = -5.0 + 10.0 * np.random.rand(self.dim)\n            swarm = np.vstack([swarm, new_particle])\n            personal_best_pos = np.vstack([personal_best_pos, new_particle])\n            personal_best_val = np.append(personal_best_val, np.inf)\n        \n        return swarm, personal_best_pos, personal_best_val\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            swarm, personal_best_pos, personal_best_val = self.dynamic_population(swarm, personal_best_pos, personal_best_val)  # Dynamic population\n\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(len(swarm)), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Apply a dynamic population size approach by randomly removing and adding particles during the optimization process to enhance diversity and convergence speed.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "e1797c6b-9f9b-4813-b3fa-e479a57b27f8", "solution": "class EnhancedDynamicHybridPSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def dynamic_mutation(self, fitness_history):\n        self.f = max(self.f_lower, min(self.f_upper, np.mean(fitness_history)))  # Dynamic F based on mean fitness\n        self.cr = max(self.cr_lower, min(self.cr_upper, np.std(fitness_history)))  # Dynamic CR based on fitness standard deviation\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n        fitness_history = []\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                fitness_history.append(fitness)\n\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n            self.dynamic_mutation(fitness_history)\n\n        return global_best_val", "name": "EnhancedDynamicHybridPSOSA_DE", "description": "Enhance the diversity of solutions by incorporating a dynamic mutation strategy based on the fitness landscape.", "configspace": "", "generation": 34, "fitness": 0.3709598087172164, "feedback": "The algorithm EnhancedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.28.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8611923953113249, 0.8756844844485531, 0.8901730622435992, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13964270994457706, 0.10098326865960094, 0.11646386726600644, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.10966800495439055, 0.12992843556961964, 0.10142748494109455, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.572347786985054, 0.006362898049683152, 0.509625943763576, 0.3506045577873651, 0.05580482009160237, 0.12039464868660665, 0.47749297313054195, 0.5753199606069445, 0.6566451827843843, 0.6770208167184592, 0.6827299816578121, 0.6131994274638424, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896523785331, 0.14223217833363067, 0.06896165240110308, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.21199264623427738, 0.21434351165775312, 0.2609440563471408, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.39664692578427496, 0.31041783167544845, 0.2634290795504466, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17428232857189918, 0.30420073159543637, 0.36978784816900667, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22543989179998747, 0.217999010468926, 0.21114232939458866, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.15276621927205636, 0.16855868488611248, 0.21220654097676006, 0.9176240018129068, 0.15696780675445732, 0.45574600487497596, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11220149214163244, 0.492258881600215, 0.7998466288849659, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.17152322806162024, 0.18214011421524312, 0.18883893207217894, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "dda08396-a37e-455b-a1eb-23e0bf08421f", "solution": "def levy_flight(dim):\n    beta = 1.5\n    sigma = (math.gamma(1 + beta) * math.sin(math.pi * beta / 2) / (math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n    u = np.random.normal(0, sigma, dim)\n    v = np.random.normal(0, 1, dim)\n    step = u / abs(v) ** (1 / beta)\n    return step\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                step = levy_flight(self.dim)\n                trial = np.clip(swarm[i] + step, lb, ub)\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Enhance exploration by incorporating a new mutation strategy based on Levy flights to improve convergence towards optimal solutions.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'math' is not defined\").", "error": "NameError(\"name 'math' is not defined\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "361532d3-f15b-459d-88d8-5da4cd2dc992", "solution": "class DynamicPopulationSizeImprovedDynamicHybridPSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n        curr_population_size = self.num_particles\n\n        for _ in range(self.max_iterations):\n            for i in range(curr_population_size):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(curr_population_size), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            if global_best_val < np.mean(personal_best_val):\n                curr_population_size = min(2*curr_population_size, self.dim)  # Increase population size if global best improves\n\n        return global_best_val", "name": "DynamicPopulationSizeImprovedDynamicHybridPSOSA_DE", "description": "Utilize a dynamic population size strategy to adapt the number of particles based on algorithm performance.", "configspace": "", "generation": 36, "fitness": 0.17901224659473697, "feedback": "The algorithm DynamicPopulationSizeImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.41282075521757144, 0.5177511498814902, 0.33689745909857904, 0.18340050697983312, 0.18354721597708346, 0.1881392925573272, 0.1756672262606277, 0.15736256019494654, 0.25725092147851014, 9.999999999998899e-05, 0.4185581431818868, 9.999999999998899e-05, 0.11302116320530275, 0.04477819304127939, 0.04255509606406538, 9.999999999998899e-05, 0.26767568394171637, 9.999999999998899e-05, 0.0656735298604002, 0.07134783133405453, 0.05631711636489911, 0.11907134604255332, 0.1478122509686569, 0.17816910326475577, 0.0594533052356897, 0.1297520322222745, 0.05116994556841892, 0.08098047929135521, 0.093131953022486, 0.04026694926023755, 0.04194169059725705, 0.03294206252130838, 0.05715062430914264, 0.03514169836552916, 0.08943153595276687, 0.10516611069865411, 0.9833867203206691, 0.9913763229929932, 0.9939025721569532, 0.9891840910100571, 0.840163403261709, 0.07478895538874952, 0.9919808670946324, 0.9862971583212051, 0.9855108631988849, 0.05986457214091445, 0.1023472293660943, 0.05508130015159163, 0.1690970741241843, 0.22411019285357048, 0.14694661081432336, 0.22539465769655898, 0.05211970008684874, 0.08742901309106765, 0.16745361163391392, 0.13679352316703985, 0.15672634373912275, 0.19561138695204183, 0.11729616167377321, 0.28362871572424997, 0.11052479704583007, 0.1316362986176688, 0.14640307941120467, 0.2314583459017877, 0.13974661202621774, 0.2863845384476459, 9.999999999998899e-05, 0.29834331311138007, 9.999999999998899e-05, 9.999999999998899e-05, 0.342596402725726, 0.13101741560442426, 0.1924139464127368, 0.12205395288562126, 9.999999999998899e-05, 0.1426755717683139, 0.13361945202700864, 0.13595918151113273, 0.18347248643361258, 0.03496727950427814, 0.26803013215224514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03425064948709422, 0.06813219948054083, 0.011078971969195495, 0.04999218903673586, 0.008099976699996847, 0.03836581058345456, 0.10144767815206945, 0.016563242064877137, 0.028393610955876114, 0.1729811084272893, 9.999999999998899e-05, 0.03878705092287105, 0.0975730785577743, 9.999999999998899e-05, 0.11094548502127766, 9.999999999998899e-05, 0.10855095618564192, 0.030355547434845365, 0.07964481414608415, 9.999999999998899e-05, 9.999999999998899e-05, 0.027588873142097903, 0.012375265407529645, 0.018452425097603586, 0.08170049325480344, 0.17609003494830922, 0.08234277923321864, 0.17119348384010646, 0.4731298274426058, 0.6441440075910851, 0.46543632840721216, 0.4708627164026369, 0.44771960419513224, 0.3831705593454877, 0.31984475736214035, 0.3259407754296785, 0.08286691106957356, 0.11068494078888436, 0.09544583964390185, 0.16455220196683695, 0.06919588567763346, 0.12438992453897757, 0.15912670650289185, 0.09374720153088678, 0.0841595993306844, 0.14562451420876676, 0.14913344098039583, 0.17669598182633217, 0.1528294130272354, 0.2043883627087143, 0.15712228858460275, 0.1831596313742302, 0.22402654976595204, 0.17269508800285016, 0.2273191567508971, 0.2531465528119946, 0.23083771970827383, 0.23700581429800405, 0.17846096317888527, 0.2233221338599244, 0.22584998451324878, 0.2803767721725078, 0.25797233695527677, 0.18198867741781122, 0.29199233382057477, 0.09970681336935827, 0.17515426444097426, 0.17275279217529493, 0.1969646114576632, 0.13397470854559557, 0.2076590926547892, 0.17234155767214854, 0.18259607601721606, 0.21843501726692194, 0.20515955229972183, 0.19741089490243657, 0.18702682393763093, 0.2328249287464208, 0.22684637188009615, 0.21961880083282836, 0.19899064358746743, 0.1983956452056964, 0.19154136756709372, 0.21160260519101892, 0.1880662941350757, 0.17208762390220522, 0.18358481400205406, 0.1811085168183808, 0.17632903249883147, 0.19155479427996136, 0.09032174022087269, 0.16571914063748716, 0.17280908936198536, 0.17269990876650376, 0.20021766381964878, 0.17792346169207163, 0.08977272653314616, 0.16535630703752613, 0.4015818079257115, 0.31187001688966054, 0.15575561916450975, 0.09736991040036969, 0.5514347240798609, 0.13879705460551395, 0.100529579411898, 0.08671770172270776, 0.10506087535875408, 0.23954525274569005, 0.18697534502244817, 0.19784572151613333, 0.18970086128718666, 0.20220980966970725, 0.17805664863554116, 0.22747310212799055, 0.17889743166215777, 0.17818319427440543, 0.18088612206602284, 0.11093761242924305, 0.0821515498496479, 0.09206787770530378, 0.07168271807212168, 0.08179212037949368, 0.08074697593282598, 0.09075057589276025, 0.08069078744076252, 0.0727705749879769]}, "mutation_prompt": null}
{"id": "3eb8534e-3dca-4668-aa07-7973003e45f8", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.inertia_weight = 0.9\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = self.inertia_weight * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            self.inertia_weight = max(0.4, min(1.0, self.chaotic_map(self.inertia_weight)))  # Dynamic inertia weight using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce dynamic inertia weight and adaptively adjust the population size based on performance to enhance convergence and exploration capabilities.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "2a0f4b96-522b-4245-b083-e418f1865e12", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def opposition_based_learning(self, x):\n        return -x\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.opposition_based_learning(self.f)))  # Dynamic F using opposition-based learning\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.opposition_based_learning(self.cr)))  # Dynamic CR using opposition-based learning\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Utilize opposition-based learning to enhance exploration and exploitation of the algorithm.", "configspace": "", "generation": 38, "fitness": 0.2956552271375858, "feedback": "The algorithm ImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.8727058191592709, 0.8788151165096802, 0.871648732420361, 0.8622674487763508, 0.8278998906276276, 0.8864317979947004, 0.8763243873356152, 0.8685523229891849, 0.8761527343295337, 0.06305204201972592, 0.6665660315932984, 0.09184876239654005, 0.5328686026557856, 9.999999999998899e-05, 0.48948247080433116, 0.6914767811559643, 0.673482710393182, 0.41346823415617595, 0.10842018611387394, 0.7372008798466909, 0.1399573207825915, 0.11226839083248175, 0.18742275292501154, 0.10900648511080213, 0.08272338039371152, 0.1270149410104393, 0.11615546661520382, 0.10221550452370087, 0.0972046834159711, 0.08273504847357238, 0.11447220930402913, 0.10788090747508228, 0.0754738985506167, 0.08475152958466092, 0.0872588174083967, 0.14844298369196185, 0.9767548720101747, 0.9848318933351977, 0.9768975920808745, 0.970313894301166, 0.9492776342200903, 0.971066865653772, 0.9800304041484602, 0.9733454941794084, 0.9768986632732339, 0.31317625596485954, 0.05935069083154154, 0.6744509669572922, 0.7526980778040584, 0.15024891930172668, 0.1519836950500909, 0.6596121972339044, 0.053020637802306925, 0.45946821266622906, 0.22914280413132482, 0.22551430326163646, 0.18216693499604475, 0.2069587538388522, 0.3469784672012478, 0.2027774236458778, 0.8925731469773478, 0.12466829984555139, 0.35466583599265655, 0.4294734181501957, 0.14880391658447356, 0.15242166020036962, 0.12930841094745904, 0.1568675017143678, 0.25925471323727334, 0.17662242088672242, 0.11664233294530113, 0.5604486887609377, 0.22455911908688175, 0.015937785580866004, 0.1247225578642126, 0.2713206103467729, 0.15012935878988543, 0.14974692202678774, 0.47424054508795366, 0.13819125803189558, 0.15995822167604345, 9.999999999998899e-05, 0.056213530183807925, 9.999999999998899e-05, 0.1259184237191412, 0.006286404166843229, 0.01863924075819212, 0.1049367059251477, 0.07876287346667343, 0.05036645447430832, 0.18977723976359406, 0.07149559622496704, 0.12283633052058651, 0.1525784889747983, 0.017533388590556975, 0.07398004618926901, 0.33312010193439523, 0.0931403105413745, 0.17833513712519744, 0.1162558993254843, 0.03503389601648865, 0.07641394205684005, 0.12563209893740912, 0.10074736346332924, 0.09237129355925666, 0.2161557486334179, 0.20232444319323017, 0.07236367638805274, 0.14090263320838936, 9.999999999998899e-05, 0.1842077466233737, 0.2524491412084049, 0.0062645562106290464, 0.10075338674349243, 0.08174348108651552, 0.13828131183223613, 0.08233410251650308, 0.7399715316454346, 0.6540227508823508, 0.6274861214608534, 0.6654326989298291, 0.5627299577794189, 0.6164728534016068, 0.6164835680595053, 0.5497680745975846, 0.5532137160016378, 0.1453026619359623, 0.10376617387159259, 0.0642494369372173, 0.12878064154069357, 0.09286346952494695, 0.11003424430179787, 0.11689816772819939, 0.127537781782313, 0.11545924129235885, 0.38459330111036427, 0.166635511145529, 0.26982473230056103, 0.34066183327772337, 0.36890614562996604, 0.27012111676190176, 0.26610185946967746, 0.15217169772146577, 0.17630516386360173, 0.2615395988126695, 0.23890901599766, 0.4063381487478701, 0.37863077358510977, 0.21873588785565123, 0.32039851841009614, 0.4392285782524201, 0.26993336585127814, 0.21715597997961333, 0.24236969860284874, 0.3202219912639488, 0.25658634633043775, 0.28757515304379566, 0.17367720017297683, 0.39592147733655725, 0.26991471846279436, 0.26288024957594813, 0.1631766125213644, 0.20284858789135318, 0.21175766850594258, 0.2591970142372616, 0.21328181568142301, 0.16869188359154197, 0.21945490396135048, 0.26734832562078925, 0.2007108845668394, 0.20402299806113533, 0.19916270004102532, 0.1737511023230176, 0.18122058321063172, 0.22810365406558009, 0.200318192467128, 0.1818994563745392, 0.16655594831215403, 0.7100203053683947, 0.1827305991495758, 0.9187845089734094, 0.18065543382367055, 0.18804909000574355, 0.1690183901543605, 0.2011734056607294, 0.19983323384871432, 0.16107415647933265, 0.1667513732287509, 0.8825056789997133, 0.899815600661656, 0.1567225685589405, 0.7151099132128551, 0.881587550474493, 0.1674624200980359, 0.2075423348064599, 0.11238033904009115, 0.20636465804576343, 0.1645117970169513, 0.20624933283689983, 0.20938692903281764, 0.21139239072851768, 0.20018059372226393, 0.20722981143664432, 0.18295692845310818, 0.218160594758239, 0.2299124692391713, 0.2043255020035455, 0.09078371264666307, 0.08128422355830878, 0.06183160698341761, 0.0916905564656657, 0.09480924017092307, 0.07545854096479854, 0.09313719120523145, 0.04991141247434738, 0.0936945372001251]}, "mutation_prompt": null}
{"id": "875a282e-cb05-4871-bb2c-d1e83a6abfe2", "solution": "from scipy.stats import logistic\n\nclass EnhancedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "EnhancedDynamicHybridPSOSA_DE", "description": "Enhance the algorithm by incorporating a chaotic map for dynamic adaptation of both F and CR parameters to improve exploration-exploitation balance.", "configspace": "", "generation": 39, "fitness": 0.3846107710107131, "feedback": "The algorithm EnhancedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.29.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "c1c6f383-e667-4dcd-8e84-e29ad93c4e8d", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, adapt_rate=0.1):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f))) if np.random.rand() > self.adapt_rate else np.random.uniform(self.f_lower, self.f_upper)  # Adaptive F\n                self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr))) if np.random.rand() > self.adapt_rate else np.random.uniform(self.cr_lower, self.cr_upper)  # Adaptive CR\n\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Implement adaptive mutation and crossover rates based on individual performance to enhance the algorithm's exploration-exploitation balance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "cf2dc7d4-6164-438d-ace9-c3dad8f8e38e", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, mutation_rate=0.5, mutation_rate_lower=0.1, mutation_rate_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.mutation_rate = mutation_rate\n        self.mutation_rate_lower = mutation_rate_lower\n        self.mutation_rate_upper = mutation_rate_upper\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n            \n            self.mutation_rate = max(self.mutation_rate_lower, min(self.mutation_rate_upper, self.chaotic_map(self.mutation_rate)))  # Dynamic mutation rate using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Improve exploration by adding a dynamic mutation strategy that adapts the mutation probability during optimization.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "a042cd7a-d4c7-4609-85a6-3da1c082522f", "solution": "class ChaoticDynamicHybridPSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, chaotic_a=3.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.chaotic_a = chaotic_a\n    \n    def chaotic_initialization(self):\n        return self.lb + (self.ub - self.lb) * (logistic.cdf(self.chaotic_a * np.random.rand(self.num_particles, self.dim)) * 10.0 - 5.0)\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = self.chaotic_initialization()\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ChaoticDynamicHybridPSOSA_DE", "description": "Enhance diversity in the population by introducing a mutation strategy based on chaotic initialization.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ChaoticDynamicHybridPSOSA_DE' object has no attribute 'lb'\").", "error": "AttributeError(\"'ChaoticDynamicHybridPSOSA_DE' object has no attribute 'lb'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "c9e74143-2fbd-478c-af25-e63a4f072300", "solution": "class ImprovedOppositionDynamicHybridPSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def opposition_based_init(self, swarm):\n        return 2.0 * np.mean(swarm, axis=0) - swarm\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            # Opposition-based learning\n            opp_swarm = self.opposition_based_init(swarm)\n            for i in range(self.num_particles):\n                opp_fitness = func(opp_swarm[i])\n                if opp_fitness < personal_best_val[i]:\n                    personal_best_val[i] = opp_fitness\n                    personal_best_pos[i] = opp_swarm[i].copy()\n                    if opp_fitness < global_best_val:\n                        global_best_val = opp_fitness\n                        global_best_pos = opp_swarm[i].copy()\n\n        return global_best_val", "name": "ImprovedOppositionDynamicHybridPSOSA_DE", "description": "Enhance the diversity of the algorithm by incorporating a novel opposition-based learning approach to improve convergence speed and accuracy.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedOppositionDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedOppositionDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "c439d915-fde9-4278-8ac5-0d97b6b50bdd", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            avg_fitness_improvement = 0  # Track the average fitness improvement\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                improvement = personal_best_val[i] - fitness\n                avg_fitness_improvement += improvement\n\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            avg_fitness_improvement /= self.num_particles  # Calculate the average fitness improvement\n            self.f = max(self.f_lower, min(self.f_upper, self.f + avg_fitness_improvement))  # Dynamic F based on average improvement\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.cr + avg_fitness_improvement))  # Dynamic CR based on average improvement\n\n            curr_temp *= self.cooling_rate\n\n            # Update chaotic map values dynamically based on current F and CR\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a dynamic control parameter adaptation based on the average fitness improvement.", "configspace": "", "generation": 44, "fitness": 0.3846107710107131, "feedback": "The algorithm ImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.29.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "9100fd9f-0f6d-4c34-a1c1-f5fa5520a1d3", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            if np.random.rand() < 0.18:  # Modify 18% of the code\n                self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n                self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n            else:\n                self.f = max(self.f_lower, min(self.f_upper, self.f))  # Keep the previous value\n                self.cr = max(self.cr_lower, min(self.cr_upper, self.cr))  # Keep the previous value\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Improve exploration by introducing chaotic dynamical systems to adaptively adjust the mutation and crossover rates during optimization.", "configspace": "", "generation": 45, "fitness": 0.3798368377186919, "feedback": "The algorithm ImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.29.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.8526630493733709, 0.8591649817062876, 0.8760898330643038, 0.8408755326470699, 0.8591609609465833, 0.8632306073913562, 0.8479634472724507, 0.8438453169864288, 0.857514907943418, 0.0732339267923171, 0.7046422401963612, 9.999999999998899e-05, 0.4499635660022482, 0.0461689613784112, 0.39094546533632457, 0.7180245309840558, 0.6725669066204126, 0.7125695660890043, 0.11472632982514064, 0.09579222911707397, 0.1143450989306195, 0.14884162157036462, 0.09713824441815921, 0.10801303960764908, 0.09046984294676019, 0.11210845782089562, 0.11696362651600412, 0.12585237155086892, 0.09758102538475555, 0.08816483395955077, 0.10316927403731191, 0.1063515035012641, 0.07909455158926337, 0.12544028613365188, 0.10627543338001177, 0.09396669785561718, 0.9797973235664799, 0.9768380400355647, 0.9768863326828008, 0.9757867284501514, 0.9640675172282247, 0.9600696771202766, 0.9795507809907927, 0.9644801203205295, 0.973169206681881, 0.5270777462390264, 0.39911887987312744, 0.4092066675165603, 0.5668063650684644, 0.45193804264802606, 0.14675049577784471, 0.56509019291237, 0.4102740716212253, 0.08686968419872976, 0.3957389776700807, 0.8369931912303108, 0.8686020243666053, 0.8413264768081786, 0.846460771856305, 0.276157425605023, 0.8578132554330893, 0.23316490876846407, 0.851027528454769, 0.7205483294100679, 0.6341481723699335, 0.43730806753867646, 0.12743067599936242, 0.1316973806205749, 0.13040926470848702, 0.5827861361929505, 0.12925462273363642, 0.6107204600696261, 0.45616408223265814, 0.19276521818905124, 0.6343506583796553, 0.5164106967794115, 0.5708647280033057, 0.4707348562997721, 0.7255082101200416, 0.359753245095613, 0.7097320229754338, 0.46296883365915964, 0.08288382600992694, 0.06480905205442833, 0.03854573009343765, 0.1381323555737195, 0.4104286188247359, 0.47356259411671775, 0.658364622699982, 0.6794732284046396, 0.3548975218164464, 0.3997487061048217, 0.3857944192169419, 0.6008441328831162, 0.5426167192181204, 0.6657288783271031, 0.7003861778707186, 0.37271702908781645, 0.7280840830629014, 0.14821032536703027, 0.045936627950111886, 0.3866471124804688, 0.2646419336403214, 0.10498706976823591, 0.08789355404140553, 0.1765050765502738, 0.1891433928958276, 0.079041981478982, 0.3448929060240765, 0.4675659701291407, 0.45995915770238927, 0.006441834782634159, 0.40336482056754075, 0.4988907566825609, 0.16254084652761192, 0.37245260527981383, 0.12085423214762481, 0.8201669550857067, 0.8036834542658425, 0.7909613959393134, 0.7781097124989287, 0.7483657421014602, 0.7874623425082199, 0.7740455180254342, 0.7792419816986758, 0.7767971166204634, 0.10859338096574755, 0.07762142485766022, 0.11032696968221023, 0.12480545629932271, 0.1784859021931361, 0.10917990108151188, 0.12025156629159262, 0.11538132711118665, 0.06844339219689721, 0.38710863791867944, 0.1810925424945382, 0.24120177730862657, 0.2786795395578837, 0.2119829120443837, 0.17677180561237837, 0.27339408512902075, 0.21681608467927238, 0.22702325554508063, 0.30459696363200583, 0.32782558193224953, 0.37369857284154917, 0.3903152938221284, 0.4539277365721035, 0.3583183937993222, 0.40449925877969195, 0.3619314119495902, 0.5217819679750254, 0.19211306354375746, 0.32505854690504943, 0.23817565348946845, 0.27473319213847036, 0.2272105563224952, 0.27282243376622817, 0.2411525491087223, 0.3021685005868432, 0.14543376913284278, 0.2344192086319451, 0.20858701420253478, 0.1972810516793334, 0.2412354816439286, 0.22024845713775454, 0.19853352540530067, 0.2320912252699906, 0.19725812064304693, 0.19916434729076404, 0.18455729905427432, 0.1843089273934787, 0.17510963892458808, 0.1844907126882397, 0.20878488431320485, 0.18880600141886017, 0.20589924179544095, 0.1911214931897689, 0.19542715090033502, 0.8637661479653587, 0.18577387004096912, 0.18778718090139002, 0.17212296489275525, 0.2005554669469124, 0.19964060412943307, 0.17876783449010547, 0.16479291789958483, 0.9029746951560839, 0.8997721899183174, 0.8051124173532372, 0.7976005150335035, 0.8773967632935337, 0.16705863493048256, 0.20838807235405632, 0.11219554021656075, 0.16670175660075437, 0.8772581482143648, 0.18353669162744646, 0.20068464960337695, 0.20635557661457404, 0.17111606244834132, 0.1891103950767209, 0.18360468173625644, 0.18030309659784582, 0.19471097165090956, 0.18629952839152997, 0.08330865672709731, 0.08238997214772603, 0.11408387098378225, 0.07993597982035605, 0.08212542379253396, 0.0942131738298545, 0.11968130548577283, 0.07582885641168524, 0.08609666360144352]}, "mutation_prompt": null}
{"id": "250b1b94-b688-4a09-bb9e-d3b63268399d", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "8b6be3ee-a8e4-46c3-b9e1-c6175b71dd4a", "solution": "from scipy.stats import logistic\nfrom scipy.stats import levy\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def levy_flight(self, x, beta=1.5):\n        return x + beta * levy.rvs(size=len(x))\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            # Introduce Levy flights to enhance population diversity\n            for i in range(self.num_particles):\n                swarm[i] = np.clip(self.levy_flight(swarm[i]), lb, ub)\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Enhance the population diversity by introducing Levy flights to update particle positions.", "configspace": "", "generation": 47, "fitness": 0.10847425726814146, "feedback": "The algorithm ImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.17.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.13989635648918497, 0.1476292161339523, 0.1468462314045984, 0.16234823988119773, 0.17093332165940756, 0.18320702064957928, 0.15090183656487477, 0.1560356128449344, 0.1939470839517694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037590069562482675, 0.025482762137678416, 0.03363434475362714, 0.036534738988116655, 0.034175483977092136, 0.0504892879229365, 0.03522835533105606, 0.03317937385167935, 0.03427302314873415, 0.019477162939292025, 0.009078673050481156, 0.037460088594316265, 0.02582875198090917, 0.01814993941054166, 0.021123956853854375, 0.029832574640188625, 0.014584392887871389, 0.011603395682607487, 0.9884751603772689, 0.9879325027365133, 0.9890620783822428, 0.9545294712707693, 0.9067505907975524, 0.9322364447289564, 0.934562439134345, 0.2113734029132761, 0.41597851634852534, 0.07683451482312798, 0.05262210378864929, 0.04862031586327831, 0.06734785823327438, 0.047103164126700126, 0.04396540316525965, 0.06733060497661414, 0.0767791596544748, 0.08093734582685852, 0.11214555767078782, 0.0702848465065623, 0.08421424292320079, 0.11636385697515961, 0.10661959855597924, 0.12087327919817403, 0.10662270947503316, 0.08840370119637886, 0.12503434420946014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009674380732337506, 0.006841326496159095, 9.999999999998899e-05, 0.01272545185276408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010567871543411766, 0.009107788462572208, 0.00567421836960913, 0.04569388978206157, 0.0054653164840616775, 0.0421627381070917, 0.035844251196285204, 0.007543620609378965, 0.02033675236727084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17119348384010646, 0.15376103316598078, 0.15846293190749416, 0.1821311924089829, 0.1798421876002282, 0.19180899938469043, 0.18904231263302174, 0.13739034576844644, 0.1850530239391368, 0.04050511674701485, 0.04342480424299433, 0.0550609937033989, 0.04179713976602739, 0.036447442353066295, 0.04210590548402082, 0.03247974986343538, 0.04255068256389494, 0.03571315482267767, 0.14299163391184389, 0.14179307462989776, 0.16134860284331476, 0.17575993712540272, 0.15750709478225455, 0.17899316994986403, 0.13730717791215596, 0.13072074816659918, 0.13191578506717017, 0.14100374245933578, 0.16252553410677828, 0.18144789229919966, 0.15500376303700014, 0.17122054305740197, 0.1445578366291591, 0.1477938251130979, 0.17371044602251529, 0.14977284713714378, 0.09607711528072249, 0.10706568828750018, 0.10663899458519221, 0.1020751483421698, 0.10179412240736674, 0.10498751038115894, 0.1082995951427167, 0.10142428820997706, 0.10274065121855669, 0.1535126165890175, 0.1344090137243269, 0.152575137120729, 0.13922580173850252, 0.14316179446275223, 0.14666515202400188, 0.1506862556330174, 0.13358186531608185, 0.1465333186962564, 0.07592374075533848, 0.13480529556996612, 0.09390567031647279, 0.013455573047353786, 0.08681750830763957, 0.1495996477902516, 0.1269613367890008, 0.1318896169852546, 0.13551325879765241, 0.1333080790089185, 0.15331232804338557, 0.12116821506177344, 0.1227479527539106, 0.12985916397655006, 0.149582594472492, 0.16158078593143765, 0.12035750213538232, 0.1555097947941083, 0.1606645332464275, 0.14366132943459886, 0.10460977721205567, 0.12333691918646106, 0.11410841171466946, 0.08673268768514353, 0.2280357114318543, 0.19409999065589134, 0.18362171220187318, 0.17414492685247318, 0.17066533988535726, 0.18970086128718666, 0.17272519204012027, 0.18628835093502027, 0.1746162040170608, 0.16782653318139296, 0.19100709066774302, 0.1904748187183195, 0.037736360154011384, 0.04208901313404645, 0.040528639711084224, 0.032081655417858235, 0.0423520810650998, 0.046126642084011515, 0.029277844320097723, 0.03453199876040658, 0.04828654162221191]}, "mutation_prompt": null}
{"id": "4cdb9635-122e-4114-a83d-f1c8f32a2f1c", "solution": "class ImprovedDynamicPopulationSizePSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def dynamic_population_size(self):\n        return int(20 + 60 * (1 - (self.budget / self.max_iterations)))\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        self.num_particles = self.dynamic_population_size()\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicPopulationSizePSOSA_DE", "description": "Improve the algorithm by incorporating a dynamic population size strategy based on the algorithm performance.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('negative dimensions are not allowed').", "error": "ValueError('negative dimensions are not allowed')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "b13f140b-92a1-4e74-90a4-2a2e56446553", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "cd774e4e-1afa-4ff8-b9b2-c31faebc3cb6", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(int(self.initial_temp / 10), self.dim)  # Dynamic population size based on temperature\n        velocity = np.zeros((int(self.initial_temp / 10), self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(int(self.initial_temp / 10), np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(int(curr_temp / 10)):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(int(curr_temp / 10)), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Update the algorithm to incorporate a dynamic population size based on the current temperature to balance exploration and exploitation.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "680c7690-6627-46e5-8dee-0b08eb168bf9", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "5be1b937-f29b-45cd-a25b-dc3d16ccabaa", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, inertia=0.5):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.inertia = inertia\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = self.inertia * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            self.inertia = max(0.1, min(1.0, 0.5 + 0.5 * (1 - fitness / global_best_val)))  # Adaptive inertia weight\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Enhance exploration by incorporating a novel adaptive inertia weight mechanism based on particle fitness.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "b133c149-55c8-4cbc-b787-566f38d46b26", "solution": "from scipy.stats import cauchy\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def mutation_cauchy(self, x, scale=0.1):\n        return np.clip(x + cauchy.rvs(scale=scale, size=len(x)), -5.0, 5.0)\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            swarm = np.array([self.mutation_cauchy(ind) for ind in swarm])\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a mutation strategy based on Cauchy distribution to improve exploration capabilities.", "configspace": "", "generation": 53, "fitness": 0.1790505849974469, "feedback": "The algorithm ImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.32340191212359837, 0.33167040489392297, 0.3208227325763865, 0.3610362271787978, 0.3473771086068209, 0.34784478370489647, 0.3460829556568995, 0.32177596111890894, 0.3217090717581915, 0.022743347837294592, 0.002442973816319305, 9.999999999998899e-05, 0.0025220307577390466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10282487625441916, 0.11857620720467732, 0.08600918609872932, 0.08113203737556929, 0.10503352474177918, 0.07677140966975127, 0.10122228884671203, 0.0782985836425949, 0.09432353393733861, 0.06549052961695667, 0.08383324800140057, 0.05699324475854972, 0.07472071042799255, 0.08853007386760348, 0.06614315791319514, 0.06303019502515017, 0.06342389926501268, 0.07751387706710089, 0.9879091623549013, 0.9748250011001272, 0.9822946364597929, 0.9851827793564935, 0.9729318668100362, 0.9626701022414484, 0.9746405780643994, 0.9761546147217488, 0.9676503922679305, 0.1607986440623177, 0.16032743605342403, 0.1996188504566535, 0.15890459337394913, 0.1584346437329639, 0.18213108465633565, 0.15082181638344594, 0.19688147328336492, 0.17772234867934045, 0.21568248799870748, 0.20849849669937914, 0.22050512653420173, 0.23132890397809114, 0.18094563536373676, 0.21702369548001033, 0.28708390974900533, 0.21901805800918261, 0.24487042694704086, 0.060323773635577504, 0.1021931249799134, 0.10780509287898699, 0.08911591858816137, 0.11071450545908845, 0.10922963277851228, 0.12480610792802271, 0.11993755688744256, 0.09725954256338298, 0.12070379492547001, 0.13452341362008569, 0.09674353787629808, 0.09235504394451233, 0.11802355485096994, 0.11805190297521317, 0.13766137872148576, 0.07828533074439492, 0.05456625862096265, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025568532170645586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08245016139033301, 0.06297130016399677, 0.06430544674540883, 0.0576882015079504, 0.05365597595773053, 0.09331171201203048, 0.16987848906923975, 0.0593763444097809, 0.07652697011339482, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05162855005044842, 0.0453176976894738, 0.05887023118000545, 0.038403786504378146, 0.028160570631992066, 0.05622886481719247, 0.0576302923776002, 0.036405502759331854, 0.04732664203690151, 0.3330821344123326, 0.32293274236766856, 0.3385456290393355, 0.33941317476354194, 0.30627182151250976, 0.3294726696956083, 0.3309231660390165, 0.29951046218622346, 0.3033680574500106, 0.07739222030201987, 0.0913985529099004, 0.08535828457388184, 0.0913567378068012, 0.07552474810728271, 0.09687469236178348, 0.06569700890516728, 0.08199407037719153, 0.07974238352411178, 0.2105676328605438, 0.13337010602514843, 0.16725160219315094, 0.15315921477285377, 0.15631731171387908, 0.12061770844202824, 0.1647852215316965, 0.1505226504881042, 0.16534405953708176, 0.25183047551436166, 0.2481648620960264, 0.2307863529390648, 0.24734912399190911, 0.1785942751992461, 0.2306878423314147, 0.24531253192550884, 0.24292699407697882, 0.23019885350189118, 0.14889814148632252, 0.19530968912180602, 0.1642940070102924, 0.16830910160247003, 0.1574493478135569, 0.17503236139883083, 0.17622069181289557, 0.17948866278173536, 0.16616967847021702, 0.19879607576746905, 0.1917617731051552, 0.18860550618208438, 0.17216449570388248, 0.19880377091636203, 0.19572444241328635, 0.1793433727129593, 0.18554524229365732, 0.17267373527375585, 0.1798278860771536, 0.16932167209454185, 0.1724277781111988, 0.19268062673323827, 0.17616303538304023, 0.17023900945811232, 0.18047367589131624, 0.181893655237504, 0.16804718797297158, 0.202064625906492, 0.16441254701060515, 0.18325783259441064, 0.5044567590476303, 0.19235235270954265, 0.37169114285096694, 0.30501830313947864, 0.16954453673844438, 0.17420097451003436, 0.39235732024504155, 0.17786473000686343, 0.20576737104414256, 0.22613132848176898, 0.1984137213114987, 0.2969395443926689, 0.2494405798902024, 0.20726032300900432, 0.2049737271915798, 0.1872721217352078, 0.18460617829901727, 0.18970086128718666, 0.1775761374255993, 0.1862598978803094, 0.18883092745767904, 0.1844050024001037, 0.1783522098060608, 0.19803855312059926, 0.07938718254999733, 0.08203351416616245, 0.07566805486217887, 0.084807052726664, 0.07416264951874296, 0.08536528929064258, 0.0745706185844599, 0.06547022331085117, 0.06451224347052553]}, "mutation_prompt": null}
{"id": "cd79727a-36b3-4502-853d-068864427262", "solution": "class ImprovedDynamicPopulationSizePSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.num_particles = max(10, int(30 * (1 - self.budget / 10000)))", "name": "ImprovedDynamicPopulationSizePSOSA_DE", "description": "Improve convergence by introducing a dynamic population size that adapts during the optimization process.", "configspace": "", "generation": 54, "fitness": 0.18184266603623148, "feedback": "The algorithm ImprovedDynamicPopulationSizePSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.3425653292360836, 0.3791473502929006, 0.3272590768144592, 0.34387322558643696, 0.3541787269172111, 0.32536856151548477, 0.322416502344262, 0.3413173726708566, 0.3880438801180579, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023761886132515064, 9.999999999998899e-05, 0.08125840693553232, 0.08862563614262253, 0.07855124129937507, 0.08460486689420099, 0.10048168357282461, 0.09483496451698192, 0.08529583415519137, 0.08442209176368776, 0.09107272719569448, 0.07859952992735109, 0.07447639850078847, 0.07379564530967819, 0.07813195742199464, 0.06897373132034224, 0.06088957772531811, 0.07526172481285198, 0.06548885015376205, 0.07653814182112306, 0.9799065764300539, 0.9734196710782919, 0.9898071675009019, 0.9757990866270937, 0.9879539422964527, 0.9911832714294647, 0.9908971128810568, 0.972439379541401, 0.9858103031370729, 0.17661412771069684, 0.18574082504732048, 0.20531048024231047, 0.1769015569493786, 0.19181930399643743, 0.18069824899454945, 0.1817668125387537, 0.1522801253457694, 0.17614018386628305, 0.2148447997802223, 0.21879170416665938, 0.21484178834461043, 0.19766088570941498, 0.22396537823303564, 0.2789652483693118, 0.2545012861958985, 0.2782491499582692, 0.24068824421589163, 0.129542399037191, 0.12912961491621533, 0.14432582454782317, 0.08862077932142398, 0.11099480865803402, 0.11900965048112921, 0.11180378066965224, 0.11731260567037116, 0.13526166723688016, 0.09940848213373776, 0.09095644395014701, 0.10916966858740673, 0.11664372077124696, 0.11208118245729348, 0.11932965479560975, 0.11018980459538419, 0.036747800979402334, 0.1327179900648684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03267515259425857, 0.038004385627504966, 0.06902824855010936, 0.06966296152899576, 0.0019324043698386584, 0.05979080114167479, 0.04749188713400199, 0.03369209294915032, 0.09583884848589697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057577157838475834, 0.03810660206284522, 0.062399139237898305, 0.051870252623813395, 0.057429678382671434, 0.05987231073787791, 0.06982556459916067, 0.042595143169317784, 0.03835092619476055, 0.3126585042989062, 0.3286951967361217, 0.3307795766022097, 0.3102558290893753, 0.33668684203071075, 0.3239795057101532, 0.3342855653967569, 0.35305014730820317, 0.3792947485151875, 0.08224300500114912, 0.09903888977846531, 0.07674965885583629, 0.09404213348024915, 0.07420906776757874, 0.09270288458357079, 0.09958823918169857, 0.13955956039053308, 0.08785114315610876, 0.14326479594419794, 0.13877393397942728, 0.17136095258900264, 0.172541883698357, 0.16601771672757482, 0.21777193693673225, 0.1648607634251954, 0.14237327593464655, 0.15681481844016776, 0.24046256303369717, 0.2321885974669512, 0.21791681629329374, 0.2478016366785838, 0.1774587890056729, 0.23648719135608587, 0.22518092377766252, 0.24240371840389874, 0.24843070010400214, 0.178343581288544, 0.202905984618157, 0.18335231106600836, 0.14439840436912932, 0.17551461733680407, 0.1797394780100705, 0.17768669890123168, 0.159533183808532, 0.18554585092200349, 0.18945065554836327, 0.19611165125367003, 0.1821656501857547, 0.19508592192826057, 0.1970664568607653, 0.17945915628523468, 0.20225968835304575, 0.1916760094255171, 0.19103756922161796, 0.17093787505401503, 0.17109476973375115, 0.1721258136131839, 0.17389892296461418, 0.18292266969365978, 0.17579218154643972, 0.17241302642743794, 0.19277315957904406, 0.1911589527212707, 0.16894151320466588, 0.24725681491834028, 0.16566709200245333, 0.3603103012618888, 0.1930007204744879, 0.1813192448700044, 0.4229059413614388, 0.14470376597672907, 0.4215355912717226, 0.17281684768814232, 0.20437450623367015, 0.2737987803795894, 0.16903573579774656, 0.4366668317479898, 0.27422251899029537, 0.20759275418848222, 0.15023644131134606, 0.3111001164952377, 0.1797927402363152, 0.18714294282684996, 0.18241880636842234, 0.17741444247914784, 0.1780910959862071, 0.1819196410697722, 0.20542361734397596, 0.17998292392913662, 0.18406316815979906, 0.08310862533152996, 0.06641669535733485, 0.07770163920445794, 0.08497308172669726, 0.08368030498994705, 0.08695960483528942, 0.06471220539836453, 0.07831481157790532, 0.07134692616952976]}, "mutation_prompt": null}
{"id": "290ffa18-0924-42c5-ad9f-ef9cfbef8d47", "solution": "class EnhancedDynamicHybridPSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, inertia_lower=0.4, inertia_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.inertia_lower = inertia_lower\n        self.inertia_upper = inertia_upper\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n        inertia = self.inertia_upper\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = inertia * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n            inertia = max(self.inertia_lower, min(self.inertia_upper, self.chaotic_map(inertia)))  # Dynamic inertia weight using chaotic map\n            \n        return global_best_val", "name": "EnhancedDynamicHybridPSOSA_DE", "description": "Enhance the algorithm by implementing a dynamic inertia weight to balance exploration and exploitation.", "configspace": "", "generation": 55, "fitness": 0.1681630618270447, "feedback": "The algorithm EnhancedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.3737462748004178, 0.41708391235159215, 0.3807372535438771, 0.1817363446399899, 0.3500890195622587, 0.40537622750505375, 0.4074551547007451, 0.42190041125957123, 0.45529527630766153, 0.011215800015446975, 0.018715217508026627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020272798300039363, 0.025667394139187505, 0.02236772303967849, 0.0643401537709768, 0.07421142923127932, 0.07680689553395748, 0.06529851759851046, 0.08937317979245363, 0.09246747801322142, 0.07019179308373891, 0.05307331112592184, 0.07711008547579368, 0.0892089695035364, 0.06207363427857182, 0.042900591582112235, 0.04661194034660021, 0.034303673186650285, 0.07246678567991638, 0.07554108920546443, 0.06073446829470608, 0.041743827779852305, 0.03075409951441066, 0.9869818485640068, 0.9876324007358359, 0.9792203824547056, 0.97144684007979, 0.9748296578726224, 0.9773666031912754, 0.9816766657538324, 0.976295729857913, 0.9864054152574967, 0.05435375520558572, 0.05834295009728052, 0.05617217139648423, 0.1258439570528772, 0.11189198083721363, 0.12635845396589318, 0.12306605258544001, 0.08592232821103118, 0.0478118342761481, 0.1670412347513367, 0.19440659469050003, 0.30021953458674744, 0.23216384810305069, 0.1685750386675896, 0.18604227977293208, 0.22146744689898545, 0.12869015808813333, 0.21418487550790255, 0.09504890708422131, 0.09721718859264294, 0.10919755904690664, 0.07861310717907521, 0.11826451476639255, 0.18513597483485322, 0.15261169369843353, 0.12178844324671212, 0.1385992176557136, 0.057747217036394405, 0.01005774722506736, 0.10365094701412525, 0.16933567063774502, 0.13529865983409706, 0.11588687460871316, 0.12177168449886522, 0.025563502500130952, 0.10577493633544455, 0.0029219268279554456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020071164909208905, 0.001183337877741164, 0.04844224265633279, 0.04561957224335034, 0.08447218337195406, 0.07856451438118606, 0.0021139241571328515, 0.06538329481047167, 0.05347671721677871, 0.04351951297099477, 0.05067581978126423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00698569395826476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042635834735588296, 9.999999999998899e-05, 0.10502224594321319, 0.04922635648853846, 0.0024319797357187367, 0.012429802767327636, 0.09299164830332396, 0.043468938764614884, 0.05494211141690297, 0.3552663223242023, 0.37081737438717066, 0.3612225387385012, 0.3087743090782997, 0.34464417973509864, 0.20373617838545266, 0.34658384950249876, 0.29101261521721333, 0.3371211653258669, 0.06330092253667297, 0.08704713164237621, 0.06639713124986102, 0.1118894385278969, 0.08049036506834151, 0.06732321539536368, 0.046717835992771906, 0.05155459710849719, 0.0700582522898876, 0.13621646814804766, 0.13054887018121153, 0.15335627484181313, 0.13504605599803376, 0.1428089856908067, 0.1351102063099443, 0.15721122118259045, 0.1449690646750973, 0.14368346732562554, 0.18947327261026825, 0.24887735491674734, 0.20080759198453457, 0.20793038308889145, 0.23258758269234137, 0.22001189257709985, 0.23547584345303718, 0.24124942867347388, 0.18839473837861354, 0.1394917331985973, 0.16035556321622702, 0.14878367800036574, 0.1707472672418322, 0.1569115210513855, 0.1911719418130644, 0.16335675097086022, 0.1786887030242097, 0.17051351579929142, 0.1694170650268414, 0.17295311907679556, 0.1867665498672687, 0.1687038483690141, 0.17229359128375454, 0.18600333011373682, 0.1783511236880666, 0.16800404453614048, 0.16323909980586793, 0.16962327286173062, 0.1755700242914885, 0.17785545158342297, 0.19568048389556303, 0.17426510229381842, 0.17483766705156667, 0.17775732621263596, 0.1751498919052703, 0.1630310942203731, 0.48473458144240433, 0.15491864633735786, 0.16768222216270423, 0.1653429624605176, 0.18015126282559646, 0.17079670216904563, 0.13686065827915805, 0.1328991989694348, 0.18378127156166424, 0.23538477509692912, 0.16185081642286592, 0.16699468238426018, 0.2213536055156523, 0.2509837447527049, 0.15132266870895017, 0.18884331966433232, 0.24651084781496124, 0.18983928233256342, 0.17527018606705713, 0.19396824603472962, 0.19768955609140904, 0.17072063947467375, 0.18649676294453876, 0.2069515055772938, 0.19515795044486606, 0.19576541614607068, 0.19997010229158751, 0.053510665521962264, 0.06999574986680202, 0.06616343598600338, 0.07266869432741496, 0.07523889807092332, 0.0569376306758812, 0.059546056552331916, 0.06474754714841002, 0.06970873863803773]}, "mutation_prompt": null}
{"id": "0c01a284-36f6-4153-b366-2bbe46c4d1e8", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, inertia_weight=0.5):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.inertia_weight = inertia_weight\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = self.inertia_weight * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introducing a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "d5cbd18c-f5af-4cbd-aad5-c9d9bb296cf7", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "ce898950-a445-44c0-9caa-a1e8a9013d05", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, a=3.9):  # Update the initialization to include 'a'\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.a = a  # Add 'a' as a class variable\n        \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f, self.a)))  # Update the dynamic F calculation\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr, self.a)))  # Update the dynamic CR calculation\n\n        return global_best_val\n    \n    def chaotic_map(self, x, a):\n        return logistic.cdf(a * x) * 10.0 - 5.0", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Adjust the update mechanism of the chaotic map to enhance the exploration and exploitation balance of the algorithm.", "configspace": "", "generation": 58, "fitness": 0.3846107710107131, "feedback": "The algorithm ImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.29.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "5664b2b9-6b78-44f2-8b0d-77c1b1367413", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.dynamic_factor = 0.5  # Initial dynamic adjustment factor\n        \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f * self.dynamic_factor)))  # Dynamic F using chaotic map with dynamic adjustment\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr * self.dynamic_factor)))  # Dynamic CR using chaotic map with dynamic adjustment\n            \n            if global_best_val < 0.5:  # Adjust dynamic factor based on optimization progress\n                self.dynamic_factor *= 1.2  # Increase dynamic adjustment factor\n            else:\n                self.dynamic_factor *= 0.8  # Decrease dynamic adjustment factor\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Implement a self-adaptive strategy to dynamically adjust the algorithm's parameters based on the optimization progress.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "dafbb5e2-70ff-4dbd-aaae-b5eaabae3e11", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, mutation_scale=0.1):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.mutation_scale = mutation_scale\n\n    def dynamic_mutation(self, fitness):\n        return max(0.1, min(0.9, self.mutation_scale * fitness))\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = self.dynamic_mutation(global_best_val)  # Dynamic F based on global best fitness\n            self.cr = self.dynamic_mutation(global_best_val)  # Dynamic CR based on global best fitness\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Improve exploration by incorporating a dynamic mutation strategy based on the fitness landscape.", "configspace": "", "generation": 60, "fitness": 0.3568045852617337, "feedback": "The algorithm ImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8763243873356152, 0.8685523229891849, 0.8761527343295337, 0.7343640448765257, 0.6708954425833932, 0.6342126042724265, 0.7168802134884298, 0.47773672684910207, 0.713451879832518, 0.719814683029321, 0.7113013388820684, 0.5941908781530509, 0.10842018611387394, 0.7372008798466909, 0.1399573207825915, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.10221550452370087, 0.0972046834159711, 0.08273504847357238, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9799746992843424, 0.9816970460930975, 0.9746440978884927, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.6407879668539309, 0.053020637802306925, 0.6150114150049234, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.514748072370782, 0.8774896164218083, 0.8732068541935971, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.1025969377142395, 0.1521070459290722, 0.18292482371798435, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.062201278382569725, 0.08884636722520722, 0.010255924507437508, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.03281633808393414, 0.09899829244123981, 0.07698470405021252, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.1345398937589054, 0.013400980291171094, 0.16225313846114964, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.19414331549185204, 0.0344966038253649, 0.03353544191448332, 0.12162942086414275, 0.0728475635571163, 0.11026428947837064, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.08427820941566222, 0.006362898049683152, 0.33359331585612395, 0.26941427209696456, 0.20282732439602302, 0.17650871695613346, 0.7399715316454346, 0.6540227508823508, 0.6274861214608534, 0.6654326989298291, 0.5627299577794189, 0.6164728534016068, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.07807454277961712, 0.1155698007031497, 0.06880396454931137, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.34066183327772337, 0.36890614562996604, 0.27012111676190176, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.2615395988126695, 0.23890901599766, 0.4063381487478701, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.16511993725019858, 0.24766948323739146, 0.14533465228610243, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.20284858789135318, 0.21175766850594258, 0.2591970142372616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.18655017854127642, 0.17781081977181656, 0.17476252848613172, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.171164178891815, 0.20083008883564546, 0.19936322694619657, 0.16107415647933265, 0.1667513732287509, 0.8825056789997133, 0.899815600661656, 0.1567225685589405, 0.7151099132128551, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11238033904009115, 0.20636465804576343, 0.1645117970169513, 0.17550468928440477, 0.20346980473237264, 0.18970086128718666, 0.24086718975703703, 0.19551225656443771, 0.19163075914032224, 0.218160594758239, 0.2299124692391713, 0.2043255020035455, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "58dd9318-087e-446e-9780-22a577d77b4d", "solution": "import numpy as np\nfrom scipy.stats import logistic\n\nclass DynamicHybridOptimizer:\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_iterations = max_iterations\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.f = f\n        self.cr = cr\n        self.f_lower = f_lower\n        self.f_upper = f_upper\n        self.cr_lower = cr_lower\n        self.cr_upper = cr_upper\n\n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "DynamicHybridOptimizer", "description": "Introducing a multi-strategy hybrid optimizer combining Differential Evolution and Particle Swarm Optimization with dynamic adaptation of parameters using chaotic maps for enhanced exploration and exploitation.", "configspace": "", "generation": 61, "fitness": 0.3846107710107131, "feedback": "The algorithm DynamicHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.29.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "2737a0f1-142d-4d47-a07a-773f823da233", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "931a4368-efab-4362-a1c9-7202bf5f6263", "solution": "class ImprovedDynamicPopulationSizePSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            # Dynamic population size adaptation\n            if np.random.rand() < 0.2:  # 2.0% change\n                self.num_particles = max(5, min(100, int(self.num_particles * np.random.uniform(0.9, 1.1))))\n\n        return global_best_val", "name": "ImprovedDynamicPopulationSizePSOSA_DE", "description": "Utilize a dynamic population size strategy to adapt the number of particles during optimization.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicPopulationSizePSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicPopulationSizePSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "1d71bba7-a856-422b-b977-a73dc7a97ce6", "solution": "from scipy.stats import levy\n\nclass RefinedImprovedDynamicHybridPSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n\n    def levy_flight(self, beta=1.5):\n        return levy.rvs(beta, size=self.dim) * 0.1\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i] + self.levy_flight(), lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "RefinedImprovedDynamicHybridPSOSA_DE", "description": "Enhancing the diversity maintenance by introducing Levy flight exploration for particle movement.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'RefinedImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'RefinedImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "14892744-79d1-426e-8d36-faa22616c1f7", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, temp_alpha=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.temp_alpha = temp_alpha\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            curr_temp *= self.temp_alpha  # Dynamic temperature adaptation for SA\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Utilizing a dynamic adaptation mechanism for the temperature in the Simulated Annealing process to improve exploration and exploitation balance.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "4d66fb49-c89f-40e1-b1b4-de46de3eb7c5", "solution": "class DynamicPopulationSizeImprovedHybridPSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, max_particles=50, min_particles=10, performance_threshold=0.3):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.max_particles = max_particles\n        self.min_particles = min_particles\n        self.performance_threshold = performance_threshold\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            # Dynamic population size adjustment based on performance\n            if global_best_val < self.performance_threshold:\n                self.num_particles = min(self.num_particles + 1, self.max_particles)\n            else:\n                self.num_particles = max(self.num_particles - 1, self.min_particles)\n\n        return global_best_val", "name": "DynamicPopulationSizeImprovedHybridPSOSA_DE", "description": "Improve exploration and exploitation balance by dynamically adjusting the population size based on performance metrics.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicPopulationSizeImprovedHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'DynamicPopulationSizeImprovedHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "217025e2-14f6-4a1a-a6d4-f549ed5967fb", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, de_weight=0.7):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.de_weight = de_weight\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(swarm[i] + self.de_weight * (a - b) + self.de_weight * (personal_best_pos[i] - swarm[i]), lb, ub)  # Differential evolution mutation\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Enhance the diversity of the population by incorporating a differential evolution mutation strategy.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "ee71204b-418d-4755-a8a2-74a9af72a215", "solution": "class ImprovedAdaptiveDynamicHybridPSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, w_min=0.4, w_max=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.w_min = w_min\n        self.w_max = w_max\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n        w = self.w_max\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = w * (velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i]))\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            w = self.w_min + (_ / self.max_iterations) * (self.w_max - self.w_min)  # Adaptive inertia weight\n\n        return global_best_val", "name": "ImprovedAdaptiveDynamicHybridPSOSA_DE", "description": "Improve the exploration by introducing a adaptive inertia weight factor for velocity update.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedAdaptiveDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedAdaptiveDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "df82fc03-8286-4b99-ad3f-6204ac7f4521", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "88ba4d0e-6d87-43c5-9818-dbef722251d2", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "ef242d2f-20de-43ff-8495-7b61a6528500", "solution": "class EnhancedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, inertia_min=0.1, inertia_max=0.9, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        inertia_weight = self.inertia_max  # Initialize inertia weight\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = inertia_weight * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            inertia_weight = self.inertia_max - (_ / self.max_iterations) * (self.inertia_max - self.inertia_min)  # Update inertia weight\n\n        return global_best_val", "name": "EnhancedDynamicHybridPSOSA_DE", "description": "Enhance convergence by introducing a dynamic inertia weight factor for velocity updates.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'EnhancedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "c212de33-aa18-4202-a3b6-85fb3e12ff2e", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n        inertia_weight = 0.9\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = inertia_weight * (velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i]))\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            inertia_weight = max(0.4, 0.9 - 0.5 * _ / self.max_iterations)  # Dynamic inertia weight update\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Implement a dynamic inertia weight update strategy to adjust the particle velocity based on the global best fitness value.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "e4cbe872-3ce3-4355-bcc6-44b2f12194f6", "solution": "class ImprovedDynamicHybridPSOSA_DE(SelfAdaptiveDynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def self_adaptive_mechanism(self, param, min_val, max_val):\n        return max(min_val, min(max_val, param * np.exp(0.1 * np.random.randn())))\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = self.self_adaptive_mechanism(self.f, self.f_lower, self.f_upper)  # Self-adaptive F\n            self.cr = self.self_adaptive_mechanism(self.cr, self.cr_lower, self.cr_upper)  # Self-adaptive CR\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introducing a self-adaptive mechanism to adjust the algorithm's parameters during optimization to improve convergence and exploration.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'SelfAdaptiveDynamicHybridPSOSA_DE' is not defined\").", "error": "NameError(\"name 'SelfAdaptiveDynamicHybridPSOSA_DE' is not defined\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "3cb9546f-1046-4eca-ad3e-375e7f66b33c", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "61e3b292-8c3d-4a96-aa3e-2aececf5e859", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "e2084cbd-56b8-44c8-bbc5-a39cf77f168c", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, mutation_prob=0.5):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.mutation_prob = mutation_prob\n        \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutation_prob = self.mutation_prob * (1 - fitness / global_best_val)  # Dynamic mutation probability\n                mutant = np.clip(a + np.where(np.random.rand(self.dim) < mutation_prob, self.f * (b - c), 0), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a dynamic mutation strategy to adapt mutation probability based on individual performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "8586e527-be07-4759-88f8-90f8ff715810", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, num_particles_upper=50, num_particles_lower=10, performance_threshold=0.2):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.num_particles_upper = num_particles_upper\n        self.num_particles_lower = num_particles_lower\n        self.performance_threshold = performance_threshold\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            if self.budget * 0.1 < self.budget - func.evaluations < self.budget * 0.9:\n                performance = (global_best_val - func.get_optimal_value()) / (func.get_max_value() - func.get_optimal_value())\n                if performance < self.performance_threshold and self.num_particles > self.num_particles_lower:\n                    self.num_particles -= 1\n                elif performance >= self.performance_threshold and self.num_particles < self.num_particles_upper:\n                    self.num_particles += 1\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Incorporate dynamic population size adjustment based on algorithm performance to improve convergence.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "ccc08229-d39d-4783-bf1a-56edece81b30", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.num_particles = int(30 + 0.02 * budget)  # Dynamic population size", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Improve exploration capabilities by adding a dynamic mechanism to adjust the population size during optimization.", "configspace": "", "generation": 78, "fitness": 0.20738130694236384, "feedback": "The algorithm ImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.4018404614730492, 0.4338710561735226, 0.42227433164531225, 0.42651792049896053, 0.3979083859530741, 0.404896807974622, 0.4091143714324177, 0.39113581207568415, 0.39765914217652787, 0.05458986826741641, 0.0674006769817852, 0.041426337122182355, 0.018491326728321655, 0.03354993343267998, 0.04343832539329251, 0.03512201563186368, 0.01705595296213469, 0.057417714176100865, 0.08656496990508367, 0.1021998741184752, 0.07773194270909667, 0.08013609610148265, 0.08151793653225448, 0.08469077439096473, 0.0852015041807177, 0.10737562699003955, 0.11959408897100043, 0.0685250331113526, 0.09008721015272092, 0.07295977857012059, 0.0725899290738975, 0.08319070414321084, 0.06990575030993607, 0.0934356265856855, 0.07624467711102256, 0.05961557760775482, 0.9200475310664065, 0.9480868317771446, 0.9311657703345194, 0.8901882212103787, 0.9222769869598308, 0.9239541790798824, 0.935577370585401, 0.9081532855220658, 0.9184080827750593, 0.2119296910409849, 0.18868556556662752, 0.20158225283533682, 0.1878175477019105, 0.14401180968723915, 0.2162317238206306, 0.18975713915580106, 0.1870199206800761, 0.20182292254172685, 0.46651776116842725, 0.37285212304621673, 0.3015923749960946, 0.24905513983287053, 0.41397510338276966, 0.1798117983832933, 0.4681260332817425, 0.5175813007675927, 0.4272477146999576, 0.1827342683027281, 0.18094183665695485, 0.07757059456098558, 0.09278870984218224, 0.17521367926941966, 0.11029157714111193, 0.1061859153145126, 0.09625949183579219, 0.13570789093470825, 0.12815560375751578, 0.08357201164070716, 0.1038907503826183, 0.10926281112543312, 0.1210296628919767, 0.11732044962166333, 0.10830784836324969, 0.11247091289491395, 0.08957262410377409, 0.04401675589077514, 9.999999999998899e-05, 0.022305419352406486, 0.06078494140023083, 0.038241258985516446, 0.009605949275407144, 0.06999148170738356, 0.024994959436501096, 0.062160910347585974, 0.10139136817765615, 0.15690576144661494, 0.1378397739980981, 0.148437808012453, 0.0933560237118003, 0.07376030725113092, 0.11627038796282663, 0.14554749559461166, 0.10120232514714245, 0.016838764110314486, 0.01877000519066674, 0.009058511726913077, 0.00920115011223499, 0.007575568816369005, 0.01926834344647721, 0.025415368699537755, 0.020517676360364168, 0.013632649102065408, 0.07875529528344327, 0.07584917042645667, 0.07483086110254678, 0.1219231327354533, 0.1053806224282755, 0.09832287129598483, 0.07129949374839084, 0.08939714725421088, 0.07502254663270247, 0.35660372219849124, 0.3447366818141173, 0.3801329541213858, 0.3349631338249157, 0.36386047311429115, 0.396922889469859, 0.35680970714840743, 0.3574603955975588, 0.37255066295117645, 0.10817210335071592, 0.08819314438002801, 0.09228035753173847, 0.08194018395802616, 0.08318661497069957, 0.08696871147743146, 0.08696368880494032, 0.10109018229964173, 0.09347515680264373, 0.14714970706934583, 0.1925372135291381, 0.16948856719981653, 0.15900931757316417, 0.2655379757666877, 0.15851885339469718, 0.14592004516915968, 0.19055187615142977, 0.13521591057735516, 0.25954999898558606, 0.2427438237052597, 0.2489102388044554, 0.2772255528860401, 0.26130944900202935, 0.254793106860013, 0.21314611894610702, 0.27923888720736756, 0.2666239183940038, 0.178091015935137, 0.20795810029729833, 0.2106415458112455, 0.19370580262152337, 0.18940564569365115, 0.18158345650175411, 0.19871006690384851, 0.17945934355664905, 0.1649042369908953, 0.19659244637181406, 0.1768655467426543, 0.17280989625273813, 0.20074565229374097, 0.2170115219878329, 0.1923689453618478, 0.19399812494042135, 0.18909939746445226, 0.209798709656004, 0.17342615380852422, 0.19235436495644986, 0.1988923871178777, 0.1893174608402145, 0.19310533666284668, 0.1705247641055636, 0.19476287994518837, 0.18609760860226743, 0.17330619255562107, 0.346196386264367, 0.19063259190075932, 0.2522663186247681, 0.5204056562740118, 0.19031559709795576, 0.15922373067287465, 0.44968823253581536, 0.5735358738714631, 0.18985768298037975, 0.5512748537531771, 0.19971418291747545, 0.5303854587045416, 0.4355408771894208, 0.38007848120846444, 0.3004649379190095, 0.18865622393255221, 0.27809247654753144, 0.19943428042455824, 0.18115789976960217, 0.18364621695825012, 0.1712238572760565, 0.1944201565676078, 0.17750080053973838, 0.19225787721104348, 0.2014274471408144, 0.17299142121429578, 0.17423666332855303, 0.0670204315141063, 0.07675821774152625, 0.07149300008081849, 0.07394099615854666, 0.07108888608628239, 0.06366639590223766, 0.07696458422320485, 0.07384718660068179, 0.09763602202777089]}, "mutation_prompt": null}
{"id": "9a407acc-d91c-4f41-9826-64a523c0fd34", "solution": "from scipy.stats import logistic\n\nclass EnhancedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def local_search(self, candidate, func):\n        best_candidate = candidate.copy()\n        best_fitness = func(candidate)\n        \n        for _ in range(5):  # Perform local search for a few iterations\n            perturbed = np.clip(candidate + 0.1 * np.random.randn(self.dim), -5.0, 5.0)\n            perturbed_fitness = func(perturbed)\n            \n            if perturbed_fitness < best_fitness:\n                best_candidate = perturbed\n                best_fitness = perturbed_fitness\n        \n        return best_candidate\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                \n                trial = self.local_search(trial, func)  # Integrate local search\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "EnhancedDynamicHybridPSOSA_DE", "description": "Enhance the algorithm by incorporating a local search strategy to exploit promising regions more effectively.", "configspace": "", "generation": 79, "fitness": 0.2112892536039274, "feedback": "The algorithm EnhancedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.49541487309404586, 0.49440888798919913, 0.47990347742859163, 0.5183088267195299, 0.49293314774369046, 0.47681179655826, 0.4942556456578324, 0.4209635762959173, 0.4625048117482147, 0.1039175608770665, 0.0900205691976329, 0.11886869584116544, 0.0844002021744229, 0.10444537246249352, 0.12847478515788568, 0.13050654756466007, 0.13978595318451248, 0.023877128105430523, 0.07384610367743882, 0.08437702767311328, 0.09574868649026724, 0.10138423152505927, 0.11098229599896459, 0.08170870277877218, 0.06917608276208742, 0.08467302439713131, 0.07980004562843113, 0.07202864119255448, 0.08699917851443917, 0.09125806317830687, 0.0852698814030618, 0.060970895207810294, 0.0795835038188718, 0.06897425096935839, 0.05317281156889608, 0.061272830526183486, 0.9006349368242372, 0.8867836959627313, 0.9285988570036816, 0.9198875075598487, 0.8935074712380524, 0.9192536915651334, 0.8845093447808179, 0.9311946171210252, 0.9265748092674965, 0.21480061394841132, 0.1351160476756671, 0.1838138896375806, 0.1856305696684708, 0.1357451489200735, 0.154476352991872, 0.21550744325767057, 0.1820910889467372, 0.17669561075562523, 0.2500738941786169, 0.47383924896528473, 0.22650894582842918, 0.3118535961790272, 0.44291490173827497, 0.4069374852956359, 0.17682586187395588, 0.44548894991704846, 0.3730160208299026, 0.18140060327022967, 0.21199281494250433, 0.11803646526512335, 0.1272656264204759, 0.09902482321165185, 0.12438600150309942, 0.15728136346516075, 0.09829529974227391, 0.14234185142655753, 0.14227919783189336, 0.09262925050137005, 0.1602759296330405, 0.1444457995293571, 0.1051134137024039, 0.10639183835627497, 0.13966450990807666, 0.11063763898121215, 0.15942281162373073, 0.07360603625639761, 0.09899763348734847, 0.08342928578981612, 0.021873501307068555, 0.09378811712572821, 0.01832845419635054, 0.0395007266243651, 0.01862931860106143, 0.14841828949673685, 0.11944776599895335, 0.16078605905520416, 0.06120981788784052, 0.20829713198066613, 0.046758635246379354, 0.12065557275126271, 0.09827167028229578, 0.14791116068347032, 0.10352158023448044, 0.05842392381535777, 0.012048186740059696, 0.06985764343931766, 0.02836335729595363, 0.03151925727204474, 0.07808165456646343, 0.046269656439942075, 0.03578123088052021, 0.053518567756562385, 0.10113359988559445, 0.11910050185901677, 0.12257800028493204, 0.12945855131244166, 0.14174475417181587, 0.1223502464668712, 0.10675371353244789, 0.11354983170329924, 0.0707230710968152, 0.40516470265387927, 0.41719660539014247, 0.4295007514215351, 0.40873852201191907, 0.41031201097886094, 0.4336977837895032, 0.4317511179508672, 0.4121178525926643, 0.39354346430219633, 0.0887012310355636, 0.09650137273740789, 0.07845250381301372, 0.08562891556305585, 0.0846155766600275, 0.0890611239369713, 0.07075487699354743, 0.10520000958989362, 0.0708006399999529, 0.12688188060178018, 0.17045932321617807, 0.142708086929063, 0.19856374777462427, 0.14378129687137353, 0.15828078024098813, 0.16244389626940847, 0.1388533812829772, 0.1659456915640869, 0.2629015714638423, 0.2122475565936376, 0.2702074397961225, 0.21551143138142348, 0.2646142786589831, 0.245366948313126, 0.2511328424359607, 0.23239395791078743, 0.24410137147427746, 0.1848781021942124, 0.19537818070160928, 0.1918416885053078, 0.20263086473993497, 0.1949150499023674, 0.22073529157339156, 0.2050743330274144, 0.2218524040564126, 0.19509426458532708, 0.1937395834459913, 0.16255566672057464, 0.18053372033342618, 0.18927187018918035, 0.16350779998971743, 0.17127837670182766, 0.18062011959107271, 0.19334896432236426, 0.20849489576769953, 0.18121403823366178, 0.18074763975140395, 0.17907072577945615, 0.17978455662763404, 0.1764151702141482, 0.17609275930163515, 0.20792536991396637, 0.18212951608133698, 0.1723994860741841, 0.447573721539106, 0.5808402163998035, 0.1467912990985526, 0.1574202707405541, 0.1916982568708726, 0.12783744830563193, 0.13333294307628096, 0.16133105174460527, 0.14699529044837223, 0.4290621650379539, 0.14849359200652257, 0.18493499187815254, 0.5756114673209201, 0.15993360992142314, 0.24007832513610106, 0.5496278724494321, 0.4586719211447846, 0.10351186223256881, 0.1778600999366916, 0.19244397139459146, 0.1738659181151867, 0.1994674532624534, 0.2056195740708434, 0.20431216080515346, 0.19563292213956762, 0.19531869948397484, 0.20654248214810056, 0.06277568543601286, 0.08035316864624908, 0.06574812802102292, 0.06841219562127754, 0.07527755458746888, 0.06428539985709836, 0.07161768991375539, 0.06323816951763694, 0.07341575573277404]}, "mutation_prompt": null}
{"id": "dffdb372-86b0-4722-a340-576a1fb1c983", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, mutation_hist_weight=0.1):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.mutation_hist_weight = mutation_hist_weight\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        mutation_history = np.zeros(self.num_particles)\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n                    mutation_history[i] = self.mutation_hist_weight * mutation_history[i] + (1 - self.mutation_hist_weight) * 1  # Update mutation history\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Improve exploration by incorporating a dynamic mutation strategy based on particle's fitness history.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "478d0688-e62c-476e-a037-5078d9fc96ab", "solution": "from scipy.stats import logistic, cauchy\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def initialize_population(self, lb, ub):\n        swarm = lb + (ub - lb) * cauchy.rvs(size=(self.num_particles, self.dim))\n        return swarm\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = self.initialize_population(lb, ub)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Improve the population initialization by adding a Cauchy distribution.", "configspace": "", "generation": 81, "fitness": 0.2994205326572136, "feedback": "The algorithm ImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.8110033334281779, 0.8231997895924251, 0.8430257042219543, 0.8464081717202553, 0.8415131372790683, 0.7586783136119565, 0.7668159315871025, 0.8176716127402512, 0.846469099106432, 0.6249075992613354, 9.999999999998899e-05, 0.6857386803021628, 0.6388292450228772, 0.658025055737005, 0.6940185532444405, 0.3432446301842801, 0.044530315311965385, 9.999999999998899e-05, 0.10297348026987807, 0.10390705739191397, 0.09307706907093505, 0.13874647508797477, 0.09651775403098417, 0.12070128848097683, 0.11332189661702252, 0.08782301070622778, 0.1454301339132602, 0.12917410811577024, 0.09007625013681186, 0.10888955419427171, 0.06438557490685248, 0.09140357645487152, 0.08598298891476897, 0.09627681228584717, 0.07485369173403911, 0.09610423869352469, 0.9833145242467526, 0.9954934317536445, 0.9866868830843538, 0.9930580155840867, 0.9974664444047747, 0.9904782821757508, 0.9984031059998828, 0.9928642323670356, 0.9977504602288259, 0.05802651274227988, 0.02765138382558885, 0.4934932600146177, 0.04373467322809954, 0.1418010350613016, 0.14744923032885604, 0.08687392200883659, 0.08586858950698573, 0.08602285289957667, 0.8501349713645951, 0.7860653162523682, 0.8806274571529306, 0.18849885142110157, 0.06564347472166265, 0.8539341540473484, 0.7705341072935832, 0.12727067190899521, 0.1252924637775048, 9.999999999998899e-05, 9.999999999998899e-05, 0.5117201844056554, 0.4259120742733591, 0.5368600594697664, 0.442592224798254, 0.6407314843915743, 0.5754686104648893, 0.15154547605028545, 0.11624603892015895, 0.021839508084608994, 0.10975363289196705, 0.6257244964405075, 0.4477802260427185, 0.12519180425161414, 0.12911164361794691, 0.12803144877684813, 0.032779207300435376, 0.4675404955671515, 9.999999999998899e-05, 9.999999999998899e-05, 0.04212633324401627, 9.999999999998899e-05, 0.052653420397370754, 0.013024648371693148, 0.1041554875092564, 0.0571487255304417, 0.2298678756218967, 0.10264905112460598, 0.6462200842120738, 0.015908138160172336, 0.5384484403980621, 0.5545839254943983, 0.538916308128238, 0.04427232632268774, 0.41620369721086536, 0.033833924705183205, 0.033271509792194065, 9.999999999998899e-05, 0.0705593548007537, 0.18461286896185436, 0.07557053951445103, 0.09625960720121951, 0.09355157706387851, 0.23804031966373262, 0.4815893122524417, 0.041824108898497636, 9.999999999998899e-05, 0.3639548398721192, 0.03734080880234636, 0.545941503386759, 0.5341133826006268, 0.0424667492325741, 0.11716466517975754, 0.7947951202139344, 0.7641761412362215, 0.7563186834648731, 0.7547438812823746, 0.7913870093828637, 0.6391340689804297, 0.7924516880445596, 0.7939500621237707, 0.7389587397325867, 0.0812438685133855, 0.11387408977074298, 0.05734414991809422, 0.10691456674971833, 0.11077018986306653, 0.10764897181864475, 0.0915284379542749, 0.09358264866316401, 0.10376845223874442, 0.1429671596777844, 0.16121360662744277, 0.14341323948715, 0.14483147829919396, 0.15010788618563498, 0.18936785937219314, 0.20233833418249103, 0.15313650269714052, 0.15408754417310389, 0.20820660351418785, 0.2379337515361024, 0.24230642620047715, 0.41152630808167723, 0.20829760106696416, 0.2096933589735589, 0.4656784166602467, 0.5075181129750269, 0.1939876621874057, 0.18156130793978476, 0.22653100037289164, 0.19229288889681428, 0.2559506905506923, 0.11317336041111525, 0.20743350190464682, 0.18653852705302465, 0.13604506298866037, 0.3589209816822252, 0.17959013018353487, 0.1870519379208928, 0.18979133742894605, 0.22981273645160483, 0.19149486560914142, 0.18226475820490584, 0.18431790510032164, 0.20144809476915448, 0.19593762596248887, 0.2361422756141326, 0.6237674768572863, 0.17840206207099474, 0.1709869672407638, 0.2127740846735795, 0.18279826980489966, 0.20576727013239637, 0.2111299542291687, 0.2120188427326637, 0.24669895701997557, 0.16160732466632854, 0.16504702474479094, 0.20658272841304437, 0.18455203077504723, 0.18488041488958074, 0.19556323157463718, 0.10570730621849234, 0.8943158412343001, 0.7868884994387646, 0.16438850387713178, 0.16561779715332237, 0.12563537260589652, 0.08168726535674309, 0.8313009087318661, 0.2013366840055184, 0.18289170722971493, 0.1977220097944542, 0.1688956413811611, 0.1933526229753546, 0.17504327872566772, 0.20658924897892217, 0.17763601159051157, 0.19881053963081563, 0.18935111175357855, 0.17530594441552572, 0.19621090655355722, 0.08257481007609346, 0.12459241918908626, 0.07261707922059413, 0.09046676598656667, 0.08306820127903813, 0.08812125742704613, 0.07700392951685897, 0.08763926333966443, 0.07782128539166022]}, "mutation_prompt": null}
{"id": "41a63ecf-60e9-470c-af69-28348e303b33", "solution": "class EnhancedDynamicHybridPSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def levy_flight(self, scale=1.0):\n        return scale * np.random.standard_t(3, self.dim) / np.sqrt(np.random.gamma(1.5, 2, self.dim))\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i] + self.levy_flight(0.1), lb, ub)  # Integrate Levy flight\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "EnhancedDynamicHybridPSOSA_DE", "description": "Enhance exploration by incorporating Levy flights for global search alongside the chaotic map for dynamic parameter adaptation.", "configspace": "", "generation": 82, "fitness": 0.21166541026254906, "feedback": "The algorithm EnhancedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.47315455753521585, 0.4318010824550621, 0.4279843250848189, 0.42432786173510006, 0.39333804326247934, 0.406344457357836, 0.41962963743591253, 0.40378025875997703, 0.40133975097342733, 0.008566083725096929, 0.03836211922964827, 0.022244041468600484, 0.013555159107326631, 0.03454299484883727, 9.999999999998899e-05, 9.999999999998899e-05, 0.004276756656504177, 9.999999999998899e-05, 0.08328620214002991, 0.09866791579901035, 0.09740777120747424, 0.10630197944046937, 0.0825368960250269, 0.09470044453957616, 0.0818436179410964, 0.08437032886872675, 0.1089957935732968, 0.09562683297593644, 0.07506574974930613, 0.07472273295923082, 0.07840890628359298, 0.08032663682156249, 0.09965700083056639, 0.09109021981630283, 0.07735367589977649, 0.08485208679857636, 0.9723740710892702, 0.9754786487354216, 0.9783264881324675, 0.9804459796091172, 0.9772139884048212, 0.9599582161108886, 0.9757598486747422, 0.9728398861364373, 0.9782739665213607, 0.24704104636986735, 0.23197824203899764, 0.2275082305707813, 0.23392444853117167, 0.2182150082787977, 0.2360943383656774, 0.2564642590695676, 0.2275240328031557, 0.2163564671405236, 0.27628010897886757, 0.3318733782815786, 0.3058742784398344, 0.283542760889565, 0.2513083431208347, 0.31167152079442173, 0.2835875762560329, 0.28796743831451466, 0.3017684180020592, 0.16789657917519707, 0.15008332035778094, 0.13656696814676283, 0.15832336408274972, 0.1732779143580212, 0.16271475945582203, 0.17746212664291727, 0.15255753759356905, 0.17091602607430068, 0.13779084125736807, 0.10334020255977194, 0.12678496671373884, 0.15665069067249537, 0.16284977938525702, 0.12283200139230122, 0.1577663778416134, 0.14541866824095484, 0.13894383450749515, 0.012449042580021663, 9.999999999998899e-05, 9.999999999998899e-05, 0.009238463351666226, 9.999999999998899e-05, 9.999999999998899e-05, 0.040065054671982736, 0.006553831559877099, 0.045415166190919676, 0.1505146832097476, 0.04918774786376923, 0.10056110420462372, 0.12112516276033147, 0.03742003429876661, 0.10897606011493643, 0.14307302102677222, 0.17503743099973057, 0.052823878718989525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08081594246218304, 0.11827098059251273, 0.06474666154715925, 0.07111596192589242, 0.0937553463013524, 0.09782191167525289, 0.06835656496711129, 0.07645190241114064, 0.07727161712846153, 0.3663726456144665, 0.3802697666129454, 0.39463504141673744, 0.38612748381974904, 0.3880567316603263, 0.3944989342190838, 0.41500288064290414, 0.3785312692913625, 0.39143536442946936, 0.06599106922505649, 0.08994343026887275, 0.11975126378395506, 0.1022440686404198, 0.08763293819013507, 0.09096448620754949, 0.09128875791518354, 0.11176240455403808, 0.11125643410996688, 0.15236854981782522, 0.1475565300803774, 0.15270034935617438, 0.14433124622534066, 0.227997476027768, 0.15725249575830857, 0.2096641824439851, 0.18920410611776683, 0.1672083094351372, 0.2693781835579463, 0.2935762429965414, 0.2798622575541593, 0.26604178188677396, 0.2718881015499939, 0.2874436694620104, 0.2760356126116632, 0.2912822041715044, 0.27359934416998033, 0.19319338258217944, 0.19803590998055276, 0.22534063005972815, 0.19398928047262054, 0.20843555310399287, 0.21399316943733093, 0.22331787832327343, 0.24003486355161052, 0.21611597589827414, 0.17901249397125762, 0.19679568620371157, 0.22410002497865922, 0.20233185156488875, 0.1901377570363033, 0.20521175374494505, 0.20195714595243164, 0.24008861862594488, 0.19016406670509667, 0.18751832569337934, 0.18792536562788176, 0.209156224162796, 0.18285830277995085, 0.21188817973861618, 0.20197469356338105, 0.21544713570206542, 0.18790461902006717, 0.2142924946985877, 0.6499026996285836, 0.1671271510945349, 0.15279232269600473, 0.17182912863467936, 0.19951162158249147, 0.19800115519764083, 0.5380617527633272, 0.19531025037359073, 0.1515972010969634, 0.5132684202404796, 0.20796076034453104, 0.472858307610888, 0.49440073077350877, 0.4187579726577828, 0.5230763098770089, 0.20957534464863004, 0.12696511520313036, 0.5031466257694004, 0.17554806676930168, 0.1756256703320498, 0.17814471636120977, 0.19673323553831068, 0.17653211916166112, 0.18515155665739869, 0.17140239105145916, 0.1949644352039407, 0.17418735820508668, 0.07706701011535988, 0.07623581433429705, 0.07481769071455024, 0.08374544403699913, 0.0766757964350856, 0.09686497823683671, 0.07137961978229546, 0.08984448811941859, 0.08335191846966805]}, "mutation_prompt": null}
{"id": "07be4b0c-a3ca-4d7f-8c25-09104b52082c", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "1a2e48e8-2610-42b4-8439-6eca9b09d282", "solution": "class ImprovedDynamicHybridPSOSA_DE(SelfAdaptiveImprovedDynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Implement a self-adaptive mechanism to adjust the algorithm's parameters during optimization.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'SelfAdaptiveImprovedDynamicHybridPSOSA_DE' is not defined\").", "error": "NameError(\"name 'SelfAdaptiveImprovedDynamicHybridPSOSA_DE' is not defined\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "b7ef83b1-15ec-49a7-991a-334e82f63953", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, chaos_param=3.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.chaos_param = chaos_param\n\n    def chaotic_map(self, x):\n        return logistic.cdf(self.chaos_param * x) * 10.0 - 5.0", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "ImprovedDynamicHybridPSOSA_DE with adaptive chaos-driven mutation and dynamic population size.", "configspace": "", "generation": 85, "fitness": 0.366753395655203, "feedback": "The algorithm ImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.29.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.8510351779802632, 0.8694260356251269, 0.8713800451132899, 0.862315836250332, 0.7815854935769965, 0.8161823126549262, 0.8550909949358914, 0.8588728753055234, 0.84360581179627, 0.6875732098492277, 0.6877192121403455, 9.999999999998899e-05, 0.678904118308409, 0.3397621908367653, 0.7050183207332948, 0.04990859108081691, 0.05515979824443329, 0.057488289042187724, 0.10911267437406713, 0.10964221883269087, 0.12324878573704734, 0.1211140008560766, 0.11335169036871562, 0.1293069197002773, 0.11629242529481831, 0.12390666267116246, 0.09822434378109124, 0.09430513861392631, 0.09153931343710187, 0.13955581114389026, 0.09159284898452458, 0.07593561425827189, 0.14918121496981807, 0.08305401759662434, 0.13376603056269065, 0.04289584664243862, 0.9798746572255668, 0.9804290622560553, 0.9782166530587577, 0.9759085106031654, 0.9683160065130307, 0.9712167838923301, 0.9811093980442558, 0.9783873415065478, 0.9791708441776308, 0.5046388641381896, 0.05880988741940185, 0.49526300120870537, 0.5194103027472987, 0.5011114006250913, 0.14827934796185926, 0.5281404099822103, 0.516456844969898, 0.08622678299056585, 0.8976283177724566, 0.38589234700727726, 0.8146440237465294, 0.21065834404502548, 0.8693949046032984, 0.2103539169030164, 0.8609597815377024, 0.8290146941734402, 0.8629006061500628, 0.5634232808140376, 0.12911504431997167, 0.3490459835255053, 0.1301460490757157, 0.550283166980273, 0.6384768006808554, 0.6075004807339657, 0.5334209208932708, 0.5187265315247553, 0.6162334892548713, 0.01006905583439599, 0.4838754999453746, 0.6898205258372068, 0.5347846125750878, 0.6237720572638867, 0.1316106414084015, 0.10469558642818011, 0.21981401279697688, 0.06862209051318913, 0.06742395145379065, 0.0642172659401955, 9.999999999998899e-05, 0.583557215538813, 0.5184770572201423, 0.46360377481140647, 9.999999999998899e-05, 0.3910333135485424, 0.6171013778483139, 0.6860912574406677, 0.6886075009961633, 0.5405248475496538, 0.5972809627304024, 0.30926449035756365, 0.7481803296142633, 0.5307796844214036, 0.7053529626378544, 0.3148487352748882, 0.04680721531591481, 9.999999999998899e-05, 0.2945230544492339, 0.08058785730973939, 0.27157342640388693, 0.19161711414975313, 0.07639444929945383, 0.08147772200232062, 0.4844181830684251, 0.49639835767991236, 0.3529524022811683, 0.00632968859517391, 0.006351426540178506, 0.4373350600788549, 0.38276779317757537, 0.4681684862568172, 0.3554636247242682, 0.8122399587440545, 0.8188379631738882, 0.8001313585442834, 0.8080956412167342, 0.7587405988648259, 0.7775440218416758, 0.8056725296265196, 0.7857361285262546, 0.8293387581801851, 0.12939216492547223, 0.10625471020425903, 0.10560220517087948, 0.10901563484320775, 0.11846534388465357, 0.1006230686080567, 0.15563897250359382, 0.1432454980701503, 0.0886007812719285, 0.176302444155798, 0.21506320853831562, 0.1440272808553571, 0.2251037659572629, 0.505992637556517, 0.1475994010838032, 0.2826951964396831, 0.2574055225625653, 0.2268765572550271, 0.3795791358372538, 0.27979397147344476, 0.3782931468677825, 0.5131009328054771, 0.33728342493829255, 0.30475618162177043, 0.4316533705609179, 0.46975390266688566, 0.5301585667948222, 0.23557894755519615, 0.1791999672548643, 0.24829131736218246, 0.28198572145880385, 0.20172359437644916, 0.2861620523459544, 0.26633869314969794, 0.45867726244365226, 0.3712477035319076, 0.221121743765483, 0.18142250898145307, 0.19457605543899636, 0.18771798848466614, 0.2057032423799341, 0.1804875804387175, 0.22808830858593554, 0.23836861071500282, 0.21382658690052958, 0.18561201112004433, 0.20558602622401112, 0.20847470310177063, 0.20942212692537598, 0.19880797560619545, 0.16994079059796108, 0.18529516467896867, 0.21126200891681934, 0.20924447555248116, 0.8867257637279232, 0.18465451636708163, 0.18640459932690767, 0.16830915680974246, 0.2005227878381839, 0.861728454211782, 0.15168337329757398, 0.16635092364579285, 0.16789250117073662, 0.8981321511124607, 0.15627563018590285, 0.7644109436006539, 0.16412611828903778, 0.16815752611520185, 0.8072465908432986, 0.20851796454608906, 0.09425422838629005, 0.10492393043588888, 0.18612836002905775, 0.17537369980697282, 0.19003494159480883, 0.1805654897155069, 0.17047998914423312, 0.17904660993870092, 0.18413051874769726, 0.175758153249014, 0.1999710047999952, 0.08310511952289379, 0.08328757147754329, 0.1129556427467947, 0.07150474837883125, 0.0758242202753201, 0.08463907719508657, 0.07664184133717977, 0.07304351808989629, 0.08033531581775]}, "mutation_prompt": null}
{"id": "ea18d3ab-7ef0-475a-be5b-20b8dac2f4c8", "solution": "from scipy.stats import cauchy\n\nclass AdaptiveDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def adaptive_mutation(self, x):\n        scale = 0.1\n        return x + cauchy.rvs(scale=scale, size=len(x))\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                mutant = np.clip(self.adaptive_mutation(swarm[i]), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n        return global_best_val", "name": "AdaptiveDynamicHybridPSOSA_DE", "description": "Introduce a novel adaptive mutation strategy based on Cauchy distribution to enhance exploration during optimization.", "configspace": "", "generation": 86, "fitness": 0.3008422952924675, "feedback": "The algorithm AdaptiveDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.8692303774682026, 0.8447973056111454, 0.8576645569608151, 0.8559540918228191, 0.8389841793167669, 0.8487358056543284, 0.8555836832160373, 0.8443712634546611, 0.8516853811605697, 0.6574165271871857, 0.056527788322412786, 0.09357420223621615, 0.15852572463495818, 0.06681695924576847, 0.04295952626234378, 0.243337036104047, 0.08444293711371209, 0.09748446248347331, 0.10769547983970784, 0.11982524382348969, 0.13524190160913696, 0.11689275348430872, 0.15368066969596272, 0.11158206578907848, 0.1279479578845869, 0.14381514676840923, 0.09291593709343848, 0.14240051203919846, 0.12433722658038515, 0.08821950995100636, 0.1314848227471428, 0.12158079002074373, 0.1189966159638085, 0.10338690618043023, 0.11273773251514163, 0.1140650323328346, 0.9853592949877976, 0.9834323568497488, 0.9873888531099667, 0.961857399679986, 0.9744597288293265, 0.962239978886598, 0.9679810147792581, 0.9794458919994827, 0.9690890902331533, 0.4068075997974575, 0.43173600995259453, 0.5075729704844033, 0.5628655806782794, 0.4765468975673952, 0.5338170197285277, 0.44728949258448947, 0.4778534145785087, 0.48870452631867267, 0.22037325725111467, 0.3845340395015101, 0.918432952119252, 0.3832688249777487, 0.5475355632041419, 0.3667741901977444, 0.1660837226923093, 0.21593870841670781, 0.3115496481794652, 0.46436568233953546, 0.18365668285059822, 0.13050846338747601, 0.16305978107243335, 0.25038769282149487, 0.16645824932314301, 0.1740145142162921, 0.13576486831705692, 0.18654157091636225, 0.41479805948259696, 0.2080863222217184, 0.14606916291416705, 0.1336050637631344, 0.2123615241437491, 0.24541613764613146, 0.22323570555660077, 0.15501369404715282, 0.19312952062673017, 0.0007769876926260189, 0.10717514126016014, 0.08910319841302572, 0.008011155545295523, 0.10867144752091751, 0.0005572525801671446, 0.16844246651511874, 0.02192907273320066, 0.005973281589395807, 0.2424674539701337, 0.25420357658507575, 0.1733309850829211, 0.23803612059551338, 0.12885380056501894, 0.13835014397646772, 0.7097135285990472, 0.19012480042675373, 0.114556497337015, 0.03421894891668509, 0.03774863227338532, 0.1330895866849331, 0.07432013416308692, 0.08782884243889255, 0.08827497398924766, 0.10298727304953625, 0.2000212793091679, 0.07080472114441494, 0.0841630919788624, 0.20144461193733743, 0.13888969607551338, 0.10869791360325287, 0.11788721189945517, 0.09187738507761678, 0.3223308806356333, 0.15242035463762527, 0.08647740977399954, 0.5011971082840428, 0.5195331533215084, 0.5940589074845548, 0.5040210923924815, 0.4423707487336561, 0.5357806086283294, 0.6536641033071389, 0.6529856922970759, 0.4962878916248835, 0.07969481561600911, 0.11483150301714684, 0.11402657119334436, 0.09928325403550131, 0.10787047104388692, 0.11192694004545378, 0.10596972569490737, 0.12727148040891956, 0.0886793144998197, 0.2505996897000158, 0.24076935723298099, 0.18260246435165273, 0.31491825803400775, 0.5405088837115849, 0.18946142466161886, 0.40762366869349376, 0.26349630012011305, 0.20112522336028094, 0.24277137506687074, 0.4153824695657049, 0.3201654755221831, 0.35927143393777405, 0.26885361625151305, 0.2906903407086463, 0.39538247119210823, 0.38391817503536707, 0.27639444274747826, 0.2877397359502992, 0.24923747662489737, 0.16210433193434748, 0.26742915249432286, 0.22495955746346918, 0.21796517772364954, 0.2638648135184598, 0.2872800634734404, 0.3023247075221165, 0.2089939213277785, 0.171045280274005, 0.20659463425720503, 0.21788654411031816, 0.18681913128710714, 0.17971921811300706, 0.23242460279126687, 0.21315521973327933, 0.24634865645314863, 0.2034089755464067, 0.24379632442902, 0.21075750321334263, 0.19693232418563078, 0.2045899487718562, 0.1909839068163971, 0.2273443679593079, 0.2410562707368079, 0.24708660001867988, 0.8892838280795095, 0.901731636917138, 0.15451643506306956, 0.9120839590869267, 0.20123047207272216, 0.1999422779557144, 0.8397742605432911, 0.17014194165762442, 0.211872445683437, 0.8613562243058601, 0.15657876761861766, 0.11129741362024193, 0.20693401344315698, 0.648574245149079, 0.21035690312028155, 0.10479817145503656, 0.8579100062964369, 0.8007539484790744, 0.1724123587480595, 0.1743416604338821, 0.21483215472889583, 0.1671227182230215, 0.20526784112579255, 0.1989041291570497, 0.1859894380654007, 0.1795082746967721, 0.17868790765197284, 0.09959419001818337, 0.0888760341893634, 0.06716567136410867, 0.08959980544560786, 0.08524448908136639, 0.08845129109959649, 0.12316838731780444, 0.08141147327774068, 0.08291541536673053]}, "mutation_prompt": null}
{"id": "75627666-39f2-4fff-99dc-a199bff924ba", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Introduce a chaotic map to enhance the exploration capabilities of the algorithm.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "30aefe97-15e4-4b75-a0fc-656718defc19", "solution": "class EnhancedDynamicHybridPSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.num_particles = max(10, int(30 - 20 * self.budget / (10000 * self.dim)))  # Dynamic population size\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "EnhancedDynamicHybridPSOSA_DE", "description": "Enhance exploration and exploitation by incorporating a dynamic population size mechanism into the algorithm.", "configspace": "", "generation": 88, "fitness": 0.36315850880018086, "feedback": "The algorithm EnhancedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.8654258734480393, 0.878255569759596, 0.8571041968157862, 0.8549035680221702, 0.8594363554609497, 0.8650771862106459, 0.8749343231240284, 0.8656896447771754, 0.8407423592636568, 0.07119666511369616, 0.701502469559196, 0.7053474514864055, 0.7689414872987983, 0.5922280195773875, 0.72142426564426, 0.7282052864529077, 0.6854791291457516, 0.6468314979073544, 0.0877524530268805, 0.09420137267614248, 0.14460363470129856, 0.10824576185090629, 0.1399119183797899, 0.17030049458174779, 0.1523474099890324, 0.13502322061965621, 0.10768148404896694, 0.11643884361533696, 0.10290970105126274, 0.10964291936145187, 0.084668328362696, 0.08570566699188586, 0.11874133397669173, 0.11560733696671921, 0.08808764382440437, 0.08604063717079169, 0.9859625370085598, 0.986637970755052, 0.9788215490173784, 0.9761252866577319, 0.9750587138105788, 0.9766707830058987, 0.9883221990214067, 0.9718933636802651, 0.9841695644029423, 0.466086741276203, 0.522927584262103, 0.5533432558362935, 0.5681076832725345, 0.14837134157354326, 0.4870657551950467, 0.12587530600700814, 0.5793824636472376, 0.08829308359924404, 0.2281862353860714, 0.21809123726376123, 0.8240219660500505, 0.8965671482654545, 0.23040071655315564, 0.2047117304872601, 0.21817222889805177, 0.7887869929144133, 0.23286760816287422, 0.1295467231664199, 0.4828225704673439, 0.13138046898407207, 0.1298689926412968, 0.1326214928443611, 0.6483524570863102, 0.5908833856654427, 0.5587896230990073, 0.3892448220509145, 0.6930657985291949, 0.12966307106817987, 0.6436204409759796, 0.5257073253898588, 0.47056129737612173, 0.5944093260795247, 0.7258087111181132, 0.12776251889529144, 0.1260050945885416, 0.610594135522516, 0.06323687600077976, 0.6034616522987888, 0.3633824782272599, 0.17943102194950422, 0.6012744738818784, 0.03543819339512777, 0.42744846315434337, 0.24162524428504695, 0.21941221399381639, 0.142895442876514, 0.5465157748876821, 0.14467491081366968, 0.5300240260812492, 0.5531460466916414, 0.6266750520993862, 0.7088304189548971, 0.33360661910763023, 0.04879103254759776, 0.07996314738229104, 0.33717969838095063, 0.2408375890887936, 0.2791594442955898, 0.34418487923690033, 0.2972700748657049, 0.3078751308272918, 0.18208695015929943, 0.5087459719633136, 0.4191762674787044, 0.49094956088400354, 0.006526582617244481, 0.006484156158512944, 0.3464595778039673, 0.08167870268813571, 0.45108987659623967, 0.08199955086886945, 0.8125816557403438, 0.8033031233028957, 0.7877818597355714, 0.8056321552860293, 0.7796097756846492, 0.8090419672011272, 0.8171633903200803, 0.7809985365821461, 0.8428087944430112, 0.11079501619231047, 0.12382261743191592, 0.13919940245179663, 0.13802535773908353, 0.16033043368281974, 0.1049658824163574, 0.08460195987765984, 0.10828928121948078, 0.07880084870899096, 0.23450651910421316, 0.19843659240216638, 0.22264993896561214, 0.26565795960685534, 0.43955124383264466, 0.1489191023415506, 0.20646983984343614, 0.18495840101934125, 0.24213475608630486, 0.298174988909201, 0.36615756158783874, 0.3235898789929592, 0.366837242645349, 0.43947710743635726, 0.5365160436783206, 0.28930991391690974, 0.3795544828614186, 0.3908187753297465, 0.19700157742748403, 0.2671665958376067, 0.23434040352341767, 0.282064528629281, 0.21024987264468953, 0.26386724411492957, 0.37544419836126586, 0.25227783949182314, 0.30751759542173573, 0.2591584305715352, 0.19840042158874793, 0.18909446042762468, 0.19273217582141655, 0.20010902917364248, 0.21193705937992235, 0.1973226790381949, 0.2795460773587316, 0.20103384163193772, 0.19456091306226175, 0.1976462633252304, 0.2068221688320906, 0.2002982231924353, 0.19551485758032527, 0.1986165227672354, 0.18217246494436212, 0.1771332992641006, 0.18090580506943588, 0.9046145496762139, 0.16035769666328048, 0.14716281576096513, 0.909997002865017, 0.20044082250844908, 0.16749643149250548, 0.16789208891671514, 0.14760641668842422, 0.20748809866671258, 0.08255375115745733, 0.21187974586722713, 0.7831589361571311, 0.2098936365408829, 0.8722591245991586, 0.21244306482104103, 0.16901017094630422, 0.2113080898259314, 0.12626066819951887, 0.1944185551232439, 0.18707667440356213, 0.17925072689691202, 0.1815250637046777, 0.17850337590376297, 0.17263975791688335, 0.1825198833743531, 0.18499328832201367, 0.17862815841151114, 0.08936249181070233, 0.07728029076470433, 0.09242111331309066, 0.07567532786531428, 0.07232325521195926, 0.08132703764133109, 0.08438381565233066, 0.0764400497046066, 0.07943705404250245]}, "mutation_prompt": null}
{"id": "46ef22ea-b213-417c-a5eb-2d52a716351c", "solution": "from scipy.stats import levy\n\nclass EnhancedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def chaotic_map(self, x, a=3.9):\n        return levy.cdf(a * x) * 10.0 - 5.0\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n                # Integrate Levy flights for mutation\n                levy_step = levy.rvs(size=self.dim) * 0.1  # Levy step\n                swarm[i] = np.clip(swarm[i] + levy_step, lb, ub)\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "EnhancedDynamicHybridPSOSA_DE", "description": "Enhance the population diversity by incorporating a mutation strategy based on Levy flights to improve exploration capabilities.", "configspace": "", "generation": 89, "fitness": 0.1394045262967271, "feedback": "The algorithm EnhancedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.18.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.23719849233957857, 0.2106447851526594, 0.23129971520432324, 0.21308116669601362, 0.24223091255688145, 0.190971042171601, 0.22909052715115685, 0.22751540324645558, 0.2184456157163448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0635853690623508, 0.06564304182139569, 0.051533809952508114, 0.05287689848954036, 0.052746125403124955, 0.05817455332356225, 0.06667269644952012, 0.059123051751881595, 0.05829624394411126, 0.05001854103282244, 0.06028351233133378, 0.04030719184614573, 0.04380550260268523, 0.05182947395897719, 0.042648378802337406, 0.048540215570387235, 0.03429758087810164, 0.04286456734301769, 0.9830277162085976, 0.974201502106263, 0.9879020822032488, 0.9260489754157952, 0.9172429377984656, 0.9320339669979344, 0.9374514653776834, 0.8164510053513718, 0.9436252848290255, 0.10748609007371357, 0.09618296781922131, 0.12882896482108086, 0.13429794071349443, 0.1451130613150572, 0.12403792566164007, 0.08033289859734172, 0.08545056143494456, 0.07615345105282612, 0.15855609180442753, 0.18366116101693974, 0.14564633912593106, 0.16963109754244365, 0.1891102443321051, 0.15380638296653393, 0.1581757595757033, 0.17288138939946218, 0.17636049522452557, 0.04385281636869531, 0.018922747284945363, 0.03054805206240685, 0.06889575729580044, 0.03953465114124233, 0.022651025731722285, 0.01580103564055846, 0.020130832973098034, 0.02739915211953048, 0.01095707372059973, 0.037772479534165515, 0.022556692718489812, 9.999999999998899e-05, 0.04422517859963848, 0.006454562579299106, 0.08999288562319396, 0.013176746897106906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10741100535599923, 0.026624130309154337, 0.045539456972917614, 0.040817376174738684, 0.05301963862701775, 0.05238321877383112, 0.055572167595446254, 0.05237673670356158, 0.03446351691296401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018948426311142574, 9.999999999998899e-05, 0.0004599225279915409, 0.0012763356354204003, 0.022813486055276222, 0.03169404867788839, 0.01587982858021275, 0.011125631005052816, 0.021744832012522974, 0.2224037975602947, 0.22310400456419455, 0.23536383767626046, 0.20167932360259766, 0.20255215319784614, 0.19820865365376117, 0.2846336025665066, 0.246235120720259, 0.2395005441282001, 0.06098450221668994, 0.0665122165569173, 0.05341150699060637, 0.05110259426587305, 0.06756661535038877, 0.047054279794115805, 0.049975121910724396, 0.0629684956948442, 0.05664337678381548, 0.20546728563825944, 0.19380432439663198, 0.15200101352741657, 0.16053333542123893, 0.13645863361066846, 0.15076119763598783, 0.13710335780276506, 0.16023712024099712, 0.15335277875354547, 0.20339789650469497, 0.18486862117958858, 0.1993296469061655, 0.19981439847926652, 0.18856669696610695, 0.18597429798501386, 0.17986466568523607, 0.20161646643975895, 0.193594288709678, 0.1476587596660529, 0.13714359079790406, 0.1331480951173467, 0.13178270716360252, 0.13030608777136565, 0.12914304626964646, 0.11343435176678163, 0.13395623213865493, 0.12522072054979982, 0.17930888526415456, 0.1631652387885828, 0.17156506797571325, 0.1608871657314005, 0.13282028470308638, 0.15567234722314693, 0.20281379006024303, 0.16266186300061214, 0.16762141427892407, 0.1487573116444464, 0.1640022059852776, 0.18770915325315463, 0.1572380330334021, 0.14799076504278508, 0.1539841305029086, 0.14967197845943503, 0.1490619050423435, 0.1653435124448357, 0.16500982679536336, 0.1658991859478225, 0.150630638182212, 0.15655685963317123, 0.16618151099205336, 0.15793892313483648, 0.1282230621674707, 0.15525374940296566, 0.20612334588709313, 0.22186761628960416, 0.16722182830396437, 0.16651562139748965, 0.1489298274504215, 0.16460067490045527, 0.15825316856385763, 0.10656460373022636, 0.2127926187336847, 0.26023009801425356, 0.2018885562485705, 0.19051371376003823, 0.18719320820176022, 0.18493107505340034, 0.18944739126593158, 0.17989355198570212, 0.20219464247864694, 0.1870589733922765, 0.20591802792578295, 0.06236728472521047, 0.0463201247828523, 0.05085032985396609, 0.056349025658086194, 0.0502476608071416, 0.04571356600206489, 0.06468695783407186, 0.07187515602339878, 0.060977235688453924]}, "mutation_prompt": null}
{"id": "d9a9daa8-1416-4a27-afdb-5052db2733c9", "solution": "from scipy.stats import levy\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def levy_flight(self, alpha=1.5, beta=0.5):\n        return levy.rvs(alpha, loc=0, scale=beta, size=self.dim)\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                mutant = swarm[i] + self.levy_flight()  # Levy flight mutation\n                mutant = np.clip(mutant, lb, ub)\n                trial_fitness = func(mutant)\n\n                if trial_fitness < fitness:\n                    swarm[i] = mutant.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Enhance the diversity of the population by introducing a mutation strategy based on Levy flights to improve exploration capabilities.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"_parse_args_rvs() got multiple values for argument 'loc'\").", "error": "TypeError(\"_parse_args_rvs() got multiple values for argument 'loc'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "59282aa6-a921-4833-89fe-4bbdcb9885c3", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, a=3.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.a = a\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for iter_count in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            self.a = self.a * (1 - iter_count / self.max_iterations)  # Dynamic adaptation of the chaotic map parameter 'a'\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Implement a dynamic adaptation of the chaotic map parameter `a` based on the iteration count to enhance exploration.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "15fa3ddd-6584-4e9e-8c56-ce6124d430fb", "solution": "def levy_flight(dim):\n    beta = 1.5\n    sigma = (gamma(1 + beta) * sin(pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n    u = np.random.normal(0, 1, dim)\n    v = np.random.normal(0, 1, dim)\n    step = u / (abs(v) ** (1 / beta))\n    return 0.01 * step\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i] + levy_flight(self.dim), lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Improve exploration by incorporating Levy flights for enhanced global search capabilities.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "9a281dc5-a91f-4501-b409-18780ae27049", "solution": "from scipy.stats import levy\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, levy_scale=0.01):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.levy_scale = levy_scale\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            # Introduce Levy flight for exploration\n            levy_step = levy.rvs(size=(self.num_particles, self.dim)) * self.levy_scale\n            swarm = np.clip(swarm + levy_step, lb, ub)\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Improve exploration and exploitation balance by incorporating a Levy flight mechanism to update particle positions.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "da550245-31f4-4593-9705-88e47a84c100", "solution": "class ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9, de_weight=0.5):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n        self.de_weight = de_weight\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant_de = a + self.de_weight * (b - c)\n                mutant = np.clip(mutant_de, lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Enhance the mutation strategy by incorporating a differential evolution scheme for generating mutants.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\").", "error": "AttributeError(\"'ImprovedDynamicHybridPSOSA_DE' object has no attribute 'chaotic_map'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "9f7326b7-9a6b-44ad-bbb1-05fb2cde832e", "solution": "from scipy.stats import logistic\n\nclass ImprovedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def chaotic_map(self, x, a=3.9):\n        return logistic.cdf(a * x) * 10.0 - 5.0\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "ImprovedDynamicHybridPSOSA_DE", "description": "Improve exploration by incorporating a hybrid strategy of Particle Swarm Optimization (PSO) and Simulated Annealing (SA) using chaotic maps for dynamic adjustment of algorithm parameters.", "configspace": "", "generation": 95, "fitness": 0.3846107710107131, "feedback": "The algorithm ImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.29.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "2f090563-1ecd-4983-b0a0-975b97ee7898", "solution": "class RefinedDynamicHybridPSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "RefinedDynamicHybridPSOSA_DE", "description": "Enhance exploration and exploitation balance by dynamically adjusting mutation and crossover rates using a chaotic map.", "configspace": "", "generation": 96, "fitness": 0.3846107710107131, "feedback": "The algorithm RefinedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.29.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.860787561863439, 0.8642061684812488, 0.8745726007559207, 0.7906872999245618, 0.8555040459157767, 0.8601498327570204, 0.8481750792930834, 0.8474334097046751, 0.8609923414172834, 0.697729116403544, 0.6675891992515877, 0.6512977667567139, 0.7251376428015877, 0.6099651287889708, 0.693015268512368, 0.7065514998566362, 0.6939293562735687, 0.6045153819700266, 0.13405255229561208, 0.09709610979714378, 0.14712185308369718, 0.12763096797917062, 0.13497775599932793, 0.14049544732188957, 0.124501441368711, 0.10839028499515257, 0.123772281147425, 0.1278096943754239, 0.08837851354970883, 0.16002828172605765, 0.10719431573476068, 0.13178081837666, 0.09376389706367771, 0.08948369366773712, 0.10201801833132318, 0.10429292362167375, 0.9846655179570145, 0.9794949295207412, 0.9679749528682413, 0.9839169670162826, 0.9663210356977787, 0.9719246507214834, 0.9853477911280474, 0.9738413861133082, 0.9863607200693528, 0.5012571576182234, 0.05963876321055772, 0.44155192776891017, 0.47148870545440436, 0.1493043321133568, 0.14936594888931465, 0.35669448138195214, 0.505076828155399, 0.49838794941339615, 0.22407829824986347, 0.8636042359040772, 0.7842801089632531, 0.2742978255352664, 0.35570832670999064, 0.7756514261152042, 0.8523086245922941, 0.7505041546884809, 0.87700459692195, 0.583911470098781, 0.5711636289006528, 0.5717748401417782, 0.44992997540124446, 0.4432501299733659, 0.5236173730415483, 0.5966231294029367, 0.1303926594219278, 0.5999523578920687, 0.3659169776218576, 0.41005387482924494, 0.68558417761034, 0.6270070318688267, 0.12934364248124608, 0.5120399228821819, 0.5565633403897994, 0.4199731479102149, 0.4068676225693998, 0.06761664794278455, 0.08890380658964714, 0.013024889150361929, 0.0006941405299790704, 0.6137469729472119, 0.5344602496466073, 0.6238237215439488, 0.42991908541017154, 0.0766334029113599, 0.17634305641806225, 0.4432369517856044, 0.47388119429939957, 0.5217848884256852, 0.013400980291171094, 0.6717330031533546, 0.7493343316904391, 0.6887199886633855, 0.6325404150754736, 0.21715186366632966, 0.03434127386560393, 0.04511395978990895, 0.22394546218736044, 0.07259382860654207, 0.11506523115085399, 0.19503156372710373, 0.09500203882124347, 0.07141216945402884, 0.41142026230733086, 0.2911471943766263, 0.23046840399241053, 0.5755110498523681, 0.006362898049683152, 0.5092935538050034, 0.3067735430572648, 0.055792092609878496, 0.44381929816425914, 0.8141491175914464, 0.7840436904333193, 0.8242702571262719, 0.8328430963461051, 0.7468962632237419, 0.7558731749420498, 0.754132508228493, 0.788927851007827, 0.7562245024591641, 0.10560457266322631, 0.1126854140416359, 0.10401815622793331, 0.10474276823051443, 0.1307278843009141, 0.12414488850455385, 0.12122896511784143, 0.14223217454683035, 0.06896165240064878, 0.2069693614889434, 0.1631981490500437, 0.18249030807410083, 0.1720561762148871, 0.19653331884708936, 0.17848532099301206, 0.19384928456638628, 0.18260807127860634, 0.20661196287822248, 0.3177597702639299, 0.29465857598489764, 0.32067069017937655, 0.4947032415862971, 0.4081474266761188, 0.33553309052673763, 0.5237438489772226, 0.4323941019525269, 0.42499567760852475, 0.17574918645860726, 0.30744700891670995, 0.3251943388227869, 0.22587757859269242, 0.26552521903108206, 0.2681284159153364, 0.24390325572765825, 0.3649238541359908, 0.3162403360080953, 0.22360367445827278, 0.19211507016773144, 0.17274736385007616, 0.2301239207715975, 0.2614849743320844, 0.19279779605577718, 0.21784230688674444, 0.17789818770607324, 0.19520110944068503, 0.2543295917258771, 0.18244380315541353, 0.18222208803094853, 0.20062899428755365, 0.23844149025476857, 0.19601850892854422, 0.2050218689347063, 0.19008792607734515, 0.20413585858417616, 0.1859648378359744, 0.1578695493464638, 0.17254409389331138, 0.1631031224709033, 0.19996601710965556, 0.19890575944063094, 0.1513938915281109, 0.1690353975979626, 0.8817667015746409, 0.8830495683803566, 0.7017266499858328, 0.7898357193436724, 0.870511576071944, 0.16704181229234505, 0.8392691870837831, 0.11219614118566901, 0.8169323513565758, 0.8395729616792303, 0.17417748054474413, 0.18623015343424387, 0.18970086128718666, 0.18847716446138618, 0.1687459370923058, 0.19088117498287094, 0.19344438374405581, 0.18616675595236498, 0.17376840923959813, 0.07523741606451317, 0.07768173841904558, 0.07683750618533525, 0.07522297259580923, 0.10177990878644827, 0.08450479019949453, 0.09741808022634246, 0.0722324891159547, 0.09639702567133868]}, "mutation_prompt": null}
{"id": "60abd068-7d2f-4444-81c3-435e2ccc6b70", "solution": "class RefinedDynamicHybridPSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                de_mutant = a + self.f * (b - c) + self.f * (personal_best_pos[i] - swarm[i])\n                trial[crossover] = np.clip(de_mutant[crossover], lb, ub)\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "RefinedDynamicHybridPSOSA_DE", "description": "Enhance the mutation strategy by incorporating a differential evolution approach to promote diverse search behavior.", "configspace": "", "generation": 97, "fitness": 0.35136245326012033, "feedback": "The algorithm RefinedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.27.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.8697756656419224, 0.8688003346264866, 0.8779382634702187, 0.8753060320505295, 0.8600141114679942, 0.8616679735978344, 0.8675744168385109, 0.8313043428083042, 0.8657835267192707, 0.7052310685003671, 0.4634536323908317, 0.4809789465278471, 0.6824178004771728, 0.7030187957711177, 0.6580242293772115, 0.6629780776334933, 0.6596309331071173, 0.053255303652626984, 0.1389750168952678, 0.09312001665513181, 0.1140389088058491, 0.11757677911896136, 0.1316920983522788, 0.10130777829457316, 0.11628925592019534, 0.15185391527283432, 0.1315493389097967, 0.1302875801205171, 0.0888227426279875, 0.09009982694091101, 0.10085686493947232, 0.15099570894409442, 0.11116845538270737, 0.08715453850374033, 0.09359737298602866, 0.0887717731725508, 0.9792403180772649, 0.9824077478134282, 0.9744384889171483, 0.9403584923338564, 0.9811194271229469, 0.9608422908658624, 0.9804681048104082, 0.9754454164441115, 0.9678013334447204, 0.39490534790374954, 0.25770656253918534, 0.34939207940408434, 0.1946876023941646, 0.23877940881984272, 0.3590423573235838, 0.37214621722917784, 0.4184100026776134, 0.38379915004045395, 0.7719401638897478, 0.7668296437443766, 0.8680766895012324, 0.7710452514331715, 0.7598084979937103, 0.2005892602410304, 0.12641495442914508, 0.8350909381076703, 0.6498206224963577, 0.4262732774010488, 0.22999552338356866, 0.2290374353998128, 0.34146596170258725, 0.5693942853047468, 0.36007613327615595, 0.3225945376970262, 0.34747095910822046, 0.45410772667147625, 0.22214176480249492, 0.11819250435982198, 0.34023934456410176, 0.42478045232553907, 0.3070419641454789, 0.5719616001275234, 0.6490253791468601, 0.571250606582455, 0.12369765381219111, 0.1260940711920875, 0.045612434297099935, 9.999999999998899e-05, 0.45780946739337847, 0.2726109651843426, 0.13686994832924015, 0.12847056495696996, 0.10267535326374477, 0.13253137367493473, 0.40427509058534683, 0.6058884069236472, 0.6092617157446936, 0.2722517826148647, 0.07472955953696925, 0.23014959034744487, 0.5134910544871121, 0.08586572776075085, 0.2934904679817322, 0.07977939418676672, 0.3719434717148318, 9.999999999998899e-05, 0.07883713342145349, 0.07515229959660352, 0.09945287762648203, 0.12835773724500088, 0.08094734553833283, 0.09345708537756403, 0.2546806518690702, 0.2445581490046821, 0.17886855028086668, 0.42292140499054875, 0.4170395338689683, 0.4400289389975328, 0.18390205988970476, 0.43010482562538443, 0.08277432313383337, 0.7951098527071843, 0.7973613469787642, 0.7801027986804051, 0.7453819280131619, 0.7581084549107073, 0.7585001322559976, 0.790956372505463, 0.7650956053482263, 0.7758195093545774, 0.09596317278206301, 0.09499499087133445, 0.08108711237931654, 0.1424727854927773, 0.13668076818037533, 0.13942023995992237, 0.11766124306797443, 0.17303047752611966, 0.1279702838884299, 0.25780937506234247, 0.1534892369164509, 0.140363487124458, 0.23001918737977134, 0.15542793958929213, 0.17772288201393405, 0.16660397550303152, 0.2037258532712557, 0.17409644841929983, 0.5291872479366999, 0.2597013857207836, 0.3970297954060511, 0.3891255674814931, 0.3840563416995617, 0.48091796765341055, 0.3113106358716401, 0.5089299034240675, 0.45818438798505645, 0.20641472060294597, 0.18001055316224468, 0.2434707498727393, 0.2818755057819433, 0.26216136340721774, 0.2607885735944261, 0.23770269653074305, 0.34299366690976363, 0.2743355588255959, 0.23465915419390626, 0.18708764545219692, 0.17674720005969158, 0.19355032573180797, 0.19699924758166032, 0.21726864673205104, 0.2564404312237746, 0.18234401144513268, 0.2890911360425543, 0.2131433172836521, 0.20750287662379474, 0.42435153270967707, 0.18958483231428636, 0.22345878532713603, 0.20195002377828808, 0.18718704708431777, 0.19675087125279567, 0.21015706158764458, 0.6099768157338903, 0.6016785373375722, 0.18306495393161315, 0.9196693401110411, 0.2005280527194172, 0.17671597987481824, 0.1685269842864282, 0.16752452246042104, 0.1558906266837945, 0.7299659006476743, 0.15689492291056173, 0.1531327036806449, 0.20909007163712845, 0.1675224749592218, 0.8825866366297296, 0.2076897998780598, 0.7862970163139327, 0.15389497635914962, 0.17137806933472788, 0.1784208454628059, 0.18077369209603644, 0.19550397873241532, 0.19127964336576742, 0.1922543336277941, 0.17017757585036764, 0.19022557829312992, 0.19095952599141597, 0.09601500390401485, 0.08300471136794818, 0.08024608561087587, 0.0813799257854213, 0.09145386427294033, 0.07166293424615233, 0.07885860956750335, 0.09159860214349669, 0.08725211695181023]}, "mutation_prompt": null}
{"id": "eee58749-2142-4891-8143-e0a59ac65b3c", "solution": "class EnhancedDynamicHybridPSOSA_DE(DynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n    \n    def adjust_population_size(self, diversity_threshold=0.1):\n        fitness_values = [func(p) for p in self.swarm]\n        diversity = np.std(fitness_values)\n        if diversity < diversity_threshold:\n            self.num_particles = int(self.num_particles * 1.1)  # Increase population size\n        else:\n            self.num_particles = int(self.num_particles * 0.9)  # Decrease population size\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        swarm = lb + (ub - lb) * np.random.rand(self.num_particles, self.dim)\n        velocity = np.zeros((self.num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(self.num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            self.adjust_population_size()  # Adjust population size based on diversity\n\n            for i in range(self.num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(self.num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n        return global_best_val", "name": "EnhancedDynamicHybridPSOSA_DE", "description": "Enhancing the exploration by introducing a dynamic population size adjustment based on fitness diversity.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedDynamicHybridPSOSA_DE' object has no attribute 'swarm'\").", "error": "AttributeError(\"'EnhancedDynamicHybridPSOSA_DE' object has no attribute 'swarm'\")", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {}, "mutation_prompt": null}
{"id": "0b8a279d-f123-468e-89db-961e7c3df437", "solution": "class DynamicParticleAdaptationImprovedDynamicHybridPSOSA_DE(ImprovedDynamicHybridPSOSA_DE):\n    def __init__(self, budget, dim, num_particles=30, max_iterations=1000, c1=1.5, c2=1.5, initial_temp=100, cooling_rate=0.95, f=0.5, cr=0.9, f_lower=0.1, f_upper=0.9, cr_lower=0.1, cr_upper=0.9):\n        super().__init__(budget, dim, num_particles, max_iterations, c1, c2, initial_temp, cooling_rate, f, cr, f_lower, f_upper, cr_lower, cr_upper)\n\n    def __call__(self, func):\n        lb, ub = -5.0, 5.0\n        num_particles = self.num_particles\n        swarm = lb + (ub - lb) * np.random.rand(num_particles, self.dim)\n        velocity = np.zeros((num_particles, self.dim))\n        personal_best_pos = swarm.copy()\n        personal_best_val = np.full(num_particles, np.inf)\n        global_best_pos = np.zeros(self.dim)\n        global_best_val = np.inf\n\n        curr_temp = self.initial_temp\n\n        for _ in range(self.max_iterations):\n            for i in range(num_particles):\n                fitness = func(swarm[i])\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = swarm[i].copy()\n                    if fitness < global_best_val:\n                        global_best_val = fitness\n                        global_best_pos = swarm[i].copy()\n\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = 0.5 * velocity[i] + self.c1 * r1 * (personal_best_pos[i] - swarm[i]) + self.c2 * r2 * (global_best_pos - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], lb, ub)\n\n                a, b, c = swarm[np.random.choice(range(num_particles), 3, replace=False)]\n                mutant = np.clip(a + self.f * (b - c), lb, ub)\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = swarm[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n\n                if trial_fitness < fitness:\n                    swarm[i] = trial.copy()\n\n            curr_temp *= self.cooling_rate\n\n            self.f = max(self.f_lower, min(self.f_upper, self.chaotic_map(self.f)))  # Dynamic F using chaotic map\n            self.cr = max(self.cr_lower, min(self.cr_upper, self.chaotic_map(self.cr)))  # Dynamic CR using chaotic map\n\n            # Dynamic adaptation of the number of particles in the swarm\n            num_particles = max(3, min(100, int(num_particles * np.random.uniform(0.95, 1.05))))\n\n        return global_best_val", "name": "DynamicParticleAdaptationImprovedDynamicHybridPSOSA_DE", "description": "Implement a dynamic adaptation of the number of particles in the swarm to improve exploration and exploitation balance.", "configspace": "", "generation": 99, "fitness": 0.27258492561347925, "feedback": "The algorithm DynamicParticleAdaptationImprovedDynamicHybridPSOSA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "fb540dc7-d286-415e-9025-261da0331963", "metadata": {"aucs": [0.892145541823815, 0.6291470593564709, 0.805384911238313, 0.8732068532866502, 0.7185269259441618, 0.8851583502971623, 0.8852789025881779, 0.7883982960555156, 0.8767606488117421, 0.4619098963760815, 0.04148540174219795, 0.03732573630266811, 0.5570470300437094, 0.0, 0.45759016892505056, 0.5494046686739983, 0.2346893092529464, 0.3208729070071811, 0.10722217203742745, 0.11231294530215086, 0.1448683060707221, 0.09552073141769213, 0.13671707717138704, 0.09816469117780302, 0.0904503856049198, 0.10588121499313818, 0.12326214112218004, 0.10273378211977158, 0.07034659698816215, 0.06979660743288008, 0.09261528356202764, 0.09671470621374134, 0.069118442312335, 0.13843083765322206, 0.09968648186559292, 0.0838100858651254, 0.981063440078193, 0.9896703853451297, 0.9766736030574173, 0.9756535313820085, 0.9669320413127676, 0.9711539334937571, 0.9830281632855364, 0.9832929743836467, 0.9738637557517504, 0.2708012870107168, 0.2452103097006686, 0.28339822527861525, 0.270835169146734, 0.17773508320231735, 0.366021848510914, 0.12556662574120514, 0.08748998952509124, 0.1260000933731591, 0.8831809627728013, 0.20946405804052848, 0.7723922138677675, 0.591272394836537, 0.9026366627121785, 0.2716761943743916, 0.32098958011614476, 0.2164665383187967, 0.8803101562764778, 0.16123880101429333, 0.1540312296966394, 0.15380115819996576, 0.1269662004381522, 0.1273425803873548, 0.23139096121779468, 0.2149678709083893, 0.14775139185298103, 0.211599829503883, 0.26665771643091296, 0.05348678964778408, 0.1303966813108447, 0.23281365430034695, 0.16674810543689522, 0.1303992143909838, 0.23715411836859623, 0.13640967759638856, 0.13084881897105316, 0.0, 0.0, 0.0, 0.01782854829417646, 0.0, 0.0, 0.13545773022639418, 0.06837820897411007, 0.08810796940624255, 0.19739335106748612, 0.3011787498769778, 0.19428146108954614, 0.6061194071793585, 0.1669819167374259, 0.06614750841756956, 0.39102968585017184, 0.10166270162146063, 0.21137934546916481, 0.13762581383759975, 0.12590980911599747, 0.0, 0.13795110622615103, 0.10740003800886988, 0.17332187188820913, 0.11582635942663111, 0.1877143851836034, 0.12414362389498235, 0.24579594525578063, 0.08335736987992082, 0.32544623881499224, 0.2535413415595552, 0.1127894700083274, 0.15683148743985054, 0.16803527423360665, 0.0, 0.08190629504893332, 0.5927861543876283, 0.5501264848767251, 0.5691229918609706, 0.5289548193006165, 0.4558175695292751, 0.4635270489921006, 0.6414494644847879, 0.3968976836615645, 0.5616781743421915, 0.07050838393657155, 0.1379486763423614, 0.11671006243343984, 0.0879966846788035, 0.1445749118042482, 0.13114575437314002, 0.09589331188688666, 0.13507993836721566, 0.10326830225920491, 0.1519868436636116, 0.15734534450949433, 0.2381135794985031, 0.21754651858825713, 0.1516450243454217, 0.24104520207253044, 0.14671226723585695, 0.1431045101200401, 0.21365537087528375, 0.34132564058405535, 0.29151877544329763, 0.41381254560762204, 0.3333193553103556, 0.38119119790360456, 0.23521808997682436, 0.3120261064476023, 0.3333206878473609, 0.40501738080786187, 0.17693315097347495, 0.18407189135110114, 0.20622788146862403, 0.23219048751157856, 0.23015948590891877, 0.4344983099683535, 0.2684214676910949, 0.2820820495476445, 0.22995032284698425, 0.20356198015884253, 0.20210487923561837, 0.19497002278423148, 0.20725501496262388, 0.206377300848686, 0.23400375193469858, 0.22010294790057028, 0.18714282013214523, 0.1869937457517279, 0.24993402633386264, 0.20346822313484492, 0.19997751724999469, 0.21052144486499258, 0.18290190446898724, 0.22435390482337259, 0.1707384411953553, 0.19753685043430347, 0.1886679625845863, 0.18745073219180453, 0.12530160540338275, 0.18537160591519797, 0.8721592539674985, 0.2004902419752298, 0.1993191747134706, 0.16322741025025356, 0.12384922991569258, 0.2107052210383069, 0.211311550558958, 0.15622335387754427, 0.6243768021234868, 0.10951721346191456, 0.16630485558778252, 0.211069980540177, 0.11298990842870649, 0.0941688521322187, 0.3183105292047179, 0.17704165497910473, 0.19156818241628681, 0.19241272819545552, 0.18551479374879676, 0.17838874109742686, 0.1787933506141195, 0.1923412720336819, 0.18293469387872485, 0.18317070563262927, 0.10009218018308308, 0.08688207019560645, 0.09649273752516552, 0.0853206953644603, 0.09480680742147118, 0.08422564204231386, 0.08199425096757207, 0.08782337531677509, 0.0675417539522356]}, "mutation_prompt": null}
