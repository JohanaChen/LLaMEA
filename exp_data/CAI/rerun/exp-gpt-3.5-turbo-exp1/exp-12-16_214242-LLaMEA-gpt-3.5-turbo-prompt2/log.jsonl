{"id": "5889d5e1-90fb-468d-804c-ca533e404b16", "solution": "import numpy as np\n\nclass EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            if strategy == 0:  # DE/rand/1\n                return a + self.f * (b - c)\n            elif strategy == 1:  # DE/best/1\n                return x + self.f * (pop[np.argmin([func(p) for p in pop])] - x)\n            # Add other strategies (DE/rand/2, DE/best/2, DE/current-to-pbest/1, DE/current-to-pbest/2) here\n\n        def crossover(x, trial, strategy):\n            jrand = np.random.randint(self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < self.cr or j == jrand:\n                    x[j] = trial[j]\n            return x\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n        \n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "EA_ADES", "description": "Evolutionary Algorithm with Adaptive Differential Evolution Strategy (EA-ADES) for black box optimization, which adapts the DE strategy based on the success rate of each differential variant.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/home/ian/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/home/ian/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 37, in __call__\n  File \"<__array_function__ internals>\", line 200, in clip\n  File \"/home/ian/.local/lib/python3.8/site-packages/numpy/core/fromnumeric.py\", line 2180, in clip\n    return _wrapfunc(a, 'clip', a_min, a_max, out=out, **kwargs)\n  File \"/home/ian/.local/lib/python3.8/site-packages/numpy/core/fromnumeric.py\", line 54, in _wrapfunc\n    return _wrapit(obj, method, *args, **kwds)\n  File \"/home/ian/.local/lib/python3.8/site-packages/numpy/core/fromnumeric.py\", line 43, in _wrapit\n    result = getattr(asarray(obj), method)(*args, **kwds)\n  File \"/home/ian/.local/lib/python3.8/site-packages/numpy/core/_methods.py\", line 161, in _clip\n    return _clip_dep_invoke_with_casting(\n  File \"/home/ian/.local/lib/python3.8/site-packages/numpy/core/_methods.py\", line 115, in _clip_dep_invoke_with_casting\n    return ufunc(*args, out=out, **kwargs)\nTypeError: '>=' not supported between instances of 'NoneType' and 'float'\n.", "error": "TypeError(\"'>=' not supported between instances of 'NoneType' and 'float'\")Traceback (most recent call last):\n  File \"/home/ian/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/home/ian/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 37, in __call__\n  File \"<__array_function__ internals>\", line 200, in clip\n  File \"/home/ian/.local/lib/python3.8/site-packages/numpy/core/fromnumeric.py\", line 2180, in clip\n    return _wrapfunc(a, 'clip', a_min, a_max, out=out, **kwargs)\n  File \"/home/ian/.local/lib/python3.8/site-packages/numpy/core/fromnumeric.py\", line 54, in _wrapfunc\n    return _wrapit(obj, method, *args, **kwds)\n  File \"/home/ian/.local/lib/python3.8/site-packages/numpy/core/fromnumeric.py\", line 43, in _wrapit\n    result = getattr(asarray(obj), method)(*args, **kwds)\n  File \"/home/ian/.local/lib/python3.8/site-packages/numpy/core/_methods.py\", line 161, in _clip\n    return _clip_dep_invoke_with_casting(\n  File \"/home/ian/.local/lib/python3.8/site-packages/numpy/core/_methods.py\", line 115, in _clip_dep_invoke_with_casting\n    return ufunc(*args, out=out, **kwargs)\nTypeError: '>=' not supported between instances of 'NoneType' and 'float'\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "9c5b0a0c-028c-4ff0-9456-5aafca6b1ac4", "solution": "class Improved_EA_ADES(EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_strategies = [self.mutate_rand_2, self.mutate_best_2]\n        \n    def mutate_rand_2(self, x, pop):\n        idxs = np.random.choice(len(pop), 5, replace=False)\n        a, b, c, d, e = pop[idxs]\n        return a + self.f * (b - c) + self.f * (d - e)\n    \n    def mutate_best_2(self, x, pop):\n        best_idx = np.argmin([func(p) for p in pop])\n        best = pop[best_idx]\n        idxs = np.random.choice(len(pop), 3, replace=False)\n        a, b, c = pop[idxs]\n        return x + self.f * (best - x) + self.f * (a - b) + self.f * (c - best)\n    \n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n        \n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(len(self.mutation_strategies))\n                trial = self.mutation_strategies[strategy](pop[i], pop)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Improved Evolutionary Algorithm with Adaptive Differential Evolution Strategy (EA-ADES) for black box optimization with enhanced mutation and crossover strategies to increase exploration and exploitation capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "5889d5e1-90fb-468d-804c-ca533e404b16", "metadata": {}, "mutation_prompt": null}
{"id": "9d6b1d9b-40e8-4f08-81d4-ed7019b19104", "solution": "class EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.adaptive_factor = 0.2  # Dynamic adjustment factor for mutation and crossover\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            if strategy == 0:  # DE/rand/1\n                return a + self.adaptive_factor * (b - c)\n            elif strategy == 1:  # DE/best/1\n                return x + self.adaptive_factor * (pop[np.argmin([func(p) for p in pop])] - x)\n\n        def crossover(x, trial, strategy):\n            jrand = np.random.randint(self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < self.adaptive_factor or j == jrand:\n                    x[j] = trial[j]\n            return x\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "EA_ADES", "description": "Enhanced Evolutionary Algorithm with Adaptive Differential Evolution Strategy (EA-ADES) using a dynamically adjusted mutation factor and crossover rate to improve convergence and exploration.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'>=' not supported between instances of 'NoneType' and 'float'\").", "error": "TypeError(\"'>=' not supported between instances of 'NoneType' and 'float'\")", "parent_id": "5889d5e1-90fb-468d-804c-ca533e404b16", "metadata": {}, "mutation_prompt": null}
{"id": "0ac98bbf-b22b-4f2c-af28-216c3ea653f1", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            if strategy == 0:  # DE/rand/1\n                return a + self.f * (b - c)\n            elif strategy == 1:  # DE/best/1\n                return x + self.f * (pop[np.argmin([func(p) for p in pop])] - x)\n            # Add other strategies (DE/rand/2, DE/best/2, DE/current-to-pbest/1, DE/current-to-pbest/2) here\n\n        def crossover(x, trial, strategy):\n            jrand = np.random.randint(self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < self.cr or j == jrand:\n                    x[j] = trial[j]\n            return x\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n        \n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]\n\n        pso = differential_evolution(func, bounds=[(-5.0, 5.0)] * self.dim)\n        return pso.x", "name": "Improved_EA_ADES", "description": "Improved Evolutionary Algorithm with Adaptive Differential Evolution Strategy (EA-ADES) for black box optimization by introducing a novel hybridization approach with Particle Swarm Optimization (PSO) for global exploration.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'>=' not supported between instances of 'NoneType' and 'float'\").", "error": "TypeError(\"'>=' not supported between instances of 'NoneType' and 'float'\")", "parent_id": "5889d5e1-90fb-468d-804c-ca533e404b16", "metadata": {}, "mutation_prompt": null}
{"id": "9477cdf9-6f9d-4255-85da-a236939b7c79", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.epsilon = 1e-6  # Small value for numerical stability\n        self.min_strategy_prob = 1e-6  # Minimum strategy probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            if strategy == 0:  # DE/rand/1\n                return a + self.f * (b - c)\n            elif strategy == 1:  # DE/best/1\n                return x + self.f * (pop[np.argmin([func(p) for p in pop])] - x)\n            # Add other strategies (DE/rand/2, DE/best/2, DE/current-to-pbest/1, DE/current-to-pbest/2) here\n\n        def crossover(x, trial, strategy):\n            jrand = np.random.randint(self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < self.cr or j == jrand:\n                    x[j] = trial[j]\n            return x\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs = np.maximum(self.strategy_probs, self.min_strategy_prob)  # Ensure min prob\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                        if np.all(self.strategy_probs < self.min_strategy_prob):  # Enhance diversity\n                            self.strategy_probs += self.epsilon\n                            self.strategy_probs /= np.sum(self.strategy_probs)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Improved Evolutionary Algorithm with Adaptive Differential Evolution Strategy (EA-ADES) for black box optimization, enhancing strategy adaptation and population diversity.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'>=' not supported between instances of 'NoneType' and 'float'\").", "error": "TypeError(\"'>=' not supported between instances of 'NoneType' and 'float'\")", "parent_id": "5889d5e1-90fb-468d-804c-ca533e404b16", "metadata": {}, "mutation_prompt": null}
{"id": "56ce8f0c-e915-49fa-b912-05612e51df87", "solution": "import numpy as np\n\nclass EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            if strategy == 0:  # DE/rand/1\n                return a + self.f * (b - c)\n            elif strategy == 1:  # DE/best/1\n                return x + self.f * (pop[np.argmin([func(p) for p in pop])] - x)\n            # Add other strategies (DE/rand/2, DE/best/2, DE/current-to-pbest/1, DE/current-to-pbest/2) here\n\n        def crossover(x, trial, strategy):\n            jrand = np.random.randint(self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < self.cr or j == jrand:\n                    x[j] = trial[j]\n            return x\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n        \n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "EA_ADES", "description": "Evolutionary Algorithm with Adaptive Differential Evolution Strategy (EA-ADES) for black box optimization, which adapts the DE strategy based on the success rate of each differential variant.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5889d5e1-90fb-468d-804c-ca533e404b16", "metadata": {}, "mutation_prompt": null}
{"id": "a89921b4-484f-4338-9443-65be20d233dc", "solution": "import numpy as np\n\nclass EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy, mut_prob):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return np.where(np.random.rand(self.dim) < mut_prob, x + self.f * (b - c), x)\n\n        def crossover(x, trial, strategy, cross_prob):\n            jrand = np.random.randint(self.dim)\n            return np.where((np.random.rand(self.dim) < cross_prob) | (np.arange(self.dim) == jrand), trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n        \n        mut_prob = 0.5  # Initial mutation probability\n        cross_prob = 0.9  # Initial crossover probability\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy, mut_prob)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial, strategy, cross_prob)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "EA_ADES", "description": "Improved Evolutionary Algorithm with Adaptive Differential Evolution Strategy (EA-ADES) for black box optimization, which introduces a dynamic adaptation of mutation and crossover parameters.", "configspace": "", "generation": 6, "fitness": 0.19515052096861285, "feedback": "The algorithm EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "5889d5e1-90fb-468d-804c-ca533e404b16", "metadata": {"aucs": [0.4608994401538796, 0.4704759194075867, 0.4685588176992824, 0.45923021400595887, 0.4506627595338484, 0.43963944045958603, 0.4547172375554509, 0.4620027565480477, 0.4491247666297207, 0.133433516009286, 0.1426162842864076, 0.1360819651510683, 0.15547830479472446, 0.12591372312778626, 0.12624650353873734, 0.1240615867763245, 0.11648768311537439, 0.1264490934122665, 0.11751967056141344, 0.11456343156724669, 0.12452288715720483, 0.13887276961270623, 0.12112384075139748, 0.11625678573965925, 0.124633483178067, 0.11039665284984279, 0.10836067130429161, 0.09960660323134873, 0.11319859615725014, 0.09665491095401468, 0.09138738636195343, 0.10386553827482548, 0.10675218741460302, 0.10155542117414385, 0.0941827076382098, 0.10721933036302722, 0.9148185286561363, 0.9400015778203659, 0.8698423270999814, 0.8337010742880521, 0.9070041132835541, 0.9577297946735364, 0.9064047462074629, 0.9598688231119592, 0.9250724793000714, 0.1814700830008421, 0.1865720877104856, 0.17541062604389646, 0.18026575820836965, 0.178033579825969, 0.19799463917698645, 0.17762924015752668, 0.1893037288757018, 0.18749534901837162, 0.21037071696009357, 0.19703532874999707, 0.23336579144860203, 0.24615111484619911, 0.24208879570372577, 0.22815521515043424, 0.254000119244992, 0.2143976978010429, 0.24906262984227856, 0.12988496730836574, 0.11571657157076554, 0.12861577974898497, 0.11630039816100102, 0.10697706332443646, 0.1333591866619418, 0.11979846202762112, 0.12652466518379146, 0.13091042994932645, 0.12522086967774815, 0.12466431060130323, 0.14371794183824826, 0.14100428655190556, 0.15574105502536817, 0.13018698765015946, 0.1271841219565244, 0.12492531283259067, 0.13391247567386222, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00338616545801107, 0.0023025743599497384, 9.999999999998899e-05, 9.999999999998899e-05, 0.10006471086138713, 0.07766552293223505, 0.10283203538420327, 0.07494969522786865, 0.09061413427258724, 0.060774576236740874, 0.06744712571093281, 0.09071873080847948, 0.09634728540523319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08308574430139337, 0.06974012577659561, 0.07641527118658142, 0.07473094526320079, 0.08048333969563448, 0.09009750978810405, 0.07512507568374072, 0.0759468071050482, 0.06687221414500377, 0.36850878912149587, 0.38826377108140886, 0.37163757447235446, 0.360937612741809, 0.3784547814234831, 0.35609635421222163, 0.3864374412354985, 0.37358621530299096, 0.36335964653153674, 0.07735029663306892, 0.07929388352010558, 0.08322553868502547, 0.08357309934268164, 0.07935332148863306, 0.09491064731413479, 0.09486860588856472, 0.07939438552640365, 0.08115638642937739, 0.15515910771548747, 0.14471535324756002, 0.1648248942502316, 0.15379645159957311, 0.14813447530543766, 0.17480495479934632, 0.1648162604544534, 0.15873577441660947, 0.1622825121964625, 0.21130415146023018, 0.2087807677400989, 0.20812226136841727, 0.2230433065937103, 0.20906429480958377, 0.22401684499202168, 0.21247507464262783, 0.21132007891706728, 0.21708884045819798, 0.15132346455568224, 0.1505467748935131, 0.14545749144670894, 0.15651092261533284, 0.15256655210640524, 0.15488343015538664, 0.15836984696377965, 0.1549326267644887, 0.13223745793854302, 0.18458542961846136, 0.1917319307217764, 0.18334954815128235, 0.1991699637396891, 0.18472392731556142, 0.1900013844991486, 0.18456194127009784, 0.19058821303302165, 0.19772079153494437, 0.20382219579225813, 0.19987013725367664, 0.1957401694012092, 0.19534732954238465, 0.2094650709642657, 0.19012393953727436, 0.18571989624204788, 0.19061986372839756, 0.18191912550482592, 0.21425715382228971, 0.32233598776389405, 0.23763559315576488, 0.2984343507291082, 0.2421269851663711, 0.3336928658864242, 0.3101530352029801, 0.28526909178290916, 0.16659533468793797, 0.23823578078679586, 0.2405964053577475, 0.3642833320991874, 0.19902653112880253, 0.26745958490370025, 0.18905988748326585, 0.21429312636261477, 0.19207088382750515, 0.17617485810403855, 0.19243333138441898, 0.19885285794397278, 0.1965832907009274, 0.1802406884168316, 0.1761073329351388, 0.1972331386412075, 0.20061461540497494, 0.18703319232138593, 0.17886973812955353, 0.0592595797089529, 0.07100772557482382, 0.07495114843953521, 0.07813345902344859, 0.06704945712791432, 0.0806160130751119, 0.08067018476454213, 0.07814948338388117, 0.08237999473428459]}, "mutation_prompt": null}
{"id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 7, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "a89921b4-484f-4338-9443-65be20d233dc", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "8ef373c3-7df0-4e8a-b325-44c9750c0371", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "22c9f233-8328-4c0c-a08e-adc67bf67296", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "80ddff84-85d2-4a2b-9965-8e582f4ea307", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "b42fa9f9-93c5-4b82-b758-6c9258c070dd", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "2690986b-940a-4e22-a2c6-152082623e76", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "07a450c4-34cc-407d-ac4b-b42ebfab0784", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "ac30e827-7ffc-40e4-ad6f-19fbb8abcb3a", "solution": "class Enhanced_EA_ADES(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            if strategy == 0:  # DE/rand/1 strategy\n                return x + self.f * (b - c)\n            elif strategy == 1:  # DE/current-to-best/1 strategy\n                best_idx = np.argmin(fitness)\n                best = pop[best_idx]\n                return x + self.f * (best - x) + self.f * (b - c)\n            else:  # DE/rand-to-best/1 strategy\n                best_idx = np.argmin(fitness)\n                best = pop[best_idx]\n                return best + self.f * (best - x) + self.f * (b - c)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADES", "description": "Enhancing the mutation strategy by incorporating a differential evolution scheme with a dynamically adjusted scaling factor.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'crossover' is not defined\").", "error": "NameError(\"name 'crossover' is not defined\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "11d064c0-6d9f-4be6-904a-81fe082ecef8", "solution": "import numpy as np\n\nclass Enhanced_EA_Opposition:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  \n        self.mut_prob = 0.5\n        self.cross_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  \n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  \n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_Opposition", "description": "Enhancing Exploration by Introducing Opposition-Based Initialization for Diversity Promotion", "configspace": "", "generation": 15, "fitness": 0.19699186690888074, "feedback": "The algorithm Enhanced_EA_Opposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "e358491c-d4e9-4944-b51a-53eb36d1aa6b", "solution": "class Enhanced_Improved_EA_ADES(Improved_EA_ADES):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    self.strategy_probs[strategy] = max(1e-6, self.strategy_probs[strategy] + 0.1)  # Update strategy probabilities\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_Improved_EA_ADES", "description": "Enhanced Improved_EA_ADES with Dynamic Mutation and Crossover Probabilities and Adaptive Strategy Update", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'pop' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'pop' referenced before assignment\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "7d0bb76b-64fc-47b4-9727-205ad7a55f58", "solution": "import numpy as np\n\nclass Dynamic_Mutation_EA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy, fitness):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            dynamic_f = np.tanh(0.01 / np.mean(fitness))\n            return x + dynamic_f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy, fitness)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Dynamic_Mutation_EA", "description": "Implementing a dynamic mutation strategy based on individual performance for enhanced exploration capabilities.", "configspace": "", "generation": 17, "fitness": 0.04686627233349139, "feedback": "The algorithm Dynamic_Mutation_EA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.11887203638943844, 0.08122855043356392, 0.09182331110716446, 0.09434517763910732, 0.10753790552142894, 0.11046251971412513, 0.09993176057143205, 0.07438352697296646, 0.06870963443488376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015438221482171666, 0.006163889796034661, 0.010691624210221407, 0.006639455995088972, 0.006709520647833922, 0.01830413120325558, 0.007822916461104112, 0.010715107184898098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019677883471522772, 0.0006969975663936312, 9.999999999998899e-05, 0.014851451911415126, 9.999999999998899e-05, 9.999999999998899e-05, 0.04529282648384092, 0.04547639402167003, 0.042977710632405075, 0.05335188845131911, 0.04688690551564689, 0.0374382582142192, 0.06395122389775765, 0.04904061788917968, 0.03924665640918046, 0.06274821130250763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031555232207813866, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293363627932762, 9.999999999998899e-05, 0.10027683525177622, 0.08224659834595494, 0.059824388882108726, 0.0667108215001172, 0.07285119553694963, 9.999999999998899e-05, 0.026279303607937843, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10911921411670333, 0.15793272825353832, 0.14854284011419894, 0.10390212436795077, 0.10346958523249628, 0.09892209126488993, 0.16138776778772168, 0.09723114959798695, 0.12114835831180992, 9.999999999998899e-05, 9.999999999998899e-05, 0.02202881101010712, 0.03274048948959485, 9.999999999998899e-05, 0.01773554455368853, 9.999999999998899e-05, 9.999999999998899e-05, 0.027287069398451047, 0.08651501774725434, 0.08885327366445617, 0.11943629125525934, 0.10232563426319308, 0.11117254319541148, 0.10930902883084359, 0.09150522487075707, 0.08192811179784676, 0.07802170388903651, 0.09856180612912446, 0.09952798927740991, 0.162864522296715, 0.14004477046899488, 0.11574234586919685, 0.10532565516088122, 0.12073492424044563, 0.17444542698181853, 0.11417998850339917, 0.06017639208251169, 0.03441656105880542, 0.08453013694254019, 0.058361362804791095, 0.06488458956090959, 0.06542136627754502, 0.083946474378781, 0.10009621229375776, 0.0649326230039946, 0.17191090134236742, 0.1347068466152499, 0.15157288213853515, 0.12903453785204888, 0.1324717690297793, 0.13269236600627243, 0.1266702627047045, 0.0948667593410557, 0.15121781044794302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05597934059608345, 0.07548857869374292, 0.08229821267784443, 0.07394263827994652, 0.12164423749110354, 0.06709291068403744, 0.10709590632726884, 0.10538495408008164, 0.06945223090557684, 0.11051635342630439, 0.1026996291110509, 0.06932690616698944, 0.05070933063411265, 0.037403525858935804, 0.05908051576801021, 0.04806503438689069, 0.04140382354194694, 0.04358305835589438, 0.1682991270344283, 0.1761424978443401, 0.18693038406587614, 0.17747420059985364, 0.19412620453233254, 0.18247786054245096, 0.18452499563136804, 0.14450469453723802, 0.15419371483866418, 0.015576292958309756, 0.017992657072031237, 0.03399216077771383, 0.030848380127404207, 0.03709021908890009, 0.021314287131989795, 0.017632079613981833, 0.04541180995977756, 0.02003077960550037]}, "mutation_prompt": null}
{"id": "02c696ef-9a06-499d-9683-814314e552d3", "solution": "class Enhanced_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if trial_fit < fitness[i]:  # Enhanced adaptive parameter control based on individual fitness improvement\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADES", "description": "Dynamically adjusting mutation and crossover probabilities based on individual fitness improvement for Enhanced Evolution Strategy Algorithm", "configspace": "", "generation": 18, "fitness": 0.19699186690888074, "feedback": "The algorithm Enhanced_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "223f3164-4fe3-4668-8c3f-054a3da78520", "solution": "import numpy as np\n\nclass Improved_EA_ADES_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            mut_success = 0\n            cross_success = 0\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                        if mut_success > cross_success:\n                            self.mut_prob = min(1.0, self.mut_prob * 1.1)\n                        else:\n                            self.cross_prob = max(0.1, self.cross_prob * 0.9)\n                        mut_success = 0\n                        cross_success = 0\n                else:\n                    new_pop[i] = pop[i]\n                    mut_success += 1\n                    cross_success += 1\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Refined", "description": "Introducing Dynamic Adaptation of Mutation and Crossover Probabilities based on Fitness Progress with Adaptive Parameter Control", "configspace": "", "generation": 19, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_EA_ADES_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "2af1d0e1-0ab3-4388-9d74-9d5b291db8a9", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "5438f8d9-727a-4c61-b7f7-0e4beac57fd0", "solution": "class Improved_EA_ADES_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    # Adjust strategy probabilities based on individual performance\n                    strategy_diff = fitness[i] - trial_fit\n                    if strategy_diff > 0:\n                        self.strategy_probs[strategy] += 0.1 * strategy_diff\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Enhanced", "description": "Enhancing DE strategy selection based on individual performance for improved exploration-exploitation balance", "configspace": "", "generation": 21, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_EA_ADES_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "2acb788d-04c8-4550-8d07-75db3407da11", "solution": "class Dynamic_Adaptation_Improved_EA_ADES(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  \n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  \n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                    else:  # Dynamic adaptation of mutation and crossover rates\n                        self.mut_prob = max(0.1, self.mut_prob * 0.8)\n                        self.cross_prob = min(1.0, self.cross_prob * 1.2)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop", "name": "Dynamic_Adaptation_Improved_EA_ADES", "description": "Implement a dynamic adaptation of the mutation and crossover rates based on individual performance to enhance exploration and exploitation balance.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'pop' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'pop' referenced before assignment\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "55a218ab-5f62-48bb-93d3-800caf020183", "solution": "class Enhanced_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            opp_x = -x  # Generate opposite solution\n            return x + self.f * (b - c) + self.f * (opp_x - a)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADES", "description": "Enhancing population diversity through opposition-based mutation for improved exploration", "configspace": "", "generation": 23, "fitness": 0.1375282088396955, "feedback": "The algorithm Enhanced_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.09.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.28854017159976075, 0.28263675362181306, 0.35370407479220833, 0.17993643279651317, 0.215668637163269, 0.23398903390332337, 0.2634398651789338, 0.3104507386192238, 0.21113347685612138, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025860790344112705, 0.022437776544177335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09159023134990218, 0.09566714910151963, 0.10505837138818497, 0.10477521088695141, 0.09271192756973778, 0.10893898080533726, 0.10986517406399965, 0.08255086143616808, 0.10628576357807284, 0.09069083606997541, 0.0826623012190979, 0.09307424979913936, 0.09874901329595576, 0.06766445642472263, 0.0822972828267553, 0.08363203441699518, 0.09945829106092174, 0.08834499710885646, 0.10278774946662284, 0.09140045014803766, 0.08479459629664576, 0.07910444467881428, 0.14439991290971466, 0.10896828857706875, 0.07846122542852485, 0.19385615316751803, 0.0983352365218314, 0.14315316805625966, 0.14246115429458095, 0.10016336538268567, 0.128353503384957, 0.16650970223459316, 0.15993845426173048, 0.09253429022284143, 0.1116924687239167, 0.07898061484037866, 0.17153762062256028, 0.19093985676153213, 0.17765254391249585, 0.16489003872190355, 0.1679761519704569, 0.15713803534951043, 0.16561310945114915, 0.18285947756044474, 0.17050886862272274, 0.1582076180457156, 0.15964235464458065, 0.15917858788936523, 0.09582861216829186, 0.05149207157210489, 0.0669276502395898, 0.08441458432644322, 0.08514643678394462, 0.09323009208669575, 0.15255743743235695, 0.15113080526770095, 0.21012123048019793, 0.234629697654818, 0.17448466953324715, 0.18097425853751026, 0.1696668215972068, 0.16645682123798689, 0.17335513073858344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024607562124001614, 0.070181922190657, 0.05724092658014979, 0.11480299261887872, 0.09530707308318631, 0.06568691626462275, 0.08890531151894321, 0.07956810976850115, 0.10367117874116771, 0.08939764720639176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052710224161876096, 0.019007788412405913, 0.018145193801516468, 0.014176810599512701, 0.01711762077299739, 0.02328756410590327, 9.999999999998899e-05, 0.02460378942514785, 9.999999999998899e-05, 0.26900985521149856, 0.26982842752277836, 0.260212680445028, 0.28756422925861425, 0.2595517377521216, 0.2218568472365603, 0.3104087712059974, 0.31612939448935906, 0.31102345164716805, 0.04909137382728734, 0.038906507029454196, 0.061439458186684726, 0.0664240897335614, 0.0675960245177526, 0.07475918298201722, 0.07459156458525973, 0.08056170108117822, 0.07475455042893886, 0.15514445829754675, 0.15772223777959804, 0.177411554494474, 0.13968463577059242, 0.18887604894352772, 0.1746854811296642, 0.1614392485325441, 0.19049024368991396, 0.14215977758821174, 0.2147618377310343, 0.21914317663426797, 0.21214166862289008, 0.21112635401166824, 0.22602760342406247, 0.23279318142845884, 0.20001586735085397, 0.21115725559386633, 0.2012579030387479, 0.14275032735208082, 0.17504362707636678, 0.15023488026186094, 0.16126476302838733, 0.1698848654379379, 0.16833088297697685, 0.16633319451089068, 0.16600683715589226, 0.13813887439593253, 0.20891652033790842, 0.22077853601773967, 0.20998553453193847, 0.20462512898779583, 0.2074595337305336, 0.2214364238461779, 0.2110551693194358, 0.19489537898909337, 0.20799594719881231, 0.18379640834011957, 0.1745690368969084, 0.1746178463267759, 0.18263074902166332, 0.17591278752303152, 0.1772120253976578, 0.18463863796270297, 0.18104956979885756, 0.18470611424596695, 0.1843279591540289, 0.25231758417326633, 0.3230427684332774, 0.34533597598610055, 0.20272144188564145, 0.2652642277108005, 0.27016487417224555, 0.3785283196699363, 0.29995542048540147, 0.22865049411617389, 0.21869316396464733, 0.2286732213493009, 0.3570670288998343, 0.29443781568297156, 0.19506682022478994, 0.14261117526582456, 0.1928026362060159, 0.21067270130965376, 0.1859971281786883, 0.1955607909209114, 0.1812420501798515, 0.1893237888506908, 0.2038606978137667, 0.1710444172828286, 0.1803115838006597, 0.17357489806087656, 0.19803870347984076, 0.07615709684946981, 0.08649908134395268, 0.08114847738274311, 0.08211212431302539, 0.08857456686423726, 0.09033335262713804, 0.07939217011906963, 0.09120189590640349, 0.07644128433684838]}, "mutation_prompt": null}
{"id": "3eb40558-6eb3-47c2-8595-4042bf2d429e", "solution": "class Improved_EA_ADES_Refined(Improved_EA_ADES):\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c) * np.random.uniform(0.5, 1.0)  # Introduce dynamic scaling factor\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control with dynamic adjustment\n                        self.mut_prob = min(1.0, self.mut_prob * (1 + 0.1 * fitness[i]))\n                        self.cross_prob = max(0.1, self.cross_prob * (1 - 0.1 * fitness[i]))\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Refined", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress with Dynamic Adjustment of Mutation and Crossover Probabilities", "configspace": "", "generation": 24, "fitness": 0.19315559878408842, "feedback": "The algorithm Improved_EA_ADES_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.47013244517460995, 0.4520964015670613, 0.5260974766983602, 0.4614729824656695, 0.44897273485958533, 0.4511782875583782, 0.4737368796881911, 0.47764250410256026, 0.48618525188043893, 0.0671836674796461, 0.17344342507799793, 0.10539543093396642, 0.12496110436546626, 0.10080643172689419, 0.19092615847303385, 0.12812581895799136, 0.12954903312919464, 0.1582999973662751, 0.14059694491171226, 0.17244410243166253, 0.14132202016844442, 0.1445589134048494, 0.139669483995026, 0.12917037827560285, 0.159312590500706, 0.1410660980662105, 0.17512568302669473, 0.12114676254912538, 0.12114432035721878, 0.12954297836666395, 0.13350867228849406, 0.1275594355651487, 0.13629917677154701, 0.1604718035321967, 0.1144376804930185, 0.12566554210507908, 0.8639266082674655, 0.8537140929537221, 0.7842667723673016, 0.8598820506966898, 0.8472361844841672, 0.7366953237253477, 0.8482605909467065, 0.8735941394787191, 0.77885130604555, 0.1816662937256478, 0.17591784877122063, 0.16129356802204298, 0.1809053259238934, 0.16665833493975568, 0.162479363786188, 0.20701097489445142, 0.21010244654039212, 0.21556523289135232, 0.1929514764858281, 0.21010330274158062, 0.17814344041274854, 0.28065546622328097, 0.24011890543034387, 0.25175181306902694, 0.20929176141969208, 0.21685683544653, 0.22267350278331366, 0.12790284206544655, 0.15692844178641518, 0.12362597074271509, 0.14934311593654837, 0.16855725316308667, 0.17515913120365278, 0.16640182501729828, 0.11938232367342194, 0.1600262284326398, 0.1627606745075687, 0.11944151169750572, 0.13212119448860027, 0.13933838916726837, 0.12732658940656916, 0.1190876416566381, 0.16065888235273595, 0.11585897642566267, 0.13418194050631427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065842598580917455, 0.11988963929259522, 0.06664543193953665, 0.1042230935299856, 0.07649820878327296, 0.10443883845797242, 0.0850166206114189, 0.10858632043528382, 0.09818516765758634, 0.08254555335457403, 0.0007548328450881492, 9.999999999998899e-05, 0.005979688139206574, 0.0018744749918585546, 9.999999999998899e-05, 0.002267473296389655, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002879591941700177, 0.05510579549897343, 0.05400251860146943, 0.08165713584247791, 0.07377921100778473, 0.058265235965335505, 0.06763072510241708, 0.0641999466618085, 0.05660897282256849, 0.08808255362148432, 0.3430557439571963, 0.3523076625626106, 0.3625556242089295, 0.3307455077163981, 0.32957404996761563, 0.3447819656156925, 0.35739991203398636, 0.32784208279778315, 0.3584801832144944, 0.06803301384044258, 0.0726847917407687, 0.0651063810168635, 0.09487702880903925, 0.08005506356684078, 0.06608256211742713, 0.07946384743113855, 0.06328441724230527, 0.07171407956904763, 0.1859189880548261, 0.1575817085343404, 0.16607770429689805, 0.1701255489929363, 0.16755536862006082, 0.16810614772728427, 0.1513078220577161, 0.16512379589827542, 0.17721020901931883, 0.19712605615197942, 0.20593724387874834, 0.20554976784240453, 0.20067522931262793, 0.21504976607532011, 0.19854520658812325, 0.1683804166133399, 0.22052780191915322, 0.1792224565737739, 0.15967987760283286, 0.14493014981634855, 0.1475907984503967, 0.14873104788817615, 0.16815747229584554, 0.16477001179394024, 0.16823518338873145, 0.18118049041347206, 0.138106809779304, 0.18040242268027595, 0.17860230914030928, 0.18794324669393714, 0.19313896684180842, 0.186788062956177, 0.20192983569000045, 0.1828614939646408, 0.17905978027625535, 0.1765283367464513, 0.2000987750138109, 0.19050907184536636, 0.20092626711901573, 0.19806077920009024, 0.1969158580686119, 0.21457841387127685, 0.19896486890892573, 0.20776055369973123, 0.18898289792068057, 0.23290973917956148, 0.3297261839932252, 0.35296537967749175, 0.27661125169604783, 0.24140350932792987, 0.33412849869573746, 0.16951881538726188, 0.22755980067753778, 0.3761146722236036, 0.28841474338463313, 0.18896141929129007, 0.20707133098314456, 0.18562706053901845, 0.20588238254976154, 0.16747978034009825, 0.1482237709727109, 0.17633692111296861, 0.2602619381828588, 0.1920951758538728, 0.18409333555726903, 0.1910555551933586, 0.1836769137122728, 0.1832802124337557, 0.1904096303634547, 0.19615675578983793, 0.1837428171179154, 0.2033104175995012, 0.06337874881426797, 0.06396977037510188, 0.06061541547870275, 0.06699184250259083, 0.0711205536597036, 0.06930959436162598, 0.0708990469712436, 0.08157676590545493, 0.07099647929704955]}, "mutation_prompt": null}
{"id": "39c46503-7024-4434-ada4-2950ebfe438c", "solution": "import numpy as np\n\nclass Improved_EA_ADES_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Dynamic mutation and crossover probabilities\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Refined", "description": "Introducing Dynamic Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 25, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_EA_ADES_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "5c8ca1a3-749d-4c9a-8127-f5e83a02a57d", "solution": "import numpy as np\n\nclass Dynamic_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control based on individual performance\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Dynamic_EA_ADES", "description": "Enhancing the differential evolution strategy by incorporating a dynamic adaptation of mutation and crossover probabilities based on individual performance.", "configspace": "", "generation": 26, "fitness": 0.19699186690888074, "feedback": "The algorithm Dynamic_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "bf6454dc-50c2-48dc-b5ff-69efd77fbb3d", "solution": "class Improved_EA_ADES_Refined(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.ortho_prob = 0.1  # Initial probability for orthogonal evolution\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob *= 1.2 if np.random.rand() < self.ortho_prob else 1.0\n                        self.cross_prob *= 0.8 if np.random.rand() < self.ortho_prob else 1.0\n                        self.ortho_prob = min(0.9, self.ortho_prob * 1.1)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop", "name": "Improved_EA_ADES_Refined", "description": "Introducing Dynamic Adjustment of Mutation and Crossover Probabilities based on Orthogonal Evolution", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'pop' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'pop' referenced before assignment\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "39873915-33ff-4cd3-8b1c-d092eaa29fb5", "solution": "import numpy as np\n\nclass Self_Adaptive_DE_DP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Self_Adaptive_DE_DP", "description": "Introducing Self-Adaptive Differential Evolution with Dynamic Population Control", "configspace": "", "generation": 28, "fitness": 0.19699186690888074, "feedback": "The algorithm Self_Adaptive_DE_DP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "38fa5f4f-0a02-4e5b-8501-104717ecb83d", "solution": "import numpy as np\n\nclass Dynamic_Adaptive_EA_ADES(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                best_strat = np.argmin(self.strategy_probs)\n                strategy = np.random.choice(6, p=self.strategy_probs) if np.random.rand() > 0.1 else best_strat\n                # Remainder of the existing algorithm code\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Dynamic_Adaptive_EA_ADES", "description": "Modifying the selection of mutation and crossover strategies dynamically based on individual performance to adaptively enhance exploration and exploitation balance.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'pop' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'pop' referenced before assignment\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "75dfd8f5-aa5f-4ca0-a7a1-f84db3478737", "solution": "import numpy as np\n\nclass Dynamic_ADELS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Dynamic_ADELS", "description": "Introducing Dynamic Adaptive Differential Evolution with Local Search for Enhanced Exploration and Exploitation", "configspace": "", "generation": 30, "fitness": 0.19699186690888074, "feedback": "The algorithm Dynamic_ADELS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "28248cd6-6053-4c1e-bdb3-1209059755b9", "solution": "import numpy as np\n\nclass Adaptive_DE_OC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            ortho = np.random.rand(self.dim) < self.cr\n            trial = np.where(ortho & (np.arange(self.dim) != jrand), trial, x)\n            return np.clip(trial, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Adaptive_DE_OC", "description": "Introducing Adaptive Differential Evolution Strategy with Orthogonal Crossover for Enhanced Convergence", "configspace": "", "generation": 31, "fitness": 0.19295930235374742, "feedback": "The algorithm Adaptive_DE_OC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4842651364588383, 0.42989548544182365, 0.46764430973356985, 0.4253994607911308, 0.4388982181864748, 0.42872037466212565, 0.45410718879977174, 0.4349153388744904, 0.42925452096737615, 0.12281004946659013, 0.12694743095950312, 0.12649854735650756, 0.1197732670787105, 0.13499919128967508, 0.16382130726806332, 0.11023952161388084, 0.14563017358345098, 0.10722807914403654, 0.12890125474301262, 0.12316429033317511, 0.1347387123567234, 0.12230738889851223, 0.12943765052027012, 0.12241207366472828, 0.12104019909679498, 0.13204654460602794, 0.1287140780468119, 0.10192442754289965, 0.10220700373410907, 0.11588735649764381, 0.1017577773119368, 0.09911859455650085, 0.10686740702998354, 0.10982650635973712, 0.10362977470275414, 0.09604856728481881, 0.86688363134628, 0.9173097964605066, 0.8890341744356508, 0.8668592818790032, 0.8793838537930644, 0.8854593625389022, 0.8241418694036126, 0.815387522063961, 0.9007176059679133, 0.17695644285236634, 0.16405889696359732, 0.17403608588584119, 0.22255216644618536, 0.20378498443654702, 0.1737612064648234, 0.15376697167323328, 0.16385143442831418, 0.16875507524897382, 0.23747589303962746, 0.2241722925572548, 0.1902468756989273, 0.22417407155344327, 0.22593351284808616, 0.23696624561106616, 0.22973094042019615, 0.27971963320302506, 0.208746193710044, 0.14498065090643397, 0.1256529055416168, 0.15140553385238342, 0.12138720944283488, 0.11274935260332364, 0.11823768115537481, 0.16292377847386796, 0.12394439372323418, 0.13752476802816382, 0.14153063862126014, 0.13054184016147152, 0.1342361140151841, 0.13429356897752465, 0.15511815428269926, 0.1168097878318538, 0.11486448920943348, 0.138071289529346, 0.14211336492537707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017901778994585893, 9.999999999998899e-05, 0.11253667735787354, 0.10344503660220383, 0.10091250660878848, 0.054659631189343805, 0.07229154040283015, 0.06415397834478331, 0.09835675784159081, 0.0940105980866125, 0.06445318535919597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001736730272695386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06163383940583389, 0.0640336498636902, 0.05593273354899886, 0.07253666026446537, 0.0876379423538165, 0.08433654270222402, 0.06310378455375809, 0.06953953859745965, 0.07152283345584598, 0.3583972974341101, 0.38270974595866825, 0.3769192675567653, 0.3736456157209235, 0.36477024238926026, 0.35194182616381664, 0.3703553810169157, 0.3627204746728877, 0.3827496167099812, 0.08504846331784088, 0.08275944704840565, 0.08078798061579306, 0.07807547335494547, 0.07472601751548058, 0.08602174243318716, 0.07749086587479359, 0.0874830427020663, 0.08147240432362557, 0.15125179968543112, 0.17116727826991207, 0.16449343835784425, 0.17181201322527706, 0.18380416322033266, 0.16017283383886294, 0.15690100135796725, 0.14396599668984822, 0.14914010264980093, 0.195688988955104, 0.20170363111713596, 0.19883961562989172, 0.1993916649077524, 0.20703596729538143, 0.20973885668829373, 0.22921918325709623, 0.22833375119452426, 0.20115111928610263, 0.1518620389205404, 0.14641141045700368, 0.15702251299796988, 0.1581885373520383, 0.16878439675644474, 0.17353221116639928, 0.14857653017922767, 0.15908561555258605, 0.16749844180035267, 0.18161824701915152, 0.18877571392907744, 0.18490502844026213, 0.18158322167654906, 0.1780235693505512, 0.18801605928902787, 0.1878649133053797, 0.18382894633116753, 0.1963912923945993, 0.19897173106907684, 0.19190662148466275, 0.2018391454928936, 0.18449491011734231, 0.19037111661784278, 0.19229088158292285, 0.18761605041315765, 0.20194948834779325, 0.19239116480049456, 0.3431221270903604, 0.4058324333862182, 0.30020671969129376, 0.2808697717056877, 0.25801918622732356, 0.32698544287053055, 0.246856239345276, 0.26781292797231715, 0.20099184400568837, 0.30444404659016866, 0.2371854735971065, 0.2505731112668935, 0.18012073934535022, 0.17739267177617435, 0.2369750846238058, 0.19785906528340613, 0.18994552879711846, 0.19920869670359487, 0.18601002291990687, 0.17706144873161467, 0.18753255590322593, 0.1768193471949311, 0.19556661372641226, 0.17629862458437018, 0.1902715947754947, 0.17639468446786033, 0.1809118553844683, 0.07325735742464423, 0.07162921678506295, 0.07953920772533163, 0.06661164505620054, 0.0762047858070879, 0.06684933194167042, 0.07292330857093365, 0.07498339198417692, 0.06259240088630813]}, "mutation_prompt": null}
{"id": "14269a47-41bc-471f-a9ba-4effb74f4c9d", "solution": "class Enhanced_DE_Boundary:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))  # Initialize with boundary-based diversity\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)  # Adapt mutation probability dynamically\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_DE_Boundary", "description": "Enhancing diversity through boundary-based initialization and adaptive mutation probability control in Differential Evolution for improved convergence.", "configspace": "", "generation": 32, "fitness": 0.19699186690888074, "feedback": "The algorithm Enhanced_DE_Boundary got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "0bafbdb4-213a-42f4-9b24-877f06d64021", "solution": "class Enhanced_EA_ADES(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.niche_radius = 0.5\n\n    def __call__(self, func):\n        def niche_mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c) + np.random.normal(0, self.niche_radius, self.dim)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = niche_mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  \n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  \n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADES", "description": "Enhancing the population diversity by introducing a dynamic niche radius for individuals to explore different regions efficiently.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'crossover' is not defined\").", "error": "NameError(\"name 'crossover' is not defined\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "62974c5a-ff3a-408d-bb95-4484f287db50", "solution": "class Dynamic_Adaptation_EA_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control based on fitness progress\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Dynamic_Adaptation_EA_DE", "description": "Introducing Dynamic Adaptation of Mutation and Crossover Probabilities based on Fitness Progress for Differential Evolution", "configspace": "", "generation": 34, "fitness": 0.19699186690888074, "feedback": "The algorithm Dynamic_Adaptation_EA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "3880aa89-7a08-4d5e-827f-76c158be775e", "solution": "class Enhanced_EA_ADES(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                        \n                    # Update strategy probabilities based on individual performance\n                    self.strategy_probs[strategy] = min(1.0, self.strategy_probs[strategy] * 1.1)\n                    self.strategy_probs /= np.sum(self.strategy_probs)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADES", "description": "Enhancing the strategy selection by incorporating self-adaptive strategy probabilities based on individual performance during the optimization process.", "configspace": "", "generation": 35, "fitness": 0.19699186690888074, "feedback": "The algorithm Enhanced_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "a0096990-78d4-4768-a940-bbf78d75cd65", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "2288db97-f6f5-43b7-be46-283f3ec15c67", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "2bba5be6-6f0d-4422-88ab-35acf05acdf6", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "f73b9e2c-a0a4-4e12-a75e-e215b4e6015b", "solution": "class Dynamic_PopSize_Improved_EA_ADES(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        self.pop_size = max(5, int(10 * dim * 0.5))  # Dynamic pop size adjustment\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Dynamic_PopSize_Improved_EA_ADES", "description": "Introducing Dynamic Population Size Adjustment for Improved Convergence", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'dim' is not defined\").", "error": "NameError(\"name 'dim' is not defined\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "7a058d4e-d1e3-4a01-8047-1e48cd9dcac1", "solution": "class Improved_EA_ADES_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n        self.strategy_adapt_rate = 0.1\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += self.strategy_adapt_rate\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Refined", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress with Randomized Strategies", "configspace": "", "generation": 40, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_EA_ADES_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "8ad2dc30-8acd-432e-afb8-73d92ce03004", "solution": "import numpy as np\n\nclass Chaotic_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def chaotic_init(self):\n        # Initialize population with chaotic initialization for enhanced diversity\n        pop = []\n        x = np.random.uniform(-5.0, 5.0, self.dim)\n        for _ in range(self.pop_size):\n            x = (2 * x + 1.5) % 5.0\n            pop.append(x.copy())\n        return np.array(pop)\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = self.chaotic_init()\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Chaotic_EA_ADES", "description": "Enhancing population diversity through chaotic initialization for improved exploration", "configspace": "", "generation": 41, "fitness": 0.19063388347764448, "feedback": "The algorithm Chaotic_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.16.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4675255359188669, 0.4318515553373411, 0.44436243431178124, 0.43067982966284113, 0.47161593192119855, 0.4026819562015961, 0.4079016400794896, 0.4709875228005166, 0.4148622543686249, 0.14963207801305545, 0.1911509391221763, 0.1891664340383571, 0.17234585654982693, 0.1640499037974812, 0.16246538089600449, 0.14683845170315912, 0.12553944363079095, 0.15306915728141246, 0.151038927356965, 0.18486795130875666, 0.16108469283326865, 0.16359605048742287, 0.16677675714011675, 0.24191805170179836, 0.12967246864667725, 0.15033219238962792, 0.14749714538351455, 0.18966359205502548, 0.17449694886976053, 0.1607569114784917, 0.15069372540201698, 0.15089564574112757, 0.14781148061866212, 0.18294091096471998, 0.14427737700240306, 0.1465586699569279, 0.8240651533278203, 0.8506939784327785, 0.7835241592747824, 0.7485991910038233, 0.767875659006852, 0.8138313530800932, 0.7288908696380246, 0.7037130722943463, 0.7584966126978963, 0.22935094738279982, 0.18438818952335778, 0.22857561012719563, 0.14451674909890877, 0.12227482079734253, 0.11313361175485248, 0.1445646888890142, 0.17899026299693144, 0.18736429168649693, 0.1795205039844151, 0.18612992297080733, 0.23623203619326782, 0.242353824304384, 0.20358913040100712, 0.2081518229384337, 0.2513579936691951, 0.2549615656895068, 0.20081310031338717, 0.14780164056589784, 0.12722834281845685, 0.14235348702058637, 0.12635325673446718, 0.11506108934264425, 0.10129017165245136, 0.12937854427079343, 0.1421774522505148, 0.10553143509411844, 0.15561706815898924, 0.12950087977403824, 0.14917571696031662, 0.09898507467686135, 0.11886792199606955, 0.13727693884194692, 0.14502285966352624, 0.1488234657482348, 0.16793826424696123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008589019093332761, 9.999999999998899e-05, 9.999999999998899e-05, 0.046325357361583386, 0.045398235133224496, 0.04943859537457551, 0.09929169990425524, 0.0807908943210538, 0.0748575300791412, 0.09307220793420734, 0.1029258869167965, 0.09269925816129121, 9.999999999998899e-05, 0.0007619202623425636, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004572160190879693, 9.999999999998899e-05, 9.999999999998899e-05, 0.029539995764153226, 0.040430973809295945, 0.06159536865107751, 0.0647328105540701, 0.07717789385068341, 0.06468198724087415, 0.045241183544411756, 0.05367323207862551, 0.06386412780447503, 0.35159840855549196, 0.3275292770870277, 0.33930717632498264, 0.33332188742506597, 0.35495490824512976, 0.35749398335773097, 0.3168766021535362, 0.34727083534125336, 0.32591136481185234, 0.09441490005080866, 0.08148234986501379, 0.08842137014371532, 0.0629928840363897, 0.06722199287632424, 0.060008269824372795, 0.0539179755101461, 0.07543954114792939, 0.06042501795318089, 0.14951972811779635, 0.21517515107142804, 0.16464726418781483, 0.1774865488531734, 0.15664821870521806, 0.16628215641632793, 0.17375897992839784, 0.15498778354650056, 0.20354081488873788, 0.20916556192176416, 0.21342618125722213, 0.2175828567732726, 0.20055146505507893, 0.19324878452816852, 0.2400588476157689, 0.18341890913304115, 0.1823566166799494, 0.19562402673845414, 0.175203110900239, 0.17097144791755103, 0.15373544312702148, 0.1572416893615498, 0.1175096902858771, 0.13352433000652852, 0.14345960301024774, 0.1570979826979817, 0.1483888667714638, 0.19502299497815467, 0.18857409578116235, 0.1788564697291175, 0.2027157376486628, 0.1634291006354306, 0.19414421385495106, 0.19242196425493197, 0.1794773285008987, 0.18383967928281875, 0.1903318218687926, 0.20015671218385578, 0.180789724246591, 0.17883683410682438, 0.19385241555025434, 0.18532066651158674, 0.19788003936104215, 0.20442939057035148, 0.2227143900840136, 0.17660773527499973, 0.1581880703126175, 0.16584674412725342, 0.29276015642638564, 0.2889270960318343, 0.33522346451981344, 0.44601634153160796, 0.40694899858473477, 0.29082768797095326, 0.2824610514515409, 0.2502315730401484, 0.24039318279804078, 0.16250502454706106, 0.16567580156477746, 0.1610537417945136, 0.3179386555888296, 0.3186373405803431, 0.1909530015303682, 0.18168479132237458, 0.18683504312597443, 0.19448585656244455, 0.17373938491610952, 0.19235392141659746, 0.1758314632649457, 0.18364209647860563, 0.18615055556443172, 0.18951354182546276, 0.058711063379769945, 0.09226223327184957, 0.06466624478324934, 0.05714787710058422, 0.04677818924626587, 0.05399039734385391, 0.06724455565561693, 0.07293538260651056, 0.054647307978024195]}, "mutation_prompt": null}
{"id": "3b7f5b5e-ba2e-464f-938d-6fb07cfa52e0", "solution": "class Refined_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Refined_EA_ADES", "description": "Refining Differential Evolution with Dynamic Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 42, "fitness": 0.19699186690888074, "feedback": "The algorithm Refined_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "f0fa0b12-2a1c-4730-922c-183f06cc7b73", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "ba168798-bb9e-45dc-a591-ddc1d8ed0197", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "4cb2b7a8-b740-4c1e-aae9-c2e501cb9bdd", "solution": "import numpy as np\n\nclass Improved_EA_ADES_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Refined", "description": "Improved_EA_ADES with dynamic mutation and crossover probabilities based on fitness progress and adaptive parameter control.", "configspace": "", "generation": 45, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_EA_ADES_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "75f1593e-6415-4b54-974a-8f136b0dd613", "solution": "import numpy as np\n\nclass Improved_EA_ADMSE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1 / 6)\n        self.mut_probs = np.full(3, 0.5)  # Initialize mutation probabilities for different scaling factors\n        self.cross_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c) * self.mut_probs[strategy]\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  \n                        self.mut_probs[strategy % 3] = min(1.0, self.mut_probs[strategy % 3] * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADMSE", "description": "Introducing Adaptive Differential Evolution with Multiple Scaling Factors for Enhanced Exploration and Exploitation", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 4 is out of bounds for axis 0 with size 3').", "error": "IndexError('index 4 is out of bounds for axis 0 with size 3')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "b91dc30f-b5c9-42c0-bc8e-5d1040bbb4c5", "solution": "import numpy as np\n\nclass Hybrid_DE_PSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n        self.w = 0.8\n        self.c1 = 1.496\n        self.c2 = 1.496\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                    \n                    # PSO update\n                    v = self.w * v + self.c1 * np.random.rand(self.dim) * (pop[i] - pop[i]) + self.c2 * np.random.rand(self.dim) * (pop[i] - pop[i])\n                    pop[i] = pop[i] + v\n\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Hybrid_DE_PSO", "description": "Hybridizing Differential Evolution with Particle Swarm Optimization for Enhanced Exploration and Exploitation", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'v' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'v' referenced before assignment\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "d2955e79-8956-462c-8398-214d481b196c", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "2e1c0e2b-84fa-4610-b224-0d2a8f3bd6a3", "solution": "import numpy as np\n\nclass EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  \n        self.mut_prob = 0.5  \n        self.cross_prob = 0.9  \n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  \n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  \n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "EA_ADES", "description": "Evolutionary Algorithm with Adaptive Differential Evolution Strategies (EA-ADES) using self-adaptive control parameters and strategy adaptation for enhanced exploration and exploitation.", "configspace": "", "generation": 49, "fitness": 0.19699186690888074, "feedback": "The algorithm EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "521ea247-8809-47eb-87d8-eb54dcf87d88", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "9ed6a413-1b1e-48ce-b628-431fb81b45ec", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "bc4e1345-c81a-408f-ba70-fdba5a3cae59", "solution": "class Enhanced_EA_ADES(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            diversity_scores = [np.mean(np.linalg.norm(pop - pop[i], axis=1)) for i in range(self.pop_size)]\n            diversity_scores /= np.sum(diversity_scores)  # Normalize diversity scores\n            for i in range(self.pop_size):\n                selected = np.random.choice(self.pop_size, p=diversity_scores)\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[selected], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[selected], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[selected]:\n                    new_pop[selected] = trial\n                    fitness[selected] = trial_fit\n                    if strategy != 1:\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[selected]:\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[selected] = pop[selected]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADES", "description": "Enhancing the selection strategy to favor individuals with higher diversity for better exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutate' is not defined\").", "error": "NameError(\"name 'mutate' is not defined\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "5fc0734b-312c-4557-b4c7-052a51f88363", "solution": "import numpy as np\n\nclass Enhanced_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                        self.pop_size = int(max(5, min(20, self.pop_size + np.random.choice([-1, 1])) * self.dim))\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADES", "description": "Enhancing adaptive parameter control based on fitness improvement and incorporating a dynamic population size adjustment mechanism.", "configspace": "", "generation": 53, "fitness": 0.19699186690888074, "feedback": "The algorithm Enhanced_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "16d38c9d-07c9-4ff5-81e7-ed393a15d999", "solution": "class Enhanced_Improved_EA_ADES(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                # Existing code for mutation and crossover\n                # Dynamically adjust mutation and crossover probabilities based on individual performance\n                if trial_fit < fitness[i]:\n                    self.mut_prob = min(1.0, self.mut_prob * 1.1)\n                    self.cross_prob = max(0.1, self.cross_prob * 0.9)\n                else:\n                    self.mut_prob = max(0.1, self.mut_prob * 0.9)\n                    self.cross_prob = min(1.0, self.cross_prob * 1.1)\n                new_pop[i] = pop[i] if trial_fit >= fitness[i] else trial\n            pop = new_pop", "name": "Enhanced_Improved_EA_ADES", "description": "Enhanced Improved_EA_ADES algorithm by dynamically adjusting mutation and crossover probabilities based on individual performance.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'pop' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'pop' referenced before assignment\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "ddde03ab-69e4-4ab6-8144-48afb21a6c1a", "solution": "class Improved_EA_ADES_Enhanced(Improved_EA_ADES):\n    def __call__(self, func):\n        def dynamic_mutate(x, global_best):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c) + np.random.uniform(0, 1) * (global_best - x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n        global_best = pop[np.argmin(fitness)]\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = dynamic_mutate(pop[i], global_best)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n            global_best = pop[np.argmin(fitness)]\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Enhanced", "description": "Enhancing diversity by introducing a dynamic mechanism for generating new individuals based on global best position", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'crossover' is not defined\").", "error": "NameError(\"name 'crossover' is not defined\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "6aa3ffbe-9555-4191-b808-e32cf75fff6f", "solution": "class Enhanced_EA_ADES(Improved_EA_ADES):\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 5, replace=False)\n            a, b, c, d, e = pop[idxs]\n            return x + self.f * (b - c) + self.f * (d - e)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADES", "description": "Enhancing population diversity through differential mutation with adaptive probability control.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'crossover' is not defined\").", "error": "NameError(\"name 'crossover' is not defined\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "38f3f3f6-1198-4608-b1b5-92da7ed0e332", "solution": "import numpy as np\n\nclass Enhanced_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                        self.f = min(0.9, self.f * 1.1)  # Enhanced adaptation of F parameter\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADES", "description": "Enhanced Differential Evolution with Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 57, "fitness": 0.19699186690888074, "feedback": "The algorithm Enhanced_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "46899172-912c-4152-9020-d1a15263f12b", "solution": "import numpy as np\n\nclass Improved_EA_ADES_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Refined", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress with Dynamic Population Size", "configspace": "", "generation": 58, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_EA_ADES_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "4d597bc7-fec9-4b62-9fff-4148d59b665a", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "6e13918b-817e-4e80-84a3-934cad4326f5", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "38401828-e44e-4ac9-9765-f055e0718514", "solution": "class Enhanced_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def initialize_population(self):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        # Adding opposition-based initialization for population diversity\n        opp_pop = 5.0 - pop\n        pop = np.vstack((pop, opp_pop))\n        return pop\n\n    def __call__(self, func):\n        pop = self.initialize_population()\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx][:self.dim]", "name": "Enhanced_EA_ADES", "description": "Enhancing population diversity by adding opposition-based initialization to the algorithm.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutate' is not defined\").", "error": "NameError(\"name 'mutate' is not defined\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "f97e6700-2c4d-4400-a0eb-d55134d05fc6", "solution": "import numpy as np\n\nclass Improved_EA_ADES_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Dynamic adjustment of mutation and crossover probabilities\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Refined", "description": "Introducing Dynamic Adjustment of Mutation and Crossover Probabilities based on Fitness Progress for Enhanced Exploration and Exploitation Balance", "configspace": "", "generation": 62, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_EA_ADES_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "275f2529-5d51-476b-a9b2-6fc92fb28e9c", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "4cc85aad-a5e7-443f-abed-13283ef61892", "solution": "class Enhanced_EA_ADES(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def crossover(x, trial):\n            cr = np.random.normal(self.cr, 0.1)  # Adaptive crossover probability with a small variation\n            cr = np.clip(cr, 0.1, 0.9)\n            jrand = np.random.randint(self.dim)\n            return np.where(np.random.uniform(0, 1, self.dim) < cr, trial, x)\n        \n        return super().__call__(func)", "name": "Enhanced_EA_ADES", "description": "Enhancing Differential Evolution Strategy with Adaptive Crossover Probability", "configspace": "", "generation": 64, "fitness": 0.19699186690888074, "feedback": "The algorithm Enhanced_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "8939b21e-9118-4e90-8b2e-d067487ef028", "solution": "class Improved_EA_ADES_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                    else:  # Dynamic adaptation of mutation and crossover rates\n                        self.mut_prob = max(0.1, self.mut_prob * 0.8)\n                        self.cross_prob = min(1.0, self.cross_prob * 1.2)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Enhanced", "description": "Implement a dynamic adaptation of mutation and crossover rates based on individual performance to enhance exploration-exploitation balance.", "configspace": "", "generation": 65, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_EA_ADES_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "4a327701-675a-4514-8db1-eb7fa977f2c1", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "f09e897b-2543-4377-8b1d-69e031c2270b", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "a3d17eb5-362c-4ab9-bf71-8508dfa824d6", "solution": "class Improved_EA_ADES_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n        self.mut_factor = 1.2  # Mutation factor\n        self.cross_factor = 0.8  # Crossover factor\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * self.mut_factor)\n                        self.cross_prob = max(0.1, self.cross_prob * self.cross_factor)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Enhanced", "description": "Introducing Dynamic Mutation and Crossover Probabilities based on Fitness Progress for Differential Evolution", "configspace": "", "generation": 68, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_EA_ADES_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "e3a44590-118e-45a6-9267-369731776814", "solution": "import numpy as np\n\nclass Enhanced_DE_ADMCP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                        self.f = min(0.9, self.f + 0.05)  # Dynamic adaptation of F parameter\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_DE_ADMCP", "description": "Enhanced Differential Evolution Algorithm with Dynamic Adaptation of Mutation and Crossover Probabilities", "configspace": "", "generation": 69, "fitness": 0.19699186690888074, "feedback": "The algorithm Enhanced_DE_ADMCP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "aeb2af78-1147-4e7b-9057-56f94d9950fd", "solution": "class Improved_EA_ADES_DMC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)\n        self.mut_prob = 0.5\n        self.cross_prob = 0.9\n        self.mut_amp = 0.5  # Initial mutation amplitude\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * self.mut_amp * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                        self.mut_amp = min(5.0, self.mut_amp * 1.2)  # Dynamic mutation control\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_DMC", "description": "Implementing Dynamic Mutation Control to adapt mutation amplitude based on fitness fluctuations", "configspace": "", "generation": 70, "fitness": 0.18653757650886754, "feedback": "The algorithm Improved_EA_ADES_DMC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.46803714150116715, 0.4299857276039122, 0.4431904099337798, 0.48856998763976145, 0.3645066177019215, 0.4588346396892299, 0.5075068635050586, 0.4078166212301312, 0.42580239964511735, 0.09983544541282152, 0.09768311637309746, 0.1161688944632926, 0.10655447416789465, 0.13627246711232077, 0.1558150057793659, 0.15867011732015013, 0.1060416924317289, 0.1721102437280675, 0.12288093371502751, 0.14158987768526843, 0.16706617971999893, 0.13834281450860075, 0.1394405130794828, 0.11157304890154351, 0.13134117458100847, 0.1695326294830446, 0.1176274821610368, 0.11815862063052918, 0.1247415301963416, 0.1292142683052252, 0.14352665003409115, 0.12237139731914726, 0.11495500786192969, 0.12924651254332997, 0.11626554338155493, 0.11356844038986891, 0.7633796849227417, 0.7201835539294664, 0.7860858665711068, 0.8085118828342066, 0.6068990988437739, 0.6406074440524205, 0.7042797808540575, 0.8201526369063935, 0.7575399228401273, 0.1763451728710128, 0.19034057809088578, 0.17399800681919808, 0.15062801278660154, 0.1509033541782786, 0.1516168945574029, 0.19228760307107173, 0.15355397420945405, 0.19036944395552935, 0.19504888649183127, 0.18197727084404947, 0.17186408032201983, 0.28433659610764284, 0.23951378320566497, 0.18846355965450534, 0.1813290298772725, 0.1716387384516318, 0.20825640536585677, 0.14097848489359244, 0.14068971691666798, 0.16484631859508703, 0.1645884806651664, 0.16420235342532852, 0.11643692000691552, 0.1541991993686923, 0.1633020544491488, 0.1390513441339024, 0.11595646994335251, 0.15170405977239076, 0.13411905036167993, 0.1395153216920778, 0.12103961117294271, 0.14317146497531308, 0.1447796712929197, 0.1496571984600742, 0.15757029417508273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10854756047034075, 0.0688664562152208, 0.10344721984290373, 0.10022354057576399, 0.08699945195057412, 0.0873473055453422, 0.11615978359172441, 0.07360990999919526, 0.1428722951232898, 0.002183733615745753, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00657710556488178, 0.004039241717955111, 9.999999999998899e-05, 0.005797379938431546, 0.053996370256304216, 0.06075235794577005, 0.05325893635213075, 0.06076037963090852, 0.05528925691820241, 0.09328322612331452, 0.06265182692856053, 0.08009074375207836, 0.0680592004800481, 0.35813919348783296, 0.37508275883732745, 0.3404117634641374, 0.3255086115036886, 0.33059323635141113, 0.3179804451998699, 0.3724003317658623, 0.32060109262997916, 0.36133210589240594, 0.05724544528212505, 0.09161124267825493, 0.06539446102500135, 0.05942949808607334, 0.06940869357758217, 0.06763401277052095, 0.07793496246220599, 0.0654834231350927, 0.06507166977909706, 0.18380135280664323, 0.15838111061610638, 0.1665494323813398, 0.17706137264241084, 0.15762605957911313, 0.19007729226616865, 0.20295914142548988, 0.1919420159913915, 0.18988702899940357, 0.18500263115398208, 0.17327320163539917, 0.19768905551180838, 0.195106229484723, 0.1751454826141684, 0.19716318554612267, 0.17757747272899838, 0.22148402355095698, 0.1770066478761375, 0.14586486231178974, 0.12446819235014484, 0.16675707597075706, 0.13760521028701767, 0.1554143112492642, 0.16274704402969842, 0.1721412650624108, 0.15535839683870867, 0.14758511706822097, 0.1623257200392858, 0.17592064938867336, 0.18432937603587396, 0.20838337619906222, 0.17358702976654805, 0.16429326965136748, 0.16486384013241695, 0.17439887870830517, 0.17546139326971566, 0.21154312909763884, 0.19581452443023362, 0.18838061123368977, 0.1910979303756919, 0.20353014631781996, 0.2123157548560355, 0.1929109101887655, 0.18111381865559528, 0.1945175589518946, 0.35711648557280407, 0.24010179451338942, 0.23910456135366154, 0.36198429921298625, 0.2662027658412257, 0.41634805175917655, 0.31580385816668466, 0.2592274844004594, 0.22486433941269535, 0.3831524253680405, 0.19682975399248148, 0.21663946507072906, 0.22097738705297976, 0.21247793785105618, 0.24462694241095506, 0.1643602368098005, 0.1792220175526913, 0.19680430685521588, 0.20094896793996697, 0.19669959962628114, 0.17901627994036995, 0.17583689217761367, 0.18947128236076305, 0.1867970810070847, 0.19955009489208453, 0.19510834810672606, 0.1895241869612143, 0.06000086802326732, 0.06133628069679875, 0.06369230471867826, 0.06019982763143872, 0.06044872303161797, 0.0470435019401344, 0.0635404769940422, 0.07430626543705054, 0.07404930483869665]}, "mutation_prompt": null}
{"id": "9ba4d0c2-1144-46b8-968a-d668e2949325", "solution": "class Enhanced_EA_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n        self.mut_step_size = 0.1  # Initial mutation step size\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c) * self.mut_step_size\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                        self.mut_step_size = max(0.01, self.mut_step_size * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADM", "description": "Enhancing population diversity through adaptive mutation step size based on fitness variance", "configspace": "", "generation": 71, "fitness": 0.10738475837770396, "feedback": "The algorithm Enhanced_EA_ADM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.2690578900124254, 0.16066301978680608, 0.20703380932629456, 0.2506897705119536, 0.20961000522596274, 0.3060435081478803, 0.3082816808437967, 0.15061520878124868, 0.13399962259488407, 0.00821415523501634, 0.07909205357248195, 0.005669843479727432, 9.999999999998899e-05, 0.03201971372690027, 0.010816200835460088, 9.999999999998899e-05, 0.04724292152562426, 9.999999999998899e-05, 0.03220675136857276, 0.04348073213386339, 0.04386815894315643, 0.06790560640901844, 0.04470377241613166, 0.05343407703306946, 0.05502608446888846, 0.09730169009259604, 0.06737854153756762, 0.027512399599920356, 0.01874310373777277, 0.051775453287155826, 0.08909473493205167, 0.05139188960778751, 0.04085860029361388, 0.08810551834421221, 0.06685943360853797, 0.02179616204824686, 0.08415744945373849, 0.11950505887976104, 0.09052627051128781, 0.28716015718769883, 0.09126757793886953, 0.08309327155833324, 0.09201813889685495, 0.1294838751371562, 0.07876854740741124, 0.09295513376103082, 0.08925326494757735, 0.08048986674289305, 0.07955709662666488, 0.06996458993143062, 0.08374124981706865, 0.0790899143436774, 0.050992468324168816, 0.10814215155691587, 0.12816538958568835, 0.1486206619650451, 0.0723356638491276, 0.19141876992293327, 0.1038591811196593, 0.04297735614199805, 0.08829039920053361, 0.11458833588889739, 0.06122158300854719, 0.10196475909502556, 0.10071268618180562, 0.007322960689779778, 0.03212483101484287, 0.0857472531930571, 0.018273990081805636, 0.06618166862851882, 0.14430756384852395, 0.08535758427033635, 0.0902210693505634, 0.07399948490046515, 0.053549413728118056, 0.09096071898486657, 0.03344225507142562, 0.07648933690711024, 0.08417400918985918, 0.024139023223554212, 0.09230564442686606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05394814363639566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09063723687081915, 0.07508407826064412, 0.09788567037998652, 0.07012658908641844, 0.07097012574890227, 0.06514380530287178, 0.16789702152268127, 0.07656238162288576, 0.06641201210588477, 0.0004446662776393939, 9.999999999998899e-05, 9.999999999998899e-05, 0.009287331899847096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00045195623099514304, 0.026871335216606118, 0.008710861995099739, 0.07100612028845699, 0.006983244026429025, 0.02701052885056121, 0.06884378215515685, 0.02110127664818684, 0.031453945621156554, 0.044622595636620965, 0.22456258743041457, 0.3612189118179272, 0.2566875023618851, 0.18997662700162288, 0.18012989502095988, 0.1858940577368433, 0.2883684787863878, 0.1683984829457208, 0.24974043834514847, 0.046729209680890005, 0.019800807700962153, 0.04604477859485068, 0.05776280996726746, 0.03123564564518344, 0.04886227550452371, 0.018683284806678024, 0.013473054876284363, 0.05984879042801383, 0.15949289846448778, 0.18916261451496275, 0.15014811135150852, 0.21270694080020247, 0.15810360144494917, 0.15182667695020846, 0.18591907707343058, 0.1174738107583233, 0.13980160758339477, 0.1230898691013832, 0.11936963091103314, 0.1624997175023436, 0.15509231068973517, 0.1327751119976046, 0.14229964442803578, 0.15238128570305942, 0.18315042009674187, 0.14693986725464947, 0.0665083275287337, 0.06745959430555704, 0.11060675263038378, 0.07947084047510378, 0.07466949646166343, 0.07125526371749036, 0.09284118977162159, 0.11850005912593731, 0.0958366099919542, 0.17549393678845515, 0.1387588504171725, 0.14901990994994319, 0.18393524185080967, 0.13586993493610366, 0.1444138846801456, 0.16225962257698645, 0.15969532645493367, 0.15261283822899785, 0.1535860546020975, 0.15244275818011788, 0.16258492623792975, 0.19250536377285332, 0.15418044075216297, 0.12489379404083156, 0.13144326683319107, 0.13432172451463664, 0.13082649640659383, 0.3061473017164651, 0.20409091789603628, 0.23947539943364016, 0.2751569867126331, 0.19320784649424727, 0.2288065058163381, 0.2983506954441426, 0.35360263252013513, 0.17524379213114294, 0.25174503136656956, 0.213780777882015, 0.13308569463176811, 0.1585211008537415, 0.16505544140372508, 0.20080150972705046, 0.15702566819606945, 0.17113093231826093, 0.19458016529119426, 0.20327259845599077, 0.1816335242527829, 0.20216217752375287, 0.21119467897729327, 0.1926569769455081, 0.1935195641476588, 0.20333915049733708, 0.21171460604634806, 0.2012084391675384, 0.03651705027481689, 0.048066019562108875, 0.05546354208578086, 0.03955627990866528, 0.05493251236342145, 0.05110679067932511, 0.048795275624140544, 0.0546196577833683, 0.04333272559865453]}, "mutation_prompt": null}
{"id": "c18f00fa-d4bd-4265-9ba8-1b67045f0355", "solution": "class Enhanced_DE_DMS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c) + np.random.normal(0, 0.1)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_DE_DMS", "description": "Enhancing Differential Evolution with Dynamic Mutation Strategies based on Population Diversity", "configspace": "", "generation": 72, "fitness": 0.18839281039979652, "feedback": "The algorithm Enhanced_DE_DMS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.44870050191540733, 0.44063767492550254, 0.4663957432064071, 0.469174875490351, 0.4577342961470535, 0.45552573431398125, 0.4484831888176103, 0.45568959105268747, 0.47535815781219937, 0.09534253216331001, 0.08308745080032875, 0.10670108757564922, 0.13093345985636984, 0.11285629260077223, 0.06722891120680874, 0.07787852843807919, 0.11794924740231616, 0.09160139088729413, 0.14701856745828368, 0.14548055692883044, 0.16533302571835407, 0.14297094156684598, 0.14057406372293513, 0.14378652444234286, 0.14374911922680111, 0.14441103418631007, 0.14065295739542305, 0.1331854620059192, 0.128566728765379, 0.13687773107195988, 0.130178246864727, 0.1353901156942393, 0.142186770245594, 0.12283596474050396, 0.12973079162319678, 0.13560536580432603, 0.8788801420991097, 0.798668666952153, 0.8480277142238517, 0.8749376390239898, 0.8870661795520717, 0.8653113232579213, 0.8886639733018263, 0.8546811779117526, 0.8709147376398465, 0.17261844121670433, 0.16569387857700835, 0.16684640500328785, 0.15154381351906088, 0.1308696253950058, 0.1710722016795282, 0.15633102034577206, 0.214866557496744, 0.19009293311346953, 0.1902309092199761, 0.1959424169555295, 0.16261906977301188, 0.229206723688113, 0.20459816886115545, 0.2072954022026634, 0.18430911206024925, 0.17085971277426304, 0.1918542434029138, 0.13560042179359222, 0.11420082300576928, 0.14812358882598997, 0.13933330043072512, 0.12720907124206915, 0.11228366052368999, 0.19758215123690215, 0.12207378014048886, 0.16076666813961604, 0.14369325644104736, 0.1282366890307174, 0.14288231370309057, 0.12868482412660454, 0.16275931189443327, 0.12516420030967745, 0.14838271740290088, 0.12635132932219317, 0.14563680780713462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07999749011015012, 0.07356200797604961, 0.1252619549203049, 0.059838762056186545, 0.04772207507591042, 0.09475386230562088, 0.0879885521620023, 0.09304360086911334, 0.0844239567404762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002938812656796963, 0.060565429038352714, 0.04668487785210018, 0.058421438294612216, 0.0870506719796631, 0.06717871347702764, 0.0731796490551031, 0.08619603925487296, 0.06085063153637815, 0.05783520323943758, 0.35447874074709207, 0.3488276067560325, 0.3625266034288942, 0.3397914724868444, 0.32051142585157355, 0.3470762216444696, 0.3547095790292435, 0.34457832459400917, 0.3537339629521411, 0.08611025786861481, 0.07481717077290118, 0.0648666055581405, 0.06317833184287558, 0.06455002046956293, 0.07771151680861821, 0.07619712926284883, 0.08153508588483616, 0.08063945812186646, 0.1570760814493336, 0.16661284804881904, 0.15319699101627937, 0.16269986318764007, 0.16031125968372484, 0.17445881392003681, 0.15676528281671542, 0.16917456208498993, 0.21336856561770645, 0.21451172826478415, 0.17205271156768942, 0.1994599170897059, 0.22510520961733538, 0.20102871155460222, 0.20489588020793303, 0.19747451758804668, 0.20712052031954475, 0.18654385638747195, 0.13639123702927158, 0.1251226160263328, 0.1394995133587319, 0.14807844069459408, 0.14833998403145854, 0.17483671476889917, 0.1683678896594214, 0.18113788386131424, 0.1321250670514097, 0.18613892516556907, 0.21470824811793776, 0.1722789802187319, 0.20781992576153296, 0.18249625347643894, 0.20404729745887185, 0.17893934081527718, 0.19396820260270287, 0.2029368992033148, 0.20180242025200568, 0.18673566643103745, 0.2087268179050017, 0.2101583779056153, 0.20760476265439054, 0.21154453412550378, 0.20340524235539148, 0.1994278705651833, 0.2032291924821754, 0.18534188301760124, 0.18327407920849714, 0.2474959672476501, 0.3082486740274316, 0.230781352794602, 0.26608586640537446, 0.21814685711335446, 0.17252475576720772, 0.19169273525591168, 0.25689220480888886, 0.17290984890498928, 0.23568476900386237, 0.19770966000452972, 0.17839742488086607, 0.16923197156478886, 0.17223673979915, 0.2781979783985674, 0.1948834333120204, 0.19527941838703944, 0.1815267804914169, 0.1822814521945344, 0.1898716882501198, 0.1840133653553936, 0.19057048485350936, 0.21177447209265943, 0.2062607030795791, 0.18034979957311825, 0.06733706418396745, 0.07277014800644288, 0.08099862221876741, 0.06548755907550408, 0.07633498097138691, 0.08357321247157234, 0.0633157201365393, 0.08506695282295373, 0.07675981689733058]}, "mutation_prompt": null}
{"id": "3886f58b-c159-40b8-926e-05ab9370cc66", "solution": "import numpy as np\n\nclass Improved_EA_ADES_Refined(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mut_prob_ind = np.full(self.pop_size, self.mut_prob)\n        self.cross_prob_ind = np.full(self.pop_size, self.cross_prob)\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy, mut_prob):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c) * mut_prob\n\n        def crossover(x, trial, cross_prob):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.random.uniform(0, 1, self.dim) < cross_prob, trial, x)\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy, self.mut_prob)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial, self.cross_prob)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob_ind[i] = min(1.0, self.mut_prob_ind[i] * 1.2)\n                        self.cross_prob_ind[i] = max(0.1, self.cross_prob_ind[i] * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Refined", "description": "Implementing self-adaptive mutation and crossover probabilities based on individual performance to enhance the algorithm's exploration and exploitation capabilities.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'pop' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'pop' referenced before assignment\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "da6f3c85-1e00-4fd3-b819-47d64d377ca0", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "c6aa3796-a8b8-4613-a1b6-721e2b0e0b41", "solution": "import numpy as np\n\nclass Improved_EA_ADES_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n        self.diversity_factor = 0.1\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n        diversity = np.std(pop)\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += self.diversity_factor\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                        self.diversity_factor = min(0.2, self.diversity_factor * 1.1)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Refined", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress and Diversity", "configspace": "", "generation": 75, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_EA_ADES_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "675ce985-5579-4f59-b4ad-f25bc051f21c", "solution": "class Improved_EA_SADEG:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n        self.sigma = 0.5  # Standard deviation for Gaussian mutation\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + np.random.normal(0, self.sigma, size=self.dim) + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                        self.sigma = max(0.1, self.sigma * 0.9)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_SADEG", "description": "Introducing Self-Adaptive Differential Evolution with Gaussian Mutation for Enhanced Exploration", "configspace": "", "generation": 76, "fitness": 0.18612350719618315, "feedback": "The algorithm Improved_EA_SADEG got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4222855104750395, 0.4204506167824975, 0.437013813427093, 0.4266928237505093, 0.4167739012805862, 0.41709714487914307, 0.42198978197497905, 0.42184824132754184, 0.4031917961293332, 0.06977589529231243, 0.0700055836539808, 0.0512024663723023, 0.08047305257888204, 0.06923816428545737, 0.12208521455631394, 0.0584738991808601, 0.04089272631171881, 0.055961292638486704, 0.15318556118597826, 0.13576122902664678, 0.14894078553062717, 0.14248853631160452, 0.14727532274219413, 0.15003494402034123, 0.14662620787181546, 0.16398401088294123, 0.14679152264851836, 0.13015214589223145, 0.12483208307043625, 0.15555095826143317, 0.17540125274985874, 0.1307793321385674, 0.11825723038278413, 0.1519513857773087, 0.1300637511662731, 0.1258314296977805, 0.8473792870117071, 0.8847262569467331, 0.8237700752521713, 0.8107992527805745, 0.8169770318350824, 0.9000506546710122, 0.8665716657969678, 0.8969327994864129, 0.8612016015964892, 0.16403622602334833, 0.14992225177557428, 0.1554315214930423, 0.15701563462706347, 0.13210096976067398, 0.14822021452854484, 0.16211406791248517, 0.15383030585759028, 0.1877637534271852, 0.1548352601445686, 0.18016427640797006, 0.2119608146432823, 0.20500943904569924, 0.22574233777752784, 0.1965391480705695, 0.1774222807526057, 0.1650073763170763, 0.18455296455744918, 0.13053247607848006, 0.1358148729551678, 0.14857776815070756, 0.12128652035900667, 0.12811731995355258, 0.149061913334669, 0.15076415449339997, 0.11793670368649822, 0.15314184897560046, 0.10802332162960882, 0.12184958319052952, 0.13956784591125537, 0.13339599615030417, 0.13575423661759545, 0.12642044200407332, 0.12870629723045257, 0.1390146165361983, 0.1566252830949133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000218310124595833, 0.05851401932762601, 0.08201140349557134, 0.09173202796692981, 0.06749216697160032, 0.07852911938077212, 0.07204503037942811, 0.07941130523314754, 0.05548026387396565, 0.0857434919861797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05129019017535408, 0.053227830752716754, 0.054057137770963326, 0.05454548645415802, 0.05619880967661117, 0.06449161434070916, 0.06658438888294826, 0.06480219889168204, 0.06588606643774297, 0.36279378689556074, 0.3619269826190643, 0.358766156386886, 0.35376218733446785, 0.32765680677378595, 0.32699949778753357, 0.35175442436881244, 0.3296468020360921, 0.37881226633915743, 0.07683182263957933, 0.07251441205821318, 0.07173337871265995, 0.07957571764260396, 0.07048615958024873, 0.09237886630930336, 0.07946579953252297, 0.08772556981647628, 0.10722681348131469, 0.17226043109215516, 0.17631148337888936, 0.15394339864073903, 0.18533368274519935, 0.1660792706862665, 0.18118809023460825, 0.19979387891727252, 0.18047306804224428, 0.16272152136507356, 0.19916601117818977, 0.1968017876787097, 0.19883599179341604, 0.21702415911223893, 0.2008425599378041, 0.19703497187857844, 0.17511839970854415, 0.22378008315985154, 0.20093791955427864, 0.1538984617487369, 0.15418959536746557, 0.133010173061474, 0.17065563928685024, 0.16101981672473797, 0.15232770585562172, 0.15426659821305477, 0.16194755917773052, 0.15491441035786524, 0.20294352097387547, 0.18172966784182032, 0.2023845270368818, 0.17049681464196453, 0.19455111457963303, 0.17864064379151023, 0.18589634161530755, 0.19717684276665048, 0.17388259222782998, 0.2039307717048907, 0.19604937121726285, 0.20068875813429543, 0.2095459794968645, 0.20068059859783594, 0.20911651422946065, 0.22021871036908092, 0.21407403877067255, 0.20956263449257706, 0.25951212897423326, 0.22773961757969596, 0.32650623223014097, 0.405652201034552, 0.23806264941067512, 0.3310307524056285, 0.29838342873830015, 0.1942732047094461, 0.2978747122553055, 0.20600453062953838, 0.20476662430622738, 0.1609805257807846, 0.19226295437203111, 0.18540411761795006, 0.17172333374161586, 0.15788918862465673, 0.16141177856267674, 0.22098664813742064, 0.18057047479020982, 0.17545707243617903, 0.19685689512119475, 0.20192306799074444, 0.18036985197133748, 0.1804095500450178, 0.17367825751091093, 0.17503085273916186, 0.1901049332670518, 0.06687880484143371, 0.07208425042451694, 0.07202246901878384, 0.06853782067555836, 0.08334871251099152, 0.068808472514861, 0.07142673668179889, 0.06990643221814585, 0.07730556357798812]}, "mutation_prompt": null}
{"id": "8154b237-b58b-4f9a-87a6-54f9f60dde63", "solution": "class Enhanced_DE_ACSFAC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.f = min(1.0, self.f * 1.2)  # Adaptive control of scaling factor\n                        self.cr = max(0.1, self.cr * 0.8)  # Adaptive control of crossover rate\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_DE_ACSFAC", "description": "Enhancing Differential Evolution with Adaptive Control of Scaling Factor and Crossover Rate", "configspace": "", "generation": 77, "fitness": 0.19699186690888074, "feedback": "The algorithm Enhanced_DE_ACSFAC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "9ad0351b-e83f-462f-b027-084aa6d3422a", "solution": "import numpy as np\n\nclass Improved_EA_ADES_LocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def local_search(self, x, func):\n        x_best = np.copy(x)\n        f_best = func(x)\n        for _ in range(5):  # Perform local search with 5 iterations\n            x_new = x + 0.1 * np.random.randn(self.dim)  # Small perturbation\n            x_new = np.clip(x_new, -5.0, 5.0)\n            f_new = func(x_new)\n            if f_new < f_best:\n                x_best = np.copy(x_new)\n                f_best = f_new\n        return x_best\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial = self.local_search(trial, func)  # Integrate local search\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_LocalSearch", "description": "Enhancing Differential Evolution with Local Search for Exploitation", "configspace": "", "generation": 78, "fitness": 0.10390725130274575, "feedback": "The algorithm Improved_EA_ADES_LocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.2093267353640461, 0.17502146132908147, 0.23279448338325948, 0.1831761529271233, 0.20057332541366135, 0.26510925217474035, 0.21560072450596568, 0.2169299115405261, 0.19683500561453338, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011599734485951974, 0.0007146144586364089, 0.0011377369427737483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06984065600874312, 0.05840388676802033, 0.06460287290888955, 0.07444938815730007, 0.04868938671888212, 0.08055460291399463, 0.06039454617822115, 0.06680581826665277, 0.06626850210225088, 0.04895442606490252, 0.03224761398305109, 0.055635721709217933, 0.057630107029973066, 0.049413871892332484, 0.05147533191275455, 0.06135797770786544, 0.04315739141608732, 0.0635665263780214, 0.15472935927219222, 0.2037264598137074, 0.1882795530189444, 0.14369000556559153, 0.10843900444421084, 0.26022467975841124, 0.4589967841394412, 0.13113589250524638, 0.23037432360840693, 0.10856586981521721, 0.05674402897262676, 0.0877253189079874, 0.09284601179242802, 0.04684180992190545, 0.0919382096948389, 0.07247357029033041, 0.06026241724086645, 0.12985740091220177, 0.12348724545057899, 0.1306911390695905, 0.10169363310619806, 0.1707401148374743, 0.1623126034388006, 0.14508221646385933, 0.12551136660554496, 0.13820108667982145, 0.13601311150373618, 0.026422568512900035, 0.027953978234830146, 0.037091207547558014, 0.020688335733979324, 0.043991103799464915, 0.050176021999754794, 0.05185552800942583, 0.043304518558150984, 0.015111376476341087, 0.042886797089559, 0.04283537149663774, 0.04488562878916713, 0.01507597082780976, 0.053258000365623226, 0.039620370951125694, 0.04227499977508764, 0.02374932802956442, 0.03801708076388077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0717281074748708, 0.06710181193769826, 0.08655233580280108, 0.06630004950581603, 0.07579270246262493, 0.0323810161906507, 0.06416681861569418, 0.06768404525768568, 0.06685812642511624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015064112248277195, 0.015584772074390796, 0.002926581479893331, 0.00611573501083873, 0.024134119503445572, 0.019743006208617575, 0.007668750387838319, 0.006185602014876723, 0.004041277212338157, 0.19728536625364956, 0.21153538422189977, 0.23485888507905472, 0.23927549899311307, 0.19793010178212744, 0.22587809857198093, 0.2302465437225546, 0.17558243373561655, 0.21128206412629724, 0.03724844552859374, 0.0467813765558176, 0.050564102448650505, 0.04685972087772683, 0.037491085905562826, 0.06314971652337442, 0.05178114112841026, 0.060133454467821146, 0.053201282328195876, 0.14509073654746385, 0.18298768156010914, 0.1564106481625155, 0.16347429421484738, 0.16793124174038754, 0.14913149240840362, 0.15367894945978555, 0.1609466116802174, 0.13886837453522238, 0.16177946560897583, 0.13856276187672611, 0.17239860971488474, 0.177880263892921, 0.17625478782213744, 0.17122682767469832, 0.15614062829002273, 0.18966016216413994, 0.15552881107985905, 0.09336442099404663, 0.08907841775824743, 0.12407120603808941, 0.12959455700138478, 0.10408543849261842, 0.1346030200701589, 0.1397196324255341, 0.15347190659613263, 0.11938315819842849, 0.1642799020181216, 0.15892036511570728, 0.17016345282493917, 0.16392869297931867, 0.15208765767701748, 0.17476359297740252, 0.16490309276600368, 0.14813836387051105, 0.17006865951011785, 0.1733161613509574, 0.13304232887255407, 0.16818066997690206, 0.14171294290588443, 0.16029996046893413, 0.11902112353879579, 0.14362807819759726, 0.1302455231246289, 0.17092658490689938, 0.20972999051475594, 0.14858322870912322, 0.17676810192961134, 0.19117156957228376, 0.17500419007750656, 0.1635749362304565, 0.14519422071855803, 0.1575587389000932, 0.19490266964694414, 0.21048240742189928, 0.14490409472440002, 0.12139250830500026, 0.1215352751751958, 0.12973445630401859, 0.15564772050381748, 0.11807753543013311, 0.1383457063823138, 0.1579497025015273, 0.1889915776291502, 0.1829926817829709, 0.18814791811280152, 0.18131996899365332, 0.2044315305829848, 0.18828944042596107, 0.20884814044516953, 0.1863076613785576, 0.18516322033941046, 0.05927033857097741, 0.04819536753118103, 0.06426187971752317, 0.056205167497056174, 0.05421645388808716, 0.0625023522623609, 0.05382442462195591, 0.05882660656195016, 0.05354015783839894]}, "mutation_prompt": null}
{"id": "54080f4f-7422-48b5-a976-34a322677a39", "solution": "import numpy as np\n\nclass Enhanced_DE_Opposition:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_DE_Opposition", "description": "Enhancing Differential Evolution with Opposition-Based Learning for Diversification in Population Search", "configspace": "", "generation": 79, "fitness": 0.19699186690888074, "feedback": "The algorithm Enhanced_DE_Opposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "a309d985-d321-45c2-a51f-bb487217619a", "solution": "class Adaptive_DEA(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mut_factors = np.full(self.pop_size, 0.5)\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy, i):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.mut_factors[i] * (b - c)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy, i)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:\n                        self.mut_factors[i] = min(1.0, self.mut_factors[i] * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Adaptive_DEA", "description": "Implementing a dynamic mutation factor adaptation based on individual performance to enhance exploration-exploitation trade-off.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'crossover' is not defined\").", "error": "NameError(\"name 'crossover' is not defined\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "a2b9b135-3fb4-4cd6-83d6-d2fcc205b989", "solution": "import numpy as np\n\nclass Dynamic_Adaptation_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1 / 6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n        self.adapt_rate = 0.1  # Rate of adaptation for mutation and crossover probabilities\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    # Adaptive parameter control\n                    self.mut_prob = min(1.0, self.mut_prob * (1 + self.adapt_rate))\n                    self.cross_prob = max(0.1, self.cross_prob * (1 - self.adapt_rate))\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += self.adapt_rate\n                        self.strategy_probs = np.maximum(self.strategy_probs, 1e-6)\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Dynamic_Adaptation_EA_ADES", "description": "Introducing Dynamic Adaptation of Mutation and Crossover Probabilities based on Fitness Improvement", "configspace": "", "generation": 81, "fitness": 0.19699186690888074, "feedback": "The algorithm Dynamic_Adaptation_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "3075ecc4-4f82-44e7-b840-6f561ed7851a", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "bdf7bc9e-6560-443c-8e56-308204e0725e", "solution": "class Enhanced_EA_ADES(Improved_EA_ADES):\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            scaling_factor = np.random.uniform(0.5, 1.0) if np.random.rand() < self.mut_prob else self.f\n            return x + scaling_factor * (b - c)", "name": "Enhanced_EA_ADES", "description": "Enhancing the mutation strategy by introducing adaptive scaling factor based on fitness evaluations", "configspace": "", "generation": 83, "fitness": 0.0, "feedback": "The algorithm Enhanced_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "f309640b-60fb-4464-9db3-17b6de68e8ae", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "50107d95-3b46-48c8-ab5b-cc56e3bd016d", "solution": "import numpy as np\n\nclass Enhanced_EA_ASPC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                        self.f = min(0.9, self.f * 1.1)  # Enhanced parameter control\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ASPC", "description": "Enhanced Differential Evolution with Adaptive Strategies and Parameter Control based on Fitness Progress", "configspace": "", "generation": 85, "fitness": 0.19699186690888074, "feedback": "The algorithm Enhanced_EA_ASPC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "28755fe7-d60b-48b6-9bc6-b1eb474d0208", "solution": "class Improved_EA_ADES_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f_min = 0.1  # Minimum scaling factor\n        self.f_max = 0.9  # Maximum scaling factor\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            f = np.random.uniform(self.f_min, self.f_max)\n            return x + f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES_Enhanced", "description": "Implementing a dynamic mutation factor in the DE algorithm to enhance exploration capabilities", "configspace": "", "generation": 86, "fitness": 0.19444721261939146, "feedback": "The algorithm Improved_EA_ADES_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.43892626848606975, 0.47840905757184493, 0.48698040504558726, 0.4393182023411607, 0.4697172485010226, 0.4418712933883623, 0.4523687131265418, 0.47610167475927423, 0.46055257172136066, 0.201742051711291, 0.11698243943255271, 0.1315326952733782, 0.14258768462388693, 0.13288814986912845, 0.170706598230833, 0.13984748779473888, 0.16441653998240413, 0.13614915397956084, 0.1446730244193175, 0.16041665484108836, 0.15981701925594394, 0.1414229027894447, 0.13810076350304967, 0.1472880491716846, 0.1649577321808252, 0.14891567637906178, 0.16437117333634066, 0.15022516737565383, 0.13403833450787006, 0.12569714020048828, 0.1381022203816561, 0.13718794707862403, 0.14017796121788384, 0.1253019476103291, 0.1376751157227034, 0.13944471368048417, 0.8947855948649888, 0.9266873922905001, 0.8690820488907314, 0.8650276513926249, 0.8787550272125751, 0.7487528746499139, 0.924588473374505, 0.9191960435913906, 0.806452898258372, 0.17220271543051113, 0.18936210833221634, 0.1464187789152811, 0.15506890330136414, 0.1504169957902326, 0.17238578042875596, 0.12347291099203628, 0.1477172674886149, 0.1786500437150388, 0.19440285929128587, 0.2055205402481748, 0.1568789268199966, 0.20967426614679308, 0.27567396989000104, 0.21117539511264727, 0.1803258297438992, 0.21910067858585158, 0.2005654611875647, 0.11970797170875991, 0.14032949531547234, 0.15485737764745533, 0.12789584283577005, 0.13883783753335888, 0.1353388807439425, 0.1425478876667159, 0.13965883614873476, 0.14562497857996914, 0.1308721971462462, 0.12206517781176318, 0.12621600447981984, 0.15380067990663282, 0.1576570667123427, 0.1576966721043671, 0.14785509336210567, 0.13585701625227087, 0.12162402420414675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0855552587639744, 0.07732506649326165, 0.07928879114728149, 0.07156309286393936, 0.1455334565630907, 0.08938754812405592, 0.10073502932692413, 0.06422022915319181, 0.08352552680887182, 0.0022628291847111015, 0.003883807388605387, 9.999999999998899e-05, 9.999999999998899e-05, 0.008907688234915945, 0.0018562547419834763, 0.009236518694921925, 9.999999999998899e-05, 9.999999999998899e-05, 0.06338694431137915, 0.060509412415247654, 0.058378178874597286, 0.05442995249510152, 0.06815942433724831, 0.0711038781662231, 0.06163553536520827, 0.05754507874491732, 0.07701323063348864, 0.3759441885892545, 0.3520528821822684, 0.374533154183709, 0.3405847286736349, 0.3515330379466217, 0.34429935163121594, 0.35475219926991686, 0.37733695544766455, 0.34065511800611625, 0.09246621273992173, 0.08187563784479424, 0.08211238833198953, 0.07060288389127489, 0.0738004114139118, 0.07844280075655696, 0.06593139725779351, 0.08558538925243464, 0.09639424384270279, 0.171210261184652, 0.1896225380612493, 0.1836954712253811, 0.17968402838840847, 0.20152670839570275, 0.1777728044578546, 0.1886048800790262, 0.18947159950865478, 0.1449701391561714, 0.17103429931244207, 0.19520814777533635, 0.21257162251972195, 0.23598939128383722, 0.21071322778095514, 0.21029209576418517, 0.18530545536226084, 0.20939361619540708, 0.19796637400338435, 0.1594741761323507, 0.1512345871128138, 0.1475487771841636, 0.16214460519142448, 0.14519205329044382, 0.17882926666720178, 0.13078745191130436, 0.14603406266512486, 0.15117357480475124, 0.18079275594151678, 0.19103096665909258, 0.1855632693154382, 0.17502711089946132, 0.17130369091070063, 0.19609597360932884, 0.2005792690589241, 0.17204623904226568, 0.18097577466801518, 0.20654725571034427, 0.1901750864592655, 0.21892592762807317, 0.1933466405081684, 0.1977134236171103, 0.20638482846994288, 0.20781700597902697, 0.2013556161944564, 0.19356379714304095, 0.25933821573175464, 0.23964946371723195, 0.2635673926021995, 0.23672597686901153, 0.3622717538136785, 0.24957003410468726, 0.32748017018943987, 0.26863271919535936, 0.3110055524216594, 0.23519189917136263, 0.227369151609223, 0.21981119570011165, 0.18282559965840217, 0.18362084412517066, 0.20790280555798368, 0.15151573197948487, 0.18742692321290777, 0.22358215393668623, 0.19160488954846877, 0.1812268141887936, 0.18522281321662237, 0.190649789893923, 0.18212479327992648, 0.18199987210996393, 0.1759028570744675, 0.20381456862731206, 0.19596047191652544, 0.06639962632083074, 0.07962743091435076, 0.07145910756050566, 0.08328881788280085, 0.0670603638870223, 0.07460690937137182, 0.06820957347599577, 0.06716322056861868, 0.06475060543420208]}, "mutation_prompt": null}
{"id": "c005b349-315e-4a50-92f0-e88a3ea53760", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "aba0e50e-ae0f-4599-bf2a-1eb40b4344bd", "solution": "import numpy as np\n\nclass Enhanced_DEA_Dynamic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)\n        self.mut_prob = 0.5\n        self.cross_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_DEA_Dynamic", "description": "Enhanced Differential Evolution Algorithm with Dynamic Strategy Adaptation and Parameter Control", "configspace": "", "generation": 88, "fitness": 0.19699186690888074, "feedback": "The algorithm Enhanced_DEA_Dynamic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "d465b377-b8f9-469c-b831-d23f76d7b2f3", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "1b0ea1f0-19c0-4787-a308-2af6e142cde4", "solution": "import numpy as np\n\nclass Enhanced_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n                    \n            # Enhancing diversity maintenance\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                dists = np.linalg.norm(pop - pop[j], axis=1)\n                crowding_distances[j] = np.sum(np.sort(dists)[:2])  # Sum of two closest distances\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_indices = np.random.choice(range(self.pop_size), size=self.pop_size, replace=False, p=selection_probs)\n            pop = pop[selected_indices]\n            \n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADES", "description": "Enhancing diversity maintenance by incorporating crowding distance in selection", "configspace": "", "generation": 90, "fitness": 0.07672847374891857, "feedback": "The algorithm Enhanced_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.14604666866224558, 0.11739185705330568, 0.1354671629187405, 0.14416897682242125, 0.1523754227659021, 0.1617914156879422, 0.13753334517263194, 0.1368796864840791, 0.098689263175894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026150130768937352, 0.03393025493019863, 0.02918723733153039, 0.03580172776640467, 0.03541901000652725, 0.028736933979078838, 0.030512744073452835, 0.03802251618015384, 0.02313831240118802, 0.030332691533700218, 0.015463927457147975, 0.012974123724471931, 0.03891932286632416, 0.022231416275510618, 0.01791766810597728, 0.028934081809253054, 0.011978482562610027, 0.02148304931476741, 0.06817234849871967, 0.06478139355789936, 0.06061990028142683, 0.06996833383349965, 0.06995025397652777, 0.07554477642090018, 0.08655777787675667, 0.06356043591805105, 0.07720202281125443, 0.08748120909193735, 0.03833213957766324, 0.024430605638224412, 0.09859152393868575, 0.025594308929330345, 0.04947892762142325, 0.06243750720722585, 0.08598294849911925, 0.05536881272527572, 0.10689668764522398, 0.17982792568407568, 0.06756768017841297, 0.15180649169779914, 0.13405967687024112, 0.057506694257383084, 0.09027358034520205, 0.11413021239000376, 0.11304474903107675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003408429134770463, 9.999999999998899e-05, 0.09741560941230909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011802750302959408, 9.999999999998899e-05, 9.999999999998899e-05, 0.011829781957066743, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06593105577058833, 0.047427124812271404, 0.05315155252825077, 0.04630367402019275, 0.03651918402886445, 0.03445585752437075, 0.07298285983259378, 0.026007851879428223, 0.0406423733760215, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13932684542298635, 0.1754060188651605, 0.1729563584812921, 0.1594498818446497, 0.1519300206446822, 0.14284656588413547, 0.2574877549168366, 0.15755351872440393, 0.18717533468286507, 0.040060809955662635, 0.04181127645763483, 0.05380901149783057, 0.04268343389719664, 0.016642373638202534, 0.05132239072963074, 0.03070584618798544, 0.02466761213893065, 0.04479284624662727, 0.13630477393459628, 0.1284717676510727, 0.1281744140579012, 0.1284594239248268, 0.13182309155597016, 0.12899436484350224, 0.12805455235442986, 0.13448096066908088, 0.12312112941008213, 0.1469399343178488, 0.13180434443356026, 0.18405478756975857, 0.15325476363857704, 0.15598128094834462, 0.13264207261761163, 0.17769451087018373, 0.19653939450451052, 0.15856964265568607, 0.09149606002971811, 0.06746719885241748, 0.12864967929734017, 0.09514872325875146, 0.08431399265709039, 0.08647013329001729, 0.10279735461387862, 0.1295518584223122, 0.1026065763698516, 0.17073369112573167, 0.1408446450389167, 0.14090517246433265, 0.1567659872389191, 0.14402957545373007, 0.14667212408021346, 0.15949506771182365, 0.15007996861211836, 0.17995864523812666, 0.12964617764401243, 9.999999999998899e-05, 0.1341565279909015, 0.14200776029390694, 0.15218304165668817, 0.06021842812671496, 0.13540001945857616, 0.130996167996964, 0.14454549437562159, 0.12635112966503403, 0.1635423050810073, 0.11906699336944804, 0.1669124385949583, 0.15029199172480634, 0.10513660251333345, 0.11286615689122059, 0.11918786202348619, 0.11864941581417354, 0.16362403519686397, 0.16811859629101678, 0.08959186601337965, 0.11089227834910631, 0.15315230873480723, 0.1001846670280806, 0.07468685986955792, 0.11241134224961224, 0.0945881639521674, 0.18983950836267527, 0.1730387502294075, 0.18273552956252126, 0.19185721705720482, 0.1844430999574388, 0.1712489516432255, 0.20391237701755938, 0.1830752001020306, 0.1831906386369322, 0.04159111175053953, 0.04153108868180899, 0.05152932851361225, 0.053048242553627056, 0.05278813726113418, 0.05733788817977492, 0.04719584438732649, 0.042229034205389704, 0.03736820318845313]}, "mutation_prompt": null}
{"id": "4930326e-e4ca-4734-9dde-ce9598c9d6e8", "solution": "import numpy as np\n\nclass Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing Adaptive Parameter Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "1ca2e53f-6274-468e-b05f-627391d19eb4", "solution": "import numpy as np\n\nclass Improved_DE_AP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)\n        self.mut_prob = 0.5\n        self.cross_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_DE_AP", "description": "Improved Differential Evolution with Adaptive Parameter Control for Black Box Optimization", "configspace": "", "generation": 92, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_DE_AP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "1cc1cf96-3f06-46b5-a2d4-1224d760919e", "solution": "from sklearn.cluster import KMeans\n\nclass Enhanced_EA_ADES(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.cluster_model = KMeans(n_clusters=5)\n\n    def update_strategy_probs(self, pop):\n        labels = self.cluster_model.fit_predict(pop)\n        cluster_counts = np.bincount(labels, minlength=len(self.strategy_probs))\n        self.strategy_probs = cluster_counts / np.sum(cluster_counts)\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            self.update_strategy_probs(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADES", "description": "Enhancing diversity in the search by incorporating a dynamic clustering mechanism for adaptive selection of mutation and crossover strategies.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'sklearn'\").", "error": "ModuleNotFoundError(\"No module named 'sklearn'\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "d5e97b28-65d2-4848-86b7-8f1d9a3e396c", "solution": "class Improved_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n        self.diversity_threshold = 0.5  # Threshold for population diversity\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            diversity = np.mean(np.std(pop, axis=0))  # Measure population diversity\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control based on population diversity\n                        self.mut_prob = min(1.0, self.mut_prob * (1 + self.diversity_threshold * (diversity - self.diversity_threshold)))\n                        self.cross_prob = max(0.1, self.cross_prob * (1 - self.diversity_threshold * (diversity - self.diversity_threshold)))\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_EA_ADES", "description": "Introducing self-adaptive control for mutation and crossover probabilities based on population diversity", "configspace": "", "generation": 94, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "f80d595c-45dc-4019-a3a7-377018f0fd48", "solution": "import numpy as np\n\nclass Improved_ADES_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs += 0.05 * (1 / self.pop_size)\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Improved_ADES_Refined", "description": "Implementation of an Adaptive Differential Evolution Strategy (ADES) with dynamic mutation and crossover probabilities adjusted based on fitness progress and a diversified strategy selection mechanism.", "configspace": "", "generation": 95, "fitness": 0.19699186690888074, "feedback": "The algorithm Improved_ADES_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "ab600496-aea6-4fb9-bb3a-09a4168f5e28", "solution": "import numpy as np\n\nclass Dynamic_Adaptation_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control with dynamic adaptation\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Dynamic_Adaptation_EA_ADES", "description": "Introducing Dynamic Adaptation of Mutation and Crossover Probabilities based on Fitness Progress for Enhanced Exploration and Exploitation Balance", "configspace": "", "generation": 96, "fitness": 0.19699186690888074, "feedback": "The algorithm Dynamic_Adaptation_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.4639877399681793, 0.47476052654111467, 0.4930402226087448, 0.49250282771921816, 0.42642039687402744, 0.49476062191424974, 0.47908901615037736, 0.5171680211060294, 0.4540993393155415, 0.1409639786663116, 0.13634119211271334, 0.1732262759591784, 0.14811320871245004, 0.12877576591450524, 0.14803094415911577, 0.10995475882319039, 0.13413422884461468, 0.12989497454346655, 0.16151905916823184, 0.15666646511220084, 0.1833392808110338, 0.19088329810760551, 0.1966599521264477, 0.16007147172549652, 0.1542045869378018, 0.14303597620853103, 0.15204340603141986, 0.14226739429842472, 0.17096041235555237, 0.15325311865198, 0.1526182172713787, 0.15893279333206378, 0.13810520552405903, 0.1562585062382572, 0.11748480793610305, 0.1364879361030138, 0.8165205283064133, 0.8179842915810247, 0.8588223132589393, 0.8889110642298079, 0.8553217089052083, 0.8515191922454164, 0.8875559751869413, 0.8717014876533096, 0.8680823210492117, 0.2099520199241277, 0.16811052282753403, 0.15786992005303413, 0.17970559936733477, 0.1392141154726565, 0.1454317686908445, 0.1591202891222545, 0.13663498537710472, 0.16003882003472136, 0.17013436425327744, 0.21943805333915356, 0.17274044204480432, 0.1869570893189929, 0.22348005743410682, 0.21189310534528516, 0.1970921151562406, 0.18593130629531296, 0.2070165643536187, 0.14761737454572943, 0.13154217724888606, 0.14095918724273238, 0.1279732450184431, 0.12874069954294087, 0.12188636627132365, 0.12959140221285448, 0.14293016002588177, 0.1418996200087178, 0.14405936364159366, 0.15026844780922288, 0.133033757218871, 0.14309683851166577, 0.13504897784075198, 0.13372278928755754, 0.1423270507021671, 0.11683861312573496, 0.12224127733065593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14006495661820495, 0.06965666907501722, 0.07780222581200014, 0.05177209700459062, 0.08685789913636477, 0.06839677892163731, 0.08172921429496605, 0.07866733304025697, 0.1352837568019668, 9.999999999998899e-05, 0.011996800369870497, 9.999999999998899e-05, 0.000522976484318538, 0.0019213053534317126, 9.999999999998899e-05, 0.0005231012286952552, 0.0022633022445758266, 0.0025191670531087285, 0.06051211267298062, 0.06410084310491126, 0.06414783742767272, 0.08894280906109742, 0.07548265728083625, 0.07666204397132037, 0.06708267208589946, 0.07118089800334837, 0.07420729259899617, 0.36013624791074716, 0.3371729586139439, 0.3660347057063854, 0.3619580672615481, 0.34146388316028975, 0.3291738749114498, 0.35163849192000707, 0.34458823087870205, 0.3523784553200797, 0.09208488495963396, 0.09269796384500173, 0.07313816558572417, 0.07210686366258201, 0.06852453719308438, 0.08342035865636521, 0.09118333360001507, 0.07650571783004834, 0.08510244086973817, 0.14993658404462162, 0.19210397469285168, 0.20396286644966333, 0.1481487499014562, 0.17546131905637996, 0.1608952044917682, 0.18121359878756504, 0.1517327315275535, 0.170423600962742, 0.19896453079434695, 0.18026463445232443, 0.23557490426314653, 0.21758804417049127, 0.20344467778438147, 0.20902984757798504, 0.2239556076184709, 0.21014973309746254, 0.17956966339160974, 0.1457116559982511, 0.1442092745653114, 0.1720028104644007, 0.17292944558953804, 0.17507039443072403, 0.15883551223187498, 0.15849288431370567, 0.14867026320245713, 0.16518329429637557, 0.20615025037863477, 0.19326803495247313, 0.1834552603900007, 0.2067556435521427, 0.1981142607156242, 0.1823976280557459, 0.18445978864015677, 0.18661428053709683, 0.2134946407386441, 0.21483222875849417, 0.2061909563447052, 0.2061580076202727, 0.19817961249539606, 0.206939788662848, 0.19022219658209372, 0.21640662985440673, 0.1982467150664352, 0.2053674008458325, 0.17946450344116893, 0.27349222599221523, 0.3536655088333114, 0.35472788354227447, 0.2670759798153013, 0.34359764808297766, 0.3465226640375584, 0.4300368249568707, 0.24147049045702884, 0.22942805660228183, 0.23187554544191247, 0.2316715606085903, 0.21506698169980587, 0.25537723968381554, 0.22328516479872873, 0.15059916974504972, 0.15882230738575742, 0.19108065591502266, 0.2116286114812006, 0.1970552372505322, 0.17895817958694682, 0.18251303479353953, 0.1837145087862445, 0.2009269238093062, 0.1982521700019615, 0.17447972026202008, 0.18125229905181572, 0.07862725802820847, 0.06813120171059017, 0.07529599395176045, 0.06950942333512156, 0.08243833924790345, 0.07279831842219686, 0.062201946607216785, 0.06490593253604349, 0.07569538225105443]}, "mutation_prompt": null}
{"id": "dc660adb-13f1-468c-9fdf-9b92f0e5c0ed", "solution": "class Dynamic_Adaptive_EA_ADES(Improved_EA_ADES):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * (1 + 0.1 * (fitness[i] - trial_fit)))\n                        self.cross_prob = max(0.1, self.cross_prob * (1 - 0.1 * (fitness[i] - trial_fit)))\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Dynamic_Adaptive_EA_ADES", "description": "Introducing Dynamic Self-Adaptive Control for Mutation and Crossover Probabilities based on Fitness Progress", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'pop' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'pop' referenced before assignment\")", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {}, "mutation_prompt": null}
{"id": "92b993c2-dd3c-44d3-b48f-7aefee8fb53b", "solution": "import numpy as np\n\nclass Enhanced_EA_ADES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c)\n\n        def crossover(x, trial):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x)\n\n        pop = np.clip(np.random.normal(0, 1, (self.pop_size, self.dim)), -5.0, 5.0)  # Adaptive population initialization\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADES", "description": "Enhancing diversity through adaptive population initialization and elitism retention", "configspace": "", "generation": 98, "fitness": 0.20043195223966953, "feedback": "The algorithm Enhanced_EA_ADES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "7fd642f1-1f74-4dfc-90f9-b5e455a000b7", "metadata": {"aucs": [0.5486020573184351, 0.5431319900633915, 0.5344344349705612, 0.46293265071516276, 0.4561874054460051, 0.4322875108712759, 0.46639588870120574, 0.46817314421229395, 0.488573964385584, 0.16100410732517945, 0.1643550825636232, 0.11418303266797336, 0.241157860653764, 0.18482382881402237, 0.2162927318264053, 0.1665721331370722, 0.10159265558821151, 0.1279750850900524, 0.17238113904215047, 0.145585246879532, 0.19344902961114874, 0.1691822051694084, 0.1497528068805385, 0.22250914365156482, 0.19523474782842953, 0.13755026187161346, 0.19715765226538307, 0.14212805372543458, 0.15137444536025946, 0.11866129874148645, 0.15128520281354085, 0.13436596203098727, 0.12300077388599673, 0.1556423343328579, 0.13743085210652117, 0.12316383702901024, 0.5978278525000519, 0.6994455390217613, 0.7383573763699116, 0.6628170844687444, 0.6853094343543715, 0.6777982584859137, 0.7231145515364438, 0.6863349946550628, 0.6780143247359685, 0.1282318476182952, 0.12913114721141283, 0.12042068500171987, 0.1599134736921447, 0.131239974161672, 0.16442904808076275, 0.1605536254804527, 0.16286145857934953, 0.19862508790914624, 0.21032753093959733, 0.1887667057518615, 0.2081430454292783, 0.24842598914464786, 0.24944428011645636, 0.2291337508691974, 0.20325621180138265, 0.1677497770840457, 0.210963110916637, 0.17717953586450153, 0.19628017290208832, 0.17128045066101127, 0.15153375264323188, 0.14151532038812753, 0.1472917906823764, 0.16105450455810566, 0.16390858734044722, 0.16050117866384717, 0.20668118701312088, 0.2128870696008227, 0.21447586695467757, 0.2286460791153846, 0.2672829420385672, 0.21304682742352732, 0.22801510156389881, 0.23919031839391514, 0.22056807504855058, 9.999999999998899e-05, 0.013159873891930185, 0.0020654131052068037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018901801308815802, 9.999999999998899e-05, 0.09260691762434903, 0.10966110254493966, 0.12256856681462869, 0.08449761263603417, 0.07248117675824362, 0.07868240991468078, 0.11822529633118906, 0.1518050087846945, 0.10427161578630317, 0.015273647667134016, 0.00954334407883417, 0.010859757199964237, 0.0041759906556971815, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021230965389947842, 0.04365037597958832, 0.04428986213035946, 0.053639357638292307, 0.08362430981445979, 0.06659615958226217, 0.08469789104347525, 0.06696536440253509, 0.06013958481071491, 0.07133245478496941, 0.37578295411602913, 0.381007436826745, 0.38719909982998124, 0.35312927402403993, 0.3294460285286993, 0.34152175956586006, 0.38626923366288335, 0.3862353778768357, 0.37908873584601477, 0.03663024884103927, 0.04219178402638313, 0.059120101972187644, 0.05190779733924977, 0.056842625314008965, 0.06610643691325602, 0.0690278731357108, 0.07565175603167174, 0.07279766292545897, 0.21348522552931548, 0.19613104284669558, 0.19006425203647515, 0.2382131007031416, 0.19882162982269325, 0.1810135950685744, 0.18999300315325496, 0.15500609393460674, 0.17224343257678842, 0.17949768154575763, 0.14837970483654317, 0.204207810980922, 0.250801866161557, 0.23251543740554292, 0.21009918823566143, 0.19809315955358597, 0.1684830020641408, 0.16713216848602264, 0.16030235071710008, 0.10276458676080369, 0.11054344365726099, 0.1675043960302337, 0.17522002203369536, 0.17465957331416415, 0.11125870753689981, 0.1335391735106839, 0.13903242051975007, 0.2381067625063651, 0.2248420204684718, 0.21220807026862165, 0.2369927754610779, 0.26820059953498754, 0.21410869152964285, 0.2256557497352233, 0.23271210274019893, 0.23740597711094857, 0.20325394725278478, 0.1997471773340671, 0.21564620894978004, 0.21725792463659166, 0.19610379640081577, 0.2077223363573023, 0.20046691833121633, 0.21574629768741815, 0.20610694957265496, 0.18778482406090702, 0.18633317472448796, 0.1984857439970814, 0.3323346622717771, 0.313098785883831, 0.33735388886687734, 0.44900845887968155, 0.1652261107729961, 0.3721601767151962, 0.29273124573172726, 0.4359964460254141, 0.3447627016433109, 0.3509967666978242, 0.32417557581669787, 0.22147466129662075, 0.17401712724271512, 0.1976996188212229, 0.19615935346950808, 0.2016912460999858, 0.18261204915453555, 0.17677438462547146, 0.19064145363574259, 0.1907094905676422, 0.1824180069583341, 0.18755031300223268, 0.20289160166227882, 0.18503991820469834, 0.08906516426471045, 0.08014775364779614, 0.08896478167212807, 0.0898211156829598, 0.07670546473378181, 0.08245200316530776, 0.08164970526141002, 0.07801879115411903, 0.067759079504639]}, "mutation_prompt": null}
{"id": "425cee50-37be-41d8-b266-4ec847d4fed5", "solution": "import numpy as np\n\nclass Enhanced_EA_ADES_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.cr = 0.5\n        self.f = 0.5\n        self.strategy_probs = np.full(6, 1/6)  # Initialize equal probabilities for 6 DE strategies\n        self.mut_prob = 0.5  # Initial mutation probability\n        self.cross_prob = 0.9  # Initial crossover probability\n\n    def __call__(self, func):\n        def mutate(x, pop, strategy, mut_prob):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            return x + self.f * (b - c) * mut_prob\n\n        def crossover(x, trial, cross_prob):\n            jrand = np.random.randint(self.dim)\n            return np.where(np.arange(self.dim) == jrand, trial, x * cross_prob)\n\n        pop = np.clip(np.random.normal(0, 1, (self.pop_size, self.dim)), -5.0, 5.0)  # Adaptive population initialization\n        fitness = np.array([func(p) for p in pop])\n\n        for _ in range(self.budget):\n            new_pop = np.empty_like(pop)\n            for i in range(self.pop_size):\n                strategy = np.random.choice(6, p=self.strategy_probs)\n                trial = mutate(pop[i], pop, strategy, self.mut_prob)\n                trial = np.clip(trial, -5.0, 5.0)\n                trial = crossover(pop[i], trial, self.cross_prob)\n                trial_fit = func(trial)\n                if trial_fit < fitness[i]:\n                    new_pop[i] = trial\n                    fitness[i] = trial_fit\n                    if strategy != 1:  # Adjust strategy probabilities\n                        self.strategy_probs[strategy] += 0.1\n                        self.strategy_probs[self.strategy_probs < 1e-6] = 1e-6\n                        self.strategy_probs /= np.sum(self.strategy_probs)\n                    if trial_fit < fitness[i]:  # Adaptive parameter control\n                        self.mut_prob = min(1.0, self.mut_prob * 1.2)\n                        self.cross_prob = max(0.1, self.cross_prob * 0.8)\n                else:\n                    new_pop[i] = pop[i]\n            pop = new_pop\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx]", "name": "Enhanced_EA_ADES_Refined", "description": "Enhancing diversity through adaptive population initialization, elitism retention, and dynamic mutation and crossover probabilities for improved exploration and exploitation balance.", "configspace": "", "generation": 99, "fitness": 0.08353237025116583, "feedback": "The algorithm Enhanced_EA_ADES_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.08.", "error": "", "parent_id": "92b993c2-dd3c-44d3-b48f-7aefee8fb53b", "metadata": {"aucs": [0.16854785560133245, 0.14699877705847053, 0.18142771528015023, 0.07058300072701729, 0.05787552869098522, 0.06034850247453183, 0.08195917310237488, 0.07680183323743117, 0.08718529561050947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03198390251222749, 0.027618823893704403, 0.02959882263028535, 0.017366312702997155, 0.02202240693759938, 0.02792648597063163, 0.005347025541719952, 0.018808614833668802, 0.010787180329913104, 0.02794544433599644, 0.03064851290297177, 0.025680028932499432, 0.02421879177897479, 0.007577462382332256, 0.022050684166390444, 0.011789693370904186, 0.0011167812893904117, 0.005884383257332204, 0.022952132976668316, 0.01974960580514029, 0.02573643266335579, 0.023802799074431502, 0.018685121849914665, 0.027657976421068597, 0.023183671842223363, 0.018789755375380968, 0.028266949675967545, 9.999999999998899e-05, 0.029671559969452588, 9.999999999998899e-05, 0.029465331125708705, 0.031323285418764835, 0.06297723009696543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18295593024079726, 0.15183830892634465, 0.15901529584926088, 9.999999999998899e-05, 0.02510222498614223, 9.999999999998899e-05, 0.010629720519305774, 0.03033080930190757, 0.030104356321871806, 0.04472388635307256, 0.07336526564428059, 0.02209756515841743, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1456426193014031, 0.14934478993862776, 0.16458901979100937, 0.18058991758835274, 0.1964834078739628, 0.15939543669349954, 0.2371891122709484, 0.17594812805939275, 0.1526298622178187, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07110703514273986, 0.07642191748065452, 0.060601903166788706, 0.06537483009415812, 0.058844791249264894, 0.04990859792282809, 0.07563720159456222, 0.0812595253377123, 0.0670364459695576, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13441636246243904, 0.14024924358545054, 0.17176115573666884, 0.1253467718489042, 0.1195702068140505, 0.13802519339001595, 0.19185421716500795, 0.1780525391706893, 0.19839248925644493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020558979901076246, 0.013191739089133625, 0.017989615497527645, 0.03706505886774425, 0.012299236105257516, 0.03074308151348648, 0.14514264777390307, 0.13440841557850958, 0.19270605221806814, 0.14896724950418117, 0.10579389233440217, 0.15318016650670507, 0.15548890678184668, 0.15294048627606804, 0.15977065324019513, 0.13808739955870952, 0.135488892846795, 0.1395123921403314, 0.17312437260664082, 0.17543186458914084, 0.19255789125520484, 0.13403593170952577, 0.12789129448411785, 0.1314397193129604, 0.06953843338956778, 0.06171351852506268, 0.06648899272448527, 0.13394194984752916, 0.14255084642782678, 0.1386975960281872, 0.0730296197818261, 0.07274075743294939, 0.07233828763357264, 0.2475378520082251, 0.22672383086707848, 0.244308797033571, 0.24767657861088066, 0.27325696883649775, 0.26366128743427786, 0.2387508034880238, 0.2370318547602558, 0.2939486019578329, 0.15726356621780146, 0.15231183631167877, 0.1427136247023738, 0.14519202385905738, 0.14667848968928487, 0.15469659493869514, 0.16149106634381383, 0.15691795555879762, 0.16286818659723779, 0.16537734132642234, 0.16656139561972527, 0.15884421432858142, 0.10728270143215346, 0.11449057904426041, 0.10663047284339522, 0.1262460633532424, 0.11408927139680414, 0.11130746380174716, 0.17942083368200368, 0.29277472455367815, 0.21310808061733388, 0.0704041683676846, 0.11837426613191615, 0.08327029981416056, 0.0990249522946024, 0.10766953983925431, 0.10382186889850742, 0.19502383916661925, 0.1787335620525773, 0.19272397917219775, 0.1950838032806117, 0.18425812866384206, 0.20497043220728206, 0.18056652813427887, 0.19778347417067366, 0.19634582008704748, 0.0675893569988455, 0.05888423401129772, 0.06669163143243928, 0.07117131928464604, 0.08250271431713463, 0.06502649317731102, 0.06747098696179887, 0.07064990566870077, 0.07353469114938549]}, "mutation_prompt": null}
