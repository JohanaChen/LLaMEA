{"id": "dc0b2ff2-51f0-4363-bf9e-14a438c1bab4", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, mutation_factor=0.5, crossover_prob=0.9, w=0.5, c1=1.5, c2=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.mutation_factor = mutation_factor\n        self.crossover_prob = crossover_prob\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        \n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], self.mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "PSO_DE_Optimizer", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.35406117375127516, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.27.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8355695737820648, 0.8461197658628686, 0.8528934408586971, 0.8378991322967944, 0.8345079477788634, 0.8287572207039762, 0.8500878151821654, 0.8444667694493893, 0.8388426578992698, 0.7249839707421435, 0.7389170483241199, 0.6918558477068455, 0.688770677851682, 0.6914225275462151, 0.7425736034122248, 0.7228194402284323, 0.7168790323414918, 0.7286603238211602, 0.09653412635526692, 0.10579836820379096, 0.09162560317197166, 0.1096510810205773, 0.12662505355435627, 0.10412752939811942, 0.09295710860891848, 0.10560957221773404, 0.11262617964635391, 0.1098479130774278, 0.09041120233881816, 0.09518044710862217, 0.08815321898235162, 0.0920397884651416, 0.1005518037887656, 0.10449672057438109, 0.12675737300430778, 0.11204653111880691, 0.9692149912509994, 0.9824541260772577, 0.9782347293152787, 0.9531033159685893, 0.9766139426178446, 0.9831655669812043, 0.9782672491073963, 0.9756593467686198, 0.9774806119288486, 0.5589913167085123, 0.5636680701049861, 0.539492473564988, 0.5026699017161806, 0.5018382034145785, 0.5347889751470047, 0.4430412793675872, 0.46056606932473476, 0.4748372687728154, 0.5291546032279667, 0.7490831304342144, 0.8046127458551738, 0.26460806185556696, 0.7901584685076588, 0.8275060689102236, 0.7654032826632267, 0.8164385762310993, 0.8352095393186167, 0.1842735546519212, 0.24855188071360523, 0.2019402371475778, 0.25639446145291167, 0.2024956583387546, 0.16763023176281655, 0.15707235474855874, 0.1476909933960665, 0.17995436194905656, 0.18403450555492584, 0.19426686826140593, 0.19585716939640985, 0.24570301992669796, 0.14857542669268609, 0.1937080581016537, 0.1846970440557153, 0.20096783778238392, 0.17508033983768767, 0.2928887712133432, 0.11442586100745722, 0.14924525482482964, 0.28736795840530804, 0.3115673169227007, 0.15380083038548886, 0.35496164112683604, 0.13943232606434175, 0.10186191901669028, 0.5111465969175277, 0.5502389473454032, 0.37340139653266435, 0.2703418375573833, 0.13151820666579084, 0.2639946665177775, 0.5236955803251087, 0.292104620343111, 0.5810214866632288, 0.1761125562412088, 0.11305364539401253, 0.14044813301552872, 0.15363776046731814, 0.07418031838131811, 0.16961768071523653, 0.16288290663944227, 0.2099419412067044, 0.04881188720223051, 0.2765800030875156, 0.26729736344355215, 0.33216381654047766, 0.33810668280877687, 0.38351942291943786, 0.42664424730723827, 0.2731612232023358, 0.263505037333132, 0.3930432310264709, 0.7777619609449273, 0.8034840282935787, 0.7207034390831852, 0.7255938308227678, 0.7712299685401393, 0.5999714208237608, 0.6736614893378938, 0.651982980043381, 0.7181937812130204, 0.10022563221520397, 0.0916233469186507, 0.11700234781009222, 0.10509924626770262, 0.10688623566645239, 0.1205741405290508, 0.0959486328194522, 0.10009494039934796, 0.08415381954450751, 0.11292006233394147, 0.1153260680469893, 0.17387975784682674, 0.1309543682805494, 0.14468324311102987, 0.14242882673486457, 0.10838325212539335, 0.1519412504608625, 0.14762765521154575, 0.3828083637852707, 0.36819602675102736, 0.4452911409839073, 0.39743360430852004, 0.4485751496565422, 0.4647320978212537, 0.46597148645047015, 0.4938934238423265, 0.48128184127297957, 0.3301708980397, 0.30810721303446387, 0.2696603365243597, 0.3108058369250567, 0.22228740608725572, 0.39230978896896196, 0.30887148683657406, 0.28533958204766974, 0.3028333043212931, 0.2136865560577308, 0.185100482564996, 0.1852281788360518, 0.1930208902494558, 0.1813909050753898, 0.20625005607120683, 0.18552374450465514, 0.21073003065864193, 0.1947298966706993, 0.1947082986350116, 0.2007773568287503, 0.21488517398078988, 0.18616940254649317, 0.19358308507533062, 0.20901256323640482, 0.21288164700596568, 0.1854627686866881, 0.18408586913924996, 0.18920447519851202, 0.7120443633677662, 0.1808623866586342, 0.7782917763232993, 0.39390744186362125, 0.6658974657224648, 0.24576062247476216, 0.3273856292248022, 0.3287618485863374, 0.46845922459314193, 0.3521199316674811, 0.4376278901135887, 0.40581055144872913, 0.19162528830284986, 0.2076491581282186, 0.22618820256644934, 0.27412092644896247, 0.1794603589268874, 0.20433053588649408, 0.17815861120039045, 0.1931418350167814, 0.19444885030324754, 0.1720221644841864, 0.2072771794190036, 0.19452443263853647, 0.17326033932823448, 0.18251806566844875, 0.06958141782631888, 0.07965089079839327, 0.07756506817269604, 0.08439517580626177, 0.0827014566176234, 0.07729074467038821, 0.08329974239548299, 0.08091968994849086, 0.07687275946863847]}, "mutation_prompt": null}
{"id": "ebde6362-6925-4b77-b1db-96f698613a3f", "solution": "class PSO_DE_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, mutation_factor=0.5, crossover_prob=0.9, w=0.5, c1=1.5, c2=2.0, mutation_decay=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.mutation_factor = mutation_factor\n        self.crossover_prob = crossover_prob\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.mutation_decay = mutation_decay\n        \n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], self.mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n            \n            self.mutation_factor *= self.mutation_decay\n        \n        return gbest", "name": "PSO_DE_Optimizer", "description": "Enhancing PSO_DE_Optimizer by adding a mechanism to dynamically adjust the mutation factor during optimization to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.30864311336108363, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "dc0b2ff2-51f0-4363-bf9e-14a438c1bab4", "metadata": {"aucs": [0.8320722391742059, 0.8383813713765306, 0.8601617811313914, 0.8204771332499643, 0.8233758665437753, 0.8335014429115009, 0.843050705019718, 0.8455815342481038, 0.8246212241838506, 0.6764018048024627, 0.6966371231541331, 0.7292744085122761, 0.6784427169290286, 0.6681662042559204, 0.6832143671276374, 0.7189203648999525, 0.6992215452461744, 0.6671337283384149, 0.17868342333987153, 0.6464016237895209, 0.153796127176289, 0.17181518927755202, 0.6605175959781647, 0.15667152986747024, 0.18150995897997646, 0.15929061428720726, 0.1567961863454197, 0.11884746090502463, 0.13567752837842906, 0.140183735948892, 0.13708846576139133, 0.13557139937653606, 0.13945010025953164, 0.5835323032937556, 0.09667528247316082, 0.13101991435637772, 0.9556616820202468, 0.9840876884671049, 0.9765169716567499, 0.9505111638310023, 0.9806564312303564, 0.9682420284470074, 0.9763698081717473, 0.9758598472044163, 0.9750829217955694, 0.38686440420692625, 0.2797359248062107, 0.4662620386251045, 0.36610723078213125, 0.3559119644907006, 0.20382449728237806, 0.2867935252680167, 0.29258880188127534, 0.24474173590689985, 0.2213335361835178, 0.20460670681977677, 0.1488078596914455, 0.27327240463767544, 0.7891338935554211, 0.21155793450380256, 0.23784947148205715, 0.2263157431255669, 0.2327428598198007, 0.26609550602196463, 0.14048333772501487, 0.2435887756344458, 0.17367895626846108, 0.1423236216274305, 0.23038395820419766, 0.22859151412271483, 0.349548411200735, 0.16710784716506044, 0.1488265342696865, 0.1478421663837799, 0.13146121708610803, 0.15912159092699985, 0.1558015384728616, 0.12812242234840343, 0.24289249202215102, 0.17282383563583303, 0.1746074156369254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055814080268312916, 9.999999999998899e-05, 9.999999999998899e-05, 0.047193358283628695, 0.0790088491244183, 0.004039421822804812, 0.06860887613478195, 0.12279128493633362, 0.06978439037850348, 0.08500666563807613, 0.07489282232045802, 0.10518588008413021, 0.1418735353783408, 0.13000543771661377, 0.0966537654403119, 0.1618924859024914, 0.08087050893124192, 0.23845334357805237, 0.0821492910023155, 0.026608794069808428, 0.18270506239872697, 0.09864351437533592, 0.2053117574619846, 0.06991308198796164, 0.20835757374446562, 0.12892996938156742, 0.16629163631587907, 0.21924670678585523, 0.11484251597456185, 0.11133424997695152, 0.16632184131089833, 0.11227317425207894, 0.16234840920627502, 0.42416896716665387, 0.45737944210411574, 0.46445664086171623, 0.4663508399521613, 0.4969922484336945, 0.45087933715121864, 0.44663895508826035, 0.4352274556919341, 0.5254383213450797, 0.1793726347468073, 0.09022863423601923, 0.13811133858143854, 0.10743012279643094, 0.1413885736396765, 0.1140333977976683, 0.1121187097903854, 0.1069657569036343, 0.11838172552699688, 0.19277920771840085, 0.25114125900975426, 0.2015988715017062, 0.24050095259832205, 0.20848559290749558, 0.25373111590333797, 0.21649953352096674, 0.20753707962025614, 0.22234330549117054, 0.2585974871476079, 0.2582608556403365, 0.24344504776574905, 0.33551406432164066, 0.24315889951253933, 0.23468423375359515, 0.22775753889464379, 0.27467574005310713, 0.2599119806474959, 0.20129674339336567, 0.27381458486725674, 0.282125134804897, 0.22418881810995883, 0.3059427795360149, 0.22542640043724949, 0.21903244229965257, 0.20553106719615777, 0.236825139492849, 0.2819418162673857, 0.24518117734799594, 0.2707210950565174, 0.23550880293151344, 0.23374069595658364, 0.24000104145808432, 0.32650756085773824, 0.2727114268334899, 0.23048648827964036, 0.19754229099856357, 0.22253505587457711, 0.2238002083387488, 0.2470072265753399, 0.22503576693721938, 0.20278564273068278, 0.24403857507396898, 0.22181943143902438, 0.21056338836087896, 0.7128943125554478, 0.6175995185718375, 0.5387594541974542, 0.9095806355222784, 0.7922309496959521, 0.6461420519802596, 0.7702903297472178, 0.16578104502456625, 0.8194130722847153, 0.40807172685224147, 0.15411097590734024, 0.4727752463450404, 0.5220632332555799, 0.2059276567173587, 0.1991926872033496, 0.16581393546803125, 0.3713523267870362, 0.20406346474198067, 0.21083889976435144, 0.2415166890605407, 0.21289038354361323, 0.20847250698277464, 0.2303253802884031, 0.21244884852428692, 0.23379977815234287, 0.20988157816516473, 0.20101851595200038, 0.10990560239803526, 0.13804405049770907, 0.09010144014313393, 0.09840055932041747, 0.10474866273147032, 0.08798704739491603, 0.09231694504751609, 0.07642775492676446, 0.10467204923711393]}, "mutation_prompt": null}
{"id": "209ebd02-fb6c-439f-8876-85670cb64d54", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, mutation_factor=0.5, crossover_prob=0.9, w=0.5, c1=1.5, c2=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.mutation_factor = mutation_factor\n        self.crossover_prob = crossover_prob\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        \n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1/beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / abs(v)**(1/beta)\n            return 0.01 * step\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            for i in range(self.swarm_size):\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], self.mutation_factor)\n                new_sol += levy_flight(self.dim)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhancing diversity by introducing Levy flights for exploration in PSO_DE_Optimizer.", "configspace": "", "generation": 2, "fitness": 0.2881498736891724, "feedback": "The algorithm Enhanced_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "dc0b2ff2-51f0-4363-bf9e-14a438c1bab4", "metadata": {"aucs": [0.6250385784307774, 0.6256724183387201, 0.613938200788069, 0.6142203802902504, 0.6025944251625379, 0.5887031051745939, 0.6216943553984755, 0.6248857088118163, 0.5997914125959154, 0.2004314838268898, 0.19200555924346296, 0.20912822712161572, 0.20535433876365217, 0.19479307472465857, 0.21608717919457654, 0.20709433886279416, 0.18584944364131273, 0.20366047536945975, 0.10295349864680392, 0.12231973797449414, 0.12273231347513824, 0.14304554850747953, 0.09763187708781951, 0.11597769894048138, 0.10586967785662271, 0.13047126619467075, 0.10904218921435227, 0.09806774890397396, 0.0926855994902055, 0.10226826123736898, 0.10743908079155229, 0.10606763570722089, 0.10520872689545491, 0.08936245929637376, 0.10752864892410174, 0.08630495462621568, 0.9756209747860914, 0.9822337544202312, 0.9763284006348215, 0.9835679146252126, 0.9735911043479512, 0.975110283089078, 0.9788364252257105, 0.9666265640153463, 0.9677117580221823, 0.3806937246184906, 0.3897977308742646, 0.39549138428154307, 0.3991594900470359, 0.3528251827439496, 0.41896271360714055, 0.37476779361367885, 0.39726571325240034, 0.3964008511313566, 0.8382052016080315, 0.6913677607900792, 0.8035802784248911, 0.837269157550961, 0.8159918086169435, 0.5715129553576965, 0.8435418867484472, 0.7723274453886774, 0.8062552931243622, 0.21256535421347622, 0.18509075665936137, 0.18596090470921578, 0.21729244125129255, 0.3025345831092322, 0.18794145867521206, 0.18599641200687034, 0.21809389362823062, 0.2281988084251303, 0.23610069248209853, 0.24360082223404, 0.18934117242408632, 0.16341648803137998, 0.2025464054336954, 0.2158829093492366, 0.21913126210937828, 0.2448316371223136, 0.17949585512860866, 0.13770920358360217, 0.1290166171112238, 0.1296007968954036, 0.1337767204473137, 0.11871429906783693, 0.1467295562558213, 0.1981249983487171, 0.1396847617353163, 0.1771664355699729, 0.19945978157911326, 0.17492397207934607, 0.1919844275639554, 0.18254417813933355, 0.13943724730039908, 0.2010114384803432, 0.20346083341080956, 0.24305603699948097, 0.21090698232326244, 0.06860863231250036, 0.06583228419675435, 0.07270851087023056, 0.04719203109124104, 0.057003346062645455, 0.10695184156355209, 0.06876003608209613, 0.0782393399960718, 0.030978482726129908, 0.19144032681483036, 0.18911216212344406, 0.18326846671440378, 0.18806074505622727, 0.18026376402661548, 0.19087663901602414, 0.17964297911049776, 0.19003396494480906, 0.20645863433424072, 0.5019042007224735, 0.5100087293044011, 0.5422608587210067, 0.4909358376617521, 0.4982195073794131, 0.5306020763660735, 0.533513296152817, 0.5169480052140466, 0.5059192829158243, 0.160116650570706, 0.1142047448867175, 0.11586568411408738, 0.10884675134795252, 0.105188092028218, 0.10197290140058901, 0.09831162129406379, 0.11748022314613937, 0.10633402540457082, 0.17536323129585762, 0.11903027475648909, 0.12539897463934013, 0.12468547714191303, 0.11692890681927948, 0.13873421399010022, 0.1579654786026593, 0.12780838875622902, 0.15004404017631912, 0.3254013524316659, 0.3248563647271402, 0.3326191773015098, 0.3565122970657141, 0.34577515452548413, 0.36181520664026756, 0.3372733237621227, 0.36469637103563324, 0.3487623531046756, 0.2885116150209279, 0.2761873155221607, 0.2857746324563535, 0.27458386419339287, 0.25872912635220646, 0.2682840743969557, 0.26693363997723696, 0.29675864987900935, 0.2819308542493335, 0.21821759767350002, 0.22180600539648054, 0.2734240741963967, 0.22293685470533342, 0.20123182500590542, 0.2054909176271016, 0.22187594409461475, 0.2161677824430075, 0.19706215603148403, 0.18234088232347745, 0.18738068562112498, 0.18353259893246465, 0.20505432465212736, 0.22311799176391245, 0.2110564873087568, 0.18184102610685027, 0.22113250588303723, 0.18933005436441352, 0.17222072481873274, 0.1839971706296063, 0.4107554130684501, 0.6007335086021574, 0.22703857339367017, 0.36185020968204895, 0.568921758501227, 0.19031191107874124, 0.33699046099988017, 0.35880540664047744, 0.5175957146194692, 0.2099367417214929, 0.3454764805206324, 0.23880959932254453, 0.30648190071616943, 0.3930203832129229, 0.25452763615226914, 0.19493665346826694, 0.18434911591663017, 0.17959134550479816, 0.18729346848560968, 0.18751930127104166, 0.19758347933349452, 0.2083360161339951, 0.16749315475397653, 0.18237592606985176, 0.18318859503668494, 0.07178039661583879, 0.08490069340986994, 0.08302063527542758, 0.08957813197221054, 0.08251834554072124, 0.08324221143968391, 0.07848042366146069, 0.07446767550008804, 0.07752148082736798]}, "mutation_prompt": null}
{"id": "ba4dce5d-d57e-485c-b7a7-2bd94ecbc232", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, mutation_factor=0.5, crossover_prob=0.9, w=0.5, c1=1.5, c2=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.mutation_factor = mutation_factor\n        self.crossover_prob = crossover_prob\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        \n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], self.mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "PSO_DE_Optimizer", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "dc0b2ff2-51f0-4363-bf9e-14a438c1bab4", "metadata": {"aucs": [0.8355695737820648, 0.8461197658628686, 0.8528934408586971, 0.8378991322967944, 0.8345079477788634, 0.8287572207039762, 0.8500878151821654, 0.8444667694493893, 0.8388426578992698, 0.7249839707421435, 0.7389170483241199, 0.6918558477068455, 0.688770677851682, 0.6914225275462151, 0.7425736034122248, 0.7228194402284323, 0.7168790323414918, 0.7286603238211602, 0.09653412635526692, 0.10579836820379096, 0.09162560317197166, 0.1096510810205773, 0.12662505355435627, 0.10412752939811942, 0.09295710860891848, 0.10560957221773404, 0.11262617964635391, 0.1098479130774278, 0.09041120233881816, 0.09518044710862217, 0.08815321898235162, 0.0920397884651416, 0.1005518037887656, 0.10449672057438109, 0.12675737300430778, 0.11204653111880691, 0.9692149912509994, 0.9824541260772577, 0.9782347293152787, 0.9531033159685893, 0.9766139426178446, 0.9831655669812043, 0.9782672491073963, 0.9756593467686198, 0.9774806119288486, 0.5589913167085123, 0.5636680701049861, 0.539492473564988, 0.5026699017161806, 0.5018382034145785, 0.5347889751470047, 0.4430412793675872, 0.46056606932473476, 0.4748372687728154, 0.5291546032279667, 0.7490831304342144, 0.8046127458551738, 0.26460806185556696, 0.7901584685076588, 0.8275060689102236, 0.7654032826632267, 0.8164385762310993, 0.8352095393186167, 0.1842735546519212, 0.24855188071360523, 0.2019402371475778, 0.25639446145291167, 0.2024956583387546, 0.16763023176281655, 0.15707235474855874, 0.1476909933960665, 0.17995436194905656, 0.18403450555492584, 0.19426686826140593, 0.19585716939640985, 0.24570301992669796, 0.14857542669268609, 0.1937080581016537, 0.1846970440557153, 0.20096783778238392, 0.17508033983768767, 0.2928887712133432, 0.11442586100745722, 0.14924525482482964, 0.28736795840530804, 0.3115673169227007, 0.15380083038548886, 0.35496164112683604, 0.13943232606434175, 0.10186191901669028, 0.5111465969175277, 0.5502389473454032, 0.37340139653266435, 0.2703418375573833, 0.13151820666579084, 0.2639946665177775, 0.5236955803251087, 0.292104620343111, 0.5810214866632288, 0.1761125562412088, 0.11305364539401253, 0.14044813301552872, 0.15363776046731814, 0.07418031838131811, 0.16961768071523653, 0.16288290663944227, 0.2099419412067044, 0.04881188720223051, 0.2765800030875156, 0.26729736344355215, 0.33216381654047766, 0.33810668280877687, 0.38351942291943786, 0.42664424730723827, 0.2731612232023358, 0.263505037333132, 0.3930432310264709, 0.7777619609449273, 0.8034840282935787, 0.7207034390831852, 0.7255938308227678, 0.7712299685401393, 0.5999714208237608, 0.6736614893378938, 0.651982980043381, 0.7181937812130204, 0.10022563221520397, 0.0916233469186507, 0.11700234781009222, 0.10509924626770262, 0.10688623566645239, 0.1205741405290508, 0.0959486328194522, 0.10009494039934796, 0.08415381954450751, 0.11292006233394147, 0.1153260680469893, 0.17387975784682674, 0.1309543682805494, 0.14468324311102987, 0.14242882673486457, 0.10838325212539335, 0.1519412504608625, 0.14762765521154575, 0.3828083637852707, 0.36819602675102736, 0.4452911409839073, 0.39743360430852004, 0.4485751496565422, 0.4647320978212537, 0.46597148645047015, 0.4938934238423265, 0.48128184127297957, 0.3301708980397, 0.30810721303446387, 0.2696603365243597, 0.3108058369250567, 0.22228740608725572, 0.39230978896896196, 0.30887148683657406, 0.28533958204766974, 0.3028333043212931, 0.2136865560577308, 0.185100482564996, 0.1852281788360518, 0.1930208902494558, 0.1813909050753898, 0.20625005607120683, 0.18552374450465514, 0.21073003065864193, 0.1947298966706993, 0.1947082986350116, 0.2007773568287503, 0.21488517398078988, 0.18616940254649317, 0.19358308507533062, 0.20901256323640482, 0.21288164700596568, 0.1854627686866881, 0.18408586913924996, 0.18920447519851202, 0.7120443633677662, 0.1808623866586342, 0.7782917763232993, 0.39390744186362125, 0.6658974657224648, 0.24576062247476216, 0.3273856292248022, 0.3287618485863374, 0.46845922459314193, 0.3521199316674811, 0.4376278901135887, 0.40581055144872913, 0.19162528830284986, 0.2076491581282186, 0.22618820256644934, 0.27412092644896247, 0.1794603589268874, 0.20433053588649408, 0.17815861120039045, 0.1931418350167814, 0.19444885030324754, 0.1720221644841864, 0.2072771794190036, 0.19452443263853647, 0.17326033932823448, 0.18251806566844875, 0.06958141782631888, 0.07965089079839327, 0.07756506817269604, 0.08439517580626177, 0.0827014566176234, 0.07729074467038821, 0.08329974239548299, 0.08091968994849086, 0.07687275946863847]}, "mutation_prompt": null}
{"id": "9f81dc87-f988-410d-8c47-b91ad123bb71", "solution": "class Improved_PSO_DE_Optimizer(PSO_DE_Optimizer):\n    def __init__(self, budget, dim, swarm_size=30, mutation_factor=0.5, crossover_prob=0.9, w_max=0.9, w_min=0.4, c1=1.5, c2=2.0):\n        super().__init__(budget, dim, swarm_size, mutation_factor, crossover_prob, w_max, c1, c2)\n        self.w_max = w_max\n        self.w_min = w_min\n        \n    def __call__(self, func):\n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([func(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for t in range(1, self.budget+1):\n            w = self.w_max - (self.w_max - self.w_min) * t / self.budget\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], self.mutation_factor)\n                new_score = func(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "Improved_PSO_DE_Optimizer", "description": "Updating the optimization algorithm by introducing a dynamic inertia weight that decreases over iterations to balance exploration and exploitation effectively.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'de' is not defined\").", "error": "NameError(\"name 'de' is not defined\")", "parent_id": "dc0b2ff2-51f0-4363-bf9e-14a438c1bab4", "metadata": {}, "mutation_prompt": null}
{"id": "53971d4c-c9f6-4851-9ee4-dba280562834", "solution": "class DynamicMutationPSO_DE_Optimizer(PSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "DynamicMutationPSO_DE_Optimizer", "description": "Improving the update strategy by introducing a dynamic mutation factor based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 5, "fitness": 0.36566606728618667, "feedback": "The algorithm DynamicMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "dc0b2ff2-51f0-4363-bf9e-14a438c1bab4", "metadata": {"aucs": [0.8586702582011799, 0.8457639096335428, 0.8658789954402832, 0.8323853242924155, 0.8423606751913655, 0.82709914201447, 0.8565832431616702, 0.8314323668604652, 0.8503348991778986, 0.740099591235885, 0.6835292287948944, 0.7134078130220894, 0.7251622241478116, 0.7045221445542682, 0.714965042382232, 0.6995977937465847, 0.7064717294986756, 0.7223833537271721, 0.1403169274184224, 0.1250722534651446, 0.1368439875346943, 0.1165899146129874, 0.12094716174310793, 0.11277036251242045, 0.10367403439662104, 0.12384189784191257, 0.10582634153932835, 0.09993841997428787, 0.08862470403746792, 0.10402574091776373, 0.1173084227092952, 0.1108488847237099, 0.11335257946750787, 0.09661569726420804, 0.09869642970177628, 0.10552783848109504, 0.9813644682462564, 0.9706822347528498, 0.9678383713301227, 0.9709372782990355, 0.9731681536245266, 0.9638414209440009, 0.9803940945790405, 0.9725634474643554, 0.9657692574664579, 0.5550591965549112, 0.5297886458726488, 0.5549265169884461, 0.5268079467969635, 0.5238164500938888, 0.5627160047274794, 0.47587204222177115, 0.4473460930571952, 0.42069569623849135, 0.8523425708735126, 0.7103604738918126, 0.24174724041543982, 0.8197089126235211, 0.8159555169940673, 0.6695580514639702, 0.8081001931446412, 0.7263261271833483, 0.819426051032536, 0.20498586480195924, 0.25460475577198827, 0.20043559207814576, 0.5126893470687331, 0.1862688321837187, 0.2449320115910656, 0.3152028254895123, 0.24155217648570493, 0.3274943327892791, 0.17245806454755075, 0.1862162698722013, 0.16128568802581322, 0.20381340503547307, 0.35243497938645785, 0.2293489423729249, 0.26880090523815015, 0.42670107413200487, 0.17947671459591952, 0.3135631364447953, 0.34191967666107825, 0.18523577080267595, 0.2233998655916234, 0.3896950000875712, 0.08479950557735771, 0.3203084271615533, 0.09330500035180989, 0.3094806172400305, 0.407957355753674, 0.3132986764623643, 0.3811132375983425, 0.5032525566277305, 0.38423939959207165, 0.1559489678322803, 0.40867446260041584, 0.4752447957625141, 0.49790684633475724, 0.18849012714825142, 0.2009449631980469, 0.05236902686968847, 0.24721383083852033, 0.10335572683217231, 0.098196713297806, 0.18876787923045135, 0.1258376872269622, 0.10822442062756055, 0.2766719318578028, 0.37817282566196586, 0.28559537363140075, 0.3680437148566491, 0.3089086571155689, 0.26791500073057173, 0.19304587989136146, 0.3251079266655148, 0.21757146194629606, 0.7049591920521254, 0.6951266876929142, 0.63942890511772, 0.6962324322740354, 0.6395957593748165, 0.581895742033189, 0.6824398068227084, 0.7066273822617484, 0.5986280414415149, 0.12554532876288738, 0.10020134369183853, 0.10633123142991208, 0.09565710022180662, 0.09014384314075674, 0.12689644755652385, 0.12396020311331835, 0.10968173619780297, 0.10540791979658914, 0.1412755080269753, 0.14067951740970308, 0.14109912786117873, 0.14976988106900813, 0.1274317276989474, 0.12982374112413309, 0.1221870771880833, 0.13740341804713552, 0.1452812278639849, 0.3051188428330892, 0.41499801104796086, 0.4185587574950125, 0.47202243591984094, 0.4333760093387097, 0.3735961860486766, 0.4819879742747094, 0.5062036889510106, 0.448396538243222, 0.26733369909695603, 0.2519246030073695, 0.30534060169299004, 0.3351026277966732, 0.2922994720208052, 0.31677908890936857, 0.3008241558473601, 0.38316712278726195, 0.31307503839393835, 0.21834052454178743, 0.20079907061653957, 0.19992037319313738, 0.1993069356597137, 0.21860803824737973, 0.20681009413329532, 0.22061413357892157, 0.2177257601494994, 0.21004513619214515, 0.21428925755449568, 0.1951358046555135, 0.20068905569557238, 0.29014521153042927, 0.20366566785443296, 0.1963398437665821, 0.19702168925265162, 0.2111116942937189, 0.1716235990231536, 0.699305386186726, 0.3437021346740776, 0.3427872931115201, 0.8080867176969997, 0.3861792430440625, 0.5570629971233358, 0.7171928476960172, 0.3454314728286201, 0.42418502733831065, 0.6990670455642094, 0.4379552889302344, 0.1996368133708083, 0.25472963802430626, 0.28347020101656395, 0.29907735768308297, 0.25867860460913294, 0.3481506299534478, 0.3310811216577444, 0.17898191343313952, 0.17685484175970867, 0.20283217272745802, 0.18327004068837816, 0.17154127999268842, 0.18040398515449974, 0.17785843653955158, 0.17330958940205565, 0.197607490119737, 0.08670268726829922, 0.08450098129327999, 0.10371940578862271, 0.08321972858363935, 0.07986991960334267, 0.09542879519050218, 0.09849010522993362, 0.08646565320130739, 0.0899665965339087]}, "mutation_prompt": null}
{"id": "7cc72e12-cccb-4f27-a07b-b0b0eed6b1f8", "solution": "class DynamicEnsembleMutationPSO_DE_Optimizer(PSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                mutation_strategy = np.random.choice([de, rand_mutate, best_mutate], p=[0.4, 0.3, 0.3])\n                new_sol = mutation_strategy(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "DynamicEnsembleMutationPSO_DE_Optimizer", "description": "Introducing a dynamic ensemble of mutation strategies to enhance diversity and improve convergence in optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'rand_mutate' is not defined\").", "error": "NameError(\"name 'rand_mutate' is not defined\")", "parent_id": "53971d4c-c9f6-4851-9ee4-dba280562834", "metadata": {}, "mutation_prompt": null}
{"id": "bf2d9109-8edf-4566-aeec-4c02364c398b", "solution": "class AdaptiveInertiaDEPSO_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.adaptive_inertia() * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "AdaptiveInertiaDEPSO_Optimizer", "description": "Introducing a novel adaptive inertia weight strategy based on population diversity to enhance convergence speed and solution quality.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'AdaptiveInertiaDEPSO_Optimizer' object has no attribute 'adaptive_inertia'\").", "error": "AttributeError(\"'AdaptiveInertiaDEPSO_Optimizer' object has no attribute 'adaptive_inertia'\")", "parent_id": "53971d4c-c9f6-4851-9ee4-dba280562834", "metadata": {}, "mutation_prompt": null}
{"id": "7622a908-a2c3-4b99-bbd2-00ad903b1337", "solution": "class DynamicMutationPSO_DE_Optimizer(PSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "DynamicMutationPSO_DE_Optimizer", "description": "Improving the update strategy by introducing a dynamic mutation factor based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "53971d4c-c9f6-4851-9ee4-dba280562834", "metadata": {"aucs": [0.8586702582011799, 0.8457639096335428, 0.8658789954402832, 0.8323853242924155, 0.8423606751913655, 0.82709914201447, 0.8565832431616702, 0.8314323668604652, 0.8503348991778986, 0.740099591235885, 0.6835292287948944, 0.7134078130220894, 0.7251622241478116, 0.7045221445542682, 0.714965042382232, 0.6995977937465847, 0.7064717294986756, 0.7223833537271721, 0.1403169274184224, 0.1250722534651446, 0.1368439875346943, 0.1165899146129874, 0.12094716174310793, 0.11277036251242045, 0.10367403439662104, 0.12384189784191257, 0.10582634153932835, 0.09993841997428787, 0.08862470403746792, 0.10402574091776373, 0.1173084227092952, 0.1108488847237099, 0.11335257946750787, 0.09661569726420804, 0.09869642970177628, 0.10552783848109504, 0.9813644682462564, 0.9706822347528498, 0.9678383713301227, 0.9709372782990355, 0.9731681536245266, 0.9638414209440009, 0.9803940945790405, 0.9725634474643554, 0.9657692574664579, 0.5550591965549112, 0.5297886458726488, 0.5549265169884461, 0.5268079467969635, 0.5238164500938888, 0.5627160047274794, 0.47587204222177115, 0.4473460930571952, 0.42069569623849135, 0.8523425708735126, 0.7103604738918126, 0.24174724041543982, 0.8197089126235211, 0.8159555169940673, 0.6695580514639702, 0.8081001931446412, 0.7263261271833483, 0.819426051032536, 0.20498586480195924, 0.25460475577198827, 0.20043559207814576, 0.5126893470687331, 0.1862688321837187, 0.2449320115910656, 0.3152028254895123, 0.24155217648570493, 0.3274943327892791, 0.17245806454755075, 0.1862162698722013, 0.16128568802581322, 0.20381340503547307, 0.35243497938645785, 0.2293489423729249, 0.26880090523815015, 0.42670107413200487, 0.17947671459591952, 0.3135631364447953, 0.34191967666107825, 0.18523577080267595, 0.2233998655916234, 0.3896950000875712, 0.08479950557735771, 0.3203084271615533, 0.09330500035180989, 0.3094806172400305, 0.407957355753674, 0.3132986764623643, 0.3811132375983425, 0.5032525566277305, 0.38423939959207165, 0.1559489678322803, 0.40867446260041584, 0.4752447957625141, 0.49790684633475724, 0.18849012714825142, 0.2009449631980469, 0.05236902686968847, 0.24721383083852033, 0.10335572683217231, 0.098196713297806, 0.18876787923045135, 0.1258376872269622, 0.10822442062756055, 0.2766719318578028, 0.37817282566196586, 0.28559537363140075, 0.3680437148566491, 0.3089086571155689, 0.26791500073057173, 0.19304587989136146, 0.3251079266655148, 0.21757146194629606, 0.7049591920521254, 0.6951266876929142, 0.63942890511772, 0.6962324322740354, 0.6395957593748165, 0.581895742033189, 0.6824398068227084, 0.7066273822617484, 0.5986280414415149, 0.12554532876288738, 0.10020134369183853, 0.10633123142991208, 0.09565710022180662, 0.09014384314075674, 0.12689644755652385, 0.12396020311331835, 0.10968173619780297, 0.10540791979658914, 0.1412755080269753, 0.14067951740970308, 0.14109912786117873, 0.14976988106900813, 0.1274317276989474, 0.12982374112413309, 0.1221870771880833, 0.13740341804713552, 0.1452812278639849, 0.3051188428330892, 0.41499801104796086, 0.4185587574950125, 0.47202243591984094, 0.4333760093387097, 0.3735961860486766, 0.4819879742747094, 0.5062036889510106, 0.448396538243222, 0.26733369909695603, 0.2519246030073695, 0.30534060169299004, 0.3351026277966732, 0.2922994720208052, 0.31677908890936857, 0.3008241558473601, 0.38316712278726195, 0.31307503839393835, 0.21834052454178743, 0.20079907061653957, 0.19992037319313738, 0.1993069356597137, 0.21860803824737973, 0.20681009413329532, 0.22061413357892157, 0.2177257601494994, 0.21004513619214515, 0.21428925755449568, 0.1951358046555135, 0.20068905569557238, 0.29014521153042927, 0.20366566785443296, 0.1963398437665821, 0.19702168925265162, 0.2111116942937189, 0.1716235990231536, 0.699305386186726, 0.3437021346740776, 0.3427872931115201, 0.8080867176969997, 0.3861792430440625, 0.5570629971233358, 0.7171928476960172, 0.3454314728286201, 0.42418502733831065, 0.6990670455642094, 0.4379552889302344, 0.1996368133708083, 0.25472963802430626, 0.28347020101656395, 0.29907735768308297, 0.25867860460913294, 0.3481506299534478, 0.3310811216577444, 0.17898191343313952, 0.17685484175970867, 0.20283217272745802, 0.18327004068837816, 0.17154127999268842, 0.18040398515449974, 0.17785843653955158, 0.17330958940205565, 0.197607490119737, 0.08670268726829922, 0.08450098129327999, 0.10371940578862271, 0.08321972858363935, 0.07986991960334267, 0.09542879519050218, 0.09849010522993362, 0.08646565320130739, 0.0899665965339087]}, "mutation_prompt": null}
{"id": "d331666c-148d-4440-9c0e-226dd131bb8b", "solution": "class DynamicMutationAdaptivePSO_DE_Optimizer(PSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            inertia_weight = 0.5 + np.mean(pbest_scores) / (np.std(pbest_scores) + 1e-10)  # Adaptive inertia weight\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)  # Update velocity\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "DynamicMutationAdaptivePSO_DE_Optimizer", "description": "Introducing a novel adaptive inertia weight strategy based on individual performance to dynamically adjust the exploration and exploitation balance in the optimization algorithm.", "configspace": "", "generation": 9, "fitness": 0.22555308631912305, "feedback": "The algorithm DynamicMutationAdaptivePSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "53971d4c-c9f6-4851-9ee4-dba280562834", "metadata": {"aucs": [0.3919899542802189, 0.5062302105400787, 0.4341835264352566, 0.20327211862622474, 0.29821793069042457, 0.299648139893529, 0.28232191832886466, 0.5465914925438837, 0.42101752992105745, 0.06343554950389974, 0.1572138224707207, 0.187656964264592, 0.09372847017608255, 0.09841313642591032, 0.33352016589547473, 0.3051895337751469, 0.1496706600741161, 0.16672914957037133, 0.0831839137186986, 0.09236924370196409, 0.09850039301398505, 0.08489040494015498, 0.07968996712229526, 0.09334756101458319, 0.09011205105189435, 0.09143243104191512, 0.13749963751114136, 0.07390097022023978, 0.059124132505398164, 0.07340331515931953, 0.10907516826540975, 0.06970695880492273, 0.0744210976226517, 0.07972568566298321, 0.07763667260112472, 0.08683438236086527, 0.9735550066955462, 0.9786075567282985, 0.97711629810969, 0.9777817026867633, 0.981712468796132, 0.9670820782840368, 0.9853725860722486, 0.9741912329342912, 0.9751421248507544, 0.1894367786211656, 0.12450628332531088, 0.09316850557686374, 0.20379936635919482, 0.21524397604166, 0.1546709157998556, 0.15263731949912274, 0.19220932809094204, 0.2460135262982368, 0.7579756983623616, 0.26109497407224713, 0.1402288612421615, 0.5632221618507155, 0.3323668784273415, 0.1888106931904232, 0.22932235002818835, 0.22027779380065593, 0.2296985899091415, 0.19627451700329024, 0.12400650830584758, 0.13402858295660047, 0.16432314676363857, 0.13219742846224813, 0.1448329109393992, 0.1784710020748851, 0.2133298352082933, 0.17768227921301527, 0.13303731771739136, 0.11433111479974922, 0.11892539019641368, 0.1497268786160103, 0.15259106751790863, 0.1234470732059404, 0.13700453111786082, 0.11437102318202974, 0.14445513793424414, 0.06319219059514092, 0.07617330378129428, 0.2616039836298246, 0.5047646407514792, 0.10124753947397402, 0.12556869293946438, 0.2444859119005014, 0.13483795048107017, 0.12323066143419803, 0.22132673820299142, 0.22823220839107472, 0.37421388102322206, 0.16947547996071066, 0.4206182916593504, 0.18531819630605284, 0.23551770903525227, 0.4260741255548971, 0.2910876169148432, 9.999999999998899e-05, 0.14021107219769124, 0.11236736315616691, 0.04271053761069166, 0.2541457368010819, 0.01881672105190335, 0.091318898435238, 0.07250118447775, 0.07960595712379526, 0.317536273230864, 0.09398254573381981, 0.040047581989156256, 0.03951672539795059, 0.13025393749957115, 0.12260266219809324, 0.07113699613621138, 0.14113539017149757, 0.12565555914974935, 0.35653458629182755, 0.413393601456328, 0.48436686558482844, 0.3370261853886558, 0.4369671392003389, 0.42245256497597905, 0.38709447790816376, 0.6114441289941479, 0.7459308798380497, 0.08740030971569013, 0.12676203800380592, 0.11196798342923686, 0.07416781082748802, 0.10884645120373393, 0.07004242307077946, 0.10762366992011485, 0.07806669349148232, 0.09110176923167479, 0.1104272642004307, 0.15207102755360824, 0.11391271346747434, 0.14991748382399983, 0.11841676560368519, 0.15152363820181636, 0.15018475919725938, 0.14131157778387093, 0.12088532333023871, 0.24572660586000905, 0.27253205027361993, 0.2494554970703644, 0.33012573004810175, 0.28460058025180246, 0.3039216460229386, 0.21780230611193785, 0.28149617385373527, 0.2431383581289377, 0.17102833023199615, 0.31339047971343703, 0.23669204402834898, 0.24613386779280022, 0.2648499350693406, 0.2147919240753553, 0.1929896947156866, 0.29635446416526046, 0.25717983856633264, 0.19140422817763458, 0.2025829531070874, 0.19028641575851712, 0.195652157369674, 0.21277156484262782, 0.1893627945242944, 0.1979453706252705, 0.1772504412485989, 0.20098409906534942, 0.16404622464573948, 0.17509802251404782, 0.1951304112349147, 0.17659340861713357, 0.17571411479563648, 0.17240924426292747, 0.16367901416165243, 0.1743476399773659, 0.17771293588898518, 0.23233794930414564, 0.22469931148371225, 0.162705082374777, 0.1930257833840625, 0.16742322682491395, 0.23051993952599814, 0.17039509858495816, 0.163954314079643, 0.21272180115226347, 0.35417763995646023, 0.3051103305150703, 0.17453327327330825, 0.2045380929056001, 0.1515237383006508, 0.17107715521136857, 0.20525898268792175, 0.1628330653706147, 0.24936446261543144, 0.17349084536652315, 0.17040838872219755, 0.1660093564515559, 0.19642088955008763, 0.18611885838532072, 0.17670711377461334, 0.16745594197247815, 0.17114840143883414, 0.1933384843705912, 0.05652381534498441, 0.0820107580376056, 0.07397545783408, 0.07020655323936298, 0.07903415779913447, 0.07229245163744213, 0.08040666290201082, 0.07193478190672553, 0.06798445515387408]}, "mutation_prompt": null}
{"id": "130d103a-961a-4a57-a486-024361441fd2", "solution": "class DynamicMutationPSO_DE_Optimizer(PSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "DynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity by incorporating a dynamic population size adaptation mechanism based on fitness diversity.", "configspace": "", "generation": 10, "fitness": 0.36566606728618667, "feedback": "The algorithm DynamicMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "53971d4c-c9f6-4851-9ee4-dba280562834", "metadata": {"aucs": [0.8586702582011799, 0.8457639096335428, 0.8658789954402832, 0.8323853242924155, 0.8423606751913655, 0.82709914201447, 0.8565832431616702, 0.8314323668604652, 0.8503348991778986, 0.740099591235885, 0.6835292287948944, 0.7134078130220894, 0.7251622241478116, 0.7045221445542682, 0.714965042382232, 0.6995977937465847, 0.7064717294986756, 0.7223833537271721, 0.1403169274184224, 0.1250722534651446, 0.1368439875346943, 0.1165899146129874, 0.12094716174310793, 0.11277036251242045, 0.10367403439662104, 0.12384189784191257, 0.10582634153932835, 0.09993841997428787, 0.08862470403746792, 0.10402574091776373, 0.1173084227092952, 0.1108488847237099, 0.11335257946750787, 0.09661569726420804, 0.09869642970177628, 0.10552783848109504, 0.9813644682462564, 0.9706822347528498, 0.9678383713301227, 0.9709372782990355, 0.9731681536245266, 0.9638414209440009, 0.9803940945790405, 0.9725634474643554, 0.9657692574664579, 0.5550591965549112, 0.5297886458726488, 0.5549265169884461, 0.5268079467969635, 0.5238164500938888, 0.5627160047274794, 0.47587204222177115, 0.4473460930571952, 0.42069569623849135, 0.8523425708735126, 0.7103604738918126, 0.24174724041543982, 0.8197089126235211, 0.8159555169940673, 0.6695580514639702, 0.8081001931446412, 0.7263261271833483, 0.819426051032536, 0.20498586480195924, 0.25460475577198827, 0.20043559207814576, 0.5126893470687331, 0.1862688321837187, 0.2449320115910656, 0.3152028254895123, 0.24155217648570493, 0.3274943327892791, 0.17245806454755075, 0.1862162698722013, 0.16128568802581322, 0.20381340503547307, 0.35243497938645785, 0.2293489423729249, 0.26880090523815015, 0.42670107413200487, 0.17947671459591952, 0.3135631364447953, 0.34191967666107825, 0.18523577080267595, 0.2233998655916234, 0.3896950000875712, 0.08479950557735771, 0.3203084271615533, 0.09330500035180989, 0.3094806172400305, 0.407957355753674, 0.3132986764623643, 0.3811132375983425, 0.5032525566277305, 0.38423939959207165, 0.1559489678322803, 0.40867446260041584, 0.4752447957625141, 0.49790684633475724, 0.18849012714825142, 0.2009449631980469, 0.05236902686968847, 0.24721383083852033, 0.10335572683217231, 0.098196713297806, 0.18876787923045135, 0.1258376872269622, 0.10822442062756055, 0.2766719318578028, 0.37817282566196586, 0.28559537363140075, 0.3680437148566491, 0.3089086571155689, 0.26791500073057173, 0.19304587989136146, 0.3251079266655148, 0.21757146194629606, 0.7049591920521254, 0.6951266876929142, 0.63942890511772, 0.6962324322740354, 0.6395957593748165, 0.581895742033189, 0.6824398068227084, 0.7066273822617484, 0.5986280414415149, 0.12554532876288738, 0.10020134369183853, 0.10633123142991208, 0.09565710022180662, 0.09014384314075674, 0.12689644755652385, 0.12396020311331835, 0.10968173619780297, 0.10540791979658914, 0.1412755080269753, 0.14067951740970308, 0.14109912786117873, 0.14976988106900813, 0.1274317276989474, 0.12982374112413309, 0.1221870771880833, 0.13740341804713552, 0.1452812278639849, 0.3051188428330892, 0.41499801104796086, 0.4185587574950125, 0.47202243591984094, 0.4333760093387097, 0.3735961860486766, 0.4819879742747094, 0.5062036889510106, 0.448396538243222, 0.26733369909695603, 0.2519246030073695, 0.30534060169299004, 0.3351026277966732, 0.2922994720208052, 0.31677908890936857, 0.3008241558473601, 0.38316712278726195, 0.31307503839393835, 0.21834052454178743, 0.20079907061653957, 0.19992037319313738, 0.1993069356597137, 0.21860803824737973, 0.20681009413329532, 0.22061413357892157, 0.2177257601494994, 0.21004513619214515, 0.21428925755449568, 0.1951358046555135, 0.20068905569557238, 0.29014521153042927, 0.20366566785443296, 0.1963398437665821, 0.19702168925265162, 0.2111116942937189, 0.1716235990231536, 0.699305386186726, 0.3437021346740776, 0.3427872931115201, 0.8080867176969997, 0.3861792430440625, 0.5570629971233358, 0.7171928476960172, 0.3454314728286201, 0.42418502733831065, 0.6990670455642094, 0.4379552889302344, 0.1996368133708083, 0.25472963802430626, 0.28347020101656395, 0.29907735768308297, 0.25867860460913294, 0.3481506299534478, 0.3310811216577444, 0.17898191343313952, 0.17685484175970867, 0.20283217272745802, 0.18327004068837816, 0.17154127999268842, 0.18040398515449974, 0.17785843653955158, 0.17330958940205565, 0.197607490119737, 0.08670268726829922, 0.08450098129327999, 0.10371940578862271, 0.08321972858363935, 0.07986991960334267, 0.09542879519050218, 0.09849010522993362, 0.08646565320130739, 0.0899665965339087]}, "mutation_prompt": null}
{"id": "1b2f33a8-b847-4c95-8707-a8c3e0220766", "solution": "class DynamicMutationPSO_DE_Optimizer(PSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "DynamicMutationPSO_DE_Optimizer", "description": "Improving the update strategy by introducing a dynamic mutation factor based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "53971d4c-c9f6-4851-9ee4-dba280562834", "metadata": {"aucs": [0.8586702582011799, 0.8457639096335428, 0.8658789954402832, 0.8323853242924155, 0.8423606751913655, 0.82709914201447, 0.8565832431616702, 0.8314323668604652, 0.8503348991778986, 0.740099591235885, 0.6835292287948944, 0.7134078130220894, 0.7251622241478116, 0.7045221445542682, 0.714965042382232, 0.6995977937465847, 0.7064717294986756, 0.7223833537271721, 0.1403169274184224, 0.1250722534651446, 0.1368439875346943, 0.1165899146129874, 0.12094716174310793, 0.11277036251242045, 0.10367403439662104, 0.12384189784191257, 0.10582634153932835, 0.09993841997428787, 0.08862470403746792, 0.10402574091776373, 0.1173084227092952, 0.1108488847237099, 0.11335257946750787, 0.09661569726420804, 0.09869642970177628, 0.10552783848109504, 0.9813644682462564, 0.9706822347528498, 0.9678383713301227, 0.9709372782990355, 0.9731681536245266, 0.9638414209440009, 0.9803940945790405, 0.9725634474643554, 0.9657692574664579, 0.5550591965549112, 0.5297886458726488, 0.5549265169884461, 0.5268079467969635, 0.5238164500938888, 0.5627160047274794, 0.47587204222177115, 0.4473460930571952, 0.42069569623849135, 0.8523425708735126, 0.7103604738918126, 0.24174724041543982, 0.8197089126235211, 0.8159555169940673, 0.6695580514639702, 0.8081001931446412, 0.7263261271833483, 0.819426051032536, 0.20498586480195924, 0.25460475577198827, 0.20043559207814576, 0.5126893470687331, 0.1862688321837187, 0.2449320115910656, 0.3152028254895123, 0.24155217648570493, 0.3274943327892791, 0.17245806454755075, 0.1862162698722013, 0.16128568802581322, 0.20381340503547307, 0.35243497938645785, 0.2293489423729249, 0.26880090523815015, 0.42670107413200487, 0.17947671459591952, 0.3135631364447953, 0.34191967666107825, 0.18523577080267595, 0.2233998655916234, 0.3896950000875712, 0.08479950557735771, 0.3203084271615533, 0.09330500035180989, 0.3094806172400305, 0.407957355753674, 0.3132986764623643, 0.3811132375983425, 0.5032525566277305, 0.38423939959207165, 0.1559489678322803, 0.40867446260041584, 0.4752447957625141, 0.49790684633475724, 0.18849012714825142, 0.2009449631980469, 0.05236902686968847, 0.24721383083852033, 0.10335572683217231, 0.098196713297806, 0.18876787923045135, 0.1258376872269622, 0.10822442062756055, 0.2766719318578028, 0.37817282566196586, 0.28559537363140075, 0.3680437148566491, 0.3089086571155689, 0.26791500073057173, 0.19304587989136146, 0.3251079266655148, 0.21757146194629606, 0.7049591920521254, 0.6951266876929142, 0.63942890511772, 0.6962324322740354, 0.6395957593748165, 0.581895742033189, 0.6824398068227084, 0.7066273822617484, 0.5986280414415149, 0.12554532876288738, 0.10020134369183853, 0.10633123142991208, 0.09565710022180662, 0.09014384314075674, 0.12689644755652385, 0.12396020311331835, 0.10968173619780297, 0.10540791979658914, 0.1412755080269753, 0.14067951740970308, 0.14109912786117873, 0.14976988106900813, 0.1274317276989474, 0.12982374112413309, 0.1221870771880833, 0.13740341804713552, 0.1452812278639849, 0.3051188428330892, 0.41499801104796086, 0.4185587574950125, 0.47202243591984094, 0.4333760093387097, 0.3735961860486766, 0.4819879742747094, 0.5062036889510106, 0.448396538243222, 0.26733369909695603, 0.2519246030073695, 0.30534060169299004, 0.3351026277966732, 0.2922994720208052, 0.31677908890936857, 0.3008241558473601, 0.38316712278726195, 0.31307503839393835, 0.21834052454178743, 0.20079907061653957, 0.19992037319313738, 0.1993069356597137, 0.21860803824737973, 0.20681009413329532, 0.22061413357892157, 0.2177257601494994, 0.21004513619214515, 0.21428925755449568, 0.1951358046555135, 0.20068905569557238, 0.29014521153042927, 0.20366566785443296, 0.1963398437665821, 0.19702168925265162, 0.2111116942937189, 0.1716235990231536, 0.699305386186726, 0.3437021346740776, 0.3427872931115201, 0.8080867176969997, 0.3861792430440625, 0.5570629971233358, 0.7171928476960172, 0.3454314728286201, 0.42418502733831065, 0.6990670455642094, 0.4379552889302344, 0.1996368133708083, 0.25472963802430626, 0.28347020101656395, 0.29907735768308297, 0.25867860460913294, 0.3481506299534478, 0.3310811216577444, 0.17898191343313952, 0.17685484175970867, 0.20283217272745802, 0.18327004068837816, 0.17154127999268842, 0.18040398515449974, 0.17785843653955158, 0.17330958940205565, 0.197607490119737, 0.08670268726829922, 0.08450098129327999, 0.10371940578862271, 0.08321972858363935, 0.07986991960334267, 0.09542879519050218, 0.09849010522993362, 0.08646565320130739, 0.0899665965339087]}, "mutation_prompt": null}
{"id": "f9c4fdae-93c6-4f43-b8b4-a79e5d23e086", "solution": "from scipy.stats import logistic\n\nclass EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        def chaotic_map(dim):\n            x = np.random.uniform(-5.0, 5.0, dim)\n            for _ in range(10):\n                x = logistic.cdf(4 * x - 2)\n            return x\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.array([chaotic_map(self.dim) for _ in range(self.swarm_size)])\n        pbest = population.copy()\n        \n        # Remaining code unchanged\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity by incorporating a chaotic map to generate initial velocities.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gbest' is not defined\").", "error": "NameError(\"name 'gbest' is not defined\")", "parent_id": "53971d4c-c9f6-4851-9ee4-dba280562834", "metadata": {}, "mutation_prompt": null}
{"id": "e89839de-7d57-4702-b0a2-6e2c1b3f28d7", "solution": "class AdaptiveMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def diversity_based_mutation_rate(population):\n            diversity = np.mean(np.std(population, axis=0))\n            return np.tanh(diversity) * 0.4 + 0.5  # Adjust mutation rate based on population diversity\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(diversity_based_mutation_rate(population), 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "AdaptiveMutationPSO_DE_Optimizer", "description": "Introducing a novel adaptive mutation mechanism based on population diversity to dynamically adjust mutation rates for efficient exploration and exploitation.", "configspace": "", "generation": 13, "fitness": 0.24136901013245532, "feedback": "The algorithm AdaptiveMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "53971d4c-c9f6-4851-9ee4-dba280562834", "metadata": {"aucs": [0.7481529253061072, 0.7393050348690682, 0.7442309705593484, 0.71033413410531, 0.7410890341944776, 0.7366799506855716, 0.7436268008461769, 0.7536356616720719, 0.7633229489008488, 0.4591831779670108, 0.38563746044660585, 0.4415226780806746, 0.3133518233407392, 0.36986794539109547, 0.4344331112760278, 0.38022344062693525, 0.3826277168969794, 0.4381377955642831, 0.09042265289683438, 0.08323869022485941, 0.09639959477164262, 0.08116306901971859, 0.07406075801096812, 0.09186288790843222, 0.08297539941197629, 0.08437847288638134, 0.08050040025091021, 0.10096790688595991, 0.06554291336866758, 0.07310878142849742, 0.07679225270513512, 0.0614336172827068, 0.07572942633196011, 0.0762852587847247, 0.0639725958325078, 0.07230962131278207, 0.9868945141143223, 0.9913010236394917, 0.9798891196325161, 0.9742779700045436, 0.9746637799513286, 0.9848141615830485, 0.9787981437319261, 0.9727750777619447, 0.9877474363313455, 0.19438753844646084, 0.13189087811406663, 0.19611759871009393, 0.17810729444478313, 0.15106364717020837, 0.2342296567243236, 0.17583800498308955, 0.21653659915732892, 0.13614349089313416, 0.46602838946794634, 0.5706322899399168, 0.563214884615217, 0.6349595284415761, 0.48078675857132147, 0.595317704018058, 0.5537316262760921, 0.5065913105321166, 0.5404078273179194, 0.10774029593425571, 0.13458238427513913, 0.09766351783847205, 0.08234150620865655, 0.10229163630050586, 0.1066984654374653, 0.17676411355926558, 0.1341605003372799, 0.13987372690802746, 0.14338385385481178, 0.14569886928718756, 0.11004836233414295, 0.15952620926886407, 0.07192165159311903, 0.13439472327855095, 0.13111903357447918, 0.07293980025206148, 0.11799067217040538, 0.00026732326592504574, 0.000131392342558323, 0.007200079045366126, 0.006202493866973469, 0.002823934618659818, 0.0020609366368949944, 0.04168143604129071, 0.01494862455011059, 0.002018335610119215, 0.11884489692863554, 0.07751138923622436, 0.17298599212648447, 0.07165617845925754, 0.0609609191888143, 0.11692525378410212, 0.1334035111180636, 0.07956966051382464, 0.10677156730843129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00244549125409943, 0.00015155523926801973, 0.0006972415425264833, 0.2234701211379071, 0.1887007686563239, 0.22461954525037697, 0.21166783760474772, 0.2823247503696028, 0.2591868095779126, 0.22873175025868708, 0.20568711673888784, 0.23106586118679973, 0.6073569827699379, 0.5981264505933068, 0.6727705031599571, 0.5701846945685912, 0.56199128461706, 0.5876814163309123, 0.5832201727680275, 0.5495519538882142, 0.6070444307447118, 0.08677114006199227, 0.0872275888680577, 0.06943533584850625, 0.09020087289778844, 0.07639938050627515, 0.08169432474319727, 0.09193666144721169, 0.07592703521310651, 0.07828833107106037, 0.11320558085078225, 0.1261948959707695, 0.11430409807387709, 0.1566072741368122, 0.11813434406134093, 0.13344997435511197, 0.1251716297445371, 0.09689006770487663, 0.1536675695278602, 0.3385690292831428, 0.2723519581995735, 0.2738254597968446, 0.2755487025714447, 0.26140118629929165, 0.3174115824567538, 0.28643144151242317, 0.3167915992698672, 0.31620858260679485, 0.177364228104253, 0.1868990172121514, 0.19531675389263514, 0.15888042681921366, 0.16188541931961842, 0.24046600599483658, 0.21590122428988712, 0.19435828137322742, 0.1573430757740445, 0.19481679799592444, 0.17862794869132537, 0.192610638621454, 0.17589862277987844, 0.15904770405593338, 0.17005907343820403, 0.1645751284732342, 0.2129507129968622, 0.18199065286507998, 0.16979534769597926, 0.19357848469329897, 0.17574332384646663, 0.1680423509334159, 0.17370019501048428, 0.1734391914268828, 0.1624929919602358, 0.15734173919286254, 0.16062847931722046, 0.24119035373352848, 0.15553376500934668, 0.1356710431223126, 0.1658518652578871, 0.14012503648380858, 0.18620655342042713, 0.19795014485794515, 0.14773997092966706, 0.134447758766568, 0.2625306913061941, 0.1323558293175907, 0.1614351297382185, 0.16691258335466264, 0.1731857972562324, 0.21389911693352825, 0.14262962518936928, 0.104737115041029, 0.13098859012650177, 0.1651840333014899, 0.147854263655684, 0.16860327171751743, 0.1732801252200541, 0.1868922411030972, 0.17541285043675015, 0.16872355425706442, 0.16628520239490463, 0.1657204243652124, 0.061066523490270086, 0.07128965700442913, 0.06089736150378067, 0.061668187192188584, 0.06621297271827264, 0.0665789906067017, 0.054670343678471234, 0.05982422334392523, 0.07831837899140359]}, "mutation_prompt": null}
{"id": "5eb7ffad-9591-40e2-9d5a-b6f847be0888", "solution": "class DynamicMutationPSO_DE_Optimizer(PSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "DynamicMutationPSO_DE_Optimizer", "description": "Improving the update strategy by introducing a dynamic mutation factor based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "53971d4c-c9f6-4851-9ee4-dba280562834", "metadata": {"aucs": [0.8586702582011799, 0.8457639096335428, 0.8658789954402832, 0.8323853242924155, 0.8423606751913655, 0.82709914201447, 0.8565832431616702, 0.8314323668604652, 0.8503348991778986, 0.740099591235885, 0.6835292287948944, 0.7134078130220894, 0.7251622241478116, 0.7045221445542682, 0.714965042382232, 0.6995977937465847, 0.7064717294986756, 0.7223833537271721, 0.1403169274184224, 0.1250722534651446, 0.1368439875346943, 0.1165899146129874, 0.12094716174310793, 0.11277036251242045, 0.10367403439662104, 0.12384189784191257, 0.10582634153932835, 0.09993841997428787, 0.08862470403746792, 0.10402574091776373, 0.1173084227092952, 0.1108488847237099, 0.11335257946750787, 0.09661569726420804, 0.09869642970177628, 0.10552783848109504, 0.9813644682462564, 0.9706822347528498, 0.9678383713301227, 0.9709372782990355, 0.9731681536245266, 0.9638414209440009, 0.9803940945790405, 0.9725634474643554, 0.9657692574664579, 0.5550591965549112, 0.5297886458726488, 0.5549265169884461, 0.5268079467969635, 0.5238164500938888, 0.5627160047274794, 0.47587204222177115, 0.4473460930571952, 0.42069569623849135, 0.8523425708735126, 0.7103604738918126, 0.24174724041543982, 0.8197089126235211, 0.8159555169940673, 0.6695580514639702, 0.8081001931446412, 0.7263261271833483, 0.819426051032536, 0.20498586480195924, 0.25460475577198827, 0.20043559207814576, 0.5126893470687331, 0.1862688321837187, 0.2449320115910656, 0.3152028254895123, 0.24155217648570493, 0.3274943327892791, 0.17245806454755075, 0.1862162698722013, 0.16128568802581322, 0.20381340503547307, 0.35243497938645785, 0.2293489423729249, 0.26880090523815015, 0.42670107413200487, 0.17947671459591952, 0.3135631364447953, 0.34191967666107825, 0.18523577080267595, 0.2233998655916234, 0.3896950000875712, 0.08479950557735771, 0.3203084271615533, 0.09330500035180989, 0.3094806172400305, 0.407957355753674, 0.3132986764623643, 0.3811132375983425, 0.5032525566277305, 0.38423939959207165, 0.1559489678322803, 0.40867446260041584, 0.4752447957625141, 0.49790684633475724, 0.18849012714825142, 0.2009449631980469, 0.05236902686968847, 0.24721383083852033, 0.10335572683217231, 0.098196713297806, 0.18876787923045135, 0.1258376872269622, 0.10822442062756055, 0.2766719318578028, 0.37817282566196586, 0.28559537363140075, 0.3680437148566491, 0.3089086571155689, 0.26791500073057173, 0.19304587989136146, 0.3251079266655148, 0.21757146194629606, 0.7049591920521254, 0.6951266876929142, 0.63942890511772, 0.6962324322740354, 0.6395957593748165, 0.581895742033189, 0.6824398068227084, 0.7066273822617484, 0.5986280414415149, 0.12554532876288738, 0.10020134369183853, 0.10633123142991208, 0.09565710022180662, 0.09014384314075674, 0.12689644755652385, 0.12396020311331835, 0.10968173619780297, 0.10540791979658914, 0.1412755080269753, 0.14067951740970308, 0.14109912786117873, 0.14976988106900813, 0.1274317276989474, 0.12982374112413309, 0.1221870771880833, 0.13740341804713552, 0.1452812278639849, 0.3051188428330892, 0.41499801104796086, 0.4185587574950125, 0.47202243591984094, 0.4333760093387097, 0.3735961860486766, 0.4819879742747094, 0.5062036889510106, 0.448396538243222, 0.26733369909695603, 0.2519246030073695, 0.30534060169299004, 0.3351026277966732, 0.2922994720208052, 0.31677908890936857, 0.3008241558473601, 0.38316712278726195, 0.31307503839393835, 0.21834052454178743, 0.20079907061653957, 0.19992037319313738, 0.1993069356597137, 0.21860803824737973, 0.20681009413329532, 0.22061413357892157, 0.2177257601494994, 0.21004513619214515, 0.21428925755449568, 0.1951358046555135, 0.20068905569557238, 0.29014521153042927, 0.20366566785443296, 0.1963398437665821, 0.19702168925265162, 0.2111116942937189, 0.1716235990231536, 0.699305386186726, 0.3437021346740776, 0.3427872931115201, 0.8080867176969997, 0.3861792430440625, 0.5570629971233358, 0.7171928476960172, 0.3454314728286201, 0.42418502733831065, 0.6990670455642094, 0.4379552889302344, 0.1996368133708083, 0.25472963802430626, 0.28347020101656395, 0.29907735768308297, 0.25867860460913294, 0.3481506299534478, 0.3310811216577444, 0.17898191343313952, 0.17685484175970867, 0.20283217272745802, 0.18327004068837816, 0.17154127999268842, 0.18040398515449974, 0.17785843653955158, 0.17330958940205565, 0.197607490119737, 0.08670268726829922, 0.08450098129327999, 0.10371940578862271, 0.08321972858363935, 0.07986991960334267, 0.09542879519050218, 0.09849010522993362, 0.08646565320130739, 0.0899665965339087]}, "mutation_prompt": null}
{"id": "46dd7bed-8eda-4671-b85b-69ce32e41d40", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Novel mutation strategy based on population diversity\n                if np.random.rand() < 0.1:\n                    diversity_mutant = np.mean(pbest, axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    diversity_score = evaluate(diversity_mutant)\n                    if diversity_score < pbest_scores[i]:\n                        pbest[i] = diversity_mutant\n                        pbest_scores[i] = diversity_score\n                        if diversity_score < gbest_score:\n                            gbest = diversity_mutant\n                            gbest_score = diversity_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity by introducing a novel mutation strategy based on population diversity.", "configspace": "", "generation": 15, "fitness": 0.36753391895458376, "feedback": "The algorithm EnhancedDynamicMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "53971d4c-c9f6-4851-9ee4-dba280562834", "metadata": {"aucs": [0.8493999260949362, 0.8313035457232052, 0.8462281250388721, 0.8403851886979958, 0.8372625085295433, 0.8206453574469301, 0.8500856810820595, 0.8499839096179495, 0.8316971126425954, 0.6988787785073849, 0.7076914369480496, 0.6807856084663632, 0.6991450189866342, 0.6985087969865762, 0.697510587520765, 0.6814696250079424, 0.6974967380582103, 0.6789831631453505, 0.12803359202991849, 0.1242612936337355, 0.12623487207789819, 0.11608829370225682, 0.10803534188361841, 0.09634331559949882, 0.10079877127256187, 0.11037323300352397, 0.11860479442839356, 0.12183613115665504, 0.11118261859872547, 0.10188131914782717, 0.10075901878884908, 0.09772953422794928, 0.10390208506137355, 0.10384075062156461, 0.12763356192974318, 0.09630221671730776, 0.9657766758116904, 0.9806070387316017, 0.9670790582528761, 0.9611486164598195, 0.9853998930857644, 0.9758601959484613, 0.9535317518046194, 0.9837908596835795, 0.9740263272252738, 0.5435994883376927, 0.48524361390413073, 0.48755544801490336, 0.5598983013998056, 0.5054017677680237, 0.5129561739866644, 0.5003197466959972, 0.5074288346338446, 0.4799303741140767, 0.8392523523317281, 0.7758339497622764, 0.7979687101476209, 0.8911287254451327, 0.8353757564485955, 0.26647673707142083, 0.2986768438263787, 0.8144298554491555, 0.8103428083332492, 0.21729095564348422, 0.16458340974373298, 0.19687562695958605, 0.3044993040338746, 0.4240034927960218, 0.4459426171363299, 0.18144242315365122, 0.23659652954330812, 0.21245882457328846, 0.19657083045998391, 0.1952500541468003, 0.20783781053045336, 0.1766943458531527, 0.23556045392400327, 0.28916152952417973, 0.2629578217692782, 0.21615645770466285, 0.217832858076908, 0.1808730094037585, 0.0730889620702232, 0.20918856293892274, 0.40596171907280276, 0.42352559492784236, 0.2620655473058481, 0.12311522948180498, 0.3161958384819833, 0.26032545377086913, 0.23895118949217242, 0.25037038771574804, 0.3929808452669963, 0.21390239738549277, 0.45949990911454164, 0.3287950833531955, 0.34550297204051095, 0.4166339859607464, 0.33486581757997425, 0.3082689410052566, 0.15187887884241702, 0.15643614341655865, 0.1106516791475487, 0.14186740802110998, 0.11026481265983601, 0.19585603739083413, 0.17690808027974292, 0.1576507097089328, 0.4174777633047053, 0.2690516074047923, 0.2970729081326122, 0.2645591801550299, 0.39111151923123266, 0.2891272789390954, 0.31318075183342065, 0.32101233919344263, 0.15424459548724923, 0.606116053696892, 0.5035839540964824, 0.7020368833882786, 0.7506357245032613, 0.7242770506521881, 0.7512649368297756, 0.6767107136808816, 0.5973983602336346, 0.6035802003003496, 0.09104895552910053, 0.12659787277385093, 0.11005005768571485, 0.12201972441371833, 0.13547190039026902, 0.12081211714753393, 0.11961958538375062, 0.11724895867604923, 0.09832439015270189, 0.15024649997248873, 0.1838048900333562, 0.13163213886230862, 0.14507334362840996, 0.15675804619421652, 0.16286350418719409, 0.148351427509836, 0.15332271712946421, 0.14434544589220277, 0.44606217311629703, 0.3583534906525494, 0.4735789821478945, 0.450638539263857, 0.4685211750445817, 0.4558035622919263, 0.4469469338689268, 0.44818173467138844, 0.4200610993202686, 0.31518391297276827, 0.31831403522684965, 0.31369585330580096, 0.26562334736239335, 0.3469384509660469, 0.35234617706551186, 0.30745121643309203, 0.3524664314635173, 0.30674553980784847, 0.21583383805422596, 0.20638909185517618, 0.2036859812838625, 0.21655159418470293, 0.22854377719631724, 0.227698027599472, 0.21039624662913192, 0.21108323826899067, 0.25165937942416905, 0.24148393060483264, 0.19086078031494758, 0.18734188441192134, 0.19402162263980183, 0.20294356774544553, 0.18317460802449947, 0.20844660172299612, 0.20246966806823408, 0.17698679476079449, 0.4476455128923762, 0.1872151152103575, 0.5561129696284823, 0.7859119007940684, 0.413390182666599, 0.6439386698011681, 0.4738643383151512, 0.6452523369518373, 0.20207069210756357, 0.7897195616109345, 0.6351278349044953, 0.6932825697674032, 0.2581459823207166, 0.166128195118447, 0.20697426180383327, 0.43671437218371834, 0.4994393966120171, 0.6460917268676118, 0.20564117147038474, 0.19102180473034347, 0.1799527802940709, 0.18651635291489188, 0.17542114972480283, 0.18842241819145988, 0.18903663808352178, 0.1871570828533704, 0.18346693550315663, 0.08752896077531092, 0.0839671857655081, 0.07950305210549247, 0.0880866611639114, 0.08543376721929541, 0.09239762205455149, 0.0883813305822636, 0.08932311320140818, 0.08484386513753339]}, "mutation_prompt": null}
{"id": "1efd717b-bbd2-4765-9ec9-aafeb980cca0", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Novel mutation strategy based on population diversity\n                if np.random.rand() < 0.1:\n                    diversity_mutant = np.mean(pbest, axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    diversity_score = evaluate(diversity_mutant)\n                    if diversity_score < pbest_scores[i]:\n                        pbest[i] = diversity_mutant\n                        pbest_scores[i] = diversity_score\n                        if diversity_score < gbest_score:\n                            gbest = diversity_mutant\n                            gbest_score = diversity_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity by introducing a novel mutation strategy based on population diversity.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "46dd7bed-8eda-4671-b85b-69ce32e41d40", "metadata": {"aucs": [0.8493999260949362, 0.8313035457232052, 0.8462281250388721, 0.8403851886979958, 0.8372625085295433, 0.8206453574469301, 0.8500856810820595, 0.8499839096179495, 0.8316971126425954, 0.6988787785073849, 0.7076914369480496, 0.6807856084663632, 0.6991450189866342, 0.6985087969865762, 0.697510587520765, 0.6814696250079424, 0.6974967380582103, 0.6789831631453505, 0.12803359202991849, 0.1242612936337355, 0.12623487207789819, 0.11608829370225682, 0.10803534188361841, 0.09634331559949882, 0.10079877127256187, 0.11037323300352397, 0.11860479442839356, 0.12183613115665504, 0.11118261859872547, 0.10188131914782717, 0.10075901878884908, 0.09772953422794928, 0.10390208506137355, 0.10384075062156461, 0.12763356192974318, 0.09630221671730776, 0.9657766758116904, 0.9806070387316017, 0.9670790582528761, 0.9611486164598195, 0.9853998930857644, 0.9758601959484613, 0.9535317518046194, 0.9837908596835795, 0.9740263272252738, 0.5435994883376927, 0.48524361390413073, 0.48755544801490336, 0.5598983013998056, 0.5054017677680237, 0.5129561739866644, 0.5003197466959972, 0.5074288346338446, 0.4799303741140767, 0.8392523523317281, 0.7758339497622764, 0.7979687101476209, 0.8911287254451327, 0.8353757564485955, 0.26647673707142083, 0.2986768438263787, 0.8144298554491555, 0.8103428083332492, 0.21729095564348422, 0.16458340974373298, 0.19687562695958605, 0.3044993040338746, 0.4240034927960218, 0.4459426171363299, 0.18144242315365122, 0.23659652954330812, 0.21245882457328846, 0.19657083045998391, 0.1952500541468003, 0.20783781053045336, 0.1766943458531527, 0.23556045392400327, 0.28916152952417973, 0.2629578217692782, 0.21615645770466285, 0.217832858076908, 0.1808730094037585, 0.0730889620702232, 0.20918856293892274, 0.40596171907280276, 0.42352559492784236, 0.2620655473058481, 0.12311522948180498, 0.3161958384819833, 0.26032545377086913, 0.23895118949217242, 0.25037038771574804, 0.3929808452669963, 0.21390239738549277, 0.45949990911454164, 0.3287950833531955, 0.34550297204051095, 0.4166339859607464, 0.33486581757997425, 0.3082689410052566, 0.15187887884241702, 0.15643614341655865, 0.1106516791475487, 0.14186740802110998, 0.11026481265983601, 0.19585603739083413, 0.17690808027974292, 0.1576507097089328, 0.4174777633047053, 0.2690516074047923, 0.2970729081326122, 0.2645591801550299, 0.39111151923123266, 0.2891272789390954, 0.31318075183342065, 0.32101233919344263, 0.15424459548724923, 0.606116053696892, 0.5035839540964824, 0.7020368833882786, 0.7506357245032613, 0.7242770506521881, 0.7512649368297756, 0.6767107136808816, 0.5973983602336346, 0.6035802003003496, 0.09104895552910053, 0.12659787277385093, 0.11005005768571485, 0.12201972441371833, 0.13547190039026902, 0.12081211714753393, 0.11961958538375062, 0.11724895867604923, 0.09832439015270189, 0.15024649997248873, 0.1838048900333562, 0.13163213886230862, 0.14507334362840996, 0.15675804619421652, 0.16286350418719409, 0.148351427509836, 0.15332271712946421, 0.14434544589220277, 0.44606217311629703, 0.3583534906525494, 0.4735789821478945, 0.450638539263857, 0.4685211750445817, 0.4558035622919263, 0.4469469338689268, 0.44818173467138844, 0.4200610993202686, 0.31518391297276827, 0.31831403522684965, 0.31369585330580096, 0.26562334736239335, 0.3469384509660469, 0.35234617706551186, 0.30745121643309203, 0.3524664314635173, 0.30674553980784847, 0.21583383805422596, 0.20638909185517618, 0.2036859812838625, 0.21655159418470293, 0.22854377719631724, 0.227698027599472, 0.21039624662913192, 0.21108323826899067, 0.25165937942416905, 0.24148393060483264, 0.19086078031494758, 0.18734188441192134, 0.19402162263980183, 0.20294356774544553, 0.18317460802449947, 0.20844660172299612, 0.20246966806823408, 0.17698679476079449, 0.4476455128923762, 0.1872151152103575, 0.5561129696284823, 0.7859119007940684, 0.413390182666599, 0.6439386698011681, 0.4738643383151512, 0.6452523369518373, 0.20207069210756357, 0.7897195616109345, 0.6351278349044953, 0.6932825697674032, 0.2581459823207166, 0.166128195118447, 0.20697426180383327, 0.43671437218371834, 0.4994393966120171, 0.6460917268676118, 0.20564117147038474, 0.19102180473034347, 0.1799527802940709, 0.18651635291489188, 0.17542114972480283, 0.18842241819145988, 0.18903663808352178, 0.1871570828533704, 0.18346693550315663, 0.08752896077531092, 0.0839671857655081, 0.07950305210549247, 0.0880866611639114, 0.08543376721929541, 0.09239762205455149, 0.0883813305822636, 0.08932311320140818, 0.08484386513753339]}, "mutation_prompt": null}
{"id": "ee25b252-3344-496a-9b4e-89149a6d5c00", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    diversity_mutant = np.mean(pbest, axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    diversity_score = evaluate(diversity_mutant)\n                    if diversity_score < pbest_scores[i]:\n                        pbest[i] = diversity_mutant\n                        pbest_scores[i] = diversity_score\n                        if diversity_score < gbest_score:\n                            gbest = diversity_mutant\n                            gbest_score = diversity_score\n                \n                # Dynamic adjustment of mutation based on individual performance\n                if np.random.rand() < 0.1:\n                    performance_mutant = pbest[i] + np.random.normal(0, 0.1, size=self.dim)\n                    performance_score = evaluate(performance_mutant)\n                    if performance_score < pbest_scores[i]:\n                        pbest[i] = performance_mutant\n                        pbest_scores[i] = performance_score\n                        if performance_score < gbest_score:\n                            gbest = performance_mutant\n                            gbest_score = performance_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Adding a dynamic parameter adjustment mechanism based on individual performance to enhance convergence speed.", "configspace": "", "generation": 17, "fitness": 0.3596097475189567, "feedback": "The algorithm EnhancedDynamicMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "46dd7bed-8eda-4671-b85b-69ce32e41d40", "metadata": {"aucs": [0.8440339395242581, 0.8261650373919811, 0.8467997829594274, 0.8115726833608718, 0.8312385917049459, 0.8274220247539894, 0.8357810841113581, 0.8389934723263609, 0.8266063128726608, 0.6677069132641309, 0.663915072539473, 0.6861238471674307, 0.6572256064509563, 0.6756082526307491, 0.6800494352502799, 0.6565532688081728, 0.6717086032273558, 0.6734633305670052, 0.10848898956359643, 0.11537981089168658, 0.12769093295302703, 0.10367903807947842, 0.13326842794400695, 0.15514702763026467, 0.12270371099518873, 0.1312435656555455, 0.10212422438811342, 0.1025185847784249, 0.11240326877398532, 0.10031187478184311, 0.10573773406870168, 0.10764156322827889, 0.08879345066585209, 0.14956660457233517, 0.09733439988302339, 0.10439183479254077, 0.9593216000118856, 0.9666636200911135, 0.9638448097123329, 0.9555536969262495, 0.9678351323456689, 0.947916460697948, 0.953181633296166, 0.9562597424027208, 0.9858880338613198, 0.5087626881313166, 0.5137045037219308, 0.537998060027937, 0.5453696886922542, 0.4540772900867668, 0.5185237050818299, 0.5274893581829554, 0.4421039015535929, 0.48470010314749623, 0.7811467500034421, 0.6349663745340479, 0.5144264160605121, 0.8437623761183903, 0.8020813144983533, 0.7526928256674457, 0.6975075746515154, 0.7377990379304199, 0.6704914899511463, 0.23409850355944573, 0.1920648081184172, 0.20999258996440406, 0.30448522527135125, 0.4041031261214132, 0.4122598149502733, 0.23169250021714927, 0.2277181300362181, 0.20144671540080816, 0.1927957031329237, 0.22644608565922442, 0.2016883273935801, 0.2374560133131136, 0.2848425984177887, 0.18650673277145102, 0.2229016610249065, 0.2093442659592667, 0.16957178351429825, 0.34562664455755165, 0.3242935340620302, 0.19291547584338775, 0.26203332779102506, 0.1272123076618492, 0.20331615762444633, 0.21497361079835398, 0.23491357297882987, 0.29241875282909013, 0.4296456085097392, 0.3520155121762436, 0.4656165751533303, 0.17829419287263826, 0.218176946243416, 0.33520682386387446, 0.4686136903364375, 0.3885602750558478, 0.4152927412733801, 0.2327477481121587, 0.08180845092696876, 0.13694962226249585, 0.08123736419516514, 0.11993935050229243, 0.12928403311198766, 0.09112118673510139, 0.16701425425602334, 0.08007991785054824, 0.20101794972705023, 0.31130500822303575, 0.36520182376703514, 0.26260614450670505, 0.3475610345886285, 0.24917466337170957, 0.289204567335656, 0.20979268489844938, 0.2397718001212682, 0.6791550183506817, 0.6444905551634658, 0.6949508035005192, 0.6734203596513713, 0.7204656710453641, 0.7452841155171763, 0.6985701075309673, 0.5888178281792071, 0.6179461987016115, 0.10820971948968583, 0.1291760797977486, 0.11150456720241231, 0.11343477494974363, 0.11562154689328241, 0.11433042087235867, 0.12217022531835042, 0.1299532427487562, 0.11002622786236005, 0.16741619488608506, 0.19287009442695258, 0.23495893939072243, 0.16591284690683972, 0.19300931029971158, 0.1940270412410049, 0.17038359557763938, 0.17569869748224154, 0.1598883556719669, 0.4368687089598807, 0.40536126258173477, 0.45426686855285847, 0.4254627971355568, 0.4271853997611057, 0.376979926154404, 0.41172984198076024, 0.47126607055611247, 0.46187442181253036, 0.2852538478721238, 0.30808542304207154, 0.3139526386117091, 0.3345720839665308, 0.36003424500840353, 0.2719399060166303, 0.2880861729052703, 0.33704045310340425, 0.33847503721502425, 0.2219096583093335, 0.22375240373422078, 0.2089072293362969, 0.22127227257588278, 0.22147648693908106, 0.22997260082789306, 0.2090367031616276, 0.23517360109426, 0.20556401012162218, 0.19508938114273433, 0.1982794146274225, 0.19111107015614426, 0.19900186071878023, 0.21444685771526295, 0.2032414730797243, 0.18677162930200197, 0.1985855681664187, 0.23029144522704648, 0.18828138506727676, 0.1839403260579603, 0.6308658364975726, 0.8377809442904507, 0.40617448393064437, 0.38621934074305, 0.1626542238349843, 0.32375407812915336, 0.5400776984604393, 0.8545691930726484, 0.519200063138956, 0.47298302053340424, 0.17966817303971727, 0.30967039445834044, 0.2517942684671086, 0.16622298049650053, 0.5074668547399952, 0.4238926227217271, 0.1830604076777308, 0.18876039100813757, 0.18854986274987673, 0.17994085179685448, 0.1857459998195009, 0.17053689225781687, 0.19328331763684448, 0.17901196031191102, 0.18844516545322088, 0.10825362507535452, 0.08150663584211526, 0.0826226537474678, 0.08372285519875733, 0.09354529092762387, 0.09579197509070436, 0.07706936961090505, 0.08318298643057154, 0.08562959675539183]}, "mutation_prompt": null}
{"id": "96bb5cce-a0b4-4175-b8dd-d7b2451101b3", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Novel mutation strategy based on population diversity\n                if np.random.rand() < 0.1:\n                    diversity_mutant = np.mean(pbest, axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    diversity_score = evaluate(diversity_mutant)\n                    if diversity_score < pbest_scores[i]:\n                        pbest[i] = diversity_mutant\n                        pbest_scores[i] = diversity_score\n                        if diversity_score < gbest_score:\n                            gbest = diversity_mutant\n                            gbest_score = diversity_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity by introducing a novel mutation strategy based on population diversity.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "46dd7bed-8eda-4671-b85b-69ce32e41d40", "metadata": {"aucs": [0.8493999260949362, 0.8313035457232052, 0.8462281250388721, 0.8403851886979958, 0.8372625085295433, 0.8206453574469301, 0.8500856810820595, 0.8499839096179495, 0.8316971126425954, 0.6988787785073849, 0.7076914369480496, 0.6807856084663632, 0.6991450189866342, 0.6985087969865762, 0.697510587520765, 0.6814696250079424, 0.6974967380582103, 0.6789831631453505, 0.12803359202991849, 0.1242612936337355, 0.12623487207789819, 0.11608829370225682, 0.10803534188361841, 0.09634331559949882, 0.10079877127256187, 0.11037323300352397, 0.11860479442839356, 0.12183613115665504, 0.11118261859872547, 0.10188131914782717, 0.10075901878884908, 0.09772953422794928, 0.10390208506137355, 0.10384075062156461, 0.12763356192974318, 0.09630221671730776, 0.9657766758116904, 0.9806070387316017, 0.9670790582528761, 0.9611486164598195, 0.9853998930857644, 0.9758601959484613, 0.9535317518046194, 0.9837908596835795, 0.9740263272252738, 0.5435994883376927, 0.48524361390413073, 0.48755544801490336, 0.5598983013998056, 0.5054017677680237, 0.5129561739866644, 0.5003197466959972, 0.5074288346338446, 0.4799303741140767, 0.8392523523317281, 0.7758339497622764, 0.7979687101476209, 0.8911287254451327, 0.8353757564485955, 0.26647673707142083, 0.2986768438263787, 0.8144298554491555, 0.8103428083332492, 0.21729095564348422, 0.16458340974373298, 0.19687562695958605, 0.3044993040338746, 0.4240034927960218, 0.4459426171363299, 0.18144242315365122, 0.23659652954330812, 0.21245882457328846, 0.19657083045998391, 0.1952500541468003, 0.20783781053045336, 0.1766943458531527, 0.23556045392400327, 0.28916152952417973, 0.2629578217692782, 0.21615645770466285, 0.217832858076908, 0.1808730094037585, 0.0730889620702232, 0.20918856293892274, 0.40596171907280276, 0.42352559492784236, 0.2620655473058481, 0.12311522948180498, 0.3161958384819833, 0.26032545377086913, 0.23895118949217242, 0.25037038771574804, 0.3929808452669963, 0.21390239738549277, 0.45949990911454164, 0.3287950833531955, 0.34550297204051095, 0.4166339859607464, 0.33486581757997425, 0.3082689410052566, 0.15187887884241702, 0.15643614341655865, 0.1106516791475487, 0.14186740802110998, 0.11026481265983601, 0.19585603739083413, 0.17690808027974292, 0.1576507097089328, 0.4174777633047053, 0.2690516074047923, 0.2970729081326122, 0.2645591801550299, 0.39111151923123266, 0.2891272789390954, 0.31318075183342065, 0.32101233919344263, 0.15424459548724923, 0.606116053696892, 0.5035839540964824, 0.7020368833882786, 0.7506357245032613, 0.7242770506521881, 0.7512649368297756, 0.6767107136808816, 0.5973983602336346, 0.6035802003003496, 0.09104895552910053, 0.12659787277385093, 0.11005005768571485, 0.12201972441371833, 0.13547190039026902, 0.12081211714753393, 0.11961958538375062, 0.11724895867604923, 0.09832439015270189, 0.15024649997248873, 0.1838048900333562, 0.13163213886230862, 0.14507334362840996, 0.15675804619421652, 0.16286350418719409, 0.148351427509836, 0.15332271712946421, 0.14434544589220277, 0.44606217311629703, 0.3583534906525494, 0.4735789821478945, 0.450638539263857, 0.4685211750445817, 0.4558035622919263, 0.4469469338689268, 0.44818173467138844, 0.4200610993202686, 0.31518391297276827, 0.31831403522684965, 0.31369585330580096, 0.26562334736239335, 0.3469384509660469, 0.35234617706551186, 0.30745121643309203, 0.3524664314635173, 0.30674553980784847, 0.21583383805422596, 0.20638909185517618, 0.2036859812838625, 0.21655159418470293, 0.22854377719631724, 0.227698027599472, 0.21039624662913192, 0.21108323826899067, 0.25165937942416905, 0.24148393060483264, 0.19086078031494758, 0.18734188441192134, 0.19402162263980183, 0.20294356774544553, 0.18317460802449947, 0.20844660172299612, 0.20246966806823408, 0.17698679476079449, 0.4476455128923762, 0.1872151152103575, 0.5561129696284823, 0.7859119007940684, 0.413390182666599, 0.6439386698011681, 0.4738643383151512, 0.6452523369518373, 0.20207069210756357, 0.7897195616109345, 0.6351278349044953, 0.6932825697674032, 0.2581459823207166, 0.166128195118447, 0.20697426180383327, 0.43671437218371834, 0.4994393966120171, 0.6460917268676118, 0.20564117147038474, 0.19102180473034347, 0.1799527802940709, 0.18651635291489188, 0.17542114972480283, 0.18842241819145988, 0.18903663808352178, 0.1871570828533704, 0.18346693550315663, 0.08752896077531092, 0.0839671857655081, 0.07950305210549247, 0.0880866611639114, 0.08543376721929541, 0.09239762205455149, 0.0883813305822636, 0.08932311320140818, 0.08484386513753339]}, "mutation_prompt": null}
{"id": "25253f4d-d3c8-4fb2-98b1-8a4d7fb2bd91", "solution": "class AdaptiveMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)  # Adaptive mutation rate\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Novel mutation strategy based on population diversity\n                if np.random.rand() < 0.1:\n                    diversity_mutant = np.mean(pbest, axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    diversity_score = evaluate(diversity_mutant)\n                    if diversity_score < pbest_scores[i]:\n                        pbest[i] = diversity_mutant\n                        pbest_scores[i] = diversity_score\n                        if diversity_score < gbest_score:\n                            gbest = diversity_mutant\n                            gbest_score = diversity_score\n        \n        return gbest", "name": "AdaptiveMutationPSO_DE_Optimizer", "description": "Enhancing population diversity through adaptive mutation rates based on individual performance.", "configspace": "", "generation": 19, "fitness": 0.36753391895458376, "feedback": "The algorithm AdaptiveMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "46dd7bed-8eda-4671-b85b-69ce32e41d40", "metadata": {"aucs": [0.8493999260949362, 0.8313035457232052, 0.8462281250388721, 0.8403851886979958, 0.8372625085295433, 0.8206453574469301, 0.8500856810820595, 0.8499839096179495, 0.8316971126425954, 0.6988787785073849, 0.7076914369480496, 0.6807856084663632, 0.6991450189866342, 0.6985087969865762, 0.697510587520765, 0.6814696250079424, 0.6974967380582103, 0.6789831631453505, 0.12803359202991849, 0.1242612936337355, 0.12623487207789819, 0.11608829370225682, 0.10803534188361841, 0.09634331559949882, 0.10079877127256187, 0.11037323300352397, 0.11860479442839356, 0.12183613115665504, 0.11118261859872547, 0.10188131914782717, 0.10075901878884908, 0.09772953422794928, 0.10390208506137355, 0.10384075062156461, 0.12763356192974318, 0.09630221671730776, 0.9657766758116904, 0.9806070387316017, 0.9670790582528761, 0.9611486164598195, 0.9853998930857644, 0.9758601959484613, 0.9535317518046194, 0.9837908596835795, 0.9740263272252738, 0.5435994883376927, 0.48524361390413073, 0.48755544801490336, 0.5598983013998056, 0.5054017677680237, 0.5129561739866644, 0.5003197466959972, 0.5074288346338446, 0.4799303741140767, 0.8392523523317281, 0.7758339497622764, 0.7979687101476209, 0.8911287254451327, 0.8353757564485955, 0.26647673707142083, 0.2986768438263787, 0.8144298554491555, 0.8103428083332492, 0.21729095564348422, 0.16458340974373298, 0.19687562695958605, 0.3044993040338746, 0.4240034927960218, 0.4459426171363299, 0.18144242315365122, 0.23659652954330812, 0.21245882457328846, 0.19657083045998391, 0.1952500541468003, 0.20783781053045336, 0.1766943458531527, 0.23556045392400327, 0.28916152952417973, 0.2629578217692782, 0.21615645770466285, 0.217832858076908, 0.1808730094037585, 0.0730889620702232, 0.20918856293892274, 0.40596171907280276, 0.42352559492784236, 0.2620655473058481, 0.12311522948180498, 0.3161958384819833, 0.26032545377086913, 0.23895118949217242, 0.25037038771574804, 0.3929808452669963, 0.21390239738549277, 0.45949990911454164, 0.3287950833531955, 0.34550297204051095, 0.4166339859607464, 0.33486581757997425, 0.3082689410052566, 0.15187887884241702, 0.15643614341655865, 0.1106516791475487, 0.14186740802110998, 0.11026481265983601, 0.19585603739083413, 0.17690808027974292, 0.1576507097089328, 0.4174777633047053, 0.2690516074047923, 0.2970729081326122, 0.2645591801550299, 0.39111151923123266, 0.2891272789390954, 0.31318075183342065, 0.32101233919344263, 0.15424459548724923, 0.606116053696892, 0.5035839540964824, 0.7020368833882786, 0.7506357245032613, 0.7242770506521881, 0.7512649368297756, 0.6767107136808816, 0.5973983602336346, 0.6035802003003496, 0.09104895552910053, 0.12659787277385093, 0.11005005768571485, 0.12201972441371833, 0.13547190039026902, 0.12081211714753393, 0.11961958538375062, 0.11724895867604923, 0.09832439015270189, 0.15024649997248873, 0.1838048900333562, 0.13163213886230862, 0.14507334362840996, 0.15675804619421652, 0.16286350418719409, 0.148351427509836, 0.15332271712946421, 0.14434544589220277, 0.44606217311629703, 0.3583534906525494, 0.4735789821478945, 0.450638539263857, 0.4685211750445817, 0.4558035622919263, 0.4469469338689268, 0.44818173467138844, 0.4200610993202686, 0.31518391297276827, 0.31831403522684965, 0.31369585330580096, 0.26562334736239335, 0.3469384509660469, 0.35234617706551186, 0.30745121643309203, 0.3524664314635173, 0.30674553980784847, 0.21583383805422596, 0.20638909185517618, 0.2036859812838625, 0.21655159418470293, 0.22854377719631724, 0.227698027599472, 0.21039624662913192, 0.21108323826899067, 0.25165937942416905, 0.24148393060483264, 0.19086078031494758, 0.18734188441192134, 0.19402162263980183, 0.20294356774544553, 0.18317460802449947, 0.20844660172299612, 0.20246966806823408, 0.17698679476079449, 0.4476455128923762, 0.1872151152103575, 0.5561129696284823, 0.7859119007940684, 0.413390182666599, 0.6439386698011681, 0.4738643383151512, 0.6452523369518373, 0.20207069210756357, 0.7897195616109345, 0.6351278349044953, 0.6932825697674032, 0.2581459823207166, 0.166128195118447, 0.20697426180383327, 0.43671437218371834, 0.4994393966120171, 0.6460917268676118, 0.20564117147038474, 0.19102180473034347, 0.1799527802940709, 0.18651635291489188, 0.17542114972480283, 0.18842241819145988, 0.18903663808352178, 0.1871570828533704, 0.18346693550315663, 0.08752896077531092, 0.0839671857655081, 0.07950305210549247, 0.0880866611639114, 0.08543376721929541, 0.09239762205455149, 0.0883813305822636, 0.08932311320140818, 0.08484386513753339]}, "mutation_prompt": null}
{"id": "cf3f70a1-24f8-4257-9d99-5167937d7eb1", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Novel mutation strategy based on population diversity\n                if np.random.rand() < 0.1:\n                    diversity_mutant = np.mean(pbest, axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    diversity_score = evaluate(diversity_mutant)\n                    if diversity_score < pbest_scores[i]:\n                        pbest[i] = diversity_mutant\n                        pbest_scores[i] = diversity_score\n                        if diversity_score < gbest_score:\n                            gbest = diversity_mutant\n                            gbest_score = diversity_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity by introducing a novel mutation strategy based on population diversity.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "46dd7bed-8eda-4671-b85b-69ce32e41d40", "metadata": {"aucs": [0.8493999260949362, 0.8313035457232052, 0.8462281250388721, 0.8403851886979958, 0.8372625085295433, 0.8206453574469301, 0.8500856810820595, 0.8499839096179495, 0.8316971126425954, 0.6988787785073849, 0.7076914369480496, 0.6807856084663632, 0.6991450189866342, 0.6985087969865762, 0.697510587520765, 0.6814696250079424, 0.6974967380582103, 0.6789831631453505, 0.12803359202991849, 0.1242612936337355, 0.12623487207789819, 0.11608829370225682, 0.10803534188361841, 0.09634331559949882, 0.10079877127256187, 0.11037323300352397, 0.11860479442839356, 0.12183613115665504, 0.11118261859872547, 0.10188131914782717, 0.10075901878884908, 0.09772953422794928, 0.10390208506137355, 0.10384075062156461, 0.12763356192974318, 0.09630221671730776, 0.9657766758116904, 0.9806070387316017, 0.9670790582528761, 0.9611486164598195, 0.9853998930857644, 0.9758601959484613, 0.9535317518046194, 0.9837908596835795, 0.9740263272252738, 0.5435994883376927, 0.48524361390413073, 0.48755544801490336, 0.5598983013998056, 0.5054017677680237, 0.5129561739866644, 0.5003197466959972, 0.5074288346338446, 0.4799303741140767, 0.8392523523317281, 0.7758339497622764, 0.7979687101476209, 0.8911287254451327, 0.8353757564485955, 0.26647673707142083, 0.2986768438263787, 0.8144298554491555, 0.8103428083332492, 0.21729095564348422, 0.16458340974373298, 0.19687562695958605, 0.3044993040338746, 0.4240034927960218, 0.4459426171363299, 0.18144242315365122, 0.23659652954330812, 0.21245882457328846, 0.19657083045998391, 0.1952500541468003, 0.20783781053045336, 0.1766943458531527, 0.23556045392400327, 0.28916152952417973, 0.2629578217692782, 0.21615645770466285, 0.217832858076908, 0.1808730094037585, 0.0730889620702232, 0.20918856293892274, 0.40596171907280276, 0.42352559492784236, 0.2620655473058481, 0.12311522948180498, 0.3161958384819833, 0.26032545377086913, 0.23895118949217242, 0.25037038771574804, 0.3929808452669963, 0.21390239738549277, 0.45949990911454164, 0.3287950833531955, 0.34550297204051095, 0.4166339859607464, 0.33486581757997425, 0.3082689410052566, 0.15187887884241702, 0.15643614341655865, 0.1106516791475487, 0.14186740802110998, 0.11026481265983601, 0.19585603739083413, 0.17690808027974292, 0.1576507097089328, 0.4174777633047053, 0.2690516074047923, 0.2970729081326122, 0.2645591801550299, 0.39111151923123266, 0.2891272789390954, 0.31318075183342065, 0.32101233919344263, 0.15424459548724923, 0.606116053696892, 0.5035839540964824, 0.7020368833882786, 0.7506357245032613, 0.7242770506521881, 0.7512649368297756, 0.6767107136808816, 0.5973983602336346, 0.6035802003003496, 0.09104895552910053, 0.12659787277385093, 0.11005005768571485, 0.12201972441371833, 0.13547190039026902, 0.12081211714753393, 0.11961958538375062, 0.11724895867604923, 0.09832439015270189, 0.15024649997248873, 0.1838048900333562, 0.13163213886230862, 0.14507334362840996, 0.15675804619421652, 0.16286350418719409, 0.148351427509836, 0.15332271712946421, 0.14434544589220277, 0.44606217311629703, 0.3583534906525494, 0.4735789821478945, 0.450638539263857, 0.4685211750445817, 0.4558035622919263, 0.4469469338689268, 0.44818173467138844, 0.4200610993202686, 0.31518391297276827, 0.31831403522684965, 0.31369585330580096, 0.26562334736239335, 0.3469384509660469, 0.35234617706551186, 0.30745121643309203, 0.3524664314635173, 0.30674553980784847, 0.21583383805422596, 0.20638909185517618, 0.2036859812838625, 0.21655159418470293, 0.22854377719631724, 0.227698027599472, 0.21039624662913192, 0.21108323826899067, 0.25165937942416905, 0.24148393060483264, 0.19086078031494758, 0.18734188441192134, 0.19402162263980183, 0.20294356774544553, 0.18317460802449947, 0.20844660172299612, 0.20246966806823408, 0.17698679476079449, 0.4476455128923762, 0.1872151152103575, 0.5561129696284823, 0.7859119007940684, 0.413390182666599, 0.6439386698011681, 0.4738643383151512, 0.6452523369518373, 0.20207069210756357, 0.7897195616109345, 0.6351278349044953, 0.6932825697674032, 0.2581459823207166, 0.166128195118447, 0.20697426180383327, 0.43671437218371834, 0.4994393966120171, 0.6460917268676118, 0.20564117147038474, 0.19102180473034347, 0.1799527802940709, 0.18651635291489188, 0.17542114972480283, 0.18842241819145988, 0.18903663808352178, 0.1871570828533704, 0.18346693550315663, 0.08752896077531092, 0.0839671857655081, 0.07950305210549247, 0.0880866611639114, 0.08543376721929541, 0.09239762205455149, 0.0883813305822636, 0.08932311320140818, 0.08484386513753339]}, "mutation_prompt": null}
{"id": "7fa97103-5c3c-47a3-bbb6-a9191b388ac5", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        mutation_factors = np.random.normal(self.mutation_factor, 0.1, self.swarm_size)\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(mutation_factors[i], 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    diversity_mutant = np.mean(pbest, axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    diversity_score = evaluate(diversity_mutant)\n                    if diversity_score < pbest_scores[i]:\n                        pbest[i] = diversity_mutant\n                        pbest_scores[i] = diversity_score\n                        if diversity_score < gbest_score:\n                            gbest = diversity_mutant\n                            gbest_score = diversity_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Introducing a self-adaptive mutation strategy based on individual performance to enhance convergence and exploitation.", "configspace": "", "generation": 21, "fitness": 0.35787015438769143, "feedback": "The algorithm EnhancedDynamicMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.26.", "error": "", "parent_id": "46dd7bed-8eda-4671-b85b-69ce32e41d40", "metadata": {"aucs": [0.8481224316382485, 0.8454868585832112, 0.8552006766997826, 0.8172152373483825, 0.8311202708171038, 0.8331730651276927, 0.8250477906358398, 0.8226666934135869, 0.851013505736073, 0.690839484723142, 0.6972920925578883, 0.677787852668067, 0.7098602643265655, 0.691156089252748, 0.6772492494635587, 0.6665912506302325, 0.6661428773149717, 0.6945753224119705, 0.12552363771624153, 0.12185568499884158, 0.10688039795287496, 0.11154661193173177, 0.10539655051014396, 0.11501726237634735, 0.11069574035724727, 0.12559223214783688, 0.10171072255764102, 0.12230925333803477, 0.08561516729654961, 0.09846080132310597, 0.09479537080278166, 0.0871259469772645, 0.0978841616582109, 0.08728817273393308, 0.11414937550033444, 0.1053488352855928, 0.9647076335256232, 0.9712162802282739, 0.975640871422087, 0.9866638116821593, 0.9720731708486146, 0.9639005478183639, 0.9722639442711596, 0.966192887065154, 0.9604456111570926, 0.5499005365511445, 0.5291049487734358, 0.459635573038907, 0.5545691175059317, 0.4871680505924608, 0.529554626165727, 0.4886349556100358, 0.5006318198073872, 0.4491239618725955, 0.8126011406680729, 0.38817636794412214, 0.5768260509614231, 0.5701773895516626, 0.8243834799928687, 0.7172446000733123, 0.7596402399924628, 0.7078588527301226, 0.8001924380244152, 0.25161858361289324, 0.17637663889609245, 0.15360841678371384, 0.27310194366642104, 0.16544703416615447, 0.1826871990966853, 0.2342665289548853, 0.3242181377564811, 0.32499575353895194, 0.22287238720073232, 0.17337211083072857, 0.20405846227016944, 0.2227618516308879, 0.1996441459374455, 0.19098604794123908, 0.19843192236105556, 0.3826588301020154, 0.20894428258682296, 0.39871489759997125, 0.23016023581320044, 0.3097921484686469, 0.2450742513139521, 0.33350811504239086, 0.1650068206023909, 0.10221228699929363, 0.13941350286845533, 0.16964532529186127, 0.4578878779812512, 0.2111698173483465, 0.43892822660996245, 0.38019439240277275, 0.2823344650567867, 0.2313593128106627, 0.5878856195253996, 0.6051880411317975, 0.43115355682069645, 0.15690438180881505, 0.1714910936803381, 0.1546508600513049, 0.040924791804457517, 0.11556839265995822, 0.26213307586040846, 0.14713760824133804, 0.08565943179458624, 0.08943369621273034, 0.2271108704185072, 0.26802740347257537, 0.308826486741941, 0.22559995759530782, 0.263944031156251, 0.331107782433933, 0.2946419557863055, 0.36653343554986606, 0.19440646549898621, 0.6824531537081351, 0.6460075952160281, 0.7496877531421687, 0.6192545641609148, 0.6317711484066793, 0.7804649481944033, 0.6428378161552342, 0.6924999594755153, 0.5801367198780436, 0.10989571129283193, 0.10832975671314249, 0.08834102066719662, 0.10746360163671365, 0.09206692832920671, 0.10447378181893563, 0.09243994535159161, 0.13077265387603532, 0.09498581707218057, 0.14534836708847743, 0.1409062433021685, 0.13085993752151148, 0.12675397868396943, 0.14521912440940488, 0.17148642097393618, 0.12632624758238398, 0.13612589004147446, 0.13612325579247986, 0.3169000809562209, 0.4114895930368282, 0.41919246836450574, 0.4248451169386389, 0.39800729454568284, 0.3967565055235931, 0.4363790985163575, 0.4435874758139613, 0.4064293536919784, 0.3009697946433102, 0.31163741598852623, 0.28495917254181535, 0.31203557490627076, 0.3035950708704318, 0.32427462622381586, 0.32074889589718636, 0.2860993702749055, 0.31654875620736633, 0.22202967657607053, 0.20301858587658694, 0.21664044707690777, 0.21844403589085237, 0.2138620884532435, 0.26473086076743024, 0.207092533910898, 0.2129347377710612, 0.2518339163299912, 0.20995456963245884, 0.20712348355529098, 0.18558661458541015, 0.20362675402939034, 0.19578919319578847, 0.2041815113358354, 0.19095549046370497, 0.25703638034514376, 0.18803850381932152, 0.18493167523990028, 0.18636341351249375, 0.600044600284013, 0.708756367921062, 0.721457944151134, 0.5579545260363035, 0.34230547146635104, 0.16581336961613047, 0.7218323845464367, 0.7794093874698376, 0.18619148893879822, 0.7094736382062303, 0.16932639056448728, 0.37282160288449806, 0.22463113729550577, 0.28781848771742624, 0.18794232405299904, 0.7436735311978959, 0.18115460866424205, 0.18117344465143115, 0.18306201690731305, 0.1770095738659465, 0.1756799672017182, 0.1720003493482909, 0.19815481238049237, 0.17485092829482696, 0.194393265739357, 0.09873437006658425, 0.07199300799086072, 0.08367177053364627, 0.08650353076458728, 0.08510682435572503, 0.09451268258548118, 0.07774680660011979, 0.0852360263473807, 0.07780749281707378]}, "mutation_prompt": null}
{"id": "fd123c4f-7297-410f-9a39-4baad12d2b7d", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Novel mutation strategy based on population diversity\n                if np.random.rand() < 0.1:\n                    diversity_mutant = np.mean(pbest, axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    diversity_score = evaluate(diversity_mutant)\n                    if diversity_score < pbest_scores[i]:\n                        pbest[i] = diversity_mutant\n                        pbest_scores[i] = diversity_score\n                        if diversity_score < gbest_score:\n                            gbest = diversity_mutant\n                            gbest_score = diversity_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity by introducing a novel mutation strategy based on population diversity.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "46dd7bed-8eda-4671-b85b-69ce32e41d40", "metadata": {"aucs": [0.8493999260949362, 0.8313035457232052, 0.8462281250388721, 0.8403851886979958, 0.8372625085295433, 0.8206453574469301, 0.8500856810820595, 0.8499839096179495, 0.8316971126425954, 0.6988787785073849, 0.7076914369480496, 0.6807856084663632, 0.6991450189866342, 0.6985087969865762, 0.697510587520765, 0.6814696250079424, 0.6974967380582103, 0.6789831631453505, 0.12803359202991849, 0.1242612936337355, 0.12623487207789819, 0.11608829370225682, 0.10803534188361841, 0.09634331559949882, 0.10079877127256187, 0.11037323300352397, 0.11860479442839356, 0.12183613115665504, 0.11118261859872547, 0.10188131914782717, 0.10075901878884908, 0.09772953422794928, 0.10390208506137355, 0.10384075062156461, 0.12763356192974318, 0.09630221671730776, 0.9657766758116904, 0.9806070387316017, 0.9670790582528761, 0.9611486164598195, 0.9853998930857644, 0.9758601959484613, 0.9535317518046194, 0.9837908596835795, 0.9740263272252738, 0.5435994883376927, 0.48524361390413073, 0.48755544801490336, 0.5598983013998056, 0.5054017677680237, 0.5129561739866644, 0.5003197466959972, 0.5074288346338446, 0.4799303741140767, 0.8392523523317281, 0.7758339497622764, 0.7979687101476209, 0.8911287254451327, 0.8353757564485955, 0.26647673707142083, 0.2986768438263787, 0.8144298554491555, 0.8103428083332492, 0.21729095564348422, 0.16458340974373298, 0.19687562695958605, 0.3044993040338746, 0.4240034927960218, 0.4459426171363299, 0.18144242315365122, 0.23659652954330812, 0.21245882457328846, 0.19657083045998391, 0.1952500541468003, 0.20783781053045336, 0.1766943458531527, 0.23556045392400327, 0.28916152952417973, 0.2629578217692782, 0.21615645770466285, 0.217832858076908, 0.1808730094037585, 0.0730889620702232, 0.20918856293892274, 0.40596171907280276, 0.42352559492784236, 0.2620655473058481, 0.12311522948180498, 0.3161958384819833, 0.26032545377086913, 0.23895118949217242, 0.25037038771574804, 0.3929808452669963, 0.21390239738549277, 0.45949990911454164, 0.3287950833531955, 0.34550297204051095, 0.4166339859607464, 0.33486581757997425, 0.3082689410052566, 0.15187887884241702, 0.15643614341655865, 0.1106516791475487, 0.14186740802110998, 0.11026481265983601, 0.19585603739083413, 0.17690808027974292, 0.1576507097089328, 0.4174777633047053, 0.2690516074047923, 0.2970729081326122, 0.2645591801550299, 0.39111151923123266, 0.2891272789390954, 0.31318075183342065, 0.32101233919344263, 0.15424459548724923, 0.606116053696892, 0.5035839540964824, 0.7020368833882786, 0.7506357245032613, 0.7242770506521881, 0.7512649368297756, 0.6767107136808816, 0.5973983602336346, 0.6035802003003496, 0.09104895552910053, 0.12659787277385093, 0.11005005768571485, 0.12201972441371833, 0.13547190039026902, 0.12081211714753393, 0.11961958538375062, 0.11724895867604923, 0.09832439015270189, 0.15024649997248873, 0.1838048900333562, 0.13163213886230862, 0.14507334362840996, 0.15675804619421652, 0.16286350418719409, 0.148351427509836, 0.15332271712946421, 0.14434544589220277, 0.44606217311629703, 0.3583534906525494, 0.4735789821478945, 0.450638539263857, 0.4685211750445817, 0.4558035622919263, 0.4469469338689268, 0.44818173467138844, 0.4200610993202686, 0.31518391297276827, 0.31831403522684965, 0.31369585330580096, 0.26562334736239335, 0.3469384509660469, 0.35234617706551186, 0.30745121643309203, 0.3524664314635173, 0.30674553980784847, 0.21583383805422596, 0.20638909185517618, 0.2036859812838625, 0.21655159418470293, 0.22854377719631724, 0.227698027599472, 0.21039624662913192, 0.21108323826899067, 0.25165937942416905, 0.24148393060483264, 0.19086078031494758, 0.18734188441192134, 0.19402162263980183, 0.20294356774544553, 0.18317460802449947, 0.20844660172299612, 0.20246966806823408, 0.17698679476079449, 0.4476455128923762, 0.1872151152103575, 0.5561129696284823, 0.7859119007940684, 0.413390182666599, 0.6439386698011681, 0.4738643383151512, 0.6452523369518373, 0.20207069210756357, 0.7897195616109345, 0.6351278349044953, 0.6932825697674032, 0.2581459823207166, 0.166128195118447, 0.20697426180383327, 0.43671437218371834, 0.4994393966120171, 0.6460917268676118, 0.20564117147038474, 0.19102180473034347, 0.1799527802940709, 0.18651635291489188, 0.17542114972480283, 0.18842241819145988, 0.18903663808352178, 0.1871570828533704, 0.18346693550315663, 0.08752896077531092, 0.0839671857655081, 0.07950305210549247, 0.0880866611639114, 0.08543376721929541, 0.09239762205455149, 0.0883813305822636, 0.08932311320140818, 0.08484386513753339]}, "mutation_prompt": null}
{"id": "7092c192-801d-43a3-9dcc-a746f71c5b16", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Novel mutation strategy based on population diversity\n                if np.random.rand() < 0.1:\n                    diversity_mutant = np.mean(pbest, axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    diversity_score = evaluate(diversity_mutant)\n                    if diversity_score < pbest_scores[i]:\n                        pbest[i] = diversity_mutant\n                        pbest_scores[i] = diversity_score\n                        if diversity_score < gbest_score:\n                            gbest = diversity_mutant\n                            gbest_score = diversity_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity by introducing a novel mutation strategy based on population diversity.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "46dd7bed-8eda-4671-b85b-69ce32e41d40", "metadata": {"aucs": [0.8493999260949362, 0.8313035457232052, 0.8462281250388721, 0.8403851886979958, 0.8372625085295433, 0.8206453574469301, 0.8500856810820595, 0.8499839096179495, 0.8316971126425954, 0.6988787785073849, 0.7076914369480496, 0.6807856084663632, 0.6991450189866342, 0.6985087969865762, 0.697510587520765, 0.6814696250079424, 0.6974967380582103, 0.6789831631453505, 0.12803359202991849, 0.1242612936337355, 0.12623487207789819, 0.11608829370225682, 0.10803534188361841, 0.09634331559949882, 0.10079877127256187, 0.11037323300352397, 0.11860479442839356, 0.12183613115665504, 0.11118261859872547, 0.10188131914782717, 0.10075901878884908, 0.09772953422794928, 0.10390208506137355, 0.10384075062156461, 0.12763356192974318, 0.09630221671730776, 0.9657766758116904, 0.9806070387316017, 0.9670790582528761, 0.9611486164598195, 0.9853998930857644, 0.9758601959484613, 0.9535317518046194, 0.9837908596835795, 0.9740263272252738, 0.5435994883376927, 0.48524361390413073, 0.48755544801490336, 0.5598983013998056, 0.5054017677680237, 0.5129561739866644, 0.5003197466959972, 0.5074288346338446, 0.4799303741140767, 0.8392523523317281, 0.7758339497622764, 0.7979687101476209, 0.8911287254451327, 0.8353757564485955, 0.26647673707142083, 0.2986768438263787, 0.8144298554491555, 0.8103428083332492, 0.21729095564348422, 0.16458340974373298, 0.19687562695958605, 0.3044993040338746, 0.4240034927960218, 0.4459426171363299, 0.18144242315365122, 0.23659652954330812, 0.21245882457328846, 0.19657083045998391, 0.1952500541468003, 0.20783781053045336, 0.1766943458531527, 0.23556045392400327, 0.28916152952417973, 0.2629578217692782, 0.21615645770466285, 0.217832858076908, 0.1808730094037585, 0.0730889620702232, 0.20918856293892274, 0.40596171907280276, 0.42352559492784236, 0.2620655473058481, 0.12311522948180498, 0.3161958384819833, 0.26032545377086913, 0.23895118949217242, 0.25037038771574804, 0.3929808452669963, 0.21390239738549277, 0.45949990911454164, 0.3287950833531955, 0.34550297204051095, 0.4166339859607464, 0.33486581757997425, 0.3082689410052566, 0.15187887884241702, 0.15643614341655865, 0.1106516791475487, 0.14186740802110998, 0.11026481265983601, 0.19585603739083413, 0.17690808027974292, 0.1576507097089328, 0.4174777633047053, 0.2690516074047923, 0.2970729081326122, 0.2645591801550299, 0.39111151923123266, 0.2891272789390954, 0.31318075183342065, 0.32101233919344263, 0.15424459548724923, 0.606116053696892, 0.5035839540964824, 0.7020368833882786, 0.7506357245032613, 0.7242770506521881, 0.7512649368297756, 0.6767107136808816, 0.5973983602336346, 0.6035802003003496, 0.09104895552910053, 0.12659787277385093, 0.11005005768571485, 0.12201972441371833, 0.13547190039026902, 0.12081211714753393, 0.11961958538375062, 0.11724895867604923, 0.09832439015270189, 0.15024649997248873, 0.1838048900333562, 0.13163213886230862, 0.14507334362840996, 0.15675804619421652, 0.16286350418719409, 0.148351427509836, 0.15332271712946421, 0.14434544589220277, 0.44606217311629703, 0.3583534906525494, 0.4735789821478945, 0.450638539263857, 0.4685211750445817, 0.4558035622919263, 0.4469469338689268, 0.44818173467138844, 0.4200610993202686, 0.31518391297276827, 0.31831403522684965, 0.31369585330580096, 0.26562334736239335, 0.3469384509660469, 0.35234617706551186, 0.30745121643309203, 0.3524664314635173, 0.30674553980784847, 0.21583383805422596, 0.20638909185517618, 0.2036859812838625, 0.21655159418470293, 0.22854377719631724, 0.227698027599472, 0.21039624662913192, 0.21108323826899067, 0.25165937942416905, 0.24148393060483264, 0.19086078031494758, 0.18734188441192134, 0.19402162263980183, 0.20294356774544553, 0.18317460802449947, 0.20844660172299612, 0.20246966806823408, 0.17698679476079449, 0.4476455128923762, 0.1872151152103575, 0.5561129696284823, 0.7859119007940684, 0.413390182666599, 0.6439386698011681, 0.4738643383151512, 0.6452523369518373, 0.20207069210756357, 0.7897195616109345, 0.6351278349044953, 0.6932825697674032, 0.2581459823207166, 0.166128195118447, 0.20697426180383327, 0.43671437218371834, 0.4994393966120171, 0.6460917268676118, 0.20564117147038474, 0.19102180473034347, 0.1799527802940709, 0.18651635291489188, 0.17542114972480283, 0.18842241819145988, 0.18903663808352178, 0.1871570828533704, 0.18346693550315663, 0.08752896077531092, 0.0839671857655081, 0.07950305210549247, 0.0880866611639114, 0.08543376721929541, 0.09239762205455149, 0.0883813305822636, 0.08932311320140818, 0.08484386513753339]}, "mutation_prompt": null}
{"id": "b0eefa39-532a-481c-8779-1ed2589a5ba2", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Novel mutation strategy based on population diversity\n                if np.random.rand() < 0.1:\n                    diversity_mutant = np.mean(pbest, axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    diversity_score = evaluate(diversity_mutant)\n                    if diversity_score < pbest_scores[i]:\n                        pbest[i] = diversity_mutant\n                        pbest_scores[i] = diversity_score\n                        if diversity_score < gbest_score:\n                            gbest = diversity_mutant\n                            gbest_score = diversity_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity by introducing a novel mutation strategy based on population diversity.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "46dd7bed-8eda-4671-b85b-69ce32e41d40", "metadata": {"aucs": [0.8493999260949362, 0.8313035457232052, 0.8462281250388721, 0.8403851886979958, 0.8372625085295433, 0.8206453574469301, 0.8500856810820595, 0.8499839096179495, 0.8316971126425954, 0.6988787785073849, 0.7076914369480496, 0.6807856084663632, 0.6991450189866342, 0.6985087969865762, 0.697510587520765, 0.6814696250079424, 0.6974967380582103, 0.6789831631453505, 0.12803359202991849, 0.1242612936337355, 0.12623487207789819, 0.11608829370225682, 0.10803534188361841, 0.09634331559949882, 0.10079877127256187, 0.11037323300352397, 0.11860479442839356, 0.12183613115665504, 0.11118261859872547, 0.10188131914782717, 0.10075901878884908, 0.09772953422794928, 0.10390208506137355, 0.10384075062156461, 0.12763356192974318, 0.09630221671730776, 0.9657766758116904, 0.9806070387316017, 0.9670790582528761, 0.9611486164598195, 0.9853998930857644, 0.9758601959484613, 0.9535317518046194, 0.9837908596835795, 0.9740263272252738, 0.5435994883376927, 0.48524361390413073, 0.48755544801490336, 0.5598983013998056, 0.5054017677680237, 0.5129561739866644, 0.5003197466959972, 0.5074288346338446, 0.4799303741140767, 0.8392523523317281, 0.7758339497622764, 0.7979687101476209, 0.8911287254451327, 0.8353757564485955, 0.26647673707142083, 0.2986768438263787, 0.8144298554491555, 0.8103428083332492, 0.21729095564348422, 0.16458340974373298, 0.19687562695958605, 0.3044993040338746, 0.4240034927960218, 0.4459426171363299, 0.18144242315365122, 0.23659652954330812, 0.21245882457328846, 0.19657083045998391, 0.1952500541468003, 0.20783781053045336, 0.1766943458531527, 0.23556045392400327, 0.28916152952417973, 0.2629578217692782, 0.21615645770466285, 0.217832858076908, 0.1808730094037585, 0.0730889620702232, 0.20918856293892274, 0.40596171907280276, 0.42352559492784236, 0.2620655473058481, 0.12311522948180498, 0.3161958384819833, 0.26032545377086913, 0.23895118949217242, 0.25037038771574804, 0.3929808452669963, 0.21390239738549277, 0.45949990911454164, 0.3287950833531955, 0.34550297204051095, 0.4166339859607464, 0.33486581757997425, 0.3082689410052566, 0.15187887884241702, 0.15643614341655865, 0.1106516791475487, 0.14186740802110998, 0.11026481265983601, 0.19585603739083413, 0.17690808027974292, 0.1576507097089328, 0.4174777633047053, 0.2690516074047923, 0.2970729081326122, 0.2645591801550299, 0.39111151923123266, 0.2891272789390954, 0.31318075183342065, 0.32101233919344263, 0.15424459548724923, 0.606116053696892, 0.5035839540964824, 0.7020368833882786, 0.7506357245032613, 0.7242770506521881, 0.7512649368297756, 0.6767107136808816, 0.5973983602336346, 0.6035802003003496, 0.09104895552910053, 0.12659787277385093, 0.11005005768571485, 0.12201972441371833, 0.13547190039026902, 0.12081211714753393, 0.11961958538375062, 0.11724895867604923, 0.09832439015270189, 0.15024649997248873, 0.1838048900333562, 0.13163213886230862, 0.14507334362840996, 0.15675804619421652, 0.16286350418719409, 0.148351427509836, 0.15332271712946421, 0.14434544589220277, 0.44606217311629703, 0.3583534906525494, 0.4735789821478945, 0.450638539263857, 0.4685211750445817, 0.4558035622919263, 0.4469469338689268, 0.44818173467138844, 0.4200610993202686, 0.31518391297276827, 0.31831403522684965, 0.31369585330580096, 0.26562334736239335, 0.3469384509660469, 0.35234617706551186, 0.30745121643309203, 0.3524664314635173, 0.30674553980784847, 0.21583383805422596, 0.20638909185517618, 0.2036859812838625, 0.21655159418470293, 0.22854377719631724, 0.227698027599472, 0.21039624662913192, 0.21108323826899067, 0.25165937942416905, 0.24148393060483264, 0.19086078031494758, 0.18734188441192134, 0.19402162263980183, 0.20294356774544553, 0.18317460802449947, 0.20844660172299612, 0.20246966806823408, 0.17698679476079449, 0.4476455128923762, 0.1872151152103575, 0.5561129696284823, 0.7859119007940684, 0.413390182666599, 0.6439386698011681, 0.4738643383151512, 0.6452523369518373, 0.20207069210756357, 0.7897195616109345, 0.6351278349044953, 0.6932825697674032, 0.2581459823207166, 0.166128195118447, 0.20697426180383327, 0.43671437218371834, 0.4994393966120171, 0.6460917268676118, 0.20564117147038474, 0.19102180473034347, 0.1799527802940709, 0.18651635291489188, 0.17542114972480283, 0.18842241819145988, 0.18903663808352178, 0.1871570828533704, 0.18346693550315663, 0.08752896077531092, 0.0839671857655081, 0.07950305210549247, 0.0880866611639114, 0.08543376721929541, 0.09239762205455149, 0.0883813305822636, 0.08932311320140818, 0.08484386513753339]}, "mutation_prompt": null}
{"id": "b4a7c88c-994e-4833-b6c1-6a265ee4e89e", "solution": "class DynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)  # Initialize mutation factor for each individual\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor adaptation based on individual performance\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    diversity_mutant = np.mean(pbest, axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    diversity_score = evaluate(diversity_mutant)\n                    if diversity_score < pbest_scores[i]:\n                        pbest[i] = diversity_mutant\n                        pbest_scores[i] = diversity_score\n                        if diversity_score < gbest_score:\n                            gbest = diversity_mutant\n                            gbest_score = diversity_score\n        \n        return gbest", "name": "DynamicMutationPSO_DE_Optimizer", "description": "Introducing a dynamic mutation factor adaptation based on individual performance to enhance convergence speed.", "configspace": "", "generation": 25, "fitness": 0.36753391895458376, "feedback": "The algorithm DynamicMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "46dd7bed-8eda-4671-b85b-69ce32e41d40", "metadata": {"aucs": [0.8493999260949362, 0.8313035457232052, 0.8462281250388721, 0.8403851886979958, 0.8372625085295433, 0.8206453574469301, 0.8500856810820595, 0.8499839096179495, 0.8316971126425954, 0.6988787785073849, 0.7076914369480496, 0.6807856084663632, 0.6991450189866342, 0.6985087969865762, 0.697510587520765, 0.6814696250079424, 0.6974967380582103, 0.6789831631453505, 0.12803359202991849, 0.1242612936337355, 0.12623487207789819, 0.11608829370225682, 0.10803534188361841, 0.09634331559949882, 0.10079877127256187, 0.11037323300352397, 0.11860479442839356, 0.12183613115665504, 0.11118261859872547, 0.10188131914782717, 0.10075901878884908, 0.09772953422794928, 0.10390208506137355, 0.10384075062156461, 0.12763356192974318, 0.09630221671730776, 0.9657766758116904, 0.9806070387316017, 0.9670790582528761, 0.9611486164598195, 0.9853998930857644, 0.9758601959484613, 0.9535317518046194, 0.9837908596835795, 0.9740263272252738, 0.5435994883376927, 0.48524361390413073, 0.48755544801490336, 0.5598983013998056, 0.5054017677680237, 0.5129561739866644, 0.5003197466959972, 0.5074288346338446, 0.4799303741140767, 0.8392523523317281, 0.7758339497622764, 0.7979687101476209, 0.8911287254451327, 0.8353757564485955, 0.26647673707142083, 0.2986768438263787, 0.8144298554491555, 0.8103428083332492, 0.21729095564348422, 0.16458340974373298, 0.19687562695958605, 0.3044993040338746, 0.4240034927960218, 0.4459426171363299, 0.18144242315365122, 0.23659652954330812, 0.21245882457328846, 0.19657083045998391, 0.1952500541468003, 0.20783781053045336, 0.1766943458531527, 0.23556045392400327, 0.28916152952417973, 0.2629578217692782, 0.21615645770466285, 0.217832858076908, 0.1808730094037585, 0.0730889620702232, 0.20918856293892274, 0.40596171907280276, 0.42352559492784236, 0.2620655473058481, 0.12311522948180498, 0.3161958384819833, 0.26032545377086913, 0.23895118949217242, 0.25037038771574804, 0.3929808452669963, 0.21390239738549277, 0.45949990911454164, 0.3287950833531955, 0.34550297204051095, 0.4166339859607464, 0.33486581757997425, 0.3082689410052566, 0.15187887884241702, 0.15643614341655865, 0.1106516791475487, 0.14186740802110998, 0.11026481265983601, 0.19585603739083413, 0.17690808027974292, 0.1576507097089328, 0.4174777633047053, 0.2690516074047923, 0.2970729081326122, 0.2645591801550299, 0.39111151923123266, 0.2891272789390954, 0.31318075183342065, 0.32101233919344263, 0.15424459548724923, 0.606116053696892, 0.5035839540964824, 0.7020368833882786, 0.7506357245032613, 0.7242770506521881, 0.7512649368297756, 0.6767107136808816, 0.5973983602336346, 0.6035802003003496, 0.09104895552910053, 0.12659787277385093, 0.11005005768571485, 0.12201972441371833, 0.13547190039026902, 0.12081211714753393, 0.11961958538375062, 0.11724895867604923, 0.09832439015270189, 0.15024649997248873, 0.1838048900333562, 0.13163213886230862, 0.14507334362840996, 0.15675804619421652, 0.16286350418719409, 0.148351427509836, 0.15332271712946421, 0.14434544589220277, 0.44606217311629703, 0.3583534906525494, 0.4735789821478945, 0.450638539263857, 0.4685211750445817, 0.4558035622919263, 0.4469469338689268, 0.44818173467138844, 0.4200610993202686, 0.31518391297276827, 0.31831403522684965, 0.31369585330580096, 0.26562334736239335, 0.3469384509660469, 0.35234617706551186, 0.30745121643309203, 0.3524664314635173, 0.30674553980784847, 0.21583383805422596, 0.20638909185517618, 0.2036859812838625, 0.21655159418470293, 0.22854377719631724, 0.227698027599472, 0.21039624662913192, 0.21108323826899067, 0.25165937942416905, 0.24148393060483264, 0.19086078031494758, 0.18734188441192134, 0.19402162263980183, 0.20294356774544553, 0.18317460802449947, 0.20844660172299612, 0.20246966806823408, 0.17698679476079449, 0.4476455128923762, 0.1872151152103575, 0.5561129696284823, 0.7859119007940684, 0.413390182666599, 0.6439386698011681, 0.4738643383151512, 0.6452523369518373, 0.20207069210756357, 0.7897195616109345, 0.6351278349044953, 0.6932825697674032, 0.2581459823207166, 0.166128195118447, 0.20697426180383327, 0.43671437218371834, 0.4994393966120171, 0.6460917268676118, 0.20564117147038474, 0.19102180473034347, 0.1799527802940709, 0.18651635291489188, 0.17542114972480283, 0.18842241819145988, 0.18903663808352178, 0.1871570828533704, 0.18346693550315663, 0.08752896077531092, 0.0839671857655081, 0.07950305210549247, 0.0880866611639114, 0.08543376721929541, 0.09239762205455149, 0.0883813305822636, 0.08932311320140818, 0.08484386513753339]}, "mutation_prompt": null}
{"id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation strategy based on both individual and global best solutions\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity and exploration by leveraging a dynamic mutation strategy based on both individual and global best solutions.", "configspace": "", "generation": 26, "fitness": 0.3729088026549308, "feedback": "The algorithm EnhancedDynamicMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "46dd7bed-8eda-4671-b85b-69ce32e41d40", "metadata": {"aucs": [0.8365520408646144, 0.8510975014455431, 0.8498906384458356, 0.8375529899959104, 0.8385086420061802, 0.8575587733365722, 0.839405986519701, 0.8349522492692518, 0.8481892124754217, 0.7069476168146787, 0.7078161316045944, 0.687211368837151, 0.7188543755231911, 0.7106209268393571, 0.6924896341885065, 0.7056252765944979, 0.7088355235219591, 0.6741242054540613, 0.1023047218995542, 0.12784577087075777, 0.12275991115694962, 0.1008757290518193, 0.10626590046876794, 0.14225144070828522, 0.11863504018194237, 0.11721591695734601, 0.15051887953522813, 0.12111350410429655, 0.09489985869699502, 0.10451339836007578, 0.09995475544950239, 0.09422179089399929, 0.10916920036428435, 0.10381107353151309, 0.1148548673031402, 0.09760329928541034, 0.9798839214602825, 0.9774585403703251, 0.9690589376263021, 0.9542018149663891, 0.9828251987515431, 0.9704812514486029, 0.9709377638387096, 0.9850731923288326, 0.9689744974629891, 0.5402321159285335, 0.5361985349463432, 0.5350163685631899, 0.5572959991779902, 0.5260755062230511, 0.5708812153228908, 0.4164925925232932, 0.522268578529087, 0.47565708432147347, 0.8075870825896818, 0.7056509480673986, 0.8434122394447319, 0.8671408764733537, 0.8223984044327887, 0.7680063523605614, 0.7602185277466027, 0.8041399009080962, 0.8353019831348403, 0.22213120241506235, 0.19286565493493724, 0.19317867069456363, 0.2009919602373712, 0.269153978089959, 0.2103089275675838, 0.26174280583059595, 0.5307551595638639, 0.2462754680333915, 0.20848332497549305, 0.20161623879902113, 0.2384959034447508, 0.18205033824145522, 0.29201184405712355, 0.1905598923567665, 0.18851449564055978, 0.1810695657785666, 0.19240009792686275, 0.08627854668692347, 0.20331848986508216, 0.2593569203531646, 0.1970019851245597, 0.16782863395384662, 0.3067489438952834, 0.27635995456710427, 0.106751560046082, 0.5123383590849793, 0.3175830775940892, 0.4725375759256475, 0.3460061952709583, 0.11945620876955543, 0.47507891030805605, 0.2648119485106539, 0.3657881885687445, 0.40674341395754876, 0.5896333297389048, 0.10071088615785484, 0.12783107596397802, 0.1213241997200839, 0.21103183530447933, 0.1515338829666889, 0.086443663238842, 0.17994123987904298, 0.09493887803641043, 0.10340800409276885, 0.27531639766551386, 0.2564709297657036, 0.3560040249983809, 0.193837848834305, 0.3372192567490422, 0.33034308683182356, 0.2398172274207827, 0.28145399940038773, 0.2901308320921673, 0.7152263904750968, 0.6951173860153359, 0.7630109203761846, 0.6843537066122812, 0.7390570637738993, 0.7660119331024181, 0.5747215919299451, 0.7064307549628472, 0.6239289093061297, 0.08699224169426056, 0.11891113597312597, 0.07994484205587682, 0.12343924632928427, 0.09787328007069285, 0.11436800332207808, 0.15402168450801423, 0.09528536578281543, 0.11343965643982812, 0.1577859392212262, 0.15195795592063222, 0.15805580870814995, 0.15863037187087448, 0.13613648781241316, 0.14961106828735415, 0.16062687645469376, 0.14519604189189517, 0.19082065086119382, 0.4408920589126246, 0.4611268328006797, 0.4567796333244726, 0.4303860103955398, 0.4907600082559408, 0.42453825300565595, 0.4630299646786864, 0.47732740198252444, 0.47005238107016656, 0.24856223550488554, 0.34681353902443013, 0.30318453032047166, 0.36658201590943196, 0.29266409910232905, 0.3270984249628439, 0.24073625463179738, 0.33955641497664535, 0.2793127324340985, 0.21772700664219646, 0.21280947151489316, 0.2109354584189963, 0.21096501523484723, 0.21904077661962806, 0.2256209691516211, 0.21263625029182542, 0.19668332905733654, 0.2353071706323534, 0.19292132609502455, 0.19316343234476985, 0.19189753596112036, 0.20659348689852763, 0.1997281231406074, 0.20231393989052104, 0.2020247718378998, 0.18892080710802017, 0.20554383512128938, 0.754683597018823, 0.6681572242013354, 0.8337983288163727, 0.8613866885630953, 0.19573213442819593, 0.20258498279863268, 0.7014784699252017, 0.287520738555909, 0.7875008199450193, 0.7683590504426461, 0.16617880955020503, 0.8009218282413861, 0.3377000830217831, 0.40910449422776995, 0.20536916917756864, 0.4426603535949607, 0.20515787597962076, 0.20577108010936318, 0.20564117147038474, 0.19152428609395833, 0.1837904408687907, 0.1776484214775097, 0.18458829408501187, 0.184835141336814, 0.1863387663157292, 0.19015501355560782, 0.18803538243116846, 0.09837243820115005, 0.07736519422798427, 0.08991674217324375, 0.08496660909110776, 0.09179470902031683, 0.0886417452163023, 0.0840487677451438, 0.07371846321040443, 0.0857606259011342]}, "mutation_prompt": null}
{"id": "9a294601-c896-4e49-807b-11277a43faf4", "solution": "class EnhancedSelfAdaptiveMutationPSO_DE_Optimizer(EnhancedDynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                self_adaptive_mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1 + 0.01 * pbest_scores[i]), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], self_adaptive_mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n        \n        return gbest", "name": "EnhancedSelfAdaptiveMutationPSO_DE_Optimizer", "description": "Introducing a self-adaptive mutation strategy based on individual solution performance to enhance exploration and exploitation.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('scale < 0').", "error": "ValueError('scale < 0')", "parent_id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "metadata": {}, "mutation_prompt": null}
{"id": "626e12f8-e382-433b-97e1-f864f781ef5f", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation strategy based on both individual and global best solutions\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity and exploration by leveraging a dynamic mutation strategy based on both individual and global best solutions.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "metadata": {"aucs": [0.8365520408646144, 0.8510975014455431, 0.8498906384458356, 0.8375529899959104, 0.8385086420061802, 0.8575587733365722, 0.839405986519701, 0.8349522492692518, 0.8481892124754217, 0.7069476168146787, 0.7078161316045944, 0.687211368837151, 0.7188543755231911, 0.7106209268393571, 0.6924896341885065, 0.7056252765944979, 0.7088355235219591, 0.6741242054540613, 0.1023047218995542, 0.12784577087075777, 0.12275991115694962, 0.1008757290518193, 0.10626590046876794, 0.14225144070828522, 0.11863504018194237, 0.11721591695734601, 0.15051887953522813, 0.12111350410429655, 0.09489985869699502, 0.10451339836007578, 0.09995475544950239, 0.09422179089399929, 0.10916920036428435, 0.10381107353151309, 0.1148548673031402, 0.09760329928541034, 0.9798839214602825, 0.9774585403703251, 0.9690589376263021, 0.9542018149663891, 0.9828251987515431, 0.9704812514486029, 0.9709377638387096, 0.9850731923288326, 0.9689744974629891, 0.5402321159285335, 0.5361985349463432, 0.5350163685631899, 0.5572959991779902, 0.5260755062230511, 0.5708812153228908, 0.4164925925232932, 0.522268578529087, 0.47565708432147347, 0.8075870825896818, 0.7056509480673986, 0.8434122394447319, 0.8671408764733537, 0.8223984044327887, 0.7680063523605614, 0.7602185277466027, 0.8041399009080962, 0.8353019831348403, 0.22213120241506235, 0.19286565493493724, 0.19317867069456363, 0.2009919602373712, 0.269153978089959, 0.2103089275675838, 0.26174280583059595, 0.5307551595638639, 0.2462754680333915, 0.20848332497549305, 0.20161623879902113, 0.2384959034447508, 0.18205033824145522, 0.29201184405712355, 0.1905598923567665, 0.18851449564055978, 0.1810695657785666, 0.19240009792686275, 0.08627854668692347, 0.20331848986508216, 0.2593569203531646, 0.1970019851245597, 0.16782863395384662, 0.3067489438952834, 0.27635995456710427, 0.106751560046082, 0.5123383590849793, 0.3175830775940892, 0.4725375759256475, 0.3460061952709583, 0.11945620876955543, 0.47507891030805605, 0.2648119485106539, 0.3657881885687445, 0.40674341395754876, 0.5896333297389048, 0.10071088615785484, 0.12783107596397802, 0.1213241997200839, 0.21103183530447933, 0.1515338829666889, 0.086443663238842, 0.17994123987904298, 0.09493887803641043, 0.10340800409276885, 0.27531639766551386, 0.2564709297657036, 0.3560040249983809, 0.193837848834305, 0.3372192567490422, 0.33034308683182356, 0.2398172274207827, 0.28145399940038773, 0.2901308320921673, 0.7152263904750968, 0.6951173860153359, 0.7630109203761846, 0.6843537066122812, 0.7390570637738993, 0.7660119331024181, 0.5747215919299451, 0.7064307549628472, 0.6239289093061297, 0.08699224169426056, 0.11891113597312597, 0.07994484205587682, 0.12343924632928427, 0.09787328007069285, 0.11436800332207808, 0.15402168450801423, 0.09528536578281543, 0.11343965643982812, 0.1577859392212262, 0.15195795592063222, 0.15805580870814995, 0.15863037187087448, 0.13613648781241316, 0.14961106828735415, 0.16062687645469376, 0.14519604189189517, 0.19082065086119382, 0.4408920589126246, 0.4611268328006797, 0.4567796333244726, 0.4303860103955398, 0.4907600082559408, 0.42453825300565595, 0.4630299646786864, 0.47732740198252444, 0.47005238107016656, 0.24856223550488554, 0.34681353902443013, 0.30318453032047166, 0.36658201590943196, 0.29266409910232905, 0.3270984249628439, 0.24073625463179738, 0.33955641497664535, 0.2793127324340985, 0.21772700664219646, 0.21280947151489316, 0.2109354584189963, 0.21096501523484723, 0.21904077661962806, 0.2256209691516211, 0.21263625029182542, 0.19668332905733654, 0.2353071706323534, 0.19292132609502455, 0.19316343234476985, 0.19189753596112036, 0.20659348689852763, 0.1997281231406074, 0.20231393989052104, 0.2020247718378998, 0.18892080710802017, 0.20554383512128938, 0.754683597018823, 0.6681572242013354, 0.8337983288163727, 0.8613866885630953, 0.19573213442819593, 0.20258498279863268, 0.7014784699252017, 0.287520738555909, 0.7875008199450193, 0.7683590504426461, 0.16617880955020503, 0.8009218282413861, 0.3377000830217831, 0.40910449422776995, 0.20536916917756864, 0.4426603535949607, 0.20515787597962076, 0.20577108010936318, 0.20564117147038474, 0.19152428609395833, 0.1837904408687907, 0.1776484214775097, 0.18458829408501187, 0.184835141336814, 0.1863387663157292, 0.19015501355560782, 0.18803538243116846, 0.09837243820115005, 0.07736519422798427, 0.08991674217324375, 0.08496660909110776, 0.09179470902031683, 0.0886417452163023, 0.0840487677451438, 0.07371846321040443, 0.0857606259011342]}, "mutation_prompt": null}
{"id": "cc19578a-d866-47bf-8c1d-bfb9c7ad1cb7", "solution": "class HybridPSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.7\n\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n\n        def evaluate(x):\n            return func(x)\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i + 1) % self.swarm_size, (i + 2) % self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n\n                # Dynamic mutation strategy based on both individual and global best solutions\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n\n            # Adaptive control parameters\n            self.w = max(0.4, min(0.9, self.w + np.random.normal(0, 0.05)))\n            self.c1 = max(1.0, min(2.0, self.c1 + np.random.normal(0, 0.05)))\n            self.c2 = max(1.0, min(2.0, self.c2 + np.random.normal(0, 0.05)))\n\n        return gbest", "name": "HybridPSO_DE_Optimizer", "description": "Implementing a hybrid strategy combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) with adaptive control parameters for enhanced convergence and exploration.", "configspace": "", "generation": 29, "fitness": 0.3558169638169683, "feedback": "The algorithm HybridPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "metadata": {"aucs": [0.8558458030901767, 0.8728193991391896, 0.8731319968365863, 0.8304002982425794, 0.8534356037046309, 0.8626845619279988, 0.8197757316056435, 0.8506005235081515, 0.8469292932938776, 0.6859302931499266, 0.7379476357050891, 0.7360334236095435, 0.6682787352975874, 0.7413649884547913, 0.740361072160417, 0.6909797422503008, 0.713242335626824, 0.7352289567733677, 0.104148403508598, 0.15088452787273088, 0.12169727733655922, 0.09390612736637682, 0.14671148038698412, 0.25773742282649215, 0.1263452523795795, 0.12412651463430191, 0.13394887940878542, 0.12473434242778603, 0.13301262156210636, 0.12314711850724869, 0.12314151203370216, 0.1384102259514337, 0.12663744515567865, 0.1340473232255106, 0.11590432373942805, 0.12471267288205468, 0.9819589758038036, 0.9773244214139906, 0.9834628953971791, 0.9774719506224517, 0.9828704819416354, 0.988793179729444, 0.9819341148405303, 0.9907924601486943, 0.9837360420973308, 0.5267591603579623, 0.6087660952154744, 0.5914729346880039, 0.4890920841736588, 0.6518656625763106, 0.6142988944879318, 0.4956084311348955, 0.6242747159205264, 0.5118245215802085, 0.7649835303037491, 0.47185227627770476, 0.7404832706776374, 0.7981260102211041, 0.27514126539900996, 0.8045699183503994, 0.7384735701424048, 0.7743252439214806, 0.786696897023534, 0.2740860349868647, 0.19824695250259095, 0.19198684442020097, 0.19978023303338022, 0.17452866267364187, 0.22542903355636612, 0.36901614167024266, 0.3219610264637922, 0.20362347527798352, 0.23848306141272546, 0.19309374067226792, 0.2145439031246691, 0.17809329816115838, 0.2320602334710442, 0.13887164449334088, 0.21594191552979114, 0.18700590314992682, 0.23898593507949628, 0.05306328832417384, 0.07330157617458843, 0.0804733518236368, 0.08163278681461161, 0.14369379212482558, 0.03236131489543148, 0.0779777259722787, 0.0587438034168104, 0.08058938470790766, 0.1842611407838285, 0.16500716405297278, 0.24560899344563236, 0.10210788136457705, 0.14660063650616106, 0.11608208335447523, 0.33944265355575476, 0.2566673697044144, 0.28850042270859944, 0.14307530161361448, 0.10887511834765973, 0.050941352449187294, 0.07103167185638104, 0.09441163505716854, 0.06794279537686876, 0.076441879740906, 0.10247856657814913, 0.0648300068276767, 0.21409467647467084, 0.208514861232734, 0.2063365023136976, 0.17397704005770354, 0.2293847961592661, 0.21277934355316042, 0.2328445110106132, 0.1366190140780067, 0.2581944674653269, 0.6502998721591923, 0.6652354491836795, 0.6358800787560188, 0.6209013780277646, 0.5966326388905387, 0.6131785085082626, 0.644731071900695, 0.6150575917057127, 0.6148643110368129, 0.11603180006195546, 0.11722084401566712, 0.11115183058089917, 0.10057456301824264, 0.11330134706477835, 0.11652505239617184, 0.11748662347824579, 0.11240602405220157, 0.141701395314621, 0.15152343293522885, 0.14945164381735654, 0.1573067846407481, 0.1297486692336688, 0.15243242242386335, 0.15093740001211298, 0.14853916684675805, 0.13639944590856523, 0.22055169144046716, 0.4834675530388204, 0.5275485866043716, 0.48356934235312876, 0.3468687868582745, 0.4294901246423145, 0.4667673597408032, 0.4659797794234992, 0.5477581224224298, 0.47945109029091026, 0.3363973989510065, 0.315844801352559, 0.3306314494700442, 0.31929231562983795, 0.30514192710785926, 0.2902732092604111, 0.29234645973773254, 0.40747037052078894, 0.3435821320077529, 0.20621677859958454, 0.22142910486536993, 0.19824533698046198, 0.20777875311562355, 0.2152200939575296, 0.20279107097540305, 0.2218842051225004, 0.199711646359074, 0.20134595937581812, 0.2272398592638023, 0.22036888967399648, 0.20186755390385147, 0.2021676935374096, 0.2129622567283712, 0.4169673183372633, 0.21338342029195645, 0.29936352001957156, 0.2009494219744794, 0.18608583015758562, 0.787580432744867, 0.7760397233944352, 0.8815749963066231, 0.19852356828016426, 0.8692534243997817, 0.30448476411573, 0.7477728441786659, 0.8135401931686902, 0.7503693980419082, 0.16469021444735898, 0.5486093466622834, 0.5280507450333947, 0.7041262895091231, 0.20871420651886063, 0.10441833178158866, 0.1976527312701868, 0.4101859022031563, 0.18103328370007488, 0.1778540493820152, 0.17572222026961992, 0.1813042834348626, 0.17266779794334053, 0.18925985687386548, 0.16821625221600045, 0.20697551834919925, 0.19303075266543512, 0.09359649296375117, 0.08579101400688338, 0.09326187437004241, 0.09391490824197812, 0.09131063418938234, 0.1387603917423248, 0.09366434636656118, 0.0920425251902749, 0.09471049080826144]}, "mutation_prompt": null}
{"id": "13ca820b-c321-4245-99d0-e690fe09ca64", "solution": "class AdaptiveMutationPSO_DE_Optimizer(EnhancedDynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.abs(np.random.standard_cauchy(self.dim)) + np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Adaptive mutation strategy combining Cauchy and Gaussian distributions\n                if np.random.rand() < 0.1:\n                    adaptive_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.abs(np.random.standard_cauchy(self.dim)) + np.random.normal(0, 0.5, size=self.dim)\n                    adaptive_score = evaluate(adaptive_mutant)\n                    if adaptive_score < pbest_scores[i]:\n                        pbest[i] = adaptive_mutant\n                        pbest_scores[i] = adaptive_score\n                        if adaptive_score < gbest_score:\n                            gbest = adaptive_mutant\n                            gbest_score = adaptive_score\n        \n        return gbest", "name": "AdaptiveMutationPSO_DE_Optimizer", "description": "Enhancing exploration by incorporating a novel adaptive mutation strategy based on a combination of Cauchy and Gaussian distributions.", "configspace": "", "generation": 30, "fitness": 0.19593180368806618, "feedback": "The algorithm AdaptiveMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "metadata": {"aucs": [0.5571078464917485, 0.5610904161660644, 0.5512319136257727, 0.49308773992676946, 0.5396631066247639, 0.5503651013260524, 0.542160973145703, 0.4816822080645168, 0.5648738781156214, 0.1993454592897267, 0.20262322259931131, 0.20151806791218163, 0.14449453926036182, 0.21984995731990142, 0.2048646858996661, 0.22664483433812666, 0.26491263630212236, 0.21792064489325513, 0.08482144519183787, 0.1012061699521073, 0.09305735895722556, 0.07917848176945985, 0.08454282845774364, 0.09577155282706917, 0.07114850218923419, 0.09430223141259608, 0.0963724363116838, 0.08059407369562355, 0.09144432233960742, 0.06890240663686942, 0.07885928207847048, 0.06555648316586848, 0.0850441645154364, 0.0934991579620208, 0.07314122332296902, 0.07346989509473556, 0.9862287816152876, 0.9887886176243429, 0.9812591955488651, 0.9888725026122863, 0.9763708911323952, 0.9845190491765767, 0.9900555760977842, 0.9851450362770614, 0.9784938653623252, 0.15159500399746595, 0.16737719291481112, 0.1920072324605132, 0.15800872381671272, 0.1924035125124487, 0.16477694494709572, 0.1805362809895139, 0.17553204203566997, 0.1641681236396213, 0.2240849428576085, 0.19173199396128515, 0.23060096185757062, 0.2858297737750227, 0.25502770540758224, 0.26416807239518525, 0.2669157491314067, 0.26268286126184526, 0.25924859799710454, 0.12512534846829426, 0.09424508514181418, 0.0797884389482717, 0.10112205314958223, 0.1508484751421718, 0.10870341475899004, 0.10070335438761246, 0.09995652910968178, 0.13170559366629386, 0.12673594521281906, 0.11985766599319325, 0.11993150060492885, 0.11605844577313562, 0.12184230941129592, 0.12789326258171319, 0.14311539325794498, 0.13047668695470416, 0.11058577193119123, 9.999999999998899e-05, 9.999999999998899e-05, 0.023479675936035393, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04655318944410214, 0.004034131269524011, 0.0333600027943699, 0.03442504001676894, 0.017864166748757793, 0.036743178579415336, 0.012567513112509365, 0.049065120163675924, 0.0054441585188589325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07012906342081637, 0.09083091428678403, 0.10814444917842847, 0.10745003941852849, 0.09780193234224277, 0.09472562751445279, 0.08846114473208166, 0.10534484084731843, 0.08604897877424411, 0.41371964192438204, 0.3950776480150663, 0.4155818310293341, 0.3932298477042395, 0.41223205996312806, 0.39755622761056897, 0.4096854139502413, 0.4023489817987327, 0.39939502590221787, 0.08226894450112099, 0.07403255539157594, 0.07597218716563969, 0.07039177622826609, 0.09084245514912748, 0.07790611421421256, 0.07250548151842484, 0.0766170659287504, 0.09054578173301453, 0.11322655800392367, 0.11365516737640768, 0.13068161677348855, 0.16112243202264365, 0.14772257126656818, 0.11613241818367936, 0.1182211011452724, 0.11246028979418721, 0.1201720921087086, 0.240089011190043, 0.2366381391852178, 0.23228447230793126, 0.25108926132971743, 0.22748852165246713, 0.22472725047966513, 0.24084322838024363, 0.24428156865171735, 0.25395194911986996, 0.19351631083570286, 0.16471476204497026, 0.17142242391676155, 0.17981117420359338, 0.1737088424983887, 0.14442117802247545, 0.1651961382441406, 0.16822736829153273, 0.1747814119719162, 0.19169897355531806, 0.16993210565955164, 0.1732381828339219, 0.21121182532033222, 0.16749803772729333, 0.16808127503927195, 0.18455679702315253, 0.17924108257720417, 0.17213227362170147, 0.170462585274181, 0.1846444305688114, 0.17145035481908, 0.16842332296684237, 0.1681291850605643, 0.1702101842343654, 0.19637797456168316, 0.17349629591378068, 0.16946517171740272, 0.15802314930855033, 0.1329312067924453, 0.20191345204107736, 0.2893849571709278, 0.1466135749232288, 0.15925425059698717, 0.2304158413409806, 0.14333472628230537, 0.21232061136009284, 0.39172874012577663, 0.2991353955690672, 0.22314445362256485, 0.13494626542143928, 0.1447569967608835, 0.20501621815480553, 0.16922018664941263, 0.1575324561057514, 0.28181936974109423, 0.1698647091574157, 0.16893643786021917, 0.18031255733243856, 0.1654502333465191, 0.17945792952372608, 0.17341133365971384, 0.18782511834534643, 0.1722809143635461, 0.16654749710706185, 0.062422829983839634, 0.06562871709556872, 0.07422237384690089, 0.08044756842994849, 0.06661462931157369, 0.07126198474222767, 0.06581915168866959, 0.06268455042262833, 0.06219593105365662]}, "mutation_prompt": null}
{"id": "3fb4b081-5530-48e4-b932-d03fd5c8bcf8", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        inertia_weight = 0.5\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n            \n            # Dynamic update of inertia weight based on individual solution quality\n            inertia_weight = max(0.4, inertia_weight - 0.01 * (pbest_scores[i] - gbest_score))\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Improving population diversity by introducing a dynamic inertia weight update mechanism based on individual solution quality.", "configspace": "", "generation": 31, "fitness": 0.3728706479202941, "feedback": "The algorithm EnhancedDynamicMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.26.", "error": "", "parent_id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "metadata": {"aucs": [0.841085702890646, 0.8521767213798443, 0.838425475997612, 0.8474620073974717, 0.8458417192621464, 0.8388970244696055, 0.8612728856250143, 0.8268763205499223, 0.833319278975866, 0.6994915827009831, 0.7041573838437016, 0.7063588780615007, 0.7081699864315433, 0.7163885556742293, 0.7310803150114513, 0.6829143328937626, 0.706306592056393, 0.6761752532364199, 0.13160251628300923, 0.12257195701128332, 0.11205004928555828, 0.12481324169270613, 0.10709156442379886, 0.13136768957364198, 0.11408506825013609, 0.1347713658528663, 0.11849118977194706, 0.1260370547149654, 0.11427958784761372, 0.08749293411503734, 0.12700609525709328, 0.12354453343331528, 0.12076297357658095, 0.1312806389701684, 0.10743977330726828, 0.10689158789918363, 0.9799241788629882, 0.9801853428216207, 0.9717337871988508, 0.9555002218844068, 0.9817696896842487, 0.9718952008915566, 0.9779224518437967, 0.9836061830296154, 0.9593815112346971, 0.4812828686864191, 0.5480079661750454, 0.5714720172738996, 0.49012465524618487, 0.5326435401896852, 0.5340899266858481, 0.5192353040092104, 0.48519647682444644, 0.4864320019042512, 0.8364247173776804, 0.8327193394802767, 0.3066276289929897, 0.811021138977681, 0.8456551677461737, 0.7838572657309689, 0.7785477626056234, 0.7769925834353407, 0.816104206698697, 0.5140048431985096, 0.20086094944417687, 0.21274947706972935, 0.1944283375386342, 0.19719669800903217, 0.23262976956727366, 0.19357520874369805, 0.23259140712378856, 0.21108426443392359, 0.20211630858449503, 0.23406937707154507, 0.1876801592812628, 0.2115559402066005, 0.2542672117763676, 0.25440543076065025, 0.27166845022519626, 0.2320844828346259, 0.23961702218548686, 0.11846858885056555, 0.43706298945323285, 0.2895813850267699, 0.4984354950168861, 0.250777161299256, 0.10563074550905927, 0.4116726017978316, 0.1694722036293832, 0.375171417488123, 0.3778377160601618, 0.6104616235795741, 0.322610541057195, 0.17901827724295816, 0.35946059146871734, 0.47503344668661474, 0.3557891761900285, 0.4122214551355905, 0.3489035284345272, 0.11311572713176299, 0.17208899049627158, 0.0753229251174029, 0.20009646749949883, 0.17604998472987932, 0.10818834200014082, 0.1586205203988249, 0.13555516407595203, 0.05399050109102155, 0.23377298190603624, 0.3140927604096978, 0.2837350820404677, 0.3223475977851774, 0.2996350105332257, 0.36404023242237404, 0.3008168705608999, 0.30215092781258035, 0.2435301460815985, 0.7243093171576825, 0.698182295743347, 0.7285871431466825, 0.6917952090815955, 0.5942834868785316, 0.7238468669845324, 0.6741794450200562, 0.7523415270939187, 0.6282966087055522, 0.08918045395445551, 0.09698304788167156, 0.10539305604156612, 0.11701140037031799, 0.10082154827333778, 0.11141873990333684, 0.09440936041263592, 0.10952751287593165, 0.10318737410061507, 0.14712420495707013, 0.1407051033834854, 0.15653598083932996, 0.14015641723660754, 0.15605288292852604, 0.1592645076573792, 0.131507849749253, 0.14019804576305983, 0.1464116199938369, 0.4740085407357215, 0.40877908878903746, 0.4587225665049093, 0.43116123910796733, 0.4377714735072735, 0.49823099372195645, 0.4523729378187459, 0.5084162405256685, 0.46953595682563387, 0.31138012767624323, 0.36040246931094466, 0.2913394657883732, 0.3369993677061769, 0.3688471861225817, 0.38570735464178874, 0.27510306528514084, 0.3204253955157417, 0.36785744983785573, 0.22090284223954504, 0.22410450930945203, 0.2187719968510985, 0.2268326083938813, 0.19861497961605978, 0.21208149297321266, 0.21891950442529529, 0.20078691667582538, 0.1878090302059009, 0.2299823097160868, 0.21994808918997233, 0.213996173122753, 0.2137051472956959, 0.20265470971292232, 0.21331743684590687, 0.22826356660402536, 0.2267960805806234, 0.2066399868137223, 0.5396006771264749, 0.17879038259785918, 0.7452871956770803, 0.8673918375294989, 0.1962717683469164, 0.44425521533516155, 0.5334396425394288, 0.5438067684248866, 0.6641065312739559, 0.6919661617984545, 0.23941341860146714, 0.7660885402931759, 0.29958562685284873, 0.3705842875410853, 0.20704644062301636, 0.3965393789949655, 0.21315922701404932, 0.2039816290541746, 0.21676585974979723, 0.18004426511451144, 0.17415487501492988, 0.1886400898137396, 0.1969075344434411, 0.17658360046117672, 0.18680482597673975, 0.18709201391051133, 0.19466547890664354, 0.08436296909075369, 0.08820079046390217, 0.07893063290888536, 0.08437099679862314, 0.0926898218732829, 0.08699813607921913, 0.09082417029947132, 0.08261922925229681, 0.07751313758227463]}, "mutation_prompt": null}
{"id": "ee2b2c08-8778-4bac-a17a-6596e02682ac", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation strategy based on both individual and global best solutions\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity and exploration by leveraging a dynamic mutation strategy based on both individual and global best solutions.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "metadata": {"aucs": [0.8365520408646144, 0.8510975014455431, 0.8498906384458356, 0.8375529899959104, 0.8385086420061802, 0.8575587733365722, 0.839405986519701, 0.8349522492692518, 0.8481892124754217, 0.7069476168146787, 0.7078161316045944, 0.687211368837151, 0.7188543755231911, 0.7106209268393571, 0.6924896341885065, 0.7056252765944979, 0.7088355235219591, 0.6741242054540613, 0.1023047218995542, 0.12784577087075777, 0.12275991115694962, 0.1008757290518193, 0.10626590046876794, 0.14225144070828522, 0.11863504018194237, 0.11721591695734601, 0.15051887953522813, 0.12111350410429655, 0.09489985869699502, 0.10451339836007578, 0.09995475544950239, 0.09422179089399929, 0.10916920036428435, 0.10381107353151309, 0.1148548673031402, 0.09760329928541034, 0.9798839214602825, 0.9774585403703251, 0.9690589376263021, 0.9542018149663891, 0.9828251987515431, 0.9704812514486029, 0.9709377638387096, 0.9850731923288326, 0.9689744974629891, 0.5402321159285335, 0.5361985349463432, 0.5350163685631899, 0.5572959991779902, 0.5260755062230511, 0.5708812153228908, 0.4164925925232932, 0.522268578529087, 0.47565708432147347, 0.8075870825896818, 0.7056509480673986, 0.8434122394447319, 0.8671408764733537, 0.8223984044327887, 0.7680063523605614, 0.7602185277466027, 0.8041399009080962, 0.8353019831348403, 0.22213120241506235, 0.19286565493493724, 0.19317867069456363, 0.2009919602373712, 0.269153978089959, 0.2103089275675838, 0.26174280583059595, 0.5307551595638639, 0.2462754680333915, 0.20848332497549305, 0.20161623879902113, 0.2384959034447508, 0.18205033824145522, 0.29201184405712355, 0.1905598923567665, 0.18851449564055978, 0.1810695657785666, 0.19240009792686275, 0.08627854668692347, 0.20331848986508216, 0.2593569203531646, 0.1970019851245597, 0.16782863395384662, 0.3067489438952834, 0.27635995456710427, 0.106751560046082, 0.5123383590849793, 0.3175830775940892, 0.4725375759256475, 0.3460061952709583, 0.11945620876955543, 0.47507891030805605, 0.2648119485106539, 0.3657881885687445, 0.40674341395754876, 0.5896333297389048, 0.10071088615785484, 0.12783107596397802, 0.1213241997200839, 0.21103183530447933, 0.1515338829666889, 0.086443663238842, 0.17994123987904298, 0.09493887803641043, 0.10340800409276885, 0.27531639766551386, 0.2564709297657036, 0.3560040249983809, 0.193837848834305, 0.3372192567490422, 0.33034308683182356, 0.2398172274207827, 0.28145399940038773, 0.2901308320921673, 0.7152263904750968, 0.6951173860153359, 0.7630109203761846, 0.6843537066122812, 0.7390570637738993, 0.7660119331024181, 0.5747215919299451, 0.7064307549628472, 0.6239289093061297, 0.08699224169426056, 0.11891113597312597, 0.07994484205587682, 0.12343924632928427, 0.09787328007069285, 0.11436800332207808, 0.15402168450801423, 0.09528536578281543, 0.11343965643982812, 0.1577859392212262, 0.15195795592063222, 0.15805580870814995, 0.15863037187087448, 0.13613648781241316, 0.14961106828735415, 0.16062687645469376, 0.14519604189189517, 0.19082065086119382, 0.4408920589126246, 0.4611268328006797, 0.4567796333244726, 0.4303860103955398, 0.4907600082559408, 0.42453825300565595, 0.4630299646786864, 0.47732740198252444, 0.47005238107016656, 0.24856223550488554, 0.34681353902443013, 0.30318453032047166, 0.36658201590943196, 0.29266409910232905, 0.3270984249628439, 0.24073625463179738, 0.33955641497664535, 0.2793127324340985, 0.21772700664219646, 0.21280947151489316, 0.2109354584189963, 0.21096501523484723, 0.21904077661962806, 0.2256209691516211, 0.21263625029182542, 0.19668332905733654, 0.2353071706323534, 0.19292132609502455, 0.19316343234476985, 0.19189753596112036, 0.20659348689852763, 0.1997281231406074, 0.20231393989052104, 0.2020247718378998, 0.18892080710802017, 0.20554383512128938, 0.754683597018823, 0.6681572242013354, 0.8337983288163727, 0.8613866885630953, 0.19573213442819593, 0.20258498279863268, 0.7014784699252017, 0.287520738555909, 0.7875008199450193, 0.7683590504426461, 0.16617880955020503, 0.8009218282413861, 0.3377000830217831, 0.40910449422776995, 0.20536916917756864, 0.4426603535949607, 0.20515787597962076, 0.20577108010936318, 0.20564117147038474, 0.19152428609395833, 0.1837904408687907, 0.1776484214775097, 0.18458829408501187, 0.184835141336814, 0.1863387663157292, 0.19015501355560782, 0.18803538243116846, 0.09837243820115005, 0.07736519422798427, 0.08991674217324375, 0.08496660909110776, 0.09179470902031683, 0.0886417452163023, 0.0840487677451438, 0.07371846321040443, 0.0857606259011342]}, "mutation_prompt": null}
{"id": "fe6a27ed-cb5e-40f9-8dd6-f64cbf503710", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation strategy based on both individual and global best solutions\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity and exploration by leveraging a dynamic mutation strategy based on both individual and global best solutions.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "metadata": {"aucs": [0.8365520408646144, 0.8510975014455431, 0.8498906384458356, 0.8375529899959104, 0.8385086420061802, 0.8575587733365722, 0.839405986519701, 0.8349522492692518, 0.8481892124754217, 0.7069476168146787, 0.7078161316045944, 0.687211368837151, 0.7188543755231911, 0.7106209268393571, 0.6924896341885065, 0.7056252765944979, 0.7088355235219591, 0.6741242054540613, 0.1023047218995542, 0.12784577087075777, 0.12275991115694962, 0.1008757290518193, 0.10626590046876794, 0.14225144070828522, 0.11863504018194237, 0.11721591695734601, 0.15051887953522813, 0.12111350410429655, 0.09489985869699502, 0.10451339836007578, 0.09995475544950239, 0.09422179089399929, 0.10916920036428435, 0.10381107353151309, 0.1148548673031402, 0.09760329928541034, 0.9798839214602825, 0.9774585403703251, 0.9690589376263021, 0.9542018149663891, 0.9828251987515431, 0.9704812514486029, 0.9709377638387096, 0.9850731923288326, 0.9689744974629891, 0.5402321159285335, 0.5361985349463432, 0.5350163685631899, 0.5572959991779902, 0.5260755062230511, 0.5708812153228908, 0.4164925925232932, 0.522268578529087, 0.47565708432147347, 0.8075870825896818, 0.7056509480673986, 0.8434122394447319, 0.8671408764733537, 0.8223984044327887, 0.7680063523605614, 0.7602185277466027, 0.8041399009080962, 0.8353019831348403, 0.22213120241506235, 0.19286565493493724, 0.19317867069456363, 0.2009919602373712, 0.269153978089959, 0.2103089275675838, 0.26174280583059595, 0.5307551595638639, 0.2462754680333915, 0.20848332497549305, 0.20161623879902113, 0.2384959034447508, 0.18205033824145522, 0.29201184405712355, 0.1905598923567665, 0.18851449564055978, 0.1810695657785666, 0.19240009792686275, 0.08627854668692347, 0.20331848986508216, 0.2593569203531646, 0.1970019851245597, 0.16782863395384662, 0.3067489438952834, 0.27635995456710427, 0.106751560046082, 0.5123383590849793, 0.3175830775940892, 0.4725375759256475, 0.3460061952709583, 0.11945620876955543, 0.47507891030805605, 0.2648119485106539, 0.3657881885687445, 0.40674341395754876, 0.5896333297389048, 0.10071088615785484, 0.12783107596397802, 0.1213241997200839, 0.21103183530447933, 0.1515338829666889, 0.086443663238842, 0.17994123987904298, 0.09493887803641043, 0.10340800409276885, 0.27531639766551386, 0.2564709297657036, 0.3560040249983809, 0.193837848834305, 0.3372192567490422, 0.33034308683182356, 0.2398172274207827, 0.28145399940038773, 0.2901308320921673, 0.7152263904750968, 0.6951173860153359, 0.7630109203761846, 0.6843537066122812, 0.7390570637738993, 0.7660119331024181, 0.5747215919299451, 0.7064307549628472, 0.6239289093061297, 0.08699224169426056, 0.11891113597312597, 0.07994484205587682, 0.12343924632928427, 0.09787328007069285, 0.11436800332207808, 0.15402168450801423, 0.09528536578281543, 0.11343965643982812, 0.1577859392212262, 0.15195795592063222, 0.15805580870814995, 0.15863037187087448, 0.13613648781241316, 0.14961106828735415, 0.16062687645469376, 0.14519604189189517, 0.19082065086119382, 0.4408920589126246, 0.4611268328006797, 0.4567796333244726, 0.4303860103955398, 0.4907600082559408, 0.42453825300565595, 0.4630299646786864, 0.47732740198252444, 0.47005238107016656, 0.24856223550488554, 0.34681353902443013, 0.30318453032047166, 0.36658201590943196, 0.29266409910232905, 0.3270984249628439, 0.24073625463179738, 0.33955641497664535, 0.2793127324340985, 0.21772700664219646, 0.21280947151489316, 0.2109354584189963, 0.21096501523484723, 0.21904077661962806, 0.2256209691516211, 0.21263625029182542, 0.19668332905733654, 0.2353071706323534, 0.19292132609502455, 0.19316343234476985, 0.19189753596112036, 0.20659348689852763, 0.1997281231406074, 0.20231393989052104, 0.2020247718378998, 0.18892080710802017, 0.20554383512128938, 0.754683597018823, 0.6681572242013354, 0.8337983288163727, 0.8613866885630953, 0.19573213442819593, 0.20258498279863268, 0.7014784699252017, 0.287520738555909, 0.7875008199450193, 0.7683590504426461, 0.16617880955020503, 0.8009218282413861, 0.3377000830217831, 0.40910449422776995, 0.20536916917756864, 0.4426603535949607, 0.20515787597962076, 0.20577108010936318, 0.20564117147038474, 0.19152428609395833, 0.1837904408687907, 0.1776484214775097, 0.18458829408501187, 0.184835141336814, 0.1863387663157292, 0.19015501355560782, 0.18803538243116846, 0.09837243820115005, 0.07736519422798427, 0.08991674217324375, 0.08496660909110776, 0.09179470902031683, 0.0886417452163023, 0.0840487677451438, 0.07371846321040443, 0.0857606259011342]}, "mutation_prompt": null}
{"id": "b67bfec3-d5a7-4a93-b871-a36afc3d1394", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation strategy based on both individual and global best solutions\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity and exploration by leveraging a dynamic mutation strategy based on both individual and global best solutions.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "metadata": {"aucs": [0.8365520408646144, 0.8510975014455431, 0.8498906384458356, 0.8375529899959104, 0.8385086420061802, 0.8575587733365722, 0.839405986519701, 0.8349522492692518, 0.8481892124754217, 0.7069476168146787, 0.7078161316045944, 0.687211368837151, 0.7188543755231911, 0.7106209268393571, 0.6924896341885065, 0.7056252765944979, 0.7088355235219591, 0.6741242054540613, 0.1023047218995542, 0.12784577087075777, 0.12275991115694962, 0.1008757290518193, 0.10626590046876794, 0.14225144070828522, 0.11863504018194237, 0.11721591695734601, 0.15051887953522813, 0.12111350410429655, 0.09489985869699502, 0.10451339836007578, 0.09995475544950239, 0.09422179089399929, 0.10916920036428435, 0.10381107353151309, 0.1148548673031402, 0.09760329928541034, 0.9798839214602825, 0.9774585403703251, 0.9690589376263021, 0.9542018149663891, 0.9828251987515431, 0.9704812514486029, 0.9709377638387096, 0.9850731923288326, 0.9689744974629891, 0.5402321159285335, 0.5361985349463432, 0.5350163685631899, 0.5572959991779902, 0.5260755062230511, 0.5708812153228908, 0.4164925925232932, 0.522268578529087, 0.47565708432147347, 0.8075870825896818, 0.7056509480673986, 0.8434122394447319, 0.8671408764733537, 0.8223984044327887, 0.7680063523605614, 0.7602185277466027, 0.8041399009080962, 0.8353019831348403, 0.22213120241506235, 0.19286565493493724, 0.19317867069456363, 0.2009919602373712, 0.269153978089959, 0.2103089275675838, 0.26174280583059595, 0.5307551595638639, 0.2462754680333915, 0.20848332497549305, 0.20161623879902113, 0.2384959034447508, 0.18205033824145522, 0.29201184405712355, 0.1905598923567665, 0.18851449564055978, 0.1810695657785666, 0.19240009792686275, 0.08627854668692347, 0.20331848986508216, 0.2593569203531646, 0.1970019851245597, 0.16782863395384662, 0.3067489438952834, 0.27635995456710427, 0.106751560046082, 0.5123383590849793, 0.3175830775940892, 0.4725375759256475, 0.3460061952709583, 0.11945620876955543, 0.47507891030805605, 0.2648119485106539, 0.3657881885687445, 0.40674341395754876, 0.5896333297389048, 0.10071088615785484, 0.12783107596397802, 0.1213241997200839, 0.21103183530447933, 0.1515338829666889, 0.086443663238842, 0.17994123987904298, 0.09493887803641043, 0.10340800409276885, 0.27531639766551386, 0.2564709297657036, 0.3560040249983809, 0.193837848834305, 0.3372192567490422, 0.33034308683182356, 0.2398172274207827, 0.28145399940038773, 0.2901308320921673, 0.7152263904750968, 0.6951173860153359, 0.7630109203761846, 0.6843537066122812, 0.7390570637738993, 0.7660119331024181, 0.5747215919299451, 0.7064307549628472, 0.6239289093061297, 0.08699224169426056, 0.11891113597312597, 0.07994484205587682, 0.12343924632928427, 0.09787328007069285, 0.11436800332207808, 0.15402168450801423, 0.09528536578281543, 0.11343965643982812, 0.1577859392212262, 0.15195795592063222, 0.15805580870814995, 0.15863037187087448, 0.13613648781241316, 0.14961106828735415, 0.16062687645469376, 0.14519604189189517, 0.19082065086119382, 0.4408920589126246, 0.4611268328006797, 0.4567796333244726, 0.4303860103955398, 0.4907600082559408, 0.42453825300565595, 0.4630299646786864, 0.47732740198252444, 0.47005238107016656, 0.24856223550488554, 0.34681353902443013, 0.30318453032047166, 0.36658201590943196, 0.29266409910232905, 0.3270984249628439, 0.24073625463179738, 0.33955641497664535, 0.2793127324340985, 0.21772700664219646, 0.21280947151489316, 0.2109354584189963, 0.21096501523484723, 0.21904077661962806, 0.2256209691516211, 0.21263625029182542, 0.19668332905733654, 0.2353071706323534, 0.19292132609502455, 0.19316343234476985, 0.19189753596112036, 0.20659348689852763, 0.1997281231406074, 0.20231393989052104, 0.2020247718378998, 0.18892080710802017, 0.20554383512128938, 0.754683597018823, 0.6681572242013354, 0.8337983288163727, 0.8613866885630953, 0.19573213442819593, 0.20258498279863268, 0.7014784699252017, 0.287520738555909, 0.7875008199450193, 0.7683590504426461, 0.16617880955020503, 0.8009218282413861, 0.3377000830217831, 0.40910449422776995, 0.20536916917756864, 0.4426603535949607, 0.20515787597962076, 0.20577108010936318, 0.20564117147038474, 0.19152428609395833, 0.1837904408687907, 0.1776484214775097, 0.18458829408501187, 0.184835141336814, 0.1863387663157292, 0.19015501355560782, 0.18803538243116846, 0.09837243820115005, 0.07736519422798427, 0.08991674217324375, 0.08496660909110776, 0.09179470902031683, 0.0886417452163023, 0.0840487677451438, 0.07371846321040443, 0.0857606259011342]}, "mutation_prompt": null}
{"id": "050402aa-18c2-464e-af7b-d058705545b5", "solution": "class EnhancedDynamicMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation strategy based on both individual and global best solutions\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n        \n        return gbest", "name": "EnhancedDynamicMutationPSO_DE_Optimizer", "description": "Enhancing diversity and exploration by leveraging a dynamic mutation strategy based on both individual and global best solutions.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "metadata": {"aucs": [0.8365520408646144, 0.8510975014455431, 0.8498906384458356, 0.8375529899959104, 0.8385086420061802, 0.8575587733365722, 0.839405986519701, 0.8349522492692518, 0.8481892124754217, 0.7069476168146787, 0.7078161316045944, 0.687211368837151, 0.7188543755231911, 0.7106209268393571, 0.6924896341885065, 0.7056252765944979, 0.7088355235219591, 0.6741242054540613, 0.1023047218995542, 0.12784577087075777, 0.12275991115694962, 0.1008757290518193, 0.10626590046876794, 0.14225144070828522, 0.11863504018194237, 0.11721591695734601, 0.15051887953522813, 0.12111350410429655, 0.09489985869699502, 0.10451339836007578, 0.09995475544950239, 0.09422179089399929, 0.10916920036428435, 0.10381107353151309, 0.1148548673031402, 0.09760329928541034, 0.9798839214602825, 0.9774585403703251, 0.9690589376263021, 0.9542018149663891, 0.9828251987515431, 0.9704812514486029, 0.9709377638387096, 0.9850731923288326, 0.9689744974629891, 0.5402321159285335, 0.5361985349463432, 0.5350163685631899, 0.5572959991779902, 0.5260755062230511, 0.5708812153228908, 0.4164925925232932, 0.522268578529087, 0.47565708432147347, 0.8075870825896818, 0.7056509480673986, 0.8434122394447319, 0.8671408764733537, 0.8223984044327887, 0.7680063523605614, 0.7602185277466027, 0.8041399009080962, 0.8353019831348403, 0.22213120241506235, 0.19286565493493724, 0.19317867069456363, 0.2009919602373712, 0.269153978089959, 0.2103089275675838, 0.26174280583059595, 0.5307551595638639, 0.2462754680333915, 0.20848332497549305, 0.20161623879902113, 0.2384959034447508, 0.18205033824145522, 0.29201184405712355, 0.1905598923567665, 0.18851449564055978, 0.1810695657785666, 0.19240009792686275, 0.08627854668692347, 0.20331848986508216, 0.2593569203531646, 0.1970019851245597, 0.16782863395384662, 0.3067489438952834, 0.27635995456710427, 0.106751560046082, 0.5123383590849793, 0.3175830775940892, 0.4725375759256475, 0.3460061952709583, 0.11945620876955543, 0.47507891030805605, 0.2648119485106539, 0.3657881885687445, 0.40674341395754876, 0.5896333297389048, 0.10071088615785484, 0.12783107596397802, 0.1213241997200839, 0.21103183530447933, 0.1515338829666889, 0.086443663238842, 0.17994123987904298, 0.09493887803641043, 0.10340800409276885, 0.27531639766551386, 0.2564709297657036, 0.3560040249983809, 0.193837848834305, 0.3372192567490422, 0.33034308683182356, 0.2398172274207827, 0.28145399940038773, 0.2901308320921673, 0.7152263904750968, 0.6951173860153359, 0.7630109203761846, 0.6843537066122812, 0.7390570637738993, 0.7660119331024181, 0.5747215919299451, 0.7064307549628472, 0.6239289093061297, 0.08699224169426056, 0.11891113597312597, 0.07994484205587682, 0.12343924632928427, 0.09787328007069285, 0.11436800332207808, 0.15402168450801423, 0.09528536578281543, 0.11343965643982812, 0.1577859392212262, 0.15195795592063222, 0.15805580870814995, 0.15863037187087448, 0.13613648781241316, 0.14961106828735415, 0.16062687645469376, 0.14519604189189517, 0.19082065086119382, 0.4408920589126246, 0.4611268328006797, 0.4567796333244726, 0.4303860103955398, 0.4907600082559408, 0.42453825300565595, 0.4630299646786864, 0.47732740198252444, 0.47005238107016656, 0.24856223550488554, 0.34681353902443013, 0.30318453032047166, 0.36658201590943196, 0.29266409910232905, 0.3270984249628439, 0.24073625463179738, 0.33955641497664535, 0.2793127324340985, 0.21772700664219646, 0.21280947151489316, 0.2109354584189963, 0.21096501523484723, 0.21904077661962806, 0.2256209691516211, 0.21263625029182542, 0.19668332905733654, 0.2353071706323534, 0.19292132609502455, 0.19316343234476985, 0.19189753596112036, 0.20659348689852763, 0.1997281231406074, 0.20231393989052104, 0.2020247718378998, 0.18892080710802017, 0.20554383512128938, 0.754683597018823, 0.6681572242013354, 0.8337983288163727, 0.8613866885630953, 0.19573213442819593, 0.20258498279863268, 0.7014784699252017, 0.287520738555909, 0.7875008199450193, 0.7683590504426461, 0.16617880955020503, 0.8009218282413861, 0.3377000830217831, 0.40910449422776995, 0.20536916917756864, 0.4426603535949607, 0.20515787597962076, 0.20577108010936318, 0.20564117147038474, 0.19152428609395833, 0.1837904408687907, 0.1776484214775097, 0.18458829408501187, 0.184835141336814, 0.1863387663157292, 0.19015501355560782, 0.18803538243116846, 0.09837243820115005, 0.07736519422798427, 0.08991674217324375, 0.08496660909110776, 0.09179470902031683, 0.0886417452163023, 0.0840487677451438, 0.07371846321040443, 0.0857606259011342]}, "mutation_prompt": null}
{"id": "578cb359-6c0f-4438-a35f-49f199bb02df", "solution": "class EnhancedDynamicBoundaryPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation strategy based on both individual and global best solutions\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n                \n                # Dynamic boundary strategy to adapt search space\n                population = np.clip(population, -5.0, 5.0)\n        \n        return gbest", "name": "EnhancedDynamicBoundaryPSO_DE_Optimizer", "description": "Enhancing exploration by incorporating a dynamic boundary strategy to adapt the search space during optimization.", "configspace": "", "generation": 36, "fitness": 0.3661868852008603, "feedback": "The algorithm EnhancedDynamicBoundaryPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "metadata": {"aucs": [0.84218738890594, 0.8499374094001488, 0.8278931383643109, 0.8403483828890772, 0.8329089301820432, 0.8467730234156323, 0.8484102474266808, 0.8487924183667919, 0.8410103209887947, 0.6809292974677693, 0.6878417063026094, 0.6786838858339537, 0.6977351839615573, 0.7093783513510756, 0.6849969885360714, 0.676596480867498, 0.7006500379185885, 0.6820371017058833, 0.10460341137909412, 0.1301094053643248, 0.1236173483570554, 0.1241598132713232, 0.13266290762962396, 0.12086646371712162, 0.1479307561163652, 0.11695545930236695, 0.13029297484213598, 0.11051840357151721, 0.09953846695325397, 0.11680827123141624, 0.11032951684972303, 0.10289149152595567, 0.09563048062810342, 0.11018771398372684, 0.11023678658582325, 0.10551653356928181, 0.9626800958210892, 0.9770186327488648, 0.966741894390669, 0.9427835028367594, 0.9771915559117732, 0.9688795998385876, 0.9671955109263809, 0.9805500251321709, 0.9597251876537448, 0.5542912785189367, 0.5553847863124204, 0.5505231273575881, 0.5162724914297984, 0.5677498037358591, 0.5261355706549287, 0.5404660784952481, 0.4970013609142606, 0.5352714532585594, 0.7654005856613733, 0.693607317570281, 0.43694347445729864, 0.7551570991672956, 0.8141555072138609, 0.7900826311484546, 0.7482103091986505, 0.8342320620319057, 0.8397140261004606, 0.26685740772401867, 0.22325941660252224, 0.19004789940809685, 0.1963065597050806, 0.26298095929411214, 0.17293132747733475, 0.168000178393105, 0.18764680794421118, 0.24029000957033175, 0.17347004613369443, 0.21725992315197196, 0.1527662532895261, 0.17849330086358695, 0.28419281538802, 0.13618725681331667, 0.29111092967343244, 0.1848607495149619, 0.16568791959656992, 0.008066459813661053, 0.21624725368578446, 0.3051868967247894, 0.20650839261907017, 0.10748019218095961, 0.2346385142582299, 0.1584048915311751, 0.17984664200840783, 0.3104310377593983, 0.5014655722403817, 0.3407795431993511, 0.5108817523808271, 0.31312543250055525, 0.4748670831925138, 0.3508128991887013, 0.28491738237865694, 0.3285416374775133, 0.4353238249477682, 0.05954883580144121, 0.20028945170437695, 0.13216800233939963, 0.13725233427376515, 0.10873940068110421, 0.09042068239953893, 0.1908652545441426, 0.2777729848239805, 0.059414616750290916, 0.3021179537764126, 0.19427537804921613, 0.28424554422234527, 0.41432863702751876, 0.3496177161227654, 0.2740735511219853, 0.2519829678346005, 0.23790858524585856, 0.19100945345790865, 0.7058433843701006, 0.7376176958901668, 0.7564187815902109, 0.7860603323122826, 0.6380860919496538, 0.5693665998550739, 0.6841440437084414, 0.7356315357832202, 0.747495832293415, 0.10212651454985444, 0.12104362330367147, 0.10572858772613913, 0.09547030336079898, 0.10789102767727088, 0.11596488001115957, 0.10578054054948094, 0.12174017754650523, 0.09983690710231186, 0.16095528155899463, 0.16763985085072053, 0.18689584835101736, 0.12673213844989295, 0.14697099790137713, 0.13542577011419177, 0.13847138819715987, 0.14484089238810682, 0.16805006509818754, 0.4476487530617076, 0.3860247295135528, 0.4812734211341866, 0.4461452778818399, 0.4436678811794058, 0.4869767964131242, 0.4518785910043368, 0.4923983085903222, 0.4719154595788734, 0.297680722231929, 0.3143400906904821, 0.3163659515806556, 0.3283349043938337, 0.32095272226648286, 0.33058344387889993, 0.29873549337640715, 0.34662342550076053, 0.3454140314525024, 0.2237512148346259, 0.19685508382223138, 0.20250352591524456, 0.2071824318267167, 0.2105641856404551, 0.19872229846198242, 0.1987433814192282, 0.21924246797860525, 0.22236549306417974, 0.19448748327441467, 0.21006485075290238, 0.193864646809491, 0.2914295905793496, 0.2157428667511575, 0.24760609639012165, 0.19621761419983952, 0.20422286774572507, 0.19806090783802044, 0.7986621869555693, 0.8033279509110506, 0.5868355877647266, 0.8229076973880303, 0.19773565987957553, 0.17163764649798818, 0.5889350276220401, 0.4633818183515963, 0.7238167007177567, 0.7958918134818649, 0.16502014264461828, 0.4933372962075665, 0.16910090557367652, 0.36027889445502026, 0.20575314990432347, 0.41683588089886725, 0.20750836680232387, 0.27889576850342535, 0.20564117147038474, 0.18747582547733055, 0.170604624415016, 0.18121946377206855, 0.18339068714111972, 0.17970626414577362, 0.19649927541245293, 0.1813425694549443, 0.18445939335828287, 0.09796299629626737, 0.08583322889686673, 0.08751443616805643, 0.08841139241940787, 0.08736535560731395, 0.0965698409474871, 0.09915404997210864, 0.0838415731324681, 0.08945847115731631]}, "mutation_prompt": null}
{"id": "2f73e8bc-f2fc-4a07-8127-eb1d7d51d459", "solution": "class ImprovedEnhancedDynamicMutationPSO_DE_Optimizer(EnhancedDynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def chaotic_local_search(x, pbest, gbest, mutation_factor):\n            chaotic_factor = np.random.uniform(0.5, 1.5, size=self.dim)\n            chaotic_sol = x + chaotic_factor * np.random.rand(self.dim) * (pbest - x) + chaotic_factor * np.random.rand(self.dim) * (gbest - x)\n            return chaotic_sol\n\n        def evaluate(x):\n            return func(x)\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim)\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n\n                # Introducing chaotic local search for more intensive exploration\n                if np.random.rand() < 0.05:\n                    chaotic_sol = chaotic_local_search(population[i], pbest[i], gbest, mutation_factor)\n                    chaotic_score = evaluate(chaotic_sol)\n                    if chaotic_score < pbest_scores[i]:\n                        pbest[i] = chaotic_sol\n                        pbest_scores[i] = chaotic_score\n                        if chaotic_score < gbest_score:\n                            gbest = chaotic_sol\n                            gbest_score = chaotic_score\n\n        return gbest", "name": "ImprovedEnhancedDynamicMutationPSO_DE_Optimizer", "description": "Improving convergence by introducing a chaotic local search to explore promising regions more intensively.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'de' is not defined\").", "error": "NameError(\"name 'de' is not defined\")", "parent_id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "metadata": {}, "mutation_prompt": null}
{"id": "a1dfc3d4-edaf-4b8a-905b-0fa96e37c129", "solution": "class HybridMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def gaussian_mutation(x, sigma):\n            return x + np.random.normal(0, sigma, size=self.dim)\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                if np.random.rand() < 0.5:\n                    mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                    new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                else:\n                    new_sol = gaussian_mutation(population[i], 0.1)\n                    \n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "HybridMutationPSO_DE_Optimizer", "description": "Introducing a hybrid mutation strategy combining Differential Evolution and Gaussian mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 38, "fitness": 0.3423636221375254, "feedback": "The algorithm HybridMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.25.", "error": "", "parent_id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "metadata": {"aucs": [0.7983965342373153, 0.810779441834486, 0.8052148611341237, 0.8094928278821218, 0.8218862018756836, 0.8094233494495255, 0.807980011744831, 0.8115709214902663, 0.8224595334687528, 0.5705443181353165, 0.5801168469271514, 0.5554613455236989, 0.5726990020527474, 0.576180450718129, 0.5180170235566908, 0.5110951113756231, 0.5550650207187655, 0.5409602011351319, 0.1210473461267848, 0.14924827118183637, 0.1832360334208355, 0.1418174624735442, 0.1314178613653536, 0.13918865427143245, 0.13063387102211088, 0.123186900414336, 0.12517257438990748, 0.10267855145881144, 0.11715987922749571, 0.10912871418628145, 0.13750540197077332, 0.13112872548924803, 0.12843759915037023, 0.10791826207216981, 0.11700277345117938, 0.12657500017733891, 0.9828776857619823, 0.9887643064473267, 0.9859684275555282, 0.9882877459481847, 0.9838570747972977, 0.9828810432888054, 0.986746767669181, 0.988725545193057, 0.984309595208641, 0.4794586531212516, 0.44754580389034293, 0.4590508635865619, 0.45804422906022624, 0.4114732075714389, 0.42847557145867476, 0.417840710670467, 0.4176101800896551, 0.431084857866603, 0.2264112145926842, 0.8570929794327923, 0.602379943447108, 0.7348153313248917, 0.7931753958070241, 0.6047156791763427, 0.7764433560403442, 0.2400550802549698, 0.8336911486822407, 0.2162050000828316, 0.1771838992292709, 0.2192525028846941, 0.1951499103104648, 0.22378397135383654, 0.27900409686508054, 0.35875845347495705, 0.21507947551911166, 0.2661485875882629, 0.1993040957762764, 0.2351789377539728, 0.20188908310871534, 0.1335852029822101, 0.19914456957807447, 0.436926467698985, 0.20567685508928435, 0.23727431906478913, 0.21531147284387053, 0.07942071059887135, 0.18720251333900828, 0.14243416042418344, 0.15575917513285353, 0.16084359169614781, 0.14467663226721483, 0.25601545754553745, 0.16052187360548564, 0.093960790152259, 0.2169625122702672, 0.266542027644751, 0.2562775524017482, 0.3405600872789605, 0.13674771533488506, 0.13056852509033956, 0.2776241216419507, 0.3299179165407793, 0.2889917301789592, 0.10461724179725984, 0.15794677707220994, 0.20574854613173588, 0.10709828481143302, 0.056524931908461085, 0.08103567180974036, 0.1148341879887832, 0.013391573633874776, 0.0316549602306081, 0.2581991335460596, 0.2850617301650886, 0.3178199674095986, 0.26002047454981503, 0.20883716471702074, 0.3058857031847688, 0.16947797011925836, 0.21365725566792682, 0.1804596389491504, 0.6378311036317645, 0.5996461231216299, 0.6114389508583522, 0.6447609983517303, 0.5343356993865285, 0.6332153176801281, 0.6462954886552648, 0.5765000501244242, 0.6167760915871836, 0.12000119883795157, 0.11834876807576544, 0.10820075546810781, 0.13872383852318249, 0.10252914770872845, 0.13046212554822667, 0.11244826479529224, 0.11632540491873222, 0.14214194067025032, 0.28959178708785027, 0.301969616286746, 0.23804429436059382, 0.3448779883693619, 0.2627622479603051, 0.16747715052523982, 0.28191445982047303, 0.203872992795467, 0.1846049932478433, 0.4037591055413928, 0.4031388643009064, 0.4217642638606246, 0.4330882984363472, 0.42681388301627876, 0.3754272730934962, 0.41518382174135904, 0.4224616828617921, 0.44885164758501495, 0.3235670341596356, 0.3371646724044264, 0.3150072954733677, 0.24427177782421006, 0.21464864055898203, 0.3052830308374552, 0.3150225429258169, 0.28321883246281643, 0.2279117865710396, 0.1954063457009404, 0.22821744063212446, 0.2276096866146159, 0.20784780968518535, 0.2082155751265261, 0.2020654024491454, 0.20993574638304013, 0.215694270904368, 0.1937463693070154, 0.23942785912432551, 0.22374042779297176, 0.20070714656365218, 0.4515273673662328, 0.5458491076597618, 0.21744853281099885, 0.3114498852561106, 0.2241636608295371, 0.2103435880674609, 0.1820713830115792, 0.18354418475122258, 0.1562128468684627, 0.8593482998504428, 0.19967674801544533, 0.44263568541258635, 0.12237285916488905, 0.46616405928226434, 0.8645199808475508, 0.7829100288728719, 0.5180750105821622, 0.7228127528227493, 0.20861139561500908, 0.7317167610961581, 0.21062561286460468, 0.1654740388774748, 0.3199283247032192, 0.6811338638795681, 0.18238263275498112, 0.18700184831107713, 0.18469664559073917, 0.2244008514052579, 0.16823057279271247, 0.18327652659380422, 0.17246429048749812, 0.17061541588014373, 0.168002624550476, 0.08174364394533129, 0.08533866156461023, 0.10628305202055055, 0.08912355291985441, 0.07396707212674736, 0.08560865192956757, 0.10678515457404336, 0.08297024812274545, 0.08097513419550795]}, "mutation_prompt": null}
{"id": "c01fadb9-c2b0-4d23-a631-5737f7edf0e4", "solution": "class EnhancedExplorationMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation strategy based on a combination of individual and global best solutions with adaptive mutation rates\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * mutation_factor\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n        \n        return gbest", "name": "EnhancedExplorationMutationPSO_DE_Optimizer", "description": "Enhancing exploration by incorporating a dynamic mutation based on a combination of individual and global best solutions with adaptive mutation rates.", "configspace": "", "generation": 39, "fitness": 0.3755930207282953, "feedback": "The algorithm EnhancedExplorationMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.27.", "error": "", "parent_id": "f3dffe92-0347-4b3e-b8b3-28e43761dbd9", "metadata": {"aucs": [0.8613926116688535, 0.8485498708544192, 0.8413336617002694, 0.8399722948108805, 0.8474486258791849, 0.8499649352600234, 0.845677013688938, 0.8442546636491688, 0.8424169055105541, 0.696879417607048, 0.7025383060102985, 0.6704643646297528, 0.7051300385480656, 0.6926113593190031, 0.6663330170456856, 0.6795567766117059, 0.6905974186179202, 0.694370484028303, 0.11574218765038224, 0.16507209550353397, 0.10613573450267855, 0.1404028339603317, 0.09677258711319137, 0.13686222340039944, 0.13870860651354544, 0.12051104126974044, 0.12369203574991172, 0.11604592354375165, 0.09758517373978315, 0.10882237820916507, 0.09726790805425412, 0.136913193087147, 0.1332712148712697, 0.14000907939023277, 0.10398219129066566, 0.11539167141115181, 0.9812259466516515, 0.9803579431705262, 0.9690001052927144, 0.958426938819413, 0.9822587179851529, 0.9667935608398268, 0.9713232461202985, 0.9846847348640304, 0.9668102557688649, 0.5166754382855682, 0.5000222882715104, 0.5095920438009804, 0.538318933544411, 0.5357864332875708, 0.5660534232268868, 0.5394400688046515, 0.5670658964484256, 0.49501759185729466, 0.8364342429219624, 0.7950122712658798, 0.8011059228994704, 0.27811534493959766, 0.8381947280210735, 0.8345540102242207, 0.8181195181951882, 0.23448874730904457, 0.841530208833678, 0.28576471384188484, 0.13138573499873962, 0.20897349461593595, 0.2744047534279481, 0.20327887263124533, 0.2207263536602161, 0.19772697425911578, 0.2546355272595281, 0.1656919907128811, 0.15481493700191296, 0.2349805296854468, 0.20156511557340895, 0.2740171199934667, 0.23292335089800986, 0.22515725669351205, 0.508004636732629, 0.21360025757948697, 0.27034122788921, 0.1515930682565959, 0.3442431127040413, 0.29223825414253746, 0.34141098366491685, 0.2865412959596523, 0.23903519326996814, 0.20217723072288418, 0.25376783817485893, 0.3081459837740502, 0.43298165107179065, 0.36567146677252726, 0.2960679267505558, 0.25069353442275033, 0.6162722827067364, 0.21521128421255142, 0.5925483969502896, 0.20263556938083382, 0.28239125768094764, 0.16936625113838055, 0.15899902272856048, 0.13897960388385777, 0.1322433632014034, 0.270642166256053, 0.06769294395475567, 0.15191162536985903, 0.09275941627871964, 0.06427630320521127, 0.229973837718367, 0.3157237494740204, 0.262343647301595, 0.3586736394972263, 0.33243248872580466, 0.2609787664705687, 0.2318558262015057, 0.26252147748437393, 0.16009574992835096, 0.6543433411512756, 0.7087067590620344, 0.5771874208014574, 0.7419603225000504, 0.7809747975677391, 0.6176434192385276, 0.7596994662099887, 0.7547756575517417, 0.6833975769346884, 0.1154253712441119, 0.10460260722914427, 0.13174065363931753, 0.11127716313062097, 0.101519865016794, 0.10060596838987168, 0.11256001357008083, 0.12691679219174423, 0.11775039229857409, 0.17044500493914094, 0.21036892004290508, 0.14801063518973023, 0.185421251713074, 0.14050683452406865, 0.18481894100172414, 0.13550788248880508, 0.20436771845796753, 0.12588727370419306, 0.45136913512960697, 0.4415759381833493, 0.47318658015487713, 0.4878440631310039, 0.4539142266891215, 0.4210280130354572, 0.463068756488348, 0.522768434459377, 0.48276014559101854, 0.3571292379794473, 0.3495236200771621, 0.35307669482028514, 0.34143483742723524, 0.34705724475107913, 0.3670433144320263, 0.31061563188119745, 0.3197086070019174, 0.3033987292047765, 0.21919245846572932, 0.22291489069260528, 0.20776280775437406, 0.23456411207681993, 0.23191576029964922, 0.2156080605385181, 0.20835626866843626, 0.21856488643295924, 0.21022448183149367, 0.21593318682395535, 0.20561277492202745, 0.20621270098388844, 0.2953886791467105, 0.1828186882134194, 0.17521355358715773, 0.19357651972549272, 0.20680776115267907, 0.1841657476440295, 0.6672435340277192, 0.8035515074109125, 0.8907872404984469, 0.7982611536500958, 0.30864058347165946, 0.7942148462197235, 0.3903034110933583, 0.16836846734058475, 0.836287673573883, 0.7495911833248259, 0.24810691927288753, 0.6273191517803354, 0.313806363054109, 0.17287082327636194, 0.20841354804400147, 0.6309207593982591, 0.24192203167023285, 0.456924539166212, 0.20564117147038474, 0.18673787504432693, 0.18439393840865093, 0.18969906845780093, 0.19049387078238156, 0.1864244424083481, 0.194398920609545, 0.1880625599520077, 0.1876701849008272, 0.08515440625396664, 0.08943598915187523, 0.08627651854369456, 0.08309396543833969, 0.10104575812627914, 0.08392435830182055, 0.11121129885110714, 0.09059418388110319, 0.0763641680263305]}, "mutation_prompt": null}
{"id": "7b0416c0-b1dc-48aa-9b08-f2a201dbb7e8", "solution": "class EnhancedExplorationMutationSelfAdaptivePSO_DE_Optimizer(EnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Self-adaptive mutation strategy combining individual and global best solutions with dynamic control of mutation rates\n                if np.random.rand() < 0.1:\n                    dynamic_mutation_rate = 0.1 + 0.8*(1.0 - (self.budget - _)/self.budget)  # Dynamic mutation rate update\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * dynamic_mutation_rate\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n        \n        return gbest", "name": "EnhancedExplorationMutationSelfAdaptivePSO_DE_Optimizer", "description": "Enhancing exploration and exploitation balance by incorporating a self-adaptive mutation strategy based on individual and global best solutions with dynamic control of mutation rates.", "configspace": "", "generation": 40, "fitness": 0.3743244524452685, "feedback": "The algorithm EnhancedExplorationMutationSelfAdaptivePSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.28.", "error": "", "parent_id": "c01fadb9-c2b0-4d23-a631-5737f7edf0e4", "metadata": {"aucs": [0.8787032178788804, 0.8584514902999811, 0.864847258375326, 0.860115417176468, 0.8666591778424667, 0.8592068874166168, 0.8484089411161467, 0.8692114875166259, 0.8632730677228035, 0.7066768699208488, 0.7056540972576528, 0.7061338689956003, 0.7092675008724029, 0.6896180018152023, 0.7074096199050162, 0.7067724578423294, 0.7057216635780263, 0.7074436000243849, 0.11170977446154462, 0.1496257988761992, 0.19175290657482402, 0.12239701606935904, 0.11961098884199617, 0.10896858367915119, 0.10243985313284232, 0.14310324769667626, 0.13444838954612792, 0.10270186976511764, 0.1277474672200346, 0.13537096494810397, 0.1023026131624194, 0.1051199722560694, 0.1156584996430502, 0.12270642839855939, 0.10205346973318741, 0.1361799975061192, 0.9736729197408533, 0.9775089452031456, 0.9712513389151812, 0.9673742839781636, 0.9820114967808103, 0.9689993209606326, 0.9731432764722779, 0.9838639055424391, 0.9665784525831926, 0.5868459448650267, 0.6223917814772975, 0.6012936661724773, 0.6246762743800252, 0.6500244536858011, 0.5378126496640391, 0.559374049522294, 0.5951233657425021, 0.589460173037671, 0.8536097851746941, 0.3787186542885381, 0.22272733355635532, 0.8679518261043084, 0.27860907458243456, 0.27279903009427175, 0.8675517371881636, 0.7908455127486653, 0.858475730838563, 0.22572370666603114, 0.20686145103722642, 0.21325247062957609, 0.31662685935959567, 0.22366893928021025, 0.2543648552191323, 0.26811866178371213, 0.2672080275706339, 0.2384942139647589, 0.19899888675882182, 0.21356698078801994, 0.17841410874875785, 0.1924689622722865, 0.2264516151876872, 0.2032170159487907, 0.22762045427468192, 0.19795894527339297, 0.12934020909335142, 0.30821186466807515, 0.0404606044858532, 0.2925973952807144, 0.2064819931912636, 0.14135057934940032, 0.1872820320693891, 0.19460004532027497, 0.08499370689373376, 0.14785628924378047, 0.29341625383794145, 0.2069857644481563, 0.4929935603670701, 0.37120908969449906, 0.19876815859295183, 0.24647855660194862, 0.19640335506703255, 0.3737776910655849, 0.5689402889827341, 0.1946808619084115, 0.2174395762975727, 0.17155375180255283, 0.12952705968241496, 0.05430223022035785, 0.07948069158095472, 0.16581568957902304, 0.06600525564676829, 0.09502166124949019, 0.3047229268272872, 0.29548462296365663, 0.30135186969747396, 0.3989855653272616, 0.3070532072124005, 0.30215266645378835, 0.28290464979239527, 0.19529696460770019, 0.12870070635802455, 0.758027620025786, 0.6685294034302658, 0.8081393873825728, 0.7238816033041602, 0.7883627441066428, 0.6576126869204761, 0.7972665167993661, 0.6059254815601878, 0.7796231253851195, 0.12319863682140675, 0.1404220495953301, 0.10251153059660645, 0.12576170265797426, 0.10735262177487603, 0.13007070604491566, 0.13369933444250237, 0.12482597738607115, 0.10155549935591912, 0.137137931128122, 0.18404952596789803, 0.14439085937322904, 0.254345719104044, 0.16162060287311875, 0.1855020321841524, 0.24564932525696614, 0.17007175920848316, 0.1957562622914203, 0.486923162908914, 0.5044742434625415, 0.3830023628308331, 0.4912010541275441, 0.4577754382807985, 0.49725635804385715, 0.5114766647927544, 0.5091776808139952, 0.2460147538450862, 0.33240936619113637, 0.31991773320216077, 0.2473666598608003, 0.3380354346575457, 0.3577955340924851, 0.40922076282593833, 0.3445322666128324, 0.4131896250733793, 0.24163452905609906, 0.22076869766716312, 0.22878258517407302, 0.21522936268335846, 0.21599731823253876, 0.22834450087200076, 0.21151634213930248, 0.24189839114997147, 0.2411856169164247, 0.2031549650440948, 0.18968037277240246, 0.20154657124467956, 0.20496333080158846, 0.255661081637098, 0.19786139389420243, 0.19936446387061346, 0.20324781128669467, 0.1911569393152629, 0.2030926169639915, 0.8707167655782494, 0.8464777104326493, 0.893133186504177, 0.8550696464315157, 0.19835356410347682, 0.8537606299106784, 0.7098080910111391, 0.16911798556696345, 0.2386605410498397, 0.5213428795460757, 0.536367993388644, 0.7702052187693066, 0.7431613654170942, 0.20009332078621578, 0.20893472525451562, 0.5146297976604275, 0.42232325087328526, 0.44187918870889187, 0.20564117147038474, 0.1693583583010162, 0.18774011695930926, 0.1741831075503416, 0.17922335257297106, 0.17972102500624154, 0.17670789304613266, 0.1755386022282639, 0.18009362967784437, 0.09207498671066039, 0.09044573026138114, 0.09326245840756275, 0.08500279878395633, 0.09546903112801086, 0.08862076577270961, 0.1125093184635354, 0.08811091243209535, 0.0903849704980777]}, "mutation_prompt": null}
{"id": "bfcdef35-74c6-48ae-9bbe-de4c6f58201f", "solution": "class EnhancedExplorationMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation strategy based on a combination of individual and global best solutions with adaptive mutation rates\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * mutation_factor\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n        \n        return gbest", "name": "EnhancedExplorationMutationPSO_DE_Optimizer", "description": "Enhancing exploration by incorporating a dynamic mutation based on a combination of individual and global best solutions with adaptive mutation rates.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "c01fadb9-c2b0-4d23-a631-5737f7edf0e4", "metadata": {"aucs": [0.8613926116688535, 0.8485498708544192, 0.8413336617002694, 0.8399722948108805, 0.8474486258791849, 0.8499649352600234, 0.845677013688938, 0.8442546636491688, 0.8424169055105541, 0.696879417607048, 0.7025383060102985, 0.6704643646297528, 0.7051300385480656, 0.6926113593190031, 0.6663330170456856, 0.6795567766117059, 0.6905974186179202, 0.694370484028303, 0.11574218765038224, 0.16507209550353397, 0.10613573450267855, 0.1404028339603317, 0.09677258711319137, 0.13686222340039944, 0.13870860651354544, 0.12051104126974044, 0.12369203574991172, 0.11604592354375165, 0.09758517373978315, 0.10882237820916507, 0.09726790805425412, 0.136913193087147, 0.1332712148712697, 0.14000907939023277, 0.10398219129066566, 0.11539167141115181, 0.9812259466516515, 0.9803579431705262, 0.9690001052927144, 0.958426938819413, 0.9822587179851529, 0.9667935608398268, 0.9713232461202985, 0.9846847348640304, 0.9668102557688649, 0.5166754382855682, 0.5000222882715104, 0.5095920438009804, 0.538318933544411, 0.5357864332875708, 0.5660534232268868, 0.5394400688046515, 0.5670658964484256, 0.49501759185729466, 0.8364342429219624, 0.7950122712658798, 0.8011059228994704, 0.27811534493959766, 0.8381947280210735, 0.8345540102242207, 0.8181195181951882, 0.23448874730904457, 0.841530208833678, 0.28576471384188484, 0.13138573499873962, 0.20897349461593595, 0.2744047534279481, 0.20327887263124533, 0.2207263536602161, 0.19772697425911578, 0.2546355272595281, 0.1656919907128811, 0.15481493700191296, 0.2349805296854468, 0.20156511557340895, 0.2740171199934667, 0.23292335089800986, 0.22515725669351205, 0.508004636732629, 0.21360025757948697, 0.27034122788921, 0.1515930682565959, 0.3442431127040413, 0.29223825414253746, 0.34141098366491685, 0.2865412959596523, 0.23903519326996814, 0.20217723072288418, 0.25376783817485893, 0.3081459837740502, 0.43298165107179065, 0.36567146677252726, 0.2960679267505558, 0.25069353442275033, 0.6162722827067364, 0.21521128421255142, 0.5925483969502896, 0.20263556938083382, 0.28239125768094764, 0.16936625113838055, 0.15899902272856048, 0.13897960388385777, 0.1322433632014034, 0.270642166256053, 0.06769294395475567, 0.15191162536985903, 0.09275941627871964, 0.06427630320521127, 0.229973837718367, 0.3157237494740204, 0.262343647301595, 0.3586736394972263, 0.33243248872580466, 0.2609787664705687, 0.2318558262015057, 0.26252147748437393, 0.16009574992835096, 0.6543433411512756, 0.7087067590620344, 0.5771874208014574, 0.7419603225000504, 0.7809747975677391, 0.6176434192385276, 0.7596994662099887, 0.7547756575517417, 0.6833975769346884, 0.1154253712441119, 0.10460260722914427, 0.13174065363931753, 0.11127716313062097, 0.101519865016794, 0.10060596838987168, 0.11256001357008083, 0.12691679219174423, 0.11775039229857409, 0.17044500493914094, 0.21036892004290508, 0.14801063518973023, 0.185421251713074, 0.14050683452406865, 0.18481894100172414, 0.13550788248880508, 0.20436771845796753, 0.12588727370419306, 0.45136913512960697, 0.4415759381833493, 0.47318658015487713, 0.4878440631310039, 0.4539142266891215, 0.4210280130354572, 0.463068756488348, 0.522768434459377, 0.48276014559101854, 0.3571292379794473, 0.3495236200771621, 0.35307669482028514, 0.34143483742723524, 0.34705724475107913, 0.3670433144320263, 0.31061563188119745, 0.3197086070019174, 0.3033987292047765, 0.21919245846572932, 0.22291489069260528, 0.20776280775437406, 0.23456411207681993, 0.23191576029964922, 0.2156080605385181, 0.20835626866843626, 0.21856488643295924, 0.21022448183149367, 0.21593318682395535, 0.20561277492202745, 0.20621270098388844, 0.2953886791467105, 0.1828186882134194, 0.17521355358715773, 0.19357651972549272, 0.20680776115267907, 0.1841657476440295, 0.6672435340277192, 0.8035515074109125, 0.8907872404984469, 0.7982611536500958, 0.30864058347165946, 0.7942148462197235, 0.3903034110933583, 0.16836846734058475, 0.836287673573883, 0.7495911833248259, 0.24810691927288753, 0.6273191517803354, 0.313806363054109, 0.17287082327636194, 0.20841354804400147, 0.6309207593982591, 0.24192203167023285, 0.456924539166212, 0.20564117147038474, 0.18673787504432693, 0.18439393840865093, 0.18969906845780093, 0.19049387078238156, 0.1864244424083481, 0.194398920609545, 0.1880625599520077, 0.1876701849008272, 0.08515440625396664, 0.08943598915187523, 0.08627651854369456, 0.08309396543833969, 0.10104575812627914, 0.08392435830182055, 0.11121129885110714, 0.09059418388110319, 0.0763641680263305]}, "mutation_prompt": null}
{"id": "39438493-27e2-4a47-a7d4-b32245d5a086", "solution": "class EnhancedExplorationMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < np.clip(self.crossover_prob + np.random.normal(0, 0.05), 0.1, 0.9)\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation strategy based on a combination of individual and global best solutions with adaptive mutation rates\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * mutation_factor\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n        \n        return gbest", "name": "EnhancedExplorationMutationPSO_DE_Optimizer", "description": "Enhancing exploration and exploitation by introducing a dynamic mutation based on a combination of individual and global best solutions with adaptive learning rates and dynamically adjusting the crossover probability.", "configspace": "", "generation": 42, "fitness": 0.37262581083029195, "feedback": "The algorithm EnhancedExplorationMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "c01fadb9-c2b0-4d23-a631-5737f7edf0e4", "metadata": {"aucs": [0.8507628393947764, 0.8541574028555701, 0.8600269231680863, 0.8546819525195544, 0.8420013320516899, 0.8340710211240553, 0.8398251459798416, 0.8428436101490193, 0.8446576867166717, 0.686747347499334, 0.7023131545795716, 0.7030362181007026, 0.7123042846769814, 0.6955707608237507, 0.7022311211753245, 0.7004120034768279, 0.6988554630225476, 0.6927865980912455, 0.1363856010098662, 0.2168560730119785, 0.1339967770694691, 0.113159833782426, 0.13254619829301006, 0.12726785806842467, 0.12870175035620957, 0.14533022228134418, 0.1526779391387163, 0.11645219246157723, 0.10146049491271247, 0.11106012783023, 0.10073173142222713, 0.09618924868131451, 0.11383506411689837, 0.09949621485609472, 0.12272538168881075, 0.09632221463032042, 0.9710120102272054, 0.9814194730910347, 0.976410019823517, 0.9644531293594674, 0.9699366280492285, 0.9706453503132861, 0.9761712042306553, 0.9729350810568508, 0.972446963746703, 0.6265235287816554, 0.5467609954783215, 0.5026275532196814, 0.5812552724843483, 0.6224691613912815, 0.5899578572686759, 0.46856758702529233, 0.5251702438796793, 0.5493924106501177, 0.8257705553887362, 0.7290138028592855, 0.6005927681563489, 0.8209732797883623, 0.848293549209194, 0.7653307890881034, 0.8219188398832518, 0.7627826697790681, 0.8224437111762563, 0.2727104072668457, 0.20489068289352386, 0.2063451986758954, 0.18269594330525607, 0.3335951137269553, 0.21674276484531108, 0.2545125096018812, 0.19383918950034884, 0.19954713014520198, 0.26082872572254856, 0.1802088461011252, 0.2152483716601744, 0.1738242338014424, 0.1677538469034675, 0.1590133026630458, 0.24129618706604827, 0.18196702006028498, 0.2088340136452167, 0.3375265193599828, 0.14928140009817648, 0.29217597027307063, 0.25241930920691125, 0.3824618374116222, 0.03505837909921705, 0.07420856880487137, 0.4249101936550178, 0.22279085411059463, 0.33572642504983063, 0.3184699638006955, 0.5574793675310167, 0.2675728735045977, 0.17485255308289305, 0.24265076495883853, 0.19547120380992777, 0.659943388653967, 0.36782259541535867, 0.24972470877990616, 0.1545904512658579, 0.1850669468335624, 0.1567907432363017, 0.12017042224899666, 0.2289579427791899, 0.14447465280516603, 0.09634749387038044, 0.06583523767487509, 0.17191664003335994, 0.2734995014520928, 0.2605144022258101, 0.3230484642800501, 0.31757195332788046, 0.2638587410536205, 0.2112680181183494, 0.267271526458733, 0.23932998256262827, 0.6658234163213217, 0.710011255555552, 0.615399770563563, 0.589311819212675, 0.6554571378688621, 0.6330211447977387, 0.6359567106623807, 0.7464785113856834, 0.7650859047269905, 0.09684224159352928, 0.10924805425391038, 0.09476842923839046, 0.12163976166832413, 0.1528415164084308, 0.12773614346357554, 0.12817683091240595, 0.11563507114648497, 0.10981129516508448, 0.1618435450841842, 0.16178455173946693, 0.1234768263092767, 0.19904704438499843, 0.15786164736019215, 0.16648598838272521, 0.13902830498004637, 0.13871361684461458, 0.13276935128028056, 0.4863049804214078, 0.47018904738450207, 0.3714477802158027, 0.500173090425309, 0.3944779797807808, 0.4435131580768995, 0.490573032529693, 0.47372721014591845, 0.46339780699192634, 0.31908639536255556, 0.3807822742696225, 0.2972898984648479, 0.3462937706979192, 0.33766499168154995, 0.3718875936368107, 0.3172322468645262, 0.3598634848221184, 0.3405243525860475, 0.22121980000128483, 0.25043387155577346, 0.2180533293808613, 0.20925315078812323, 0.19965219623683395, 0.21515773194323684, 0.22242929686759028, 0.2324397868654059, 0.21097590778297626, 0.18998724971033054, 0.23400064631118245, 0.22424762611397742, 0.30930523020999456, 0.2428901169743264, 0.18880289802664751, 0.2096600015486204, 0.21009142949861503, 0.19553903962046404, 0.18664701229547875, 0.18556265258937787, 0.1828432846323873, 0.8710884250676593, 0.559917923243691, 0.19906466486273133, 0.6318255106514039, 0.7849182783636188, 0.8394423372317229, 0.7929496317458421, 0.17113058469782394, 0.2098027051135405, 0.7170405554623017, 0.1680397406118349, 0.20769846996132724, 0.6325101173730161, 0.6365129796230113, 0.6624086299012324, 0.17154062254353097, 0.17104471218809636, 0.1869359637659077, 0.17644991835914603, 0.1899478872820074, 0.19436228572923875, 0.1788695242575482, 0.18182148252875574, 0.1824315629926917, 0.1137099136155939, 0.08761499738792122, 0.08646569043362473, 0.08988505238371258, 0.07970712400023439, 0.08800258096328595, 0.08325895239898196, 0.09011939752058495, 0.09011196361831986]}, "mutation_prompt": null}
{"id": "f9b5f0e5-753f-4607-b52d-c03ff20d3795", "solution": "class EnhancedExplorationMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation strategy based on a combination of individual and global best solutions with adaptive mutation rates and opposition-based learning\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * mutation_factor\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n                            \n                    # Opposition-based learning\n                    opposite_sol = 2 * np.mean(np.array([pbest[i], gbest]), axis=0) - dynamic_mutant\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedExplorationMutationPSO_DE_Optimizer", "description": "Enhancing exploration by incorporating a dynamic mutation based on a combination of individual and global best solutions with adaptive mutation rates and a novel opposition-based learning strategy.", "configspace": "", "generation": 43, "fitness": 0.37769266299336096, "feedback": "The algorithm EnhancedExplorationMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.27.", "error": "", "parent_id": "c01fadb9-c2b0-4d23-a631-5737f7edf0e4", "metadata": {"aucs": [0.8565083103760865, 0.8528815162218504, 0.845656215622405, 0.8680537639498319, 0.849677566613092, 0.8486001897730289, 0.8342886332568997, 0.8535959059663805, 0.849294279132978, 0.7084332243533953, 0.6565014986135718, 0.6448916425921214, 0.7013618275413287, 0.6476423474486224, 0.6851412335671158, 0.6762361720392911, 0.6373700724820355, 0.6865919548925621, 0.1257061902911375, 0.25546782696219505, 0.13734104434390415, 0.11464391281597108, 0.13368849393552407, 0.1333102965181544, 0.12435130918888149, 0.13086554282103935, 0.15304644667605338, 0.10905136659792136, 0.10762652000204398, 0.1202333682453085, 0.11872086324700482, 0.09210131967543678, 0.1266474148281359, 0.09965212201282425, 0.13773306307399913, 0.09986759539922496, 0.9779980963168211, 0.978814972049836, 0.9772419486678807, 0.969604100189513, 0.9686296415760598, 0.9836335363729504, 0.9821285960353872, 0.9788378935508079, 0.9781826483857612, 0.5193552560610746, 0.5768918359638039, 0.5442380015515823, 0.5563801910958627, 0.6199829241741244, 0.5876824930482706, 0.461786573912366, 0.5721468060801149, 0.47292782743083295, 0.228620000054363, 0.9024512304948842, 0.7708988632198076, 0.7016925308551314, 0.7938196096340908, 0.8532467762558691, 0.839501650623504, 0.7856924132972509, 0.8565043920772328, 0.20752045619870785, 0.17573876206958572, 0.2264840130451352, 0.26509335036499526, 0.2729053832004863, 0.26585372860190937, 0.1743145904458916, 0.131287352045375, 0.6479245329974607, 0.1690512800490067, 0.6319811568435141, 0.1911846277204865, 0.15624786244438216, 0.3819812524224656, 0.19478409775706917, 0.2303105516229994, 0.21858466897692252, 0.43910879095422783, 0.1307282626153019, 0.048339036755992715, 0.08983219209943871, 0.10407158018315732, 0.15560639285502798, 0.06167658459458303, 0.07288234288345996, 0.0973799745020617, 0.036852531824321355, 0.18439709826456074, 0.08777006730200543, 0.2855174227912911, 0.29580072097783117, 0.26283346363140503, 0.19308578020090716, 0.4496659592468575, 0.32764587476384044, 0.6072106191895748, 0.23073352430779592, 0.1570504807121451, 0.2059373930728141, 0.09554411495982351, 0.2948028302190293, 0.06299159359191109, 0.23556343334521002, 0.20281963824447546, 0.060330602700294333, 0.26074527017154414, 0.22884496507559882, 0.23575852231010364, 0.26704558999586436, 0.3251070790695336, 0.2199291711756256, 0.2757357156007182, 0.16975556600364872, 0.19268113334622272, 0.5570379166669904, 0.749357076026737, 0.7595076014062846, 0.7384896305404236, 0.5884072730588077, 0.768513833357916, 0.7537852276610899, 0.6166467399904982, 0.625773159798209, 0.09481223711927345, 0.11368672726253748, 0.150739397053553, 0.14707894606175853, 0.1228726528849775, 0.14165755463141705, 0.12780163805866884, 0.09893508429850195, 0.13761558315203382, 0.15840573632719646, 0.16209532752028777, 0.1516451098476309, 0.20566238598671094, 0.18385627511474234, 0.19831836942795966, 0.25047822336567993, 0.16486584397410298, 0.1577854220048237, 0.43307566716536927, 0.45233726226038784, 0.35285786062644087, 0.39119809636420355, 0.49240712556061217, 0.4641622425750016, 0.4450276576183203, 0.4658029025508439, 0.41349979587940855, 0.30988170360502376, 0.3205318865359127, 0.3538633333301834, 0.3285054290978927, 0.3472178275556105, 0.3465472332285451, 0.2891519309473928, 0.30515631589465775, 0.3497083851054925, 0.2093786456704888, 0.2232987314961925, 0.2075535056211647, 0.2084367781716342, 0.22144111033677516, 0.24520577680681244, 0.20218871049307885, 0.20480589599505394, 0.22758710892338985, 0.22841830513555328, 0.19405312355209892, 0.22503512582512064, 0.33950166595424314, 0.24278600249109772, 0.214372877723351, 0.28765538526269907, 0.30073166386349626, 0.1928255564106135, 0.39128173847146497, 0.8729141807348766, 0.7423344506026751, 0.9033416393758251, 0.2009218476046788, 0.7368299101048762, 0.6098932260276667, 0.16914748440082772, 0.848396167702947, 0.7468165841356856, 0.1562732734185429, 0.686660917561027, 0.2884365074805396, 0.6329782737873004, 0.44615999068413015, 0.535059900878387, 0.6636317203001996, 0.7420590674124758, 0.2205108483577266, 0.18182879412942887, 0.1994800251219262, 0.20329548763172256, 0.1876390212997434, 0.21401458693123454, 0.1831024588543494, 0.2061313868479938, 0.18426418513182052, 0.08103209805601763, 0.09286103600207862, 0.08328605061421057, 0.08388413853169441, 0.09290488347088854, 0.08582822352922159, 0.10979250514355376, 0.10161657203785712, 0.08026557956024882]}, "mutation_prompt": null}
{"id": "2da51de8-f7da-4690-b670-bc2dfa9d77ec", "solution": "class EnhancedExplorationMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation strategy based on a combination of individual and global best solutions with adaptive mutation rates and opposition-based learning\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * mutation_factor\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n                            \n                    # Opposition-based learning\n                    opposite_sol = 2 * np.mean(np.array([pbest[i], gbest]), axis=0) - dynamic_mutant\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedExplorationMutationPSO_DE_Optimizer", "description": "Enhancing exploration by incorporating a dynamic mutation based on a combination of individual and global best solutions with adaptive mutation rates and a novel opposition-based learning strategy.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f9b5f0e5-753f-4607-b52d-c03ff20d3795", "metadata": {"aucs": [0.8565083103760865, 0.8528815162218504, 0.845656215622405, 0.8680537639498319, 0.849677566613092, 0.8486001897730289, 0.8342886332568997, 0.8535959059663805, 0.849294279132978, 0.7084332243533953, 0.6565014986135718, 0.6448916425921214, 0.7013618275413287, 0.6476423474486224, 0.6851412335671158, 0.6762361720392911, 0.6373700724820355, 0.6865919548925621, 0.1257061902911375, 0.25546782696219505, 0.13734104434390415, 0.11464391281597108, 0.13368849393552407, 0.1333102965181544, 0.12435130918888149, 0.13086554282103935, 0.15304644667605338, 0.10905136659792136, 0.10762652000204398, 0.1202333682453085, 0.11872086324700482, 0.09210131967543678, 0.1266474148281359, 0.09965212201282425, 0.13773306307399913, 0.09986759539922496, 0.9779980963168211, 0.978814972049836, 0.9772419486678807, 0.969604100189513, 0.9686296415760598, 0.9836335363729504, 0.9821285960353872, 0.9788378935508079, 0.9781826483857612, 0.5193552560610746, 0.5768918359638039, 0.5442380015515823, 0.5563801910958627, 0.6199829241741244, 0.5876824930482706, 0.461786573912366, 0.5721468060801149, 0.47292782743083295, 0.228620000054363, 0.9024512304948842, 0.7708988632198076, 0.7016925308551314, 0.7938196096340908, 0.8532467762558691, 0.839501650623504, 0.7856924132972509, 0.8565043920772328, 0.20752045619870785, 0.17573876206958572, 0.2264840130451352, 0.26509335036499526, 0.2729053832004863, 0.26585372860190937, 0.1743145904458916, 0.131287352045375, 0.6479245329974607, 0.1690512800490067, 0.6319811568435141, 0.1911846277204865, 0.15624786244438216, 0.3819812524224656, 0.19478409775706917, 0.2303105516229994, 0.21858466897692252, 0.43910879095422783, 0.1307282626153019, 0.048339036755992715, 0.08983219209943871, 0.10407158018315732, 0.15560639285502798, 0.06167658459458303, 0.07288234288345996, 0.0973799745020617, 0.036852531824321355, 0.18439709826456074, 0.08777006730200543, 0.2855174227912911, 0.29580072097783117, 0.26283346363140503, 0.19308578020090716, 0.4496659592468575, 0.32764587476384044, 0.6072106191895748, 0.23073352430779592, 0.1570504807121451, 0.2059373930728141, 0.09554411495982351, 0.2948028302190293, 0.06299159359191109, 0.23556343334521002, 0.20281963824447546, 0.060330602700294333, 0.26074527017154414, 0.22884496507559882, 0.23575852231010364, 0.26704558999586436, 0.3251070790695336, 0.2199291711756256, 0.2757357156007182, 0.16975556600364872, 0.19268113334622272, 0.5570379166669904, 0.749357076026737, 0.7595076014062846, 0.7384896305404236, 0.5884072730588077, 0.768513833357916, 0.7537852276610899, 0.6166467399904982, 0.625773159798209, 0.09481223711927345, 0.11368672726253748, 0.150739397053553, 0.14707894606175853, 0.1228726528849775, 0.14165755463141705, 0.12780163805866884, 0.09893508429850195, 0.13761558315203382, 0.15840573632719646, 0.16209532752028777, 0.1516451098476309, 0.20566238598671094, 0.18385627511474234, 0.19831836942795966, 0.25047822336567993, 0.16486584397410298, 0.1577854220048237, 0.43307566716536927, 0.45233726226038784, 0.35285786062644087, 0.39119809636420355, 0.49240712556061217, 0.4641622425750016, 0.4450276576183203, 0.4658029025508439, 0.41349979587940855, 0.30988170360502376, 0.3205318865359127, 0.3538633333301834, 0.3285054290978927, 0.3472178275556105, 0.3465472332285451, 0.2891519309473928, 0.30515631589465775, 0.3497083851054925, 0.2093786456704888, 0.2232987314961925, 0.2075535056211647, 0.2084367781716342, 0.22144111033677516, 0.24520577680681244, 0.20218871049307885, 0.20480589599505394, 0.22758710892338985, 0.22841830513555328, 0.19405312355209892, 0.22503512582512064, 0.33950166595424314, 0.24278600249109772, 0.214372877723351, 0.28765538526269907, 0.30073166386349626, 0.1928255564106135, 0.39128173847146497, 0.8729141807348766, 0.7423344506026751, 0.9033416393758251, 0.2009218476046788, 0.7368299101048762, 0.6098932260276667, 0.16914748440082772, 0.848396167702947, 0.7468165841356856, 0.1562732734185429, 0.686660917561027, 0.2884365074805396, 0.6329782737873004, 0.44615999068413015, 0.535059900878387, 0.6636317203001996, 0.7420590674124758, 0.2205108483577266, 0.18182879412942887, 0.1994800251219262, 0.20329548763172256, 0.1876390212997434, 0.21401458693123454, 0.1831024588543494, 0.2061313868479938, 0.18426418513182052, 0.08103209805601763, 0.09286103600207862, 0.08328605061421057, 0.08388413853169441, 0.09290488347088854, 0.08582822352922159, 0.10979250514355376, 0.10161657203785712, 0.08026557956024882]}, "mutation_prompt": null}
{"id": "6ae62eb9-9dcc-42a1-8cd5-5b7da6e20ee2", "solution": "class EnhancedOppositionLearningPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * mutation_factor\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n                            \n                    dist_to_gbest = np.linalg.norm(gbest - pbest[i])  # Calculate distance to global best\n                    scaling_factor = 1 / (1 + dist_to_gbest)  # Dynamic scaling factor based on distance\n                    scaled_opposite_sol = 2 * np.mean(np.array([pbest[i], gbest]), axis=0) - dynamic_mutant * scaling_factor\n                    scaled_opposite_score = evaluate(scaled_opposite_sol)\n                    if scaled_opposite_score < pbest_scores[i]:\n                        pbest[i] = scaled_opposite_sol\n                        pbest_scores[i] = scaled_opposite_score\n                        if scaled_opposite_score < gbest_score:\n                            gbest = scaled_opposite_sol\n                            gbest_score = scaled_opposite_score\n        \n        return gbest", "name": "EnhancedOppositionLearningPSO_DE_Optimizer", "description": "Enhance the opposition-based learning strategy by incorporating a dynamic scaling factor based on the distance between the current solution and the global best solution.", "configspace": "", "generation": 45, "fitness": 0.3650742286975361, "feedback": "The algorithm EnhancedOppositionLearningPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "f9b5f0e5-753f-4607-b52d-c03ff20d3795", "metadata": {"aucs": [0.8371062566902657, 0.8404420634920307, 0.8278560147662484, 0.8397590511880827, 0.8514783856204109, 0.8372627356373841, 0.8449939721573508, 0.8323323101194778, 0.8420507025807322, 0.6698854806310651, 0.6685973982769591, 0.6503948963704465, 0.6904228439209765, 0.6789769248034956, 0.7004235926787703, 0.6545054675378202, 0.6716162393963896, 0.681378453368479, 0.12484569977923643, 0.17155644398761027, 0.13180024360301013, 0.11878241188059069, 0.12537100762105324, 0.10524857755793782, 0.11687875563688577, 0.10854077657450001, 0.11383497902724993, 0.10484145001813527, 0.10303869881665761, 0.11006587802638845, 0.0996450816093769, 0.07974331893589237, 0.10476172235945669, 0.10747767495783733, 0.1096951789755729, 0.11985558585608125, 0.9840811828413721, 0.993437299066659, 0.9873578982479754, 0.9623684066348507, 0.9901071828395006, 0.9893215926919602, 0.9814025684551397, 0.9869172154712099, 0.9886882203222882, 0.4997240880692563, 0.5092023827989867, 0.49320871179000103, 0.5372919036977473, 0.47246964915692213, 0.5888491803174853, 0.4098943155288175, 0.5343654557946369, 0.5288310521420935, 0.7958092723118698, 0.7243772860243491, 0.8672387188865663, 0.27734912581579296, 0.8720570606688317, 0.8140278654683561, 0.7525412462914213, 0.23375810362815086, 0.8644665022545951, 0.22421927020178178, 0.220460988678845, 0.20857143821882662, 0.2174497785274333, 0.1799958630480507, 0.2104700082657831, 0.2724592104352932, 0.26961779513649076, 0.26423232583599177, 0.16072240893831236, 0.22193237532520094, 0.2037157070052883, 0.18646784861822585, 0.17852907734568757, 0.24621532178720973, 0.3926889708725949, 0.302039367714393, 0.18650151992482222, 0.1940602677854113, 0.0762353966171817, 0.27122616097893226, 0.30832553520184625, 0.3305393095174022, 0.19881572797449976, 0.09465245023650781, 0.09114218791972672, 0.16026576145397686, 0.39051609233793194, 0.4135716357198268, 0.28688502473217536, 0.3459629951640135, 0.5216599249316842, 0.3032329142027178, 0.5676306524982362, 0.341705250662374, 0.42407547850569494, 0.15274109259130741, 0.14236441995463678, 0.08796985652039113, 0.17651238301484629, 0.021549267474899714, 0.06348452233290336, 0.14905965147621247, 0.07300243638836856, 0.0625673472450411, 0.22360072741262593, 0.25382730982546886, 0.25965192657525993, 0.31686729559704674, 0.26526085561661694, 0.28091336706639036, 0.22298538171184135, 0.2581732399178669, 0.2853105413840704, 0.7507331972096033, 0.7400858828057797, 0.752404246708341, 0.6888523597737697, 0.7595205532907825, 0.6138841526660277, 0.7642290058525102, 0.778204011244015, 0.6367063086656771, 0.11051894976314502, 0.10276077383967275, 0.10845976095794918, 0.10854278663733874, 0.11449896154238681, 0.11125001785726307, 0.08881446342830801, 0.12793480774787713, 0.11089279425214793, 0.16528787873065232, 0.16586994866502136, 0.1418378233289439, 0.1600486068872713, 0.1518249986512028, 0.1835871762378708, 0.1383909955892123, 0.1605615942909524, 0.18512088541418037, 0.4679894015184881, 0.4601046963843711, 0.474584397273237, 0.41785418405696606, 0.4781639037831884, 0.4460627515574087, 0.4535666721859517, 0.4991060129965641, 0.47539332365098297, 0.31888748749112084, 0.29612167529441147, 0.332035812173783, 0.3051662143488464, 0.3348715989720119, 0.3382012467500345, 0.36056170245268837, 0.3985655778431657, 0.37036411362616484, 0.2183068997020301, 0.20947576677141555, 0.1981778512787732, 0.22633268014919772, 0.22887683259636948, 0.21663731281085707, 0.22300870586837884, 0.2243836395814216, 0.2409169402557919, 0.22650897325622843, 0.23175352177798425, 0.19895614584206966, 0.2857684986023882, 0.20617901638399794, 0.20079062739588371, 0.20752140965649546, 0.2037169626865969, 0.19897512672942308, 0.8307067168850254, 0.7522822923562124, 0.7095217519830409, 0.8754162850628504, 0.2006749829344452, 0.5950108767074984, 0.3870851286222814, 0.4704100728105657, 0.3757810596241531, 0.7382886473492778, 0.1966378818766069, 0.5901544630864707, 0.16901925141542995, 0.16740611506229575, 0.208989453296048, 0.37254479604814905, 0.17949298324057494, 0.402794120748698, 0.20559816028291067, 0.1780308411747672, 0.1824256021933799, 0.1784882361932698, 0.19035734263053694, 0.18566329916797697, 0.18176702656588473, 0.16921628167816616, 0.183763123710608, 0.08444724237467527, 0.09295799888285294, 0.08509360308089509, 0.0863586382789332, 0.09644775056706278, 0.08072643235039523, 0.09870072235484895, 0.09382918984224875, 0.08799097638330333]}, "mutation_prompt": null}
{"id": "ae13855b-8e90-4b20-97fc-30bf2bb076a6", "solution": "class EnhancedExplorationMutationPSO_DE_Optimizer(DynamicMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation strategy based on a combination of individual and global best solutions with adaptive mutation rates and opposition-based learning\n                if np.random.rand() < 0.1:\n                    dynamic_mutant = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * mutation_factor\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n                            \n                    # Opposition-based learning\n                    opposite_sol = 2 * np.mean(np.array([pbest[i], gbest]), axis=0) - dynamic_mutant\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedExplorationMutationPSO_DE_Optimizer", "description": "Enhancing exploration by incorporating a dynamic mutation based on a combination of individual and global best solutions with adaptive mutation rates and a novel opposition-based learning strategy.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f9b5f0e5-753f-4607-b52d-c03ff20d3795", "metadata": {"aucs": [0.8565083103760865, 0.8528815162218504, 0.845656215622405, 0.8680537639498319, 0.849677566613092, 0.8486001897730289, 0.8342886332568997, 0.8535959059663805, 0.849294279132978, 0.7084332243533953, 0.6565014986135718, 0.6448916425921214, 0.7013618275413287, 0.6476423474486224, 0.6851412335671158, 0.6762361720392911, 0.6373700724820355, 0.6865919548925621, 0.1257061902911375, 0.25546782696219505, 0.13734104434390415, 0.11464391281597108, 0.13368849393552407, 0.1333102965181544, 0.12435130918888149, 0.13086554282103935, 0.15304644667605338, 0.10905136659792136, 0.10762652000204398, 0.1202333682453085, 0.11872086324700482, 0.09210131967543678, 0.1266474148281359, 0.09965212201282425, 0.13773306307399913, 0.09986759539922496, 0.9779980963168211, 0.978814972049836, 0.9772419486678807, 0.969604100189513, 0.9686296415760598, 0.9836335363729504, 0.9821285960353872, 0.9788378935508079, 0.9781826483857612, 0.5193552560610746, 0.5768918359638039, 0.5442380015515823, 0.5563801910958627, 0.6199829241741244, 0.5876824930482706, 0.461786573912366, 0.5721468060801149, 0.47292782743083295, 0.228620000054363, 0.9024512304948842, 0.7708988632198076, 0.7016925308551314, 0.7938196096340908, 0.8532467762558691, 0.839501650623504, 0.7856924132972509, 0.8565043920772328, 0.20752045619870785, 0.17573876206958572, 0.2264840130451352, 0.26509335036499526, 0.2729053832004863, 0.26585372860190937, 0.1743145904458916, 0.131287352045375, 0.6479245329974607, 0.1690512800490067, 0.6319811568435141, 0.1911846277204865, 0.15624786244438216, 0.3819812524224656, 0.19478409775706917, 0.2303105516229994, 0.21858466897692252, 0.43910879095422783, 0.1307282626153019, 0.048339036755992715, 0.08983219209943871, 0.10407158018315732, 0.15560639285502798, 0.06167658459458303, 0.07288234288345996, 0.0973799745020617, 0.036852531824321355, 0.18439709826456074, 0.08777006730200543, 0.2855174227912911, 0.29580072097783117, 0.26283346363140503, 0.19308578020090716, 0.4496659592468575, 0.32764587476384044, 0.6072106191895748, 0.23073352430779592, 0.1570504807121451, 0.2059373930728141, 0.09554411495982351, 0.2948028302190293, 0.06299159359191109, 0.23556343334521002, 0.20281963824447546, 0.060330602700294333, 0.26074527017154414, 0.22884496507559882, 0.23575852231010364, 0.26704558999586436, 0.3251070790695336, 0.2199291711756256, 0.2757357156007182, 0.16975556600364872, 0.19268113334622272, 0.5570379166669904, 0.749357076026737, 0.7595076014062846, 0.7384896305404236, 0.5884072730588077, 0.768513833357916, 0.7537852276610899, 0.6166467399904982, 0.625773159798209, 0.09481223711927345, 0.11368672726253748, 0.150739397053553, 0.14707894606175853, 0.1228726528849775, 0.14165755463141705, 0.12780163805866884, 0.09893508429850195, 0.13761558315203382, 0.15840573632719646, 0.16209532752028777, 0.1516451098476309, 0.20566238598671094, 0.18385627511474234, 0.19831836942795966, 0.25047822336567993, 0.16486584397410298, 0.1577854220048237, 0.43307566716536927, 0.45233726226038784, 0.35285786062644087, 0.39119809636420355, 0.49240712556061217, 0.4641622425750016, 0.4450276576183203, 0.4658029025508439, 0.41349979587940855, 0.30988170360502376, 0.3205318865359127, 0.3538633333301834, 0.3285054290978927, 0.3472178275556105, 0.3465472332285451, 0.2891519309473928, 0.30515631589465775, 0.3497083851054925, 0.2093786456704888, 0.2232987314961925, 0.2075535056211647, 0.2084367781716342, 0.22144111033677516, 0.24520577680681244, 0.20218871049307885, 0.20480589599505394, 0.22758710892338985, 0.22841830513555328, 0.19405312355209892, 0.22503512582512064, 0.33950166595424314, 0.24278600249109772, 0.214372877723351, 0.28765538526269907, 0.30073166386349626, 0.1928255564106135, 0.39128173847146497, 0.8729141807348766, 0.7423344506026751, 0.9033416393758251, 0.2009218476046788, 0.7368299101048762, 0.6098932260276667, 0.16914748440082772, 0.848396167702947, 0.7468165841356856, 0.1562732734185429, 0.686660917561027, 0.2884365074805396, 0.6329782737873004, 0.44615999068413015, 0.535059900878387, 0.6636317203001996, 0.7420590674124758, 0.2205108483577266, 0.18182879412942887, 0.1994800251219262, 0.20329548763172256, 0.1876390212997434, 0.21401458693123454, 0.1831024588543494, 0.2061313868479938, 0.18426418513182052, 0.08103209805601763, 0.09286103600207862, 0.08328605061421057, 0.08388413853169441, 0.09290488347088854, 0.08582822352922159, 0.10979250514355376, 0.10161657203785712, 0.08026557956024882]}, "mutation_prompt": null}
{"id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "solution": "class ImprovedEnhancedExplorationMutationPSO_DE_Optimizer(EnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Adaptive opposition-based learning strategy for enhancing exploration\n                if np.random.rand() < 0.1:\n                    adaptive_opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) - np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    adaptive_opposite_score = evaluate(adaptive_opposite_sol)\n                    if adaptive_opposite_score < pbest_scores[i]:\n                        pbest[i] = adaptive_opposite_sol\n                        pbest_scores[i] = adaptive_opposite_score\n                        if adaptive_opposite_score < gbest_score:\n                            gbest = adaptive_opposite_sol\n                            gbest_score = adaptive_opposite_score\n        \n        return gbest", "name": "ImprovedEnhancedExplorationMutationPSO_DE_Optimizer", "description": "Improving exploration by introducing a novel adaptive opposition-based learning strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 47, "fitness": 0.3926763969797761, "feedback": "The algorithm ImprovedEnhancedExplorationMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "f9b5f0e5-753f-4607-b52d-c03ff20d3795", "metadata": {"aucs": [0.9004165228386075, 0.9080985046834731, 0.8952711079668174, 0.884836883671055, 0.8949060345589397, 0.8829749530074485, 0.878759886949311, 0.8992610573887623, 0.897419684054542, 0.7868384462731619, 0.7930510444104584, 0.7908465165734004, 0.7996310224858345, 0.7993371731862977, 0.8017311388785261, 0.7871341069131805, 0.799748111491417, 0.7788404938894694, 0.2320969758240562, 0.13335513518699227, 0.12649985303529188, 0.12845991418047575, 0.17771045902570026, 0.17160442414726207, 0.12802644696709653, 0.13319394029971787, 0.2960487723285441, 0.1172706406953885, 0.11320384112170812, 0.1088648811358982, 0.12347428811420946, 0.14204336469680934, 0.13970374261180718, 0.11928862281872421, 0.11604839766634356, 0.10123723846072297, 0.9700418223792026, 0.9740312332254146, 0.9690375450456866, 0.9675583208590751, 0.9825780618018568, 0.975588780883687, 0.978633142533986, 0.979333155080178, 0.9686361738004827, 0.6983736741585779, 0.678359161677853, 0.6565163152546938, 0.6722721359575352, 0.6945654467149078, 0.7108496804758331, 0.6901289077790684, 0.7107571894035418, 0.6392070640296263, 0.8881271028141318, 0.22394412297973731, 0.8078881940316317, 0.8518558448649045, 0.7442175241002105, 0.8707291222706033, 0.8485691117943307, 0.23376909917762834, 0.8527077375427694, 0.15177167350758014, 0.13116279936322173, 0.16605256440478788, 0.34963299273319437, 0.19000217179712886, 0.1523242433421068, 0.20120774793823326, 0.6717823098801723, 0.13094860287265397, 0.42788021460853143, 0.2661615538914289, 0.15143482810395126, 0.15363399705756897, 0.15918234758394467, 0.19088496577338887, 0.1739728238303937, 0.22375928827682834, 0.19649868711647, 0.12164832126010883, 0.2539397633685194, 0.4214482209113618, 0.3783195533352053, 0.19444685397344275, 0.3109975177829388, 0.1561658290008474, 0.12251707272888723, 0.27186923407033414, 0.5346215257292164, 0.5572103958389929, 0.5424183425593332, 0.2780397474222406, 0.2718214951479839, 0.5086252274725316, 0.455629326274426, 0.22130996794181312, 0.4927902555916769, 0.14726624959328494, 0.1776039411314918, 0.2170583332346243, 0.11200655203510579, 0.1710112210557867, 0.05904248327819428, 0.3764169644658746, 0.09579008167660463, 0.05049158952593169, 0.36510212095577255, 0.22711590578522267, 0.267847689609228, 0.29668613007053646, 0.19112978339928532, 0.2718648439533371, 0.2631322965643679, 0.2543268183931009, 0.24302660376605523, 0.6088099245902726, 0.6657710157843969, 0.6140969510984119, 0.603539183247431, 0.5950971207301604, 0.6559808747135061, 0.6658544434240217, 0.737489179838404, 0.714477480673781, 0.12494202397516563, 0.11338609578624548, 0.11526630406268468, 0.13557036519487353, 0.13711187796528335, 0.12531497729659513, 0.11382079029140257, 0.11692377597037507, 0.15766682552735534, 0.2623826587812752, 0.16649475615134945, 0.16475519221679313, 0.19091576958385303, 0.16533898274590286, 0.15088835680104018, 0.1749364667298161, 0.12279706119598233, 0.15452991884673883, 0.5045412821740904, 0.4105759171658102, 0.2802428681679744, 0.41739057455157613, 0.5089607116488191, 0.5760657218322245, 0.6608991587378337, 0.5526932049839005, 0.5105337250414026, 0.2488584874236588, 0.2962907217200764, 0.33045153276659645, 0.387302967482379, 0.29693050475341265, 0.3824472172361817, 0.255762102654953, 0.32230444479602416, 0.46189708728057155, 0.20878128293707654, 0.2065025087538903, 0.20020464953406925, 0.22724940650821224, 0.2126372527346584, 0.23920315973574802, 0.20019778146625133, 0.19769279012781793, 0.21492454243472958, 0.20398760424607298, 0.20465556770587356, 0.21165262222438985, 0.23137389343256654, 0.2453398692881147, 0.20287295306420938, 0.19541846099265292, 0.24643137070552779, 0.21795551121495504, 0.7961179137828882, 0.8522156700737943, 0.18606855777884723, 0.9252734772987246, 0.7474554667996582, 0.7685118570783023, 0.6116822967856439, 0.1685954084904936, 0.624354871830724, 0.6909097367741688, 0.15685368341075223, 0.570923654317063, 0.21099234867828165, 0.49812718924483357, 0.3570907222742732, 0.29126049728828407, 0.4951754937851631, 0.5437646698282907, 0.18143511623683584, 0.18413089230698354, 0.20605569235441512, 0.17862731638676266, 0.18375385791916343, 0.1767476776386835, 0.18474624734283907, 0.17846190658764194, 0.19067842859738549, 0.09029092730976751, 0.09102710727833396, 0.09329846478910475, 0.09021091715525142, 0.10248026990894976, 0.08754666181858628, 0.11834120462146291, 0.08591031792936832, 0.07905602602262918]}, "mutation_prompt": null}
{"id": "7fe940b7-1299-4bf1-a864-0fdeafc1396f", "solution": "class ImprovedEnhancedExplorationMutationPSO_DE_Optimizer(EnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Adaptive opposition-based learning strategy for enhancing exploration\n                if np.random.rand() < 0.1:\n                    adaptive_opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) - np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    adaptive_opposite_score = evaluate(adaptive_opposite_sol)\n                    if adaptive_opposite_score < pbest_scores[i]:\n                        pbest[i] = adaptive_opposite_sol\n                        pbest_scores[i] = adaptive_opposite_score\n                        if adaptive_opposite_score < gbest_score:\n                            gbest = adaptive_opposite_sol\n                            gbest_score = adaptive_opposite_score\n        \n        return gbest", "name": "ImprovedEnhancedExplorationMutationPSO_DE_Optimizer", "description": "Improving exploration by introducing a novel adaptive opposition-based learning strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "metadata": {"aucs": [0.9004165228386075, 0.9080985046834731, 0.8952711079668174, 0.884836883671055, 0.8949060345589397, 0.8829749530074485, 0.878759886949311, 0.8992610573887623, 0.897419684054542, 0.7868384462731619, 0.7930510444104584, 0.7908465165734004, 0.7996310224858345, 0.7993371731862977, 0.8017311388785261, 0.7871341069131805, 0.799748111491417, 0.7788404938894694, 0.2320969758240562, 0.13335513518699227, 0.12649985303529188, 0.12845991418047575, 0.17771045902570026, 0.17160442414726207, 0.12802644696709653, 0.13319394029971787, 0.2960487723285441, 0.1172706406953885, 0.11320384112170812, 0.1088648811358982, 0.12347428811420946, 0.14204336469680934, 0.13970374261180718, 0.11928862281872421, 0.11604839766634356, 0.10123723846072297, 0.9700418223792026, 0.9740312332254146, 0.9690375450456866, 0.9675583208590751, 0.9825780618018568, 0.975588780883687, 0.978633142533986, 0.979333155080178, 0.9686361738004827, 0.6983736741585779, 0.678359161677853, 0.6565163152546938, 0.6722721359575352, 0.6945654467149078, 0.7108496804758331, 0.6901289077790684, 0.7107571894035418, 0.6392070640296263, 0.8881271028141318, 0.22394412297973731, 0.8078881940316317, 0.8518558448649045, 0.7442175241002105, 0.8707291222706033, 0.8485691117943307, 0.23376909917762834, 0.8527077375427694, 0.15177167350758014, 0.13116279936322173, 0.16605256440478788, 0.34963299273319437, 0.19000217179712886, 0.1523242433421068, 0.20120774793823326, 0.6717823098801723, 0.13094860287265397, 0.42788021460853143, 0.2661615538914289, 0.15143482810395126, 0.15363399705756897, 0.15918234758394467, 0.19088496577338887, 0.1739728238303937, 0.22375928827682834, 0.19649868711647, 0.12164832126010883, 0.2539397633685194, 0.4214482209113618, 0.3783195533352053, 0.19444685397344275, 0.3109975177829388, 0.1561658290008474, 0.12251707272888723, 0.27186923407033414, 0.5346215257292164, 0.5572103958389929, 0.5424183425593332, 0.2780397474222406, 0.2718214951479839, 0.5086252274725316, 0.455629326274426, 0.22130996794181312, 0.4927902555916769, 0.14726624959328494, 0.1776039411314918, 0.2170583332346243, 0.11200655203510579, 0.1710112210557867, 0.05904248327819428, 0.3764169644658746, 0.09579008167660463, 0.05049158952593169, 0.36510212095577255, 0.22711590578522267, 0.267847689609228, 0.29668613007053646, 0.19112978339928532, 0.2718648439533371, 0.2631322965643679, 0.2543268183931009, 0.24302660376605523, 0.6088099245902726, 0.6657710157843969, 0.6140969510984119, 0.603539183247431, 0.5950971207301604, 0.6559808747135061, 0.6658544434240217, 0.737489179838404, 0.714477480673781, 0.12494202397516563, 0.11338609578624548, 0.11526630406268468, 0.13557036519487353, 0.13711187796528335, 0.12531497729659513, 0.11382079029140257, 0.11692377597037507, 0.15766682552735534, 0.2623826587812752, 0.16649475615134945, 0.16475519221679313, 0.19091576958385303, 0.16533898274590286, 0.15088835680104018, 0.1749364667298161, 0.12279706119598233, 0.15452991884673883, 0.5045412821740904, 0.4105759171658102, 0.2802428681679744, 0.41739057455157613, 0.5089607116488191, 0.5760657218322245, 0.6608991587378337, 0.5526932049839005, 0.5105337250414026, 0.2488584874236588, 0.2962907217200764, 0.33045153276659645, 0.387302967482379, 0.29693050475341265, 0.3824472172361817, 0.255762102654953, 0.32230444479602416, 0.46189708728057155, 0.20878128293707654, 0.2065025087538903, 0.20020464953406925, 0.22724940650821224, 0.2126372527346584, 0.23920315973574802, 0.20019778146625133, 0.19769279012781793, 0.21492454243472958, 0.20398760424607298, 0.20465556770587356, 0.21165262222438985, 0.23137389343256654, 0.2453398692881147, 0.20287295306420938, 0.19541846099265292, 0.24643137070552779, 0.21795551121495504, 0.7961179137828882, 0.8522156700737943, 0.18606855777884723, 0.9252734772987246, 0.7474554667996582, 0.7685118570783023, 0.6116822967856439, 0.1685954084904936, 0.624354871830724, 0.6909097367741688, 0.15685368341075223, 0.570923654317063, 0.21099234867828165, 0.49812718924483357, 0.3570907222742732, 0.29126049728828407, 0.4951754937851631, 0.5437646698282907, 0.18143511623683584, 0.18413089230698354, 0.20605569235441512, 0.17862731638676266, 0.18375385791916343, 0.1767476776386835, 0.18474624734283907, 0.17846190658764194, 0.19067842859738549, 0.09029092730976751, 0.09102710727833396, 0.09329846478910475, 0.09021091715525142, 0.10248026990894976, 0.08754666181858628, 0.11834120462146291, 0.08591031792936832, 0.07905602602262918]}, "mutation_prompt": null}
{"id": "5b4e7364-4c8a-47cc-9ecc-c94c03f97403", "solution": "class ImprovedEnhancedExplorationMutationChaoticPSO_DE_Optimizer(EnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Chaotic search mechanism for enhancing population diversity\n                if np.random.rand() < 0.1:\n                    chaotic_sol = population[i] + np.random.uniform(-1, 1, size=self.dim) * np.random.rand() * (gbest - population[i])\n                    chaotic_score = evaluate(chaotic_sol)\n                    if chaotic_score < pbest_scores[i]:\n                        pbest[i] = chaotic_sol\n                        pbest_scores[i] = chaotic_score\n                        if chaotic_score < gbest_score:\n                            gbest = chaotic_sol\n                            gbest_score = chaotic_score\n        \n        return gbest", "name": "ImprovedEnhancedExplorationMutationChaoticPSO_DE_Optimizer", "description": "Enhancing population diversity by incorporating a chaotic search mechanism to explore the solution space more effectively.", "configspace": "", "generation": 49, "fitness": 0.3851726839732825, "feedback": "The algorithm ImprovedEnhancedExplorationMutationChaoticPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.27.", "error": "", "parent_id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "metadata": {"aucs": [0.8431427644549941, 0.8416935292811305, 0.8488286528177417, 0.8307538819112799, 0.8259184761796472, 0.8482714810560674, 0.8422359596367399, 0.8337241027894681, 0.8424962023004317, 0.7109130593036315, 0.7023638131148244, 0.7072981335929844, 0.7135936197620267, 0.6963319160799587, 0.7253552981153658, 0.7271037704173429, 0.7274178793141854, 0.716939064680413, 0.12999452383353305, 0.1330470172920606, 0.19928286238213166, 0.1276773842546488, 0.17040503697967013, 0.13686498296669103, 0.262823403184993, 0.14330666357953392, 0.1312671978162433, 0.1036576941594165, 0.12518675931083834, 0.10853193712357001, 0.16464588090236743, 0.12765520067739977, 0.13238425634552187, 0.11020083330580632, 0.10947725492889149, 0.10975626784409409, 0.9751267582904597, 0.9796496620506611, 0.9787176942794806, 0.969895379047692, 0.987508100197893, 0.9728877960852226, 0.9809438855382255, 0.9805310394569511, 0.9832722341947919, 0.5658214024007926, 0.5395391370796309, 0.5596225033751284, 0.5806993408298098, 0.5519622697029952, 0.571436551885014, 0.5392045260307686, 0.5827620423093551, 0.47358621083139896, 0.8158603923619998, 0.6703306113053837, 0.21833077587777872, 0.7775663332678088, 0.8125612362869166, 0.8750326606397575, 0.792603181568101, 0.7659763203736604, 0.7946532532495516, 0.20035467613479419, 0.3044785173978972, 0.21260799757533244, 0.21920718980342235, 0.1805292026853743, 0.2682449732661123, 0.18301468205652716, 0.2568812355188085, 0.1847836517137068, 0.2543963151808263, 0.18946947267779735, 0.1885849718323509, 0.1746445022419597, 0.23187853635672195, 0.23619548445380745, 0.20337538597023752, 0.1913016748456674, 0.20782542285844008, 0.2354600285744829, 0.17258093621785897, 0.447470448523538, 0.25426472809882494, 0.2420333919600245, 0.15827903335588722, 0.3662509004865002, 0.11206561902352818, 0.3068165690419248, 0.32801389113513557, 0.48560092109093234, 0.3340846199072899, 0.1130204167183434, 0.4633522952944509, 0.16433756257089938, 0.3697955681564242, 0.3224645513410953, 0.39986870932237994, 0.15349406586420555, 0.09728024527167067, 0.1413127295755996, 0.15790689203117125, 0.22336873663510826, 0.11801494815891311, 0.2749143170807101, 0.19137659657341788, 0.11464615802199862, 0.25181747697988444, 0.3112898404265595, 0.32055580965674035, 0.3396137796343156, 0.2975362822096488, 0.2442146753614639, 0.26852722163502685, 0.25669446541763086, 0.19597340744600322, 0.7205763115321697, 0.6993867941000138, 0.652253529863386, 0.7633682366399195, 0.575443703542337, 0.5581482383787438, 0.6609304761295026, 0.7036921304005168, 0.6243662329957398, 0.1343011954509571, 0.11990192647061582, 0.13524736424345973, 0.09522356199531601, 0.1278800115659895, 0.1205655114526426, 0.13776726677090212, 0.11885217738801623, 0.1533095234468954, 0.1329694551588303, 0.14420123984318722, 0.1862998708525887, 0.17109742338468714, 0.14382578109642186, 0.15482472035624828, 0.2384578510922436, 0.17663841281108694, 0.1684425540423392, 0.49142015834194563, 0.3879890695095142, 0.4726138371459446, 0.5158227734190576, 0.49861031777651466, 0.4671364214615572, 0.5401307865039441, 0.5523355511394079, 0.46209090674744424, 0.3483210855988864, 0.256041496172027, 0.34237557840744004, 0.39042367353660445, 0.3105538392890591, 0.32576874260957234, 0.4142147056244636, 0.37975692126990757, 0.3517420177990568, 0.20111492451824442, 0.19828192949009105, 0.21044002022902997, 0.2121474092631872, 0.1898045251152516, 0.20942953420668053, 0.22459806529153115, 0.18956257882288052, 0.19799209073800594, 0.19591821834191692, 0.18551181340234835, 0.2294396913753909, 0.21363502561587644, 0.20515693487704112, 0.2023851463066455, 0.1985067448782566, 0.20573562301294535, 0.20879897549801962, 0.7770995935513136, 0.8169441581379773, 0.5816456472728366, 0.8434489146613295, 0.19851232509743488, 0.716581367201741, 0.6685054374441834, 0.6336121848278857, 0.8475466062359989, 0.7819945697468962, 0.3072142316578498, 0.7184147379040589, 0.410551740447725, 0.5513448829151683, 0.5412780045834967, 0.43740318476384843, 0.5767152364672772, 0.6730491466786299, 0.18805717625092022, 0.18281219327044274, 0.1684183345506597, 0.1737929701740577, 0.17657250752233644, 0.1765656608202325, 0.17534415372508905, 0.19198421512393704, 0.19260187216310065, 0.07515457536861925, 0.07655581752950069, 0.08557702540051593, 0.08447011034129082, 0.08093716091012504, 0.07993354500979022, 0.08495897692040633, 0.10088982597782548, 0.08833322165183854]}, "mutation_prompt": null}
{"id": "a5ae9ade-00d3-4796-a6ba-bec2eb5c03d7", "solution": "class EnhancedDiversityDE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Adaptive opposition-based learning strategy for enhancing exploration\n                if np.random.rand() < 0.1:\n                    adaptive_opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) - np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    adaptive_opposite_score = evaluate(adaptive_opposite_sol)\n                    if adaptive_opposite_score < pbest_scores[i]:\n                        pbest[i] = adaptive_opposite_sol\n                        pbest_scores[i] = adaptive_opposite_score\n                        if adaptive_opposite_score < gbest_score:\n                            gbest = adaptive_opposite_sol\n                            gbest_score = adaptive_opposite_score\n                \n                # Dynamic adaptation of mutation factor for diversity enhancement\n                if np.random.rand() < 0.2:\n                    self.mutation_factor = min(self.mutation_factor + 0.05, 0.9)\n                    mutation_factor = self.mutation_factor\n                \n        return gbest", "name": "EnhancedDiversityDE_Optimizer", "description": "Enhancing population diversity by incorporating a dynamic parameter adaptation mechanism for mutation factor in Differential Evolution.", "configspace": "", "generation": 50, "fitness": 0.3235163081127976, "feedback": "The algorithm EnhancedDiversityDE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "metadata": {"aucs": [0.8318102226544125, 0.827095875860391, 0.8339015850347384, 0.8386256173721587, 0.8208802204377899, 0.8380671099995531, 0.8235264780438062, 0.8196565553577655, 0.824386656606887, 0.6850855588334601, 0.6704700164134066, 0.6650712573543225, 0.6890246138299622, 0.6842516484327024, 0.6903445768689995, 0.6368956660480183, 0.6725606257766893, 0.655147154582916, 0.1232874778500207, 0.13090707506807997, 0.15695075730429076, 0.1315622062217202, 0.14719136344715478, 0.11425195798609633, 0.1181048763988507, 0.13222005496378408, 0.14473207596236193, 0.13699398926764694, 0.09604486872811635, 0.12207416441255137, 0.12037363710753757, 0.11633426632181565, 0.1399567379589458, 0.09942742424340945, 0.12472245928808157, 0.11941012279387597, 0.986744041579625, 0.986611115125932, 0.9852927211845172, 0.980543628169012, 0.9823179615929831, 0.9757914536874027, 0.9877680559112579, 0.9767822956727665, 0.9818347962314683, 0.49677917413430694, 0.4567745712976442, 0.4788288148521419, 0.5285327774029247, 0.5349463945140502, 0.4892934564103735, 0.45887890669953313, 0.4472985731897223, 0.4287700171093748, 0.5314996644847898, 0.7692737802667947, 0.7258849046725745, 0.2741758666369494, 0.7427512710038109, 0.2763305667899242, 0.716332198200488, 0.6949580164500498, 0.7230609620309646, 0.10954838326397676, 0.22757060654065187, 0.25976139915724505, 0.37345079244641566, 0.4336887471949479, 0.24345123123728762, 0.2357467755399365, 0.21800994927999517, 0.22147842521140193, 0.26724639370105796, 0.23359188046140744, 0.27441977774560866, 0.17841925760794597, 0.29228086452142465, 0.2475590868177222, 0.24174968721088108, 0.35045732183972533, 0.2389939907649632, 0.0265170614516943, 0.027947939047669235, 0.0001345188948729259, 0.04588136232467477, 0.0380103768537281, 0.00042366084583367325, 0.10093137053524592, 0.07329399331510433, 0.02095817915300091, 0.09630458141210108, 0.07881761820811406, 0.14747231102894498, 0.160950818795906, 0.12213632841829236, 0.11200173970301242, 0.07062555832939399, 0.13603125747425926, 0.14439730431336573, 0.09763281852919592, 0.061079397653607925, 9.999999999998899e-05, 0.10036947356078196, 0.02357265639666639, 0.10039177871371763, 0.2012747565218559, 0.12356793852748638, 0.10354529908626586, 0.26636828139501123, 0.20864368746426176, 0.22306586838410736, 0.22236774658767733, 0.21927591483766107, 0.20167037516043118, 0.18769217947946248, 0.18364352982320264, 0.21485884697989455, 0.5677885298047032, 0.5730474228664285, 0.5760767330419948, 0.553516946745565, 0.5860438265331346, 0.5818744989192717, 0.6142984569073558, 0.5879597130890113, 0.5896052410874619, 0.1412770581873456, 0.0901497486556857, 0.12528634645928527, 0.12284642642489085, 0.11922827438398487, 0.09165156129884888, 0.09786964790456676, 0.14492925320551553, 0.0843337053204739, 0.14343208738795532, 0.11116484255564096, 0.12245397246412981, 0.14969214100915573, 0.11623761872815208, 0.11061217867759499, 0.13676771964033374, 0.2608414469554008, 0.18331283793298914, 0.3112712268974527, 0.2430261412318171, 0.4328310812427024, 0.3049853693712703, 0.40744478595739286, 0.3664150270301447, 0.4851422874564276, 0.4626813644957304, 0.3753117635066312, 0.2574970055789666, 0.25719655684888143, 0.24654460028631953, 0.2753373021588489, 0.25539720252056264, 0.2580209328661808, 0.3152719355511683, 0.31086694735326137, 0.26685251420015244, 0.18983219071600155, 0.18356344347565412, 0.18024842386381057, 0.2033116432442964, 0.18361271684098646, 0.2022321778428139, 0.19399210890291008, 0.18425298932556966, 0.1972019964069439, 0.21271472116740675, 0.21050584783573068, 0.18593493174214792, 0.19487102557446534, 0.18288535532852268, 0.20333799286627063, 0.19531832568468654, 0.21904615936292882, 0.19870485726193043, 0.7278348502485621, 0.18133630311336624, 0.5954419471937691, 0.8800618734080052, 0.25229950139021295, 0.22754635923623512, 0.16590971788271058, 0.16598815768584407, 0.20706090773336905, 0.7738003542933553, 0.27560771067121426, 0.7138559044926022, 0.2998499627064677, 0.16655258430848663, 0.46565579954980996, 0.7208846054648782, 0.16634200836558466, 0.3558380711084902, 0.1792234386645345, 0.19273731949291173, 0.2005207699930649, 0.18650840756132747, 0.17632833777247647, 0.18394672697108405, 0.17995129546380773, 0.18166122814049557, 0.17219570060975997, 0.10615788565702045, 0.08159374398418606, 0.0788121018796859, 0.09303703418835063, 0.07581602709371127, 0.0849927303852388, 0.08054729109954062, 0.07984029197840681, 0.07904237450904295]}, "mutation_prompt": null}
{"id": "3408dd7c-ae16-42d3-9831-fa93561b46d1", "solution": "class ImprovedEnhancedExplorationMutationPSO_DE_Optimizer(EnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Adaptive opposition-based learning strategy for enhancing exploration\n                if np.random.rand() < 0.1:\n                    adaptive_opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) - np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    adaptive_opposite_score = evaluate(adaptive_opposite_sol)\n                    if adaptive_opposite_score < pbest_scores[i]:\n                        pbest[i] = adaptive_opposite_sol\n                        pbest_scores[i] = adaptive_opposite_score\n                        if adaptive_opposite_score < gbest_score:\n                            gbest = adaptive_opposite_sol\n                            gbest_score = adaptive_opposite_score\n        \n        return gbest", "name": "ImprovedEnhancedExplorationMutationPSO_DE_Optimizer", "description": "Improving exploration by introducing a novel adaptive opposition-based learning strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "metadata": {"aucs": [0.9004165228386075, 0.9080985046834731, 0.8952711079668174, 0.884836883671055, 0.8949060345589397, 0.8829749530074485, 0.878759886949311, 0.8992610573887623, 0.897419684054542, 0.7868384462731619, 0.7930510444104584, 0.7908465165734004, 0.7996310224858345, 0.7993371731862977, 0.8017311388785261, 0.7871341069131805, 0.799748111491417, 0.7788404938894694, 0.2320969758240562, 0.13335513518699227, 0.12649985303529188, 0.12845991418047575, 0.17771045902570026, 0.17160442414726207, 0.12802644696709653, 0.13319394029971787, 0.2960487723285441, 0.1172706406953885, 0.11320384112170812, 0.1088648811358982, 0.12347428811420946, 0.14204336469680934, 0.13970374261180718, 0.11928862281872421, 0.11604839766634356, 0.10123723846072297, 0.9700418223792026, 0.9740312332254146, 0.9690375450456866, 0.9675583208590751, 0.9825780618018568, 0.975588780883687, 0.978633142533986, 0.979333155080178, 0.9686361738004827, 0.6983736741585779, 0.678359161677853, 0.6565163152546938, 0.6722721359575352, 0.6945654467149078, 0.7108496804758331, 0.6901289077790684, 0.7107571894035418, 0.6392070640296263, 0.8881271028141318, 0.22394412297973731, 0.8078881940316317, 0.8518558448649045, 0.7442175241002105, 0.8707291222706033, 0.8485691117943307, 0.23376909917762834, 0.8527077375427694, 0.15177167350758014, 0.13116279936322173, 0.16605256440478788, 0.34963299273319437, 0.19000217179712886, 0.1523242433421068, 0.20120774793823326, 0.6717823098801723, 0.13094860287265397, 0.42788021460853143, 0.2661615538914289, 0.15143482810395126, 0.15363399705756897, 0.15918234758394467, 0.19088496577338887, 0.1739728238303937, 0.22375928827682834, 0.19649868711647, 0.12164832126010883, 0.2539397633685194, 0.4214482209113618, 0.3783195533352053, 0.19444685397344275, 0.3109975177829388, 0.1561658290008474, 0.12251707272888723, 0.27186923407033414, 0.5346215257292164, 0.5572103958389929, 0.5424183425593332, 0.2780397474222406, 0.2718214951479839, 0.5086252274725316, 0.455629326274426, 0.22130996794181312, 0.4927902555916769, 0.14726624959328494, 0.1776039411314918, 0.2170583332346243, 0.11200655203510579, 0.1710112210557867, 0.05904248327819428, 0.3764169644658746, 0.09579008167660463, 0.05049158952593169, 0.36510212095577255, 0.22711590578522267, 0.267847689609228, 0.29668613007053646, 0.19112978339928532, 0.2718648439533371, 0.2631322965643679, 0.2543268183931009, 0.24302660376605523, 0.6088099245902726, 0.6657710157843969, 0.6140969510984119, 0.603539183247431, 0.5950971207301604, 0.6559808747135061, 0.6658544434240217, 0.737489179838404, 0.714477480673781, 0.12494202397516563, 0.11338609578624548, 0.11526630406268468, 0.13557036519487353, 0.13711187796528335, 0.12531497729659513, 0.11382079029140257, 0.11692377597037507, 0.15766682552735534, 0.2623826587812752, 0.16649475615134945, 0.16475519221679313, 0.19091576958385303, 0.16533898274590286, 0.15088835680104018, 0.1749364667298161, 0.12279706119598233, 0.15452991884673883, 0.5045412821740904, 0.4105759171658102, 0.2802428681679744, 0.41739057455157613, 0.5089607116488191, 0.5760657218322245, 0.6608991587378337, 0.5526932049839005, 0.5105337250414026, 0.2488584874236588, 0.2962907217200764, 0.33045153276659645, 0.387302967482379, 0.29693050475341265, 0.3824472172361817, 0.255762102654953, 0.32230444479602416, 0.46189708728057155, 0.20878128293707654, 0.2065025087538903, 0.20020464953406925, 0.22724940650821224, 0.2126372527346584, 0.23920315973574802, 0.20019778146625133, 0.19769279012781793, 0.21492454243472958, 0.20398760424607298, 0.20465556770587356, 0.21165262222438985, 0.23137389343256654, 0.2453398692881147, 0.20287295306420938, 0.19541846099265292, 0.24643137070552779, 0.21795551121495504, 0.7961179137828882, 0.8522156700737943, 0.18606855777884723, 0.9252734772987246, 0.7474554667996582, 0.7685118570783023, 0.6116822967856439, 0.1685954084904936, 0.624354871830724, 0.6909097367741688, 0.15685368341075223, 0.570923654317063, 0.21099234867828165, 0.49812718924483357, 0.3570907222742732, 0.29126049728828407, 0.4951754937851631, 0.5437646698282907, 0.18143511623683584, 0.18413089230698354, 0.20605569235441512, 0.17862731638676266, 0.18375385791916343, 0.1767476776386835, 0.18474624734283907, 0.17846190658764194, 0.19067842859738549, 0.09029092730976751, 0.09102710727833396, 0.09329846478910475, 0.09021091715525142, 0.10248026990894976, 0.08754666181858628, 0.11834120462146291, 0.08591031792936832, 0.07905602602262918]}, "mutation_prompt": null}
{"id": "9294c86e-fa73-4e77-bf04-5043c1f512e8", "solution": "class DynamicMutationEnhancedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1  # Probability of applying local search\n        \n    def __call__(self, func):\n        def local_search(x, best):\n            return x + np.random.normal(0, 0.1, size=self.dim) if np.random.rand() < self.local_search_prob else x\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_sol = local_search(new_sol, gbest)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    adaptive_opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) - np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    adaptive_opposite_score = evaluate(adaptive_opposite_sol)\n                    if adaptive_opposite_score < pbest_scores[i]:\n                        pbest[i] = adaptive_opposite_sol\n                        pbest_scores[i] = adaptive_opposite_score\n                        if adaptive_opposite_score < gbest_score:\n                            gbest = adaptive_opposite_sol\n                            gbest_score = adaptive_opposite_score\n        \n        return gbest", "name": "DynamicMutationEnhancedExplorationPSO_DE_Optimizer", "description": "Enhancing population diversity and convergence speed by incorporating a dynamic mutation strategy based on local search.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'de' is not defined\").", "error": "NameError(\"name 'de' is not defined\")", "parent_id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "metadata": {}, "mutation_prompt": null}
{"id": "07626ee2-2346-4f92-9537-d830b7b5a92e", "solution": "class DynamicMutationOppositionPSO_DE_Optimizer:\n    def __init__(self, budget, dim, mutation_prob=0.5, opp_learning_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.mutation_prob = mutation_prob\n        self.opp_learning_prob = opp_learning_prob\n\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n\n        def evaluate(x):\n            return func(x)\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i + 1) % self.swarm_size, (i + 2) % self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n\n                # Dynamic mutation control for adaptive search\n                if np.random.rand() < self.mutation_prob:\n                    mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                    new_sol = de(population[i], pbest[[i, (i + 1) % self.swarm_size, (i + 2) % self.swarm_size]], mutation_factor)\n                    new_score = evaluate(new_sol)\n                    if new_score < pbest_scores[i]:\n                        pbest[i] = new_sol\n                        pbest_scores[i] = new_score\n                        if new_score < gbest_score:\n                            gbest = new_sol\n                            gbest_score = new_score\n\n                # Opposition-based learning strategy for exploration\n                if np.random.rand() < self.opp_learning_prob:\n                    adaptive_opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) - np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    adaptive_opposite_score = evaluate(adaptive_opposite_sol)\n                    if adaptive_opposite_score < pbest_scores[i]:\n                        pbest[i] = adaptive_opposite_sol\n                        pbest_scores[i] = adaptive_opposite_score\n                        if adaptive_opposite_score < gbest_score:\n                            gbest = adaptive_opposite_sol\n                            gbest_score = adaptive_opposite_score\n\n        return gbest", "name": "DynamicMutationOppositionPSO_DE_Optimizer", "description": "Enhancing the convergence speed and population diversity through dynamic mutation control and opposition-based learning.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicMutationOppositionPSO_DE_Optimizer' object has no attribute 'swarm_size'\").", "error": "AttributeError(\"'DynamicMutationOppositionPSO_DE_Optimizer' object has no attribute 'swarm_size'\")", "parent_id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "metadata": {}, "mutation_prompt": null}
{"id": "ba805d3b-d8ad-455d-8660-69846634cdb2", "solution": "class AdaptiveInertiaWeightPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        inertia_weights = np.linspace(0.9, 0.4, self.budget)\n        \n        for t in range(self.budget):\n            self.w = inertia_weights[t]\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    adaptive_opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) - np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    adaptive_opposite_score = evaluate(adaptive_opposite_sol)\n                    if adaptive_opposite_score < pbest_scores[i]:\n                        pbest[i] = adaptive_opposite_sol\n                        pbest_scores[i] = adaptive_opposite_score\n                        if adaptive_opposite_score < gbest_score:\n                            gbest = adaptive_opposite_sol\n                            gbest_score = adaptive_opposite_score\n        \n        return gbest", "name": "AdaptiveInertiaWeightPSO_DE_Optimizer", "description": "Introducing adaptive inertia weight to balance exploration and exploitation trade-off dynamically.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocities' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocities' referenced before assignment\")", "parent_id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "metadata": {}, "mutation_prompt": null}
{"id": "d2131597-5fa4-4e42-a946-4554a6e06c43", "solution": "class ImprovedEnhancedExplorationMutationPSO_DE_Optimizer(EnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Adaptive opposition-based learning strategy for enhancing exploration\n                if np.random.rand() < 0.1:\n                    adaptive_opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) - np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    adaptive_opposite_score = evaluate(adaptive_opposite_sol)\n                    if adaptive_opposite_score < pbest_scores[i]:\n                        pbest[i] = adaptive_opposite_sol\n                        pbest_scores[i] = adaptive_opposite_score\n                        if adaptive_opposite_score < gbest_score:\n                            gbest = adaptive_opposite_sol\n                            gbest_score = adaptive_opposite_score\n        \n        return gbest", "name": "ImprovedEnhancedExplorationMutationPSO_DE_Optimizer", "description": "Improving exploration by introducing a novel adaptive opposition-based learning strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "metadata": {"aucs": [0.9004165228386075, 0.9080985046834731, 0.8952711079668174, 0.884836883671055, 0.8949060345589397, 0.8829749530074485, 0.878759886949311, 0.8992610573887623, 0.897419684054542, 0.7868384462731619, 0.7930510444104584, 0.7908465165734004, 0.7996310224858345, 0.7993371731862977, 0.8017311388785261, 0.7871341069131805, 0.799748111491417, 0.7788404938894694, 0.2320969758240562, 0.13335513518699227, 0.12649985303529188, 0.12845991418047575, 0.17771045902570026, 0.17160442414726207, 0.12802644696709653, 0.13319394029971787, 0.2960487723285441, 0.1172706406953885, 0.11320384112170812, 0.1088648811358982, 0.12347428811420946, 0.14204336469680934, 0.13970374261180718, 0.11928862281872421, 0.11604839766634356, 0.10123723846072297, 0.9700418223792026, 0.9740312332254146, 0.9690375450456866, 0.9675583208590751, 0.9825780618018568, 0.975588780883687, 0.978633142533986, 0.979333155080178, 0.9686361738004827, 0.6983736741585779, 0.678359161677853, 0.6565163152546938, 0.6722721359575352, 0.6945654467149078, 0.7108496804758331, 0.6901289077790684, 0.7107571894035418, 0.6392070640296263, 0.8881271028141318, 0.22394412297973731, 0.8078881940316317, 0.8518558448649045, 0.7442175241002105, 0.8707291222706033, 0.8485691117943307, 0.23376909917762834, 0.8527077375427694, 0.15177167350758014, 0.13116279936322173, 0.16605256440478788, 0.34963299273319437, 0.19000217179712886, 0.1523242433421068, 0.20120774793823326, 0.6717823098801723, 0.13094860287265397, 0.42788021460853143, 0.2661615538914289, 0.15143482810395126, 0.15363399705756897, 0.15918234758394467, 0.19088496577338887, 0.1739728238303937, 0.22375928827682834, 0.19649868711647, 0.12164832126010883, 0.2539397633685194, 0.4214482209113618, 0.3783195533352053, 0.19444685397344275, 0.3109975177829388, 0.1561658290008474, 0.12251707272888723, 0.27186923407033414, 0.5346215257292164, 0.5572103958389929, 0.5424183425593332, 0.2780397474222406, 0.2718214951479839, 0.5086252274725316, 0.455629326274426, 0.22130996794181312, 0.4927902555916769, 0.14726624959328494, 0.1776039411314918, 0.2170583332346243, 0.11200655203510579, 0.1710112210557867, 0.05904248327819428, 0.3764169644658746, 0.09579008167660463, 0.05049158952593169, 0.36510212095577255, 0.22711590578522267, 0.267847689609228, 0.29668613007053646, 0.19112978339928532, 0.2718648439533371, 0.2631322965643679, 0.2543268183931009, 0.24302660376605523, 0.6088099245902726, 0.6657710157843969, 0.6140969510984119, 0.603539183247431, 0.5950971207301604, 0.6559808747135061, 0.6658544434240217, 0.737489179838404, 0.714477480673781, 0.12494202397516563, 0.11338609578624548, 0.11526630406268468, 0.13557036519487353, 0.13711187796528335, 0.12531497729659513, 0.11382079029140257, 0.11692377597037507, 0.15766682552735534, 0.2623826587812752, 0.16649475615134945, 0.16475519221679313, 0.19091576958385303, 0.16533898274590286, 0.15088835680104018, 0.1749364667298161, 0.12279706119598233, 0.15452991884673883, 0.5045412821740904, 0.4105759171658102, 0.2802428681679744, 0.41739057455157613, 0.5089607116488191, 0.5760657218322245, 0.6608991587378337, 0.5526932049839005, 0.5105337250414026, 0.2488584874236588, 0.2962907217200764, 0.33045153276659645, 0.387302967482379, 0.29693050475341265, 0.3824472172361817, 0.255762102654953, 0.32230444479602416, 0.46189708728057155, 0.20878128293707654, 0.2065025087538903, 0.20020464953406925, 0.22724940650821224, 0.2126372527346584, 0.23920315973574802, 0.20019778146625133, 0.19769279012781793, 0.21492454243472958, 0.20398760424607298, 0.20465556770587356, 0.21165262222438985, 0.23137389343256654, 0.2453398692881147, 0.20287295306420938, 0.19541846099265292, 0.24643137070552779, 0.21795551121495504, 0.7961179137828882, 0.8522156700737943, 0.18606855777884723, 0.9252734772987246, 0.7474554667996582, 0.7685118570783023, 0.6116822967856439, 0.1685954084904936, 0.624354871830724, 0.6909097367741688, 0.15685368341075223, 0.570923654317063, 0.21099234867828165, 0.49812718924483357, 0.3570907222742732, 0.29126049728828407, 0.4951754937851631, 0.5437646698282907, 0.18143511623683584, 0.18413089230698354, 0.20605569235441512, 0.17862731638676266, 0.18375385791916343, 0.1767476776386835, 0.18474624734283907, 0.17846190658764194, 0.19067842859738549, 0.09029092730976751, 0.09102710727833396, 0.09329846478910475, 0.09021091715525142, 0.10248026990894976, 0.08754666181858628, 0.11834120462146291, 0.08591031792936832, 0.07905602602262918]}, "mutation_prompt": null}
{"id": "f261a7c3-b98b-4564-944d-2edb7414a824", "solution": "class ImprovedEnhancedExplorationMutationPSO_DE_Optimizer(EnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Adaptive opposition-based learning strategy for enhancing exploration\n                if np.random.rand() < 0.1:\n                    adaptive_opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) - np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    adaptive_opposite_score = evaluate(adaptive_opposite_sol)\n                    if adaptive_opposite_score < pbest_scores[i]:\n                        pbest[i] = adaptive_opposite_sol\n                        pbest_scores[i] = adaptive_opposite_score\n                        if adaptive_opposite_score < gbest_score:\n                            gbest = adaptive_opposite_sol\n                            gbest_score = adaptive_opposite_score\n        \n        return gbest", "name": "ImprovedEnhancedExplorationMutationPSO_DE_Optimizer", "description": "Improving exploration by introducing a novel adaptive opposition-based learning strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "metadata": {"aucs": [0.9004165228386075, 0.9080985046834731, 0.8952711079668174, 0.884836883671055, 0.8949060345589397, 0.8829749530074485, 0.878759886949311, 0.8992610573887623, 0.897419684054542, 0.7868384462731619, 0.7930510444104584, 0.7908465165734004, 0.7996310224858345, 0.7993371731862977, 0.8017311388785261, 0.7871341069131805, 0.799748111491417, 0.7788404938894694, 0.2320969758240562, 0.13335513518699227, 0.12649985303529188, 0.12845991418047575, 0.17771045902570026, 0.17160442414726207, 0.12802644696709653, 0.13319394029971787, 0.2960487723285441, 0.1172706406953885, 0.11320384112170812, 0.1088648811358982, 0.12347428811420946, 0.14204336469680934, 0.13970374261180718, 0.11928862281872421, 0.11604839766634356, 0.10123723846072297, 0.9700418223792026, 0.9740312332254146, 0.9690375450456866, 0.9675583208590751, 0.9825780618018568, 0.975588780883687, 0.978633142533986, 0.979333155080178, 0.9686361738004827, 0.6983736741585779, 0.678359161677853, 0.6565163152546938, 0.6722721359575352, 0.6945654467149078, 0.7108496804758331, 0.6901289077790684, 0.7107571894035418, 0.6392070640296263, 0.8881271028141318, 0.22394412297973731, 0.8078881940316317, 0.8518558448649045, 0.7442175241002105, 0.8707291222706033, 0.8485691117943307, 0.23376909917762834, 0.8527077375427694, 0.15177167350758014, 0.13116279936322173, 0.16605256440478788, 0.34963299273319437, 0.19000217179712886, 0.1523242433421068, 0.20120774793823326, 0.6717823098801723, 0.13094860287265397, 0.42788021460853143, 0.2661615538914289, 0.15143482810395126, 0.15363399705756897, 0.15918234758394467, 0.19088496577338887, 0.1739728238303937, 0.22375928827682834, 0.19649868711647, 0.12164832126010883, 0.2539397633685194, 0.4214482209113618, 0.3783195533352053, 0.19444685397344275, 0.3109975177829388, 0.1561658290008474, 0.12251707272888723, 0.27186923407033414, 0.5346215257292164, 0.5572103958389929, 0.5424183425593332, 0.2780397474222406, 0.2718214951479839, 0.5086252274725316, 0.455629326274426, 0.22130996794181312, 0.4927902555916769, 0.14726624959328494, 0.1776039411314918, 0.2170583332346243, 0.11200655203510579, 0.1710112210557867, 0.05904248327819428, 0.3764169644658746, 0.09579008167660463, 0.05049158952593169, 0.36510212095577255, 0.22711590578522267, 0.267847689609228, 0.29668613007053646, 0.19112978339928532, 0.2718648439533371, 0.2631322965643679, 0.2543268183931009, 0.24302660376605523, 0.6088099245902726, 0.6657710157843969, 0.6140969510984119, 0.603539183247431, 0.5950971207301604, 0.6559808747135061, 0.6658544434240217, 0.737489179838404, 0.714477480673781, 0.12494202397516563, 0.11338609578624548, 0.11526630406268468, 0.13557036519487353, 0.13711187796528335, 0.12531497729659513, 0.11382079029140257, 0.11692377597037507, 0.15766682552735534, 0.2623826587812752, 0.16649475615134945, 0.16475519221679313, 0.19091576958385303, 0.16533898274590286, 0.15088835680104018, 0.1749364667298161, 0.12279706119598233, 0.15452991884673883, 0.5045412821740904, 0.4105759171658102, 0.2802428681679744, 0.41739057455157613, 0.5089607116488191, 0.5760657218322245, 0.6608991587378337, 0.5526932049839005, 0.5105337250414026, 0.2488584874236588, 0.2962907217200764, 0.33045153276659645, 0.387302967482379, 0.29693050475341265, 0.3824472172361817, 0.255762102654953, 0.32230444479602416, 0.46189708728057155, 0.20878128293707654, 0.2065025087538903, 0.20020464953406925, 0.22724940650821224, 0.2126372527346584, 0.23920315973574802, 0.20019778146625133, 0.19769279012781793, 0.21492454243472958, 0.20398760424607298, 0.20465556770587356, 0.21165262222438985, 0.23137389343256654, 0.2453398692881147, 0.20287295306420938, 0.19541846099265292, 0.24643137070552779, 0.21795551121495504, 0.7961179137828882, 0.8522156700737943, 0.18606855777884723, 0.9252734772987246, 0.7474554667996582, 0.7685118570783023, 0.6116822967856439, 0.1685954084904936, 0.624354871830724, 0.6909097367741688, 0.15685368341075223, 0.570923654317063, 0.21099234867828165, 0.49812718924483357, 0.3570907222742732, 0.29126049728828407, 0.4951754937851631, 0.5437646698282907, 0.18143511623683584, 0.18413089230698354, 0.20605569235441512, 0.17862731638676266, 0.18375385791916343, 0.1767476776386835, 0.18474624734283907, 0.17846190658764194, 0.19067842859738549, 0.09029092730976751, 0.09102710727833396, 0.09329846478910475, 0.09021091715525142, 0.10248026990894976, 0.08754666181858628, 0.11834120462146291, 0.08591031792936832, 0.07905602602262918]}, "mutation_prompt": null}
{"id": "82e88989-752a-4df6-9214-376f670f757c", "solution": "class ImprovedEnhancedExplorationMutationPSO_DE_Optimizer(EnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Adaptive opposition-based learning strategy for enhancing exploration\n                if np.random.rand() < 0.1:\n                    adaptive_opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) - np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    adaptive_opposite_score = evaluate(adaptive_opposite_sol)\n                    if adaptive_opposite_score < pbest_scores[i]:\n                        pbest[i] = adaptive_opposite_sol\n                        pbest_scores[i] = adaptive_opposite_score\n                        if adaptive_opposite_score < gbest_score:\n                            gbest = adaptive_opposite_sol\n                            gbest_score = adaptive_opposite_score\n        \n        return gbest", "name": "ImprovedEnhancedExplorationMutationPSO_DE_Optimizer", "description": "Improving exploration by introducing a novel adaptive opposition-based learning strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "metadata": {"aucs": [0.9004165228386075, 0.9080985046834731, 0.8952711079668174, 0.884836883671055, 0.8949060345589397, 0.8829749530074485, 0.878759886949311, 0.8992610573887623, 0.897419684054542, 0.7868384462731619, 0.7930510444104584, 0.7908465165734004, 0.7996310224858345, 0.7993371731862977, 0.8017311388785261, 0.7871341069131805, 0.799748111491417, 0.7788404938894694, 0.2320969758240562, 0.13335513518699227, 0.12649985303529188, 0.12845991418047575, 0.17771045902570026, 0.17160442414726207, 0.12802644696709653, 0.13319394029971787, 0.2960487723285441, 0.1172706406953885, 0.11320384112170812, 0.1088648811358982, 0.12347428811420946, 0.14204336469680934, 0.13970374261180718, 0.11928862281872421, 0.11604839766634356, 0.10123723846072297, 0.9700418223792026, 0.9740312332254146, 0.9690375450456866, 0.9675583208590751, 0.9825780618018568, 0.975588780883687, 0.978633142533986, 0.979333155080178, 0.9686361738004827, 0.6983736741585779, 0.678359161677853, 0.6565163152546938, 0.6722721359575352, 0.6945654467149078, 0.7108496804758331, 0.6901289077790684, 0.7107571894035418, 0.6392070640296263, 0.8881271028141318, 0.22394412297973731, 0.8078881940316317, 0.8518558448649045, 0.7442175241002105, 0.8707291222706033, 0.8485691117943307, 0.23376909917762834, 0.8527077375427694, 0.15177167350758014, 0.13116279936322173, 0.16605256440478788, 0.34963299273319437, 0.19000217179712886, 0.1523242433421068, 0.20120774793823326, 0.6717823098801723, 0.13094860287265397, 0.42788021460853143, 0.2661615538914289, 0.15143482810395126, 0.15363399705756897, 0.15918234758394467, 0.19088496577338887, 0.1739728238303937, 0.22375928827682834, 0.19649868711647, 0.12164832126010883, 0.2539397633685194, 0.4214482209113618, 0.3783195533352053, 0.19444685397344275, 0.3109975177829388, 0.1561658290008474, 0.12251707272888723, 0.27186923407033414, 0.5346215257292164, 0.5572103958389929, 0.5424183425593332, 0.2780397474222406, 0.2718214951479839, 0.5086252274725316, 0.455629326274426, 0.22130996794181312, 0.4927902555916769, 0.14726624959328494, 0.1776039411314918, 0.2170583332346243, 0.11200655203510579, 0.1710112210557867, 0.05904248327819428, 0.3764169644658746, 0.09579008167660463, 0.05049158952593169, 0.36510212095577255, 0.22711590578522267, 0.267847689609228, 0.29668613007053646, 0.19112978339928532, 0.2718648439533371, 0.2631322965643679, 0.2543268183931009, 0.24302660376605523, 0.6088099245902726, 0.6657710157843969, 0.6140969510984119, 0.603539183247431, 0.5950971207301604, 0.6559808747135061, 0.6658544434240217, 0.737489179838404, 0.714477480673781, 0.12494202397516563, 0.11338609578624548, 0.11526630406268468, 0.13557036519487353, 0.13711187796528335, 0.12531497729659513, 0.11382079029140257, 0.11692377597037507, 0.15766682552735534, 0.2623826587812752, 0.16649475615134945, 0.16475519221679313, 0.19091576958385303, 0.16533898274590286, 0.15088835680104018, 0.1749364667298161, 0.12279706119598233, 0.15452991884673883, 0.5045412821740904, 0.4105759171658102, 0.2802428681679744, 0.41739057455157613, 0.5089607116488191, 0.5760657218322245, 0.6608991587378337, 0.5526932049839005, 0.5105337250414026, 0.2488584874236588, 0.2962907217200764, 0.33045153276659645, 0.387302967482379, 0.29693050475341265, 0.3824472172361817, 0.255762102654953, 0.32230444479602416, 0.46189708728057155, 0.20878128293707654, 0.2065025087538903, 0.20020464953406925, 0.22724940650821224, 0.2126372527346584, 0.23920315973574802, 0.20019778146625133, 0.19769279012781793, 0.21492454243472958, 0.20398760424607298, 0.20465556770587356, 0.21165262222438985, 0.23137389343256654, 0.2453398692881147, 0.20287295306420938, 0.19541846099265292, 0.24643137070552779, 0.21795551121495504, 0.7961179137828882, 0.8522156700737943, 0.18606855777884723, 0.9252734772987246, 0.7474554667996582, 0.7685118570783023, 0.6116822967856439, 0.1685954084904936, 0.624354871830724, 0.6909097367741688, 0.15685368341075223, 0.570923654317063, 0.21099234867828165, 0.49812718924483357, 0.3570907222742732, 0.29126049728828407, 0.4951754937851631, 0.5437646698282907, 0.18143511623683584, 0.18413089230698354, 0.20605569235441512, 0.17862731638676266, 0.18375385791916343, 0.1767476776386835, 0.18474624734283907, 0.17846190658764194, 0.19067842859738549, 0.09029092730976751, 0.09102710727833396, 0.09329846478910475, 0.09021091715525142, 0.10248026990894976, 0.08754666181858628, 0.11834120462146291, 0.08591031792936832, 0.07905602602262918]}, "mutation_prompt": null}
{"id": "14d125f3-086e-414d-8bc1-5259749c6c0a", "solution": "class DynamicMutationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic mutation control based on individual performance for enhanced diversity\n                if np.random.rand() < 0.1:\n                    mutation_factor = np.clip(np.random.normal(mutation_factor, 0.1), 0.1, 0.9)\n                    dynamic_mutant = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                    dynamic_score = evaluate(dynamic_mutant)\n                    if dynamic_score < pbest_scores[i]:\n                        pbest[i] = dynamic_mutant\n                        pbest_scores[i] = dynamic_score\n                        if dynamic_score < gbest_score:\n                            gbest = dynamic_mutant\n                            gbest_score = dynamic_score\n        \n        return gbest", "name": "DynamicMutationPSO_DE_Optimizer", "description": "Enhancing population diversity through dynamic mutation control based on individual performance.", "configspace": "", "generation": 58, "fitness": 0.35976853577099727, "feedback": "The algorithm DynamicMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.26.", "error": "", "parent_id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "metadata": {"aucs": [0.8407060435328784, 0.8544949870056477, 0.8467550982882364, 0.8282649428405523, 0.8503514016757655, 0.8322171058224227, 0.8460227171476369, 0.8164156351172109, 0.8424177763996601, 0.7273150324150405, 0.6763196513765055, 0.7107061605396977, 0.7186405017667703, 0.6990515529043276, 0.7056558943107296, 0.68783848923701, 0.6787499840490167, 0.7035706617484796, 0.1137422399456387, 0.15558895455253574, 0.11470219623259659, 0.12407238079832772, 0.11610539402442188, 0.13562729193999257, 0.13455228118714835, 0.12340267931075954, 0.14847588794436983, 0.11904580061132675, 0.11147014807963629, 0.09650436046420086, 0.11537810543374105, 0.09400612980829826, 0.10431392061859623, 0.10050666293564159, 0.09326142750568012, 0.09396693964521274, 0.9694457338592527, 0.9757932185322356, 0.963507036274589, 0.9554551620836391, 0.9780411908702387, 0.9809825383498342, 0.9779875307144515, 0.9838377988418847, 0.9711080778751753, 0.5379252032731403, 0.4985139909140103, 0.4829837755677412, 0.5943005580762475, 0.5079194618723853, 0.6088866082720533, 0.47842684350852505, 0.47029680851454936, 0.4454141397176187, 0.7902604611289682, 0.8545052429524964, 0.7768817316557656, 0.7533466580630921, 0.8124143924597191, 0.7421094759001314, 0.7815255030642051, 0.7749593106585615, 0.8398197699014982, 0.18274207872630766, 0.22465317270630125, 0.23052610863007872, 0.3076314462958897, 0.15938444381311057, 0.2335315152788512, 0.1995062289625591, 0.44975247980061717, 0.17917504726009115, 0.2056151093925852, 0.18070177818195865, 0.1589026765399938, 0.2593314483713207, 0.1875142598813564, 0.23450709763133115, 0.14790834100915962, 0.1728837120840191, 0.20837251051275862, 0.3480870178769436, 0.25543881853554495, 0.18894009866734018, 0.264381255012067, 0.23413308589231252, 0.13488954581515789, 0.27940264980358587, 0.052667451536533516, 0.26757369418626564, 0.56322722228629, 0.19310182116817864, 0.23390422043646253, 0.2143608795767673, 0.1455739656808741, 0.1615517507386679, 0.3334063935237882, 0.320391916554584, 0.6093652839401099, 0.19957251831216904, 0.1260853546253844, 0.12143146793251403, 0.13420031160014567, 0.1381948857311298, 0.0983410849030164, 0.1604997188234496, 0.1987683172429363, 0.08390191735441643, 0.4321740733666801, 0.3638761837645358, 0.17986457212502394, 0.3431739752084584, 0.3015973003854784, 0.35477481807747335, 0.25397325050514585, 0.3325094183029066, 0.1888036975740548, 0.663579875950238, 0.716050952670311, 0.6319880911970785, 0.6187709227594305, 0.7382687948336885, 0.5147619689629935, 0.7801457096792523, 0.6801118642319255, 0.6454461474984102, 0.10874946857252721, 0.10880438194903708, 0.11080674754100672, 0.09858631012597474, 0.1153337605900413, 0.10858295831210873, 0.17196548026298009, 0.12273447307536334, 0.09026811630297138, 0.12881850172644627, 0.13302395273552814, 0.1522200545713478, 0.15254905297019616, 0.13077290333957314, 0.140557220163814, 0.14400576324856884, 0.14332544359945765, 0.1259363952779342, 0.3872357655434103, 0.49766556782437, 0.44424723801706556, 0.45683201499662485, 0.4281525347209205, 0.46776273485073505, 0.47510628009181255, 0.4697847886435076, 0.4987424004323143, 0.2624278765764705, 0.33563043200336296, 0.35018637617656434, 0.3286062739462976, 0.2596355480404966, 0.30452620281826104, 0.31398414292053034, 0.3669776006652432, 0.318468812045443, 0.22201288626487448, 0.20242061040773784, 0.20740161420788905, 0.20696048471225115, 0.21873883489346702, 0.22537969613384967, 0.202502509936745, 0.19190580757097842, 0.2053516723836567, 0.2187737967271235, 0.2010147277085621, 0.2050776696903016, 0.19879026789557208, 0.19014014553651737, 0.1854248639738133, 0.19035241707955497, 0.34038578902575056, 0.18926514249262727, 0.4629752997731995, 0.4101105073298704, 0.30603968049382035, 0.7850789490431518, 0.23570021583843204, 0.4013337121790358, 0.6918057514815628, 0.3646508610363096, 0.8006900144688356, 0.5256977510123543, 0.2040249277580094, 0.35152866751834366, 0.19889349465583905, 0.27099069975058276, 0.19797139384345108, 0.28355897867485447, 0.37492764220936203, 0.1803123330865306, 0.18388612357344103, 0.18638369223605789, 0.17108724075328208, 0.19471525397286293, 0.19094750648572378, 0.17902878897219565, 0.1724997105659659, 0.1922020980926642, 0.19257261481141563, 0.08536322538596763, 0.07695463194049901, 0.08739272499900796, 0.0904367789278756, 0.08463637296254545, 0.0800730351453165, 0.08514098123911085, 0.07504980964419561, 0.08966136530842084]}, "mutation_prompt": null}
{"id": "886d1e67-26a6-432e-a40f-955db1208f0d", "solution": "class EnhancedPopulationDiversityPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def mutate(x, pbest_i, gbest, mutation_factor):\n            idxs = np.random.choice(self.swarm_size, 3, replace=False)\n            a, b, c = pbest_i, pbest[idxs[0]], pbest[idxs[1]]\n            mutant = a + mutation_factor * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([func(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = mutate(population[i], pbest[i], gbest, mutation_factor)\n                new_score = func(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n        \n        return gbest", "name": "EnhancedPopulationDiversityPSO_DE_Optimizer", "description": "Enhancing population diversity by introducing a dynamic mutation strategy based on individual performance.", "configspace": "", "generation": 59, "fitness": 0.2941435049442176, "feedback": "The algorithm EnhancedPopulationDiversityPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "metadata": {"aucs": [0.7671277119443006, 0.7764266590633278, 0.7683284403689394, 0.7438260842227196, 0.7595521720207747, 0.7328467150810826, 0.7432033612507503, 0.7295973753511235, 0.7268312983453684, 0.4688704466692817, 0.5223122682744228, 0.5025933336304944, 0.5076886701355481, 0.5058879944253563, 0.48711530477393117, 0.4995129315631367, 0.5015531344893891, 0.48639843828952667, 0.11553978977142287, 0.0976710565149358, 0.09820432257445677, 0.11315968782584718, 0.10387698060379902, 0.09798797175829199, 0.09831129216016032, 0.10021702835673751, 0.10021559255657952, 0.0929880418778104, 0.08195417776193115, 0.11965956963914104, 0.09885550205604232, 0.08071089581196667, 0.08762497352875342, 0.09340007506924108, 0.09341730441475904, 0.08515964510881036, 0.9738416974788783, 0.9756169959550621, 0.974912184825865, 0.9652462687895826, 0.9714735318865381, 0.974725984583992, 0.9755902391494243, 0.9829389185694156, 0.9777360720333683, 0.35374698016287187, 0.3386612827937473, 0.310919042865753, 0.34638096830390663, 0.3227264481804092, 0.33611630562936157, 0.34729165082639135, 0.3216766466461004, 0.3281641365274519, 0.6390310408198125, 0.6654469457699674, 0.5246185901123694, 0.5860410654415209, 0.6383093165447511, 0.7545853453807719, 0.6329975623007422, 0.6239897144157178, 0.5229219309941975, 0.21364213237055063, 0.20119218987578869, 0.23001251335101314, 0.1693780651770901, 0.18867946262867896, 0.15898274507137145, 0.18602363480096962, 0.19990631446591478, 0.2063155568268078, 0.21766231682775072, 0.20331234934676912, 0.19401439479263416, 0.18215447481345914, 0.16638647605161117, 0.17309422587897716, 0.2259366542744099, 0.17873059256012003, 0.17452122518634727, 0.19077916883836687, 0.17260291987738252, 0.176228081448904, 0.19005774732325065, 0.221066108406619, 0.1969853806583245, 0.21034792456864282, 0.15819579485739943, 0.20413580079170868, 0.28499648230428964, 0.29553047389892817, 0.28856538564199896, 0.30319164322152337, 0.2689387406408493, 0.28926049289638167, 0.3160224999221265, 0.32245241845055894, 0.2904859149518122, 0.05445364069801184, 0.026787683308008847, 9.999999999998899e-05, 0.062457955834824275, 0.06888904420640085, 0.061980287588545235, 0.06734650460917269, 0.04686103277957665, 0.014525068905676952, 0.2537294093294449, 0.21815205130504323, 0.22419969105892723, 0.24199290420694974, 0.23027680402487727, 0.23205848667316453, 0.22046578804699424, 0.21792776795927615, 0.21565936565719224, 0.5818890538133705, 0.6030283510372116, 0.5857307729053438, 0.5864601680546253, 0.5770441426958586, 0.5673364085072847, 0.6169648562367027, 0.5827002138715748, 0.6027986004348542, 0.09652041049549209, 0.0913643979895733, 0.07512144507739815, 0.09954560105349697, 0.09372225581194471, 0.08208017929625389, 0.08574319015933618, 0.09637244216369367, 0.10216690113981819, 0.1289557878877613, 0.11792238241522768, 0.13621298396315729, 0.13021108721642816, 0.12436683377013591, 0.11086610547852538, 0.14247220120165383, 0.12086643446106449, 0.12498456233970934, 0.275992143373589, 0.2727782666285653, 0.2798481892921295, 0.2977312962913212, 0.2974175331114016, 0.30387723844139825, 0.29509705705066436, 0.30967704168755494, 0.28291200070606204, 0.2112761891802465, 0.2108387351060914, 0.21805773563064978, 0.21522616531013072, 0.2121279600755478, 0.23489531193817792, 0.21873812377749868, 0.23110083192928088, 0.22310667605382906, 0.2068935916384761, 0.19643111076053665, 0.1914290190882365, 0.18251429396390562, 0.19328305762128484, 0.21142910355887956, 0.190197949830735, 0.18870386611178014, 0.19944760311781762, 0.17115451434867957, 0.20540774842967147, 0.19609391449239866, 0.1871719115663344, 0.1880440274615779, 0.18900466898788792, 0.18577498747257082, 0.18165620651400327, 0.18925316736499775, 0.2405227513333671, 0.34028673393130937, 0.2596323837116584, 0.5657346884319958, 0.18082212552392007, 0.45140568080125265, 0.3320962669163776, 0.17410800733762388, 0.2197626341482165, 0.42261571332974823, 0.21017643623094828, 0.3355439507798136, 0.35356174126522166, 0.1813701089244102, 0.21729803151100424, 0.24026176474101457, 0.2839292723991347, 0.21787728185294586, 0.1681094272672644, 0.1800737151820988, 0.17120374391610915, 0.1714549463927607, 0.1852942349980925, 0.1740008555658895, 0.18448790860520659, 0.18503676538284242, 0.18946871565549006, 0.08194078439706731, 0.08239732763360408, 0.0912859936770164, 0.07593609182028871, 0.08214812171511787, 0.08775759917556791, 0.08210104490852332, 0.07500459308254526, 0.07026771454459446]}, "mutation_prompt": null}
{"id": "758b82a7-28db-4555-a151-5da794f45505", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by integrating a novel opposition-based learning mechanism to diversify the population and improve convergence in the optimization process.", "configspace": "", "generation": 60, "fitness": 0.3959376115137602, "feedback": "The algorithm EnhancedOppositionBasedExplorationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "370c2b55-fee0-4d28-8ff5-a3d2ac406308", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "5ac9cccc-a362-4809-acf5-e3d585ba6345", "solution": "class AdaptiveMutationOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration with adaptive mutation\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "AdaptiveMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by integrating an adaptive mutation strategy to dynamically adjust the mutation factor for improved convergence in the optimization process.", "configspace": "", "generation": 61, "fitness": 0.3959376115137602, "feedback": "The algorithm AdaptiveMutationOppositionBasedExplorationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "795210fe-3d2f-4830-abaa-6661352a47d3", "solution": "class DynamicMutationPSO_DE_Optimizer(EnhancedOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        ...\n        \n        for _ in range(self.budget):\n            ...\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9) + 0.1*(new_score - pbest_scores[i])\n            ...", "name": "DynamicMutationPSO_DE_Optimizer", "description": "Introducing a dynamic mutation factor adaptation based on individual performance to enhance exploration and exploitation balance.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndentationError('unexpected indent', ('<string>', 7, 16, '                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9) + 0.1*(new_score - pbest_scores[i])\\n')).", "error": "IndentationError('unexpected indent', ('<string>', 7, 16, '                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9) + 0.1*(new_score - pbest_scores[i])\\n'))", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {}, "mutation_prompt": null}
{"id": "367fe8d8-e54f-4951-a637-e459fc6c41f2", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by integrating a novel opposition-based learning mechanism to diversify the population and improve convergence in the optimization process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "bec94986-527b-4bf2-bcc9-d431aebe35ea", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by integrating a novel opposition-based learning mechanism to diversify the population and improve convergence in the optimization process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "65e007f7-ae46-4dce-8f3d-f623d367c46f", "solution": "class EnhancedOppositionBasedExplorationImprovedPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationImprovedPSO_DE_Optimizer", "description": "Enhancing exploration by integrating opposition-based learning and dynamic mutation strategies to improve convergence and diversity in the optimization process.", "configspace": "", "generation": 65, "fitness": 0.3959376115137602, "feedback": "The algorithm EnhancedOppositionBasedExplorationImprovedPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "717d0031-b73e-4732-a97d-12f9fb7ee4a8", "solution": "class DynamicMutationFactorEnhancedOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9) # Dynamic mutation factor update\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "DynamicMutationFactorEnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Improving convergence by incorporating a dynamic update mechanism for mutation factor adaptation during the optimization process.", "configspace": "", "generation": 66, "fitness": 0.3959376115137602, "feedback": "The algorithm DynamicMutationFactorEnhancedOppositionBasedExplorationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "36d48664-fbb9-40c8-adef-8414a3e342a0", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by integrating a novel opposition-based learning mechanism to diversify the population and improve convergence in the optimization process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "1df9c7c7-c8c6-46a3-b217-5834e0d78273", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by integrating a novel opposition-based learning mechanism to diversify the population and improve convergence in the optimization process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "7c60a11a-739c-471f-b287-c2150b25f360", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by integrating a novel opposition-based learning mechanism to diversify the population and improve convergence in the optimization process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "56fa66e3-5693-4862-b3a6-553abc0d827f", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by integrating a novel opposition-based learning mechanism to diversify the population and improve convergence in the optimization process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "cb18f3e3-1861-4ae9-9266-201c0144fcbc", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                # Dynamic adaptation of mutation factor to balance exploration and exploitation\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9) + 0.05 * np.sin(0.1 * _)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Introducing dynamic parameter adaptation for mutation factor to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 71, "fitness": 0.38576174267346497, "feedback": "The algorithm EnhancedOppositionBasedExplorationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8910822819474596, 0.8980854505172923, 0.9044040307050802, 0.8887123702174851, 0.8905875878895471, 0.8782156805245063, 0.8881771964820939, 0.8833417598900277, 0.8869469970402778, 0.7865139749849253, 0.7930863725824542, 0.7955573571580751, 0.780987662418981, 0.783515351017471, 0.7874695892137419, 0.7813842552078227, 0.779407973876641, 0.7935234001074534, 0.15883160220525117, 0.14861052001422503, 0.16955572963701493, 0.14161080343751686, 0.33463612577044477, 0.12945656462226052, 0.12517356752986875, 0.17111335047697607, 0.14415028475288505, 0.09986093507936822, 0.15234468360982267, 0.13143059476367835, 0.14956238673963396, 0.12814940817387233, 0.1203167715610236, 0.12196989839861128, 0.127050084294543, 0.13250345445645273, 0.9770749218188617, 0.983370679895794, 0.9683041751064252, 0.96889118483036, 0.9874476443480924, 0.9746339823154329, 0.9712162145028564, 0.985138429209233, 0.9688563050502312, 0.6982847618808148, 0.6632697602295703, 0.6447157910549564, 0.7086277309357322, 0.6954269396476206, 0.7145760159397547, 0.5948828182010781, 0.6997306851282028, 0.67019956813485, 0.8837080488692811, 0.36347374670720367, 0.3785286305101806, 0.2789493721584705, 0.8550317835806129, 0.8531583569524177, 0.22830001781888376, 0.8556008228847974, 0.8217481387376672, 0.24514987313909864, 0.13059549011907146, 0.15738959463461544, 0.22394193374848714, 0.19626680134464536, 0.23362472976278637, 0.6409928622075642, 0.2218281508882215, 0.1784815075395474, 0.15563099944947156, 0.16030574432667688, 0.218501881577973, 0.187475493942294, 0.18058980968769267, 0.31701206395686354, 0.1986981647743311, 0.1904576683296365, 0.13096210529546592, 0.40014077061351616, 0.28165696619379343, 0.3548966907409826, 0.12452361429609737, 0.155749256666029, 0.08429047772699305, 0.21801016673961982, 0.10922508338789916, 0.3467743647429823, 0.2709197693136709, 0.32283340966434537, 0.2695683715285817, 0.276979239474084, 0.2673871642042418, 0.185802245707692, 0.5594127013785049, 0.49438902009609853, 0.4962486665099015, 0.1486015689056982, 0.10499348220189153, 0.29305774225145265, 0.08976711938202275, 0.1445507689142489, 0.1010784197690695, 0.20514509869767716, 0.11447647599014288, 0.055278907730837656, 0.20634375489273094, 0.2708006173023729, 0.33113064604517917, 0.22274828491328724, 0.3864376161179357, 0.3589766067182977, 0.21022853798693453, 0.27611492532914916, 0.24545692966250077, 0.6444500262225394, 0.5838554578271626, 0.8351875690575313, 0.6772345531241833, 0.6460423540581979, 0.5687122260597002, 0.6999470187400003, 0.7423039527640813, 0.7458263118266215, 0.11063286787327653, 0.09786803473272465, 0.1171673646603214, 0.11138775700889869, 0.14514107594231374, 0.1499700960087017, 0.11620305940787656, 0.1262587749625893, 0.1208927484946889, 0.14394995487821816, 0.16026054045574534, 0.16136841860619366, 0.13544270327542252, 0.1646252149082802, 0.18820662464529958, 0.15016000406793772, 0.1507651561836949, 0.2080075447344475, 0.4066863930231379, 0.489370691094851, 0.6227896692198387, 0.3179797264963211, 0.5808289703914958, 0.5704395933325168, 0.5594030517380577, 0.5424128216860757, 0.714469609271305, 0.2700949876913784, 0.30822568621305557, 0.26680445439341915, 0.4448342344384988, 0.44685350900302, 0.45396964178493904, 0.3969621220615489, 0.3212321613733158, 0.25285970335121766, 0.20294687671941314, 0.2395467239128639, 0.21186582576484803, 0.22139538930462066, 0.20303061396660538, 0.20625095630844004, 0.22377495234844524, 0.21586476150289646, 0.19492423797409275, 0.24266752606385977, 0.2341643488693722, 0.48113839204058095, 0.20422375658147818, 0.25017357437217946, 0.20893177176592526, 0.2266908121663681, 0.21523622843524604, 0.210164349098395, 0.8442484251749747, 0.8392474888755164, 0.907433800936852, 0.8654630579825897, 0.1961197397268033, 0.8139994574362004, 0.7287147117066972, 0.16878431595600396, 0.18171509127980778, 0.8510269473533572, 0.49817174373269724, 0.34917961164514033, 0.20205201901610848, 0.16756168984883046, 0.317692221184393, 0.2947704444012432, 0.4313606545983636, 0.20579962207774427, 0.19547631105395402, 0.18150143866591284, 0.17844627440813587, 0.1887398955975601, 0.1883789456987397, 0.19517203133149175, 0.1737845191384254, 0.16691628696826755, 0.17994275546045613, 0.09485603152429667, 0.08863410320351939, 0.0807571722855619, 0.08489831426585714, 0.09490419001389805, 0.0956566231786784, 0.1008889139657545, 0.09778879517774697, 0.09100429803550103]}, "mutation_prompt": null}
{"id": "d6bc692a-edd1-47c3-8f4c-d9eb9a8a23f3", "solution": "class DynamicOppositionBasedPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Dynamic opposition-based learning strategy for enhanced exploration and exploitation\n                if np.random.rand() < min(0.1, 0.1 + 0.05 * np.sqrt(self.dim)):\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "DynamicOppositionBasedPSO_DE_Optimizer", "description": "Enhancing exploration and exploitation by incorporating a dynamic opposition-based learning mechanism to adaptively balance between global exploration and local exploitation in the optimization process.", "configspace": "", "generation": 72, "fitness": 0.3959376115137602, "feedback": "The algorithm DynamicOppositionBasedPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "9033e28a-a4fb-4cad-8e5f-273795c242bd", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by integrating a novel opposition-based learning mechanism to diversify the population and improve convergence in the optimization process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "147f7638-59d8-43d7-9aaa-dc7bec0bd9fb", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by integrating a novel opposition-based learning mechanism to diversify the population and improve convergence in the optimization process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "e0fbb5bd-0e33-4610-afc5-0028433e3c01", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for t in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                # Dynamically adjust mutation factor based on progress\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1 * (t/self.budget)), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Improving convergence by dynamically adjusting mutation factor based on optimization progress.", "configspace": "", "generation": 75, "fitness": 0.39044386168569717, "feedback": "The algorithm EnhancedOppositionBasedExplorationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.29.", "error": "", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8984682166137022, 0.9009445428240336, 0.8967284984061122, 0.8857137003401422, 0.9020649873416305, 0.8931614050602884, 0.8925268244324318, 0.8788550834396276, 0.8855476534118712, 0.7926977563198749, 0.7819557084424575, 0.7716995794774069, 0.7876909233434364, 0.8205744894075092, 0.79882860772911, 0.7729806605267933, 0.8053035460539287, 0.7773037178700412, 0.17470987123383952, 0.16090691968945214, 0.13853996839812444, 0.14615948409787727, 0.1422955156607364, 0.2252537120707837, 0.15744674696650252, 0.1643987399457283, 0.1689781649905011, 0.10744708133162895, 0.15160794112736242, 0.12942575205346207, 0.1337478542592485, 0.12355378503111658, 0.1194939021417245, 0.10704369292220794, 0.1260708999163329, 0.09440280544976631, 0.9825437009873232, 0.9860619197581311, 0.973379087174936, 0.9723574437400758, 0.9867487684718913, 0.9728028113381993, 0.9780548691027647, 0.983781577413519, 0.9686574115915637, 0.6883430121246767, 0.725494307971231, 0.7038337796043392, 0.6925295558061614, 0.7216489429839867, 0.6996526034533814, 0.5843676790757405, 0.6661031107883282, 0.5831663704345506, 0.9151055457532524, 0.8101730083474245, 0.883279613289014, 0.9300123805646527, 0.6577230701386485, 0.8717180474754712, 0.8433124623711927, 0.8717400543865862, 0.8138746131993124, 0.1684122052829542, 0.1326592114644638, 0.1615161354185216, 0.21729868791115403, 0.21867573901714854, 0.19662523671294907, 0.1862346785402612, 0.33531218626885273, 0.15299667667275807, 0.2141564278397564, 0.1339343561778532, 0.2619476760074565, 0.19162883970665712, 0.16491155274003466, 0.13928996788819425, 0.15153379308912118, 0.1567222429233921, 0.17535138247214055, 0.21580554896731785, 0.29717964002857855, 0.3183734102900845, 0.28130064915254516, 0.1774256205285759, 0.08213673495575746, 0.22442759075079743, 0.07945536674500475, 0.4121957711139056, 0.39007593487193126, 0.26779107492214616, 0.29283007265354877, 0.24853408963427914, 0.3910863803136312, 0.4389396094567577, 0.6323012407644069, 0.4299452528950083, 0.5111466226798982, 0.1791931126316858, 0.28574676539236366, 0.1335308179267264, 0.08579000078311927, 0.1181569784005132, 0.10824588137749092, 0.19457574116339027, 0.1740678081485425, 0.10210816250568044, 0.2618521572014727, 0.20952876407687415, 0.29016881934054317, 0.24367360353120915, 0.444154436448437, 0.35392171171116493, 0.3608375332943151, 0.19117707610023538, 0.22740293780498355, 0.6685441710363378, 0.5762192990683612, 0.8223825521244766, 0.6737671354428312, 0.6090948197092583, 0.6298770927518467, 0.7818812648002518, 0.6846985009837697, 0.6397445334921916, 0.11021841489493978, 0.1455904633625783, 0.20170729211990457, 0.12490591320437106, 0.15582540107711407, 0.10297784331104942, 0.09512546979356196, 0.10187385315709818, 0.09850756133961003, 0.20457615485809466, 0.17275865058970108, 0.1485148611855277, 0.15923727706873136, 0.15619265033265706, 0.15601470030595288, 0.1542912713856549, 0.1601091535647201, 0.1094506220974355, 0.48769087933567656, 0.441263532535228, 0.5165858466969795, 0.5557582551936604, 0.5653199420419049, 0.4638462559718046, 0.6101301762597577, 0.5831177292666652, 0.5883241735596485, 0.23505455631855487, 0.25431609357383456, 0.32400450772489653, 0.3673411713923185, 0.41902010581940397, 0.30485741997525595, 0.2524991544317743, 0.4171270501699673, 0.26842407803433554, 0.22722567142790284, 0.2030709934300058, 0.20118573080464575, 0.20808279100791638, 0.23939189237393432, 0.21601768439003677, 0.21336283050081606, 0.22584655825613276, 0.20431895018689306, 0.3350466278716966, 0.2152398768692918, 0.202026364217871, 0.3688570667551154, 0.21210909867150496, 0.2084060819277067, 0.2345100187359518, 0.20317518249987965, 0.17999359768162626, 0.1834360214463936, 0.8645813037823316, 0.1771997665295637, 0.8749443686525609, 0.19849525972276683, 0.18857993569456488, 0.7460104146636181, 0.6110589335194796, 0.782511179730313, 0.7771693146633579, 0.20087553955915227, 0.8071750456247847, 0.2699748033172835, 0.20948745027249105, 0.3851315157451307, 0.4206087776317916, 0.31942760149326266, 0.20558190770349394, 0.18107220123078782, 0.17741469129209742, 0.18192489759808705, 0.18318565587468183, 0.18062963266719856, 0.179256164367396, 0.18826914782164172, 0.1962464403570997, 0.18711266591860953, 0.1137328768936684, 0.09323904782427239, 0.08338255432665664, 0.12155393353895128, 0.08995789176072644, 0.0861215663015995, 0.10516702800723632, 0.08732360065832256, 0.08611571858085865]}, "mutation_prompt": null}
{"id": "3dd3fef1-d8f4-47ab-8774-4feced28aaa2", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by integrating a novel opposition-based learning mechanism to diversify the population and improve convergence in the optimization process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "acb4415b-c1f3-480d-955d-8f95f9fce0b4", "solution": "class EnhancedOppositionBasedExplorationDynamicMutationPSO_DE_Optimizer(ImprovedEnhancedExplorationMutationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(self.mutation_factor, 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                # Opposition-based learning strategy for enhanced exploration\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n        \n        return gbest", "name": "EnhancedOppositionBasedExplorationDynamicMutationPSO_DE_Optimizer", "description": "Enhancing exploration further by incorporating a dynamic mutation strategy to adaptively adjust the mutation factor during the optimization process.", "configspace": "", "generation": 77, "fitness": 0.3959376115137602, "feedback": "The algorithm EnhancedOppositionBasedExplorationDynamicMutationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.29.", "error": "", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8951347284590178, 0.8810341837624364, 0.8921085547239073, 0.8845594836826314, 0.8908851648975319, 0.8882329569960549, 0.8933268886703511, 0.8889063959232504, 0.8944960142307241, 0.8203709481183248, 0.805036272057236, 0.7790495229454155, 0.7911839267815118, 0.7895259709866272, 0.8168276393206376, 0.787845962945579, 0.7932438936940056, 0.773842107636859, 0.12055988102304815, 0.18408098706637455, 0.14384451644566543, 0.27015311846795986, 0.146296333018752, 0.14218223561103627, 0.20330308263970986, 0.14998367900128307, 0.1634166653094491, 0.10920487973636628, 0.13384510135469663, 0.11482430473401295, 0.1457312904771083, 0.11230838853095992, 0.10612210900014818, 0.12495860982104734, 0.10813437557914218, 0.09678975024548087, 0.9771546894471895, 0.9833672463424129, 0.9681047225979934, 0.9689065866971872, 0.982850002106306, 0.974417195014896, 0.9653083495865594, 0.9851093164641576, 0.9687948679174622, 0.703125441071357, 0.6461663785039761, 0.709198297538085, 0.673946491980145, 0.6653129066129544, 0.7147170248422503, 0.7034122702457261, 0.6858464494406022, 0.6767657810295002, 0.8978247856217709, 0.7855712784161655, 0.8201439581900895, 0.9061936874218324, 0.9079604292444721, 0.8674129468214251, 0.7595782446195005, 0.8056420250185778, 0.23231410605688296, 0.2903440200828109, 0.13099868410367344, 0.1743029186126137, 0.23047402286352903, 0.19536719249932033, 0.1730512075140026, 0.6790479218654655, 0.19894292189151197, 0.29619184994109116, 0.20055387041095707, 0.13320982926507363, 0.19559968708440723, 0.23643760910900524, 0.21013756736501832, 0.20615992511449954, 0.19192610807407207, 0.13065916530591803, 0.23672200286782374, 0.03201788774529213, 0.2440252958889827, 0.47369157905935655, 0.16351911115497098, 0.4047136327254519, 0.3056013859747715, 0.35432102683541433, 0.08376391007871098, 0.12405866093848394, 0.5005681009120854, 0.23529888823633882, 0.41079966686396296, 0.13464902429249304, 0.2027079502467839, 0.2966459213514311, 0.18287242005828852, 0.41775805385330467, 0.5007599659478793, 0.14470695303035286, 0.09027633134396906, 0.13393625155334843, 0.11515722581156951, 0.10335792162837021, 0.0622978046816417, 0.22310070312944674, 0.0644073706117202, 0.15590332444313315, 0.4071163591081983, 0.1933066526267022, 0.2747442594137136, 0.34012383325382256, 0.35032732493530017, 0.4124949872444228, 0.29845696920855835, 0.2596270325401929, 0.25928023331223515, 0.5694840033207698, 0.5602136464166878, 0.8161650010273267, 0.6624990908263463, 0.5852535424680201, 0.7825303581690594, 0.6493591796719086, 0.5962175007723822, 0.5800083757052872, 0.1084755305563454, 0.1284970963344585, 0.1299217443343279, 0.16507905123560163, 0.13621124328332812, 0.14983691964252743, 0.17734213661187292, 0.15913959995262827, 0.12739091368443, 0.22339960313421148, 0.17525330681395557, 0.16211567618539224, 0.20402873265877253, 0.1369847298730914, 0.15452964847815076, 0.14608192736190417, 0.12584255747609474, 0.1398844854077066, 0.5001592200123248, 0.3628537083990174, 0.5720411891573065, 0.5047350503265433, 0.569661406426544, 0.4953311477453123, 0.5606529789318639, 0.5643705390848456, 0.5406984129319947, 0.2546050662613424, 0.4283969200960638, 0.3238845596507639, 0.27182781074368767, 0.43372490169492284, 0.35912261845791005, 0.4361885865184473, 0.3611768084148509, 0.21846308189990216, 0.23755697502300221, 0.20842505730774985, 0.20857450667824884, 0.19984207358795103, 0.2063101667774081, 0.21517696605559433, 0.2189943929077801, 0.20705649825509265, 0.21958739945558547, 0.19860274763551988, 0.2122365735308479, 0.24661791693334878, 0.20436051661369592, 0.20676312688335763, 0.1989954345563596, 0.6213469639971758, 0.24010708068554554, 0.2548152652375594, 0.8391223862852581, 0.8185835581111576, 0.8693169959790856, 0.8962681851533879, 0.19427249489207343, 0.7664532414187927, 0.754238150861684, 0.16888473526820835, 0.6906756969845165, 0.851884041940377, 0.3591102733287611, 0.6819115535928687, 0.34584334727006594, 0.16742925235585404, 0.27071254366616715, 0.44350436351498634, 0.36459659797001787, 0.2001132759664348, 0.20564117147038474, 0.18405103818579593, 0.170764765257577, 0.17630737293316545, 0.18494885138028072, 0.18993501013843894, 0.17855771263171805, 0.1816066877409822, 0.20081899659608715, 0.10916055454338947, 0.08939527292273453, 0.08343607358537997, 0.08899967317527624, 0.09545741592631707, 0.0833008498165253, 0.09311081807445298, 0.0825311548145713, 0.08355477618607277]}, "mutation_prompt": null}
{"id": "b1319a2d-4a71-4191-9473-181dffacce51", "solution": "class DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(EnhancedOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n        \n        return gbest", "name": "DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Improving convergence by dynamically adapting the mutation factor based on the historical performance of the population.", "configspace": "", "generation": 78, "fitness": 0.403642320198497, "feedback": "The algorithm DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "758b82a7-28db-4555-a151-5da794f45505", "metadata": {"aucs": [0.8916224630471086, 0.8662010492119432, 0.8807573400507184, 0.8726035270071195, 0.8870645050507904, 0.8795202674639289, 0.8755287412633262, 0.8868157659456796, 0.8721836774728691, 0.7662189003637762, 0.76496193943428, 0.7839075351704836, 0.7723148548571772, 0.76955552339854, 0.7637293008772994, 0.7703505370409319, 0.7796977634729098, 0.769617949442257, 0.14900496401295948, 0.1476497038376392, 0.13872939899821046, 0.16382683874383341, 0.16869418487707333, 0.2854366186945664, 0.13875552424427373, 0.2743786670514039, 0.17011098516456602, 0.14415731070610294, 0.11086399704770156, 0.1334059049028259, 0.1149088485972839, 0.14112760522182466, 0.11761506865625093, 0.1768868680744119, 0.1450491684215418, 0.11946970506932453, 0.983428847516949, 0.9860768480316898, 0.9655964963204124, 0.9683661808653748, 0.9821269837637837, 0.9692880710090794, 0.9705860509043572, 0.9814072246666959, 0.9670295878793134, 0.6345834238018829, 0.6341381182543477, 0.6443616068091067, 0.6860181806425569, 0.6294703114719896, 0.6495322342770204, 0.6098345719980909, 0.6800258641548269, 0.6578570656653644, 0.8530502817426455, 0.36484130887160304, 0.7537899735700083, 0.8477162386130621, 0.8406076452739707, 0.6952155035386429, 0.788982735571129, 0.8007679252106092, 0.869347900452771, 0.2041500956206156, 0.12818348830394677, 0.2505744941803396, 0.19638731678130716, 0.384085707724067, 0.1837199002221469, 0.7177358273869395, 0.3193117400663148, 0.2703279722138042, 0.50125409605644, 0.14974806915460626, 0.27945304423706496, 0.23812133854338335, 0.2725307142586053, 0.33859667460593845, 0.42320032314782297, 0.1487883255203889, 0.2206547786529658, 0.10543699806641904, 0.33599950454177574, 0.26030075066135305, 0.28900174056737093, 0.3507260331848414, 0.2407309926735488, 0.33546139390908536, 0.13157772824753788, 0.28198070109993445, 0.3154402052768228, 0.34748400315330086, 0.44954560637883256, 0.3269310956568041, 0.36716515545347406, 0.40493124402662883, 0.3942443894822726, 0.43598549606855774, 0.4530255139086711, 0.12412717435263709, 0.18820539934638936, 0.030745971620346202, 0.08464813173804664, 0.07617121075459743, 0.12199467252999785, 0.14986039963613906, 0.09935949902785413, 0.0709860440673481, 0.279436455951954, 0.23427243210303594, 0.3220145715132374, 0.3974843220524623, 0.178984626322939, 0.2842812119017203, 0.18243454358108369, 0.1998702266312513, 0.29240287950243304, 0.6109901181137559, 0.6032831979761377, 0.7385411760819441, 0.5775536974346165, 0.665015767252257, 0.7480586014190209, 0.609330190690248, 0.641223947470297, 0.6994996594129654, 0.1325352231107776, 0.16671100245099169, 0.12548846001466796, 0.13689946239809903, 0.17979219109415823, 0.13155935468674473, 0.11290583289109712, 0.17384411765669394, 0.15465509527692356, 0.1536765538700713, 0.2064128759749444, 0.18610151474132441, 0.18772819908377292, 0.2213946046206159, 0.16011814841139516, 0.2155975266036828, 0.20294987721079571, 0.14647134039729592, 0.4227003095347349, 0.5596262624703803, 0.5222732127072613, 0.5796640923300131, 0.5047608435797377, 0.5107551510807579, 0.6472253016357137, 0.47920461791182056, 0.405389042549514, 0.2961113401636384, 0.36577063447707825, 0.30071068597199413, 0.36767703763445914, 0.3099540129621229, 0.24519839142000477, 0.4144756439923277, 0.30670892302551056, 0.24318333340654508, 0.2011998538608223, 0.19031386964970742, 0.1818673850071595, 0.224094201591873, 0.22366732868617878, 0.2391400463204627, 0.1967822808495383, 0.20674404358280252, 0.20096975576547915, 0.1955429604373845, 0.23838973016355636, 0.2303295360054366, 0.20696646193960877, 0.19321849581177064, 0.2109910548893903, 0.20383915228882166, 0.23455543600288997, 0.20082936207282076, 0.8402875344061922, 0.18604691798747108, 0.8179349907367448, 0.8584525474430539, 0.7728955901526307, 0.20175693899061042, 0.6489790232616695, 0.16821230300486845, 0.8635889586494935, 0.8863301053580867, 0.7606120571799018, 0.773248553436271, 0.5710779012363997, 0.6504917375705151, 0.20737431629688308, 0.7363254272351208, 0.33547433082710665, 0.8588943397459434, 0.17624390837603554, 0.17020327699975046, 0.1778325384769197, 0.18609894459201992, 0.19076623310166319, 0.1793935755588324, 0.18358812512094425, 0.18298658300601633, 0.18196051369846522, 0.08940050884542927, 0.09562682598272754, 0.08266000656285721, 0.08402343341366392, 0.08299357999030488, 0.09059758389014283, 0.10380791070021989, 0.08294029460417174, 0.08162380287398685]}, "mutation_prompt": null}
{"id": "9ba475db-c47a-4ef0-b755-0b23b4dea343", "solution": "def levy_flight(dim):\n    beta = 1.5\n    sigma = (math.gamma(1 + beta) * math.sin(math.pi * beta / 2) / (math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n    u = np.random.normal(0, sigma, dim)\n    v = np.random.normal(0, 1, dim)\n    step = u / abs(v) ** (1 / beta)\n    return step\n\nclass EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population) + levy_flight(self.dim)\n            population += velocities\n            # Remaining code stays the same\n        return gbest", "name": "EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by introducing Levy flights for global search capability.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocities' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocities' referenced before assignment\")", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {}, "mutation_prompt": null}
{"id": "7c9a40b5-e03f-4beb-ba79-0e6a01521b23", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def opposition_mutation(x, pop, mutation_factor):\n            opposite_pop = np.mean(pop, axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pop - x) / np.sqrt(self.dim)\n            mutant = x + mutation_factor * (opposite_pop - x)\n            return mutant\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        ...\n        for _ in range(self.budget):\n            ...\n            for i in range(self.swarm_size):\n                ...\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                ...\n                if np.random.rand() < 0.1:\n                    opposite_sol = opposition_mutation(pbest[i], gbest, mutation_factor)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                ...\n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by introducing a novel opposition-based mutation strategy combined with adaptive mutation factor for improved convergence.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'de' is not defined\").", "error": "NameError(\"name 'de' is not defined\")", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {}, "mutation_prompt": null}
{"id": "21024d84-2bb4-4b60-b4ce-0caba6fbb107", "solution": "class EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n        \n        return gbest", "name": "EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing convergence by incorporating a hybrid approach of Opposition-Based Learning (OBL) with Differential Evolution (DE) for exploration-exploitation balance.", "configspace": "", "generation": 81, "fitness": 0.403642320198497, "feedback": "The algorithm EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.8916224630471086, 0.8662010492119432, 0.8807573400507184, 0.8726035270071195, 0.8870645050507904, 0.8795202674639289, 0.8755287412633262, 0.8868157659456796, 0.8721836774728691, 0.7662189003637762, 0.76496193943428, 0.7839075351704836, 0.7723148548571772, 0.76955552339854, 0.7637293008772994, 0.7703505370409319, 0.7796977634729098, 0.769617949442257, 0.14900496401295948, 0.1476497038376392, 0.13872939899821046, 0.16382683874383341, 0.16869418487707333, 0.2854366186945664, 0.13875552424427373, 0.2743786670514039, 0.17011098516456602, 0.14415731070610294, 0.11086399704770156, 0.1334059049028259, 0.1149088485972839, 0.14112760522182466, 0.11761506865625093, 0.1768868680744119, 0.1450491684215418, 0.11946970506932453, 0.983428847516949, 0.9860768480316898, 0.9655964963204124, 0.9683661808653748, 0.9821269837637837, 0.9692880710090794, 0.9705860509043572, 0.9814072246666959, 0.9670295878793134, 0.6345834238018829, 0.6341381182543477, 0.6443616068091067, 0.6860181806425569, 0.6294703114719896, 0.6495322342770204, 0.6098345719980909, 0.6800258641548269, 0.6578570656653644, 0.8530502817426455, 0.36484130887160304, 0.7537899735700083, 0.8477162386130621, 0.8406076452739707, 0.6952155035386429, 0.788982735571129, 0.8007679252106092, 0.869347900452771, 0.2041500956206156, 0.12818348830394677, 0.2505744941803396, 0.19638731678130716, 0.384085707724067, 0.1837199002221469, 0.7177358273869395, 0.3193117400663148, 0.2703279722138042, 0.50125409605644, 0.14974806915460626, 0.27945304423706496, 0.23812133854338335, 0.2725307142586053, 0.33859667460593845, 0.42320032314782297, 0.1487883255203889, 0.2206547786529658, 0.10543699806641904, 0.33599950454177574, 0.26030075066135305, 0.28900174056737093, 0.3507260331848414, 0.2407309926735488, 0.33546139390908536, 0.13157772824753788, 0.28198070109993445, 0.3154402052768228, 0.34748400315330086, 0.44954560637883256, 0.3269310956568041, 0.36716515545347406, 0.40493124402662883, 0.3942443894822726, 0.43598549606855774, 0.4530255139086711, 0.12412717435263709, 0.18820539934638936, 0.030745971620346202, 0.08464813173804664, 0.07617121075459743, 0.12199467252999785, 0.14986039963613906, 0.09935949902785413, 0.0709860440673481, 0.279436455951954, 0.23427243210303594, 0.3220145715132374, 0.3974843220524623, 0.178984626322939, 0.2842812119017203, 0.18243454358108369, 0.1998702266312513, 0.29240287950243304, 0.6109901181137559, 0.6032831979761377, 0.7385411760819441, 0.5775536974346165, 0.665015767252257, 0.7480586014190209, 0.609330190690248, 0.641223947470297, 0.6994996594129654, 0.1325352231107776, 0.16671100245099169, 0.12548846001466796, 0.13689946239809903, 0.17979219109415823, 0.13155935468674473, 0.11290583289109712, 0.17384411765669394, 0.15465509527692356, 0.1536765538700713, 0.2064128759749444, 0.18610151474132441, 0.18772819908377292, 0.2213946046206159, 0.16011814841139516, 0.2155975266036828, 0.20294987721079571, 0.14647134039729592, 0.4227003095347349, 0.5596262624703803, 0.5222732127072613, 0.5796640923300131, 0.5047608435797377, 0.5107551510807579, 0.6472253016357137, 0.47920461791182056, 0.405389042549514, 0.2961113401636384, 0.36577063447707825, 0.30071068597199413, 0.36767703763445914, 0.3099540129621229, 0.24519839142000477, 0.4144756439923277, 0.30670892302551056, 0.24318333340654508, 0.2011998538608223, 0.19031386964970742, 0.1818673850071595, 0.224094201591873, 0.22366732868617878, 0.2391400463204627, 0.1967822808495383, 0.20674404358280252, 0.20096975576547915, 0.1955429604373845, 0.23838973016355636, 0.2303295360054366, 0.20696646193960877, 0.19321849581177064, 0.2109910548893903, 0.20383915228882166, 0.23455543600288997, 0.20082936207282076, 0.8402875344061922, 0.18604691798747108, 0.8179349907367448, 0.8584525474430539, 0.7728955901526307, 0.20175693899061042, 0.6489790232616695, 0.16821230300486845, 0.8635889586494935, 0.8863301053580867, 0.7606120571799018, 0.773248553436271, 0.5710779012363997, 0.6504917375705151, 0.20737431629688308, 0.7363254272351208, 0.33547433082710665, 0.8588943397459434, 0.17624390837603554, 0.17020327699975046, 0.1778325384769197, 0.18609894459201992, 0.19076623310166319, 0.1793935755588324, 0.18358812512094425, 0.18298658300601633, 0.18196051369846522, 0.08940050884542927, 0.09562682598272754, 0.08266000656285721, 0.08402343341366392, 0.08299357999030488, 0.09059758389014283, 0.10380791070021989, 0.08294029460417174, 0.08162380287398685]}, "mutation_prompt": null}
{"id": "778adee5-8479-4b1e-9528-f014d9234d8c", "solution": "class EnhancedOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.alpha = 0.1\n        self.beta = 0.9\n\n    def __call__(self, func):\n        def mutation_strategy(x, pbest_x, gbest_x, mutation_factor):\n            return x + mutation_factor * ((pbest_x - x) + self.alpha * (gbest_x - x))\n\n        for _ in range(self.budget):\n            # Existing code for PSO-DE optimization\n\n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)\n                new_sol = mutation_strategy(population[i], pbest[i], gbest, mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n\n            # Existing code for opposition-based learning\n\n                mutation_factors[i] = mutation_factor\n\n        return gbest", "name": "EnhancedOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing diversity by introducing a novel mutation strategy based on opposition-based learning.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutation_factors' is not defined\").", "error": "NameError(\"name 'mutation_factors' is not defined\")", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {}, "mutation_prompt": null}
{"id": "2eac22eb-8be5-44d4-b622-c27ad0a92560", "solution": "def levy_flight(dim):\n    beta = 1.5\n    sigma = (gamma(1 + beta) * sin(pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n    u = np.random.normal(0, sigma, dim)\n    v = np.random.normal(0, 1, dim)\n    step = u / np.power(np.abs(v), 1 / beta)\n    return 0.01 * step\n\nclass EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        # Existing code remains unchanged\n        for _ in range(self.budget):\n            # Existing code remains unchanged\n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                step = levy_flight(self.dim)\n                new_sol += step\n                new_sol = np.clip(new_sol, -5.0, 5.0)\n                # Existing code remains unchanged\n        return gbest", "name": "EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Incorporating Levy flight behavior to enhance exploration capability and escape local optima.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutation_factors' is not defined\").", "error": "NameError(\"name 'mutation_factors' is not defined\")", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {}, "mutation_prompt": null}
{"id": "5a539a59-3c6b-4591-a81a-c56763e79779", "solution": "class AdaptiveInertiaWeightOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        inertia_weights = np.full(self.swarm_size, 0.5)\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = inertia_weights[:, np.newaxis] * (self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population))\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n                \n                inertia_weights[i] = 1 / (1 + np.exp(-np.std(velocities[i])))  # Adaptive inertia weight\n        \n        return gbest", "name": "AdaptiveInertiaWeightOppositionBasedExplorationPSO_DE_Optimizer", "description": "Implementing an adaptive inertia weight mechanism to balance exploration and exploitation in the population-based optimization algorithm.", "configspace": "", "generation": 84, "fitness": 0.39213031493381484, "feedback": "The algorithm AdaptiveInertiaWeightOppositionBasedExplorationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.8832354865056498, 0.8683346664432354, 0.8998464976356749, 0.8882411900400857, 0.8974031785810305, 0.901535511098619, 0.894243849380567, 0.8870083870177703, 0.8909779294706315, 0.7918127765582674, 0.8102126803650407, 0.7912361435465294, 0.7527756145888622, 0.7869170860697915, 0.7730286669286288, 0.7591486727766339, 0.7892805650754166, 0.8009201597731925, 0.15736029024702347, 0.20215603265321525, 0.16064307014647694, 0.4680054635569397, 0.12246566701850281, 0.4022245638746694, 0.12663016738570954, 0.15774334936358936, 0.20080058488798347, 0.15410421472055147, 0.13470820324579325, 0.12908554083815993, 0.13691027232532738, 0.14684648395361366, 0.11675121690043455, 0.11747592110200933, 0.13420149559418426, 0.11073812212688228, 0.9773498265193017, 0.9810013842375911, 0.9730537542824692, 0.948424631650647, 0.9817597008350074, 0.9796728453857562, 0.9524103743626715, 0.9813057204017042, 0.9758761417000505, 0.5437336293288533, 0.5100360335081402, 0.6619048563230294, 0.5735090975007812, 0.5150683417615258, 0.6426791958405229, 0.6420630781478933, 0.45194375840302514, 0.550277511899363, 0.9022629061838848, 0.8694596351727149, 0.8347590412306198, 0.926010480412648, 0.7600932896929067, 0.7741971446742273, 0.23270570044847683, 0.8485270440605791, 0.8499431972451508, 0.20577977056793484, 0.1478389412995682, 0.15358502601435953, 0.201172680881037, 0.43127155292250996, 0.16003689310120062, 0.18899100306599503, 0.1513003111940301, 0.2032142888924955, 0.2376677471008064, 0.184963193464444, 0.1412583647281559, 0.15551418746206325, 0.1644700684946061, 0.1272647160878827, 0.19099305923754073, 0.13110836871371812, 0.16052999964950776, 0.23717814773268964, 0.09957146918595716, 0.2541739909462025, 0.0453407560472584, 0.18559855108225098, 0.23210821083598954, 0.15824246075320736, 0.3824685820960755, 0.3260125668351388, 0.38038839200511554, 0.18237069880703072, 0.42667260996793377, 0.3218295482122032, 0.3766907613466711, 0.17901748251981375, 0.49248775915803666, 0.5894037687231303, 0.35559526176680967, 0.08027922479655936, 0.3119119732238176, 0.05782291271071427, 0.13190362798037492, 0.4229243966437406, 0.0796943958020443, 0.2434507864607749, 0.0953436196097236, 0.12562583761069235, 0.24327994609208403, 0.31580741700512505, 0.2438827778048882, 0.36227506770702744, 0.37493138538312365, 0.3261202335020448, 0.20512541607929746, 0.3551552470424043, 0.27138417890477506, 0.7119336543630828, 0.6416847283373249, 0.6085795890041766, 0.6471144216145648, 0.559227548880334, 0.7381892704931878, 0.730171703511048, 0.5944930850593222, 0.7510049918683513, 0.12513613836422155, 0.1094303398519576, 0.23276576101011992, 0.12088027059362139, 0.11819752163882025, 0.12396714292381383, 0.5310642338732325, 0.16816457504472404, 0.15165616117559222, 0.15848175970075595, 0.21335802194651166, 0.2057247135420588, 0.16689964007480818, 0.1700241261593448, 0.19908148325011898, 0.15221708106036858, 0.14668094367481876, 0.1532393265259856, 0.40759083181938227, 0.3913039070595773, 0.4995087746012151, 0.39198357632088165, 0.2649589390270879, 0.4029451099902013, 0.5055639158222469, 0.5142000112594571, 0.3137774045557207, 0.20011609316531498, 0.2616157464557748, 0.36654289059342937, 0.24868388457010693, 0.31724138527188184, 0.3656982581277264, 0.3388778797923574, 0.34558377668833584, 0.4139648567626475, 0.20537222581433812, 0.21559695972962556, 0.21395099787447047, 0.22690517880327798, 0.20551015401426453, 0.20256817804189975, 0.20575439829191777, 0.242391334884973, 0.20429542624655428, 0.18662256593108528, 0.5112597872768523, 0.37751740184237814, 0.20221542255412417, 0.20671329187121834, 0.20219543432953457, 0.20953189901442826, 0.2140327758234878, 0.20410697326223803, 0.8057293751203802, 0.1863189831965193, 0.8652623409708872, 0.9066792387962115, 0.7822523872457439, 0.7312412430366445, 0.8881370302648204, 0.7093813769434338, 0.1723904511835388, 0.8199256132297523, 0.6505158107691718, 0.8280991649375391, 0.3993159049023236, 0.2117232317018003, 0.533714844967416, 0.6237813329235857, 0.10471634007223962, 0.15177768587611606, 0.18195764389151758, 0.1705848393446815, 0.1883501685479324, 0.18498364581363347, 0.1747889482233027, 0.18377246322456686, 0.19251482862439784, 0.1807807722173579, 0.1796149698161975, 0.07819685579159508, 0.08460723088065769, 0.08459865364446817, 0.0892123903183909, 0.09520092249166923, 0.08999066124992583, 0.08087604461713527, 0.09033500059941435, 0.08868607097194003]}, "mutation_prompt": null}
{"id": "fb7c1f24-6f86-4ca2-ad2d-c8ee3c077607", "solution": "class EnhancedDynamicMutationOppositionBasedPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F, crossover_prob):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n\n        def evaluate(x):\n            return func(x)\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        crossover_probs = np.full(self.swarm_size, self.crossover_prob)\n\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n\n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                crossover_prob = np.clip(np.random.normal(crossover_probs[i], 0.05), 0.1, 0.9)  # Adaptive crossover probability\n                new_sol = de(population[i], pbest[[i, (i + 1) % self.swarm_size, (i + 2) % self.swarm_size]], mutation_factor, crossover_prob)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n\n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(\n                        pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n\n                mutation_factors[i] = mutation_factor  # Update mutation factor\n                crossover_probs[i] = crossover_prob  # Update crossover probability\n\n        return gbest", "name": "EnhancedDynamicMutationOppositionBasedPSO_DE_Optimizer", "description": "Enhancing population diversity through dynamic opposition-based mutation and adaptive crossover in PSO-DE optimization.", "configspace": "", "generation": 85, "fitness": 0.3781847266366218, "feedback": "The algorithm EnhancedDynamicMutationOppositionBasedPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.29.", "error": "", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.8886541643730623, 0.8798879572841449, 0.8848951258606471, 0.8879014912492498, 0.8757142898209195, 0.8704206258289762, 0.8788510822528577, 0.879970683046236, 0.8878850150656157, 0.7833078606145256, 0.8064648767516274, 0.7775677583443863, 0.7939903576292013, 0.794753460680878, 0.7903848727665733, 0.7766783562620405, 0.7790408578115581, 0.7496523682090457, 0.3922414042594722, 0.16935970740972806, 0.4256641367154148, 0.16188183673183687, 0.17448696067298097, 0.44506296519403465, 0.41800655413058374, 0.17064615484898227, 0.4591830176707926, 0.15631346806954738, 0.15051741965997534, 0.1426865681861409, 0.15176095115279453, 0.14074919058834534, 0.15834956670031752, 0.16149982797048779, 0.15923193904328292, 0.1577669156243724, 0.9833393259843813, 0.9744909423380167, 0.982402388676585, 0.9738963912036732, 0.9740926419615671, 0.9687874449516604, 0.9864274774784332, 0.9740523867945629, 0.9699465972915142, 0.7095456072468654, 0.691886733464108, 0.6768141143467421, 0.6692489233855793, 0.7077405365458903, 0.6852906774757183, 0.6934599702848012, 0.6934183415553954, 0.6708154985334466, 0.8169595858746126, 0.8644740964138812, 0.3691707122122785, 0.8524823721521213, 0.6468529780646588, 0.27140591567399674, 0.8456947091251907, 0.8604201301153206, 0.671830399528418, 0.12702517159301185, 0.20578164728244785, 0.4751076588061337, 0.20899149587761812, 0.2704100109462092, 0.4238172022728337, 0.2711452838679489, 0.12403999174967828, 0.2672398064359661, 0.2154797331912468, 0.2238574314205819, 0.16115533545300187, 0.1331656443635285, 0.2990910972516222, 0.1335095191473309, 0.251114285785487, 0.2696014200943375, 0.5050140600786237, 0.06653184517422173, 0.02965261957375842, 0.08267185255886866, 0.03291280848939149, 0.049955507530328735, 0.05403878217337155, 0.01929814432464716, 0.08839247391398475, 0.15506535110192765, 0.13131490143824542, 0.1526492252395294, 0.16245255979881368, 0.2263444147608732, 0.10241272300246307, 0.10504560531995888, 0.18648733279099383, 0.2041682691078689, 0.23219761746070444, 0.22030090542940606, 0.15454592316100846, 0.09419861441317934, 0.05139896554090484, 0.04987641707719381, 0.09356712736126649, 0.16853292307519752, 0.18520315686896005, 0.07789089164255014, 0.1406888485321146, 0.13816656575618602, 0.2128541413007452, 0.17299054795944846, 0.17233001635298184, 0.18994996334954317, 0.12003898514015143, 0.14337919017757483, 0.11372875303677865, 0.6719103825309104, 0.5605202038396577, 0.5985523558104182, 0.6262207154531113, 0.5771300465431931, 0.5921346590428098, 0.6182387602850061, 0.6196144893731794, 0.5928095103768667, 0.14426677121981135, 0.10859649495601464, 0.11002433746727269, 0.12706758478174085, 0.14708926142997425, 0.10828919915432433, 0.1275557665768945, 0.17185369398679595, 0.10660667164985205, 0.33221572898246654, 0.2239571840562259, 0.15788230532872727, 0.2815416647568859, 0.14765008304144778, 0.20393935683574493, 0.17107660231597344, 0.1331897152671654, 0.20140576720058978, 0.6088775817265062, 0.2887891736624243, 0.3827689115649834, 0.5594872597752503, 0.5116259164030506, 0.45515010144528234, 0.5588556466949375, 0.6833138990161272, 0.585589493339574, 0.24868640301705003, 0.2669679861737776, 0.25081384293912157, 0.28588438076845346, 0.23705624913479573, 0.2708671310948306, 0.2506096416747696, 0.246219430335742, 0.3451782616213388, 0.21663534193971268, 0.21748300357664652, 0.20884755466933025, 0.22004008280999798, 0.19811544030036998, 0.23738567680460942, 0.26384450243088287, 0.20279127089804183, 0.21263852669047523, 0.21294047360881618, 0.5547198377295852, 0.20426385792354007, 0.20505862120075147, 0.45714177663555866, 0.24490499187871373, 0.49339864342523265, 0.2130608418300849, 0.19647096746160664, 0.20655226459409026, 0.1727788769795472, 0.8653162490775983, 0.9363163119717147, 0.7339527176692721, 0.6867528800216252, 0.15959743596455378, 0.16920066819598756, 0.8634342668136574, 0.8585348529089517, 0.49159990227148476, 0.21061365025960077, 0.6947961228218626, 0.6138675816172632, 0.20953383099705047, 0.6469814171566896, 0.7096409265432002, 0.19672593978503772, 0.1820821854993836, 0.16872934191005895, 0.1907005187954426, 0.17746572209639233, 0.18433613978717955, 0.1862424318365674, 0.17370524119487085, 0.17353747642468664, 0.21732394721390125, 0.0811375002690895, 0.11280919599322259, 0.08991800752236745, 0.08194569622436865, 0.08955437181490744, 0.08452073869565757, 0.0913111046060574, 0.10507606181716289, 0.10032988898195783]}, "mutation_prompt": null}
{"id": "0fbcac07-47e8-4a3e-8844-7051f8a0ce7d", "solution": "def chaotic_map(x):\n    return 3.9 * x * (1 - x)\n\nclass EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                \n                # Introducing chaotic dynamics for exploration\n                chaotic_vals = np.array([chaotic_map(val) for val in new_sol])\n                new_sol += chaotic_vals\n                \n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n        \n        return gbest", "name": "EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by incorporating chaotic dynamics to diversify the search space for improved optimization performance.", "configspace": "", "generation": 86, "fitness": 0.10620173164252132, "feedback": "The algorithm EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.2571276172092817, 0.2941124384879409, 0.3485893968100826, 0.12272865810332245, 0.17606630729952688, 0.15327805418332208, 0.16909886836912957, 0.17459439383948916, 0.1654910036293299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11965834530152952, 0.14392040021248798, 0.060971367802315934, 0.12612614194780603, 0.09357857920929236, 0.09722054321042983, 0.09290735141161821, 0.07669876853586555, 0.09169136195121008, 0.06921967501500681, 0.07920473471760792, 0.06323570502013354, 0.0997790465014583, 0.04202076198554727, 0.04150100584533811, 0.10022734971268565, 0.03765996716171116, 0.05099285425598554, 0.06587769227105933, 0.06700890075107035, 0.06431609932424975, 0.09792356742519881, 0.08586844708691332, 0.11681625412820218, 0.11815460314629722, 0.12618561297951525, 0.07103088655517298, 0.10972402167919604, 0.033624435694174504, 9.999999999998899e-05, 0.05755933940300906, 0.029560722947832296, 0.057157969754698, 0.1052594577022119, 0.08604640275860298, 9.999999999998899e-05, 0.3456258991378094, 0.16663806089449862, 0.15433325187598856, 0.15449291775222862, 0.15689369840042233, 0.12031373142175639, 0.0915168419535819, 0.13613534663742433, 0.11766120775127964, 0.11093008022082662, 0.018650052839339182, 9.999999999998899e-05, 0.0933915229663056, 0.03497433120587812, 9.999999999998899e-05, 0.07572553413701821, 0.06931880213952446, 0.07290379570528005, 0.134358265998738, 0.08429098691347248, 0.04520634657495903, 0.10836667827997248, 0.11913741139819545, 0.08200956130683024, 0.09153835020431034, 0.17413816342833566, 0.0918684137563196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01692411212336209, 0.04590270160665555, 0.08245959832498317, 0.04762684624453395, 0.004663901801749137, 0.008425706597726124, 0.12394228680070829, 0.0541891064736334, 0.036246870772672635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06691716149618498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029917130295127548, 9.999999999998899e-05, 9.999999999998899e-05, 0.30334527608511663, 0.3402159731643305, 0.2296932604696459, 0.18304079446958266, 0.15956452676669508, 0.1522197584870646, 0.313572852817823, 0.3100561392541292, 0.2873243331254738, 0.06467003415399286, 0.04582214161455267, 0.02599127921993516, 0.06959424488358035, 0.06454195816923403, 0.09757651944841073, 0.09812148275957155, 0.0819443706404267, 0.09251481279915386, 0.15916995223029118, 0.10870336415258175, 0.13829867862115586, 0.13822615642162195, 0.1684989944388795, 0.14071942682699978, 0.14439934206077565, 0.12690383584297726, 0.1177412121024316, 0.1600274071718264, 0.18910822247786985, 0.17538586200148387, 0.275523719547228, 0.18804988410056822, 0.18529359189566508, 0.15569276587973113, 0.20964219804466322, 0.14766347952622472, 0.13254539841912083, 0.17193202419986797, 0.08085594863298151, 0.16424286394557897, 0.20168787151337375, 0.13177029131285123, 0.1434495740802042, 0.14435301571813164, 0.11342591558480086, 0.18553402079951886, 0.1628860196918709, 0.13916724686978454, 0.1885116472757421, 0.19514463854221364, 0.16560227978104192, 0.16106224749180087, 0.18473776857363955, 0.16528856920417234, 0.18301407124335467, 0.17751956575832795, 0.1587261786905252, 0.17198282972179058, 0.14833736775612705, 0.15850261801013188, 0.18941896189482732, 0.1670362923788523, 0.16386989935193996, 0.18111924888023956, 0.1790377976198233, 0.1100088596112, 0.10284227314996897, 0.1738990007184561, 0.17203660189666847, 0.10840923280201875, 0.11524887385009619, 0.16345338734915116, 0.31878248129280007, 0.14156093760488797, 0.0457663094705385, 0.15804382996137611, 0.16679838829352178, 0.21244225623124213, 0.0966485061342941, 0.09054075748107338, 0.15393661444188655, 0.16843174185812237, 0.1601997150295178, 0.17803552389770305, 0.14683914892287253, 0.15939595837009768, 0.16040514626340552, 0.16387240930658464, 0.17334510497749833, 0.162301296326526, 0.05797993448850991, 0.06747604765959203, 0.06298023117874274, 0.06299588797332834, 0.06200462241607707, 0.05583547209385087, 0.08301991819119559, 0.047274158405495315, 0.06589359574748654]}, "mutation_prompt": null}
{"id": "169b7d3a-2c04-47b0-ac85-926264211013", "solution": "def chaotic_update(x, v, pbest, gbest, chaos_param):\n    chaos = np.sin(chaos_param * x) * np.cos(chaos_param * v)\n    return x + chaos * (pbest - x) + chaos * (gbest - x)\n\nclass EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        chaos_param = np.random.uniform(0.1, 1.0)\n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_sol = chaotic_update(new_sol, velocities[i], pbest[i], gbest, chaos_param)\n                \n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                      \n                # Opposite solution\n                \n                mutation_factors[i] = mutation_factor\n        return gbest", "name": "EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing diversity exploration by introducing chaotic dynamics to the population update.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'velocities' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'velocities' referenced before assignment\")", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {}, "mutation_prompt": null}
{"id": "1a833770-cf0c-4eba-adaf-e67f020bd0be", "solution": "class DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(EnhancedOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n        \n        return gbest", "name": "DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Improving convergence by dynamically adapting the mutation factor based on the historical performance of the population.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.8916224630471086, 0.8662010492119432, 0.8807573400507184, 0.8726035270071195, 0.8870645050507904, 0.8795202674639289, 0.8755287412633262, 0.8868157659456796, 0.8721836774728691, 0.7662189003637762, 0.76496193943428, 0.7839075351704836, 0.7723148548571772, 0.76955552339854, 0.7637293008772994, 0.7703505370409319, 0.7796977634729098, 0.769617949442257, 0.14900496401295948, 0.1476497038376392, 0.13872939899821046, 0.16382683874383341, 0.16869418487707333, 0.2854366186945664, 0.13875552424427373, 0.2743786670514039, 0.17011098516456602, 0.14415731070610294, 0.11086399704770156, 0.1334059049028259, 0.1149088485972839, 0.14112760522182466, 0.11761506865625093, 0.1768868680744119, 0.1450491684215418, 0.11946970506932453, 0.983428847516949, 0.9860768480316898, 0.9655964963204124, 0.9683661808653748, 0.9821269837637837, 0.9692880710090794, 0.9705860509043572, 0.9814072246666959, 0.9670295878793134, 0.6345834238018829, 0.6341381182543477, 0.6443616068091067, 0.6860181806425569, 0.6294703114719896, 0.6495322342770204, 0.6098345719980909, 0.6800258641548269, 0.6578570656653644, 0.8530502817426455, 0.36484130887160304, 0.7537899735700083, 0.8477162386130621, 0.8406076452739707, 0.6952155035386429, 0.788982735571129, 0.8007679252106092, 0.869347900452771, 0.2041500956206156, 0.12818348830394677, 0.2505744941803396, 0.19638731678130716, 0.384085707724067, 0.1837199002221469, 0.7177358273869395, 0.3193117400663148, 0.2703279722138042, 0.50125409605644, 0.14974806915460626, 0.27945304423706496, 0.23812133854338335, 0.2725307142586053, 0.33859667460593845, 0.42320032314782297, 0.1487883255203889, 0.2206547786529658, 0.10543699806641904, 0.33599950454177574, 0.26030075066135305, 0.28900174056737093, 0.3507260331848414, 0.2407309926735488, 0.33546139390908536, 0.13157772824753788, 0.28198070109993445, 0.3154402052768228, 0.34748400315330086, 0.44954560637883256, 0.3269310956568041, 0.36716515545347406, 0.40493124402662883, 0.3942443894822726, 0.43598549606855774, 0.4530255139086711, 0.12412717435263709, 0.18820539934638936, 0.030745971620346202, 0.08464813173804664, 0.07617121075459743, 0.12199467252999785, 0.14986039963613906, 0.09935949902785413, 0.0709860440673481, 0.279436455951954, 0.23427243210303594, 0.3220145715132374, 0.3974843220524623, 0.178984626322939, 0.2842812119017203, 0.18243454358108369, 0.1998702266312513, 0.29240287950243304, 0.6109901181137559, 0.6032831979761377, 0.7385411760819441, 0.5775536974346165, 0.665015767252257, 0.7480586014190209, 0.609330190690248, 0.641223947470297, 0.6994996594129654, 0.1325352231107776, 0.16671100245099169, 0.12548846001466796, 0.13689946239809903, 0.17979219109415823, 0.13155935468674473, 0.11290583289109712, 0.17384411765669394, 0.15465509527692356, 0.1536765538700713, 0.2064128759749444, 0.18610151474132441, 0.18772819908377292, 0.2213946046206159, 0.16011814841139516, 0.2155975266036828, 0.20294987721079571, 0.14647134039729592, 0.4227003095347349, 0.5596262624703803, 0.5222732127072613, 0.5796640923300131, 0.5047608435797377, 0.5107551510807579, 0.6472253016357137, 0.47920461791182056, 0.405389042549514, 0.2961113401636384, 0.36577063447707825, 0.30071068597199413, 0.36767703763445914, 0.3099540129621229, 0.24519839142000477, 0.4144756439923277, 0.30670892302551056, 0.24318333340654508, 0.2011998538608223, 0.19031386964970742, 0.1818673850071595, 0.224094201591873, 0.22366732868617878, 0.2391400463204627, 0.1967822808495383, 0.20674404358280252, 0.20096975576547915, 0.1955429604373845, 0.23838973016355636, 0.2303295360054366, 0.20696646193960877, 0.19321849581177064, 0.2109910548893903, 0.20383915228882166, 0.23455543600288997, 0.20082936207282076, 0.8402875344061922, 0.18604691798747108, 0.8179349907367448, 0.8584525474430539, 0.7728955901526307, 0.20175693899061042, 0.6489790232616695, 0.16821230300486845, 0.8635889586494935, 0.8863301053580867, 0.7606120571799018, 0.773248553436271, 0.5710779012363997, 0.6504917375705151, 0.20737431629688308, 0.7363254272351208, 0.33547433082710665, 0.8588943397459434, 0.17624390837603554, 0.17020327699975046, 0.1778325384769197, 0.18609894459201992, 0.19076623310166319, 0.1793935755588324, 0.18358812512094425, 0.18298658300601633, 0.18196051369846522, 0.08940050884542927, 0.09562682598272754, 0.08266000656285721, 0.08402343341366392, 0.08299357999030488, 0.09059758389014283, 0.10380791070021989, 0.08294029460417174, 0.08162380287398685]}, "mutation_prompt": null}
{"id": "03c0495a-5432-4273-90d2-816581980b97", "solution": "class EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n        def __call__(self, func):\n            def de(x, pop, F):\n                idxs = np.random.choice(len(pop), 3, replace=False)\n                a, b, c = pop[idxs]\n                mutant = a + F * (b - c)\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, x)\n                return trial\n\n            def evaluate(x):\n                return func(x)\n\n            population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_scores = np.array([evaluate(p) for p in pbest])\n            gbest_idx = np.argmin(pbest_scores)\n            gbest = pbest[gbest_idx]\n            gbest_score = pbest_scores[gbest_idx]\n            mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n            adaptive_velocities = np.zeros((self.swarm_size, self.dim))  # Enhanced adaptive velocity\n\n            for _ in range(self.budget):\n                r1 = np.random.rand(self.swarm_size, self.dim)\n                r2 = np.random.rand(self.swarm_size, self.dim)\n                adaptive_velocities = self.w * adaptive_velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)  # Adaptive velocity update\n                population += adaptive_velocities\n\n                for i in range(self.swarm_size):\n                    mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                    new_sol = de(population[i], pbest[[i, (i + 1) % self.swarm_size, (i + 2) % self.swarm_size]], mutation_factor)\n                    new_score = evaluate(new_sol)\n                    if new_score < pbest_scores[i]:\n                        pbest[i] = new_sol\n                        pbest_scores[i] = new_score\n                        if new_score < gbest_score:\n                            gbest = new_sol\n                            gbest_score = new_score\n\n                    if np.random.rand() < 0.1:\n                        opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(\n                            pbest[i] - gbest) / np.sqrt(self.dim)\n                        opposite_score = evaluate(opposite_sol)\n                        if opposite_score < pbest_scores[i]:\n                            pbest[i] = opposite_sol\n                            pbest_scores[i] = opposite_score\n                            if opposite_score < gbest_score:\n                                gbest = opposite_sol\n                                gbest_score = opposite_score\n\n                    mutation_factors[i] = mutation_factor  # Update mutation factor\n\n            return gbest", "name": "EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing opposition-based exploration with adaptive velocity update for improved convergence.", "configspace": "", "generation": 89, "fitness": 0.403642320198497, "feedback": "The algorithm EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.8916224630471086, 0.8662010492119432, 0.8807573400507184, 0.8726035270071195, 0.8870645050507904, 0.8795202674639289, 0.8755287412633262, 0.8868157659456796, 0.8721836774728691, 0.7662189003637762, 0.76496193943428, 0.7839075351704836, 0.7723148548571772, 0.76955552339854, 0.7637293008772994, 0.7703505370409319, 0.7796977634729098, 0.769617949442257, 0.14900496401295948, 0.1476497038376392, 0.13872939899821046, 0.16382683874383341, 0.16869418487707333, 0.2854366186945664, 0.13875552424427373, 0.2743786670514039, 0.17011098516456602, 0.14415731070610294, 0.11086399704770156, 0.1334059049028259, 0.1149088485972839, 0.14112760522182466, 0.11761506865625093, 0.1768868680744119, 0.1450491684215418, 0.11946970506932453, 0.983428847516949, 0.9860768480316898, 0.9655964963204124, 0.9683661808653748, 0.9821269837637837, 0.9692880710090794, 0.9705860509043572, 0.9814072246666959, 0.9670295878793134, 0.6345834238018829, 0.6341381182543477, 0.6443616068091067, 0.6860181806425569, 0.6294703114719896, 0.6495322342770204, 0.6098345719980909, 0.6800258641548269, 0.6578570656653644, 0.8530502817426455, 0.36484130887160304, 0.7537899735700083, 0.8477162386130621, 0.8406076452739707, 0.6952155035386429, 0.788982735571129, 0.8007679252106092, 0.869347900452771, 0.2041500956206156, 0.12818348830394677, 0.2505744941803396, 0.19638731678130716, 0.384085707724067, 0.1837199002221469, 0.7177358273869395, 0.3193117400663148, 0.2703279722138042, 0.50125409605644, 0.14974806915460626, 0.27945304423706496, 0.23812133854338335, 0.2725307142586053, 0.33859667460593845, 0.42320032314782297, 0.1487883255203889, 0.2206547786529658, 0.10543699806641904, 0.33599950454177574, 0.26030075066135305, 0.28900174056737093, 0.3507260331848414, 0.2407309926735488, 0.33546139390908536, 0.13157772824753788, 0.28198070109993445, 0.3154402052768228, 0.34748400315330086, 0.44954560637883256, 0.3269310956568041, 0.36716515545347406, 0.40493124402662883, 0.3942443894822726, 0.43598549606855774, 0.4530255139086711, 0.12412717435263709, 0.18820539934638936, 0.030745971620346202, 0.08464813173804664, 0.07617121075459743, 0.12199467252999785, 0.14986039963613906, 0.09935949902785413, 0.0709860440673481, 0.279436455951954, 0.23427243210303594, 0.3220145715132374, 0.3974843220524623, 0.178984626322939, 0.2842812119017203, 0.18243454358108369, 0.1998702266312513, 0.29240287950243304, 0.6109901181137559, 0.6032831979761377, 0.7385411760819441, 0.5775536974346165, 0.665015767252257, 0.7480586014190209, 0.609330190690248, 0.641223947470297, 0.6994996594129654, 0.1325352231107776, 0.16671100245099169, 0.12548846001466796, 0.13689946239809903, 0.17979219109415823, 0.13155935468674473, 0.11290583289109712, 0.17384411765669394, 0.15465509527692356, 0.1536765538700713, 0.2064128759749444, 0.18610151474132441, 0.18772819908377292, 0.2213946046206159, 0.16011814841139516, 0.2155975266036828, 0.20294987721079571, 0.14647134039729592, 0.4227003095347349, 0.5596262624703803, 0.5222732127072613, 0.5796640923300131, 0.5047608435797377, 0.5107551510807579, 0.6472253016357137, 0.47920461791182056, 0.405389042549514, 0.2961113401636384, 0.36577063447707825, 0.30071068597199413, 0.36767703763445914, 0.3099540129621229, 0.24519839142000477, 0.4144756439923277, 0.30670892302551056, 0.24318333340654508, 0.2011998538608223, 0.19031386964970742, 0.1818673850071595, 0.224094201591873, 0.22366732868617878, 0.2391400463204627, 0.1967822808495383, 0.20674404358280252, 0.20096975576547915, 0.1955429604373845, 0.23838973016355636, 0.2303295360054366, 0.20696646193960877, 0.19321849581177064, 0.2109910548893903, 0.20383915228882166, 0.23455543600288997, 0.20082936207282076, 0.8402875344061922, 0.18604691798747108, 0.8179349907367448, 0.8584525474430539, 0.7728955901526307, 0.20175693899061042, 0.6489790232616695, 0.16821230300486845, 0.8635889586494935, 0.8863301053580867, 0.7606120571799018, 0.773248553436271, 0.5710779012363997, 0.6504917375705151, 0.20737431629688308, 0.7363254272351208, 0.33547433082710665, 0.8588943397459434, 0.17624390837603554, 0.17020327699975046, 0.1778325384769197, 0.18609894459201992, 0.19076623310166319, 0.1793935755588324, 0.18358812512094425, 0.18298658300601633, 0.18196051369846522, 0.08940050884542927, 0.09562682598272754, 0.08266000656285721, 0.08402343341366392, 0.08299357999030488, 0.09059758389014283, 0.10380791070021989, 0.08294029460417174, 0.08162380287398685]}, "mutation_prompt": null}
{"id": "eea08bab-bd6e-4416-a801-60192946e617", "solution": "class EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def chaos_search(x):\n            chaotic_seq = np.empty(self.dim)\n            chaotic_seq[0] = x\n            for i in range(1, self.dim):\n                chaotic_seq[i] = 3.9 * chaotic_seq[i - 1] * (1 - chaotic_seq[i - 1])  # Logistic map\n            return chaotic_seq\n        \n        for _ in range(int(self.budget * 0.038)):\n            population = np.array([chaos_search(p) for p in population])\n        \n        for _ in range(int(self.budget * 0.962)):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            ...\n        return gbest", "name": "EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by introducing a chaotic search mechanism to diversify the population and escape local optima.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'population' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'population' referenced before assignment\")", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {}, "mutation_prompt": null}
{"id": "6ed348f8-5a08-4875-8b1c-890c45e42ace", "solution": "class DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(EnhancedOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n        \n        return gbest", "name": "DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Improving convergence by dynamically adapting the mutation factor based on the historical performance of the population.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.8916224630471086, 0.8662010492119432, 0.8807573400507184, 0.8726035270071195, 0.8870645050507904, 0.8795202674639289, 0.8755287412633262, 0.8868157659456796, 0.8721836774728691, 0.7662189003637762, 0.76496193943428, 0.7839075351704836, 0.7723148548571772, 0.76955552339854, 0.7637293008772994, 0.7703505370409319, 0.7796977634729098, 0.769617949442257, 0.14900496401295948, 0.1476497038376392, 0.13872939899821046, 0.16382683874383341, 0.16869418487707333, 0.2854366186945664, 0.13875552424427373, 0.2743786670514039, 0.17011098516456602, 0.14415731070610294, 0.11086399704770156, 0.1334059049028259, 0.1149088485972839, 0.14112760522182466, 0.11761506865625093, 0.1768868680744119, 0.1450491684215418, 0.11946970506932453, 0.983428847516949, 0.9860768480316898, 0.9655964963204124, 0.9683661808653748, 0.9821269837637837, 0.9692880710090794, 0.9705860509043572, 0.9814072246666959, 0.9670295878793134, 0.6345834238018829, 0.6341381182543477, 0.6443616068091067, 0.6860181806425569, 0.6294703114719896, 0.6495322342770204, 0.6098345719980909, 0.6800258641548269, 0.6578570656653644, 0.8530502817426455, 0.36484130887160304, 0.7537899735700083, 0.8477162386130621, 0.8406076452739707, 0.6952155035386429, 0.788982735571129, 0.8007679252106092, 0.869347900452771, 0.2041500956206156, 0.12818348830394677, 0.2505744941803396, 0.19638731678130716, 0.384085707724067, 0.1837199002221469, 0.7177358273869395, 0.3193117400663148, 0.2703279722138042, 0.50125409605644, 0.14974806915460626, 0.27945304423706496, 0.23812133854338335, 0.2725307142586053, 0.33859667460593845, 0.42320032314782297, 0.1487883255203889, 0.2206547786529658, 0.10543699806641904, 0.33599950454177574, 0.26030075066135305, 0.28900174056737093, 0.3507260331848414, 0.2407309926735488, 0.33546139390908536, 0.13157772824753788, 0.28198070109993445, 0.3154402052768228, 0.34748400315330086, 0.44954560637883256, 0.3269310956568041, 0.36716515545347406, 0.40493124402662883, 0.3942443894822726, 0.43598549606855774, 0.4530255139086711, 0.12412717435263709, 0.18820539934638936, 0.030745971620346202, 0.08464813173804664, 0.07617121075459743, 0.12199467252999785, 0.14986039963613906, 0.09935949902785413, 0.0709860440673481, 0.279436455951954, 0.23427243210303594, 0.3220145715132374, 0.3974843220524623, 0.178984626322939, 0.2842812119017203, 0.18243454358108369, 0.1998702266312513, 0.29240287950243304, 0.6109901181137559, 0.6032831979761377, 0.7385411760819441, 0.5775536974346165, 0.665015767252257, 0.7480586014190209, 0.609330190690248, 0.641223947470297, 0.6994996594129654, 0.1325352231107776, 0.16671100245099169, 0.12548846001466796, 0.13689946239809903, 0.17979219109415823, 0.13155935468674473, 0.11290583289109712, 0.17384411765669394, 0.15465509527692356, 0.1536765538700713, 0.2064128759749444, 0.18610151474132441, 0.18772819908377292, 0.2213946046206159, 0.16011814841139516, 0.2155975266036828, 0.20294987721079571, 0.14647134039729592, 0.4227003095347349, 0.5596262624703803, 0.5222732127072613, 0.5796640923300131, 0.5047608435797377, 0.5107551510807579, 0.6472253016357137, 0.47920461791182056, 0.405389042549514, 0.2961113401636384, 0.36577063447707825, 0.30071068597199413, 0.36767703763445914, 0.3099540129621229, 0.24519839142000477, 0.4144756439923277, 0.30670892302551056, 0.24318333340654508, 0.2011998538608223, 0.19031386964970742, 0.1818673850071595, 0.224094201591873, 0.22366732868617878, 0.2391400463204627, 0.1967822808495383, 0.20674404358280252, 0.20096975576547915, 0.1955429604373845, 0.23838973016355636, 0.2303295360054366, 0.20696646193960877, 0.19321849581177064, 0.2109910548893903, 0.20383915228882166, 0.23455543600288997, 0.20082936207282076, 0.8402875344061922, 0.18604691798747108, 0.8179349907367448, 0.8584525474430539, 0.7728955901526307, 0.20175693899061042, 0.6489790232616695, 0.16821230300486845, 0.8635889586494935, 0.8863301053580867, 0.7606120571799018, 0.773248553436271, 0.5710779012363997, 0.6504917375705151, 0.20737431629688308, 0.7363254272351208, 0.33547433082710665, 0.8588943397459434, 0.17624390837603554, 0.17020327699975046, 0.1778325384769197, 0.18609894459201992, 0.19076623310166319, 0.1793935755588324, 0.18358812512094425, 0.18298658300601633, 0.18196051369846522, 0.08940050884542927, 0.09562682598272754, 0.08266000656285721, 0.08402343341366392, 0.08299357999030488, 0.09059758389014283, 0.10380791070021989, 0.08294029460417174, 0.08162380287398685]}, "mutation_prompt": null}
{"id": "38b0bd59-3463-41f1-9102-fba2d2a28fc9", "solution": "class EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.opposition_init = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim)) * np.sign(np.random.randn(self.swarm_size, self.dim))\n    \n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = self.opposition_init.copy()\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n        \n        return gbest", "name": "EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing diversity by introducing a novel opposition-based initialization strategy to improve exploration.", "configspace": "", "generation": 92, "fitness": 0.39942754249952506, "feedback": "The algorithm EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.8925151770331406, 0.8798177824983636, 0.8832939905245798, 0.8788281275364865, 0.8882346469681608, 0.8849148725708956, 0.8752867006060707, 0.8908190842229944, 0.8842809917848489, 0.7698060176436531, 0.8020620025078748, 0.7766556688527793, 0.7384280443482039, 0.7892929706144355, 0.8086632539725112, 0.7632426636585861, 0.786542692026418, 0.7999798507642777, 0.16503004637306928, 0.5562773248402403, 0.17231116048446693, 0.14442346607672685, 0.6693946457685752, 0.4116563973969425, 0.1448098549382819, 0.15464995198179532, 0.2519441296881283, 0.1284379159109238, 0.16982948579827262, 0.14504783856843273, 0.1306653872563155, 0.14635546896216234, 0.13606859792386716, 0.10971426120931715, 0.13291232938449793, 0.12788748755695123, 0.9675044341367487, 0.9711422655456616, 0.9721109333703191, 0.9897338387582558, 0.9756251903671592, 0.9725233538513688, 0.9912956742643928, 0.9819793333111547, 0.9837318758155873, 0.6073198431906455, 0.6407049402009118, 0.6500172481969393, 0.5618817590923786, 0.6711123254854883, 0.6711769767233244, 0.6244475671993105, 0.6421331808791201, 0.5445486211649373, 0.8803495845556952, 0.8087254501918252, 0.22493128503623672, 0.8625268214305568, 0.8484055527586363, 0.28033633517766976, 0.7778160605000309, 0.8403980653897488, 0.8675979873383877, 0.22696396192942014, 0.1908060928100136, 0.2979713986276712, 0.3992999854873599, 0.3379639375282686, 0.5986344515541686, 0.37295843051545063, 0.20235170352415988, 0.2779251512533226, 0.28124419145736124, 0.2873794038330516, 0.2593864899961712, 0.23788059019641228, 0.18173210249750216, 0.21047226114635142, 0.30729883084886755, 0.12867272700339327, 0.2235773866477505, 0.17906985972975797, 0.14203422163534374, 0.1813097809169939, 0.3287366724392139, 0.09569727068065426, 0.2238559464474258, 0.2903269688724225, 0.3055606878206413, 0.29584588487981445, 0.30913361058942657, 0.42338439965774, 0.4081614407907157, 0.16706504260610822, 0.23805453070729543, 0.43480770959692217, 0.47893313487440525, 0.4955203267495092, 0.46795092404644867, 0.0961631594692024, 0.08320852162133507, 0.03707727249473536, 0.051031575510504634, 0.23309181131435908, 0.31781286830560807, 0.1835240396370731, 0.14447200125479398, 0.06772451669414914, 0.2781128052992228, 0.29969848722112535, 0.28466190041004313, 0.28793653509882866, 0.3422277604514856, 0.3373989267548102, 0.19914751033691647, 0.17500381814097232, 0.25578129238337854, 0.7301634071287288, 0.628418217601761, 0.7882660400436247, 0.7326429864757005, 0.5833700370929332, 0.7211381853579131, 0.7561752351040967, 0.6967006872189465, 0.5927092665686355, 0.13450810780050104, 0.13368717986892442, 0.15729115790432824, 0.14238967142274173, 0.1364071923298632, 0.14626576320757578, 0.10816902817555896, 0.16908270276880089, 0.15956220811106037, 0.25566354971167005, 0.15719057685372195, 0.15345237452591898, 0.1546944942554095, 0.24407306568129794, 0.2528557233270109, 0.18919559985360668, 0.15766607570943836, 0.1718686585164123, 0.4926055566805507, 0.3508464190715125, 0.4503429302571915, 0.3235163224296752, 0.45869912325361384, 0.42854728374070883, 0.5959721360321311, 0.23665863445705504, 0.5184334858669213, 0.29484188598225225, 0.27846718644904067, 0.33200558151671644, 0.31711602691399854, 0.3508274778554126, 0.3730342771408838, 0.2653671671831668, 0.21807126325850557, 0.2620790694079659, 0.19953597666144474, 0.2252413062446258, 0.23106340339339193, 0.2146675830949767, 0.21156633958491045, 0.2185717309196974, 0.19698468144679726, 0.20635761671036534, 0.22285782286023836, 0.19964672991217003, 0.20012697283936765, 0.19538645712569958, 0.24002112290019106, 0.18906590598216466, 0.22420690500794005, 0.21356881274890194, 0.20410503686546422, 0.21946481151127573, 0.14522487656291816, 0.1855303615976588, 0.18668139337060852, 0.19993225442644857, 0.8432909828756735, 0.19923452489261995, 0.8660655905664719, 0.9010370889389748, 0.637810506196524, 0.16675494409542502, 0.7903134539743768, 0.8676837780420925, 0.7971371091685658, 0.6669033729444179, 0.5318298364445759, 0.8046292244814048, 0.7571225547571043, 0.7177249519612608, 0.1981155949994412, 0.1911354816529437, 0.1884075703782382, 0.18168647922803316, 0.20735975066858237, 0.1822644388837712, 0.17348018060687065, 0.18564874268883158, 0.18152242247773898, 0.09248232016911373, 0.09770818250239377, 0.08751358204071935, 0.08900026537932881, 0.09809262759272208, 0.09119290117880952, 0.09044127207102903, 0.08813082250336379, 0.11158239917343304]}, "mutation_prompt": null}
{"id": "bdb921a4-ee53-424c-a26c-c3ab37aa73df", "solution": "class DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(EnhancedOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n        \n        return gbest", "name": "DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Improving convergence by dynamically adapting the mutation factor based on the historical performance of the population.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.8916224630471086, 0.8662010492119432, 0.8807573400507184, 0.8726035270071195, 0.8870645050507904, 0.8795202674639289, 0.8755287412633262, 0.8868157659456796, 0.8721836774728691, 0.7662189003637762, 0.76496193943428, 0.7839075351704836, 0.7723148548571772, 0.76955552339854, 0.7637293008772994, 0.7703505370409319, 0.7796977634729098, 0.769617949442257, 0.14900496401295948, 0.1476497038376392, 0.13872939899821046, 0.16382683874383341, 0.16869418487707333, 0.2854366186945664, 0.13875552424427373, 0.2743786670514039, 0.17011098516456602, 0.14415731070610294, 0.11086399704770156, 0.1334059049028259, 0.1149088485972839, 0.14112760522182466, 0.11761506865625093, 0.1768868680744119, 0.1450491684215418, 0.11946970506932453, 0.983428847516949, 0.9860768480316898, 0.9655964963204124, 0.9683661808653748, 0.9821269837637837, 0.9692880710090794, 0.9705860509043572, 0.9814072246666959, 0.9670295878793134, 0.6345834238018829, 0.6341381182543477, 0.6443616068091067, 0.6860181806425569, 0.6294703114719896, 0.6495322342770204, 0.6098345719980909, 0.6800258641548269, 0.6578570656653644, 0.8530502817426455, 0.36484130887160304, 0.7537899735700083, 0.8477162386130621, 0.8406076452739707, 0.6952155035386429, 0.788982735571129, 0.8007679252106092, 0.869347900452771, 0.2041500956206156, 0.12818348830394677, 0.2505744941803396, 0.19638731678130716, 0.384085707724067, 0.1837199002221469, 0.7177358273869395, 0.3193117400663148, 0.2703279722138042, 0.50125409605644, 0.14974806915460626, 0.27945304423706496, 0.23812133854338335, 0.2725307142586053, 0.33859667460593845, 0.42320032314782297, 0.1487883255203889, 0.2206547786529658, 0.10543699806641904, 0.33599950454177574, 0.26030075066135305, 0.28900174056737093, 0.3507260331848414, 0.2407309926735488, 0.33546139390908536, 0.13157772824753788, 0.28198070109993445, 0.3154402052768228, 0.34748400315330086, 0.44954560637883256, 0.3269310956568041, 0.36716515545347406, 0.40493124402662883, 0.3942443894822726, 0.43598549606855774, 0.4530255139086711, 0.12412717435263709, 0.18820539934638936, 0.030745971620346202, 0.08464813173804664, 0.07617121075459743, 0.12199467252999785, 0.14986039963613906, 0.09935949902785413, 0.0709860440673481, 0.279436455951954, 0.23427243210303594, 0.3220145715132374, 0.3974843220524623, 0.178984626322939, 0.2842812119017203, 0.18243454358108369, 0.1998702266312513, 0.29240287950243304, 0.6109901181137559, 0.6032831979761377, 0.7385411760819441, 0.5775536974346165, 0.665015767252257, 0.7480586014190209, 0.609330190690248, 0.641223947470297, 0.6994996594129654, 0.1325352231107776, 0.16671100245099169, 0.12548846001466796, 0.13689946239809903, 0.17979219109415823, 0.13155935468674473, 0.11290583289109712, 0.17384411765669394, 0.15465509527692356, 0.1536765538700713, 0.2064128759749444, 0.18610151474132441, 0.18772819908377292, 0.2213946046206159, 0.16011814841139516, 0.2155975266036828, 0.20294987721079571, 0.14647134039729592, 0.4227003095347349, 0.5596262624703803, 0.5222732127072613, 0.5796640923300131, 0.5047608435797377, 0.5107551510807579, 0.6472253016357137, 0.47920461791182056, 0.405389042549514, 0.2961113401636384, 0.36577063447707825, 0.30071068597199413, 0.36767703763445914, 0.3099540129621229, 0.24519839142000477, 0.4144756439923277, 0.30670892302551056, 0.24318333340654508, 0.2011998538608223, 0.19031386964970742, 0.1818673850071595, 0.224094201591873, 0.22366732868617878, 0.2391400463204627, 0.1967822808495383, 0.20674404358280252, 0.20096975576547915, 0.1955429604373845, 0.23838973016355636, 0.2303295360054366, 0.20696646193960877, 0.19321849581177064, 0.2109910548893903, 0.20383915228882166, 0.23455543600288997, 0.20082936207282076, 0.8402875344061922, 0.18604691798747108, 0.8179349907367448, 0.8584525474430539, 0.7728955901526307, 0.20175693899061042, 0.6489790232616695, 0.16821230300486845, 0.8635889586494935, 0.8863301053580867, 0.7606120571799018, 0.773248553436271, 0.5710779012363997, 0.6504917375705151, 0.20737431629688308, 0.7363254272351208, 0.33547433082710665, 0.8588943397459434, 0.17624390837603554, 0.17020327699975046, 0.1778325384769197, 0.18609894459201992, 0.19076623310166319, 0.1793935755588324, 0.18358812512094425, 0.18298658300601633, 0.18196051369846522, 0.08940050884542927, 0.09562682598272754, 0.08266000656285721, 0.08402343341366392, 0.08299357999030488, 0.09059758389014283, 0.10380791070021989, 0.08294029460417174, 0.08162380287398685]}, "mutation_prompt": null}
{"id": "4a4ebab6-4871-429b-ac27-0d69f8e9ba3b", "solution": "class EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def adaptive_opposition_based_exploration(x, target):\n            opposite_sol = target - (x - target)\n            return opposite_sol\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = adaptive_opposition_based_exploration(pbest[i], gbest)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n        \n        return gbest", "name": "EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Implementing a novel adaptive opposition-based strategy to enhance exploration and exploitation in the optimization process.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'de' is not defined\").", "error": "NameError(\"name 'de' is not defined\")", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {}, "mutation_prompt": null}
{"id": "618c20a2-57dd-4b7d-a89d-7a7d6e7e1fb0", "solution": "class DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(EnhancedOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n        \n        return gbest", "name": "DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Improving convergence by dynamically adapting the mutation factor based on the historical performance of the population.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.8916224630471086, 0.8662010492119432, 0.8807573400507184, 0.8726035270071195, 0.8870645050507904, 0.8795202674639289, 0.8755287412633262, 0.8868157659456796, 0.8721836774728691, 0.7662189003637762, 0.76496193943428, 0.7839075351704836, 0.7723148548571772, 0.76955552339854, 0.7637293008772994, 0.7703505370409319, 0.7796977634729098, 0.769617949442257, 0.14900496401295948, 0.1476497038376392, 0.13872939899821046, 0.16382683874383341, 0.16869418487707333, 0.2854366186945664, 0.13875552424427373, 0.2743786670514039, 0.17011098516456602, 0.14415731070610294, 0.11086399704770156, 0.1334059049028259, 0.1149088485972839, 0.14112760522182466, 0.11761506865625093, 0.1768868680744119, 0.1450491684215418, 0.11946970506932453, 0.983428847516949, 0.9860768480316898, 0.9655964963204124, 0.9683661808653748, 0.9821269837637837, 0.9692880710090794, 0.9705860509043572, 0.9814072246666959, 0.9670295878793134, 0.6345834238018829, 0.6341381182543477, 0.6443616068091067, 0.6860181806425569, 0.6294703114719896, 0.6495322342770204, 0.6098345719980909, 0.6800258641548269, 0.6578570656653644, 0.8530502817426455, 0.36484130887160304, 0.7537899735700083, 0.8477162386130621, 0.8406076452739707, 0.6952155035386429, 0.788982735571129, 0.8007679252106092, 0.869347900452771, 0.2041500956206156, 0.12818348830394677, 0.2505744941803396, 0.19638731678130716, 0.384085707724067, 0.1837199002221469, 0.7177358273869395, 0.3193117400663148, 0.2703279722138042, 0.50125409605644, 0.14974806915460626, 0.27945304423706496, 0.23812133854338335, 0.2725307142586053, 0.33859667460593845, 0.42320032314782297, 0.1487883255203889, 0.2206547786529658, 0.10543699806641904, 0.33599950454177574, 0.26030075066135305, 0.28900174056737093, 0.3507260331848414, 0.2407309926735488, 0.33546139390908536, 0.13157772824753788, 0.28198070109993445, 0.3154402052768228, 0.34748400315330086, 0.44954560637883256, 0.3269310956568041, 0.36716515545347406, 0.40493124402662883, 0.3942443894822726, 0.43598549606855774, 0.4530255139086711, 0.12412717435263709, 0.18820539934638936, 0.030745971620346202, 0.08464813173804664, 0.07617121075459743, 0.12199467252999785, 0.14986039963613906, 0.09935949902785413, 0.0709860440673481, 0.279436455951954, 0.23427243210303594, 0.3220145715132374, 0.3974843220524623, 0.178984626322939, 0.2842812119017203, 0.18243454358108369, 0.1998702266312513, 0.29240287950243304, 0.6109901181137559, 0.6032831979761377, 0.7385411760819441, 0.5775536974346165, 0.665015767252257, 0.7480586014190209, 0.609330190690248, 0.641223947470297, 0.6994996594129654, 0.1325352231107776, 0.16671100245099169, 0.12548846001466796, 0.13689946239809903, 0.17979219109415823, 0.13155935468674473, 0.11290583289109712, 0.17384411765669394, 0.15465509527692356, 0.1536765538700713, 0.2064128759749444, 0.18610151474132441, 0.18772819908377292, 0.2213946046206159, 0.16011814841139516, 0.2155975266036828, 0.20294987721079571, 0.14647134039729592, 0.4227003095347349, 0.5596262624703803, 0.5222732127072613, 0.5796640923300131, 0.5047608435797377, 0.5107551510807579, 0.6472253016357137, 0.47920461791182056, 0.405389042549514, 0.2961113401636384, 0.36577063447707825, 0.30071068597199413, 0.36767703763445914, 0.3099540129621229, 0.24519839142000477, 0.4144756439923277, 0.30670892302551056, 0.24318333340654508, 0.2011998538608223, 0.19031386964970742, 0.1818673850071595, 0.224094201591873, 0.22366732868617878, 0.2391400463204627, 0.1967822808495383, 0.20674404358280252, 0.20096975576547915, 0.1955429604373845, 0.23838973016355636, 0.2303295360054366, 0.20696646193960877, 0.19321849581177064, 0.2109910548893903, 0.20383915228882166, 0.23455543600288997, 0.20082936207282076, 0.8402875344061922, 0.18604691798747108, 0.8179349907367448, 0.8584525474430539, 0.7728955901526307, 0.20175693899061042, 0.6489790232616695, 0.16821230300486845, 0.8635889586494935, 0.8863301053580867, 0.7606120571799018, 0.773248553436271, 0.5710779012363997, 0.6504917375705151, 0.20737431629688308, 0.7363254272351208, 0.33547433082710665, 0.8588943397459434, 0.17624390837603554, 0.17020327699975046, 0.1778325384769197, 0.18609894459201992, 0.19076623310166319, 0.1793935755588324, 0.18358812512094425, 0.18298658300601633, 0.18196051369846522, 0.08940050884542927, 0.09562682598272754, 0.08266000656285721, 0.08402343341366392, 0.08299357999030488, 0.09059758389014283, 0.10380791070021989, 0.08294029460417174, 0.08162380287398685]}, "mutation_prompt": null}
{"id": "c7e30222-4937-4bf4-a9be-b4de0ba5945c", "solution": "class DynamicCrossoverOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        crossover_probs = np.full(self.swarm_size, self.crossover_prob)  # Initialize crossover probabilities\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                crossover_prob = np.clip(np.random.normal(crossover_probs[i], 0.1), 0.1, 0.9)  # Dynamic crossover probability\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < crossover_prob:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n                crossover_probs[i] = crossover_prob  # Update crossover probability\n        \n        return gbest", "name": "DynamicCrossoverOppositionBasedExplorationPSO_DE_Optimizer", "description": "Introducing a strategy to dynamically adjust the crossover probability during optimization to enhance exploration.", "configspace": "", "generation": 96, "fitness": 0.321552721483896, "feedback": "The algorithm DynamicCrossoverOppositionBasedExplorationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.9072019374512714, 0.9173691794886657, 0.9199623980759963, 0.9110962707040677, 0.8822189834433474, 0.9229985321243741, 0.9197839875044762, 0.8981367208716765, 0.8865414504265536, 0.8109732848273002, 0.8149337479961036, 0.8144766316453478, 0.7794198317790981, 0.8128020750514533, 0.7737569665958408, 0.7503452726201124, 0.7736305409756569, 0.7573554388459004, 0.17033032625701672, 0.13456705889833287, 0.09368574061157686, 0.14951344804794475, 0.15194722613523504, 0.14268176539176436, 0.14772727124439244, 0.15824069296114462, 0.12246299396655935, 0.09152226157956667, 0.10685468302144474, 0.11693845942165737, 0.12905777603646207, 0.11178259131299961, 0.131003707887267, 0.05752817689562306, 0.12668723232407408, 0.09956887584645413, 0.9547885974155823, 0.9721157014807515, 0.9726555155331844, 0.9524404595040264, 0.970333715024073, 0.9562326930139359, 0.973142013882837, 0.9706845387840181, 0.9654998933034151, 0.43388967309227044, 0.5538833791117439, 0.4539745728505704, 0.41175941824191986, 0.25458400348694865, 0.393782195550166, 0.5826244663469409, 0.40286940525704573, 0.1737105500505861, 0.23178249655595184, 0.21182225829861, 0.18190702934873992, 0.39096922910126786, 0.19723278848646197, 0.9278995142430889, 0.15246850691301495, 0.27740836879889585, 0.840377541083868, 0.12057824135217254, 0.1239529703743818, 0.13429525678560783, 0.16720790352422354, 0.17075070747869392, 0.159695356629603, 0.3273811684744373, 0.13275884581647346, 0.18677124320034433, 0.13096279779575348, 0.17088048293889935, 0.16006829008236978, 0.14741880837036947, 0.14358859390597023, 0.14077999941413688, 0.18819520088430286, 0.13153862582370912, 0.1785145623057275, 0.22691568650463356, 0.13598983806986908, 0.01700450154737132, 0.2565689971017685, 0.2565783750564161, 0.03593409840336914, 0.10173925610424994, 0.05850832057443045, 0.09232149492121555, 0.3770534026656507, 0.2264628419911342, 0.41388347409080006, 0.287496453361882, 0.17828098051633356, 0.25732476906397883, 0.5174225285924422, 0.3943320168625766, 0.31116693532737627, 0.16038137599262914, 0.1924188011443685, 0.1548900937357761, 0.07991552702710947, 0.08754950326122257, 0.09396325536061723, 0.1775136271615707, 0.10473957451286298, 0.13460326215728435, 0.18543807238442678, 0.11557841606604291, 0.055827368020167856, 0.024469606889052975, 0.20135913638365566, 0.09558520908352508, 0.15827857416999525, 0.2081611212248632, 0.05178389823661833, 0.6707088446167332, 0.4770953919063361, 0.6941564091752669, 0.45951347425746036, 0.5901294270214474, 0.4868317458562219, 0.6286444950701817, 0.43442114552331945, 0.5172728178651169, 0.10162924357651115, 0.12144417795763018, 0.13483966515940315, 0.14598304345228974, 0.09571440340472692, 0.14618392240773936, 0.144142005211922, 0.1754442287608503, 0.11932010898231127, 0.2278736413760245, 0.17946655674300305, 0.21072749358881016, 0.2670236920635576, 0.2384169354116581, 0.20977936970210787, 0.23962837990946195, 0.1679131122677101, 0.27112124113672254, 0.309398127692462, 0.2985461497355748, 0.37511846214757805, 0.2788787498063132, 0.18998615509710082, 0.3274743468311483, 0.24703016748856532, 0.321050637326351, 0.26127913408749737, 0.13778517954357372, 0.2051267896689114, 0.2232819737807088, 0.2715282842359892, 0.15607198224998398, 0.3542199979559588, 0.17935152821487133, 0.3548690134056899, 0.24352644988498462, 0.2666954672761662, 0.21233904485736432, 0.21076337254347977, 0.22472580683142207, 0.2249361232802407, 0.2122858402215626, 0.2331580846199175, 0.22439800672667964, 0.2310100448912017, 0.22377068211194984, 0.1847519933446765, 0.22262526361063395, 0.20803395023793947, 0.19881259329988565, 0.21350600021250332, 0.191903799321143, 0.2127941708416371, 0.17656814183139957, 0.7438338905411701, 0.8571306104590262, 0.18788736227124037, 0.8914390686071864, 0.20099459366754657, 0.45847925210796925, 0.8631056392710768, 0.169092119193615, 0.5646447393148196, 0.45735233866412595, 0.1674258598622218, 0.3781796338484328, 0.21104801327028322, 0.4927847984927528, 0.20777876370751314, 0.16728143411671914, 0.2821722306382357, 0.24019159327698147, 0.17265326592264296, 0.18361075018584938, 0.18480146466480496, 0.17866344378656063, 0.18432919806698367, 0.18955785663060998, 0.18585164838213264, 0.18420519359349585, 0.17691870996919556, 0.09359421254991451, 0.09146908613066373, 0.09259036316962888, 0.08836521031586331, 0.10222940949292347, 0.08987090500558803, 0.09743705576403516, 0.11089739641772378, 0.14577272979327882]}, "mutation_prompt": null}
{"id": "ca06a7d2-0cb5-44ff-ba6f-0187e42448af", "solution": "class DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(EnhancedOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n        \n        return gbest", "name": "DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Improving convergence by dynamically adapting the mutation factor based on the historical performance of the population.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.8916224630471086, 0.8662010492119432, 0.8807573400507184, 0.8726035270071195, 0.8870645050507904, 0.8795202674639289, 0.8755287412633262, 0.8868157659456796, 0.8721836774728691, 0.7662189003637762, 0.76496193943428, 0.7839075351704836, 0.7723148548571772, 0.76955552339854, 0.7637293008772994, 0.7703505370409319, 0.7796977634729098, 0.769617949442257, 0.14900496401295948, 0.1476497038376392, 0.13872939899821046, 0.16382683874383341, 0.16869418487707333, 0.2854366186945664, 0.13875552424427373, 0.2743786670514039, 0.17011098516456602, 0.14415731070610294, 0.11086399704770156, 0.1334059049028259, 0.1149088485972839, 0.14112760522182466, 0.11761506865625093, 0.1768868680744119, 0.1450491684215418, 0.11946970506932453, 0.983428847516949, 0.9860768480316898, 0.9655964963204124, 0.9683661808653748, 0.9821269837637837, 0.9692880710090794, 0.9705860509043572, 0.9814072246666959, 0.9670295878793134, 0.6345834238018829, 0.6341381182543477, 0.6443616068091067, 0.6860181806425569, 0.6294703114719896, 0.6495322342770204, 0.6098345719980909, 0.6800258641548269, 0.6578570656653644, 0.8530502817426455, 0.36484130887160304, 0.7537899735700083, 0.8477162386130621, 0.8406076452739707, 0.6952155035386429, 0.788982735571129, 0.8007679252106092, 0.869347900452771, 0.2041500956206156, 0.12818348830394677, 0.2505744941803396, 0.19638731678130716, 0.384085707724067, 0.1837199002221469, 0.7177358273869395, 0.3193117400663148, 0.2703279722138042, 0.50125409605644, 0.14974806915460626, 0.27945304423706496, 0.23812133854338335, 0.2725307142586053, 0.33859667460593845, 0.42320032314782297, 0.1487883255203889, 0.2206547786529658, 0.10543699806641904, 0.33599950454177574, 0.26030075066135305, 0.28900174056737093, 0.3507260331848414, 0.2407309926735488, 0.33546139390908536, 0.13157772824753788, 0.28198070109993445, 0.3154402052768228, 0.34748400315330086, 0.44954560637883256, 0.3269310956568041, 0.36716515545347406, 0.40493124402662883, 0.3942443894822726, 0.43598549606855774, 0.4530255139086711, 0.12412717435263709, 0.18820539934638936, 0.030745971620346202, 0.08464813173804664, 0.07617121075459743, 0.12199467252999785, 0.14986039963613906, 0.09935949902785413, 0.0709860440673481, 0.279436455951954, 0.23427243210303594, 0.3220145715132374, 0.3974843220524623, 0.178984626322939, 0.2842812119017203, 0.18243454358108369, 0.1998702266312513, 0.29240287950243304, 0.6109901181137559, 0.6032831979761377, 0.7385411760819441, 0.5775536974346165, 0.665015767252257, 0.7480586014190209, 0.609330190690248, 0.641223947470297, 0.6994996594129654, 0.1325352231107776, 0.16671100245099169, 0.12548846001466796, 0.13689946239809903, 0.17979219109415823, 0.13155935468674473, 0.11290583289109712, 0.17384411765669394, 0.15465509527692356, 0.1536765538700713, 0.2064128759749444, 0.18610151474132441, 0.18772819908377292, 0.2213946046206159, 0.16011814841139516, 0.2155975266036828, 0.20294987721079571, 0.14647134039729592, 0.4227003095347349, 0.5596262624703803, 0.5222732127072613, 0.5796640923300131, 0.5047608435797377, 0.5107551510807579, 0.6472253016357137, 0.47920461791182056, 0.405389042549514, 0.2961113401636384, 0.36577063447707825, 0.30071068597199413, 0.36767703763445914, 0.3099540129621229, 0.24519839142000477, 0.4144756439923277, 0.30670892302551056, 0.24318333340654508, 0.2011998538608223, 0.19031386964970742, 0.1818673850071595, 0.224094201591873, 0.22366732868617878, 0.2391400463204627, 0.1967822808495383, 0.20674404358280252, 0.20096975576547915, 0.1955429604373845, 0.23838973016355636, 0.2303295360054366, 0.20696646193960877, 0.19321849581177064, 0.2109910548893903, 0.20383915228882166, 0.23455543600288997, 0.20082936207282076, 0.8402875344061922, 0.18604691798747108, 0.8179349907367448, 0.8584525474430539, 0.7728955901526307, 0.20175693899061042, 0.6489790232616695, 0.16821230300486845, 0.8635889586494935, 0.8863301053580867, 0.7606120571799018, 0.773248553436271, 0.5710779012363997, 0.6504917375705151, 0.20737431629688308, 0.7363254272351208, 0.33547433082710665, 0.8588943397459434, 0.17624390837603554, 0.17020327699975046, 0.1778325384769197, 0.18609894459201992, 0.19076623310166319, 0.1793935755588324, 0.18358812512094425, 0.18298658300601633, 0.18196051369846522, 0.08940050884542927, 0.09562682598272754, 0.08266000656285721, 0.08402343341366392, 0.08299357999030488, 0.09059758389014283, 0.10380791070021989, 0.08294029460417174, 0.08162380287398685]}, "mutation_prompt": null}
{"id": "e0466af7-4ce6-443b-b2c4-3fb9f6fcee37", "solution": "class EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        inertia_weight = 0.5\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = inertia_weight * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n            inertia_weight = max(0.4, inertia_weight - 0.002)  # Adaptive inertia weight\n        \n        return gbest", "name": "EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Enhancing exploration by introducing adaptive inertia weight for better balance between exploration and exploitation.", "configspace": "", "generation": 98, "fitness": 0.39952543430136556, "feedback": "The algorithm EnhancedDynamicMutationOppositionBasedExplorationPSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.9019586940524101, 0.8744713035684514, 0.8934444888980505, 0.885671389636025, 0.8761113901936739, 0.8800342771177964, 0.8677538985117839, 0.8889753991643812, 0.8715932760415854, 0.7802304248272457, 0.7383879366819348, 0.7819737639400541, 0.7734065480324027, 0.7935659935294542, 0.763742059197208, 0.7712567747788615, 0.7766634223529871, 0.7777110628840158, 0.16577166665572296, 0.15970494842272365, 0.1471842427729958, 0.142533284982847, 0.15914888047366782, 0.44789954621487316, 0.1593032976646397, 0.1686418112936604, 0.44694251116897143, 0.12333741485305405, 0.13866354367515965, 0.1448405886345041, 0.14306132671521576, 0.15583784129896738, 0.1410119154624554, 0.14212454872043012, 0.13146403706382082, 0.13238800262905315, 0.9834288381186522, 0.9860777586118455, 0.965622346683996, 0.9683730486481685, 0.9826584723669317, 0.9692875689603234, 0.9695123697218904, 0.9814061674128134, 0.9670755327690921, 0.3497274305244198, 0.5937861033637382, 0.624578777038316, 0.6664939371971907, 0.5939667756166094, 0.6476813678192003, 0.5291320092268392, 0.6179089756646714, 0.5366475611520092, 0.8589670047140143, 0.34838871891352463, 0.22128981552402138, 0.8540945373172727, 0.8473321980923302, 0.8572955931650544, 0.7622100616397597, 0.8299346647967951, 0.6783826822360315, 0.3502945305061118, 0.13221090734175978, 0.2671215289721477, 0.2779985751411901, 0.6434708336375519, 0.4067449983214456, 0.7344437301557611, 0.5042630246564762, 0.1890314159240356, 0.6073514269764071, 0.17886387833964168, 0.33382542741368704, 0.13465127211286476, 0.1961841500689241, 0.23503691457330145, 0.3281282182392826, 0.19923068737994432, 0.2339561037216602, 0.1092933494551035, 0.13997788421474977, 0.2970371935905677, 0.24440076797321175, 0.35260363698527497, 0.272428564913502, 0.3183698359677769, 0.11189909480654547, 0.3144305464862106, 0.4646825159603829, 0.34698679332937865, 0.36663942329373345, 0.27182477793142945, 0.2589719596943323, 0.5004494465659622, 0.5514046781090133, 0.3419555364131418, 0.44492748976613417, 0.11235349268386641, 0.20735468624673914, 0.15590792371673856, 0.042075400570888655, 0.19623423450820776, 0.11294493473052059, 0.11424419719227696, 0.09640167118694676, 0.06460683072840545, 0.24014517351212883, 0.27382301311424717, 0.3076492549375984, 0.3677008381391481, 0.25680210360756295, 0.38329699274998863, 0.26748012271626387, 0.2232512176156124, 0.26927459444925506, 0.826147035672643, 0.5281683059392114, 0.7121693791914054, 0.637143892572894, 0.6438467291119361, 0.742658153331125, 0.7608846067669366, 0.6125375626764811, 0.6406654918722685, 0.1277071501812046, 0.14014684474375083, 0.12849118205737664, 0.13916523318335006, 0.15032083065456958, 0.15225174330368885, 0.10967556852443971, 0.12595025526858372, 0.11599545861557758, 0.17775763022231095, 0.16671389429753547, 0.20790458571079085, 0.16539053461682762, 0.17437450230309548, 0.17371591953757648, 0.22526944849021358, 0.1733933490502042, 0.18477341502970446, 0.4688658250031703, 0.4131751407414924, 0.30461120014488285, 0.5762376692980815, 0.3113132458228588, 0.5837484095045208, 0.5083446546353534, 0.5079077727907895, 0.4509104249412875, 0.43550273394176464, 0.28939527220141403, 0.280603538868461, 0.3453975538597951, 0.24872483999482453, 0.2393588616173773, 0.23858152672828292, 0.2519445917628581, 0.3089202511435343, 0.22248851034680828, 0.2298963955588873, 0.20477732213104582, 0.20979912823709046, 0.19846219276008747, 0.21348324510581707, 0.2295164134257892, 0.2156623585969496, 0.20764557211167267, 0.19067286107685655, 0.21406385106193793, 0.21709408310365674, 0.24340619031821242, 0.19296076571910548, 0.4217748585152593, 0.21599387284303062, 0.22302592620707296, 0.19697827308301596, 0.6563555000894385, 0.1856270624290377, 0.8308986783677379, 0.8573648800800461, 0.7846554981206649, 0.18666072594559757, 0.684487838835274, 0.16835212284469203, 0.8803438164903068, 0.8660539494630556, 0.5840630060915051, 0.7864661332151942, 0.5469007591476263, 0.26468649743105666, 0.20601487743712588, 0.5447743167713901, 0.6071059948931786, 0.7673645931562514, 0.1705361121433825, 0.19291446491882658, 0.18611759829385532, 0.1880602133236624, 0.1747889482233027, 0.1824153105206473, 0.17265921539255524, 0.18132758870034815, 0.18084667501482166, 0.09536265980207026, 0.0877183895385153, 0.09105464699572663, 0.08561139151542718, 0.08864757421780811, 0.08896557628044666, 0.10862390234326535, 0.08018179214949939, 0.08831183203123072]}, "mutation_prompt": null}
{"id": "3cd55da9-8fb3-4ae3-a08e-07304ff12ad2", "solution": "class DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer(EnhancedOppositionBasedExplorationPSO_DE_Optimizer):\n    def __call__(self, func):\n        def de(x, pop, F):\n            idxs = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[idxs]\n            mutant = a + F * (b - c)\n            crossover = np.random.rand(self.dim) < self.crossover_prob\n            trial = np.where(crossover, mutant, x)\n            return trial\n        \n        def evaluate(x):\n            return func(x)\n        \n        population = np.random.uniform(-5.0, 5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = population.copy()\n        pbest_scores = np.array([evaluate(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx]\n        gbest_score = pbest_scores[gbest_idx]\n        mutation_factors = np.full(self.swarm_size, self.mutation_factor)\n        \n        for _ in range(self.budget):\n            r1 = np.random.rand(self.swarm_size, self.dim)\n            r2 = np.random.rand(self.swarm_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - population) + self.c2 * r2 * (gbest - population)\n            population += velocities\n            \n            for i in range(self.swarm_size):\n                mutation_factor = np.clip(np.random.normal(mutation_factors[i], 0.1), 0.1, 0.9)  # Dynamic mutation factor\n                new_sol = de(population[i], pbest[[i, (i+1)%self.swarm_size, (i+2)%self.swarm_size]], mutation_factor)\n                new_score = evaluate(new_sol)\n                if new_score < pbest_scores[i]:\n                    pbest[i] = new_sol\n                    pbest_scores[i] = new_score\n                    if new_score < gbest_score:\n                        gbest = new_sol\n                        gbest_score = new_score\n                \n                if np.random.rand() < 0.1:\n                    opposite_sol = np.mean(np.array([pbest[i], gbest]), axis=0) + np.random.uniform(-1, 1, size=self.dim) * np.abs(pbest[i] - gbest) / np.sqrt(self.dim)\n                    opposite_score = evaluate(opposite_sol)\n                    if opposite_score < pbest_scores[i]:\n                        pbest[i] = opposite_sol\n                        pbest_scores[i] = opposite_score\n                        if opposite_score < gbest_score:\n                            gbest = opposite_sol\n                            gbest_score = opposite_score\n                            \n                mutation_factors[i] = mutation_factor  # Update mutation factor\n        \n        return gbest", "name": "DynamicMutationOppositionBasedExplorationPSO_DE_Optimizer", "description": "Improving convergence by dynamically adapting the mutation factor based on the historical performance of the population.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b1319a2d-4a71-4191-9473-181dffacce51", "metadata": {"aucs": [0.8916224630471086, 0.8662010492119432, 0.8807573400507184, 0.8726035270071195, 0.8870645050507904, 0.8795202674639289, 0.8755287412633262, 0.8868157659456796, 0.8721836774728691, 0.7662189003637762, 0.76496193943428, 0.7839075351704836, 0.7723148548571772, 0.76955552339854, 0.7637293008772994, 0.7703505370409319, 0.7796977634729098, 0.769617949442257, 0.14900496401295948, 0.1476497038376392, 0.13872939899821046, 0.16382683874383341, 0.16869418487707333, 0.2854366186945664, 0.13875552424427373, 0.2743786670514039, 0.17011098516456602, 0.14415731070610294, 0.11086399704770156, 0.1334059049028259, 0.1149088485972839, 0.14112760522182466, 0.11761506865625093, 0.1768868680744119, 0.1450491684215418, 0.11946970506932453, 0.983428847516949, 0.9860768480316898, 0.9655964963204124, 0.9683661808653748, 0.9821269837637837, 0.9692880710090794, 0.9705860509043572, 0.9814072246666959, 0.9670295878793134, 0.6345834238018829, 0.6341381182543477, 0.6443616068091067, 0.6860181806425569, 0.6294703114719896, 0.6495322342770204, 0.6098345719980909, 0.6800258641548269, 0.6578570656653644, 0.8530502817426455, 0.36484130887160304, 0.7537899735700083, 0.8477162386130621, 0.8406076452739707, 0.6952155035386429, 0.788982735571129, 0.8007679252106092, 0.869347900452771, 0.2041500956206156, 0.12818348830394677, 0.2505744941803396, 0.19638731678130716, 0.384085707724067, 0.1837199002221469, 0.7177358273869395, 0.3193117400663148, 0.2703279722138042, 0.50125409605644, 0.14974806915460626, 0.27945304423706496, 0.23812133854338335, 0.2725307142586053, 0.33859667460593845, 0.42320032314782297, 0.1487883255203889, 0.2206547786529658, 0.10543699806641904, 0.33599950454177574, 0.26030075066135305, 0.28900174056737093, 0.3507260331848414, 0.2407309926735488, 0.33546139390908536, 0.13157772824753788, 0.28198070109993445, 0.3154402052768228, 0.34748400315330086, 0.44954560637883256, 0.3269310956568041, 0.36716515545347406, 0.40493124402662883, 0.3942443894822726, 0.43598549606855774, 0.4530255139086711, 0.12412717435263709, 0.18820539934638936, 0.030745971620346202, 0.08464813173804664, 0.07617121075459743, 0.12199467252999785, 0.14986039963613906, 0.09935949902785413, 0.0709860440673481, 0.279436455951954, 0.23427243210303594, 0.3220145715132374, 0.3974843220524623, 0.178984626322939, 0.2842812119017203, 0.18243454358108369, 0.1998702266312513, 0.29240287950243304, 0.6109901181137559, 0.6032831979761377, 0.7385411760819441, 0.5775536974346165, 0.665015767252257, 0.7480586014190209, 0.609330190690248, 0.641223947470297, 0.6994996594129654, 0.1325352231107776, 0.16671100245099169, 0.12548846001466796, 0.13689946239809903, 0.17979219109415823, 0.13155935468674473, 0.11290583289109712, 0.17384411765669394, 0.15465509527692356, 0.1536765538700713, 0.2064128759749444, 0.18610151474132441, 0.18772819908377292, 0.2213946046206159, 0.16011814841139516, 0.2155975266036828, 0.20294987721079571, 0.14647134039729592, 0.4227003095347349, 0.5596262624703803, 0.5222732127072613, 0.5796640923300131, 0.5047608435797377, 0.5107551510807579, 0.6472253016357137, 0.47920461791182056, 0.405389042549514, 0.2961113401636384, 0.36577063447707825, 0.30071068597199413, 0.36767703763445914, 0.3099540129621229, 0.24519839142000477, 0.4144756439923277, 0.30670892302551056, 0.24318333340654508, 0.2011998538608223, 0.19031386964970742, 0.1818673850071595, 0.224094201591873, 0.22366732868617878, 0.2391400463204627, 0.1967822808495383, 0.20674404358280252, 0.20096975576547915, 0.1955429604373845, 0.23838973016355636, 0.2303295360054366, 0.20696646193960877, 0.19321849581177064, 0.2109910548893903, 0.20383915228882166, 0.23455543600288997, 0.20082936207282076, 0.8402875344061922, 0.18604691798747108, 0.8179349907367448, 0.8584525474430539, 0.7728955901526307, 0.20175693899061042, 0.6489790232616695, 0.16821230300486845, 0.8635889586494935, 0.8863301053580867, 0.7606120571799018, 0.773248553436271, 0.5710779012363997, 0.6504917375705151, 0.20737431629688308, 0.7363254272351208, 0.33547433082710665, 0.8588943397459434, 0.17624390837603554, 0.17020327699975046, 0.1778325384769197, 0.18609894459201992, 0.19076623310166319, 0.1793935755588324, 0.18358812512094425, 0.18298658300601633, 0.18196051369846522, 0.08940050884542927, 0.09562682598272754, 0.08266000656285721, 0.08402343341366392, 0.08299357999030488, 0.09059758389014283, 0.10380791070021989, 0.08294029460417174, 0.08162380287398685]}, "mutation_prompt": null}
