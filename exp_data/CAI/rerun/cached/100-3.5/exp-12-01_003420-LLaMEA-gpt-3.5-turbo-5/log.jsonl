{"id": "789b5f25-dcda-4fed-8224-813b879ebcdd", "solution": "import numpy as np\n\nclass QuantumFireflyOptimizer:\n    def __init__(self, budget, dim, num_fireflies=20, alpha=0.2, beta0=1.0, gamma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_fireflies = num_fireflies\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def attractiveness(beta, r):\n            return beta * np.exp(-self.gamma * r**2)\n\n        def levy_flight():\n            sigma = (np.gamma(1 + self.alpha) * np.sin(np.pi * self.alpha / 2) / np.pi) ** (1 / self.alpha)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / self.alpha)\n            return step\n\n        def initialize_fireflies():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_fireflies, self.dim))\n\n        fireflies = initialize_fireflies()\n        best_firefly = fireflies[np.argmin([func(x) for x in fireflies])]\n        for _ in range(self.budget):\n            for i in range(self.num_fireflies):\n                for j in range(self.num_fireflies):\n                    if func(fireflies[i]) < func(fireflies[j]):\n                        r = np.linalg.norm(fireflies[i] - fireflies[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        step = levy_flight()\n                        fireflies[i] += attractiveness(beta, r) * (fireflies[j] - fireflies[i]) + step\n                fireflies[i] = np.clip(fireflies[i], -5.0, 5.0)\n                if func(fireflies[i]) < func(best_firefly):\n                    best_firefly = fireflies[i]\n        return best_firefly", "name": "QuantumFireflyOptimizer", "description": "Novel Quantum-Inspired Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 34, in __call__\n  File \"<string>\", line 17, in levy_flight\n  File \"/data/hyin/conda_envs/llm/lib/python3.8/site-packages/numpy/__init__.py\", line 320, in __getattr__\n    raise AttributeError(\"module {!r} has no attribute \"\nAttributeError: module 'numpy' has no attribute 'gamma'\n.", "error": "AttributeError(\"module 'numpy' has no attribute 'gamma'\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 34, in __call__\n  File \"<string>\", line 17, in levy_flight\n  File \"/data/hyin/conda_envs/llm/lib/python3.8/site-packages/numpy/__init__.py\", line 320, in __getattr__\n    raise AttributeError(\"module {!r} has no attribute \"\nAttributeError: module 'numpy' has no attribute 'gamma'\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "e1dcf256-2e72-407c-a60a-ec6417a1a09e", "solution": "import numpy as np\n\nclass QuantumFireflyOptimizer:\n    def __init__(self, budget, dim, num_fireflies=20, alpha=0.2, beta0=1.0, gamma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_fireflies = num_fireflies\n        self.alpha = alpha\n        self.beta0 = beta0\n        self.gamma = gamma\n\n    def __call__(self, func):\n        def attractiveness(beta, r):\n            return beta * np.exp(-self.gamma * r**2)\n\n        def levy_flight():\n            sigma = (np.gamma(1 + self.alpha) * np.sin(np.pi * self.alpha / 2) / np.pi) ** (1 / self.alpha)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / self.alpha)\n            return step\n\n        def initialize_fireflies():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_fireflies, self.dim))\n\n        fireflies = initialize_fireflies()\n        best_firefly = fireflies[np.argmin([func(x) for x in fireflies])]\n        for _ in range(self.budget):\n            for i in range(self.num_fireflies):\n                for j in range(self.num_fireflies):\n                    if func(fireflies[i]) < func(fireflies[j]):\n                        r = np.linalg.norm(fireflies[i] - fireflies[j])\n                        beta = self.beta0 * np.exp(-self.gamma * r**2)\n                        step = levy_flight()\n                        fireflies[i] += attractiveness(beta, r) * (fireflies[j] - fireflies[i]) + step\n                fireflies[i] = np.clip(fireflies[i], -5.0, 5.0)\n                if func(fireflies[i]) < func(best_firefly):\n                    best_firefly = fireflies[i]\n        return best_firefly", "name": "QuantumFireflyOptimizer", "description": "Novel Quantum-Inspired Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "789b5f25-dcda-4fed-8224-813b879ebcdd", "metadata": {}, "mutation_prompt": null}
