{"id": "e2bba914-ea2e-4584-adca-cb28a0d49305", "solution": "import numpy as np\n\nclass QuantumHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 10\n        self.HMCR = 0.7\n        self.PAR = 0.3\n        self.bandwidth = 0.01\n        self.pitch_adjust_rate = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def update_pitch_adjust_rate(iter_count):\n            return self.pitch_adjust_rate * np.exp(-0.1 * iter_count)\n\n        def harmony_search():\n            harmony_memory = initialize_harmony_memory()\n            best_solution = None\n            best_fitness = np.inf\n\n            for _ in range(self.budget):\n                new_harmony = np.zeros((1, self.dim))\n                for i in range(self.dim):\n                    if np.random.rand() < self.HMCR:\n                        idx = np.random.randint(self.harmony_memory_size)\n                        new_harmony[0, i] = harmony_memory[idx, i]\n                    else:\n                        new_harmony[0, i] = np.random.uniform(-5.0, 5.0)\n\n                    if np.random.rand() < self.PAR:\n                        new_harmony[0, i] += np.random.normal(0, self.bandwidth)\n\n                new_fitness = func(new_harmony.reshape(self.dim))\n                if new_fitness < best_fitness:\n                    best_solution = new_harmony\n                    best_fitness = new_fitness\n\n                if np.random.rand() < update_pitch_adjust_rate(_):\n                    self.bandwidth *= np.exp(-0.1 * _)\n\n                harmony_memory[np.argmax(func(harmony_memory.reshape(self.harmony_memory_size, self.dim)))] = new_harmony\n\n            return best_solution, best_fitness\n\n        return harmony_search()", "name": "QuantumHarmonySearch", "description": "Quantum-Inspired Harmony Search Algorithm for Black Box Optimization with adaptive pitch adjustment and memory consideration.", "configspace": "", "generation": 0, "fitness": 0.10491358383442731, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.2567597144584357, 0.204315645623932, 0.26541530871102303, 0.2479962389555176, 0.250685813774601, 0.2612544984911035, 0.25672800763385717, 0.23670598285964106, 0.26631642307859005, 9.999999999998899e-05, 9.999999999998899e-05, 0.005756618997284968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10936700588345538, 0.07409404654161922, 0.11342084496548055, 0.11042528163271659, 0.08410844446049481, 0.10629478176777718, 0.07627552752825706, 0.12389887101484909, 0.07678029786583174, 0.07339895872437374, 0.0795772696161805, 0.08169521644273936, 0.07831998409491703, 0.0745100423861077, 0.0539065858610831, 0.08113053953727123, 0.07801232340418252, 0.06643603758342798, 0.1271235359666142, 0.11108010676964153, 0.13976969310074494, 0.13073862741459108, 0.11579109373618668, 0.14174198736179477, 0.13160803807574084, 0.13597092526650556, 0.12225028480377009, 0.10851802352768258, 0.05277486864559433, 0.12139166890510955, 0.12216164943740682, 0.07900319134738942, 0.0817022977948536, 0.07101676004912683, 0.09133736638611334, 0.11113101907126643, 0.14456956051105319, 0.15575345344138636, 0.12572938440664216, 0.17116121144694896, 0.14321726434983229, 0.15716655789068956, 0.1401884699280549, 0.12200867332442356, 0.1407854377700285, 0.04208040690108572, 0.0465646872655372, 0.037939080771210554, 0.0541261075379722, 0.01307839940393174, 0.047549751392678474, 0.04847340010504608, 0.02055499015858331, 0.02461641336572795, 0.05221350119109225, 0.04035730939886362, 0.0471981176452817, 0.06625768051570591, 0.0952899765438675, 0.034935854038178116, 0.03131456049322168, 0.09561990183385971, 0.056211445528591475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030002454974186188, 0.05766488294809513, 0.02608139442772206, 0.0008976494918589983, 0.028557614985672997, 0.003976094098349869, 0.03712912019015313, 0.07535235145222907, 0.018000930817876126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027402312837258247, 0.006715059005944379, 0.0010752521600850828, 0.014521930097200153, 0.0109561718438963, 0.012076518719984608, 0.0019531066832118027, 0.02008488539125486, 0.0265368759941228, 0.25596698689398567, 0.25479513663506936, 0.32328021500127024, 0.3051938658003365, 0.24614305975121364, 0.252516439035686, 0.2808754463601232, 0.24247943640362468, 0.24915844998681214, 0.05067113464014128, 0.06028044486880024, 0.050560857652707125, 0.07156196421044536, 0.07048316384668474, 0.04865188089589301, 0.06429772175312887, 0.06240241578913408, 0.06618535000088854, 0.103869028893261, 0.11160495551030325, 0.12402579808966308, 0.10318494969806757, 0.11637692952244272, 0.14604783855147108, 0.08948647735928483, 0.09072894285097521, 0.09116322258778309, 0.17619900789474252, 0.19715273908965325, 0.16242597911454126, 0.20406250150174743, 0.18467154784087658, 0.20634667057169243, 0.2079918052673132, 0.18202621853259382, 0.14254950033113312, 0.11705377970064623, 0.09019677757521749, 0.11353788578768087, 0.13797473135516958, 0.12577782188442033, 0.11335307669061478, 0.15365231559684545, 0.10250206716580867, 0.11094466614229581, 0.1864572820442767, 0.15462103450607467, 0.16077403597518514, 0.145623796459057, 0.1595131903304322, 0.15548652956177955, 0.16392402280066276, 0.15951794065467562, 0.16255309907155024, 0.1712742804957863, 0.1785282594244425, 0.17317657516817764, 0.1613598178084572, 0.13974760188966084, 0.1781134112777789, 0.15074147784287983, 0.14384874679266724, 0.17293767092056456, 0.14165051859974542, 0.1273062422718274, 0.22407211378756686, 0.2176081959335353, 0.16559894473112635, 0.15566561614373642, 0.14617832930346153, 0.22929404882074755, 0.10675094921487382, 0.15644564587447007, 0.15411427141478162, 0.2018839066313619, 0.12851233034748089, 0.1306458544114203, 0.17988404939411307, 0.09983684592069608, 0.06869563037281678, 0.09510794740898854, 0.16785107119371956, 0.16317766505755626, 0.174808643911889, 0.16090826359553412, 0.15017683084112454, 0.18567893512830458, 0.15531707490864533, 0.15989255873754005, 0.1579311847323377, 0.05583246693026889, 0.056403442357429, 0.048616741171925826, 0.05172245738016923, 0.05208228389936631, 0.09309670589664365, 0.06171841254673294, 0.057350264640462, 0.05566403423412469]}, "mutation_prompt": null}
{"id": "d18d2529-48f0-4484-8d8c-e3e05656d480", "solution": "import numpy as np\n\nclass QuantumHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 10\n        self.HMCR = 0.7\n        self.PAR = 0.3\n        self.bandwidth = 0.01\n        self.pitch_adjust_rate = 0.5\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def update_pitch_adjust_rate(iter_count):\n            return self.pitch_adjust_rate * np.exp(-0.1 * iter_count)\n\n        def harmony_search():\n            harmony_memory = initialize_harmony_memory()\n            best_solution = None\n            best_fitness = np.inf\n\n            for _ in range(self.budget):\n                new_harmony = np.zeros((1, self.dim))\n                for i in range(self.dim):\n                    if np.random.rand() < self.HMCR:\n                        idx = np.random.randint(self.harmony_memory_size)\n                        new_harmony[0, i] = harmony_memory[idx, i]\n                    else:\n                        new_harmony[0, i] = np.random.uniform(-5.0, 5.0)\n\n                    if np.random.rand() < self.PAR:\n                        new_harmony[0, i] += np.random.normal(0, self.bandwidth)\n\n                new_fitness = func(new_harmony.reshape(self.dim))\n                if new_fitness < best_fitness:\n                    best_solution = new_harmony\n                    best_fitness = new_fitness\n\n                if np.random.rand() < update_pitch_adjust_rate(_):\n                    self.bandwidth *= np.exp(-0.1 * _)\n\n                harmony_memory[np.argmax(func(harmony_memory.reshape(self.harmony_memory_size, self.dim)))] = new_harmony\n\n            return best_solution, best_fitness\n\n        return harmony_search()", "name": "QuantumHarmonySearch", "description": "Quantum-Inspired Harmony Search Algorithm for Black Box Optimization with adaptive pitch adjustment and memory consideration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2bba914-ea2e-4584-adca-cb28a0d49305", "metadata": {"aucs": [0.2567597144584357, 0.204315645623932, 0.26541530871102303, 0.2479962389555176, 0.250685813774601, 0.2612544984911035, 0.25672800763385717, 0.23670598285964106, 0.26631642307859005, 9.999999999998899e-05, 9.999999999998899e-05, 0.005756618997284968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10936700588345538, 0.07409404654161922, 0.11342084496548055, 0.11042528163271659, 0.08410844446049481, 0.10629478176777718, 0.07627552752825706, 0.12389887101484909, 0.07678029786583174, 0.07339895872437374, 0.0795772696161805, 0.08169521644273936, 0.07831998409491703, 0.0745100423861077, 0.0539065858610831, 0.08113053953727123, 0.07801232340418252, 0.06643603758342798, 0.1271235359666142, 0.11108010676964153, 0.13976969310074494, 0.13073862741459108, 0.11579109373618668, 0.14174198736179477, 0.13160803807574084, 0.13597092526650556, 0.12225028480377009, 0.10851802352768258, 0.05277486864559433, 0.12139166890510955, 0.12216164943740682, 0.07900319134738942, 0.0817022977948536, 0.07101676004912683, 0.09133736638611334, 0.11113101907126643, 0.14456956051105319, 0.15575345344138636, 0.12572938440664216, 0.17116121144694896, 0.14321726434983229, 0.15716655789068956, 0.1401884699280549, 0.12200867332442356, 0.1407854377700285, 0.04208040690108572, 0.0465646872655372, 0.037939080771210554, 0.0541261075379722, 0.01307839940393174, 0.047549751392678474, 0.04847340010504608, 0.02055499015858331, 0.02461641336572795, 0.05221350119109225, 0.04035730939886362, 0.0471981176452817, 0.06625768051570591, 0.0952899765438675, 0.034935854038178116, 0.03131456049322168, 0.09561990183385971, 0.056211445528591475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030002454974186188, 0.05766488294809513, 0.02608139442772206, 0.0008976494918589983, 0.028557614985672997, 0.003976094098349869, 0.03712912019015313, 0.07535235145222907, 0.018000930817876126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027402312837258247, 0.006715059005944379, 0.0010752521600850828, 0.014521930097200153, 0.0109561718438963, 0.012076518719984608, 0.0019531066832118027, 0.02008488539125486, 0.0265368759941228, 0.25596698689398567, 0.25479513663506936, 0.32328021500127024, 0.3051938658003365, 0.24614305975121364, 0.252516439035686, 0.2808754463601232, 0.24247943640362468, 0.24915844998681214, 0.05067113464014128, 0.06028044486880024, 0.050560857652707125, 0.07156196421044536, 0.07048316384668474, 0.04865188089589301, 0.06429772175312887, 0.06240241578913408, 0.06618535000088854, 0.103869028893261, 0.11160495551030325, 0.12402579808966308, 0.10318494969806757, 0.11637692952244272, 0.14604783855147108, 0.08948647735928483, 0.09072894285097521, 0.09116322258778309, 0.17619900789474252, 0.19715273908965325, 0.16242597911454126, 0.20406250150174743, 0.18467154784087658, 0.20634667057169243, 0.2079918052673132, 0.18202621853259382, 0.14254950033113312, 0.11705377970064623, 0.09019677757521749, 0.11353788578768087, 0.13797473135516958, 0.12577782188442033, 0.11335307669061478, 0.15365231559684545, 0.10250206716580867, 0.11094466614229581, 0.1864572820442767, 0.15462103450607467, 0.16077403597518514, 0.145623796459057, 0.1595131903304322, 0.15548652956177955, 0.16392402280066276, 0.15951794065467562, 0.16255309907155024, 0.1712742804957863, 0.1785282594244425, 0.17317657516817764, 0.1613598178084572, 0.13974760188966084, 0.1781134112777789, 0.15074147784287983, 0.14384874679266724, 0.17293767092056456, 0.14165051859974542, 0.1273062422718274, 0.22407211378756686, 0.2176081959335353, 0.16559894473112635, 0.15566561614373642, 0.14617832930346153, 0.22929404882074755, 0.10675094921487382, 0.15644564587447007, 0.15411427141478162, 0.2018839066313619, 0.12851233034748089, 0.1306458544114203, 0.17988404939411307, 0.09983684592069608, 0.06869563037281678, 0.09510794740898854, 0.16785107119371956, 0.16317766505755626, 0.174808643911889, 0.16090826359553412, 0.15017683084112454, 0.18567893512830458, 0.15531707490864533, 0.15989255873754005, 0.1579311847323377, 0.05583246693026889, 0.056403442357429, 0.048616741171925826, 0.05172245738016923, 0.05208228389936631, 0.09309670589664365, 0.06171841254673294, 0.057350264640462, 0.05566403423412469]}, "mutation_prompt": null}
