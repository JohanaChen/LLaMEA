{"id": "e135d488-49ce-4177-a5a4-e6ad3c017fd1", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10\n        self.bandwidth = 0.01\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.harmony_memory_size, self.dim))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:  # Pitch Adjustment\n                    new_harmony[i] = new_harmony[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[-1]):\n                harmony_memory[-1] = new_harmony\n                harmony_memory = harmony_memory[np.argsort([func(h) for h in harmony_memory])]\n\n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic optimization algorithm inspired by the musical improvisation process of searching for a perfect state of harmony.", "configspace": "", "generation": 0, "fitness": 0.04326081491586174, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.07615977047513045, 0.06835621045286111, 0.08754602031444758, 0.02181115677963641, 0.056278957318985356, 0.027865550754255675, 0.05485925935621727, 0.05513403115720261, 0.07169033040415884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011315834498997202, 0.02971665702378601, 9.999999999998899e-05, 0.009650891820034535, 0.00658581777564593, 0.00682740254306613, 0.033185891803166334, 0.00021171109153661494, 0.00478804312462211, 0.0008702407701152159, 9.999999999998899e-05, 9.999999999998899e-05, 0.05007153794409802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048155061080396244, 0.036197292070400566, 0.04631306991293749, 0.041762631189506516, 0.050083944442812056, 0.033059481951849934, 0.035647803205792084, 0.05230257012215678, 0.028039047047932364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010100010842051255, 0.005032800581710961, 9.999999999998899e-05, 9.999999999998899e-05, 0.014793577383723666, 9.999999999998899e-05, 0.10023674149328321, 0.03778610253771475, 0.00822990164629811, 0.004560432796771208, 9.999999999998899e-05, 9.999999999998899e-05, 0.026268829791731285, 9.999999999998899e-05, 0.009900616113877048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029217431264974447, 0.02379705321459058, 0.05862703359104071, 0.06187230342508887, 9.999999999998899e-05, 0.0035305308102120403, 0.02924685946009664, 0.008149038238503659, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08548480576860218, 0.113632198461458, 0.15516765468049487, 0.09735951801725462, 0.08485838201380214, 0.09950738169255069, 0.12845773904147662, 0.10199143191367044, 0.1253390994142437, 0.007495918100524301, 9.999999999998899e-05, 9.999999999998899e-05, 0.020069782186317386, 0.0004417423747856697, 0.042948890867539724, 0.009426798898274358, 0.001420947274372919, 0.06526119904024086, 0.08528830792212827, 0.09900480015514801, 0.07997470011770458, 0.13883557390198764, 0.07834361500273568, 0.07144862092275472, 0.09398257960972334, 0.0692563781678116, 0.10699148520158364, 0.11086392430038272, 0.11847008872329623, 0.1151295208814539, 0.1255119000622119, 0.09862434808483467, 0.10852112098505062, 0.13554454243975889, 0.12107834038262122, 0.09547981167276098, 0.055819756930716724, 0.05730160049105548, 0.046275444004882815, 0.07830930102447531, 0.051929658812720714, 0.055684028988425616, 0.07010466717738195, 0.05679084402127388, 0.03748592712354293, 0.17410925245210507, 0.0791940635732793, 0.16435087559113326, 0.1834069386181505, 0.10183773407410868, 0.15643164125185338, 0.1762239872942104, 0.10660562789071559, 0.15763592096001122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051827896937853835, 0.06061746271372248, 0.06835018788757263, 0.07565787943856794, 0.14284308000916612, 0.07501502479409683, 0.07157017034745061, 0.06543730401185743, 0.061132096218929344, 0.04531246401254596, 0.061326029706278096, 0.019186026245944787, 0.02591551487803645, 0.024516617431980192, 0.054042349855482286, 0.022708055859445797, 0.017548608928957043, 0.058477990568370886, 0.1492938047645921, 0.18206570845994774, 0.20921945379242568, 0.19722179731621303, 0.2342315843712488, 0.19829711511310055, 0.16000722558268865, 0.17126584106624654, 0.24543179047518338, 0.030552171480482837, 0.0439589596851796, 0.06084426577412927, 0.029856723126211127, 0.034574138756644834, 0.04297937423056719, 0.019401694562702132, 0.03385234958776617, 0.035034627434260446]}, "mutation_prompt": null}
{"id": "36430708-3505-4d2f-a435-2b370c43affe", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10\n        self.bandwidth = 0.01\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, size=(self.harmony_memory_size, self.dim))\n\n        def improvise_new_harmony(harmony_memory):\n            new_harmony = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:  # Pitch Adjustment\n                    new_harmony[i] = new_harmony[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                    new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n            return new_harmony\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_harmony = improvise_new_harmony(harmony_memory)\n            if func(new_harmony) < func(harmony_memory[-1]):\n                harmony_memory[-1] = new_harmony\n                harmony_memory = harmony_memory[np.argsort([func(h) for h in harmony_memory])]\n\n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic optimization algorithm inspired by the musical improvisation process of searching for a perfect state of harmony.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e135d488-49ce-4177-a5a4-e6ad3c017fd1", "metadata": {"aucs": [0.07615977047513045, 0.06835621045286111, 0.08754602031444758, 0.02181115677963641, 0.056278957318985356, 0.027865550754255675, 0.05485925935621727, 0.05513403115720261, 0.07169033040415884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011315834498997202, 0.02971665702378601, 9.999999999998899e-05, 0.009650891820034535, 0.00658581777564593, 0.00682740254306613, 0.033185891803166334, 0.00021171109153661494, 0.00478804312462211, 0.0008702407701152159, 9.999999999998899e-05, 9.999999999998899e-05, 0.05007153794409802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048155061080396244, 0.036197292070400566, 0.04631306991293749, 0.041762631189506516, 0.050083944442812056, 0.033059481951849934, 0.035647803205792084, 0.05230257012215678, 0.028039047047932364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010100010842051255, 0.005032800581710961, 9.999999999998899e-05, 9.999999999998899e-05, 0.014793577383723666, 9.999999999998899e-05, 0.10023674149328321, 0.03778610253771475, 0.00822990164629811, 0.004560432796771208, 9.999999999998899e-05, 9.999999999998899e-05, 0.026268829791731285, 9.999999999998899e-05, 0.009900616113877048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029217431264974447, 0.02379705321459058, 0.05862703359104071, 0.06187230342508887, 9.999999999998899e-05, 0.0035305308102120403, 0.02924685946009664, 0.008149038238503659, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08548480576860218, 0.113632198461458, 0.15516765468049487, 0.09735951801725462, 0.08485838201380214, 0.09950738169255069, 0.12845773904147662, 0.10199143191367044, 0.1253390994142437, 0.007495918100524301, 9.999999999998899e-05, 9.999999999998899e-05, 0.020069782186317386, 0.0004417423747856697, 0.042948890867539724, 0.009426798898274358, 0.001420947274372919, 0.06526119904024086, 0.08528830792212827, 0.09900480015514801, 0.07997470011770458, 0.13883557390198764, 0.07834361500273568, 0.07144862092275472, 0.09398257960972334, 0.0692563781678116, 0.10699148520158364, 0.11086392430038272, 0.11847008872329623, 0.1151295208814539, 0.1255119000622119, 0.09862434808483467, 0.10852112098505062, 0.13554454243975889, 0.12107834038262122, 0.09547981167276098, 0.055819756930716724, 0.05730160049105548, 0.046275444004882815, 0.07830930102447531, 0.051929658812720714, 0.055684028988425616, 0.07010466717738195, 0.05679084402127388, 0.03748592712354293, 0.17410925245210507, 0.0791940635732793, 0.16435087559113326, 0.1834069386181505, 0.10183773407410868, 0.15643164125185338, 0.1762239872942104, 0.10660562789071559, 0.15763592096001122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051827896937853835, 0.06061746271372248, 0.06835018788757263, 0.07565787943856794, 0.14284308000916612, 0.07501502479409683, 0.07157017034745061, 0.06543730401185743, 0.061132096218929344, 0.04531246401254596, 0.061326029706278096, 0.019186026245944787, 0.02591551487803645, 0.024516617431980192, 0.054042349855482286, 0.022708055859445797, 0.017548608928957043, 0.058477990568370886, 0.1492938047645921, 0.18206570845994774, 0.20921945379242568, 0.19722179731621303, 0.2342315843712488, 0.19829711511310055, 0.16000722558268865, 0.17126584106624654, 0.24543179047518338, 0.030552171480482837, 0.0439589596851796, 0.06084426577412927, 0.029856723126211127, 0.034574138756644834, 0.04297937423056719, 0.019401694562702132, 0.03385234958776617, 0.035034627434260446]}, "mutation_prompt": null}
