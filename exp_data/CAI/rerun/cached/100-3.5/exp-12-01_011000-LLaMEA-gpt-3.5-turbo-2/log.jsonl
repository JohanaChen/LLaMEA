{"id": "e3c61d62-3852-422f-9be2-8a4847d1a889", "solution": "import numpy as np\n\nclass DragonflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.step_size = 0.1\n        self.attract_repel_factor = 0.1\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / (np.abs(v) ** (1 / beta))\n            return step\n\n        def move_towards_target(dragonfly, target):\n            direction = target - dragonfly\n            step = self.step_size * levy_flight()\n            return dragonfly + step * direction\n\n        def attract_repel(dragonflies, fitnesses):\n            best_idx = np.argmin(fitnesses)\n            worst_idx = np.argmax(fitnesses)\n            attractor = np.mean(dragonflies, axis=0)\n            repeller = dragonflies[worst_idx]\n            return dragonflies + self.attract_repel_factor * (attractor - dragonflies) - self.attract_repel_factor * (repeller - dragonflies)\n\n        dragonflies = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitnesses = np.array([func(x) for x in dragonflies])\n\n        for _ in range(self.budget - self.population_size):\n            dragonflies = np.array([move_towards_target(dragonflies[i], dragonflies[np.argmin(fitnesses)]) for i in range(self.population_size)])\n            dragonflies = attract_repel(dragonflies, fitnesses)\n            fitnesses = np.array([func(x) for x in dragonflies])\n\n        best_idx = np.argmin(fitnesses)\n        return dragonflies[best_idx]", "name": "DragonflyAlgorithm", "description": "A novel metaheuristic algorithm named Dragonfly Algorithm (DA) inspired by the flocking behavior of dragonflies, where each dragonfly represents a candidate solution and moves towards better solutions while exploring the search space.", "configspace": "", "generation": 0, "fitness": 0.09264660339088439, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.12914059941915135, 0.11525727491786797, 0.12564286250014123, 0.09342493248890738, 0.12003623866051216, 0.07895006295772056, 0.10233775938256096, 0.11125345722885938, 0.09917322103202875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018418003632888924, 0.02439980354441673, 9.999999999998899e-05, 0.02156426464420569, 0.030076629545848332, 0.008636685099960628, 0.018248263482334326, 0.01091100810928003, 0.013748457538109715, 0.025755837118461744, 9.999999999998899e-05, 0.0040804633790263445, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026121598197275997, 0.9235790876514625, 0.9684142713161852, 0.9473983103504858, 0.9596779976027284, 0.9859853607844739, 0.9738161808858518, 0.9596995260320766, 0.9767163954409732, 0.9633601258335646, 9.999999999998899e-05, 9.999999999998899e-05, 0.007341537020537414, 0.006906216315599734, 0.00031549654350837564, 0.06371550382734437, 9.999999999998899e-05, 0.03678082344484079, 9.999999999998899e-05, 0.12665163427541426, 0.07775600439296249, 0.03723365167782833, 0.07644016924054153, 0.08542760584898734, 0.06698224821699894, 0.04198478256166838, 0.1000978595607448, 0.05813491383552194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03730759870569167, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004938797960700847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05742318126412316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016719527494927888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1289944284421234, 0.16535769267880385, 0.1582084222831982, 0.14704612351442248, 0.11311616611986941, 0.15134755018616874, 0.23278890258289875, 0.1543781536918929, 0.1475723031207502, 0.011756986996142249, 0.00669576242725467, 9.999999999998899e-05, 0.01713808360467406, 0.024036177820179194, 0.01759993274736349, 0.020230967189458382, 0.031828558609306334, 0.03942641945461767, 0.11085436098108181, 0.06735693451091307, 0.0819959997794445, 0.09855305120349966, 0.10852972522114013, 0.0736956335179133, 0.14475840411343577, 0.06902103640397239, 0.08818756004023942, 0.10888557944580624, 0.1003370099218801, 0.1358075557974836, 0.131652711875356, 0.11619183885161188, 0.11880696422905634, 0.1447028022623037, 0.17377774300845283, 0.1221166826128035, 0.06010012841143164, 0.07424890547732943, 0.0468005311184877, 0.10634726548280438, 0.06406947898089654, 0.10446820087320263, 0.07880931796789559, 0.10472749050622021, 0.05642958659197883, 0.12817523447027745, 0.12976771232466888, 0.13345086981233123, 0.11564111358149509, 0.11471207546210205, 0.12335194583873521, 0.12245976138762271, 0.09440146221409174, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14989274665164143, 9.999999999998899e-05, 0.11919161260125, 0.13568602626677717, 9.999999999998899e-05, 0.12671944883184827, 0.09843454878685265, 0.1186360661451965, 0.10957494465096607, 0.13450538671112156, 0.1207914665021157, 0.11395597293718618, 0.09568316162813606, 0.09643604708838482, 0.166015131945505, 0.05950456059013831, 0.08244973854603943, 0.12632071444404824, 0.12062734606245629, 0.07003972245657153, 0.07014351506679972, 0.05285841834678506, 0.10652122333008296, 0.04440774003855785, 0.1470920840143093, 0.13469643571323964, 0.1678594453779222, 0.15381347891079045, 0.14360806194100728, 0.17936454562507187, 0.1292343730358958, 0.16070581680203466, 0.14689007985489466, 0.02233807799411247, 0.02861843886886295, 0.031393493129599714, 0.027015293023570086, 0.018487330591705486, 0.0280275373649711, 0.025558996040676907, 0.01061753044094127, 0.025956154356284955]}, "mutation_prompt": null}
{"id": "dbe0c6d2-71ca-423c-82d7-2d3ba03e9064", "solution": "import numpy as np\n\nclass DragonflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.step_size = 0.1\n        self.attract_repel_factor = 0.1\n\n    def __call__(self, func):\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / (np.abs(v) ** (1 / beta))\n            return step\n\n        def move_towards_target(dragonfly, target):\n            direction = target - dragonfly\n            step = self.step_size * levy_flight()\n            return dragonfly + step * direction\n\n        def attract_repel(dragonflies, fitnesses):\n            best_idx = np.argmin(fitnesses)\n            worst_idx = np.argmax(fitnesses)\n            attractor = np.mean(dragonflies, axis=0)\n            repeller = dragonflies[worst_idx]\n            return dragonflies + self.attract_repel_factor * (attractor - dragonflies) - self.attract_repel_factor * (repeller - dragonflies)\n\n        dragonflies = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitnesses = np.array([func(x) for x in dragonflies])\n\n        for _ in range(self.budget - self.population_size):\n            dragonflies = np.array([move_towards_target(dragonflies[i], dragonflies[np.argmin(fitnesses)]) for i in range(self.population_size)])\n            dragonflies = attract_repel(dragonflies, fitnesses)\n            fitnesses = np.array([func(x) for x in dragonflies])\n\n        best_idx = np.argmin(fitnesses)\n        return dragonflies[best_idx]", "name": "DragonflyAlgorithm", "description": "A novel metaheuristic algorithm named Dragonfly Algorithm (DA) inspired by the flocking behavior of dragonflies, where each dragonfly represents a candidate solution and moves towards better solutions while exploring the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e3c61d62-3852-422f-9be2-8a4847d1a889", "metadata": {"aucs": [0.12914059941915135, 0.11525727491786797, 0.12564286250014123, 0.09342493248890738, 0.12003623866051216, 0.07895006295772056, 0.10233775938256096, 0.11125345722885938, 0.09917322103202875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018418003632888924, 0.02439980354441673, 9.999999999998899e-05, 0.02156426464420569, 0.030076629545848332, 0.008636685099960628, 0.018248263482334326, 0.01091100810928003, 0.013748457538109715, 0.025755837118461744, 9.999999999998899e-05, 0.0040804633790263445, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026121598197275997, 0.9235790876514625, 0.9684142713161852, 0.9473983103504858, 0.9596779976027284, 0.9859853607844739, 0.9738161808858518, 0.9596995260320766, 0.9767163954409732, 0.9633601258335646, 9.999999999998899e-05, 9.999999999998899e-05, 0.007341537020537414, 0.006906216315599734, 0.00031549654350837564, 0.06371550382734437, 9.999999999998899e-05, 0.03678082344484079, 9.999999999998899e-05, 0.12665163427541426, 0.07775600439296249, 0.03723365167782833, 0.07644016924054153, 0.08542760584898734, 0.06698224821699894, 0.04198478256166838, 0.1000978595607448, 0.05813491383552194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03730759870569167, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004938797960700847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05742318126412316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016719527494927888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1289944284421234, 0.16535769267880385, 0.1582084222831982, 0.14704612351442248, 0.11311616611986941, 0.15134755018616874, 0.23278890258289875, 0.1543781536918929, 0.1475723031207502, 0.011756986996142249, 0.00669576242725467, 9.999999999998899e-05, 0.01713808360467406, 0.024036177820179194, 0.01759993274736349, 0.020230967189458382, 0.031828558609306334, 0.03942641945461767, 0.11085436098108181, 0.06735693451091307, 0.0819959997794445, 0.09855305120349966, 0.10852972522114013, 0.0736956335179133, 0.14475840411343577, 0.06902103640397239, 0.08818756004023942, 0.10888557944580624, 0.1003370099218801, 0.1358075557974836, 0.131652711875356, 0.11619183885161188, 0.11880696422905634, 0.1447028022623037, 0.17377774300845283, 0.1221166826128035, 0.06010012841143164, 0.07424890547732943, 0.0468005311184877, 0.10634726548280438, 0.06406947898089654, 0.10446820087320263, 0.07880931796789559, 0.10472749050622021, 0.05642958659197883, 0.12817523447027745, 0.12976771232466888, 0.13345086981233123, 0.11564111358149509, 0.11471207546210205, 0.12335194583873521, 0.12245976138762271, 0.09440146221409174, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14989274665164143, 9.999999999998899e-05, 0.11919161260125, 0.13568602626677717, 9.999999999998899e-05, 0.12671944883184827, 0.09843454878685265, 0.1186360661451965, 0.10957494465096607, 0.13450538671112156, 0.1207914665021157, 0.11395597293718618, 0.09568316162813606, 0.09643604708838482, 0.166015131945505, 0.05950456059013831, 0.08244973854603943, 0.12632071444404824, 0.12062734606245629, 0.07003972245657153, 0.07014351506679972, 0.05285841834678506, 0.10652122333008296, 0.04440774003855785, 0.1470920840143093, 0.13469643571323964, 0.1678594453779222, 0.15381347891079045, 0.14360806194100728, 0.17936454562507187, 0.1292343730358958, 0.16070581680203466, 0.14689007985489466, 0.02233807799411247, 0.02861843886886295, 0.031393493129599714, 0.027015293023570086, 0.018487330591705486, 0.0280275373649711, 0.025558996040676907, 0.01061753044094127, 0.025956154356284955]}, "mutation_prompt": null}
