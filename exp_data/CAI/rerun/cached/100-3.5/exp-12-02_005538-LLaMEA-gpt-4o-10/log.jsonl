{"id": "46c10c9a-f6cf-4874-b8ed-68b673ded08c", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.inertia_weight = 0.7\n        self.cognitive_const = 1.5\n        self.social_const = 1.5\n        self.f_scale = 0.5\n        self.cr = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.pbest_positions = np.copy(self.population)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                score = func(self.population[i])\n                evaluations += 1\n                \n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.population[i]\n                    \n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.population[i]\n                    \n                if evaluations >= self.budget:\n                    break\n            \n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            self.velocities = (self.inertia_weight * self.velocities +\n                               self.cognitive_const * r1 * (self.pbest_positions - self.population) +\n                               self.social_const * r2 * (self.gbest_position - self.population))\n            self.population = np.clip(self.population + self.velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Update\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.f_scale * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n                \n                trial_score = func(trial)\n                evaluations += 1\n                \n                if trial_score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = trial_score\n                    self.pbest_positions[i] = trial\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = trial\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization and Differential Evolution algorithm leveraging swarm intelligence and mutation strategies for robust exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.25466793056488907, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.725312322199117, 0.7113568703259698, 0.6906412015828383, 0.6801440759817898, 0.6723506007136533, 0.6875666346560614, 0.7049016179115293, 0.6855757955530415, 0.6849604425184752, 0.2726256075688035, 0.03473919691226257, 0.30193247176101634, 0.28219134506284393, 0.21779612022013184, 9.999999999998899e-05, 0.1923887285658078, 0.2885066239218139, 0.2416332963085811, 0.1529489401553883, 0.14189081487760047, 0.15964463165671772, 0.11917385016872761, 0.13711691933104575, 0.15657029806450484, 0.13919877603625463, 0.13262597129133813, 0.14284645886907787, 0.10327838951825397, 0.10780402379264975, 0.10479730105421547, 0.12035484318153555, 0.11520345456260128, 0.10422491669543943, 0.13523994143237927, 0.12000639130070245, 0.1110637591176965, 0.9819533741578176, 0.983677189928803, 0.9821492919128356, 0.9738980871050104, 0.9800354098064485, 0.9815252394101485, 0.9817323505618527, 0.9807132418634747, 0.9800799624117336, 0.3951683419786054, 0.4029196559416416, 0.027365085702841463, 0.4209796161778019, 0.3429396798996711, 0.39095038047990005, 0.12532647174447098, 0.08764838775704997, 0.38925386366348425, 0.2106496513185101, 0.41125246752680655, 0.17173734377745098, 0.2576402879306715, 0.7018830661323082, 0.19171558444804737, 0.2124933443119814, 0.6565615488050351, 0.2544110530586391, 0.2117170383392013, 0.16987772788254774, 0.1681693466623403, 0.0936222271154995, 0.12221431387408299, 0.1184267054006859, 0.18114477348650126, 0.1553697398715409, 0.1917854125239833, 0.17704045611732888, 0.19139206197086311, 0.19615155093192072, 0.11694075857796249, 0.1764345507184455, 0.17031191302771653, 0.16460255641371857, 0.032915557228333614, 0.1690021170746917, 0.0028651278094538046, 0.04909119415147378, 9.999999999998899e-05, 0.04511061019748974, 0.004616872277430906, 9.999999999998899e-05, 0.02662289360879455, 9.999999999998899e-05, 0.00036821255268204567, 0.07595614150349905, 0.045496082268296045, 0.09929674873540606, 0.08792405598658692, 0.009135004929863855, 0.006144655274469946, 0.07105321863264236, 0.1124127152364186, 0.051588728059182354, 0.05032382979585637, 9.999999999998899e-05, 0.07161090679118698, 0.1226920905225184, 0.12739038543181358, 0.06701257461267995, 0.07524938610375809, 0.06880262620661304, 0.1405164562118436, 0.03969437633462636, 0.1350036837619566, 0.1233994599599244, 0.18973936986788775, 0.09838107260776363, 0.13256526610835007, 0.10583044948603038, 0.07664720372177669, 0.08292064292071122, 0.47593437072292866, 0.4817074247396649, 0.48197172446319503, 0.46037781225378926, 0.47945687671262704, 0.47076676335975576, 0.49517922183345586, 0.48084700696457194, 0.46790543950478314, 0.06829677396962364, 0.14824184842757726, 0.12344674099542441, 0.09060679468179933, 0.10222924069607564, 0.09616534958970091, 0.13679130534180073, 0.11622806195068591, 0.10973875811816447, 0.23852326013006464, 0.22476503262659986, 0.20435402581906914, 0.23026601858292783, 0.16362417191685907, 0.31035838590263265, 0.1543878012256309, 0.17494726552594309, 0.19799069013016046, 0.2844452414872427, 0.2293770317631303, 0.3563656306082442, 0.3328868326223122, 0.3441122990016332, 0.29181874539260966, 0.3517783128146328, 0.4044138613975209, 0.2866679196886439, 0.23242607047292407, 0.18412689679481653, 0.2160706003367855, 0.2792657938817712, 0.2731856841490242, 0.2299326504026854, 0.22853994357187135, 0.31400788518422984, 0.2671971567325572, 0.1971384936571402, 0.19045873415940406, 0.22116701413000728, 0.2191263412667377, 0.19170441173014063, 0.20873090301049002, 0.22013410127967192, 0.19294354283678783, 0.20989192665944745, 0.18013517482396058, 0.19145173185457032, 0.2218373657791095, 0.23420318911476756, 0.20468804753545178, 0.19339824381063708, 0.21650474914727613, 0.1879790904341061, 0.35914663025548454, 0.8245790532550143, 0.18280689943671924, 0.15352253056560294, 0.8356203954230428, 0.19727644722671134, 0.19901011701420157, 0.16888048930620603, 0.16925246525855842, 0.8188499290181224, 0.6487008213347125, 0.21070405987634444, 0.14362933653065468, 0.20735277202858393, 0.4157854954254063, 0.15239879281048252, 0.1971791101142052, 0.2047788234206429, 0.5883384124363613, 0.18159306727663582, 0.18090785756822902, 0.18364590039308837, 0.19705428803884406, 0.20960695972705, 0.1793534956216869, 0.19309900155640958, 0.20104423937073013, 0.18014388256510938, 0.08257859166056802, 0.09255148414544678, 0.09532853520743068, 0.07915932608300014, 0.0881377601631651, 0.08294933409264416, 0.09839524539325484, 0.0811568754723081, 0.09218133365626813]}, "mutation_prompt": null}
