{"id": "c8416e11-54d0-4628-b91a-acbcb3013f25", "solution": "import numpy as np\n\nclass PSO:\n    def __init__(self, budget, dim, num_particles=30, max_velocity=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_velocity = max_velocity\n        self.inertia_weight = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.global_best = None\n\n    def __call__(self, func):\n        def fitness(particle):\n            return func(particle)\n        \n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim)), \\\n                   np.zeros((self.num_particles, self.dim)), \\\n                   np.full(self.num_particles, np.inf), \\\n                   np.random.uniform(-5.0, 5.0, size=self.dim)\n        \n        particles, velocities, personal_bests, global_best = initialize_particles()\n        \n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                current_fitness = fitness(particles[i])\n                \n                if current_fitness < personal_bests[i]:\n                    personal_bests[i] = current_fitness\n                    if current_fitness < personal_bests[i]:\n                        self.global_best = particles[i].copy()\n                \n                velocities[i] = self.inertia_weight * velocities[i] + \\\n                                self.c1 * np.random.rand(self.dim) * (particles[i] - particles[i]) + \\\n                                self.c2 * np.random.rand(self.dim) * (self.global_best - particles[i])\n                velocities[i] = np.clip(velocities[i], -self.max_velocity, self.max_velocity)\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n        \n        return self.global_best", "name": "PSO", "description": "Particle Swarm Optimization with Dynamic Inertia Weight and Adaptive Mutation for Black Box Optimization.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 37, in __call__\nTypeError: unsupported operand type(s) for -: 'NoneType' and 'float'\n.", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 37, in __call__\nTypeError: unsupported operand type(s) for -: 'NoneType' and 'float'\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "38651ae9-1f64-452e-8c3c-84e9411fa879", "solution": "import numpy as np\n\nclass PSO:\n    def __init__(self, budget, dim, num_particles=30, max_velocity=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.max_velocity = max_velocity\n        self.inertia_weight = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.global_best = None\n\n    def __call__(self, func):\n        def fitness(particle):\n            return func(particle)\n        \n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim)), \\\n                   np.zeros((self.num_particles, self.dim)), \\\n                   np.full(self.num_particles, np.inf), \\\n                   np.random.uniform(-5.0, 5.0, size=self.dim)\n        \n        particles, velocities, personal_bests, global_best = initialize_particles()\n        \n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                current_fitness = fitness(particles[i])\n                \n                if current_fitness < personal_bests[i]:\n                    personal_bests[i] = current_fitness\n                    if current_fitness < personal_bests[i]:\n                        self.global_best = particles[i].copy()\n                \n                velocities[i] = self.inertia_weight * velocities[i] + \\\n                                self.c1 * np.random.rand(self.dim) * (particles[i] - particles[i]) + \\\n                                self.c2 * np.random.rand(self.dim) * (self.global_best - particles[i])\n                velocities[i] = np.clip(velocities[i], -self.max_velocity, self.max_velocity)\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n        \n        return self.global_best", "name": "PSO", "description": "Particle Swarm Optimization with Dynamic Inertia Weight and Adaptive Mutation for Black Box Optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c8416e11-54d0-4628-b91a-acbcb3013f25", "metadata": {}, "mutation_prompt": null}
