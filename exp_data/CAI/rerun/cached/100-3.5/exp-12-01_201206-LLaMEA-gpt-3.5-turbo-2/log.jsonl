{"id": "3d50c9ec-2e4f-4919-8302-a67a72379559", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass EEDHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dimension = dim\n        self.pop_size = 10\n        self.sub_budget = int(budget / self.pop_size)\n\n    def __call__(self, func):\n        def ensemble_fitness(x):\n            return np.mean([func(x) for _ in range(self.pop_size)])\n\n        best_solution = None\n        best_fitness = np.inf\n\n        for _ in range(self.pop_size):\n            initial_solution = np.random.uniform(-5.0, 5.0, self.dimension)\n            result = differential_evolution(ensemble_fitness, bounds=[(-5.0, 5.0)]*self.dimension, maxiter=self.sub_budget)\n            \n            if result.fun < best_fitness:\n                best_fitness = result.fun\n                best_solution = result.x\n        \n        return best_solution", "name": "EEDHS", "description": "Ensembled Evolutionary Differential Harmony Search (EEDHS) algorithm that combines differential evolution, harmony search, and ensemble learning for robust optimization on the BBOB test suite.", "configspace": "", "generation": 0, "fitness": 0.09943829472829181, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.20251010476556153, 0.39658183415511616, 0.2112738787820333, 0.4231739509380785, 0.49757908876758783, 0.45084617520922854, 0.4475781773055263, 0.4304206487261739, 0.42719431352747983, 0.00021951214110371708, 0.004960698431949795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013172913611401271, 0.002576396483523369, 0.050642856780646284, 0.05287081325212839, 0.05056872619842001, 0.0491841479500883, 0.05467420793172828, 0.05256456774688012, 0.04719432953401159, 0.05204588032181745, 0.040699666118732214, 0.043317649880919795, 0.03742504400232738, 0.032504392653300074, 0.037275132185656146, 0.0395840427754407, 0.041124392730585324, 0.04642592969103099, 0.048779228670196795, 0.048243101125610366, 0.08953245200838322, 0.10468172181635127, 0.09270060678373593, 0.10487870806032917, 0.11753771036039129, 0.09832508083971714, 0.09789467961636855, 0.09669358102114178, 0.09459001076620677, 0.09568163964839005, 0.09464064445018117, 0.07117838359949324, 0.07155581130889588, 0.0707658915221302, 0.05712770840634218, 0.09025073230827851, 0.13327623753925177, 0.10802628131861947, 0.10999731277707891, 0.13744048291216227, 0.14771300866629977, 0.1336377105776001, 0.14302212568195738, 0.11714179333011943, 0.1501761257153339, 0.15829729070838694, 0.10336615531427906, 0.030502683170647305, 0.04839445745283988, 0.02994163773398617, 0.04687946240210927, 0.0425039058155664, 0.030897688487294017, 0.03103730080784428, 0.05324707769574921, 0.040887990973526245, 0.023468793521238873, 0.045051479024558416, 9.999999999998899e-05, 0.009588052539169944, 0.029705465257146013, 0.022198049965737154, 0.0005186316867253904, 0.035884994274812954, 0.012650476726264404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019465355194788536, 0.031184287478581263, 0.010410694654441999, 0.00874641773284568, 0.015296790058187848, 0.012659530951818487, 0.028599593633248488, 0.01224380316913265, 0.017808537895116383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016180965008386172, 0.009630038271815411, 0.007711279607943267, 0.021828812069215053, 0.019854973938088882, 0.01640090783136272, 0.00928577008865672, 0.02134809466359855, 0.025663574939323364, 0.18489222685999662, 0.32560294893939223, 0.2724085433321517, 0.2446981260962, 0.2514764749980082, 0.29566930749916365, 0.3056239670682539, 0.301896263465364, 0.18760548133938615, 0.057951760385208995, 0.05559775477147744, 0.046913515066752565, 0.05564147267374098, 0.05270163651569726, 0.051602118202082825, 0.03934640654892718, 0.04700224897588268, 0.04547834091551273, 0.1155316923987586, 0.14056773855903992, 0.11853115495458111, 0.11638734849438825, 0.09157253147858735, 0.11538456056598112, 0.10587634151947278, 0.09203862483303105, 0.10303061388185875, 0.19630077573440385, 0.1655411229711763, 0.1630609608795217, 0.16195913607504975, 0.1655037223949477, 0.1568808161995816, 0.15373842914461944, 0.14961646500476855, 0.1905012464091962, 0.1044564877691242, 0.11998315997643627, 0.1036762390088608, 0.1108530919081191, 0.11105020684667577, 0.11930497318535949, 0.1352991329405091, 0.11020035973415798, 0.11086348353735975, 0.14581948907316322, 0.14650323606667393, 0.1409950099731786, 0.13440715505534973, 0.1537754843000697, 0.16582476332870189, 0.1617767821634607, 0.17148376895124162, 0.1573609099100597, 0.13780740044875073, 0.13095748926752693, 0.1511359114454286, 0.11928113823814146, 0.15501550588566626, 0.1302603724381668, 0.12713041064139452, 0.13675241722653886, 0.1403587244186809, 0.16821289834549913, 0.12799507671910526, 0.11398782764327497, 0.1453766032612166, 0.20048406132657948, 0.15077059019895134, 0.15110408674106512, 0.10400902164750547, 0.13243477925342906, 0.1426831384476236, 0.13081525059984755, 0.13193019168835018, 0.18180308706875736, 0.14873098004389362, 0.08625832676326606, 0.11901510538280669, 0.15875358851375676, 0.10115488461719468, 0.18523113580966033, 0.1572617540952409, 0.16882179096721228, 0.15891197537651547, 0.17074149408186623, 0.15727474617352732, 0.1685229559874526, 0.16327398231317403, 0.15917519226045673, 0.048588049726183136, 0.06112097264222338, 0.05594646931658209, 0.04045564228098397, 0.054706320074352166, 0.057573666918881106, 0.047595449487461194, 0.04052869723105068, 0.06753762524164919]}, "mutation_prompt": null}
{"id": "5aad44a8-ce98-436f-919d-15211e445e2e", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass EEDHS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dimension = dim\n        self.pop_size = 10\n        self.sub_budget = int(budget / self.pop_size)\n\n    def __call__(self, func):\n        def ensemble_fitness(x):\n            return np.mean([func(x) for _ in range(self.pop_size)])\n\n        best_solution = None\n        best_fitness = np.inf\n\n        for _ in range(self.pop_size):\n            initial_solution = np.random.uniform(-5.0, 5.0, self.dimension)\n            result = differential_evolution(ensemble_fitness, bounds=[(-5.0, 5.0)]*self.dimension, maxiter=self.sub_budget)\n            \n            if result.fun < best_fitness:\n                best_fitness = result.fun\n                best_solution = result.x\n        \n        return best_solution", "name": "EEDHS", "description": "Ensembled Evolutionary Differential Harmony Search (EEDHS) algorithm that combines differential evolution, harmony search, and ensemble learning for robust optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3d50c9ec-2e4f-4919-8302-a67a72379559", "metadata": {"aucs": [0.20251010476556153, 0.39658183415511616, 0.2112738787820333, 0.4231739509380785, 0.49757908876758783, 0.45084617520922854, 0.4475781773055263, 0.4304206487261739, 0.42719431352747983, 0.00021951214110371708, 0.004960698431949795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013172913611401271, 0.002576396483523369, 0.050642856780646284, 0.05287081325212839, 0.05056872619842001, 0.0491841479500883, 0.05467420793172828, 0.05256456774688012, 0.04719432953401159, 0.05204588032181745, 0.040699666118732214, 0.043317649880919795, 0.03742504400232738, 0.032504392653300074, 0.037275132185656146, 0.0395840427754407, 0.041124392730585324, 0.04642592969103099, 0.048779228670196795, 0.048243101125610366, 0.08953245200838322, 0.10468172181635127, 0.09270060678373593, 0.10487870806032917, 0.11753771036039129, 0.09832508083971714, 0.09789467961636855, 0.09669358102114178, 0.09459001076620677, 0.09568163964839005, 0.09464064445018117, 0.07117838359949324, 0.07155581130889588, 0.0707658915221302, 0.05712770840634218, 0.09025073230827851, 0.13327623753925177, 0.10802628131861947, 0.10999731277707891, 0.13744048291216227, 0.14771300866629977, 0.1336377105776001, 0.14302212568195738, 0.11714179333011943, 0.1501761257153339, 0.15829729070838694, 0.10336615531427906, 0.030502683170647305, 0.04839445745283988, 0.02994163773398617, 0.04687946240210927, 0.0425039058155664, 0.030897688487294017, 0.03103730080784428, 0.05324707769574921, 0.040887990973526245, 0.023468793521238873, 0.045051479024558416, 9.999999999998899e-05, 0.009588052539169944, 0.029705465257146013, 0.022198049965737154, 0.0005186316867253904, 0.035884994274812954, 0.012650476726264404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019465355194788536, 0.031184287478581263, 0.010410694654441999, 0.00874641773284568, 0.015296790058187848, 0.012659530951818487, 0.028599593633248488, 0.01224380316913265, 0.017808537895116383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016180965008386172, 0.009630038271815411, 0.007711279607943267, 0.021828812069215053, 0.019854973938088882, 0.01640090783136272, 0.00928577008865672, 0.02134809466359855, 0.025663574939323364, 0.18489222685999662, 0.32560294893939223, 0.2724085433321517, 0.2446981260962, 0.2514764749980082, 0.29566930749916365, 0.3056239670682539, 0.301896263465364, 0.18760548133938615, 0.057951760385208995, 0.05559775477147744, 0.046913515066752565, 0.05564147267374098, 0.05270163651569726, 0.051602118202082825, 0.03934640654892718, 0.04700224897588268, 0.04547834091551273, 0.1155316923987586, 0.14056773855903992, 0.11853115495458111, 0.11638734849438825, 0.09157253147858735, 0.11538456056598112, 0.10587634151947278, 0.09203862483303105, 0.10303061388185875, 0.19630077573440385, 0.1655411229711763, 0.1630609608795217, 0.16195913607504975, 0.1655037223949477, 0.1568808161995816, 0.15373842914461944, 0.14961646500476855, 0.1905012464091962, 0.1044564877691242, 0.11998315997643627, 0.1036762390088608, 0.1108530919081191, 0.11105020684667577, 0.11930497318535949, 0.1352991329405091, 0.11020035973415798, 0.11086348353735975, 0.14581948907316322, 0.14650323606667393, 0.1409950099731786, 0.13440715505534973, 0.1537754843000697, 0.16582476332870189, 0.1617767821634607, 0.17148376895124162, 0.1573609099100597, 0.13780740044875073, 0.13095748926752693, 0.1511359114454286, 0.11928113823814146, 0.15501550588566626, 0.1302603724381668, 0.12713041064139452, 0.13675241722653886, 0.1403587244186809, 0.16821289834549913, 0.12799507671910526, 0.11398782764327497, 0.1453766032612166, 0.20048406132657948, 0.15077059019895134, 0.15110408674106512, 0.10400902164750547, 0.13243477925342906, 0.1426831384476236, 0.13081525059984755, 0.13193019168835018, 0.18180308706875736, 0.14873098004389362, 0.08625832676326606, 0.11901510538280669, 0.15875358851375676, 0.10115488461719468, 0.18523113580966033, 0.1572617540952409, 0.16882179096721228, 0.15891197537651547, 0.17074149408186623, 0.15727474617352732, 0.1685229559874526, 0.16327398231317403, 0.15917519226045673, 0.048588049726183136, 0.06112097264222338, 0.05594646931658209, 0.04045564228098397, 0.054706320074352166, 0.057573666918881106, 0.047595449487461194, 0.04052869723105068, 0.06753762524164919]}, "mutation_prompt": null}
