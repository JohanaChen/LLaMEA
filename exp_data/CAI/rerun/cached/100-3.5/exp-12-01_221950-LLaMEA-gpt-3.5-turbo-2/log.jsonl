{"id": "6fba746e-8462-442b-85dc-d012a289ece2", "solution": "import numpy as np\n\nclass QFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        n_explosions = 5\n        n_sparks = 10\n        pop_size = n_explosions * n_sparks\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        for _ in range(self.budget):\n            best_idx = np.argmin(fitness)\n            best = pop[best_idx]\n            for i in range(n_explosions):\n                center = pop[i * n_sparks]\n                for j in range(1, n_sparks):\n                    pop[i * n_sparks + j] = center + np.random.normal(0, 1, self.dim) * np.abs(best - center)\n                    fitness[i * n_sparks + j] = func(pop[i * n_sparks + j])\n        return best", "name": "QFireworksAlgorithm", "description": "Quantum-inspired Fireworks Algorithm (Q-Fireworks): A metaheuristic algorithm inspired by the behavior of fireworks explosions in quantum space, leveraging the quantum concept of superposition to explore the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.10168943721826841, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.17837100231367842, 0.14631204921493923, 0.1686351060713016, 0.10159275420867653, 0.11792778817920302, 0.1472366108691121, 0.1941017296276023, 0.18916875274824174, 0.14811986675494404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0440174493026525, 0.034280228275210045, 0.028303917748281338, 0.04058346892427911, 0.033223246874538925, 0.04178177676095196, 0.05735109288071505, 0.047426471718410745, 0.034956321108756905, 0.044371627445084605, 0.0138447053806674, 0.015386249444739208, 0.024024077008181988, 0.022379995428222887, 0.02531575201906744, 0.01534459200350502, 0.02131621246179749, 0.030744058129944962, 0.5214965568784609, 0.6989362694231336, 0.27345065897184817, 0.1844313543647439, 0.9623579480875072, 0.597787475703275, 0.8900203036158055, 0.39892196096958477, 0.567832511727238, 0.08030662505612196, 0.05605845254240471, 0.037718598830769, 0.059937924194183534, 0.06589039642224415, 0.08669293488859986, 0.06440954478629302, 0.05243277891019482, 0.05252485042801602, 0.11802924014581873, 0.08973828896553149, 0.10767543165828974, 0.13420502210321483, 0.12134695708031373, 0.08981675484227303, 0.11625524705891543, 0.09733060135520666, 0.0665739082004353, 0.017094023408158687, 9.999999999998899e-05, 0.001356980039539435, 9.999999999998899e-05, 0.03832126755692411, 9.999999999998899e-05, 9.999999999998899e-05, 0.01308220449351416, 9.999999999998899e-05, 0.012683896501260783, 9.999999999998899e-05, 0.015011240849731045, 0.028413881127004048, 9.999999999998899e-05, 0.02487398344576741, 0.022525792646830634, 9.999999999998899e-05, 0.015769698431453483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049296389778197613, 0.02067653633041444, 0.04114571711827664, 0.024131345813323102, 0.010913761879286388, 0.01098411315579173, 0.06229398422123611, 0.033362614390438416, 0.005681737828200806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18980562290105285, 0.19560897898212815, 0.1820042528918301, 0.17263136500398013, 0.19869753485689812, 0.16529891534459307, 0.16418208392237843, 0.19310332248754836, 0.1831449999206639, 0.022897427705135143, 0.03964498560402685, 0.027674341884713627, 0.03913318202275873, 0.03711353836220754, 0.04120756329379094, 0.028611479707218335, 0.03630919652748399, 0.04427700630006126, 0.11664617978139635, 0.16432437249580312, 0.1569628932510625, 0.13180070732232396, 0.1347085156394151, 0.11993520726104256, 0.1279538552637467, 0.12054031937352028, 0.13354259613804353, 0.13836949570487944, 0.1408531081545954, 0.1613932299901244, 0.16915125159667788, 0.16543701636626462, 0.15916241156694777, 0.1547940942502779, 0.17377774300845283, 0.14969647798898844, 0.08301275604422609, 0.08135996636078491, 0.09557135487042434, 0.1212924231405359, 0.10362215320362334, 0.09557622789831943, 0.10112662799503414, 0.0997711199450243, 0.08681090443625195, 0.16378099358755682, 0.13139463882999625, 0.19071817932006085, 0.1663544207621671, 0.13619710992833822, 0.1645827105254315, 0.13776810537854067, 0.1933147081653025, 0.19450546156764625, 0.14399230642841943, 0.14605061562016597, 0.1358338232451871, 0.1476972730563113, 0.15109779880437602, 0.1490696179576485, 0.14342680262052876, 0.10568128106577224, 0.11692673490018768, 0.13949727617670038, 0.15117386035747749, 0.11292144194266673, 0.18243072885806222, 0.13176391521354291, 0.1958238945971812, 0.16907585298717553, 0.11943622698553791, 0.15044641783744228, 0.24609562741869517, 0.15378384479503437, 0.1431025653412713, 0.1079145977258128, 0.15819757876584517, 0.2155817185678367, 0.09956264096805223, 0.17484157171298442, 0.12201712004084952, 0.17757542062240372, 0.17767853289959856, 0.17172804134603425, 0.18255608101451648, 0.17352589314665934, 0.17905648669591778, 0.17049506018958216, 0.1817699558970065, 0.17761848827972948, 0.04680989959013182, 0.04056641302527464, 0.04718896761761693, 0.04959949465418434, 0.04282407553273937, 0.04607043988118875, 0.045485852084002354, 0.05093770854680446, 0.05251869017204558]}, "mutation_prompt": null}
{"id": "7192afbd-73fd-4381-be95-4fee6e531176", "solution": "import numpy as np\n\nclass QFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        n_explosions = 5\n        n_sparks = 10\n        pop_size = n_explosions * n_sparks\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        for _ in range(self.budget):\n            best_idx = np.argmin(fitness)\n            best = pop[best_idx]\n            for i in range(n_explosions):\n                center = pop[i * n_sparks]\n                for j in range(1, n_sparks):\n                    pop[i * n_sparks + j] = center + np.random.normal(0, 1, self.dim) * np.abs(best - center)\n                    fitness[i * n_sparks + j] = func(pop[i * n_sparks + j])\n        return best", "name": "QFireworksAlgorithm", "description": "Quantum-inspired Fireworks Algorithm (Q-Fireworks): A metaheuristic algorithm inspired by the behavior of fireworks explosions in quantum space, leveraging the quantum concept of superposition to explore the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6fba746e-8462-442b-85dc-d012a289ece2", "metadata": {"aucs": [0.17837100231367842, 0.14631204921493923, 0.1686351060713016, 0.10159275420867653, 0.11792778817920302, 0.1472366108691121, 0.1941017296276023, 0.18916875274824174, 0.14811986675494404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0440174493026525, 0.034280228275210045, 0.028303917748281338, 0.04058346892427911, 0.033223246874538925, 0.04178177676095196, 0.05735109288071505, 0.047426471718410745, 0.034956321108756905, 0.044371627445084605, 0.0138447053806674, 0.015386249444739208, 0.024024077008181988, 0.022379995428222887, 0.02531575201906744, 0.01534459200350502, 0.02131621246179749, 0.030744058129944962, 0.5214965568784609, 0.6989362694231336, 0.27345065897184817, 0.1844313543647439, 0.9623579480875072, 0.597787475703275, 0.8900203036158055, 0.39892196096958477, 0.567832511727238, 0.08030662505612196, 0.05605845254240471, 0.037718598830769, 0.059937924194183534, 0.06589039642224415, 0.08669293488859986, 0.06440954478629302, 0.05243277891019482, 0.05252485042801602, 0.11802924014581873, 0.08973828896553149, 0.10767543165828974, 0.13420502210321483, 0.12134695708031373, 0.08981675484227303, 0.11625524705891543, 0.09733060135520666, 0.0665739082004353, 0.017094023408158687, 9.999999999998899e-05, 0.001356980039539435, 9.999999999998899e-05, 0.03832126755692411, 9.999999999998899e-05, 9.999999999998899e-05, 0.01308220449351416, 9.999999999998899e-05, 0.012683896501260783, 9.999999999998899e-05, 0.015011240849731045, 0.028413881127004048, 9.999999999998899e-05, 0.02487398344576741, 0.022525792646830634, 9.999999999998899e-05, 0.015769698431453483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049296389778197613, 0.02067653633041444, 0.04114571711827664, 0.024131345813323102, 0.010913761879286388, 0.01098411315579173, 0.06229398422123611, 0.033362614390438416, 0.005681737828200806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18980562290105285, 0.19560897898212815, 0.1820042528918301, 0.17263136500398013, 0.19869753485689812, 0.16529891534459307, 0.16418208392237843, 0.19310332248754836, 0.1831449999206639, 0.022897427705135143, 0.03964498560402685, 0.027674341884713627, 0.03913318202275873, 0.03711353836220754, 0.04120756329379094, 0.028611479707218335, 0.03630919652748399, 0.04427700630006126, 0.11664617978139635, 0.16432437249580312, 0.1569628932510625, 0.13180070732232396, 0.1347085156394151, 0.11993520726104256, 0.1279538552637467, 0.12054031937352028, 0.13354259613804353, 0.13836949570487944, 0.1408531081545954, 0.1613932299901244, 0.16915125159667788, 0.16543701636626462, 0.15916241156694777, 0.1547940942502779, 0.17377774300845283, 0.14969647798898844, 0.08301275604422609, 0.08135996636078491, 0.09557135487042434, 0.1212924231405359, 0.10362215320362334, 0.09557622789831943, 0.10112662799503414, 0.0997711199450243, 0.08681090443625195, 0.16378099358755682, 0.13139463882999625, 0.19071817932006085, 0.1663544207621671, 0.13619710992833822, 0.1645827105254315, 0.13776810537854067, 0.1933147081653025, 0.19450546156764625, 0.14399230642841943, 0.14605061562016597, 0.1358338232451871, 0.1476972730563113, 0.15109779880437602, 0.1490696179576485, 0.14342680262052876, 0.10568128106577224, 0.11692673490018768, 0.13949727617670038, 0.15117386035747749, 0.11292144194266673, 0.18243072885806222, 0.13176391521354291, 0.1958238945971812, 0.16907585298717553, 0.11943622698553791, 0.15044641783744228, 0.24609562741869517, 0.15378384479503437, 0.1431025653412713, 0.1079145977258128, 0.15819757876584517, 0.2155817185678367, 0.09956264096805223, 0.17484157171298442, 0.12201712004084952, 0.17757542062240372, 0.17767853289959856, 0.17172804134603425, 0.18255608101451648, 0.17352589314665934, 0.17905648669591778, 0.17049506018958216, 0.1817699558970065, 0.17761848827972948, 0.04680989959013182, 0.04056641302527464, 0.04718896761761693, 0.04959949465418434, 0.04282407553273937, 0.04607043988118875, 0.045485852084002354, 0.05093770854680446, 0.05251869017204558]}, "mutation_prompt": null}
