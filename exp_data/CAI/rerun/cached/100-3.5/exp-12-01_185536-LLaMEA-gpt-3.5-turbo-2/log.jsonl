{"id": "2e8a8f2a-26ff-4010-a108-ae8e8de45015", "solution": "import numpy as np\n\nclass PSO_DE_Metaheuristic:\n    def __init__(self, budget, dim, n_particles=30, pso_w=0.7, pso_c1=1.5, pso_c2=1.5, de_cr=0.9, de_f=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.pso_w = pso_w\n        self.pso_c1 = pso_c1\n        self.pso_c2 = pso_c2\n        self.de_cr = de_cr\n        self.de_f = de_f\n\n    def __call__(self, func):\n        def within_bounds(position):\n            return np.clip(position, -5.0, 5.0)\n\n        def evaluate_fitness(population):\n            return np.array([func(ind) for ind in population])\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        velocities = np.zeros((self.n_particles, self.dim))\n\n        best_global_position = population[np.argmin(evaluate_fitness(population))]\n        \n        for _ in range(self.budget):\n            for i in range(self.n_particles):\n                pso_r1, pso_r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                de_r1, de_r2, de_r3 = np.random.choice(self.n_particles, 3, replace=False)\n                \n                velocities[i] = self.pso_w * velocities[i] + self.pso_c1 * pso_r1 * (population[i] - population[i]) + self.pso_c2 * pso_r2 * (best_global_position - population[i])\n                new_position = within_bounds(population[i] + velocities[i])\n                \n                if func(new_position) < func(population[i]):\n                    population[i] = new_position\n                \n                mutant = population[de_r1] + self.de_f * (population[de_r2] - population[de_r3])\n                crossover = np.random.rand(self.dim) < self.de_cr\n                trial_vector = np.where(crossover, mutant, population[i])\n                \n                if func(trial_vector) < func(population[i]):\n                    population[i] = within_bounds(trial_vector)\n                \n                if func(population[i]) < func(best_global_position):\n                    best_global_position = population[i]\n\n        return best_global_position", "name": "PSO_DE_Metaheuristic", "description": "Metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for black box optimization on the BBOB test suite.", "configspace": "", "generation": 0, "fitness": 0.18837289388070724, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.39940120627111175, 0.41584539383795804, 0.45657852109413477, 0.4440509635800266, 0.42329729587959186, 0.4131556720375422, 0.4877159675444772, 0.39661694838692363, 0.38861977661837666, 0.16223462189032112, 0.093962053641927, 0.13971733596820834, 0.10649477678757391, 0.0892663789751541, 0.15219710127563646, 0.11399256790558743, 0.11987754239974346, 0.13282969315288373, 0.0717743645644443, 0.06730973819697517, 0.07252955609014355, 0.0708734593162661, 0.0663047282633592, 0.06679161420811741, 0.0810120382603452, 0.08859222674025513, 0.06511638801387076, 0.054157133735019514, 0.07112167666028069, 0.05876753936477164, 0.07277103229249826, 0.06172934233761118, 0.08257890771477172, 0.059769128905683866, 0.06209878426807813, 0.06879781537156182, 0.9743023341101577, 0.9747622287383959, 0.9797141979011109, 0.9718703163172561, 0.9748867372453706, 0.9371268784467452, 0.9758504742280201, 0.9722569968818268, 0.9770838222378988, 0.1581289350710856, 0.13926611972030822, 0.18072375102195803, 0.15556978715431435, 0.12654405160249682, 0.11552823441420168, 0.15342488591650238, 0.16875005031151435, 0.17338102985733972, 0.28445793674543673, 0.1722464406336376, 0.4532185297037299, 0.31104645906940154, 0.21500684078518872, 0.18748340839360322, 0.12747653226392686, 0.2229398655993503, 0.18672105169740394, 0.09002824930056741, 0.07788803397799526, 0.10926385817245987, 0.1070725953663959, 0.110752234246138, 0.08768830180966292, 0.1148437874676852, 0.13207331427080626, 0.1515264179855227, 0.14943730109490083, 0.12342916297269535, 0.12211427384499618, 0.08744106951903285, 0.12939071543883363, 0.1300966190982188, 0.1188836106208575, 0.0951933708457271, 0.11808392795491451, 0.00939773940950872, 9.999999999998899e-05, 9.999999999998899e-05, 0.01981013395335196, 9.999999999998899e-05, 0.013183625102619057, 0.027871726714809086, 0.011680775330286663, 0.023139429803378686, 0.10708301493027705, 0.08183676738211487, 0.06842568771226365, 0.033149185864250086, 0.044490107242536436, 0.04809890479973433, 0.10857906747575308, 0.1152230867097962, 0.10620679318687765, 0.016414962318351933, 9.999999999998899e-05, 9.999999999998899e-05, 0.006117220442631743, 9.999999999998899e-05, 9.999999999998899e-05, 0.047300950896592586, 9.999999999998899e-05, 0.005087740311662259, 0.0560565820980381, 0.07162290728834686, 0.056207327304384824, 0.0038955805177008918, 0.0695477437452735, 0.06214657305385374, 0.07308930569119643, 0.06543681784125688, 0.06403423218169502, 0.3651387220786212, 0.3424514881207591, 0.36872679591563495, 0.3813954381211674, 0.3610056505589512, 0.3723660214486091, 0.338588792343394, 0.3524880826957577, 0.37376438177552573, 0.06674692174563313, 0.0639760287090343, 0.06889793876234107, 0.0654121360053439, 0.06939317849200322, 0.06566290821515974, 0.09412683178413206, 0.06671561149335992, 0.08782835265665312, 0.12127997495688525, 0.10864096480419516, 0.12659324038493192, 0.11966948515415154, 0.20865503421812115, 0.13200554419782073, 0.14846328049114166, 0.17748511169719972, 0.17860943491003545, 0.2540960721871961, 0.23472903263266465, 0.21984268210792035, 0.21367111452883825, 0.23330243560714958, 0.22673972895012595, 0.24125573436227365, 0.25615576647013627, 0.2536226984360167, 0.16579781478322697, 0.1767901948729368, 0.20567259235906798, 0.1771348326420502, 0.1608959311706467, 0.16816825573504102, 0.16129377063514316, 0.1583297388988254, 0.16841537424507336, 0.16929111276740727, 0.1778014514016446, 0.19152692682537664, 0.1852241363939423, 0.18060533858037275, 0.18995464519707472, 0.18464004003032164, 0.19340648653517567, 0.16729953553023302, 0.1677415425921991, 0.1789243528487896, 0.16587721435317615, 0.1910359337116051, 0.17212888524068493, 0.16842893676073345, 0.17667676082928796, 0.1772073534431753, 0.17426655022175253, 0.47109082837345306, 0.16560905304598295, 0.11448682382293429, 0.4294906354968816, 0.18372486104520358, 0.17580312272932663, 0.20574769070694743, 0.16092787167829814, 0.5905229753861594, 0.3962513812362699, 0.16641710418428934, 0.2001970982331005, 0.21462555970613406, 0.16634544370601212, 0.1875305415061992, 0.1960097548414339, 0.1963433541007623, 0.314204906567062, 0.16734672469506495, 0.15337981802460432, 0.1766777454204279, 0.17039449974965337, 0.18237933109704385, 0.1923767734544798, 0.15908007818895564, 0.16300308601947744, 0.19088247928746838, 0.06436930454921641, 0.057034958298153415, 0.06588236172746309, 0.07256532527245985, 0.0640814520766615, 0.05185100318201985, 0.06260689231346772, 0.049609131053675815, 0.07679876091680016]}, "mutation_prompt": null}
{"id": "410c3487-740e-4332-9237-0ddb93d71ef5", "solution": "import numpy as np\n\nclass PSO_DE_Metaheuristic:\n    def __init__(self, budget, dim, n_particles=30, pso_w=0.7, pso_c1=1.5, pso_c2=1.5, de_cr=0.9, de_f=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.n_particles = n_particles\n        self.pso_w = pso_w\n        self.pso_c1 = pso_c1\n        self.pso_c2 = pso_c2\n        self.de_cr = de_cr\n        self.de_f = de_f\n\n    def __call__(self, func):\n        def within_bounds(position):\n            return np.clip(position, -5.0, 5.0)\n\n        def evaluate_fitness(population):\n            return np.array([func(ind) for ind in population])\n\n        population = np.random.uniform(-5.0, 5.0, size=(self.n_particles, self.dim))\n        velocities = np.zeros((self.n_particles, self.dim))\n\n        best_global_position = population[np.argmin(evaluate_fitness(population))]\n        \n        for _ in range(self.budget):\n            for i in range(self.n_particles):\n                pso_r1, pso_r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                de_r1, de_r2, de_r3 = np.random.choice(self.n_particles, 3, replace=False)\n                \n                velocities[i] = self.pso_w * velocities[i] + self.pso_c1 * pso_r1 * (population[i] - population[i]) + self.pso_c2 * pso_r2 * (best_global_position - population[i])\n                new_position = within_bounds(population[i] + velocities[i])\n                \n                if func(new_position) < func(population[i]):\n                    population[i] = new_position\n                \n                mutant = population[de_r1] + self.de_f * (population[de_r2] - population[de_r3])\n                crossover = np.random.rand(self.dim) < self.de_cr\n                trial_vector = np.where(crossover, mutant, population[i])\n                \n                if func(trial_vector) < func(population[i]):\n                    population[i] = within_bounds(trial_vector)\n                \n                if func(population[i]) < func(best_global_position):\n                    best_global_position = population[i]\n\n        return best_global_position", "name": "PSO_DE_Metaheuristic", "description": "Metaheuristic algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for black box optimization on the BBOB test suite.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e8a8f2a-26ff-4010-a108-ae8e8de45015", "metadata": {"aucs": [0.39940120627111175, 0.41584539383795804, 0.45657852109413477, 0.4440509635800266, 0.42329729587959186, 0.4131556720375422, 0.4877159675444772, 0.39661694838692363, 0.38861977661837666, 0.16223462189032112, 0.093962053641927, 0.13971733596820834, 0.10649477678757391, 0.0892663789751541, 0.15219710127563646, 0.11399256790558743, 0.11987754239974346, 0.13282969315288373, 0.0717743645644443, 0.06730973819697517, 0.07252955609014355, 0.0708734593162661, 0.0663047282633592, 0.06679161420811741, 0.0810120382603452, 0.08859222674025513, 0.06511638801387076, 0.054157133735019514, 0.07112167666028069, 0.05876753936477164, 0.07277103229249826, 0.06172934233761118, 0.08257890771477172, 0.059769128905683866, 0.06209878426807813, 0.06879781537156182, 0.9743023341101577, 0.9747622287383959, 0.9797141979011109, 0.9718703163172561, 0.9748867372453706, 0.9371268784467452, 0.9758504742280201, 0.9722569968818268, 0.9770838222378988, 0.1581289350710856, 0.13926611972030822, 0.18072375102195803, 0.15556978715431435, 0.12654405160249682, 0.11552823441420168, 0.15342488591650238, 0.16875005031151435, 0.17338102985733972, 0.28445793674543673, 0.1722464406336376, 0.4532185297037299, 0.31104645906940154, 0.21500684078518872, 0.18748340839360322, 0.12747653226392686, 0.2229398655993503, 0.18672105169740394, 0.09002824930056741, 0.07788803397799526, 0.10926385817245987, 0.1070725953663959, 0.110752234246138, 0.08768830180966292, 0.1148437874676852, 0.13207331427080626, 0.1515264179855227, 0.14943730109490083, 0.12342916297269535, 0.12211427384499618, 0.08744106951903285, 0.12939071543883363, 0.1300966190982188, 0.1188836106208575, 0.0951933708457271, 0.11808392795491451, 0.00939773940950872, 9.999999999998899e-05, 9.999999999998899e-05, 0.01981013395335196, 9.999999999998899e-05, 0.013183625102619057, 0.027871726714809086, 0.011680775330286663, 0.023139429803378686, 0.10708301493027705, 0.08183676738211487, 0.06842568771226365, 0.033149185864250086, 0.044490107242536436, 0.04809890479973433, 0.10857906747575308, 0.1152230867097962, 0.10620679318687765, 0.016414962318351933, 9.999999999998899e-05, 9.999999999998899e-05, 0.006117220442631743, 9.999999999998899e-05, 9.999999999998899e-05, 0.047300950896592586, 9.999999999998899e-05, 0.005087740311662259, 0.0560565820980381, 0.07162290728834686, 0.056207327304384824, 0.0038955805177008918, 0.0695477437452735, 0.06214657305385374, 0.07308930569119643, 0.06543681784125688, 0.06403423218169502, 0.3651387220786212, 0.3424514881207591, 0.36872679591563495, 0.3813954381211674, 0.3610056505589512, 0.3723660214486091, 0.338588792343394, 0.3524880826957577, 0.37376438177552573, 0.06674692174563313, 0.0639760287090343, 0.06889793876234107, 0.0654121360053439, 0.06939317849200322, 0.06566290821515974, 0.09412683178413206, 0.06671561149335992, 0.08782835265665312, 0.12127997495688525, 0.10864096480419516, 0.12659324038493192, 0.11966948515415154, 0.20865503421812115, 0.13200554419782073, 0.14846328049114166, 0.17748511169719972, 0.17860943491003545, 0.2540960721871961, 0.23472903263266465, 0.21984268210792035, 0.21367111452883825, 0.23330243560714958, 0.22673972895012595, 0.24125573436227365, 0.25615576647013627, 0.2536226984360167, 0.16579781478322697, 0.1767901948729368, 0.20567259235906798, 0.1771348326420502, 0.1608959311706467, 0.16816825573504102, 0.16129377063514316, 0.1583297388988254, 0.16841537424507336, 0.16929111276740727, 0.1778014514016446, 0.19152692682537664, 0.1852241363939423, 0.18060533858037275, 0.18995464519707472, 0.18464004003032164, 0.19340648653517567, 0.16729953553023302, 0.1677415425921991, 0.1789243528487896, 0.16587721435317615, 0.1910359337116051, 0.17212888524068493, 0.16842893676073345, 0.17667676082928796, 0.1772073534431753, 0.17426655022175253, 0.47109082837345306, 0.16560905304598295, 0.11448682382293429, 0.4294906354968816, 0.18372486104520358, 0.17580312272932663, 0.20574769070694743, 0.16092787167829814, 0.5905229753861594, 0.3962513812362699, 0.16641710418428934, 0.2001970982331005, 0.21462555970613406, 0.16634544370601212, 0.1875305415061992, 0.1960097548414339, 0.1963433541007623, 0.314204906567062, 0.16734672469506495, 0.15337981802460432, 0.1766777454204279, 0.17039449974965337, 0.18237933109704385, 0.1923767734544798, 0.15908007818895564, 0.16300308601947744, 0.19088247928746838, 0.06436930454921641, 0.057034958298153415, 0.06588236172746309, 0.07256532527245985, 0.0640814520766615, 0.05185100318201985, 0.06260689231346772, 0.049609131053675815, 0.07679876091680016]}, "mutation_prompt": null}
