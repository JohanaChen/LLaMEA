{"id": "c8bc3b5a-59b3-4455-9aff-8db0d5e38267", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def simulated_annealing(current, new, temp):\n            cost_diff = objective_function(new) - objective_function(current)\n            if cost_diff < 0 or np.random.rand() < np.exp(-cost_diff / temp):\n                return new\n            return current\n        \n        swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        gbest = pbest[np.argmin([objective_function(p) for p in pbest])]\n        best_cost = objective_function(gbest)\n        \n        temperature = 1.0\n        cooling_rate = 0.95\n        \n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_vel = 0.5 * velocities[i] + 2.0 * np.random.rand() * (pbest[i] - swarm[i]) + 2.0 * np.random.rand() * (gbest - swarm[i])\n                swarm[i] = swarm[i] + new_vel\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                pbest[i] = simulated_annealing(pbest[i], swarm[i], temperature)\n                \n                if objective_function(pbest[i]) < objective_function(gbest):\n                    gbest = pbest[i]\n            \n            temperature *= cooling_rate\n        \n        return gbest", "name": "PSO_SA_Optimizer", "description": "A Novel Metaheuristic Algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for Black Box Optimization", "configspace": "", "generation": 0, "fitness": 0.16334568909183048, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.29215611087266435, 0.4218498585611571, 0.5258407384435815, 0.44599673856984856, 0.21255920801382466, 0.3081479384320269, 0.5006030034948784, 0.47775137031911086, 0.23925832287535265, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034776054788659194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10253214976912917, 0.1043640691230987, 0.07702293187437592, 0.047619773444221414, 0.07874697352608251, 0.10723404829053196, 0.06822382257551907, 0.06825885765155248, 0.09829584777105449, 0.07655308566424956, 0.02697351855230956, 0.07286458555496778, 0.0949401187163279, 0.02211049468564963, 0.08274589233801377, 0.06324482751820304, 0.05990989394340629, 0.03423567298860308, 0.07490786488543144, 0.9936693649724041, 0.9907508307952534, 0.0998412642376314, 0.9782621914997858, 0.09959676895086123, 0.9945502859757216, 0.9905485855861548, 0.9906246141208881, 0.19682176077187108, 0.059135141363249155, 0.1141840142272289, 0.11110658459085443, 0.2025881107906785, 0.1663852424677601, 0.09850029254670878, 0.05547883940430143, 0.11972962577367985, 0.20686686874496918, 0.058602662592349586, 0.12008041701677685, 0.19280355875769928, 0.14901975978503101, 0.1381586008318485, 0.06947228296442554, 0.11420251322725417, 0.056588474012212675, 0.14905120768506408, 0.13470188932265392, 0.1141186377788852, 0.10521570365102417, 0.14810863422714027, 9.999999999998899e-05, 0.20943300083116045, 9.999999999998899e-05, 0.16292598774863598, 0.18185601916650596, 0.22099046930842947, 0.12694536777868015, 0.13931178125360288, 0.1325559303953704, 0.12367769722165578, 0.1447816739177462, 0.15519552236779688, 0.11861707123252141, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011677846877933273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0897519920815053, 0.03423334631626862, 0.07333159773537523, 0.06451546131664132, 0.08292830999611289, 0.02108976149508468, 0.13397757328491955, 0.05032226321819122, 0.03922922723008282, 9.999999999998899e-05, 0.1483487977678768, 9.999999999998899e-05, 0.23911951426287759, 9.999999999998899e-05, 9.999999999998899e-05, 0.1151532056454454, 9.999999999998899e-05, 0.06943550732679049, 0.20333384050799064, 0.07496623557880666, 0.15301925804210337, 0.016423595103801536, 0.12090542343548694, 0.08556097785424188, 0.04401136028237729, 0.05806114246671823, 0.06030985350323148, 0.34613283884291, 0.27118867020142734, 0.32873568824305266, 0.2523582462658218, 0.36907933421513295, 0.22738863563993705, 0.4853065996707431, 0.25924758401639125, 0.42487494301474493, 0.044393722978640304, 0.04852574647511643, 0.08397668336921738, 0.09717498833161298, 0.07345801536288632, 0.08478814900797338, 0.06063245538116402, 0.0626620579726086, 0.06887950646848928, 0.22763230422077163, 0.1310746622931811, 0.14762753811199403, 0.21780148958687173, 0.18719514286743866, 0.12486002685656417, 0.1732921148567138, 0.13177505900532527, 0.19198585095502718, 0.14729251701154045, 0.16585581300963692, 0.23294905480488726, 0.21494417106335284, 0.1870261062822155, 0.19835778400884008, 0.20043478532261083, 0.23969034179181958, 0.17111064602688808, 0.10780127398879902, 0.12111379112474896, 0.18677408225105008, 0.17003817623389628, 0.12073209222116366, 0.16048086559298447, 0.1309665926686453, 0.1573465301473601, 0.11649460513424204, 0.20415076332230453, 0.18017731395742953, 0.18009746898234857, 0.16102247043893003, 0.1593616164142666, 0.1713250970015604, 0.24614520763859027, 0.18677029787106025, 0.16401114380138437, 0.17967096276227634, 0.17180386153325033, 0.18891196562590495, 0.1850791281034443, 0.1598204891725874, 0.17057690092125177, 0.1894800308052037, 0.16700233985891588, 0.20224357014698036, 0.18677191249083502, 0.12643219209064427, 0.1274094665611325, 0.8172982384437895, 0.2004955241785047, 0.19950716206023966, 0.12069304100025624, 0.169422373097598, 0.41386889588004916, 0.36369737750062947, 0.148888473141071, 0.15543305308033162, 0.1038072889977879, 0.16378969316302538, 0.21033963332794225, 0.10497099261989173, 0.10330444319102994, 0.2084297516747271, 0.18251739276386392, 0.18114127659120804, 0.20360400404382029, 0.19997054256444402, 0.17014211413179714, 0.1947962740480309, 0.17632631940825017, 0.23642380929914408, 0.20388855197665123, 0.061470906714892415, 0.06832492184879324, 0.06919559245120932, 0.08375695780877468, 0.0993522313964138, 0.08277050115441087, 0.05293724444465009, 0.07154680781822753, 0.06561192555816664]}, "mutation_prompt": null}
{"id": "a4f72e2d-2436-4f65-9c66-28e1ac8e90a1", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        def simulated_annealing(current, new, temp):\n            cost_diff = objective_function(new) - objective_function(current)\n            if cost_diff < 0 or np.random.rand() < np.exp(-cost_diff / temp):\n                return new\n            return current\n        \n        swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        pbest = swarm.copy()\n        gbest = pbest[np.argmin([objective_function(p) for p in pbest])]\n        best_cost = objective_function(gbest)\n        \n        temperature = 1.0\n        cooling_rate = 0.95\n        \n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                new_vel = 0.5 * velocities[i] + 2.0 * np.random.rand() * (pbest[i] - swarm[i]) + 2.0 * np.random.rand() * (gbest - swarm[i])\n                swarm[i] = swarm[i] + new_vel\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                pbest[i] = simulated_annealing(pbest[i], swarm[i], temperature)\n                \n                if objective_function(pbest[i]) < objective_function(gbest):\n                    gbest = pbest[i]\n            \n            temperature *= cooling_rate\n        \n        return gbest", "name": "PSO_SA_Optimizer", "description": "A Novel Metaheuristic Algorithm combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) for Black Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c8bc3b5a-59b3-4455-9aff-8db0d5e38267", "metadata": {"aucs": [0.29215611087266435, 0.4218498585611571, 0.5258407384435815, 0.44599673856984856, 0.21255920801382466, 0.3081479384320269, 0.5006030034948784, 0.47775137031911086, 0.23925832287535265, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034776054788659194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10253214976912917, 0.1043640691230987, 0.07702293187437592, 0.047619773444221414, 0.07874697352608251, 0.10723404829053196, 0.06822382257551907, 0.06825885765155248, 0.09829584777105449, 0.07655308566424956, 0.02697351855230956, 0.07286458555496778, 0.0949401187163279, 0.02211049468564963, 0.08274589233801377, 0.06324482751820304, 0.05990989394340629, 0.03423567298860308, 0.07490786488543144, 0.9936693649724041, 0.9907508307952534, 0.0998412642376314, 0.9782621914997858, 0.09959676895086123, 0.9945502859757216, 0.9905485855861548, 0.9906246141208881, 0.19682176077187108, 0.059135141363249155, 0.1141840142272289, 0.11110658459085443, 0.2025881107906785, 0.1663852424677601, 0.09850029254670878, 0.05547883940430143, 0.11972962577367985, 0.20686686874496918, 0.058602662592349586, 0.12008041701677685, 0.19280355875769928, 0.14901975978503101, 0.1381586008318485, 0.06947228296442554, 0.11420251322725417, 0.056588474012212675, 0.14905120768506408, 0.13470188932265392, 0.1141186377788852, 0.10521570365102417, 0.14810863422714027, 9.999999999998899e-05, 0.20943300083116045, 9.999999999998899e-05, 0.16292598774863598, 0.18185601916650596, 0.22099046930842947, 0.12694536777868015, 0.13931178125360288, 0.1325559303953704, 0.12367769722165578, 0.1447816739177462, 0.15519552236779688, 0.11861707123252141, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011677846877933273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0897519920815053, 0.03423334631626862, 0.07333159773537523, 0.06451546131664132, 0.08292830999611289, 0.02108976149508468, 0.13397757328491955, 0.05032226321819122, 0.03922922723008282, 9.999999999998899e-05, 0.1483487977678768, 9.999999999998899e-05, 0.23911951426287759, 9.999999999998899e-05, 9.999999999998899e-05, 0.1151532056454454, 9.999999999998899e-05, 0.06943550732679049, 0.20333384050799064, 0.07496623557880666, 0.15301925804210337, 0.016423595103801536, 0.12090542343548694, 0.08556097785424188, 0.04401136028237729, 0.05806114246671823, 0.06030985350323148, 0.34613283884291, 0.27118867020142734, 0.32873568824305266, 0.2523582462658218, 0.36907933421513295, 0.22738863563993705, 0.4853065996707431, 0.25924758401639125, 0.42487494301474493, 0.044393722978640304, 0.04852574647511643, 0.08397668336921738, 0.09717498833161298, 0.07345801536288632, 0.08478814900797338, 0.06063245538116402, 0.0626620579726086, 0.06887950646848928, 0.22763230422077163, 0.1310746622931811, 0.14762753811199403, 0.21780148958687173, 0.18719514286743866, 0.12486002685656417, 0.1732921148567138, 0.13177505900532527, 0.19198585095502718, 0.14729251701154045, 0.16585581300963692, 0.23294905480488726, 0.21494417106335284, 0.1870261062822155, 0.19835778400884008, 0.20043478532261083, 0.23969034179181958, 0.17111064602688808, 0.10780127398879902, 0.12111379112474896, 0.18677408225105008, 0.17003817623389628, 0.12073209222116366, 0.16048086559298447, 0.1309665926686453, 0.1573465301473601, 0.11649460513424204, 0.20415076332230453, 0.18017731395742953, 0.18009746898234857, 0.16102247043893003, 0.1593616164142666, 0.1713250970015604, 0.24614520763859027, 0.18677029787106025, 0.16401114380138437, 0.17967096276227634, 0.17180386153325033, 0.18891196562590495, 0.1850791281034443, 0.1598204891725874, 0.17057690092125177, 0.1894800308052037, 0.16700233985891588, 0.20224357014698036, 0.18677191249083502, 0.12643219209064427, 0.1274094665611325, 0.8172982384437895, 0.2004955241785047, 0.19950716206023966, 0.12069304100025624, 0.169422373097598, 0.41386889588004916, 0.36369737750062947, 0.148888473141071, 0.15543305308033162, 0.1038072889977879, 0.16378969316302538, 0.21033963332794225, 0.10497099261989173, 0.10330444319102994, 0.2084297516747271, 0.18251739276386392, 0.18114127659120804, 0.20360400404382029, 0.19997054256444402, 0.17014211413179714, 0.1947962740480309, 0.17632631940825017, 0.23642380929914408, 0.20388855197665123, 0.061470906714892415, 0.06832492184879324, 0.06919559245120932, 0.08375695780877468, 0.0993522313964138, 0.08277050115441087, 0.05293724444465009, 0.07154680781822753, 0.06561192555816664]}, "mutation_prompt": null}
