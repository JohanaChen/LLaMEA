{"id": "f445c910-b502-411e-a9eb-b93f2889c6c2", "solution": "import numpy as np\n\nclass DE_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10  # Population size\n        self.F = 0.5  # Differential Evolution parameter\n        self.CR = 0.9  # Differential Evolution parameter\n        self.T_init = 1.0  # Initial temperature for Simulated Annealing\n        self.alpha = 0.9  # Cooling rate for Simulated Annealing\n\n    def __call__(self, func):\n        def mutate(x, pop):\n            indices = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[indices]\n            mutant = a + self.F * (b - c)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def simulated_annealing(curr, candidate, T):\n            delta_E = func(candidate) - func(curr)\n            if delta_E < 0 or np.random.rand() < np.exp(-delta_E / T):\n                return candidate\n            else:\n                return curr\n\n        def optimize():\n            population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            T = self.T_init\n            for _ in range(self.budget - self.pop_size):\n                new_population = []\n                for ind in population:\n                    candidate = mutate(ind, population)\n                    candidate = simulated_annealing(ind, candidate, T)\n                    new_population.append(candidate)\n                    if func(candidate) < func(best_solution):\n                        best_solution = candidate\n                population = np.array(new_population)\n                T *= self.alpha\n            return best_solution\n\n        return optimize()", "name": "DE_SA_Optimizer", "description": "Novel Metaheuristic Algorithm combining Differential Evolution and Simulated Annealing for Black Box Optimization", "configspace": "", "generation": 0, "fitness": 0.09836550923877792, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.11372684307771685, 0.22065622386770212, 0.36789517382218595, 0.06884054713052334, 0.12685116728349766, 0.15192168173755105, 0.12715932759149362, 0.11738452308253033, 0.14352502904219033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11928315491855723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08699973375133918, 0.07636174554260688, 0.02808833988600834, 0.058852142749887704, 0.059736100739566034, 0.0794975341656915, 0.06704391974569912, 0.07307658351374868, 0.0431165502810571, 0.06671637219638327, 0.06498323568254494, 0.07366281767278937, 0.06413960346235414, 0.014536465498709239, 0.04463928222791069, 0.08354952895161982, 0.039158390287419076, 9.999999999998899e-05, 0.0855222485695174, 0.0749792906646084, 0.0676485641977046, 0.07433282958187648, 0.07567289709011815, 0.0742965107645116, 0.07121225847176738, 0.06744058661972818, 0.055908028186918424, 0.11614967196575687, 0.10864658121254545, 0.09291557856878663, 0.03883857616035313, 0.05467505244146231, 9.999999999998899e-05, 0.08802252647439257, 0.11457170775405645, 0.03772666925918078, 0.204674110919012, 0.07885278853944133, 0.0756601156225204, 0.1100461939279096, 0.036259243952426745, 0.0345767002727595, 0.08597649172053534, 0.17136133232644046, 0.17668383392944975, 0.09581785057924685, 9.999999999998899e-05, 0.029916570898553263, 0.09596195967148236, 9.999999999998899e-05, 0.09962069709783705, 9.999999999998899e-05, 0.01868090245081333, 9.999999999998899e-05, 0.05336980282831083, 0.06320300426832692, 0.004981004439878367, 0.10562965220798703, 9.999999999998899e-05, 0.08585053973644885, 0.0975941206229487, 9.999999999998899e-05, 0.07971952452244169, 9.999999999998899e-05, 9.999999999998899e-05, 0.011595953155570937, 0.035174167299724335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05673552288564443, 0.10903749584965194, 0.09978933032627102, 0.083478397197147, 0.05225432781122685, 0.13801900317672022, 0.07235486694782434, 0.098157188269265, 0.022199324261338194, 0.12936676491836896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009472758203279197, 9.999999999998899e-05, 9.999999999998899e-05, 0.005332221580940821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19193379815330014, 0.18610077150719428, 0.22992250726333763, 0.1373377435107812, 0.14011672600534275, 0.11154532235765857, 0.18855975999245933, 0.25973671162297607, 0.3323204149661797, 0.043955099043714085, 0.08093717085969399, 0.05795400654857763, 0.05888468938935998, 0.07678826178371256, 0.06965795657180729, 0.05999692051625438, 0.08691637686544273, 0.08361335283015325, 0.1756810637838795, 0.1531452939980743, 0.15784691700653952, 0.17297725726307367, 0.13633727969065002, 0.11430434033763481, 0.21440924927448068, 0.1357669270210523, 0.18538639410601176, 0.22136310656304048, 0.20116088886787475, 0.1629059638478909, 0.16517367136982752, 0.1627412191316031, 0.13155688053559045, 0.23327616456132594, 0.1776295520929453, 0.1483002304246429, 0.11292526724129626, 0.1008836316459123, 0.19373785811030053, 0.12687149817421928, 0.1743923958437139, 0.1869069330734393, 0.13815685008342748, 0.16614626330490334, 0.09455339292417297, 0.2011634088245552, 0.16462860173291194, 0.15554682060099856, 0.1719156579143346, 0.16650530572349087, 0.17228988710555715, 0.18992124334438865, 0.17390066216157196, 0.16314756850353695, 0.14818981188614766, 0.19669130184324612, 0.15897876567322777, 0.17964570646030775, 0.18841637442524362, 0.18609872459296994, 0.17578491780313366, 0.051995980377615325, 9.999999999998899e-05, 0.14494073501103544, 0.165382247648464, 0.16532796053431809, 0.22664520974747815, 0.16746420132748374, 0.12288824918242647, 0.11999410984091097, 0.11715151333179041, 0.12458133274534233, 0.3836330205250347, 0.11545795644080281, 0.10627342775573068, 0.14798450859531198, 0.1507942254596446, 0.07455479887257044, 0.11139796576436478, 0.0921169636786997, 0.11019108362858443, 0.2358990461285343, 0.17653300080003864, 0.2109534323779042, 0.15896285995017168, 0.17179688404328664, 0.1666906524015983, 0.18215332164590103, 0.17582141714060784, 0.1903142749611617, 0.07109315269711569, 0.07061193981284664, 0.08093315441159943, 0.06476308971321632, 0.08557673028216617, 0.0904303340517485, 0.11696955251206165, 0.07128813648483301, 0.08247932872222996]}, "mutation_prompt": null}
{"id": "48891eee-4951-44d1-a12a-674e654070f2", "solution": "import numpy as np\n\nclass DE_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(10, dim*2)  # Adaptive population size based on dimensionality\n        self.F = 0.5  # Differential Evolution parameter\n        self.CR = 0.9  # Differential Evolution parameter\n        self.T_init = 1.0  # Initial temperature for Simulated Annealing\n        self.alpha = 0.9  # Cooling rate for Simulated Annealing\n\n    def __call__(self, func):\n        def mutate(x, pop):\n            indices = np.random.choice(len(pop), 3, replace=False)\n            a, b, c = pop[indices]\n            mutant = a + self.F * (b - c)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def simulated_annealing(curr, candidate, T):\n            delta_E = func(candidate) - func(curr)\n            if delta_E < 0 or np.random.rand() < np.exp(-delta_E / T):\n                return candidate\n            else:\n                return curr\n\n        def optimize():\n            population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n            best_solution = population[np.argmin([func(ind) for ind in population])]\n            T = self.T_init\n            for _ in range(self.budget - self.pop_size):\n                new_population = []\n                for ind in population:\n                    candidate = mutate(ind, population)\n                    candidate = simulated_annealing(ind, candidate, T)\n                    new_population.append(candidate)\n                    if func(candidate) < func(best_solution):\n                        best_solution = candidate\n                population = np.array(new_population)\n                T *= self.alpha\n            return best_solution\n\n        return optimize()", "name": "DE_SA_Optimizer", "description": "Improved DE_SA_Optimizer with adaptive population size based on function dimensionality", "configspace": "", "generation": 1, "fitness": 0.09836550923877792, "feedback": "", "error": "", "parent_id": "f445c910-b502-411e-a9eb-b93f2889c6c2", "metadata": {"aucs": [0.11372684307771685, 0.22065622386770212, 0.36789517382218595, 0.06884054713052334, 0.12685116728349766, 0.15192168173755105, 0.12715932759149362, 0.11738452308253033, 0.14352502904219033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11928315491855723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08699973375133918, 0.07636174554260688, 0.02808833988600834, 0.058852142749887704, 0.059736100739566034, 0.0794975341656915, 0.06704391974569912, 0.07307658351374868, 0.0431165502810571, 0.06671637219638327, 0.06498323568254494, 0.07366281767278937, 0.06413960346235414, 0.014536465498709239, 0.04463928222791069, 0.08354952895161982, 0.039158390287419076, 9.999999999998899e-05, 0.0855222485695174, 0.0749792906646084, 0.0676485641977046, 0.07433282958187648, 0.07567289709011815, 0.0742965107645116, 0.07121225847176738, 0.06744058661972818, 0.055908028186918424, 0.11614967196575687, 0.10864658121254545, 0.09291557856878663, 0.03883857616035313, 0.05467505244146231, 9.999999999998899e-05, 0.08802252647439257, 0.11457170775405645, 0.03772666925918078, 0.204674110919012, 0.07885278853944133, 0.0756601156225204, 0.1100461939279096, 0.036259243952426745, 0.0345767002727595, 0.08597649172053534, 0.17136133232644046, 0.17668383392944975, 0.09581785057924685, 9.999999999998899e-05, 0.029916570898553263, 0.09596195967148236, 9.999999999998899e-05, 0.09962069709783705, 9.999999999998899e-05, 0.01868090245081333, 9.999999999998899e-05, 0.05336980282831083, 0.06320300426832692, 0.004981004439878367, 0.10562965220798703, 9.999999999998899e-05, 0.08585053973644885, 0.0975941206229487, 9.999999999998899e-05, 0.07971952452244169, 9.999999999998899e-05, 9.999999999998899e-05, 0.011595953155570937, 0.035174167299724335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05673552288564443, 0.10903749584965194, 0.09978933032627102, 0.083478397197147, 0.05225432781122685, 0.13801900317672022, 0.07235486694782434, 0.098157188269265, 0.022199324261338194, 0.12936676491836896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009472758203279197, 9.999999999998899e-05, 9.999999999998899e-05, 0.005332221580940821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19193379815330014, 0.18610077150719428, 0.22992250726333763, 0.1373377435107812, 0.14011672600534275, 0.11154532235765857, 0.18855975999245933, 0.25973671162297607, 0.3323204149661797, 0.043955099043714085, 0.08093717085969399, 0.05795400654857763, 0.05888468938935998, 0.07678826178371256, 0.06965795657180729, 0.05999692051625438, 0.08691637686544273, 0.08361335283015325, 0.1756810637838795, 0.1531452939980743, 0.15784691700653952, 0.17297725726307367, 0.13633727969065002, 0.11430434033763481, 0.21440924927448068, 0.1357669270210523, 0.18538639410601176, 0.22136310656304048, 0.20116088886787475, 0.1629059638478909, 0.16517367136982752, 0.1627412191316031, 0.13155688053559045, 0.23327616456132594, 0.1776295520929453, 0.1483002304246429, 0.11292526724129626, 0.1008836316459123, 0.19373785811030053, 0.12687149817421928, 0.1743923958437139, 0.1869069330734393, 0.13815685008342748, 0.16614626330490334, 0.09455339292417297, 0.2011634088245552, 0.16462860173291194, 0.15554682060099856, 0.1719156579143346, 0.16650530572349087, 0.17228988710555715, 0.18992124334438865, 0.17390066216157196, 0.16314756850353695, 0.14818981188614766, 0.19669130184324612, 0.15897876567322777, 0.17964570646030775, 0.18841637442524362, 0.18609872459296994, 0.17578491780313366, 0.051995980377615325, 9.999999999998899e-05, 0.14494073501103544, 0.165382247648464, 0.16532796053431809, 0.22664520974747815, 0.16746420132748374, 0.12288824918242647, 0.11999410984091097, 0.11715151333179041, 0.12458133274534233, 0.3836330205250347, 0.11545795644080281, 0.10627342775573068, 0.14798450859531198, 0.1507942254596446, 0.07455479887257044, 0.11139796576436478, 0.0921169636786997, 0.11019108362858443, 0.2358990461285343, 0.17653300080003864, 0.2109534323779042, 0.15896285995017168, 0.17179688404328664, 0.1666906524015983, 0.18215332164590103, 0.17582141714060784, 0.1903142749611617, 0.07109315269711569, 0.07061193981284664, 0.08093315441159943, 0.06476308971321632, 0.08557673028216617, 0.0904303340517485, 0.11696955251206165, 0.07128813648483301, 0.08247932872222996]}, "mutation_prompt": null}
