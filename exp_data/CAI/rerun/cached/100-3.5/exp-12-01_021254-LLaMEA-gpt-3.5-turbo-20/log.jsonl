{"id": "baeea416-584a-4285-992b-dced57b9999a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, c1=2.0, c2=2.0, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def pso_update(particles, velocities, pbest_positions, gbest_position, c1, c2):\n            new_velocities = self.f * velocities + c1 * np.random.rand() * (pbest_positions - particles) + c2 * np.random.rand() * (gbest_position - particles)\n            return new_velocities\n\n        def de_update(population, f, cr):\n            mutant_population = population + f * (population[np.random.permutation(self.pop_size)] - population[np.random.permutation(self.pop_size)])\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < cr\n            trial_population = np.where(crossover_mask, mutant_population, population)\n            return trial_population\n\n        # Initialization\n        particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = particles.copy()\n        pbest_values = np.array([func(individual) for individual in particles])\n        gbest_index = np.argmin(pbest_values)\n        gbest_position = pbest_positions[gbest_index]\n        gbest_value = pbest_values[gbest_index]\n\n        # Optimization loop\n        for _ in range(self.budget):\n            new_velocities = pso_update(particles, velocities, pbest_positions, gbest_position, self.c1, self.c2)\n            new_particles = particles + new_velocities\n            new_particles = np.clip(new_particles, -5.0, 5.0)\n            new_values = np.array([func(individual) for individual in new_particles])\n\n            pbest_mask = new_values < pbest_values\n            pbest_positions[pbest_mask] = new_particles[pbest_mask]\n            pbest_values[pbest_mask] = new_values[pbest_mask]\n\n            gbest_index = np.argmin(pbest_values)\n            if pbest_values[gbest_index] < gbest_value:\n                gbest_position = pbest_positions[gbest_index]\n                gbest_value = pbest_values[gbest_index]\n\n            particles = de_update(particles, self.f, self.cr)\n\n        return gbest_value", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to efficiently explore and exploit the search space for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.10870225759524968, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.12443192732958763, 0.18027426901545607, 0.1914887182592081, 0.14997470295478543, 0.21006356878125765, 0.20146287821534825, 0.13258567350572925, 0.21336590572721637, 0.20304210490447783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02022032511782168, 0.028394179545039866, 0.0469456635685519, 0.010643411704069683, 0.057769981058521824, 0.055797190447400724, 0.024305522749625386, 0.07773726843147599, 0.0436737857226166, 9.999999999998899e-05, 0.01386873843016323, 0.013593743631345245, 0.01959972157639278, 0.04022584322331335, 0.026748669324547114, 9.999999999998899e-05, 0.0072638284465877945, 0.028143224512318765, 0.9923584210540953, 0.9970088218113294, 0.9909952024122917, 0.9829859622724104, 0.9927740304896928, 0.985188606447455, 0.9944564544506319, 0.991426548728323, 0.9905936576537151, 0.034928337795834485, 0.03346138640731622, 0.044705709131822924, 0.009891131415892596, 0.03615128381706423, 0.02107725577570385, 0.04591821434654664, 0.05695923103878053, 0.10828111093686443, 0.10027683525177622, 0.07466924423040966, 0.10278945257488137, 0.13518880161917168, 0.10839460246086441, 0.08199667846983916, 0.043344528023809836, 0.08768803783932022, 0.09693176947922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008987635216869738, 9.999999999998899e-05, 9.999999999998899e-05, 0.02098352036321871, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012964788474497446, 9.999999999998899e-05, 9.999999999998899e-05, 0.008232212039152031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1234615452255835, 0.21141047527104662, 0.19264949347132165, 0.164941154147759, 0.25006192586357023, 0.1800347995683329, 0.16112956940342849, 0.1998779338988591, 0.1798093453023628, 0.0284626570634251, 0.04100048143338286, 0.03904106936298268, 0.0063053856886248205, 0.03428312529947308, 0.025864641623607354, 0.013585339513746297, 0.03951686413695388, 0.04315766078690686, 0.11971643753231642, 0.12766426211830895, 0.13002282221715267, 0.10580331899680095, 0.14278413430561998, 0.10775034160498798, 0.13810422573300096, 0.0971037728915013, 0.093306704764469, 0.12180815442135007, 0.1723932741217441, 0.15268853512164737, 0.13800672315110074, 0.1447798249205201, 0.14636580706917046, 0.1266171351876425, 0.1779909969674116, 0.1583938394325869, 0.07493077230228806, 0.07580648588870897, 0.08880995539126557, 0.08612372999303719, 0.09793937982555467, 0.11162022997943477, 0.0837317855149382, 0.1410816109724079, 0.09734458356051112, 0.12685239065446463, 0.13912878261983896, 0.13477773200640475, 0.11832165226328539, 0.11952172564139962, 0.1598273021425537, 0.12245976138762271, 0.14767387162787293, 0.14030933446090998, 9.999999999998899e-05, 0.1381130808907679, 0.15861352082328162, 9.999999999998899e-05, 0.15564939484653006, 0.021948663442006522, 0.021500764813203177, 0.15434791075930132, 0.11856595464316833, 0.1261364496014623, 0.11236495000360192, 0.10116438237885073, 0.06718871428537254, 0.16842713739106507, 0.0963058319405462, 0.07697509702236804, 0.10391138017587132, 0.1286388511604395, 0.11040265245322212, 0.10051730792859848, 0.06257583072372852, 0.1629256969995173, 0.06916834056383936, 0.13330448680190443, 0.16824449352156046, 0.16778792767091055, 0.11255966228350955, 0.1530156515604646, 0.1476825142881315, 0.16403770609686452, 0.16708599963524262, 0.14994790576659323, 0.21090453623263072, 0.17648788993691233, 0.17236979603187286, 0.16042079987391866, 0.027843966442585022, 0.06805755117674395, 0.032502219367161356, 0.027381952589401903, 0.038180418072154665, 0.08605983593713751, 0.03536465681967094, 0.056477357208665535, 0.0468432183502957]}, "mutation_prompt": null}
{"id": "a53ab886-8655-4a1e-a13b-1d4eeaaac5c3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, c1=2.0, c2=2.0, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def pso_update(particles, velocities, pbest_positions, gbest_position, c1, c2):\n            new_velocities = self.f * velocities + c1 * np.random.rand() * (pbest_positions - particles) + c2 * np.random.rand() * (gbest_position - particles)\n            return new_velocities\n\n        def de_update(population, f, cr):\n            mutant_population = population + f * (population[np.random.permutation(self.pop_size)] - population[np.random.permutation(self.pop_size)])\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < cr\n            trial_population = np.where(crossover_mask, mutant_population, population)\n            return trial_population\n\n        # Initialization\n        particles = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = particles.copy()\n        pbest_values = np.array([func(individual) for individual in particles])\n        gbest_index = np.argmin(pbest_values)\n        gbest_position = pbest_positions[gbest_index]\n        gbest_value = pbest_values[gbest_index]\n\n        # Optimization loop\n        for _ in range(self.budget):\n            new_velocities = pso_update(particles, velocities, pbest_positions, gbest_position, self.c1, self.c2)\n            new_particles = particles + new_velocities\n            new_particles = np.clip(new_particles, -5.0, 5.0)\n            new_values = np.array([func(individual) for individual in new_particles])\n\n            pbest_mask = new_values < pbest_values\n            pbest_positions[pbest_mask] = new_particles[pbest_mask]\n            pbest_values[pbest_mask] = new_values[pbest_mask]\n\n            gbest_index = np.argmin(pbest_values)\n            if pbest_values[gbest_index] < gbest_value:\n                gbest_position = pbest_positions[gbest_index]\n                gbest_value = pbest_values[gbest_index]\n\n            particles = de_update(particles, self.f, self.cr)\n\n        return gbest_value", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to efficiently explore and exploit the search space for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baeea416-584a-4285-992b-dced57b9999a", "metadata": {"aucs": [0.12443192732958763, 0.18027426901545607, 0.1914887182592081, 0.14997470295478543, 0.21006356878125765, 0.20146287821534825, 0.13258567350572925, 0.21336590572721637, 0.20304210490447783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02022032511782168, 0.028394179545039866, 0.0469456635685519, 0.010643411704069683, 0.057769981058521824, 0.055797190447400724, 0.024305522749625386, 0.07773726843147599, 0.0436737857226166, 9.999999999998899e-05, 0.01386873843016323, 0.013593743631345245, 0.01959972157639278, 0.04022584322331335, 0.026748669324547114, 9.999999999998899e-05, 0.0072638284465877945, 0.028143224512318765, 0.9923584210540953, 0.9970088218113294, 0.9909952024122917, 0.9829859622724104, 0.9927740304896928, 0.985188606447455, 0.9944564544506319, 0.991426548728323, 0.9905936576537151, 0.034928337795834485, 0.03346138640731622, 0.044705709131822924, 0.009891131415892596, 0.03615128381706423, 0.02107725577570385, 0.04591821434654664, 0.05695923103878053, 0.10828111093686443, 0.10027683525177622, 0.07466924423040966, 0.10278945257488137, 0.13518880161917168, 0.10839460246086441, 0.08199667846983916, 0.043344528023809836, 0.08768803783932022, 0.09693176947922, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008987635216869738, 9.999999999998899e-05, 9.999999999998899e-05, 0.02098352036321871, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012964788474497446, 9.999999999998899e-05, 9.999999999998899e-05, 0.008232212039152031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1234615452255835, 0.21141047527104662, 0.19264949347132165, 0.164941154147759, 0.25006192586357023, 0.1800347995683329, 0.16112956940342849, 0.1998779338988591, 0.1798093453023628, 0.0284626570634251, 0.04100048143338286, 0.03904106936298268, 0.0063053856886248205, 0.03428312529947308, 0.025864641623607354, 0.013585339513746297, 0.03951686413695388, 0.04315766078690686, 0.11971643753231642, 0.12766426211830895, 0.13002282221715267, 0.10580331899680095, 0.14278413430561998, 0.10775034160498798, 0.13810422573300096, 0.0971037728915013, 0.093306704764469, 0.12180815442135007, 0.1723932741217441, 0.15268853512164737, 0.13800672315110074, 0.1447798249205201, 0.14636580706917046, 0.1266171351876425, 0.1779909969674116, 0.1583938394325869, 0.07493077230228806, 0.07580648588870897, 0.08880995539126557, 0.08612372999303719, 0.09793937982555467, 0.11162022997943477, 0.0837317855149382, 0.1410816109724079, 0.09734458356051112, 0.12685239065446463, 0.13912878261983896, 0.13477773200640475, 0.11832165226328539, 0.11952172564139962, 0.1598273021425537, 0.12245976138762271, 0.14767387162787293, 0.14030933446090998, 9.999999999998899e-05, 0.1381130808907679, 0.15861352082328162, 9.999999999998899e-05, 0.15564939484653006, 0.021948663442006522, 0.021500764813203177, 0.15434791075930132, 0.11856595464316833, 0.1261364496014623, 0.11236495000360192, 0.10116438237885073, 0.06718871428537254, 0.16842713739106507, 0.0963058319405462, 0.07697509702236804, 0.10391138017587132, 0.1286388511604395, 0.11040265245322212, 0.10051730792859848, 0.06257583072372852, 0.1629256969995173, 0.06916834056383936, 0.13330448680190443, 0.16824449352156046, 0.16778792767091055, 0.11255966228350955, 0.1530156515604646, 0.1476825142881315, 0.16403770609686452, 0.16708599963524262, 0.14994790576659323, 0.21090453623263072, 0.17648788993691233, 0.17236979603187286, 0.16042079987391866, 0.027843966442585022, 0.06805755117674395, 0.032502219367161356, 0.027381952589401903, 0.038180418072154665, 0.08605983593713751, 0.03536465681967094, 0.056477357208665535, 0.0468432183502957]}, "mutation_prompt": null}
