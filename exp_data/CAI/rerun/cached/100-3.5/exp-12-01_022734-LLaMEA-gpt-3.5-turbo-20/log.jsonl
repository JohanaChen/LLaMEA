{"id": "113d2616-097c-495e-a96a-c505474a4864", "solution": "import numpy as np\n\nclass NovelFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def levy_flight(beta=1.5):\n            sigma1 = (np.sqrt(np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (-1 / beta)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / (np.abs(v) ** (1 / beta))\n            return step\n\n        def init_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework, sparks_num):\n            sparks = np.zeros((sparks_num, self.dim))\n            for i in range(sparks_num):\n                sparks[i] = firework + levy_flight()\n            return sparks\n\n        population_size = 10\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_score = float('inf')\n\n        for _ in range(self.budget):\n            fireworks = [init_firework() for _ in range(population_size)]\n            for firework in fireworks:\n                sparks = explode(firework, population_size)\n                for spark in sparks:\n                    score = func(spark)\n                    if score < best_score:\n                        best_solution = spark\n                        best_score = score\n            population_size = int(1.1 * population_size)  # Dynamic population size\n\n        return best_solution", "name": "NovelFireworkAlgorithm", "description": "Novel Firework Algorithm (NFA) for black box optimization with dynamic population size and sparks generation strategy", "configspace": "", "generation": 0, "fitness": 0.0885384514388271, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.17090116036768055, 0.1647228354518091, 0.17601756142194935, 0.13560261928054884, 0.14169370699895356, 0.19197251439993102, 0.21151091975385816, 0.1733526530394276, 0.21304227995658775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04976012421562104, 0.06667080096410904, 0.047689783762027815, 0.03974546927341671, 0.027551209536272436, 0.04000726886454309, 0.03390526829287577, 0.04285954680613535, 0.045622442230245364, 0.0327818985093945, 0.028276487724650523, 0.028971510310202397, 0.031551980734386365, 0.030437071031931162, 0.03634722551331193, 0.07257413788369083, 0.043471422694944306, 0.025557963651173687, 0.1350742138147789, 0.10996098595033366, 0.1331766592092588, 0.09529732564397275, 0.1279485127663602, 0.22786794557030987, 0.12614634916383816, 0.1224040868695645, 0.11054228994568771, 0.10542959226171456, 0.06932816605276726, 0.05663168458217227, 0.07923252092593613, 0.0618270188618848, 0.06985202629797316, 0.06449401730741977, 0.08599931161190433, 0.08554956360113097, 0.10732422655248464, 0.11977387487015456, 0.10188916278946891, 0.12902506334554542, 0.1080942603655416, 0.11716634757841604, 0.0965230995297075, 0.10067314107438052, 0.10275814378121118, 0.01474804582155409, 0.013266563286819633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01766505632329385, 0.009177908555973446, 9.999999999998899e-05, 9.999999999998899e-05, 0.0046088237011175925, 9.999999999998899e-05, 0.007496242437517342, 0.00021313132663636214, 0.002112818056232979, 0.043570610792321496, 0.004086568817983416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06426607487853564, 0.046207599179090675, 0.05719695683428727, 0.03894785178720617, 0.05549800423660067, 0.028935530415289956, 0.022672682604704786, 0.090603585765056, 0.06452137040473227, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1750055584108895, 0.1815587163029403, 0.19380358766645223, 0.17011900053454776, 0.19530080464051147, 0.17699664147973304, 0.19775311516160732, 0.18064775929067567, 0.2244249991330346, 0.035257824561250706, 0.03850740123758678, 0.03137598889463822, 0.045718891146030005, 0.04003890582857639, 0.04317856065090164, 0.03442884834523008, 0.037273193775054114, 0.05715349322099916, 0.12754821038512543, 0.12713248640037123, 0.13565368604808703, 0.1235805920514842, 0.1608094225858746, 0.1344069994364958, 0.11824531759920376, 0.12950165406374692, 0.11574797711428242, 0.16442117474107476, 0.14840267286356668, 0.149740349638812, 0.16725823157697983, 0.16579502950306724, 0.1778324686032493, 0.15606174098163306, 0.16915121350429052, 0.1812431293886998, 0.10031712869666187, 0.09337392659320742, 0.0849866726252747, 0.10702308169093144, 0.10981297887048691, 0.1090027966946493, 0.10075386245316131, 0.11176136671572767, 0.12316110114910628, 0.1442768238404305, 0.14354351921975483, 0.14573395253696908, 0.14976442039743998, 0.15215893842138428, 0.14389474728162677, 0.1578435142136605, 0.14580252637439117, 0.21045409383500335, 0.1434031161539775, 0.145805181324409, 0.12596303520089336, 0.1207534171042558, 0.13539894191540602, 0.14489189819914716, 0.14257669940963846, 0.14367773956634722, 0.14270419755586938, 0.14683303752992738, 0.1267974508253814, 0.1579302142180019, 0.14966212073476037, 0.1621816010950703, 0.2092708874737489, 0.15868613264095288, 0.1653665526864352, 0.13950663065398916, 0.1786306470189738, 0.17347050168843903, 0.19685493943775767, 0.16151622394562015, 0.21861019596701003, 0.15618513348712781, 0.14244539837834058, 0.16511140617861164, 0.1645352132598631, 0.18681455210682996, 0.1712191627076607, 0.16625360324200844, 0.16821219810075871, 0.18520646161421406, 0.19872885192060963, 0.173654777970768, 0.19291465045182854, 0.1761922887377101, 0.05078460060953416, 0.055429791245171556, 0.04922114101460051, 0.06308694490244648, 0.04919718161555797, 0.05503711998999694, 0.048414324209289594, 0.06610837218741095, 0.06153699791518086]}, "mutation_prompt": null}
{"id": "00b2365b-8ed3-4063-b70f-17c528a496bc", "solution": "import numpy as np\n\nclass NovelFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def levy_flight(beta=1.5):\n            sigma1 = (np.sqrt(np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (-1 / beta)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / (np.abs(v) ** (1 / beta))\n            return step\n\n        def init_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def explode(firework, sparks_num):\n            sparks = np.zeros((sparks_num, self.dim))\n            for i in range(sparks_num):\n                sparks[i] = firework + levy_flight()\n            return sparks\n\n        population_size = 10\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_score = float('inf')\n\n        for _ in range(self.budget):\n            fireworks = [init_firework() for _ in range(population_size)]\n            for firework in fireworks:\n                sparks = explode(firework, population_size)\n                for spark in sparks:\n                    score = func(spark)\n                    if score < best_score:\n                        best_solution = spark\n                        best_score = score\n            population_size = int(1.1 * population_size)  # Dynamic population size\n\n        return best_solution", "name": "NovelFireworkAlgorithm", "description": "Novel Firework Algorithm (NFA) for black box optimization with dynamic population size and sparks generation strategy", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "113d2616-097c-495e-a96a-c505474a4864", "metadata": {"aucs": [0.17090116036768055, 0.1647228354518091, 0.17601756142194935, 0.13560261928054884, 0.14169370699895356, 0.19197251439993102, 0.21151091975385816, 0.1733526530394276, 0.21304227995658775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04976012421562104, 0.06667080096410904, 0.047689783762027815, 0.03974546927341671, 0.027551209536272436, 0.04000726886454309, 0.03390526829287577, 0.04285954680613535, 0.045622442230245364, 0.0327818985093945, 0.028276487724650523, 0.028971510310202397, 0.031551980734386365, 0.030437071031931162, 0.03634722551331193, 0.07257413788369083, 0.043471422694944306, 0.025557963651173687, 0.1350742138147789, 0.10996098595033366, 0.1331766592092588, 0.09529732564397275, 0.1279485127663602, 0.22786794557030987, 0.12614634916383816, 0.1224040868695645, 0.11054228994568771, 0.10542959226171456, 0.06932816605276726, 0.05663168458217227, 0.07923252092593613, 0.0618270188618848, 0.06985202629797316, 0.06449401730741977, 0.08599931161190433, 0.08554956360113097, 0.10732422655248464, 0.11977387487015456, 0.10188916278946891, 0.12902506334554542, 0.1080942603655416, 0.11716634757841604, 0.0965230995297075, 0.10067314107438052, 0.10275814378121118, 0.01474804582155409, 0.013266563286819633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01766505632329385, 0.009177908555973446, 9.999999999998899e-05, 9.999999999998899e-05, 0.0046088237011175925, 9.999999999998899e-05, 0.007496242437517342, 0.00021313132663636214, 0.002112818056232979, 0.043570610792321496, 0.004086568817983416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06426607487853564, 0.046207599179090675, 0.05719695683428727, 0.03894785178720617, 0.05549800423660067, 0.028935530415289956, 0.022672682604704786, 0.090603585765056, 0.06452137040473227, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1750055584108895, 0.1815587163029403, 0.19380358766645223, 0.17011900053454776, 0.19530080464051147, 0.17699664147973304, 0.19775311516160732, 0.18064775929067567, 0.2244249991330346, 0.035257824561250706, 0.03850740123758678, 0.03137598889463822, 0.045718891146030005, 0.04003890582857639, 0.04317856065090164, 0.03442884834523008, 0.037273193775054114, 0.05715349322099916, 0.12754821038512543, 0.12713248640037123, 0.13565368604808703, 0.1235805920514842, 0.1608094225858746, 0.1344069994364958, 0.11824531759920376, 0.12950165406374692, 0.11574797711428242, 0.16442117474107476, 0.14840267286356668, 0.149740349638812, 0.16725823157697983, 0.16579502950306724, 0.1778324686032493, 0.15606174098163306, 0.16915121350429052, 0.1812431293886998, 0.10031712869666187, 0.09337392659320742, 0.0849866726252747, 0.10702308169093144, 0.10981297887048691, 0.1090027966946493, 0.10075386245316131, 0.11176136671572767, 0.12316110114910628, 0.1442768238404305, 0.14354351921975483, 0.14573395253696908, 0.14976442039743998, 0.15215893842138428, 0.14389474728162677, 0.1578435142136605, 0.14580252637439117, 0.21045409383500335, 0.1434031161539775, 0.145805181324409, 0.12596303520089336, 0.1207534171042558, 0.13539894191540602, 0.14489189819914716, 0.14257669940963846, 0.14367773956634722, 0.14270419755586938, 0.14683303752992738, 0.1267974508253814, 0.1579302142180019, 0.14966212073476037, 0.1621816010950703, 0.2092708874737489, 0.15868613264095288, 0.1653665526864352, 0.13950663065398916, 0.1786306470189738, 0.17347050168843903, 0.19685493943775767, 0.16151622394562015, 0.21861019596701003, 0.15618513348712781, 0.14244539837834058, 0.16511140617861164, 0.1645352132598631, 0.18681455210682996, 0.1712191627076607, 0.16625360324200844, 0.16821219810075871, 0.18520646161421406, 0.19872885192060963, 0.173654777970768, 0.19291465045182854, 0.1761922887377101, 0.05078460060953416, 0.055429791245171556, 0.04922114101460051, 0.06308694490244648, 0.04919718161555797, 0.05503711998999694, 0.048414324209289594, 0.06610837218741095, 0.06153699791518086]}, "mutation_prompt": null}
