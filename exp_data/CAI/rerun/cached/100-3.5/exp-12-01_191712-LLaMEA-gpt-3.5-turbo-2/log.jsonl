{"id": "bd863a2b-118b-4e15-9525-4bcedfeaf216", "solution": "import numpy as np\n\nclass GA_AMR:\n    def __init__(self, budget, dim, pop_size=50, mutation_prob=0.01, elite_ratio=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.mutation_prob = mutation_prob\n        self.elite_ratio = elite_ratio\n\n    def __call__(self, func):\n        def mutate(parent, std_dev):\n            return np.clip(parent + std_dev * np.random.randn(self.dim), -5.0, 5.0)\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate(population)\n        elite_count = int(self.pop_size * self.elite_ratio)\n        std_dev = 0.1\n\n        for _ in range(self.budget):\n            elite_idx = np.argsort(fitness)[:elite_count]\n            elite_pop = population[elite_idx]\n\n            offspring = [mutate(parent, std_dev) for parent in elite_pop]\n            offspring_fitness = evaluate(offspring)\n\n            population = np.vstack((population, offspring))\n            fitness = np.concatenate((fitness, offspring_fitness))\n\n            sorted_idx = np.argsort(fitness)\n            population = population[sorted_idx[:self.pop_size]]\n            fitness = fitness[sorted_idx[:self.pop_size]]\n\n            diversity = np.mean(np.std(population, axis=0))\n            std_dev = std_dev * (1 + 0.01 * (diversity - 0.5))\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        return best_solution, best_fitness", "name": "GA_AMR", "description": "Genetic Algorithm with Adaptive Mutation Rate (GA-AMR): A novel genetic algorithm that adapts the mutation rate during optimization based on the population diversity to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.23184094918319187, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7912194492358962, 0.7791261999969568, 0.7848145523655201, 0.7778798550618684, 0.7769338819101518, 0.7926251261920593, 0.7863411073571782, 0.7848258108209536, 0.785004531493571, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06262608217476151, 0.050307462616273724, 0.040448160772386665, 0.02284394076616536, 0.018038188547668144, 0.0660827578132146, 0.041538762765063075, 0.10309739406001939, 0.11352666295069358, 0.03682550081229896, 0.012854714804426126, 0.022768469373978917, 0.08702109197800323, 0.017305698647707368, 0.021245761634086202, 0.04401284785082493, 0.022707019021915187, 0.018034191246748543, 0.8655527539281473, 0.10757833533371597, 0.9202239533220293, 0.12897961898642574, 0.1525363039595159, 0.15433939489965665, 0.887782413213862, 0.18781571434401945, 0.896316600408962, 0.6556110886698909, 0.6341057845605627, 0.5944171206509197, 0.6438028127938509, 0.6350624830194654, 0.6260449281223671, 0.6392820168264147, 0.6340605959726686, 0.6443259929315588, 0.18633487271818738, 0.23224045109021008, 0.12110769060431326, 0.2855929867655247, 0.22128147377719343, 0.21063223564188216, 0.13037166646377774, 0.13159567139360784, 0.22753689012533018, 0.2789142395834139, 0.13406930979423703, 0.2153279151504014, 0.002020408077806457, 0.24575279880427592, 0.22341122289560333, 0.2408453074165181, 0.35383551603416796, 0.244384031245789, 0.23597474043755495, 0.1322562800197704, 0.2002177583296869, 0.22859209402859448, 0.21874495206202793, 0.24226417875035755, 0.23794627601416818, 0.2639472518177628, 0.07839422836209398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057164667359889565, 0.016269574420436084, 9.999999999998899e-05, 0.009474168506474201, 9.999999999998899e-05, 0.012861053012551582, 0.07206914595964975, 0.06489963920576647, 0.07487178029403929, 0.07906251659098784, 0.005675631931603697, 0.003823788855074284, 0.04261734821835528, 0.06366100498774507, 0.0338716829109188, 0.10439980161473572, 0.06851613312130667, 0.10901639045900124, 0.10254419052604902, 0.08669923649525668, 0.07696297121191276, 0.16765806591911236, 0.16001016945509894, 0.13150646020457402, 0.3004534558047769, 0.0717474142703537, 0.18850149015548845, 0.10865314943257376, 0.21604525364755667, 0.11773914459727419, 0.23141466984946124, 0.23468643719815818, 0.11537897212568837, 0.6390235559478963, 0.6123587512224845, 0.5905013363713321, 0.6104435819659151, 0.5578800268950166, 0.5767027850628814, 0.619286689348424, 0.6277670067766722, 0.5725613369582383, 0.06500711201006637, 0.024229081232260974, 0.05342229319242342, 0.06731254619569171, 0.03532559665830981, 0.09453418279016257, 0.027454888723889792, 0.08884032833728706, 0.07152567728080461, 0.231253305929761, 0.5919125830527805, 0.2350586772454586, 0.6034695769399987, 0.624319393256202, 0.651564887913852, 0.6371187818535238, 0.14383722076149186, 0.23566197283574386, 0.11488053540380783, 0.12893762683210863, 0.21401474425087863, 0.20373463642819944, 0.13141074871576874, 0.15599215642990116, 0.21418987184583327, 0.48651291832725474, 0.15513056031522898, 0.06962374805025484, 0.3883233381299326, 0.4324417102326643, 0.17991383953595197, 0.07769200042275459, 0.26341545253133214, 0.18444468448529028, 0.3744276131620311, 0.16853150769657244, 0.2043616249113528, 0.1987214702983241, 0.19827440334601332, 0.24143470853653093, 0.15639778029191553, 0.1997204402017253, 0.22824345992589856, 0.1625322987815544, 0.2007127539927167, 0.17647998826179156, 0.1900641543876006, 0.19108148615613507, 0.2141380373899019, 0.25396086359194436, 0.21050887571513333, 0.18475337800347247, 0.22655470697862734, 0.18863669956695817, 0.12295389396774281, 0.1274101816922465, 0.1547904159963973, 0.17287125877813014, 0.20227838770266549, 0.20154087474073212, 0.14347636828420052, 0.1642013102016836, 0.21264775814277503, 0.9231579547213847, 0.21412909366690114, 0.07363332327394512, 0.1051577535234628, 0.16838099429990894, 0.15573162214625058, 0.1051240305736586, 0.10517852998939359, 0.4517084887571876, 0.1870438712082676, 0.16713015547310806, 0.18047466020416536, 0.20485675511651957, 0.199185092658131, 0.17721710605357943, 0.18775378907724372, 0.17395337058621485, 0.19131650996842897, 0.06386752587591016, 0.08746330340023956, 0.06832074955933609, 0.06381553823384378, 0.07368528134016106, 0.06996743961506291, 0.04563512024998595, 0.07948220798035122, 0.07239531665775378]}, "mutation_prompt": null}
{"id": "f69d36c2-8dbc-47eb-adea-8d84f9b4043b", "solution": "import numpy as np\n\nclass GA_AMR:\n    def __init__(self, budget, dim, pop_size=50, mutation_prob=0.01, elite_ratio=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.mutation_prob = mutation_prob\n        self.elite_ratio = elite_ratio\n\n    def __call__(self, func):\n        def mutate(parent, std_dev):\n            return np.clip(parent + std_dev * np.random.randn(self.dim), -5.0, 5.0)\n\n        def evaluate(population):\n            return np.array([func(ind) for ind in population])\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate(population)\n        elite_count = int(self.pop_size * self.elite_ratio)\n        std_dev = 0.1\n\n        for _ in range(self.budget):\n            elite_idx = np.argsort(fitness)[:elite_count]\n            elite_pop = population[elite_idx]\n\n            offspring = [mutate(parent, std_dev) for parent in elite_pop]\n            offspring_fitness = evaluate(offspring)\n\n            population = np.vstack((population, offspring))\n            fitness = np.concatenate((fitness, offspring_fitness))\n\n            sorted_idx = np.argsort(fitness)\n            population = population[sorted_idx[:self.pop_size]]\n            fitness = fitness[sorted_idx[:self.pop_size]]\n\n            diversity = np.mean(np.std(population, axis=0))\n            std_dev = std_dev * (1 + 0.01 * (diversity - 0.5))\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        return best_solution, best_fitness", "name": "GA_AMR", "description": "Genetic Algorithm with Adaptive Mutation Rate (GA-AMR): A novel genetic algorithm that adapts the mutation rate during optimization based on the population diversity to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bd863a2b-118b-4e15-9525-4bcedfeaf216", "metadata": {"aucs": [0.7912194492358962, 0.7791261999969568, 0.7848145523655201, 0.7778798550618684, 0.7769338819101518, 0.7926251261920593, 0.7863411073571782, 0.7848258108209536, 0.785004531493571, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06262608217476151, 0.050307462616273724, 0.040448160772386665, 0.02284394076616536, 0.018038188547668144, 0.0660827578132146, 0.041538762765063075, 0.10309739406001939, 0.11352666295069358, 0.03682550081229896, 0.012854714804426126, 0.022768469373978917, 0.08702109197800323, 0.017305698647707368, 0.021245761634086202, 0.04401284785082493, 0.022707019021915187, 0.018034191246748543, 0.8655527539281473, 0.10757833533371597, 0.9202239533220293, 0.12897961898642574, 0.1525363039595159, 0.15433939489965665, 0.887782413213862, 0.18781571434401945, 0.896316600408962, 0.6556110886698909, 0.6341057845605627, 0.5944171206509197, 0.6438028127938509, 0.6350624830194654, 0.6260449281223671, 0.6392820168264147, 0.6340605959726686, 0.6443259929315588, 0.18633487271818738, 0.23224045109021008, 0.12110769060431326, 0.2855929867655247, 0.22128147377719343, 0.21063223564188216, 0.13037166646377774, 0.13159567139360784, 0.22753689012533018, 0.2789142395834139, 0.13406930979423703, 0.2153279151504014, 0.002020408077806457, 0.24575279880427592, 0.22341122289560333, 0.2408453074165181, 0.35383551603416796, 0.244384031245789, 0.23597474043755495, 0.1322562800197704, 0.2002177583296869, 0.22859209402859448, 0.21874495206202793, 0.24226417875035755, 0.23794627601416818, 0.2639472518177628, 0.07839422836209398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057164667359889565, 0.016269574420436084, 9.999999999998899e-05, 0.009474168506474201, 9.999999999998899e-05, 0.012861053012551582, 0.07206914595964975, 0.06489963920576647, 0.07487178029403929, 0.07906251659098784, 0.005675631931603697, 0.003823788855074284, 0.04261734821835528, 0.06366100498774507, 0.0338716829109188, 0.10439980161473572, 0.06851613312130667, 0.10901639045900124, 0.10254419052604902, 0.08669923649525668, 0.07696297121191276, 0.16765806591911236, 0.16001016945509894, 0.13150646020457402, 0.3004534558047769, 0.0717474142703537, 0.18850149015548845, 0.10865314943257376, 0.21604525364755667, 0.11773914459727419, 0.23141466984946124, 0.23468643719815818, 0.11537897212568837, 0.6390235559478963, 0.6123587512224845, 0.5905013363713321, 0.6104435819659151, 0.5578800268950166, 0.5767027850628814, 0.619286689348424, 0.6277670067766722, 0.5725613369582383, 0.06500711201006637, 0.024229081232260974, 0.05342229319242342, 0.06731254619569171, 0.03532559665830981, 0.09453418279016257, 0.027454888723889792, 0.08884032833728706, 0.07152567728080461, 0.231253305929761, 0.5919125830527805, 0.2350586772454586, 0.6034695769399987, 0.624319393256202, 0.651564887913852, 0.6371187818535238, 0.14383722076149186, 0.23566197283574386, 0.11488053540380783, 0.12893762683210863, 0.21401474425087863, 0.20373463642819944, 0.13141074871576874, 0.15599215642990116, 0.21418987184583327, 0.48651291832725474, 0.15513056031522898, 0.06962374805025484, 0.3883233381299326, 0.4324417102326643, 0.17991383953595197, 0.07769200042275459, 0.26341545253133214, 0.18444468448529028, 0.3744276131620311, 0.16853150769657244, 0.2043616249113528, 0.1987214702983241, 0.19827440334601332, 0.24143470853653093, 0.15639778029191553, 0.1997204402017253, 0.22824345992589856, 0.1625322987815544, 0.2007127539927167, 0.17647998826179156, 0.1900641543876006, 0.19108148615613507, 0.2141380373899019, 0.25396086359194436, 0.21050887571513333, 0.18475337800347247, 0.22655470697862734, 0.18863669956695817, 0.12295389396774281, 0.1274101816922465, 0.1547904159963973, 0.17287125877813014, 0.20227838770266549, 0.20154087474073212, 0.14347636828420052, 0.1642013102016836, 0.21264775814277503, 0.9231579547213847, 0.21412909366690114, 0.07363332327394512, 0.1051577535234628, 0.16838099429990894, 0.15573162214625058, 0.1051240305736586, 0.10517852998939359, 0.4517084887571876, 0.1870438712082676, 0.16713015547310806, 0.18047466020416536, 0.20485675511651957, 0.199185092658131, 0.17721710605357943, 0.18775378907724372, 0.17395337058621485, 0.19131650996842897, 0.06386752587591016, 0.08746330340023956, 0.06832074955933609, 0.06381553823384378, 0.07368528134016106, 0.06996743961506291, 0.04563512024998595, 0.07948220798035122, 0.07239531665775378]}, "mutation_prompt": null}
