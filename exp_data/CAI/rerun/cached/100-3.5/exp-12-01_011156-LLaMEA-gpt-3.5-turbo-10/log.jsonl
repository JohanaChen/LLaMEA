{"id": "d7763fa4-5920-46f7-9fb2-9886b470ffec", "solution": "import numpy as np\n\nclass DynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        def update_velocity_position(particles, global_best):\n            inertia_weight = 0.5 + 0.3 * np.cos(2 * np.pi * t / self.budget)  # Dynamic Inertia Weight\n            phi_p = 2.05\n            phi_g = 2.05\n            for particle in particles:\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1, size=self.dim)\n                particle.velocity = (inertia_weight * particle.velocity \n                                     + phi_p * r_p * (particle.best_position - particle.position) \n                                     + phi_g * r_g * (global_best - particle.position))\n                particle.position = particle.position + particle.velocity\n                particle.position = np.clip(particle.position, -5.0, 5.0)\n                particle.fitness = func(particle.position)\n                if particle.fitness < particle.best_fitness:\n                    particle.best_fitness = particle.fitness\n                    particle.best_position = np.copy(particle.position)\n            return particles\n\n        class Particle:\n            def __init__(self, dim):\n                self.position = np.random.uniform(-5.0, 5.0, size=dim)\n                self.velocity = np.zeros(dim)\n                self.fitness = func(self.position)\n                self.best_position = np.copy(self.position)\n                self.best_fitness = self.fitness\n\n        particles = [Particle(self.dim) for _ in range(30)]\n        global_best = min(particles, key=lambda x: x.fitness).best_position\n        for t in range(self.budget):\n            particles = update_velocity_position(particles, global_best)\n            global_best = min(particles, key=lambda x: x.fitness).best_position\n        return global_best", "name": "DynamicPSO", "description": "Particle Swarm Optimization (PSO) with Dynamic Inertia Weight and Constriction Coefficients to balance exploration and exploitation in the search space.", "configspace": "", "generation": 0, "fitness": 0.14167732497875127, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.2187776809349813, 0.21034920905417187, 0.2165888747672513, 0.28403906607692175, 0.22886848659777392, 0.2856052435629237, 0.2570160441144449, 0.2776239224306948, 0.28911374675479895, 9.999999999998899e-05, 0.01473180250520112, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009545416949711116, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028593431044396933, 0.00023108865122922762, 0.06269471443140351, 0.06311982149665385, 0.051565457847474905, 0.05201709265766019, 0.0606309325831591, 0.06060297768415479, 0.07684141057727378, 0.04938560498154998, 0.06712168738926261, 0.03961496968668121, 0.03843253607398345, 0.03146485865212001, 0.05939242541874412, 0.05895963558768258, 0.0439477545980691, 0.04725224919904025, 0.04297979348202918, 0.05212322248648393, 0.9911424890119549, 0.9935654066257859, 0.9941919924668916, 0.9902876636870357, 0.9892073561824248, 0.986882420604866, 0.9913063138683065, 0.9918917598788916, 0.9919449471777421, 0.11082190029021499, 0.09848545776150675, 0.05760493246852716, 0.12583109368239453, 0.11861704775039217, 0.11368634308981418, 0.0971125761819216, 0.09863371654169328, 0.07428790625813597, 0.13876968312835747, 0.13447514542779737, 0.1553912117712909, 0.1785230568131173, 0.15614313982545847, 0.1570730610105644, 0.1542414786399129, 0.1346432186265656, 0.15124432753840156, 0.023878815514508656, 0.011820679320989402, 0.028447996518384033, 0.05298552556667424, 0.03716033000609864, 0.06504364337582735, 0.02980931182653279, 0.018000534694803005, 0.0885708835240635, 0.04237562071749712, 0.016510804458980455, 0.015290383114773376, 9.999999999998899e-05, 0.023235052295244918, 0.03222804161453641, 9.999999999998899e-05, 0.017570229710382357, 0.017475639882346683, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010802926824549086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03292512887691956, 0.0285404244861458, 0.03836002820763518, 0.048442704274654136, 9.999999999998899e-05, 0.011111696810272353, 0.032514407677587065, 0.011855122249822436, 0.05395566597075507, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0089364878615803, 0.008533987526223807, 0.004216104348260141, 0.00019628594050313808, 0.024331651137376453, 0.00510680693744292, 0.04246935412895603, 9.999999999998899e-05, 0.0268308592528691, 0.2467186567612243, 0.32262382210953455, 0.2572214623824117, 0.2685946048914897, 0.236345090255909, 0.19874737545944732, 0.28207743623265247, 0.19526739223274947, 0.20985213060142371, 0.05672896077454537, 0.06515215131168084, 0.04304269168978159, 0.06080623821274822, 0.054855549497004774, 0.049847864848622025, 0.052452648359060716, 0.048746041074334556, 0.10057065092427475, 0.14180923990989036, 0.2128579377350065, 0.13646476225445536, 0.20302935689717883, 0.13855663931990403, 0.13789037336830423, 0.17701180707662967, 0.14678028515396202, 0.18239842346959378, 0.16667261367181652, 0.17242830310379864, 0.18575243247467887, 0.1699482036540254, 0.1663581748108841, 0.17001128824422718, 0.18867427111780555, 0.22357343694534504, 0.18928946635719635, 0.14543922839382173, 0.12350447545305632, 0.12246267593946192, 0.11951386573032119, 0.1139179370843858, 0.14440754974041414, 0.13839999294241967, 0.14590620881463967, 0.1371550504642184, 0.15774283650641574, 0.1357624911255645, 0.16938695965567951, 0.14718036193922435, 0.15715017273733778, 0.17405564976591814, 0.1560040886546742, 0.15997986128335429, 0.15809566550490894, 0.15660941512892768, 0.1494832820811951, 0.17203582375731663, 0.15744965017792656, 0.1563163747632923, 0.1513456084004512, 0.1561712955403537, 0.15639144474022015, 0.15427229520577113, 0.34186348109923204, 0.1652607106109173, 0.13039595262385395, 0.1753913130844288, 0.17108603412524337, 0.16563049153957143, 0.09847745695063403, 0.1640167867336304, 0.15936675713450932, 0.21614426274324094, 0.1589106384884128, 0.1499826741212379, 0.14829107937149222, 0.21739007741376204, 0.155001627834489, 0.1964159130353581, 0.19907677854486527, 0.20165120506475365, 0.19974661867574572, 0.19869616577846294, 0.1764609226294782, 0.17233486941935172, 0.16982153075778583, 0.1759043415655871, 0.1727444887154881, 0.17299754917156007, 0.183116362765413, 0.07063466708574795, 0.04401352841995376, 0.06360620057723387, 0.06678799750151865, 0.0638191140563511, 0.0660660104354891, 0.0791966694954015, 0.054309355450447905, 0.060044439184668175]}, "mutation_prompt": null}
{"id": "35af4241-acd8-4ce1-8807-0f0f7283f0fe", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        def update_velocity_position(particles, global_best):\n            inertia_weight = 0.5 + 0.3 * np.cos(2 * np.pi * t / self.budget)  # Dynamic Inertia Weight\n            phi_p = 2.05\n            phi_g = 2.05\n            for particle in particles:\n                r_p = np.random.uniform(0, 1, size=self.dim)\n                r_g = np.random.uniform(0, 1, size=self.dim)\n                particle.velocity = (inertia_weight * particle.velocity \n                                     + phi_p * r_p * (particle.best_position - particle.position) \n                                     + phi_g * r_g * (global_best - particle.position))\n                particle.position = particle.position + particle.velocity\n                particle.position = np.clip(particle.position, -5.0, 5.0)\n                particle.fitness = func(particle.position)\n                if particle.fitness < particle.best_fitness:\n                    particle.best_fitness = particle.fitness\n                    particle.best_position = np.copy(particle.position)\n                    \n            return particles\n\n        class Particle:\n            def __init__(self, dim):\n                self.position = np.random.uniform(-5.0, 5.0, size=dim)\n                self.velocity = np.zeros(dim)\n                self.fitness = func(self.position)\n                self.best_position = np.copy(self.position)\n                self.best_fitness = self.fitness\n\n        max_particles = 30  # Maximum number of particles\n        particles = [Particle(self.dim) for _ in range(max_particles)]  # Adaptive particle population\n        global_best = min(particles, key=lambda x: x.fitness).best_position\n        \n        for t in range(self.budget):\n            particles = update_velocity_position(particles, global_best)\n            global_best = min(particles, key=lambda x: x.fitness).best_position\n            \n        return global_best", "name": "AdaptivePSO", "description": "Improved DynamicPSO with adaptive particle population size.", "configspace": "", "generation": 1, "fitness": 0.14167732497875127, "feedback": "", "error": "", "parent_id": "d7763fa4-5920-46f7-9fb2-9886b470ffec", "metadata": {"aucs": [0.2187776809349813, 0.21034920905417187, 0.2165888747672513, 0.28403906607692175, 0.22886848659777392, 0.2856052435629237, 0.2570160441144449, 0.2776239224306948, 0.28911374675479895, 9.999999999998899e-05, 0.01473180250520112, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009545416949711116, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028593431044396933, 0.00023108865122922762, 0.06269471443140351, 0.06311982149665385, 0.051565457847474905, 0.05201709265766019, 0.0606309325831591, 0.06060297768415479, 0.07684141057727378, 0.04938560498154998, 0.06712168738926261, 0.03961496968668121, 0.03843253607398345, 0.03146485865212001, 0.05939242541874412, 0.05895963558768258, 0.0439477545980691, 0.04725224919904025, 0.04297979348202918, 0.05212322248648393, 0.9911424890119549, 0.9935654066257859, 0.9941919924668916, 0.9902876636870357, 0.9892073561824248, 0.986882420604866, 0.9913063138683065, 0.9918917598788916, 0.9919449471777421, 0.11082190029021499, 0.09848545776150675, 0.05760493246852716, 0.12583109368239453, 0.11861704775039217, 0.11368634308981418, 0.0971125761819216, 0.09863371654169328, 0.07428790625813597, 0.13876968312835747, 0.13447514542779737, 0.1553912117712909, 0.1785230568131173, 0.15614313982545847, 0.1570730610105644, 0.1542414786399129, 0.1346432186265656, 0.15124432753840156, 0.023878815514508656, 0.011820679320989402, 0.028447996518384033, 0.05298552556667424, 0.03716033000609864, 0.06504364337582735, 0.02980931182653279, 0.018000534694803005, 0.0885708835240635, 0.04237562071749712, 0.016510804458980455, 0.015290383114773376, 9.999999999998899e-05, 0.023235052295244918, 0.03222804161453641, 9.999999999998899e-05, 0.017570229710382357, 0.017475639882346683, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010802926824549086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03292512887691956, 0.0285404244861458, 0.03836002820763518, 0.048442704274654136, 9.999999999998899e-05, 0.011111696810272353, 0.032514407677587065, 0.011855122249822436, 0.05395566597075507, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0089364878615803, 0.008533987526223807, 0.004216104348260141, 0.00019628594050313808, 0.024331651137376453, 0.00510680693744292, 0.04246935412895603, 9.999999999998899e-05, 0.0268308592528691, 0.2467186567612243, 0.32262382210953455, 0.2572214623824117, 0.2685946048914897, 0.236345090255909, 0.19874737545944732, 0.28207743623265247, 0.19526739223274947, 0.20985213060142371, 0.05672896077454537, 0.06515215131168084, 0.04304269168978159, 0.06080623821274822, 0.054855549497004774, 0.049847864848622025, 0.052452648359060716, 0.048746041074334556, 0.10057065092427475, 0.14180923990989036, 0.2128579377350065, 0.13646476225445536, 0.20302935689717883, 0.13855663931990403, 0.13789037336830423, 0.17701180707662967, 0.14678028515396202, 0.18239842346959378, 0.16667261367181652, 0.17242830310379864, 0.18575243247467887, 0.1699482036540254, 0.1663581748108841, 0.17001128824422718, 0.18867427111780555, 0.22357343694534504, 0.18928946635719635, 0.14543922839382173, 0.12350447545305632, 0.12246267593946192, 0.11951386573032119, 0.1139179370843858, 0.14440754974041414, 0.13839999294241967, 0.14590620881463967, 0.1371550504642184, 0.15774283650641574, 0.1357624911255645, 0.16938695965567951, 0.14718036193922435, 0.15715017273733778, 0.17405564976591814, 0.1560040886546742, 0.15997986128335429, 0.15809566550490894, 0.15660941512892768, 0.1494832820811951, 0.17203582375731663, 0.15744965017792656, 0.1563163747632923, 0.1513456084004512, 0.1561712955403537, 0.15639144474022015, 0.15427229520577113, 0.34186348109923204, 0.1652607106109173, 0.13039595262385395, 0.1753913130844288, 0.17108603412524337, 0.16563049153957143, 0.09847745695063403, 0.1640167867336304, 0.15936675713450932, 0.21614426274324094, 0.1589106384884128, 0.1499826741212379, 0.14829107937149222, 0.21739007741376204, 0.155001627834489, 0.1964159130353581, 0.19907677854486527, 0.20165120506475365, 0.19974661867574572, 0.19869616577846294, 0.1764609226294782, 0.17233486941935172, 0.16982153075778583, 0.1759043415655871, 0.1727444887154881, 0.17299754917156007, 0.183116362765413, 0.07063466708574795, 0.04401352841995376, 0.06360620057723387, 0.06678799750151865, 0.0638191140563511, 0.0660660104354891, 0.0791966694954015, 0.054309355450447905, 0.060044439184668175]}, "mutation_prompt": null}
