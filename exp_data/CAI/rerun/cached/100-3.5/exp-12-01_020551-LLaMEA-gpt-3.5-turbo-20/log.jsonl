{"id": "7230c912-1475-4d8a-9cd1-b187f83a6c22", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30, mutation_factor=0.5, crossover_prob=0.7, w=0.5, c1=1.494, c2=1.494):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.mutation_factor = mutation_factor\n        self.crossover_prob = crossover_prob\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def create_particle():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def pso():\n            # PSO initialization\n            swarm = np.array([create_particle() for _ in range(self.swarm_size)])\n            pbest = swarm.copy()\n            pbest_values = np.array([cost_function(p) for p in pbest])\n            gbest = pbest[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            velocity = np.zeros((self.swarm_size, self.dim))\n\n            for _ in range(self.budget):\n                r1, r2 = np.random.random(size=(2, self.swarm_size, self.dim))\n                velocity = self.w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n                swarm += velocity\n                swarm = np.clip(swarm, -5.0, 5.0)\n                values = np.array([cost_function(p) for p in swarm])\n\n                # Update personal best\n                update_idx = values < pbest_values\n                pbest[update_idx] = swarm[update_idx]\n                pbest_values[update_idx] = values[update_idx]\n\n                # Update global best\n                min_idx = np.argmin(pbest_values)\n                if pbest_values[min_idx] < gbest_value:\n                    gbest = pbest[min_idx]\n                    gbest_value = pbest_values[min_idx]\n\n            return gbest\n\n        def de():\n            # DE initialization\n            population = np.array([create_particle() for _ in range(self.swarm_size)])\n            for _ in range(self.budget):\n                for i in range(self.swarm_size):\n                    a, b, c = np.random.choice(self.swarm_size, 3, replace=False)\n                    mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n                    crossover = np.random.rand(self.dim) < self.crossover_prob\n                    trial = np.where(crossover, mutant, population[i])\n                    if cost_function(trial) < cost_function(population[i]):\n                        population[i] = trial\n\n            return population[np.argmin([cost_function(p) for p in population])]\n\n        return pso() if np.random.rand() < 0.5 else de()", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.2946098520467106, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7677738607402739, 0.9316244499901213, 0.9337317136627857, 0.7422711682021343, 0.19084945903735517, 0.9200227436550559, 0.743652887262908, 0.9361534144717569, 0.9390972280344734, 0.5824456069833982, 0.7959440272134825, 0.8128363853683563, 0.5463342376200685, 0.7803763431836528, 0.8150081940018391, 0.5663421856686457, 0.8354701384828663, 0.8455661686116838, 0.1247151356153745, 0.11902730985737231, 0.11050585897268284, 0.14323993101011945, 0.14683418427537576, 0.12412527459406941, 0.15989460815862422, 0.12189133474269287, 0.07260916149871954, 0.11611049231998716, 0.14488987344804116, 0.10570541271723854, 0.11681114550896798, 0.13398622384336345, 0.1263558049751049, 0.12034752192256837, 0.09698359616020513, 0.11811200447280934, 0.9649674658603122, 0.9861706911977532, 0.925193501875391, 0.9613448211706616, 0.9838068234972701, 0.9889493055243265, 0.9518112096696744, 0.9931041044919228, 0.9888291613007189, 0.3179848300052792, 0.8824548965999978, 0.4486764417578152, 0.3168892260340018, 0.08080899041953415, 0.7864084620968528, 0.30722677914634866, 0.030884963268218102, 0.08940560966415179, 0.3585525203831327, 0.16246411434521502, 0.3237797316287536, 0.5350609265180419, 0.2209158285848165, 0.16074681018394987, 0.5198797263144791, 0.23290736749320362, 0.9248103372456271, 0.17883481496481657, 0.2361817611805983, 0.12421721155525267, 0.16518099211958104, 0.1971637165049116, 0.13378729516706467, 0.16856591044303326, 0.1845742927750147, 0.18331366528067283, 0.15456821083131622, 0.1717762690902066, 0.2374842537110501, 0.1704958595424887, 0.20191253929173458, 0.2872163383204618, 0.14303999837058512, 0.2242460707068269, 0.13576945169256704, 0.0406013592114397, 0.005483212044114172, 0.0003445530527920182, 0.03208850629893223, 9.999999999998899e-05, 9.999999999998899e-05, 0.043481081233761154, 0.030456158675985945, 9.999999999998899e-05, 0.1451760979948754, 0.04549082868731058, 0.0923678110808871, 0.16718458164674233, 0.035065509943071116, 0.06485101514008007, 0.19688296608929157, 0.04404141217704216, 0.05565033570403721, 0.032698435049918206, 0.11875144070740573, 0.34259561796009785, 0.016249208883388433, 0.1143218568164357, 0.12505493758821284, 0.033988590654052686, 0.15763612907310165, 0.07889452039339218, 0.12938618485732822, 0.19016960962472929, 0.09748098010885753, 0.16879602994711584, 0.094320874592413, 0.1137806501052937, 0.15511472596431886, 0.3807118772922746, 0.0591967830363237, 0.4799882923277826, 0.5427311818543668, 0.5582157219363124, 0.5033239568235883, 0.6218286265820835, 0.5654053495598383, 0.5050690802126938, 0.5873716213216595, 0.6537550191945036, 0.08995851398257326, 0.06920537211878486, 0.09944750206571695, 0.08953955942444825, 0.145824789481253, 0.13450979822514741, 0.10137077152971519, 0.08307091399971067, 0.059976480304923085, 0.14321728947658885, 0.2231155667136192, 0.2637757139448097, 0.11795766060599377, 0.18171036740111435, 0.33606672064269105, 0.1263452862436143, 0.1728173577660551, 0.20911285582108852, 0.33646205518860095, 0.1664449596552824, 0.3925732970120449, 0.31898820784341564, 0.23124259720567852, 0.2711458480716997, 0.3407810170232479, 0.2586564710918883, 0.5293695742618048, 0.22643867455648203, 0.21317398983182834, 0.24928753422947325, 0.22867343734326995, 0.2600724420344078, 0.23143817001153555, 0.2397343571269387, 0.21269798751130786, 0.30529892790959323, 0.19505990666820994, 0.21319056718025597, 0.20103781450983194, 0.19474606577320797, 0.2360578617158552, 0.24422341113198953, 0.22426318866284, 0.18460627033727806, 0.21928728013085697, 0.29454483179792756, 0.1896359616353811, 0.20512195983361103, 0.19783655555583268, 0.19119304510578217, 0.1918469098427572, 0.1923983926964412, 0.1980533754003697, 0.20320291144603164, 0.49060220741713234, 0.1056258506702401, 0.16243003551024626, 0.5360300077131759, 0.956102270179065, 0.14212174699054902, 0.1912367442580375, 0.1793373786575838, 0.7969267837890155, 0.3087127413867451, 0.21291888367326062, 0.2139426152870355, 0.19312325611651293, 0.7129088970679575, 0.16964613291526276, 0.19938608683236592, 0.9209313160862804, 0.10528685725894671, 0.18396420776516442, 0.21755672146597216, 0.20409154273224572, 0.1743294690443956, 0.19488010782857224, 0.1997170152951866, 0.18734949863883454, 0.21162067252601113, 0.18936800053918557, 0.07879237869060796, 0.1040727275877481, 0.08368702150617313, 0.07211090993893488, 0.08953822927659272, 0.0925443092208077, 0.06760583819108601, 0.10872434815185605, 0.08638573924223714]}, "mutation_prompt": null}
{"id": "765fb21f-c09e-4f06-b14d-68b539516de5", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim, swarm_size=30, mutation_factor=0.5, crossover_prob=0.7, w=0.5, c1=1.494, c2=1.494):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.mutation_factor = mutation_factor\n        self.crossover_prob = crossover_prob\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def create_particle():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        def pso():\n            # PSO initialization\n            swarm = np.array([create_particle() for _ in range(self.swarm_size)])\n            pbest = swarm.copy()\n            pbest_values = np.array([cost_function(p) for p in pbest])\n            gbest = pbest[np.argmin(pbest_values)]\n            gbest_value = np.min(pbest_values)\n            velocity = np.zeros((self.swarm_size, self.dim))\n\n            for _ in range(self.budget):\n                r1, r2 = np.random.random(size=(2, self.swarm_size, self.dim))\n                velocity = self.w * velocity + self.c1 * r1 * (pbest - swarm) + self.c2 * r2 * (gbest - swarm)\n                swarm += velocity\n                swarm = np.clip(swarm, -5.0, 5.0)\n                values = np.array([cost_function(p) for p in swarm])\n\n                # Update personal best\n                update_idx = values < pbest_values\n                pbest[update_idx] = swarm[update_idx]\n                pbest_values[update_idx] = values[update_idx]\n\n                # Update global best\n                min_idx = np.argmin(pbest_values)\n                if pbest_values[min_idx] < gbest_value:\n                    gbest = pbest[min_idx]\n                    gbest_value = pbest_values[min_idx]\n                \n                # Adaptive parameter adjustments\n                self.w *= 0.99\n                self.c1 *= 0.98\n                self.c2 *= 1.02\n\n            return gbest\n\n        def de():\n            # DE initialization\n            population = np.array([create_particle() for _ in range(self.swarm_size)])\n            for _ in range(self.budget):\n                for i in range(self.swarm_size):\n                    a, b, c = np.random.choice(self.swarm_size, 3, replace=False)\n                    mutant = population[a] + self.mutation_factor * (population[b] - population[c])\n                    crossover = np.random.rand(self.dim) < self.crossover_prob\n                    trial = np.where(crossover, mutant, population[i])\n                    if cost_function(trial) < cost_function(population[i]):\n                        population[i] = trial\n                        \n                    # Adaptive parameter adjustments\n                    self.mutation_factor *= 0.99\n                    self.crossover_prob *= 0.98\n\n            return population[np.argmin([cost_function(p) for p in population])]\n\n        return pso() if np.random.rand() < 0.5 else de()", "name": "ImprovedHybridPSODE", "description": "Improved HybridPSODE algorithm with adaptive parameter adjustments for better convergence in black box optimization.", "configspace": "", "generation": 1, "fitness": 0.18305136995961352, "feedback": "", "error": "", "parent_id": "7230c912-1475-4d8a-9cd1-b187f83a6c22", "metadata": {"aucs": [0.10060225650950083, 0.7860006127622403, 0.7934230607125352, 0.1348844805535262, 0.1908672413300212, 0.19120270413362173, 0.09025894997327488, 0.8697808166613908, 0.8646988627749506, 9.999999999998899e-05, 0.04387030088663646, 0.07832439357365217, 9.999999999998899e-05, 0.06877465052160392, 0.35221606978425146, 9.999999999998899e-05, 0.3549545921607006, 0.36961579356774266, 0.04313382501627272, 0.09615053544018881, 0.07078793040872411, 0.02896259801083889, 0.09641298495465056, 0.09732541777117953, 0.015143157728712109, 0.16536262416302983, 0.1587741005245169, 0.030265737543272886, 0.11137731272731088, 0.13356493505805866, 0.02837692256017177, 0.14716222980677085, 0.14153808685767366, 0.019375890587492006, 0.11098388487976008, 0.09818068811912872, 0.062160306145595534, 0.9861813407436142, 0.9532167609428615, 0.05623108639764307, 0.9838558102011644, 0.9887545709665133, 0.04642954611465033, 0.9931049945115668, 0.9889891472211142, 0.0402572716742392, 0.19881537019870676, 0.29189300226870996, 9.999999999998899e-05, 0.04445349708990054, 0.41019004129788095, 0.032683501228593204, 0.030886143364121876, 0.0894449253977655, 0.15448385938175502, 0.9283125773956938, 0.9376847442852448, 0.11382637948907282, 0.19457661857393538, 0.155214667183317, 0.09754402942727247, 0.15265643571185117, 0.23898049255081155, 9.999999999998899e-05, 0.17399150526553908, 0.15325594579631774, 9.999999999998899e-05, 0.1637930590242599, 0.09919721282471494, 9.999999999998899e-05, 0.1885020094661698, 0.17283453472088006, 9.999999999998899e-05, 0.2195644037365002, 0.2014810153500366, 9.999999999998899e-05, 0.18964900087530312, 0.2004380935869966, 9.999999999998899e-05, 0.18431983169024613, 0.2422025323216661, 9.999999999998899e-05, 0.040582220598101904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022067668927209905, 9.999999999998899e-05, 9.999999999998899e-05, 0.0916938002610106, 0.09536247179976565, 9.999999999998899e-05, 0.05199518542410242, 0.0562609849871033, 9.999999999998899e-05, 0.04903805223983959, 0.04867358292522972, 9.999999999998899e-05, 0.05936727114414386, 0.051501964163294334, 9.999999999998899e-05, 0.17846284437304005, 0.1901792461457359, 9.999999999998899e-05, 0.12438847169302736, 0.07763162888213115, 9.999999999998899e-05, 0.1811555196904736, 0.1249251476748966, 9.999999999998899e-05, 0.13212429259961722, 0.17981345920012626, 9.999999999998899e-05, 0.19705747438747612, 0.05876339711532985, 0.13666395435556478, 0.49426099597000184, 0.4728284398032212, 0.14538966516537533, 0.4916459948966543, 0.5129998463900092, 0.1569700285246991, 0.527520963128074, 0.5298209904495719, 0.02057354703338965, 0.0577750121322399, 0.07387566756213604, 0.014981323446270345, 0.10152889931578613, 0.10641526669301382, 0.0027793507101625536, 0.057425993228948036, 0.05000327998082266, 0.10635320533374581, 0.20245682960536715, 0.3407387258718517, 0.056637081985893345, 0.23516057102651033, 0.14634881286887935, 0.0839243272864022, 0.21597852972959486, 0.2781018339120195, 0.14271326957267705, 0.14142138985603292, 0.3421089547400674, 0.14679125651179836, 0.24263699976981146, 0.2436746667605415, 0.12860945869912688, 0.2488141820738753, 0.3104447659113182, 0.09083320943870532, 0.20928891634661173, 0.1615757559875115, 0.10410265930875084, 0.19744492997661078, 0.2358447371353709, 0.08577501667520915, 0.21000530432514009, 0.2660558441820551, 0.14794556578922435, 0.21183098321253202, 0.16998537858151808, 0.12315115352547146, 0.21101732130027484, 0.2038759568908335, 0.10667973137626863, 0.197501805241743, 0.1976255069290186, 0.13325686395857517, 0.19800858468502847, 0.18293395812722058, 9.999999999998899e-05, 0.18548588020724488, 0.25641337733980407, 0.1336987565524429, 0.22747013254452364, 0.22669587021028081, 0.10818754189938096, 0.14692442098929026, 0.11941811924730772, 0.09102232414618394, 0.9606365622731257, 0.15689473430573986, 0.10842622373626287, 0.17904294870654447, 0.17029350270302024, 0.06502952883202684, 0.21311287183991212, 0.21382413273562384, 0.0824057983322426, 0.3068571227916965, 0.16961265822129468, 0.09837578968010219, 0.42329713558328674, 0.16476817707118574, 0.1552698055842484, 0.20466915143219222, 0.1715849599568171, 0.1454285643817489, 0.20322492110180612, 0.2038065203058601, 0.1290782457058549, 0.19145256125102494, 0.19910281690781284, 0.039285074888009475, 0.1011561639439642, 0.07720868526963298, 0.03010016845729091, 0.061531264449959266, 0.09673389483362682, 0.05729803617957241, 0.10064591914385324, 0.09635768752230811]}, "mutation_prompt": null}
