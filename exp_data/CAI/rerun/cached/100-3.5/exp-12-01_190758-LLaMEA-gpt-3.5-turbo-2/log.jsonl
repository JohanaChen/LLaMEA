{"id": "daeebde5-c6b3-4e78-b480-760b934e8b1c", "solution": "import numpy as np\n\nclass AdaptiveFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10\n        explosion_amp = 0.5\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            fireworks = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fireworks_fitness = [func(fw) for fw in fireworks]\n            \n            for i in range(pop_size):\n                for j in range(pop_size):\n                    if fireworks_fitness[j] < fireworks_fitness[i]:\n                        dist = np.linalg.norm(fireworks[j] - fireworks[i])\n                        if dist != 0:\n                            fireworks[i] += explosion_amp * (fireworks[j] - fireworks[i]) / dist\n            \n            best_firework = fireworks[np.argmin(fireworks_fitness)]\n            best_firework_fitness = func(best_firework)\n            \n            if best_firework_fitness < best_fitness:\n                best_solution = best_firework\n                best_fitness = best_firework_fitness\n            \n            explosion_amp *= 0.9  # Decrease explosion amplitude over time\n        \n        return best_solution", "name": "AdaptiveFireworksAlgorithm", "description": "An Adaptive Fireworks Algorithm (AFA) that utilizes a dynamic population size and adaptive explosion amplitude to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.09043703760281704, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.17603762972714088, 0.17562155500705046, 0.16952646077496536, 0.16960674457557723, 0.18702057197350597, 0.17357932673793652, 0.17773053954701246, 0.16073051257416826, 0.1873890069670351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04136726409351943, 0.04616836131848301, 0.03607891707707478, 0.040403950451762816, 0.03716854909651501, 0.03865885468028518, 0.05233535217640983, 0.06639911290474898, 0.05801293026148191, 0.02498433224705554, 0.030582420287129986, 0.04712153898509719, 0.026083852861490398, 0.04846593946836164, 0.05639834932592258, 0.03739624987733592, 0.03923385193796436, 0.029587132464432786, 0.086099598224878, 0.07276732870300617, 0.09016319286510366, 0.08728317919869588, 0.08028395329477811, 0.08584035272249768, 0.08203493335529255, 0.08521885087218506, 0.07923335791746666, 0.07701725162247697, 0.07875272196409155, 0.10157166208141111, 0.06351456016372425, 0.06221379355637324, 0.05622595571150635, 0.09437289950998473, 0.05806054148343387, 0.09813932532628111, 0.12469556619257582, 0.19271383735302716, 0.1476580962341837, 0.1037498622448817, 0.09428890281211755, 0.12917393754505613, 0.12008099151876506, 0.13494991519854171, 0.11452836901988961, 0.0034028013351082853, 0.004089412619482702, 0.0051430925126986216, 0.0019499714499917609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019566465197170535, 0.007269300966948111, 0.06850589184639488, 9.999999999998899e-05, 0.010985629637011107, 0.0352340839837767, 0.011622348493756318, 0.017962307782292686, 0.0063502189430222344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050942351399106856, 0.06833323543463465, 0.044744142341424764, 0.06842139713512574, 0.029854648360320035, 0.05479800699057069, 0.05081600856674373, 0.048186802206305224, 0.062378903667962726, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006334001575083903, 9.999999999998899e-05, 0.22012457588594092, 0.1927541439766881, 0.19166141533708803, 0.20530483441873038, 0.18864822170464934, 0.20610349772606174, 0.19887794155567795, 0.17697947042841822, 0.20095416408888256, 0.04784613649258429, 0.04110450691213119, 0.0430862758016507, 0.04245678676247988, 0.03980392400732724, 0.045682433729758665, 0.07131196928004324, 0.04336438054206648, 0.05159916690463173, 0.13733529314895132, 0.12482158669624621, 0.13403325485267192, 0.14095170033988214, 0.1409620626484268, 0.12759629265202677, 0.14998926199930862, 0.14822579149089032, 0.13198622186626874, 0.17090326252472643, 0.1592840836205931, 0.17514029939616704, 0.16734216236127486, 0.18067581175329073, 0.17606006101526894, 0.16496517217408724, 0.17377036706306903, 0.15234912639773934, 0.11371959152134792, 0.10309193467474664, 0.11750878371872964, 0.11055678296084859, 0.13502488034253768, 0.11576465539435299, 0.10524492268511731, 0.12368452933062801, 0.12230140466569406, 0.14018736110520824, 0.16156106917653001, 0.15637037520476238, 0.15943116104352162, 0.1438047574522907, 0.16148975047018244, 0.151731823788664, 0.17144689909582989, 0.1821517294868854, 0.14088079493156525, 0.14536115167105923, 0.14084288856784566, 0.14011303801679265, 0.14328001867097995, 0.15219280642641386, 0.13920935588034422, 0.14087888541028315, 0.16193159049950012, 0.17942980095206695, 0.16648352002963385, 0.16610580924333407, 0.1590072098087878, 0.1502776842739515, 0.139986784344156, 0.1606098316020218, 0.16246048646785272, 0.17290686694170165, 0.15639910155456893, 0.1570046444786507, 0.1599236256934652, 0.1487061900105544, 0.17822252951558804, 0.15925217219884835, 0.16791372574420815, 0.17245595633215183, 0.19702017936790905, 0.17285606232840567, 0.190143188913525, 0.17485122755920934, 0.18658291302285568, 0.21300124828275646, 0.1830849195569335, 0.1757339113173979, 0.1877097822765138, 0.20541143795380734, 0.057687700915779905, 0.05422511774814831, 0.06566802523270343, 0.051692348628453844, 0.059277216186173765, 0.054836518931775435, 0.07500152541723071, 0.05469855839428506, 0.05864043469809277]}, "mutation_prompt": null}
{"id": "204da04d-e158-4955-9bb9-a82b8b98b5e9", "solution": "import numpy as np\n\nclass AdaptiveFireworksAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10\n        explosion_amp = 0.5\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            fireworks = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fireworks_fitness = [func(fw) for fw in fireworks]\n            \n            for i in range(pop_size):\n                for j in range(pop_size):\n                    if fireworks_fitness[j] < fireworks_fitness[i]:\n                        dist = np.linalg.norm(fireworks[j] - fireworks[i])\n                        if dist != 0:\n                            fireworks[i] += explosion_amp * (fireworks[j] - fireworks[i]) / dist\n            \n            best_firework = fireworks[np.argmin(fireworks_fitness)]\n            best_firework_fitness = func(best_firework)\n            \n            if best_firework_fitness < best_fitness:\n                best_solution = best_firework\n                best_fitness = best_firework_fitness\n            \n            explosion_amp *= 0.9  # Decrease explosion amplitude over time\n        \n        return best_solution", "name": "AdaptiveFireworksAlgorithm", "description": "An Adaptive Fireworks Algorithm (AFA) that utilizes a dynamic population size and adaptive explosion amplitude to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "daeebde5-c6b3-4e78-b480-760b934e8b1c", "metadata": {"aucs": [0.17603762972714088, 0.17562155500705046, 0.16952646077496536, 0.16960674457557723, 0.18702057197350597, 0.17357932673793652, 0.17773053954701246, 0.16073051257416826, 0.1873890069670351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04136726409351943, 0.04616836131848301, 0.03607891707707478, 0.040403950451762816, 0.03716854909651501, 0.03865885468028518, 0.05233535217640983, 0.06639911290474898, 0.05801293026148191, 0.02498433224705554, 0.030582420287129986, 0.04712153898509719, 0.026083852861490398, 0.04846593946836164, 0.05639834932592258, 0.03739624987733592, 0.03923385193796436, 0.029587132464432786, 0.086099598224878, 0.07276732870300617, 0.09016319286510366, 0.08728317919869588, 0.08028395329477811, 0.08584035272249768, 0.08203493335529255, 0.08521885087218506, 0.07923335791746666, 0.07701725162247697, 0.07875272196409155, 0.10157166208141111, 0.06351456016372425, 0.06221379355637324, 0.05622595571150635, 0.09437289950998473, 0.05806054148343387, 0.09813932532628111, 0.12469556619257582, 0.19271383735302716, 0.1476580962341837, 0.1037498622448817, 0.09428890281211755, 0.12917393754505613, 0.12008099151876506, 0.13494991519854171, 0.11452836901988961, 0.0034028013351082853, 0.004089412619482702, 0.0051430925126986216, 0.0019499714499917609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019566465197170535, 0.007269300966948111, 0.06850589184639488, 9.999999999998899e-05, 0.010985629637011107, 0.0352340839837767, 0.011622348493756318, 0.017962307782292686, 0.0063502189430222344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050942351399106856, 0.06833323543463465, 0.044744142341424764, 0.06842139713512574, 0.029854648360320035, 0.05479800699057069, 0.05081600856674373, 0.048186802206305224, 0.062378903667962726, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006334001575083903, 9.999999999998899e-05, 0.22012457588594092, 0.1927541439766881, 0.19166141533708803, 0.20530483441873038, 0.18864822170464934, 0.20610349772606174, 0.19887794155567795, 0.17697947042841822, 0.20095416408888256, 0.04784613649258429, 0.04110450691213119, 0.0430862758016507, 0.04245678676247988, 0.03980392400732724, 0.045682433729758665, 0.07131196928004324, 0.04336438054206648, 0.05159916690463173, 0.13733529314895132, 0.12482158669624621, 0.13403325485267192, 0.14095170033988214, 0.1409620626484268, 0.12759629265202677, 0.14998926199930862, 0.14822579149089032, 0.13198622186626874, 0.17090326252472643, 0.1592840836205931, 0.17514029939616704, 0.16734216236127486, 0.18067581175329073, 0.17606006101526894, 0.16496517217408724, 0.17377036706306903, 0.15234912639773934, 0.11371959152134792, 0.10309193467474664, 0.11750878371872964, 0.11055678296084859, 0.13502488034253768, 0.11576465539435299, 0.10524492268511731, 0.12368452933062801, 0.12230140466569406, 0.14018736110520824, 0.16156106917653001, 0.15637037520476238, 0.15943116104352162, 0.1438047574522907, 0.16148975047018244, 0.151731823788664, 0.17144689909582989, 0.1821517294868854, 0.14088079493156525, 0.14536115167105923, 0.14084288856784566, 0.14011303801679265, 0.14328001867097995, 0.15219280642641386, 0.13920935588034422, 0.14087888541028315, 0.16193159049950012, 0.17942980095206695, 0.16648352002963385, 0.16610580924333407, 0.1590072098087878, 0.1502776842739515, 0.139986784344156, 0.1606098316020218, 0.16246048646785272, 0.17290686694170165, 0.15639910155456893, 0.1570046444786507, 0.1599236256934652, 0.1487061900105544, 0.17822252951558804, 0.15925217219884835, 0.16791372574420815, 0.17245595633215183, 0.19702017936790905, 0.17285606232840567, 0.190143188913525, 0.17485122755920934, 0.18658291302285568, 0.21300124828275646, 0.1830849195569335, 0.1757339113173979, 0.1877097822765138, 0.20541143795380734, 0.057687700915779905, 0.05422511774814831, 0.06566802523270343, 0.051692348628453844, 0.059277216186173765, 0.054836518931775435, 0.07500152541723071, 0.05469855839428506, 0.05864043469809277]}, "mutation_prompt": null}
