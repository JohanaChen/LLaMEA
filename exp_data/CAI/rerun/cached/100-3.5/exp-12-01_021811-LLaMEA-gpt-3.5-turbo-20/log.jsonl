{"id": "672ba940-3ec0-451a-8326-37b4d7873897", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.HMCR = 0.7\n        self.PAR = 0.3\n        self.bw = 0.01\n        \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n        \n        def mutate(x):\n            for i in range(self.dim):\n                if np.random.rand() < self.bw:\n                    x[i] = np.clip(x[i] + np.random.normal(0, 1), self.lower_bound, self.upper_bound)\n            return x\n        \n        def evaluate(x):\n            return func(x)\n        \n        harmony_memory = initialize_harmony_memory()\n        \n        for _ in range(self.budget):\n            new_harmony = np.array([mutate(h) if np.random.rand() < self.PAR else h for h in harmony_memory])\n            new_harmony = np.array([h if np.random.rand() < self.HMCR else np.random.uniform(self.lower_bound, self.upper_bound, self.dim) for h in new_harmony])\n            \n            harmony_memory = np.where(np.array([evaluate(h) for h in new_harmony]) < np.array([evaluate(h) for h in harmony_memory]), new_harmony, harmony_memory)\n        \n        best_solution = harmony_memory[np.argmin([evaluate(h) for h in harmony_memory])]\n        return best_solution", "name": "HarmonySearch", "description": "Harmony Search with Adaptive Mutation Rate", "configspace": "", "generation": 0, "fitness": 0.09183101172995524, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.20765121601798142, 0.1772971180051185, 0.18284170625770269, 0.1686394282982181, 0.18813559743967567, 0.17404408176351205, 0.17807780056301692, 0.16589608176502046, 0.19655301811011028, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04228866030216072, 0.04653326795913604, 0.03739395901261555, 0.05667220253910821, 0.03778688483040371, 0.04492780172734112, 0.05074677114144199, 0.06789082202679897, 0.0588027816220672, 0.0273515662947742, 0.03068594448187123, 0.0475459614564977, 0.02642903561939325, 0.03869502195554708, 0.05763939210494495, 0.02655816414106682, 0.04002621766702941, 0.03194340188507372, 0.09436099376785245, 0.07421826583172275, 0.0868682646296105, 0.09143694213421605, 0.0803060717590186, 0.07174044795799239, 0.07910259503339134, 0.09004693954889065, 0.07236200791324032, 0.07955206728475916, 0.08043703106553202, 0.10165210099232336, 0.07789278624948315, 0.06302705483583304, 0.05257027204181308, 0.09472457566024695, 0.07601012146349129, 0.06924741616817043, 0.12458574055071037, 0.19303121288544478, 0.14781259348482656, 0.10484210975905572, 0.10102895566806525, 0.13239757230573068, 0.12811782051213727, 0.11739643377706765, 0.10257451459982736, 0.0043507767599104685, 0.0252403905161791, 0.003689195106263865, 0.004189550067818515, 0.05255703973319015, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.010738361546120956, 0.06957272857429797, 0.005005305313322106, 0.011988543793833517, 0.035362057023575866, 9.999999999998899e-05, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06603090234340603, 0.06854306564582546, 0.06218482921129731, 0.06980161924623063, 0.04850841420219498, 0.055909250580171266, 0.04228951996056918, 0.05008726726802559, 0.06578556109458789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.20527146518066686, 0.1991427349302165, 0.2432561140906231, 0.206083988700015, 0.18987809425904423, 0.20698281443879474, 0.20381828563773385, 0.17714561944680185, 0.20565322461912483, 0.05916326820238427, 0.04250646008327186, 0.04400244723518387, 0.04406424981818835, 0.040801819418239904, 0.04706200721904985, 0.06291231266690389, 0.04493514012883626, 0.05487041005072957, 0.1375423554654699, 0.12667473059682544, 0.12623096686055812, 0.14105461510116202, 0.14083119018986145, 0.12917810988878986, 0.1488786349992115, 0.14827682190690572, 0.13930614463414803, 0.1660110917421007, 0.16799817829373664, 0.16760970839600342, 0.16794415533015294, 0.1811180460794687, 0.1851695397879134, 0.16749369765761934, 0.1810521113337139, 0.15475186798780505, 0.11453662367345185, 0.10494257717121436, 0.10055702565929026, 0.11101738297905472, 0.13221726386760713, 0.12428816241378282, 0.10816751067481034, 0.12373356040910821, 0.12293644059381625, 0.1679789120980224, 0.1610765617388874, 0.14427896542520813, 0.16000363161736753, 0.16384826797796026, 0.15799098382081245, 0.16271549331577484, 0.1723114190837125, 0.15777841677665017, 0.1512950090433567, 0.14202228133330386, 0.14299279941050058, 0.13699432221182473, 0.14788302073314974, 0.13841382810242464, 0.13635518884220543, 0.14082195489599347, 0.14599886901454862, 0.18412866428175956, 0.1584877561960053, 0.16429994358007294, 0.16040189894501966, 0.12965165328267392, 0.17591003784690895, 0.161452855003546, 0.16318371314424363, 0.18112007095829463, 0.18496412764745318, 0.16787220829713045, 0.17381191977568922, 0.1502149775217564, 0.19127622380396847, 0.15821539407701435, 0.12826087472567438, 0.12969836144076508, 0.21049006797900816, 0.16911417154569608, 0.1960687902396394, 0.18284905013707287, 0.1900665131907816, 0.21557300158990234, 0.18723575696628325, 0.1864326674047183, 0.18735692019898498, 0.20573713914562652, 0.05954027642739179, 0.053147150235525076, 0.06574761031729137, 0.05205948244026526, 0.059048469604060294, 0.05004455951223552, 0.05363178441488359, 0.05285717132972512, 0.06396400747405373]}, "mutation_prompt": null}
{"id": "70eedb15-1adf-4f68-87df-7a9f67f79371", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.HMCR = 0.7\n        self.PAR = 0.3\n        self.bw = 0.01\n        \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n        \n        def mutate(x):\n            for i in range(self.dim):\n                if np.random.rand() < self.bw:\n                    x[i] = np.clip(x[i] + np.random.normal(0, 1), self.lower_bound, self.upper_bound)\n            return x\n        \n        def evaluate(x):\n            return func(x)\n        \n        harmony_memory = initialize_harmony_memory()\n        \n        for _ in range(self.budget):\n            new_harmony = np.array([mutate(h) if np.random.rand() < self.PAR else h for h in harmony_memory])\n            new_harmony = np.array([h if np.random.rand() < self.HMCR else np.random.uniform(self.lower_bound, self.upper_bound, self.dim) for h in new_harmony])\n            \n            harmony_memory = np.where(np.array([evaluate(h) for h in new_harmony]) < np.array([evaluate(h) for h in harmony_memory]), new_harmony, harmony_memory)\n        \n        best_solution = harmony_memory[np.argmin([evaluate(h) for h in harmony_memory])]\n        return best_solution", "name": "HarmonySearch", "description": "Harmony Search with Adaptive Mutation Rate", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "672ba940-3ec0-451a-8326-37b4d7873897", "metadata": {"aucs": [0.20765121601798142, 0.1772971180051185, 0.18284170625770269, 0.1686394282982181, 0.18813559743967567, 0.17404408176351205, 0.17807780056301692, 0.16589608176502046, 0.19655301811011028, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04228866030216072, 0.04653326795913604, 0.03739395901261555, 0.05667220253910821, 0.03778688483040371, 0.04492780172734112, 0.05074677114144199, 0.06789082202679897, 0.0588027816220672, 0.0273515662947742, 0.03068594448187123, 0.0475459614564977, 0.02642903561939325, 0.03869502195554708, 0.05763939210494495, 0.02655816414106682, 0.04002621766702941, 0.03194340188507372, 0.09436099376785245, 0.07421826583172275, 0.0868682646296105, 0.09143694213421605, 0.0803060717590186, 0.07174044795799239, 0.07910259503339134, 0.09004693954889065, 0.07236200791324032, 0.07955206728475916, 0.08043703106553202, 0.10165210099232336, 0.07789278624948315, 0.06302705483583304, 0.05257027204181308, 0.09472457566024695, 0.07601012146349129, 0.06924741616817043, 0.12458574055071037, 0.19303121288544478, 0.14781259348482656, 0.10484210975905572, 0.10102895566806525, 0.13239757230573068, 0.12811782051213727, 0.11739643377706765, 0.10257451459982736, 0.0043507767599104685, 0.0252403905161791, 0.003689195106263865, 0.004189550067818515, 0.05255703973319015, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.010738361546120956, 0.06957272857429797, 0.005005305313322106, 0.011988543793833517, 0.035362057023575866, 9.999999999998899e-05, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06603090234340603, 0.06854306564582546, 0.06218482921129731, 0.06980161924623063, 0.04850841420219498, 0.055909250580171266, 0.04228951996056918, 0.05008726726802559, 0.06578556109458789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.20527146518066686, 0.1991427349302165, 0.2432561140906231, 0.206083988700015, 0.18987809425904423, 0.20698281443879474, 0.20381828563773385, 0.17714561944680185, 0.20565322461912483, 0.05916326820238427, 0.04250646008327186, 0.04400244723518387, 0.04406424981818835, 0.040801819418239904, 0.04706200721904985, 0.06291231266690389, 0.04493514012883626, 0.05487041005072957, 0.1375423554654699, 0.12667473059682544, 0.12623096686055812, 0.14105461510116202, 0.14083119018986145, 0.12917810988878986, 0.1488786349992115, 0.14827682190690572, 0.13930614463414803, 0.1660110917421007, 0.16799817829373664, 0.16760970839600342, 0.16794415533015294, 0.1811180460794687, 0.1851695397879134, 0.16749369765761934, 0.1810521113337139, 0.15475186798780505, 0.11453662367345185, 0.10494257717121436, 0.10055702565929026, 0.11101738297905472, 0.13221726386760713, 0.12428816241378282, 0.10816751067481034, 0.12373356040910821, 0.12293644059381625, 0.1679789120980224, 0.1610765617388874, 0.14427896542520813, 0.16000363161736753, 0.16384826797796026, 0.15799098382081245, 0.16271549331577484, 0.1723114190837125, 0.15777841677665017, 0.1512950090433567, 0.14202228133330386, 0.14299279941050058, 0.13699432221182473, 0.14788302073314974, 0.13841382810242464, 0.13635518884220543, 0.14082195489599347, 0.14599886901454862, 0.18412866428175956, 0.1584877561960053, 0.16429994358007294, 0.16040189894501966, 0.12965165328267392, 0.17591003784690895, 0.161452855003546, 0.16318371314424363, 0.18112007095829463, 0.18496412764745318, 0.16787220829713045, 0.17381191977568922, 0.1502149775217564, 0.19127622380396847, 0.15821539407701435, 0.12826087472567438, 0.12969836144076508, 0.21049006797900816, 0.16911417154569608, 0.1960687902396394, 0.18284905013707287, 0.1900665131907816, 0.21557300158990234, 0.18723575696628325, 0.1864326674047183, 0.18735692019898498, 0.20573713914562652, 0.05954027642739179, 0.053147150235525076, 0.06574761031729137, 0.05205948244026526, 0.059048469604060294, 0.05004455951223552, 0.05363178441488359, 0.05285717132972512, 0.06396400747405373]}, "mutation_prompt": null}
