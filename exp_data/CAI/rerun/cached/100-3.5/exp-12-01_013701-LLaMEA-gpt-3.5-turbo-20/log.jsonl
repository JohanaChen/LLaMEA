{"id": "a785b22c-a304-4112-87dc-ea3904c80718", "solution": "import numpy as np\n\nclass HFA_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.delta = 0.97\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget // self.population_size):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:\n                        beta = self.beta_min + (1.0 - self.beta_min) * np.exp(-self.gamma * np.linalg.norm(pop[i] - pop[j])**2)\n                        step = beta * (pop[j] - pop[i]) + self.alpha * np.random.uniform(self.lb, self.ub, self.dim)\n                        new_ind = np.clip(pop[i] + step, self.lb, self.ub)\n                        \n                        if func(new_ind) < fitness[i]:\n                            pop[i] = new_ind\n                            fitness[i] = func(new_ind)\n            \n            best_idx = np.argmin(fitness)\n            best_solution = pop[best_idx]\n            \n            for i in range(self.population_size):\n                mutant = pop[np.random.choice(self.population_size, 3, replace=False)]\n                trial = pop[i] + self.delta * (mutant[0] - pop[i]) + self.delta * (mutant[1] - mutant[2])\n                trial_fitness = func(trial)\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n            \n        return best_solution", "name": "HFA_DE", "description": "Hybrid Firefly Algorithm with Differential Evolution (HFA-DE) combines the global exploration capability of firefly algorithm and the local exploitation ability of differential evolution.", "configspace": "", "generation": 0, "fitness": 0.19664551956386214, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.36341933141343985, 0.342490483403708, 0.369704858471235, 0.3645930386972276, 0.38310399501503434, 0.3577301778091768, 0.37953961454353935, 0.3442207321508266, 0.33788094499783683, 0.013075360467147412, 0.021577433685874503, 0.0009425835572416386, 0.02006337692616178, 0.029247207559814026, 0.02949379619627157, 0.05594660770917159, 0.03569785489050881, 0.012883163174262524, 0.0984047438403648, 0.11338653363853335, 0.10030883853560213, 0.09616963955735913, 0.09238293541446985, 0.11632916141890948, 0.09083270783184749, 0.11263459861815084, 0.0945544987503043, 0.09202243980606506, 0.08185781807594672, 0.08856256639877025, 0.08438036812848293, 0.08010501479864729, 0.07153700385900796, 0.0812679491846755, 0.08712083783197444, 0.08953078541518589, 0.8930219962911088, 0.8866000244103931, 0.8819291815262282, 0.8499152527343555, 0.7908469374073817, 0.8878915643959913, 0.8568421788954713, 0.7834173021003822, 0.8580262198684785, 0.19947638773920384, 0.20857768505471364, 0.21850889774581228, 0.20547828429519888, 0.19617256768983293, 0.2055102056437107, 0.1827461263292366, 0.20419500739692198, 0.1988748613522523, 0.24925111797905875, 0.27306729094783877, 0.23842391016042586, 0.2769604450634986, 0.28476684616510783, 0.2578043497567123, 0.26000137191343775, 0.24633607348918962, 0.2684357095264037, 0.1324243109840414, 0.12259092926927317, 0.12104725978645514, 0.10679959496567737, 0.14199115979023502, 0.10218213884297889, 0.11918329187289833, 0.12948599796887406, 0.12823780026801201, 0.1207978921365237, 0.1199812067036703, 0.16276291999226, 0.135463926569783, 0.13397281134258554, 0.1287625928141355, 0.1246053903877935, 0.1300605334824142, 0.1316279438406447, 0.018315496783583463, 0.03847450858513635, 0.007430840781823322, 0.08303223279464944, 0.005921837284949105, 0.021924879407187126, 0.011217551649388202, 0.03038729811200991, 0.02408883048459287, 0.14995090294648794, 0.1242625663868332, 0.1553120055740883, 0.1474111864055596, 0.14580311303211746, 0.12395630227013976, 0.17718690340329213, 0.1656573156274539, 0.15925338080062468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06531902343141971, 0.0642784879942403, 0.07697459374456306, 0.07879008910797491, 0.06993851353733715, 0.07219360582508705, 0.06782574192032786, 0.07594322437053247, 0.07863262069202115, 0.34221686818450203, 0.36472225021879934, 0.3685023757574125, 0.31854755571263915, 0.3425256066085819, 0.32150309124146215, 0.33602797834535625, 0.34448551974003316, 0.3275391703380084, 0.10118214177313745, 0.08792751086632433, 0.0983522344584018, 0.09360006301414336, 0.09896521064226305, 0.08875852971396858, 0.08469985465934826, 0.10205383592230233, 0.08064725548612917, 0.146137210974719, 0.14905218663484032, 0.1475628189963687, 0.17429238244291811, 0.15989595943371693, 0.17999640738597467, 0.17050523863837952, 0.14341736355838441, 0.18792438679491585, 0.23419678715105507, 0.23537187109302138, 0.24039034952499538, 0.2453457005119325, 0.24479468227378087, 0.23493202947585323, 0.22386175448396417, 0.23393265403143648, 0.22636675810878326, 0.183650734482262, 0.18070495367600903, 0.18855699202410492, 0.17868374122856334, 0.18726423842154516, 0.17667920562053863, 0.17245967465829526, 0.18083385649136097, 0.15818424742125003, 0.23551433152419798, 0.20997853114433684, 0.21878353213447865, 0.2176809107799892, 0.22063685903023178, 0.19034402120866833, 0.19583915831049847, 0.2434511320204682, 0.205776458190415, 0.1797253516123457, 0.18427679054925616, 0.1764106435228614, 0.176662896944899, 0.18547581006724345, 0.1739308978680243, 0.18220161822588055, 0.17698988311633856, 0.17972865447580366, 0.46122799337719633, 0.1813053810203331, 0.370133177946396, 0.40005845131686224, 0.2924976347655309, 0.5248162288514504, 0.16093208066758868, 0.304825993598388, 0.33303152085479737, 0.4603879285524154, 0.32521693634388726, 0.45675173211905606, 0.293770502128088, 0.26897929674211507, 0.19750555794804192, 0.36737611726920616, 0.16431780267773832, 0.36142411247873985, 0.18026637979602544, 0.1753581858140385, 0.1695908898774161, 0.18415678372104216, 0.1839049989410676, 0.17442390860765622, 0.19007749535453877, 0.1777953251458415, 0.18520673785047947, 0.08603819736137719, 0.0858873941109074, 0.08481860100127092, 0.0781435532282887, 0.08724418703662162, 0.08681184341156167, 0.0806993528601232, 0.09235073392578652, 0.07900293852183549]}, "mutation_prompt": null}
{"id": "1d60dfa1-7749-49ac-b2a7-40777b6f79ef", "solution": "import numpy as np\n\nclass HFA_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.0\n        self.delta = 0.97\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        \n        for _ in range(self.budget // self.population_size):\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    if fitness[j] < fitness[i]:\n                        beta = self.beta_min + (1.0 - self.beta_min) * np.exp(-self.gamma * np.linalg.norm(pop[i] - pop[j])**2)\n                        step = beta * (pop[j] - pop[i]) + self.alpha * np.random.uniform(self.lb, self.ub, self.dim)\n                        new_ind = np.clip(pop[i] + step, self.lb, self.ub)\n                        \n                        if func(new_ind) < fitness[i]:\n                            pop[i] = new_ind\n                            fitness[i] = func(new_ind)\n            \n            best_idx = np.argmin(fitness)\n            best_solution = pop[best_idx]\n            \n            for i in range(self.population_size):\n                mutant = pop[np.random.choice(self.population_size, 3, replace=False)]\n                trial = pop[i] + self.delta * (mutant[0] - pop[i]) + self.delta * (mutant[1] - mutant[2])\n                trial_fitness = func(trial)\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n            \n        return best_solution", "name": "HFA_DE", "description": "Hybrid Firefly Algorithm with Differential Evolution (HFA-DE) combines the global exploration capability of firefly algorithm and the local exploitation ability of differential evolution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a785b22c-a304-4112-87dc-ea3904c80718", "metadata": {"aucs": [0.36341933141343985, 0.342490483403708, 0.369704858471235, 0.3645930386972276, 0.38310399501503434, 0.3577301778091768, 0.37953961454353935, 0.3442207321508266, 0.33788094499783683, 0.013075360467147412, 0.021577433685874503, 0.0009425835572416386, 0.02006337692616178, 0.029247207559814026, 0.02949379619627157, 0.05594660770917159, 0.03569785489050881, 0.012883163174262524, 0.0984047438403648, 0.11338653363853335, 0.10030883853560213, 0.09616963955735913, 0.09238293541446985, 0.11632916141890948, 0.09083270783184749, 0.11263459861815084, 0.0945544987503043, 0.09202243980606506, 0.08185781807594672, 0.08856256639877025, 0.08438036812848293, 0.08010501479864729, 0.07153700385900796, 0.0812679491846755, 0.08712083783197444, 0.08953078541518589, 0.8930219962911088, 0.8866000244103931, 0.8819291815262282, 0.8499152527343555, 0.7908469374073817, 0.8878915643959913, 0.8568421788954713, 0.7834173021003822, 0.8580262198684785, 0.19947638773920384, 0.20857768505471364, 0.21850889774581228, 0.20547828429519888, 0.19617256768983293, 0.2055102056437107, 0.1827461263292366, 0.20419500739692198, 0.1988748613522523, 0.24925111797905875, 0.27306729094783877, 0.23842391016042586, 0.2769604450634986, 0.28476684616510783, 0.2578043497567123, 0.26000137191343775, 0.24633607348918962, 0.2684357095264037, 0.1324243109840414, 0.12259092926927317, 0.12104725978645514, 0.10679959496567737, 0.14199115979023502, 0.10218213884297889, 0.11918329187289833, 0.12948599796887406, 0.12823780026801201, 0.1207978921365237, 0.1199812067036703, 0.16276291999226, 0.135463926569783, 0.13397281134258554, 0.1287625928141355, 0.1246053903877935, 0.1300605334824142, 0.1316279438406447, 0.018315496783583463, 0.03847450858513635, 0.007430840781823322, 0.08303223279464944, 0.005921837284949105, 0.021924879407187126, 0.011217551649388202, 0.03038729811200991, 0.02408883048459287, 0.14995090294648794, 0.1242625663868332, 0.1553120055740883, 0.1474111864055596, 0.14580311303211746, 0.12395630227013976, 0.17718690340329213, 0.1656573156274539, 0.15925338080062468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06531902343141971, 0.0642784879942403, 0.07697459374456306, 0.07879008910797491, 0.06993851353733715, 0.07219360582508705, 0.06782574192032786, 0.07594322437053247, 0.07863262069202115, 0.34221686818450203, 0.36472225021879934, 0.3685023757574125, 0.31854755571263915, 0.3425256066085819, 0.32150309124146215, 0.33602797834535625, 0.34448551974003316, 0.3275391703380084, 0.10118214177313745, 0.08792751086632433, 0.0983522344584018, 0.09360006301414336, 0.09896521064226305, 0.08875852971396858, 0.08469985465934826, 0.10205383592230233, 0.08064725548612917, 0.146137210974719, 0.14905218663484032, 0.1475628189963687, 0.17429238244291811, 0.15989595943371693, 0.17999640738597467, 0.17050523863837952, 0.14341736355838441, 0.18792438679491585, 0.23419678715105507, 0.23537187109302138, 0.24039034952499538, 0.2453457005119325, 0.24479468227378087, 0.23493202947585323, 0.22386175448396417, 0.23393265403143648, 0.22636675810878326, 0.183650734482262, 0.18070495367600903, 0.18855699202410492, 0.17868374122856334, 0.18726423842154516, 0.17667920562053863, 0.17245967465829526, 0.18083385649136097, 0.15818424742125003, 0.23551433152419798, 0.20997853114433684, 0.21878353213447865, 0.2176809107799892, 0.22063685903023178, 0.19034402120866833, 0.19583915831049847, 0.2434511320204682, 0.205776458190415, 0.1797253516123457, 0.18427679054925616, 0.1764106435228614, 0.176662896944899, 0.18547581006724345, 0.1739308978680243, 0.18220161822588055, 0.17698988311633856, 0.17972865447580366, 0.46122799337719633, 0.1813053810203331, 0.370133177946396, 0.40005845131686224, 0.2924976347655309, 0.5248162288514504, 0.16093208066758868, 0.304825993598388, 0.33303152085479737, 0.4603879285524154, 0.32521693634388726, 0.45675173211905606, 0.293770502128088, 0.26897929674211507, 0.19750555794804192, 0.36737611726920616, 0.16431780267773832, 0.36142411247873985, 0.18026637979602544, 0.1753581858140385, 0.1695908898774161, 0.18415678372104216, 0.1839049989410676, 0.17442390860765622, 0.19007749535453877, 0.1777953251458415, 0.18520673785047947, 0.08603819736137719, 0.0858873941109074, 0.08481860100127092, 0.0781435532282887, 0.08724418703662162, 0.08681184341156167, 0.0806993528601232, 0.09235073392578652, 0.07900293852183549]}, "mutation_prompt": null}
