{"id": "75a001ed-df71-4ea2-a7b6-1f6170338121", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(100, self.budget // 10)\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.f = 0.5  # DE mutation factor\n        self.cr = 0.9  # DE crossover probability\n        self.current_evaluations = 0\n\n    def __call__(self, func):\n        while self.current_evaluations < self.budget:\n            # Evaluate current particles\n            for i in range(self.swarm_size):\n                if self.current_evaluations < self.budget:\n                    score = func(self.particles[i])\n                    self.current_evaluations += 1\n                    if score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = score\n                        self.personal_best_positions[i] = np.copy(self.particles[i])\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = np.copy(self.particles[i])\n            \n            # Update velocities and positions in PSO manner\n            for i in range(self.swarm_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n                cognitive_component = r1 * (self.personal_best_positions[i] - self.particles[i])\n                social_component = r2 * (self.global_best_position - self.particles[i])\n                self.velocities[i] = 0.7 * self.velocities[i] + 1.5 * cognitive_component + 1.5 * social_component\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n            # Apply DE mutation and crossover\n            for i in range(self.swarm_size):\n                if self.current_evaluations < self.budget:\n                    indices = np.random.choice(self.swarm_size, 3, replace=False)\n                    x1, x2, x3 = self.particles[indices]\n                    mutant_vector = x1 + self.f * (x2 - x3)\n                    trial_vector = np.copy(self.particles[i])\n                    j_rand = np.random.randint(self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < self.cr or j == j_rand:\n                            trial_vector[j] = mutant_vector[j]\n                    trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                    trial_score = func(trial_vector)\n                    self.current_evaluations += 1\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial_vector\n                        if trial_score < self.global_best_score:\n                            self.global_best_score = trial_score\n                            self.global_best_position = trial_vector\n        return self.global_best_position", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) combined with Differential Evolution (DE) for adaptive exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.20364485305403157, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4222411064183116, 0.4354448407864635, 0.4352747901026528, 0.43451745281863796, 0.46121976272372167, 0.4212435369479328, 0.46716853100349565, 0.454120918043313, 0.4490213435546945, 0.07137657326396696, 0.05664974241171261, 0.04084869588330042, 0.0819586581944477, 0.06107239256069663, 0.0725343371114866, 0.047731803007006635, 0.09007697926950475, 0.03090775633074283, 0.1040748952440057, 0.0999513666064531, 0.11771515232287288, 0.10882038892109047, 0.09853538675960627, 0.09773767113347254, 0.10531195195922205, 0.12358055898219955, 0.0935681147496773, 0.0753850611686463, 0.07539786881231192, 0.09857303599490697, 0.10753402247839006, 0.0773266502502995, 0.08763375549767205, 0.11119643392099621, 0.10057246727894575, 0.08106265986903671, 0.9626298884934976, 0.9730939967528327, 0.9710950540077511, 0.9535935659750012, 0.9547283281269245, 0.9529777481220806, 0.9690337606104985, 0.9668130176323076, 0.955020509709178, 0.25153766322217075, 0.2376313301476779, 0.25287101852393945, 0.24616101747769548, 0.25894169391118427, 0.24402650180835528, 0.24137015145281837, 0.22423331537066993, 0.21845331336677454, 0.2249355320523605, 0.36407371976016634, 0.21150149374122973, 0.18780463253543833, 0.24288599912452735, 0.19862932344656414, 0.21131786734694757, 0.29284621577408765, 0.28557583801138775, 0.12721512282955993, 0.13262081278226456, 0.13360167397668088, 0.11439518748042177, 0.11266038980495852, 0.19079894213106208, 0.12665630575355913, 0.08577248917508351, 0.13600001887694746, 0.129241454016796, 0.04362829899685816, 0.12569085724605522, 0.10295473892466978, 0.15434819615070372, 0.11233705748559752, 0.0985277730081856, 0.16562068287498355, 0.0722494921604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015848685622525949, 9.999999999998899e-05, 9.999999999998899e-05, 0.005132668352828884, 0.005231471906127938, 0.06040126167896254, 0.04469363771341883, 0.11944188936796218, 0.07216685351580376, 0.06827488478732224, 0.04457499580433455, 0.0784802606368521, 0.04976463191784386, 0.013038510543722293, 0.010343470705599933, 0.013456292921112945, 0.013626387557537423, 0.020963687032693468, 0.010110960145180092, 0.012353984467832979, 0.011869561805129658, 0.012489351291227413, 0.017018454669270988, 0.07595765383568431, 0.06796272992387786, 0.09629320728453805, 0.09708272408393381, 0.07627502747810144, 0.06366082848681487, 0.05421020083171657, 0.041704182924966915, 0.045947972873568554, 0.3888186957570706, 0.37917349861320293, 0.38241687627788556, 0.4011976946839625, 0.3988524431845223, 0.3898877236659589, 0.38487111568286014, 0.3849044875166331, 0.404093020891087, 0.10829179551671153, 0.09591498675434418, 0.11472927290504431, 0.09669512157085625, 0.09302498348188804, 0.08184544897994017, 0.08161647639341185, 0.08821044374601983, 0.08582059517271523, 0.19381411507133062, 0.16265635804962697, 0.2194288593203526, 0.15540328808321902, 0.15248103532262847, 0.21672994555669367, 0.14572742074823508, 0.2106016614213002, 0.13969796268915524, 0.24832930715079893, 0.2598841575827082, 0.2781722629888591, 0.2639651343135674, 0.247920639163687, 0.26009937472535305, 0.2606893306244822, 0.27421830527898705, 0.2916020369041199, 0.18611779631642067, 0.1548053251662992, 0.198586902456801, 0.1448776626288374, 0.21019604291596927, 0.20290880527501098, 0.18565269874750223, 0.21492139332531646, 0.18743714441723824, 0.1993437564271039, 0.18802228815219768, 0.18989437978895463, 0.19791408685650191, 0.19184950063869866, 0.17049916859755254, 0.2260083559645042, 0.21380552655741947, 0.19720848839160476, 0.19497043651759238, 0.18775932355774316, 0.20471815706916296, 0.19430411505467837, 0.20165128774922403, 0.18575058491252616, 0.18301314828718085, 0.19805865822577318, 0.1935419053517039, 0.12730651290676887, 0.18218518724045796, 0.6190972969998544, 0.41984336559514446, 0.1909995116384594, 0.167452436464954, 0.13884216795770732, 0.16209921200024924, 0.536012833753532, 0.4735326594554806, 0.1675546326734555, 0.3686851039262935, 0.44272036811000604, 0.36864903420619843, 0.22008492977672334, 0.160796698909364, 0.1832501098799344, 0.2918311609249915, 0.1854663142025128, 0.19258789829961254, 0.1844460834589271, 0.18133327960544476, 0.19387922528938684, 0.18264458851555387, 0.192467897190714, 0.18328432128408, 0.1783942726634088, 0.07956858361876873, 0.07407669772428727, 0.0832871460431106, 0.08199311509148899, 0.07883164265168674, 0.08648509983812891, 0.07995027173649127, 0.08630000255035797, 0.07554451668157325]}, "mutation_prompt": null}
{"id": "f5df8ba9-6ee6-4e1b-89ca-279803610a98", "solution": "import numpy as np\n\nclass ImprovedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(100, self.budget // 10)\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.f = 0.5  # DE mutation factor\n        self.cr = 0.9  # DE crossover probability\n        self.current_evaluations = 0\n    \n    def adaptive_mutation(self, score, best_score):\n        return 0.5 + 0.5 * (score - best_score) / (np.abs(best_score) + 1e-8)\n\n    def __call__(self, func):\n        while self.current_evaluations < self.budget:\n            # Evaluate current particles\n            for i in range(self.swarm_size):\n                if self.current_evaluations < self.budget:\n                    score = func(self.particles[i])\n                    self.current_evaluations += 1\n                    if score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = score\n                        self.personal_best_positions[i] = np.copy(self.particles[i])\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best_position = np.copy(self.particles[i])\n            \n            # Update velocities and positions in PSO manner\n            for i in range(self.swarm_size):\n                r1 = np.random.uniform(0, 1, self.dim)\n                r2 = np.random.uniform(0, 1, self.dim)\n                cognitive_component = r1 * (self.personal_best_positions[i] - self.particles[i])\n                social_component = r2 * (self.global_best_position - self.particles[i])\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * cognitive_component + 1.5 * social_component\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n            # Apply DE mutation and crossover\n            for i in range(self.swarm_size):\n                if self.current_evaluations < self.budget:\n                    indices = np.random.choice(self.swarm_size, 3, replace=False)\n                    x1, x2, x3 = self.particles[indices]\n                    adaptive_f = self.adaptive_mutation(self.personal_best_scores[i], self.global_best_score)\n                    mutant_vector = x1 + adaptive_f * (x2 - x3)\n                    trial_vector = np.copy(self.particles[i])\n                    j_rand = np.random.randint(self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < self.cr or j == j_rand:\n                            trial_vector[j] = mutant_vector[j]\n                    trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                    trial_score = func(trial_vector)\n                    self.current_evaluations += 1\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial_vector\n                        if trial_score < self.global_best_score:\n                            self.global_best_score = trial_score\n                            self.global_best_position = trial_vector\n        return self.global_best_position", "name": "ImprovedHybridPSO_DE", "description": "An improved Hybrid PSO-DE with adaptive mutation and dynamic parameter tuning for enhanced convergence.", "configspace": "", "generation": 1, "fitness": 0.24067465144270686, "feedback": "", "error": "", "parent_id": "75a001ed-df71-4ea2-a7b6-1f6170338121", "metadata": {"aucs": [0.5952239630415684, 0.5948753228515198, 0.6207154060541179, 0.6191159265374879, 0.6417865994777903, 0.6128006040858314, 0.6045619785281254, 0.6096110531290453, 0.6154239655862268, 0.2557684437903045, 0.07923381723787404, 0.21317421618630783, 0.21788387768134887, 0.22117071113765574, 0.2722342620057139, 0.040425903519081485, 0.014949268294867202, 0.24906823294140112, 0.13424878328131284, 0.12125735879238542, 0.13438028231149435, 0.13658146630923385, 0.11940403182996961, 0.12387096570507616, 0.12825935851388726, 0.16658647216762534, 0.11382798104050995, 0.08632914733592167, 0.1097949165218719, 0.11171930232789107, 0.11337762696976805, 0.10501909641957885, 0.13315334391944722, 0.1518756816611141, 0.12116893311764776, 0.12392945369640362, 0.9751289363932136, 0.9863806655165898, 0.9864120072867659, 0.9550323796614323, 0.9505502183797514, 0.9476158444984448, 0.9856263866477476, 0.9715434153760156, 0.9545231501645889, 0.3540074389550093, 0.30682150297477717, 0.3637461016440139, 0.28988686976454325, 0.322408106533687, 0.29137723818867267, 0.3544965206286842, 0.36196724739079755, 0.3406506361887679, 0.22590214284160282, 0.38935789115831954, 0.22292993232919422, 0.20545360050073735, 0.26256676794329936, 0.18778540860829762, 0.15957530954905086, 0.6149681769907653, 0.22524153834568283, 0.1863877910111763, 0.18371937636932756, 0.22172662982535796, 0.14432829097008582, 0.15781105133076057, 0.16160892799543303, 0.1601331574636421, 0.13605225931018172, 0.16730824115892606, 0.10495474380934067, 0.04616259807993961, 0.07405187530106072, 0.17893797081936247, 0.18257439506626294, 0.25137317664387215, 0.249661726273269, 0.2051582259828787, 0.2015836397197608, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003187254128335093, 9.999999999998899e-05, 0.000741071820926642, 0.0038779703564633117, 9.999999999998899e-05, 9.999999999998899e-05, 0.09286879166608508, 0.03146736090095803, 0.12414842539959225, 0.08022768165349714, 0.04730211836422493, 0.013245606334796323, 0.0526263448398846, 0.04720184973538322, 0.043761941703459706, 0.03358519670623483, 0.09531132438461243, 0.032348563704309496, 0.0785396455808357, 0.17124490229487987, 0.050963316381453794, 0.14476670953761417, 0.16147329564979296, 0.08761802035291133, 0.11047342076798683, 0.06397347991339719, 0.1330673337181263, 0.033820460945803266, 0.08853114505485404, 0.08332897866779898, 0.08764664440724079, 0.04525732611942823, 0.04846819085719323, 0.4681912326181734, 0.4570729759782115, 0.4661275100647664, 0.4581753864395235, 0.4585256269527537, 0.46028062331210484, 0.44733761607484623, 0.4656088426805267, 0.45280219528610566, 0.1141566626188143, 0.13412162949787887, 0.08022706388640966, 0.1166307235889864, 0.12024947412814802, 0.12005657069744646, 0.09047513793613704, 0.07873763574888748, 0.1026491830633367, 0.17147293531116736, 0.17292003302715042, 0.19549510218780863, 0.18188639674667062, 0.251531578900524, 0.17709891377478593, 0.1417250605577819, 0.2109363034576881, 0.2008686881444831, 0.346131265702028, 0.28989412529935843, 0.27104053119936267, 0.27306915772670604, 0.24703404036937882, 0.3516217097737363, 0.33349963739795974, 0.342167967338491, 0.35345149576147317, 0.221415005206829, 0.14929203182534512, 0.2223798978925996, 0.1931142729580846, 0.22786853804642826, 0.2647410389571532, 0.1945765766948293, 0.17784403848285602, 0.15677678072781076, 0.21607185788127992, 0.21253332703469208, 0.19077423838076935, 0.20155688929437898, 0.21255974906202146, 0.18472929958927675, 0.2338807517937357, 0.22003848402653836, 0.21501588139902938, 0.2311460522027432, 0.36050852561961055, 0.23531741456418553, 0.21571178593819573, 0.19996537240734547, 0.21409788015880205, 0.18273848259584025, 0.20676610035427845, 0.2017792765365446, 0.1595082603638095, 0.18347736674399562, 0.7280856942493283, 0.1607870091387822, 0.19567348415519104, 0.16366232716390983, 0.1406910498478, 0.16952214995336867, 0.7872414372213289, 0.5096800756455788, 0.16806338970462842, 0.20102154947887507, 0.5224435508842155, 0.44001987373286244, 0.3577636194899505, 0.16370259989230596, 0.2014256664274775, 0.30274903868460423, 0.18234503354331433, 0.1891500645080202, 0.20145085370792426, 0.1858912556012886, 0.18013245761434138, 0.1936346632903323, 0.19089318224092722, 0.20147353392720635, 0.1873827580417482, 0.08405987058846043, 0.09681413897804891, 0.08251690547474155, 0.08426538542154016, 0.08307173826943326, 0.08345120703919406, 0.08018660166287295, 0.08349053338637513, 0.08642269383901202]}, "mutation_prompt": null}
