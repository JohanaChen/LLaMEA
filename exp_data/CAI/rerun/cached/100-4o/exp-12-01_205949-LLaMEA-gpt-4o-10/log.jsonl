{"id": "8519b30d-7173-4e33-ad94-1ecb8dc3af3b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 * dim  # Initial population size\n        self.cr = 0.9  # Crossover probability\n        self.f = 0.8  # Differential weight\n        self.scaled_budget = max(1, int(budget / 10))  # Budget scaling factor\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.pop_size\n        \n        while eval_count < self.budget:\n            new_population = np.copy(population)\n            for i in range(self.pop_size):\n                indices = np.random.choice(list(range(i)) + list(range(i+1, self.pop_size)), 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = x0 + self.f * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.cr\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, population[i])\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n\n            population = new_population\n            \n            # Dynamic adjustment of differential weight\n            self.f = 0.5 + (0.5 * eval_count / self.budget)\n\n            # Adaptive population resizing\n            if eval_count % self.scaled_budget == 0 and self.pop_size > self.dim:\n                survivors = int(self.pop_size * 0.9)\n                best_indices = np.argsort(fitness)[:survivors]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n                self.pop_size = survivors\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with a dynamic mutation strategy and resizing population for efficient exploration and exploitation across diverse optimization landscapes.", "configspace": "", "generation": 0, "fitness": 0.3247704786786425, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7527128531222157, 0.7220928131207798, 0.7391431659779784, 0.758129194289068, 0.7525179243337046, 0.7427119801562005, 0.7403215043750957, 0.760092635818157, 0.7509689811606783, 0.5163178543339219, 0.5425642456417619, 0.49425520268516454, 0.5174559059699783, 0.5176049850838138, 0.5635004590538893, 0.5363652640145393, 0.5447620498937791, 0.48217164425887915, 0.12534311102085394, 0.12293329589497914, 0.11717918265477933, 0.1159864544906628, 0.09079071227742608, 0.11344844849485103, 0.1077879093168822, 0.11034044688587441, 0.1369619664839271, 0.10797407921549407, 0.09906708724650892, 0.0977445370388319, 0.1011076293372124, 0.09370746395273033, 0.11095330339991194, 0.09388811198616209, 0.1009680552679263, 0.10011639932062322, 0.8721175325159192, 0.8860515873703911, 0.8843167765228991, 0.9271273830817963, 0.9021981423448885, 0.8434584960250171, 0.9457850382843812, 0.9636311742247665, 0.9051680122779274, 0.3630880670467066, 0.3921159818909018, 0.34259636714783315, 0.3564089417212918, 0.3794288294482763, 0.33139963338321865, 0.36694048326048845, 0.37141516389898765, 0.36193519224043524, 0.7251532381159166, 0.6938422195197824, 0.6979916705442648, 0.7299605130939844, 0.7879052567365846, 0.7774050245683936, 0.7717442653591025, 0.6575098765378722, 0.6863020964683824, 0.25067088059250997, 0.28211440154806555, 0.2777852058890521, 0.3369896831371769, 0.25684825587420024, 0.25853051469783916, 0.3105016002677419, 0.2595885398912189, 0.2624223208738552, 0.2943101188676356, 0.2778083549118687, 0.27868417772287, 0.2541426445234535, 0.2343230955809369, 0.2368933848555177, 0.28488913574606745, 0.2705829179641427, 0.2778736143499644, 0.2392113117044311, 0.2567395510078534, 0.2700536801458103, 0.22454302307153828, 0.24163814884115664, 0.24571683325745053, 0.23182442017526173, 0.2607000217697535, 0.22353966369787492, 0.4110761281270684, 0.36913528943387364, 0.40135883811473916, 0.3882291117806883, 0.3592943894205054, 0.38644828051878666, 0.4037510885475316, 0.4103745907609313, 0.4187800858348567, 0.08471031579843424, 0.05927623769241186, 0.05486284368879624, 0.06010950766008427, 0.1312891388665559, 0.1505908621968387, 0.12937083234481506, 0.1151777358675381, 0.06590465382139776, 0.23008204610516136, 0.21398267874219234, 0.19036440839197577, 0.22170941494292307, 0.22101280401886447, 0.21739344210177092, 0.21560359574891697, 0.2277797745653214, 0.2270071638283836, 0.5792503810743944, 0.630890176499116, 0.5953782788285271, 0.6021198954471247, 0.6145973478105009, 0.6142771880103259, 0.5734035410975888, 0.572772393232984, 0.5911718709954186, 0.08552048362009079, 0.0969845190043801, 0.09296550584258223, 0.104418737723326, 0.0846769966546359, 0.08425690092097571, 0.10073762897424221, 0.10582190320889862, 0.09609899909407538, 0.1567968898898161, 0.1413646307232027, 0.15248771068809142, 0.14247638031448628, 0.14902185618192054, 0.1359044833019034, 0.16227777104916752, 0.13490303567027606, 0.14330160783614376, 0.34329855958802646, 0.3347385889640869, 0.3338739664420066, 0.32967371580035765, 0.3190175658042679, 0.31803765574445075, 0.34379956944336276, 0.3616256163373136, 0.3440359432544785, 0.2558304775977699, 0.2456158481353663, 0.25388748141784134, 0.2638838284639734, 0.25953823694746503, 0.2601350175576497, 0.2544002690491596, 0.2703819874944696, 0.28790011107731617, 0.1972434429129002, 0.19565499997404667, 0.1817011547415358, 0.17530207595784564, 0.2099231983047457, 0.20166004344616584, 0.20655382666705024, 0.1785827220659687, 0.20324386658046112, 0.19692500921686473, 0.18376581377836243, 0.18738808961339315, 0.24808573432346104, 0.17721780023647737, 0.18624028636419454, 0.18578258702087402, 0.17526964266265532, 0.18223264900726976, 0.6345548518029258, 0.7347881205974607, 0.18913665504097066, 0.697330429091316, 0.5141301734547103, 0.6394950061891621, 0.17637293189264036, 0.3053104745399392, 0.17347812866113888, 0.1638532446290788, 0.20444415062252697, 0.1951728654002688, 0.16221050299490047, 0.586299370917622, 0.6237242329629891, 0.20624923789840688, 0.20382388062988743, 0.20685326421559636, 0.1901007147247482, 0.18456737668195167, 0.1728562261266643, 0.2026876336905612, 0.1749402522507687, 0.18627094728847482, 0.18212860267331576, 0.18754028740139195, 0.18076811219977174, 0.07670860080966502, 0.08643453837336235, 0.0729296315482878, 0.08206645686684588, 0.07369449723559407, 0.07549503550818115, 0.07877071088683585, 0.08792755584814749, 0.07439961615058455]}, "mutation_prompt": null}
{"id": "acdf4246-1a4a-41c9-94ac-5484ead151b4", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 * dim  # Initial population size\n        self.cr = 0.9  # Crossover probability\n        self.f = 0.8  # Differential weight\n        self.scaled_budget = max(1, int(budget / 10))  # Budget scaling factor\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.pop_size\n        \n        while eval_count < self.budget:\n            new_population = np.copy(population)\n            for i in range(self.pop_size):\n                indices = np.random.choice(list(range(i)) + list(range(i+1, self.pop_size)), 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = x0 + self.f * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.cr\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover, mutant, population[i])\n\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                if trial_fitness < fitness[i]:\n                    new_population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n\n            population = new_population\n            \n            # Dynamic adjustment of differential weight\n            self.f = 0.5 + (0.5 * eval_count / self.budget)\n\n            # Adaptive population resizing\n            if eval_count % self.scaled_budget == 0 and self.pop_size > self.dim:\n                survivors = int(self.pop_size * 0.9)\n                best_indices = np.argsort(fitness)[:survivors]\n                population = population[best_indices]\n                fitness = fitness[best_indices]\n                self.pop_size = survivors\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with a dynamic mutation strategy and resizing population for efficient exploration and exploitation across diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8519b30d-7173-4e33-ad94-1ecb8dc3af3b", "metadata": {"aucs": [0.7527128531222157, 0.7220928131207798, 0.7391431659779784, 0.758129194289068, 0.7525179243337046, 0.7427119801562005, 0.7403215043750957, 0.760092635818157, 0.7509689811606783, 0.5163178543339219, 0.5425642456417619, 0.49425520268516454, 0.5174559059699783, 0.5176049850838138, 0.5635004590538893, 0.5363652640145393, 0.5447620498937791, 0.48217164425887915, 0.12534311102085394, 0.12293329589497914, 0.11717918265477933, 0.1159864544906628, 0.09079071227742608, 0.11344844849485103, 0.1077879093168822, 0.11034044688587441, 0.1369619664839271, 0.10797407921549407, 0.09906708724650892, 0.0977445370388319, 0.1011076293372124, 0.09370746395273033, 0.11095330339991194, 0.09388811198616209, 0.1009680552679263, 0.10011639932062322, 0.8721175325159192, 0.8860515873703911, 0.8843167765228991, 0.9271273830817963, 0.9021981423448885, 0.8434584960250171, 0.9457850382843812, 0.9636311742247665, 0.9051680122779274, 0.3630880670467066, 0.3921159818909018, 0.34259636714783315, 0.3564089417212918, 0.3794288294482763, 0.33139963338321865, 0.36694048326048845, 0.37141516389898765, 0.36193519224043524, 0.7251532381159166, 0.6938422195197824, 0.6979916705442648, 0.7299605130939844, 0.7879052567365846, 0.7774050245683936, 0.7717442653591025, 0.6575098765378722, 0.6863020964683824, 0.25067088059250997, 0.28211440154806555, 0.2777852058890521, 0.3369896831371769, 0.25684825587420024, 0.25853051469783916, 0.3105016002677419, 0.2595885398912189, 0.2624223208738552, 0.2943101188676356, 0.2778083549118687, 0.27868417772287, 0.2541426445234535, 0.2343230955809369, 0.2368933848555177, 0.28488913574606745, 0.2705829179641427, 0.2778736143499644, 0.2392113117044311, 0.2567395510078534, 0.2700536801458103, 0.22454302307153828, 0.24163814884115664, 0.24571683325745053, 0.23182442017526173, 0.2607000217697535, 0.22353966369787492, 0.4110761281270684, 0.36913528943387364, 0.40135883811473916, 0.3882291117806883, 0.3592943894205054, 0.38644828051878666, 0.4037510885475316, 0.4103745907609313, 0.4187800858348567, 0.08471031579843424, 0.05927623769241186, 0.05486284368879624, 0.06010950766008427, 0.1312891388665559, 0.1505908621968387, 0.12937083234481506, 0.1151777358675381, 0.06590465382139776, 0.23008204610516136, 0.21398267874219234, 0.19036440839197577, 0.22170941494292307, 0.22101280401886447, 0.21739344210177092, 0.21560359574891697, 0.2277797745653214, 0.2270071638283836, 0.5792503810743944, 0.630890176499116, 0.5953782788285271, 0.6021198954471247, 0.6145973478105009, 0.6142771880103259, 0.5734035410975888, 0.572772393232984, 0.5911718709954186, 0.08552048362009079, 0.0969845190043801, 0.09296550584258223, 0.104418737723326, 0.0846769966546359, 0.08425690092097571, 0.10073762897424221, 0.10582190320889862, 0.09609899909407538, 0.1567968898898161, 0.1413646307232027, 0.15248771068809142, 0.14247638031448628, 0.14902185618192054, 0.1359044833019034, 0.16227777104916752, 0.13490303567027606, 0.14330160783614376, 0.34329855958802646, 0.3347385889640869, 0.3338739664420066, 0.32967371580035765, 0.3190175658042679, 0.31803765574445075, 0.34379956944336276, 0.3616256163373136, 0.3440359432544785, 0.2558304775977699, 0.2456158481353663, 0.25388748141784134, 0.2638838284639734, 0.25953823694746503, 0.2601350175576497, 0.2544002690491596, 0.2703819874944696, 0.28790011107731617, 0.1972434429129002, 0.19565499997404667, 0.1817011547415358, 0.17530207595784564, 0.2099231983047457, 0.20166004344616584, 0.20655382666705024, 0.1785827220659687, 0.20324386658046112, 0.19692500921686473, 0.18376581377836243, 0.18738808961339315, 0.24808573432346104, 0.17721780023647737, 0.18624028636419454, 0.18578258702087402, 0.17526964266265532, 0.18223264900726976, 0.6345548518029258, 0.7347881205974607, 0.18913665504097066, 0.697330429091316, 0.5141301734547103, 0.6394950061891621, 0.17637293189264036, 0.3053104745399392, 0.17347812866113888, 0.1638532446290788, 0.20444415062252697, 0.1951728654002688, 0.16221050299490047, 0.586299370917622, 0.6237242329629891, 0.20624923789840688, 0.20382388062988743, 0.20685326421559636, 0.1901007147247482, 0.18456737668195167, 0.1728562261266643, 0.2026876336905612, 0.1749402522507687, 0.18627094728847482, 0.18212860267331576, 0.18754028740139195, 0.18076811219977174, 0.07670860080966502, 0.08643453837336235, 0.0729296315482878, 0.08206645686684588, 0.07369449723559407, 0.07549503550818115, 0.07877071088683585, 0.08792755584814749, 0.07439961615058455]}, "mutation_prompt": null}
