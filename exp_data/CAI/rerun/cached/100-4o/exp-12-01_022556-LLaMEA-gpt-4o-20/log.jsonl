{"id": "464e0945-21dd-4b62-a44d-f1e80e081df7", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.c1 = 1.5  # cognitive parameter\n        self.c2 = 1.5  # social parameter\n        self.w = 0.7   # inertia weight\n        self.F = 0.8   # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, \n                                      (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        \n        # Evaluate the initial swarm\n        scores = np.array([func(pos) for pos in positions])\n        num_evaluations = self.swarm_size\n        \n        # Update personal bests\n        improved = scores < personal_best_scores\n        personal_best_positions[improved] = positions[improved]\n        personal_best_scores[improved] = scores[improved]\n        \n        # Initialize the global best\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # PSO update\n            r1, r2 = np.random.rand(2)\n            velocities = self.w * velocities + \\\n                         self.c1 * r1 * (personal_best_positions - positions) + \\\n                         self.c2 * r2 * (global_best_position - positions)\n            positions += velocities\n            \n            # Clip positions to bounds\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n            \n            # DE mutation and crossover\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                a, b, c = positions[idxs]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.copy(positions[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == self.dim - 1:\n                        trial[j] = mutant_vector[j]\n                \n                trial_score = func(trial)\n                num_evaluations += 1\n                \n                if trial_score < scores[i]:\n                    positions[i] = trial\n                    scores[i] = trial_score\n\n            # Update personal and global bests\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n            \n            global_best_index = np.argmin(personal_best_scores)\n            global_best_position = personal_best_positions[global_best_index]\n        \n        return global_best_position, personal_best_scores[global_best_index]", "name": "HybridPSO_DE", "description": "Utilizing a hybrid algorithm integrating Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced global exploration and local exploitation.", "configspace": "", "generation": 0, "fitness": 0.3713122479489045, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8193215472463673, 0.8341776195165549, 0.8096919208509167, 0.18337488499913612, 0.189671402220004, 0.8116652699568844, 0.8131438902931903, 0.829055089316103, 0.8163674738438114, 0.5248503246850931, 0.6503907099405786, 0.3745791156364513, 0.6313286888456862, 0.5420427434223909, 0.4927660647962123, 0.642266762364674, 0.6597038896040968, 0.5089229633349328, 0.14278779965923027, 0.11608392375972887, 0.10803340694724317, 0.1471786445873179, 0.17014389762937698, 0.11476923550851936, 0.1537453124657413, 0.043572183453022606, 0.13703834515692503, 0.13513641657317388, 0.1089405913531345, 0.11801974914485358, 0.07991908030684658, 0.10744486486231908, 0.10996045421611966, 0.007464943827497295, 0.13182706333361915, 0.14199645590322596, 0.9912802985893711, 0.9905024226137837, 0.9882721781715298, 0.9834535598494111, 0.9912637519876911, 0.9884305933660438, 0.9914860711397259, 0.9889601109153668, 0.9875760910249455, 0.4838936944078125, 0.5290278268537363, 0.6201452533149256, 0.20913185534606726, 0.6539738176288256, 0.6228517945781877, 0.11638932288518644, 0.5900349913335747, 0.08763932153343268, 0.8886969462401686, 0.22591853409702178, 0.8892643817515139, 0.22105032064120456, 0.16089588425185697, 0.21301759063525694, 0.8245449462689377, 0.8618224264004879, 0.23249355586896392, 0.7201744941908472, 0.7348292657502674, 0.42430512209055327, 0.5156332761098584, 0.5341428228038367, 0.13288356035499616, 0.133401710452543, 0.5707345697839827, 0.5601442047098997, 0.5380892651000497, 0.05273641661481632, 0.5365676060294573, 0.6118894698702328, 0.3563364339920734, 0.5000671478240813, 0.11679260887769616, 0.48541624598218924, 0.12004842608776034, 0.10788573118923683, 0.3968337726740637, 0.21420246866354375, 0.03274711023734456, 9.999999999998899e-05, 0.2483339976525778, 0.44833887986642873, 0.3727504121531757, 0.4925063658889619, 0.4628319264605105, 0.45371804437665997, 0.4434772243935078, 0.5807831921554568, 0.16862201494868445, 0.2985865178551744, 0.6729808930095873, 0.2474934608906444, 0.3523597669165337, 0.04686226753086342, 9.999999999998899e-05, 0.06973623573577714, 0.08632004250025782, 0.3330514497026015, 0.1578573118396116, 0.09146134235145587, 0.39626549987583937, 0.07523935282028937, 0.4526174891308483, 0.4095936246217816, 0.40540174190226197, 0.46083035844623355, 0.2596019704439273, 0.37924043929630347, 0.08194083461472657, 9.999999999998899e-05, 0.3565699117417356, 0.7307935643019383, 0.7338482395868469, 0.7209620491354535, 0.7644859898321641, 0.7593944848006452, 0.7133776652966723, 0.7974296467068012, 0.7790256567009384, 0.7421900474586323, 0.14292032772623153, 0.07329539145547082, 0.12697487147322595, 0.13571711219752958, 0.08922298670406159, 0.1490323447626397, 0.10783816663854817, 0.13981417051896294, 0.10344210141448007, 0.16663175213920478, 0.23650875453380082, 0.1764785818388005, 0.24889508667284843, 0.7307936730872521, 0.2146297133778582, 0.20592164971808147, 0.6581578377238121, 0.17050635185647112, 0.4707681454514291, 0.20507498510930267, 0.5162387799775415, 0.5662944070130598, 0.5704504999002411, 0.5015320255810936, 0.5672036741900932, 0.5556134228792651, 0.4715336701851742, 0.20354492966525417, 0.18722826074538412, 0.4084214322144244, 0.4481954002538737, 0.19932591072001038, 0.38802611261775866, 0.4196486027173735, 0.49048063938041253, 0.31183689358538635, 0.1871378638483887, 0.15222331826855207, 0.20463367370342012, 0.20383880280567268, 0.15654235053418064, 0.21068023616067155, 0.20530154934302858, 0.17728354773071364, 0.21185139243982765, 0.20380378887677753, 0.19231201023384858, 0.2075970195115837, 0.19353027286564561, 0.18676405282874164, 0.1852367637977259, 0.18751774829985324, 0.18139127080265005, 0.21555898374409788, 0.1051504622444478, 0.1678598665847043, 0.15441806885268983, 0.1733773510377392, 0.1981567559603219, 0.19882383271867732, 0.09992589358369208, 0.16891495178778082, 0.9176862334039485, 0.8854804862216461, 0.8564060731860433, 0.8208009930742923, 0.8613930307099525, 0.8633637208751862, 0.1518418294931031, 0.1046633646110926, 0.21235745980785192, 0.8840747897766874, 0.2005067977504169, 0.19553980864887044, 0.1956989011677044, 0.1895837019614809, 0.20898045208108373, 0.20185885396560133, 0.1812282455105214, 0.2037907838112999, 0.1996122081779097, 0.09422096553590309, 0.0880909726892738, 0.07498199418439466, 0.09387545592390711, 0.09215838941950183, 0.08509638592991453, 0.08344119101581204, 0.09342996229334799, 0.0928100975569991]}, "mutation_prompt": null}
{"id": "fe0a3162-d523-4934-b832-65b7f28c20f6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.c1 = 1.5  # cognitive parameter\n        self.c2 = 1.5  # social parameter\n        self.w = 0.7   # inertia weight\n        self.F = 0.8   # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def chaotic_init(self, size, dim):\n        x = np.random.uniform(0, 1, (size, dim))\n        return self.lower_bound + (self.upper_bound - self.lower_bound) * np.abs(np.sin(np.pi * x))\n\n    def __call__(self, func):\n        # Initialize the swarm using chaotic map\n        positions = self.chaotic_init(self.swarm_size, self.dim)\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        \n        # Evaluate the initial swarm\n        scores = np.array([func(pos) for pos in positions])\n        num_evaluations = self.swarm_size\n        \n        # Update personal bests\n        improved = scores < personal_best_scores\n        personal_best_positions[improved] = positions[improved]\n        personal_best_scores[improved] = scores[improved]\n        \n        # Initialize the global best\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        \n        while num_evaluations < self.budget:\n            # Adaptive weight\n            self.w = 0.5 + 0.4 * (1 - num_evaluations / self.budget)\n            r1, r2 = np.random.rand(2)\n            velocities = self.w * velocities + \\\n                         self.c1 * r1 * (personal_best_positions - positions) + \\\n                         self.c2 * r2 * (global_best_position - positions)\n            positions += velocities\n            \n            # Clip positions to bounds\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n            \n            # DE mutation and crossover\n            for i in range(self.swarm_size):\n                if num_evaluations >= self.budget:\n                    break\n                idxs = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                a, b, c = positions[idxs]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.copy(positions[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == self.dim - 1:\n                        trial[j] = mutant_vector[j]\n                \n                trial_score = func(trial)\n                num_evaluations += 1\n                \n                if trial_score < scores[i]:\n                    positions[i] = trial\n                    scores[i] = trial_score\n\n            # Update personal and global bests\n            improved = scores < personal_best_scores\n            personal_best_positions[improved] = positions[improved]\n            personal_best_scores[improved] = scores[improved]\n            \n            global_best_index = np.argmin(personal_best_scores)\n            global_best_position = personal_best_positions[global_best_index]\n        \n        return global_best_position, personal_best_scores[global_best_index]", "name": "HybridPSO_DE", "description": "Introducing adaptive parameters and chaotic initialization into HybridPSO_DE for improved convergence and exploration.", "configspace": "", "generation": 1, "fitness": 0.28044814964327264, "feedback": "", "error": "", "parent_id": "464e0945-21dd-4b62-a44d-f1e80e081df7", "metadata": {"aucs": [0.12523950573960263, 0.6547700066327202, 0.5940496052472128, 0.7100487633893768, 0.18941319952086333, 0.632763409085396, 0.18062546278056013, 0.6798239358702967, 0.6246233066784144, 0.5007996661883605, 0.2501419221717026, 0.050274333908171265, 0.4865288961486438, 0.302498151148597, 0.36394260443520965, 0.014539389244021872, 0.36125217163892986, 0.3490928482014948, 0.09802677795026082, 0.06494949990888177, 0.12930653867436903, 0.10944455243380546, 0.13115525957477092, 0.11521186150491902, 0.0478095829050178, 0.328557309757498, 0.11387061524973119, 0.12400998315334544, 0.08929808669316952, 0.1026652539623949, 0.09729916652877546, 0.12460450681171498, 0.08827080411253496, 9.999999999998899e-05, 0.0461283588639424, 0.0863645995656841, 0.988638486376059, 0.9894690373443751, 0.9908930096915607, 0.9932138072460598, 0.9926582934070936, 0.9857479434199761, 0.9907567464939642, 0.9911740858256077, 0.9649198774569548, 0.05819689705258202, 0.5004120274485586, 0.4556656309257787, 0.5125222488411803, 0.43894333761949667, 0.4392596446944047, 0.05169571403407758, 0.08764196357628096, 0.38953594924039414, 0.16523419848331722, 0.6841764005540674, 0.16840533434036642, 0.7239452027191831, 0.17423370704233299, 0.19910651307785998, 0.7015716941437524, 0.17035662760484005, 0.6391875548962989, 0.531996444351796, 0.4323626195031982, 0.33558224492435096, 0.12414279847417387, 0.4167017224691667, 0.0944931689333931, 0.4686674469253853, 0.3802370929275011, 0.30063018690401755, 0.405537647575149, 0.3808646214772109, 0.38575341996595147, 0.4918461733260736, 0.36560482309574693, 0.3390114554229756, 0.38954334770651433, 0.3716168928722221, 0.2847365710415032, 0.002871072231721117, 0.3269020370977719, 0.05204902837988723, 0.2523625435792677, 9.999999999998899e-05, 9.999999999998899e-05, 0.1358914730139109, 0.15386688930566306, 0.30374344051591307, 0.07845926400327174, 0.22533666487185666, 0.14476820883028885, 0.30661562307654944, 0.09954052377832834, 0.29966039896906094, 0.1116165023834852, 0.08164293543198076, 0.25367896795621514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3190002679892162, 0.0827187110803368, 0.22830989216359987, 0.05330206577817809, 0.20171556868307217, 0.12271795609528635, 0.22401611803382016, 0.2903437961029226, 0.253099525297818, 0.004771554536951439, 0.2986609215084163, 0.03346792219874384, 0.15382087812597833, 0.27638512376334057, 0.07014305599597248, 0.6561178225922407, 0.13250731530374704, 0.5169037859790717, 0.6608395670098023, 0.6578358409084151, 0.5773545755587403, 0.10333551576265565, 0.5975236480329761, 0.5574129666561389, 0.0630094161916166, 0.12085754089739476, 0.11614114080041271, 0.10044212691825483, 0.1364176250683835, 0.11953880888616242, 0.08665145025725962, 0.41620708293469244, 0.09552582700385881, 0.17685042419860275, 0.4604654517354032, 0.33328416599551536, 0.32505118678106304, 0.1545240739434408, 0.2165467329704719, 0.21710634311710053, 0.33579852137864685, 0.1514291283474668, 0.4742996244649199, 0.4156376991526758, 0.4014919854233976, 0.4722949535763946, 0.3896331003286224, 0.354485639151475, 0.4448865913201414, 0.43806440174246875, 0.2082459605269531, 0.23321269754524332, 0.22625094581619165, 0.2649685303596623, 0.19617545993044627, 0.19140193712187525, 0.1859402908290413, 0.36650670301887744, 0.24182074765297235, 0.3140321488659319, 0.16233557033760715, 0.19685746094642742, 0.20682051373201238, 0.20505160315513027, 0.22052152832453675, 0.1915087560465778, 0.1925136737974782, 0.18338459023276021, 0.20503001339702442, 0.22615935925188002, 0.21993066200617484, 0.18543652032219193, 0.2269736553048416, 0.19257769440390904, 0.1763120331683049, 0.1963903050365048, 0.18431950163171573, 0.19652707798043612, 0.2000724097566139, 0.15969785885114418, 0.17768143121072422, 0.16383364111559529, 0.18102605030664087, 0.16746952480939203, 0.16553356495393423, 0.1403070615864841, 0.1404342473036142, 0.5021369026220815, 0.12371343612282948, 0.6448866328953413, 0.707299188229489, 0.16373555976761855, 0.1681324518138252, 0.11699003560230525, 0.19929499737430634, 0.12523220396717838, 0.1816269155269684, 0.21544966205054605, 0.20855596028762025, 0.1800495392528626, 0.1756279922768459, 0.1848267900043885, 0.20433530097990238, 0.18580041364029432, 0.19832195902105687, 0.09756452175785002, 0.09148712267182257, 0.0783898709276345, 0.07114056916617706, 0.1022091944141541, 0.0755776596591824, 0.0812787134070182, 0.09715959591820778, 0.06987384465092417]}, "mutation_prompt": null}
