{"id": "28706d4b-81b2-425b-90cd-d8d2829b3d49", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n        self.temperature = 100.0  # Initial temperature for annealing\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_spent = self.population_size\n\n        while budget_spent < self.budget:\n            for i in range(self.population_size):\n                if budget_spent >= self.budget:\n                    break\n\n                # Differential Evolution mutation and crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = population[a] + self.f * (population[b] - population[c])\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n                crossover = np.random.rand(self.dim) < self.cr\n                offspring = np.where(crossover, mutant, population[i])\n\n                # Evaluate offspring and apply Simulated Annealing acceptance\n                offspring_fitness = func(offspring)\n                budget_spent += 1\n                delta = offspring_fitness - fitness[i]\n                if delta < 0 or np.exp(-delta / self.temperature) > np.random.rand():\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n\n            # Decrease temperature\n            self.temperature *= 0.99\n\n        return population[np.argmin(fitness)]\n\n# Example usage:\n# optimizer = HybridDESA(budget=10000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HybridDESA", "description": "A hybrid metaheuristic combining Differential Evolution and Simulated Annealing to effectively balance exploration and exploitation in a diverse search space.", "configspace": "", "generation": 0, "fitness": 0.15414031547719784, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.18415222634959183, 0.15429839046907057, 0.1713477846123449, 0.19407517281025144, 0.18535792917004545, 0.19511882737051434, 0.20882192132181499, 0.17807810564103055, 0.17505674820713335, 0.12733553399861142, 0.1372420575773473, 0.1285733466440795, 0.1426220396825436, 0.13347504119406095, 0.1228003557043823, 0.12179773136107874, 0.1279605394290142, 0.12031294137484128, 0.07578543100746538, 0.058929938353363465, 0.053739095798953196, 0.060165991036750355, 0.055512906649473726, 0.05997787949800004, 0.0684572449615023, 0.06391383553972718, 0.05728385670509106, 0.05721023092952404, 0.0457031444186341, 0.054754472060201675, 0.05762714834673166, 0.0568129042343658, 0.05633929402016624, 0.061778678959583555, 0.04996682825796561, 0.05770242934251468, 0.8047270856531469, 0.9343266843101848, 0.9222662702484783, 0.7469519263308908, 0.9525306712011798, 0.97763105261177, 0.9503841987305848, 0.9721985094533009, 0.884688216930964, 0.10975487516900917, 0.11200662873924627, 0.13206090062334985, 0.12753565239287323, 0.11570033176358052, 0.12455578159190694, 0.13645295591516793, 0.1261939120304698, 0.13712586839795893, 0.1545139402132829, 0.1523551728884064, 0.15468768068904448, 0.16268667945905657, 0.15448875769621662, 0.15727667420720315, 0.16294883876457045, 0.14806970301509792, 0.1608176258846966, 0.10237458181155712, 0.1069691810901533, 0.12283088375261719, 0.11904171966541688, 0.11299617910373694, 0.1121696408586742, 0.114122938456245, 0.11297402431799741, 0.10587160608024793, 0.13310364356023252, 0.04818271572447197, 0.1316781026995637, 0.11262584844719914, 0.12468959068074381, 0.11153669896318663, 0.10576377155597094, 0.11838928229627732, 0.1194818885925204, 0.08338346688221321, 0.08988167512165635, 0.08140851534857907, 0.07471189275244994, 0.08488650559936872, 0.08816973646263737, 0.08951159023177568, 0.07207258177648823, 0.07352424915024713, 0.14796048233599557, 0.1430181427777828, 0.14577002429758945, 0.131722579145519, 0.1374227092027982, 0.1634632016486517, 0.13909888670337345, 0.18480105487517517, 0.20056711148467288, 0.031538055896568995, 0.05901387628823218, 0.03100712692680696, 0.041391420927602285, 0.03716903795079962, 0.05585612818007324, 0.03318784530398866, 0.03534254574631812, 0.03250592856414036, 0.057604376085634956, 0.04581083234547911, 0.057144379108975185, 0.05784671295373589, 0.05498436704637555, 0.056730388132446574, 0.0520403182611644, 0.0647067954677526, 0.051593108784001696, 0.23476637385211274, 0.18423649856209867, 0.1815398306142194, 0.19560120402017034, 0.16729799129374856, 0.18935218406358012, 0.1738239194082073, 0.16636874160207904, 0.18326389373194296, 0.08253166342767704, 0.07128172657906506, 0.06750542977263718, 0.06583869349457694, 0.07164292607765654, 0.05926743713307858, 0.05820569502529671, 0.04794305380247066, 0.05772348908286329, 0.13704354115068162, 0.1274983618977814, 0.13283291425042354, 0.1298076010297896, 0.1607384339996485, 0.1492112323766176, 0.1449337749544597, 0.12591158596970364, 0.13307944685801942, 0.1653946445490121, 0.15030475944532595, 0.16285724950468505, 0.15303098318364594, 0.1637938453205252, 0.1455923994780831, 0.15529569571654156, 0.17377774300845283, 0.156811045241238, 0.10207169892554702, 0.10314262532213092, 0.10632160331984175, 0.10686535492836591, 0.11903449782017128, 0.09712992042425883, 0.10465736185495711, 0.10947318262554251, 0.10733377052445503, 0.1565332143068472, 0.14797157937809302, 0.16901201973695001, 0.15643144263786068, 0.15074132659151496, 0.15786842158339154, 0.15687022420729468, 0.15885349477570399, 0.1663388603324062, 0.1734214838066881, 0.1832272649380592, 0.1686573500477907, 0.17016459044418408, 0.17047036743252753, 0.17049836726819945, 0.16840302865025225, 0.1665374132120402, 0.17156073732288946, 0.158903125942917, 0.1636000472395921, 0.15517982275855446, 0.13307334711096686, 0.13773797916183084, 0.17912041970676906, 0.15089490531273275, 0.15866533711836106, 0.12125948585772273, 0.15167964520788424, 0.15343280451614338, 0.19529757573751982, 0.17789935665252965, 0.14268028928335919, 0.10976348331911645, 0.16349879337555262, 0.15783814539972085, 0.1656855174751578, 0.20121666884162726, 0.18432696852957442, 0.18597658054275812, 0.17768501106753942, 0.18004577305311686, 0.17970516097313105, 0.18197134714626506, 0.18818104289270776, 0.1766505421603337, 0.06311497883333794, 0.05112735297886484, 0.0480857500488181, 0.05731229975508412, 0.053835432904806524, 0.0577976254918523, 0.050850635469414596, 0.049464901829344265, 0.04837823211035541]}, "mutation_prompt": null}
{"id": "e38b662e-f8c6-4d75-84b3-f2d6d28da683", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n        self.temperature = 100.0  # Initial temperature for annealing\n    \n    def adapt_differential_weight(self, iteration, max_iterations):\n        return self.f * (1 - iteration / max_iterations)\n    \n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_spent = self.population_size\n        iteration = 0\n        max_iterations = self.budget // self.population_size\n\n        while budget_spent < self.budget:\n            iteration += 1\n            for i in range(self.population_size):\n                if budget_spent >= self.budget:\n                    break\n\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                adaptive_f = self.adapt_differential_weight(iteration, max_iterations)\n                mutant = population[a] + adaptive_f * (population[b] - population[c])\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n                crossover = np.random.rand(self.dim) < self.cr\n                offspring = np.where(crossover, mutant, population[i])\n\n                offspring_fitness = func(offspring)\n                budget_spent += 1\n                if offspring_fitness < fitness[i]:\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n                delta = offspring_fitness - fitness[i]\n                if delta < 0 or np.exp(-delta / self.temperature) > np.random.rand():\n                    population[i] = offspring\n                    fitness[i] = offspring_fitness\n\n            self.temperature *= 0.99\n\n        return population[np.argmin(fitness)]\n\n# Example usage:\n# optimizer = HybridDESA(budget=10000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HybridDESA", "description": "Enhance the HybridDESA algorithm by introducing an adaptive differential weight and integrating a greedy selection strategy to accelerate convergence.", "configspace": "", "generation": 1, "fitness": 0.18046254268369563, "feedback": "", "error": "", "parent_id": "28706d4b-81b2-425b-90cd-d8d2829b3d49", "metadata": {"aucs": [0.21466433987019906, 0.23624066960885115, 0.21393996548995087, 0.2374716476697326, 0.23639725419354496, 0.24288214480916426, 0.20976030305541005, 0.23754379681913373, 0.20744555629597572, 0.17681896234646155, 0.17173736554139518, 0.16327797004228617, 0.1767090993921755, 0.1814366273370852, 0.17407941351431078, 0.19446278842833176, 0.1641987516657386, 0.17416946755796892, 0.08641497517439656, 0.08784137212660004, 0.09391486010278349, 0.09227418640308827, 0.0854290962456764, 0.095092316568684, 0.08680070610673718, 0.09605292927446263, 0.09856256407919572, 0.07541089202784679, 0.08743824642615872, 0.08372186149106997, 0.08120256043327079, 0.07887731698541522, 0.07682862442264671, 0.08237387666318063, 0.08843762451463066, 0.08094138704019938, 0.861274646176597, 0.9746137414333145, 0.7915753784216448, 0.975946330243085, 0.9312813276865806, 0.9345084302564147, 0.9635805841288531, 0.972590725875263, 0.9749019168133713, 0.11458205846079184, 0.12504907461917358, 0.15464740881933958, 0.1237925822280106, 0.1421221170792123, 0.11622462571222203, 0.11651713268618336, 0.14808446389452967, 0.12819094281582688, 0.17275339790333566, 0.16814729794510475, 0.1893955936852496, 0.17967738082615592, 0.19220662887514595, 0.1744568293105867, 0.18447965861730342, 0.19197388176982777, 0.20083454440621418, 0.12044831370103404, 0.12126578087558337, 0.11018454852512727, 0.12539587489445314, 0.11585473720021855, 0.12347788871624266, 0.12441880320599308, 0.12355293325026506, 0.1274575117003356, 0.14861744272093602, 0.1343278163007342, 0.15295548922011604, 0.12009843537296361, 0.13051007460287034, 0.13733134830069105, 0.11695675065917766, 0.1645777494030728, 0.11729496424536778, 0.17878140712913715, 0.15339798679124128, 0.16710306879150427, 0.14985058856396516, 0.17241533096700135, 0.12125096672831281, 0.10805349258972985, 0.13264203015292242, 0.15786969458681543, 0.18470746773948865, 0.15470132209719245, 0.17471441111645092, 0.1724909098919446, 0.1625242585749691, 0.1852800303622405, 0.16864959243402922, 0.2038162430881746, 0.1847194732408296, 0.12821214760222122, 0.10149969930111769, 0.11573823127185368, 0.1180523633917816, 0.10420586525153175, 0.11573869857936192, 0.11164780188851453, 0.12610080433844817, 0.100879497892992, 0.0857048719137734, 0.09539830302137431, 0.0911015887399208, 0.10207199324882676, 0.09480129873394438, 0.1004862445375333, 0.09161828948467032, 0.09942501074514454, 0.0990497855505228, 0.22929953123013191, 0.21984948667027704, 0.21500327951787845, 0.21789152110863874, 0.21241858452375884, 0.21969601411877715, 0.20521339024210938, 0.23968908155917745, 0.2168329816802892, 0.08914555568090221, 0.08648697056406796, 0.10014265696178992, 0.10122881290113206, 0.08359113147259889, 0.09386029385181827, 0.09086331170219508, 0.08089015389660725, 0.08487258891971416, 0.1426479740057841, 0.16114511791523478, 0.1585516683044672, 0.14539217860044573, 0.14064072084841295, 0.14163737300920587, 0.14930696118880404, 0.137797470106796, 0.16014037579088858, 0.17572899853447632, 0.1603019310913535, 0.17127333390992883, 0.159166670122717, 0.16546706273418876, 0.159340688646616, 0.1816489302502654, 0.17377774300845283, 0.16534200444511027, 0.1461570109190763, 0.1355395146297642, 0.14446529045112477, 0.13595809609993392, 0.12497205153796498, 0.1402656978030543, 0.15604215188705162, 0.13641040391405002, 0.15102561124674574, 0.17721864795831077, 0.15931905251347744, 0.16559480073531319, 0.15645561227465277, 0.15599400357682536, 0.178022396656901, 0.16370820602055958, 0.1867277464403031, 0.1771661720968909, 0.17552908848783189, 0.1728547759857696, 0.1684665924700488, 0.17470521726390253, 0.1744408567556338, 0.1700928592669403, 0.16481165460252356, 0.17253261967291456, 0.17967087504681256, 0.1751167114754778, 0.26172901888190425, 0.23740730727392445, 0.1409994877520767, 0.1663448523086345, 0.17380289469555554, 0.16093645092781994, 0.19711617800534986, 0.16893721528650563, 0.14992029866963763, 0.1484638686432963, 0.15926693010408122, 0.1669133706904835, 0.1521198003706291, 0.21794508146978497, 0.18338408902139025, 0.17098051694591687, 0.1666468684316884, 0.1906871584866644, 0.1862932066008952, 0.1802066758946549, 0.1988354756566303, 0.18214370262788548, 0.2059148365194936, 0.17608331335406513, 0.18867464240170817, 0.17670719647677613, 0.06999197261777157, 0.0655060962729831, 0.0766743413540053, 0.06710559325667875, 0.06088702198314555, 0.06576360504951373, 0.06419654223258509, 0.0742904709655533, 0.06779941789593891]}, "mutation_prompt": null}
