{"id": "e08d22f4-3c01-4cae-90ac-fdc8640aa46b", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 10\n        self.w = 0.5  # inertia\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.F = 0.5  # differential weight\n        self.CR = 0.9  # crossover probability\n\n    def initialize_particles(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound,\n                                           (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def update_personal_best(self, scores):\n        for i in range(self.num_particles):\n            if scores[i] < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = scores[i]\n                self.personal_best_positions[i] = self.positions[i]\n\n    def update_global_best(self):\n        min_index = np.argmin(self.personal_best_scores)\n        if self.personal_best_scores[min_index] < self.global_best_score:\n            self.global_best_score = self.personal_best_scores[min_index]\n            self.global_best_position = self.personal_best_positions[min_index]\n\n    def pso_step(self):\n        r1 = np.random.rand(self.num_particles, self.dim)\n        r2 = np.random.rand(self.num_particles, self.dim)\n        cognitive_component = self.c1 * r1 * (self.personal_best_positions - self.positions)\n        social_component = self.c2 * r2 * (self.global_best_position - self.positions)\n        self.velocities = self.w * self.velocities + cognitive_component + social_component\n        self.positions += self.velocities\n        self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n    def differential_mutation(self):\n        for i in range(self.num_particles):\n            indices = list(range(self.num_particles))\n            indices.remove(i)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            mutant_vector = self.positions[a] + self.F * (self.positions[b] - self.positions[c])\n            cross_points = np.random.rand(self.dim) < self.CR\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial_vector = np.where(cross_points, mutant_vector, self.positions[i])\n            trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n            yield trial_vector\n\n    def __call__(self, func):\n        self.initialize_particles()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in self.positions])\n            evaluations += self.num_particles\n            self.update_personal_best(scores)\n            self.update_global_best()\n\n            if evaluations >= self.budget:\n                break\n\n            self.pso_step()\n\n            for i, trial_vector in enumerate(self.differential_mutation()):\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    self.positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n            self.update_global_best()\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSOwithADM", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Mutation, combining global exploration via swarm intelligence with local exploitation through adaptive mutations.", "configspace": "", "generation": 0, "fitness": 0.214873531594567, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9469826396887747, 0.9536733624721073, 0.9555026725609721, 0.15720184447033048, 0.9543268700076109, 0.19000448157674132, 0.14331959576091047, 0.9501258387973702, 0.4447443827494756, 0.9106513155451035, 9.999999999998899e-05, 0.19468409653766217, 0.25098457670839247, 0.04999737154831507, 9.999999999998899e-05, 0.06260399572984987, 0.02058323243709348, 0.24203880930367316, 0.1183464299322835, 0.12671261154740865, 0.1269614897592546, 0.12368112698651257, 0.14856398974402074, 0.10139834896072386, 0.04656029957553243, 0.049123768307981264, 0.18372429551408864, 0.08052111451426114, 0.022556440563432312, 0.10302174527614205, 0.08277082174247519, 0.028221161115332905, 0.11683945400026718, 0.0738751681781874, 0.0834278108535067, 0.061741520387325166, 0.9800087234391809, 0.9836071337737643, 0.9898623488133642, 0.962290458638896, 0.9911371105030342, 0.07489240524121232, 0.9683255415029424, 0.9884376345480044, 0.9899038329951948, 0.5181515282626582, 0.05716670652866507, 0.0547084314034888, 0.15476123503295425, 0.22488558402366754, 0.10256422364819973, 0.12782574350354858, 0.051866325340657604, 0.7593977654085073, 0.1729976799492693, 0.06463874493434596, 0.21584162806037144, 0.28080538430580115, 0.14233495211506142, 0.11379560244294751, 0.23383270288697, 0.05368619624620441, 0.1533460393847519, 0.15673598002062683, 0.14805527632380566, 0.09158559122948717, 0.10580526129375722, 9.999999999998899e-05, 0.13038529834579127, 0.00681408916878079, 0.13104574639520683, 0.1457083468213234, 0.21025056600770253, 9.999999999998899e-05, 0.1825905080757677, 0.13651389733250452, 0.0848091573847185, 0.13754014383065227, 0.21506111891310065, 9.999999999998899e-05, 0.1923737167734908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0918022186261469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08397902450186889, 0.04818720683790745, 0.07802263687419486, 0.08209876325701682, 0.007785944073683271, 0.0416598774259479, 0.0592213927318207, 0.04986589534875585, 0.01976935993342721, 0.054531561698397124, 9.999999999998899e-05, 0.11758772166206255, 0.08574237019446607, 0.14246098251000572, 0.08623860867345867, 0.12542710606575025, 9.999999999998899e-05, 0.1807519449515077, 9.999999999998899e-05, 0.1610100254768897, 0.16183970616605547, 0.1375155475413098, 0.11192224364182879, 9.999999999998899e-05, 0.18136156086369615, 0.08544789382254858, 0.08636155050287198, 0.6435405490361901, 0.6089255031595753, 0.4527123475561853, 0.5803952263311305, 0.5739056935422706, 0.2096637925035305, 0.6199082047799906, 0.12796621790857166, 0.5829218837600172, 0.07036785155047998, 0.05491058669547311, 0.08377513323565744, 0.16034287437592543, 0.1363432608176689, 0.10072995920939154, 0.060786678266044336, 0.1219625259791155, 0.11335674409606367, 0.19796684386198837, 0.20437560228601392, 0.18789521585624525, 0.2596415765114939, 0.19064848817438151, 0.1513566292110332, 0.35726702659761245, 0.18386636021732916, 0.20626933791534607, 0.20294134819540655, 0.28220796295216266, 0.24741545485972583, 0.30914440508929275, 0.15464576286596798, 0.2185368668622888, 0.2298649939168106, 0.2336404684663026, 0.17955921747501047, 0.24595261385228262, 0.30824491673086407, 0.27399614250140003, 0.1978957674084666, 0.11704124621806056, 0.38515235473052445, 0.24774641649116125, 0.1431407972062554, 0.16154530366007125, 0.20607034546495584, 0.1995667379734346, 0.2535070757313638, 0.19885500569765968, 0.14463139250689805, 0.20227477314451192, 0.23132945352635326, 0.20943435195995275, 0.2004391738565351, 0.2142613714108158, 0.21378770990956886, 0.25805451126472767, 0.17363974458897524, 0.20046910306643262, 0.25254284570890584, 0.19517874589157713, 0.20720539230506319, 0.20553523001197294, 0.18751155235779216, 0.18833981670080135, 0.13013540977013816, 0.9665256016847477, 0.2018840011482801, 0.14865621069330903, 0.16816565676725492, 0.12636573108337323, 0.1545817558309034, 0.16702006429443006, 0.11291881271845072, 0.3373399491111201, 0.27733563884959644, 0.16228486647358475, 0.21156242867055897, 0.09478460067661088, 0.15772614353850545, 0.1677318035444081, 0.1859032870933699, 0.1732705866677221, 0.17210452593266068, 0.173852144634268, 0.20026030673504525, 0.18630340230011133, 0.18339838467499625, 0.19431958471584176, 0.17466490060600315, 0.08835487827030752, 0.0841815588593845, 0.09242150647994618, 0.09201042129249215, 0.11425910529027639, 0.0782357397235286, 0.08258024060606328, 0.06678994202240451, 0.08753496058659016]}, "mutation_prompt": null}
{"id": "b23907c6-5217-406e-8b13-9b84784f13f9", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 10\n        self.w = 0.9  # starting inertia\n        self.w_min = 0.4  # minimum inertia\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.F = 0.5  # differential weight\n        self.CR = 0.9  # crossover probability\n\n    def initialize_particles(self):\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound,\n                                           (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def update_personal_best(self, scores):\n        for i in range(self.num_particles):\n            if scores[i] < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = scores[i]\n                self.personal_best_positions[i] = self.positions[i]\n\n    def update_global_best(self):\n        min_index = np.argmin(self.personal_best_scores)\n        if self.personal_best_scores[min_index] < self.global_best_score:\n            self.global_best_score = self.personal_best_scores[min_index]\n            self.global_best_position = self.personal_best_positions[min_index]\n\n    def pso_step(self, evaluations):\n        r1 = np.random.rand(self.num_particles, self.dim)\n        r2 = np.random.rand(self.num_particles, self.dim)\n        cognitive_component = self.c1 * r1 * (self.personal_best_positions - self.positions)\n        social_component = self.c2 * r2 * (self.global_best_position - self.positions)\n        # Adaptive inertia weight\n        self.w = self.w_min + (0.9 - self.w_min) * (1 - (evaluations / self.budget))\n        self.velocities = self.w * self.velocities + cognitive_component + social_component\n        self.positions += self.velocities\n        self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n    def differential_mutation(self):\n        for i in range(self.num_particles):\n            indices = list(range(self.num_particles))\n            indices.remove(i)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            mutant_vector = self.positions[a] + self.F * (self.positions[b] - self.positions[c])\n            cross_points = np.random.rand(self.dim) < self.CR\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial_vector = np.where(cross_points, mutant_vector, self.positions[i])\n            trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n            yield trial_vector\n\n    def __call__(self, func):\n        self.initialize_particles()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            scores = np.array([func(p) for p in self.positions])\n            evaluations += self.num_particles\n            self.update_personal_best(scores)\n            self.update_global_best()\n\n            if evaluations >= self.budget:\n                break\n\n            self.pso_step(evaluations)\n\n            for i, trial_vector in enumerate(self.differential_mutation()):\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    self.positions[i] = trial_vector\n                    scores[i] = trial_score\n                    if trial_score < self.personal_best_scores[i]:\n                        self.personal_best_scores[i] = trial_score\n                        self.personal_best_positions[i] = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n            self.update_global_best()\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSOwithADM", "description": "A refined Hybrid PSO with Adaptive Differential Mutation incorporating adaptive inertia weight for enhanced convergence.", "configspace": "", "generation": 1, "fitness": 0.19665562098353048, "feedback": "", "error": "", "parent_id": "e08d22f4-3c01-4cae-90ac-fdc8640aa46b", "metadata": {"aucs": [0.7835445361039483, 0.7909128303418334, 0.7671310840204737, 0.18981271817319134, 0.7717301507211927, 0.188485424816901, 0.12906918987172045, 0.8258359153881628, 0.18316907453372344, 0.039468628884153034, 9.999999999998899e-05, 9.999999999998899e-05, 0.6585232710167788, 0.6665898200992166, 9.999999999998899e-05, 0.054434868762725075, 0.6634833224425516, 9.999999999998899e-05, 0.122023992296591, 0.10599472844324742, 0.12861668199520193, 0.08822501477183453, 0.09244337514226586, 0.09174278059434016, 0.0981152974700159, 0.04670209184805896, 0.050424679627002145, 0.11135557488862557, 0.02346067098886706, 0.07995501207332945, 0.1000022390712485, 0.042866790558760526, 0.09724369046988246, 0.09171404035621877, 0.09430191793608278, 0.08895628565004299, 0.9874024219008833, 0.989323491593529, 0.9952863032112658, 0.9900216465554458, 0.9951484209274222, 0.09977733734221328, 0.9858674958877136, 0.991361942945836, 0.9912437347456788, 0.05981188688033068, 0.028396049790764488, 0.059247619517006966, 0.14203442181986137, 0.134852371071987, 0.1370620763288296, 0.08307102854544646, 0.08841869439586336, 9.999999999998899e-05, 0.5390343171995644, 0.19494938329073008, 0.15596005390443513, 0.2574716250042558, 0.18390226470754, 0.19168085888703723, 0.06866812232419184, 0.11214687398067091, 0.1969677224163895, 0.16265255868400896, 0.17814465919437494, 0.18179998900341587, 0.09718408238464382, 9.999999999998899e-05, 0.09738873150145932, 9.999999999998899e-05, 9.999999999998899e-05, 0.1683515570141959, 0.19188683073038315, 0.02099026394444936, 0.1869117776027044, 0.2222019099252036, 0.13186997350332752, 0.1261461302588721, 0.19988308669944643, 9.999999999998899e-05, 0.19540099938428324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04231184917224162, 0.03583303414472505, 0.032214830560984065, 0.034640827063234236, 9.999999999998899e-05, 0.02935879453496726, 0.048549871114783816, 0.013270947140350264, 0.011274389633940118, 0.03989025284578873, 9.999999999998899e-05, 0.07821923838311928, 0.06393712331346402, 0.053905542562666, 0.06212247049574804, 0.06234168431897902, 0.05756099655651392, 0.06414439378097414, 9.999999999998899e-05, 0.09596197836765208, 0.060443310225501645, 0.03531986457405378, 0.10683152258156481, 0.005692032235125377, 0.07586652975253105, 0.08294494126815988, 0.07664077953353099, 0.5076141582731305, 0.46862698258122903, 0.49212153548365245, 0.47035422601226806, 0.5263290029204157, 0.20579099953766422, 0.4981500100450845, 0.41964553328501275, 0.5169907749829838, 0.10416156679961663, 0.041201712897658394, 0.03037236220688011, 0.07900811435456179, 0.0930694297794733, 0.08086440350047319, 0.06318869119624726, 0.08071211409250045, 0.08358857985227697, 0.15032307562434222, 0.1415607223562202, 0.13133116158390679, 0.1745131428214638, 0.22129630741117623, 0.23099789257929493, 0.18484998245176343, 0.14525013406955622, 0.18622337481737272, 0.32692197633340647, 0.2745690651984355, 0.2712142099455582, 0.24756739711952114, 0.13918081372018754, 0.28450165278809236, 0.357137710421767, 0.25778908712665016, 0.34316040308883144, 0.23574184333907822, 0.15850383348568775, 0.24210829936901856, 0.18608236864158134, 0.11539451230770104, 0.18166796087296777, 0.2830687716272612, 0.1504167903514042, 0.05604631066654164, 0.16086961718216441, 0.18086301357120593, 0.22269619827247333, 0.200503462763302, 0.1371826442526961, 0.186601477071194, 0.20049091371623673, 0.1687262456883516, 0.16664318591905192, 0.18806000766272057, 0.20094745422353955, 0.19788560521605036, 0.21411961288802905, 0.19174397630527695, 0.19161958937997636, 0.19304793375411422, 0.2032028809244285, 0.1855013059310311, 0.15511633751749287, 0.19368042023473875, 0.11995492761978843, 0.7653132916023198, 0.1995182158981781, 0.09509788144461417, 0.16459725191933083, 0.12671347924446852, 0.14975645455372866, 0.32280254327743874, 0.10630355388011925, 0.15794398783862085, 0.2034433233849804, 0.1826584556150328, 0.20550186462199693, 0.15969029776042387, 0.12954703707403692, 0.5405631078976756, 0.19690735390989889, 0.18081128528219348, 0.18447064695636028, 0.19459067134669117, 0.18165839156653274, 0.1949444059122618, 0.17791897640098864, 0.18427598205887386, 0.1708232458715, 0.06937859177801742, 0.0799829364104937, 0.07272258731928194, 0.061932474877399946, 0.058473347437953294, 0.06315097653170176, 0.08256309930874761, 0.07559978210674823, 0.08165920481574851]}, "mutation_prompt": null}
