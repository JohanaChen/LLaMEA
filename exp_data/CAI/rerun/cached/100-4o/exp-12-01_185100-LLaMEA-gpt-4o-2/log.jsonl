{"id": "f914afe2-aa1c-4c68-a55d-e48086491247", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim, population_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = population_size\n        self.F = F  # Differential weight\n        self.CR = CR  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.evaluations = 0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def levy_flight(self, scale=0.1):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return scale * step\n\n    def mutate(self, idx):\n        indices = list(range(self.population_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant_vector = self.population[a] + self.F * (self.population[b] - self.population[c])\n        mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n        return mutant_vector\n\n    def crossover(self, target_vector, mutant_vector):\n        crossover_vector = np.copy(target_vector)\n        crossover_points = np.random.rand(self.dim) < self.CR\n        if not np.any(crossover_points):\n            crossover_points[np.random.randint(0, self.dim)] = True\n        crossover_vector[crossover_points] = mutant_vector[crossover_points]\n        return crossover_vector\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for idx in range(self.population_size):\n                target_vector = self.population[idx]\n                mutant_vector = self.mutate(idx)\n                crossover_vector = self.crossover(target_vector, mutant_vector)\n\n                if np.random.rand() < 0.5:  # Adaptive exploration/exploitation toggle\n                    crossover_vector += self.levy_flight()\n\n                trial_fitness = func(crossover_vector)\n                self.evaluations += 1\n\n                if trial_fitness < func(target_vector):\n                    self.population[idx] = crossover_vector\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = crossover_vector\n                        self.best_fitness = trial_fitness\n            \n            if self.evaluations >= self.budget:\n                break\n\n        return self.best_solution, self.best_fitness", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive LÃ©vy Flight for exploration and exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.22311474977092155, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4862209114888978, 0.49902214067802575, 0.5031612168479238, 0.5039096526490587, 0.5051148051895709, 0.5228104453633138, 0.500800675429635, 0.47843530850591043, 0.4728484708773155, 0.14112171189341882, 0.13797992608510035, 0.14725232944520672, 0.1433015342335915, 0.17028140853666096, 0.16745571653186053, 0.16557150256548703, 0.1545615507357181, 0.16766053898797706, 0.08895959561221678, 0.09219818064107532, 0.0909149248183978, 0.10610802230200966, 0.08028846325592931, 0.10568411830744995, 0.09399758204209574, 0.09563826115877638, 0.08813305277912586, 0.08137278909946033, 0.08998943205141863, 0.08480915681333501, 0.08616111632418999, 0.07732698238741653, 0.07752075157102756, 0.08354973090238094, 0.10175980736217605, 0.085916709258959, 0.8109094333514204, 0.7932210043863244, 0.8145988406733463, 0.8757284349326941, 0.8230241220854175, 0.8511934633150285, 0.8360569761001857, 0.8158540636948771, 0.8289591517510488, 0.2439541562480847, 0.23453720503737574, 0.23862140077049243, 0.23320904531979447, 0.25039111776599, 0.24329616304678248, 0.2411711239719453, 0.21372650113321667, 0.21894974914036913, 0.42320010247138073, 0.5147687636119996, 0.4777027379450226, 0.5424858690758836, 0.5403854008355506, 0.49631744732906125, 0.475268653305546, 0.4253294235489211, 0.40469348361849267, 0.14217385079684997, 0.11867834199787264, 0.1371347735942935, 0.16401048274831542, 0.1297809591873409, 0.16313039696920262, 0.15999762883658009, 0.13292284524729114, 0.12662006447314889, 0.12023195982450707, 0.11668255928239324, 0.10679048008882941, 0.12494003876440818, 0.19870552061510904, 0.14333103790006663, 0.14695410157154998, 0.15257875264622456, 0.122999848497232, 0.05148740514667627, 0.07127192396260074, 0.06428472415701092, 0.06058616536537742, 0.06633810488208769, 0.06936143861570632, 0.07184074312020383, 0.06345033044870985, 0.07355735730617885, 0.17556724284531133, 0.1679943200262458, 0.16688378668317927, 0.16142127021449837, 0.16769859490773464, 0.17665156633918888, 0.18662484794049228, 0.21499692206295018, 0.20171881467737984, 0.007964772472878079, 0.006590747650584983, 0.01235016711475223, 0.00032542782526212566, 0.002406956165006191, 0.007126359726562281, 0.025794614460349807, 0.0028138311845881114, 0.018077516572451713, 0.11055211778027296, 0.12935953603646633, 0.09694808613032802, 0.11981625165175247, 0.11480144715619622, 0.13349502288904036, 0.11035759782860355, 0.10633992209290122, 0.12121561535577752, 0.4104797400582457, 0.40828620933837834, 0.43749692409350704, 0.42185777838642846, 0.40062025393458456, 0.4235341370418183, 0.43165025144794733, 0.4043563162484036, 0.4310990672956304, 0.098626167086725, 0.07941588868821947, 0.0866673633196724, 0.08756186255570642, 0.08928983633088083, 0.07637582264131959, 0.08478529216285846, 0.09132731199495614, 0.07846652148320155, 0.12934128586015925, 0.16186117212769846, 0.18063434772451403, 0.150333450496844, 0.13730821596090426, 0.13297098859045542, 0.12077002397721026, 0.12417613755189649, 0.12652783653289656, 0.27244623866814544, 0.2639138610110222, 0.2761553841843639, 0.2808510799147481, 0.27064046099816474, 0.2710074426053216, 0.2766851720979986, 0.3023269852149203, 0.2827505334628252, 0.20577116630077952, 0.20068255172842198, 0.21800958275332083, 0.19336900497201182, 0.22300170267238695, 0.20209887123943604, 0.20609965593336343, 0.19922416783137897, 0.22399284234608463, 0.19785927261662128, 0.16430848643053886, 0.1768400318702701, 0.18803471112335313, 0.18645728958582442, 0.18840939661709188, 0.20065751417522193, 0.17859921870812612, 0.1926940722808933, 0.17253143281624905, 0.18001964324182462, 0.18128692174704197, 0.1872817122632543, 0.1762486205180509, 0.1767576979170773, 0.1730097765999522, 0.1765420290053351, 0.17251563349692078, 0.4531820612779863, 0.370338544196539, 0.18924496785466483, 0.34274631495395924, 0.43289218775884997, 0.38457160558370473, 0.2582139882147315, 0.34383744889334833, 0.42554602500368444, 0.1623263379546046, 0.1923289298178359, 0.33658206085230846, 0.33961193797544265, 0.17961686092981022, 0.1803524017087731, 0.27868002768372757, 0.19595777213683496, 0.19653946272400924, 0.17552328601721967, 0.18535725652673885, 0.1804598097718586, 0.18647451935941506, 0.18190323284870968, 0.18033925604342127, 0.1747462533141052, 0.1829639753023432, 0.18999364548522357, 0.06564850522752763, 0.07399534772655791, 0.07495228488226024, 0.07437817543630876, 0.07100590397972883, 0.06330401995832657, 0.07638636776828467, 0.076357809896206, 0.0803994485397127]}, "mutation_prompt": null}
{"id": "e99b87d7-e473-48e8-a26b-7ce765ef8a75", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim, population_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = population_size\n        self.F = F  # Differential weight\n        self.CR = CR  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.evaluations = 0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def levy_flight(self, scale=0.1):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=self.dim)\n        v = np.random.normal(0, 1, size=self.dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return scale * step\n\n    def mutate(self, idx):\n        indices = list(range(self.population_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant_vector = self.population[a] + self.F * (self.population[b] - self.population[c])\n        mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n        return mutant_vector\n\n    def crossover(self, target_vector, mutant_vector):\n        crossover_vector = np.copy(target_vector)\n        crossover_points = np.random.rand(self.dim) < self.CR\n        if not np.any(crossover_points):\n            crossover_points[np.random.randint(0, self.dim)] = True\n        crossover_vector[crossover_points] = mutant_vector[crossover_points]\n        return crossover_vector\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for idx in range(self.population_size):\n                target_vector = self.population[idx]\n                mutant_vector = self.mutate(idx)\n                crossover_vector = self.crossover(target_vector, mutant_vector)\n\n                if np.random.rand() < 0.5:  # Adaptive exploration/exploitation toggle\n                    crossover_vector += self.levy_flight()\n\n                trial_fitness = func(crossover_vector)\n                self.evaluations += 1\n\n                if trial_fitness < func(target_vector):\n                    self.population[idx] = crossover_vector\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = crossover_vector\n                        self.best_fitness = trial_fitness\n            \n            if self.evaluations >= self.budget:\n                break\n\n        return self.best_solution, self.best_fitness", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Adaptive LÃ©vy Flight for exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f914afe2-aa1c-4c68-a55d-e48086491247", "metadata": {"aucs": [0.4862209114888978, 0.49902214067802575, 0.5031612168479238, 0.5039096526490587, 0.5051148051895709, 0.5228104453633138, 0.500800675429635, 0.47843530850591043, 0.4728484708773155, 0.14112171189341882, 0.13797992608510035, 0.14725232944520672, 0.1433015342335915, 0.17028140853666096, 0.16745571653186053, 0.16557150256548703, 0.1545615507357181, 0.16766053898797706, 0.08895959561221678, 0.09219818064107532, 0.0909149248183978, 0.10610802230200966, 0.08028846325592931, 0.10568411830744995, 0.09399758204209574, 0.09563826115877638, 0.08813305277912586, 0.08137278909946033, 0.08998943205141863, 0.08480915681333501, 0.08616111632418999, 0.07732698238741653, 0.07752075157102756, 0.08354973090238094, 0.10175980736217605, 0.085916709258959, 0.8109094333514204, 0.7932210043863244, 0.8145988406733463, 0.8757284349326941, 0.8230241220854175, 0.8511934633150285, 0.8360569761001857, 0.8158540636948771, 0.8289591517510488, 0.2439541562480847, 0.23453720503737574, 0.23862140077049243, 0.23320904531979447, 0.25039111776599, 0.24329616304678248, 0.2411711239719453, 0.21372650113321667, 0.21894974914036913, 0.42320010247138073, 0.5147687636119996, 0.4777027379450226, 0.5424858690758836, 0.5403854008355506, 0.49631744732906125, 0.475268653305546, 0.4253294235489211, 0.40469348361849267, 0.14217385079684997, 0.11867834199787264, 0.1371347735942935, 0.16401048274831542, 0.1297809591873409, 0.16313039696920262, 0.15999762883658009, 0.13292284524729114, 0.12662006447314889, 0.12023195982450707, 0.11668255928239324, 0.10679048008882941, 0.12494003876440818, 0.19870552061510904, 0.14333103790006663, 0.14695410157154998, 0.15257875264622456, 0.122999848497232, 0.05148740514667627, 0.07127192396260074, 0.06428472415701092, 0.06058616536537742, 0.06633810488208769, 0.06936143861570632, 0.07184074312020383, 0.06345033044870985, 0.07355735730617885, 0.17556724284531133, 0.1679943200262458, 0.16688378668317927, 0.16142127021449837, 0.16769859490773464, 0.17665156633918888, 0.18662484794049228, 0.21499692206295018, 0.20171881467737984, 0.007964772472878079, 0.006590747650584983, 0.01235016711475223, 0.00032542782526212566, 0.002406956165006191, 0.007126359726562281, 0.025794614460349807, 0.0028138311845881114, 0.018077516572451713, 0.11055211778027296, 0.12935953603646633, 0.09694808613032802, 0.11981625165175247, 0.11480144715619622, 0.13349502288904036, 0.11035759782860355, 0.10633992209290122, 0.12121561535577752, 0.4104797400582457, 0.40828620933837834, 0.43749692409350704, 0.42185777838642846, 0.40062025393458456, 0.4235341370418183, 0.43165025144794733, 0.4043563162484036, 0.4310990672956304, 0.098626167086725, 0.07941588868821947, 0.0866673633196724, 0.08756186255570642, 0.08928983633088083, 0.07637582264131959, 0.08478529216285846, 0.09132731199495614, 0.07846652148320155, 0.12934128586015925, 0.16186117212769846, 0.18063434772451403, 0.150333450496844, 0.13730821596090426, 0.13297098859045542, 0.12077002397721026, 0.12417613755189649, 0.12652783653289656, 0.27244623866814544, 0.2639138610110222, 0.2761553841843639, 0.2808510799147481, 0.27064046099816474, 0.2710074426053216, 0.2766851720979986, 0.3023269852149203, 0.2827505334628252, 0.20577116630077952, 0.20068255172842198, 0.21800958275332083, 0.19336900497201182, 0.22300170267238695, 0.20209887123943604, 0.20609965593336343, 0.19922416783137897, 0.22399284234608463, 0.19785927261662128, 0.16430848643053886, 0.1768400318702701, 0.18803471112335313, 0.18645728958582442, 0.18840939661709188, 0.20065751417522193, 0.17859921870812612, 0.1926940722808933, 0.17253143281624905, 0.18001964324182462, 0.18128692174704197, 0.1872817122632543, 0.1762486205180509, 0.1767576979170773, 0.1730097765999522, 0.1765420290053351, 0.17251563349692078, 0.4531820612779863, 0.370338544196539, 0.18924496785466483, 0.34274631495395924, 0.43289218775884997, 0.38457160558370473, 0.2582139882147315, 0.34383744889334833, 0.42554602500368444, 0.1623263379546046, 0.1923289298178359, 0.33658206085230846, 0.33961193797544265, 0.17961686092981022, 0.1803524017087731, 0.27868002768372757, 0.19595777213683496, 0.19653946272400924, 0.17552328601721967, 0.18535725652673885, 0.1804598097718586, 0.18647451935941506, 0.18190323284870968, 0.18033925604342127, 0.1747462533141052, 0.1829639753023432, 0.18999364548522357, 0.06564850522752763, 0.07399534772655791, 0.07495228488226024, 0.07437817543630876, 0.07100590397972883, 0.06330401995832657, 0.07638636776828467, 0.076357809896206, 0.0803994485397127]}, "mutation_prompt": null}
