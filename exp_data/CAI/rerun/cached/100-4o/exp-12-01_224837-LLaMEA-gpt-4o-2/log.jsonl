{"id": "911a571f-bd26-40ea-983a-49f031e03c81", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.w = 0.7  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.F = 0.5  # differential weight\n        self.CR = 0.9  # crossover probability\n        self.lb = -5.0  # lower bound\n        self.ub = 5.0  # upper bound\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.pbest = self.population.copy()\n        self.pbest_values = np.full(self.pop_size, np.inf)\n        self.gbest = None\n        self.gbest_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate current population\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.population[i])\n                self.evaluations += 1\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest[i] = self.population[i]\n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest = self.population[i]\n\n            # Update velocities and positions (PSO phase)\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_vel = self.c1 * r1 * (self.pbest[i] - self.population[i])\n                social_vel = self.c2 * r2 * (self.gbest - self.population[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_vel + social_vel\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lb, self.ub)\n\n            # Perform DE mutation and crossover (DE phase)\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), self.lb, self.ub)\n                trial_vector = np.copy(self.population[i])\n                jrand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == jrand:\n                        trial_vector[j] = mutant[j]\n\n                if self.evaluations < self.budget:\n                    trial_fitness = func(trial_vector)\n                    self.evaluations += 1\n                    if trial_fitness < self.pbest_values[i]:\n                        self.pbest_values[i] = trial_fitness\n                        self.pbest[i] = trial_vector\n                        if trial_fitness < self.gbest_value:\n                            self.gbest_value = trial_fitness\n                            self.gbest = trial_vector\n\n        return self.gbest", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization and Differential Evolution algorithm that dynamically adjusts exploration and exploitation capabilities to efficiently solve black box optimization problems.", "configspace": "", "generation": 0, "fitness": 0.20301893215001296, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4611792112286941, 0.33689670720684584, 0.4535912884852844, 0.4880690430555146, 0.3736459906040758, 0.5102952240293026, 0.42873337912374665, 0.4537176627266869, 0.46211071072800336, 0.041940674776070774, 0.06816723768975863, 0.026246458240481663, 0.03639105645943286, 0.06466917640583814, 0.02742095462409999, 0.019248494816617168, 0.056323843360064685, 0.028146554218123176, 0.08474585602099483, 0.08740847992647649, 0.10137977813426569, 0.10252666696636448, 0.11814969532292308, 0.10759518036005578, 0.08563148809933008, 0.11221210641445811, 0.1016994818261372, 0.129572461490435, 0.07798156346304752, 0.09026897762246877, 0.0919651481285495, 0.08229402296383137, 0.0846330324934701, 0.08867921068247109, 0.11774370695286962, 0.13807026159153124, 0.9721880263938374, 0.9756550524080656, 0.983930255122908, 0.9769503077764695, 0.9750422326895386, 0.9685072538733691, 0.9765022182824159, 0.9717320311141953, 0.9772965839896505, 0.24065141549366575, 0.24971378642681497, 0.17723410651864813, 0.15217164317835974, 0.19354816037351186, 0.166644950553253, 0.21079272659327075, 0.28657050445598287, 0.2418904980653317, 0.17170924417727074, 0.38341433955244586, 0.35837643387896845, 0.19595438559192646, 0.2285527536292009, 0.1921612409114799, 0.4229238283976463, 0.12305161077201043, 0.41195872496568064, 0.13192375088964614, 0.08884151606443957, 0.12093441760235668, 0.06169879430504954, 0.14911738986377854, 0.14483793885485685, 0.11477131664694373, 0.10871903837941221, 0.13333877815879736, 0.10680498536784033, 0.12640449234576356, 0.1283277157295052, 0.13836481827325897, 0.10745358495933666, 0.112170012787142, 0.15290143641481424, 9.999999999998899e-05, 0.07072200839528342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00042757154411898757, 9.999999999998899e-05, 0.003914174507584134, 9.999999999998899e-05, 9.999999999998899e-05, 0.01453307990765984, 0.042603752202514444, 0.07517957219817895, 0.08618351254917778, 0.05168414021047396, 0.04406823654870662, 0.008737896978716742, 0.047011185833067626, 0.10686025001577582, 0.02375676418217021, 9.999999999998899e-05, 0.004625589789636564, 0.021567692013699902, 0.02735187325821209, 0.006306951982185782, 0.025674092243565094, 0.03554998800818954, 0.022968091789504097, 0.0516680821384653, 0.08072950004921131, 9.999999999998899e-05, 0.1155941408823512, 0.06443423299503315, 0.06088215720826706, 0.06631536748144407, 0.04362563059615587, 0.05081658933036526, 0.09097673145865615, 0.37145664384805155, 0.4294373600874214, 0.33980382062918746, 0.3475562625465135, 0.3897239301173424, 0.3252065021723233, 0.36176429122986686, 0.395569958555837, 0.3864130361858854, 0.10338616355574726, 0.06659041501605767, 0.08790661971553948, 0.13140209652218637, 0.0781041595879568, 0.09904227208559457, 0.06835478709266751, 0.0962172109000985, 0.08454150670528904, 0.17084876223914158, 0.21451992597496428, 0.22296593231475814, 0.2020016902030839, 0.17393932810902113, 0.2512009598672238, 0.19429675193823048, 0.1938983304807862, 0.17837858751608604, 0.2808539920661678, 0.275049164941918, 0.255254906042617, 0.2743331398595179, 0.26453195770973736, 0.22955258759637587, 0.28778403785799334, 0.27966632136386727, 0.2755537391899777, 0.18916346321852728, 0.19413177550997063, 0.21888023968650028, 0.22566724496781154, 0.1794725782752088, 0.17343402374694028, 0.19696934237284236, 0.23077740273196434, 0.19850083354552495, 0.20244375784758573, 0.1931922870286258, 0.19387860932170575, 0.2059574993830281, 0.19574797734167804, 0.1957231849045915, 0.19282534065221457, 0.1856154178992372, 0.21313432876607252, 0.17279801165386888, 0.19646934551119288, 0.17458575693923883, 0.28454421493631643, 0.194924895263071, 0.20294242376859695, 0.23034463310919717, 0.185285347579498, 0.1907049428819092, 0.5446758591862715, 0.1655885414750906, 0.13688596173794054, 0.49743774698282106, 0.1908352609339321, 0.19165048995757883, 0.13907095856464569, 0.16411774153525527, 0.5715008132287586, 0.35764481942297643, 0.20284927481890092, 0.35026415788353393, 0.30084908941516697, 0.3090405765338744, 0.14782326254561173, 0.1841873595268949, 0.3910931886085033, 0.15164216370018058, 0.1870179865608924, 0.19324962936296253, 0.17243869664618328, 0.1937589191978465, 0.1907189404463253, 0.1924690331744795, 0.20539802814000563, 0.20143240788810557, 0.1955738703999903, 0.07917945303523688, 0.07912860198000637, 0.08336488333005021, 0.06887144017542035, 0.08184766214888328, 0.0844652091802458, 0.0747503624674124, 0.08477221281473246, 0.08451876636257949]}, "mutation_prompt": null}
{"id": "fb996608-d918-4891-80ad-6437f62a4328", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.w = 0.7  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.F = 0.5  # differential weight\n        self.CR = 0.9  # crossover probability\n        self.lb = -5.0  # lower bound\n        self.ub = 5.0  # upper bound\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.pbest = self.population.copy()\n        self.pbest_values = np.full(self.pop_size, np.inf)\n        self.gbest = None\n        self.gbest_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate current population\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.population[i])\n                self.evaluations += 1\n                if fitness < self.pbest_values[i]:\n                    self.pbest_values[i] = fitness\n                    self.pbest[i] = self.population[i]\n                if fitness < self.gbest_value:\n                    self.gbest_value = fitness\n                    self.gbest = self.population[i]\n\n            # Update velocities and positions (PSO phase)\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_vel = self.c1 * r1 * (self.pbest[i] - self.population[i])\n                social_vel = self.c2 * r2 * (self.gbest - self.population[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive_vel + social_vel\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], self.lb, self.ub)\n\n            # Perform DE mutation and crossover (DE phase)\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), self.lb, self.ub)\n                trial_vector = np.copy(self.population[i])\n                jrand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == jrand:\n                        trial_vector[j] = mutant[j]\n\n                if self.evaluations < self.budget:\n                    trial_fitness = func(trial_vector)\n                    self.evaluations += 1\n                    if trial_fitness < self.pbest_values[i]:\n                        self.pbest_values[i] = trial_fitness\n                        self.pbest[i] = trial_vector\n                        if trial_fitness < self.gbest_value:\n                            self.gbest_value = trial_fitness\n                            self.gbest = trial_vector\n\n        return self.gbest", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization and Differential Evolution algorithm that dynamically adjusts exploration and exploitation capabilities to efficiently solve black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "911a571f-bd26-40ea-983a-49f031e03c81", "metadata": {"aucs": [0.4611792112286941, 0.33689670720684584, 0.4535912884852844, 0.4880690430555146, 0.3736459906040758, 0.5102952240293026, 0.42873337912374665, 0.4537176627266869, 0.46211071072800336, 0.041940674776070774, 0.06816723768975863, 0.026246458240481663, 0.03639105645943286, 0.06466917640583814, 0.02742095462409999, 0.019248494816617168, 0.056323843360064685, 0.028146554218123176, 0.08474585602099483, 0.08740847992647649, 0.10137977813426569, 0.10252666696636448, 0.11814969532292308, 0.10759518036005578, 0.08563148809933008, 0.11221210641445811, 0.1016994818261372, 0.129572461490435, 0.07798156346304752, 0.09026897762246877, 0.0919651481285495, 0.08229402296383137, 0.0846330324934701, 0.08867921068247109, 0.11774370695286962, 0.13807026159153124, 0.9721880263938374, 0.9756550524080656, 0.983930255122908, 0.9769503077764695, 0.9750422326895386, 0.9685072538733691, 0.9765022182824159, 0.9717320311141953, 0.9772965839896505, 0.24065141549366575, 0.24971378642681497, 0.17723410651864813, 0.15217164317835974, 0.19354816037351186, 0.166644950553253, 0.21079272659327075, 0.28657050445598287, 0.2418904980653317, 0.17170924417727074, 0.38341433955244586, 0.35837643387896845, 0.19595438559192646, 0.2285527536292009, 0.1921612409114799, 0.4229238283976463, 0.12305161077201043, 0.41195872496568064, 0.13192375088964614, 0.08884151606443957, 0.12093441760235668, 0.06169879430504954, 0.14911738986377854, 0.14483793885485685, 0.11477131664694373, 0.10871903837941221, 0.13333877815879736, 0.10680498536784033, 0.12640449234576356, 0.1283277157295052, 0.13836481827325897, 0.10745358495933666, 0.112170012787142, 0.15290143641481424, 9.999999999998899e-05, 0.07072200839528342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00042757154411898757, 9.999999999998899e-05, 0.003914174507584134, 9.999999999998899e-05, 9.999999999998899e-05, 0.01453307990765984, 0.042603752202514444, 0.07517957219817895, 0.08618351254917778, 0.05168414021047396, 0.04406823654870662, 0.008737896978716742, 0.047011185833067626, 0.10686025001577582, 0.02375676418217021, 9.999999999998899e-05, 0.004625589789636564, 0.021567692013699902, 0.02735187325821209, 0.006306951982185782, 0.025674092243565094, 0.03554998800818954, 0.022968091789504097, 0.0516680821384653, 0.08072950004921131, 9.999999999998899e-05, 0.1155941408823512, 0.06443423299503315, 0.06088215720826706, 0.06631536748144407, 0.04362563059615587, 0.05081658933036526, 0.09097673145865615, 0.37145664384805155, 0.4294373600874214, 0.33980382062918746, 0.3475562625465135, 0.3897239301173424, 0.3252065021723233, 0.36176429122986686, 0.395569958555837, 0.3864130361858854, 0.10338616355574726, 0.06659041501605767, 0.08790661971553948, 0.13140209652218637, 0.0781041595879568, 0.09904227208559457, 0.06835478709266751, 0.0962172109000985, 0.08454150670528904, 0.17084876223914158, 0.21451992597496428, 0.22296593231475814, 0.2020016902030839, 0.17393932810902113, 0.2512009598672238, 0.19429675193823048, 0.1938983304807862, 0.17837858751608604, 0.2808539920661678, 0.275049164941918, 0.255254906042617, 0.2743331398595179, 0.26453195770973736, 0.22955258759637587, 0.28778403785799334, 0.27966632136386727, 0.2755537391899777, 0.18916346321852728, 0.19413177550997063, 0.21888023968650028, 0.22566724496781154, 0.1794725782752088, 0.17343402374694028, 0.19696934237284236, 0.23077740273196434, 0.19850083354552495, 0.20244375784758573, 0.1931922870286258, 0.19387860932170575, 0.2059574993830281, 0.19574797734167804, 0.1957231849045915, 0.19282534065221457, 0.1856154178992372, 0.21313432876607252, 0.17279801165386888, 0.19646934551119288, 0.17458575693923883, 0.28454421493631643, 0.194924895263071, 0.20294242376859695, 0.23034463310919717, 0.185285347579498, 0.1907049428819092, 0.5446758591862715, 0.1655885414750906, 0.13688596173794054, 0.49743774698282106, 0.1908352609339321, 0.19165048995757883, 0.13907095856464569, 0.16411774153525527, 0.5715008132287586, 0.35764481942297643, 0.20284927481890092, 0.35026415788353393, 0.30084908941516697, 0.3090405765338744, 0.14782326254561173, 0.1841873595268949, 0.3910931886085033, 0.15164216370018058, 0.1870179865608924, 0.19324962936296253, 0.17243869664618328, 0.1937589191978465, 0.1907189404463253, 0.1924690331744795, 0.20539802814000563, 0.20143240788810557, 0.1955738703999903, 0.07917945303523688, 0.07912860198000637, 0.08336488333005021, 0.06887144017542035, 0.08184766214888328, 0.0844652091802458, 0.0747503624674124, 0.08477221281473246, 0.08451876636257949]}, "mutation_prompt": null}
