{"id": "59e2eebb-20d8-4bd6-b096-bad81fdace30", "solution": "import numpy as np\n\nclass DEALS:\n    def __init__(self, budget, dim, pop_size=20, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F  # Mutation factor\n        self.CR = CR  # Crossover rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.eval_count = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        self.eval_count += self.pop_size\n\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n                \n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_fitness = func(trial)\n                self.eval_count += 1\n\n                # Adaptive Local Search\n                if trial_fitness < fitness[i]:\n                    # Perform a local search around the trial solution\n                    local_search_step = np.random.uniform(-0.1, 0.1, self.dim)\n                    local_candidate = np.clip(trial + local_search_step, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_candidate)\n                    self.eval_count += 1\n                    \n                    if local_fitness < trial_fitness:\n                        trial = local_candidate\n                        trial_fitness = local_fitness\n\n                # Replacement\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best = trial\n\n        return best", "name": "DEALS", "description": "A hybrid Differential Evolution with Adaptive Local Search (DEALS) algorithm that combines global exploration capabilities of Differential Evolution with adaptive local search for fine-tuning solutions.", "configspace": "", "generation": 0, "fitness": 0.4631659352225708, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8405475038244972, 0.8249356327250117, 0.8295798877605443, 0.8528361017577312, 0.8364114637365246, 0.8405797060169217, 0.8566109843633182, 0.8395002906724337, 0.8190192292491372, 0.7061167270819153, 0.7365554799753681, 0.6888644869035554, 0.7172189592081244, 0.6874684263714038, 0.7240704812878834, 0.717094933880762, 0.721045163934109, 0.724039602623543, 0.13803074597386533, 0.15540491555938518, 0.44993303381862215, 0.35484266289532673, 0.14834745162255347, 0.15444689798892652, 0.3902781671726544, 0.14816383206529193, 0.15806621034256585, 0.13683727119611555, 0.10993982852851081, 0.1439717935731587, 0.1339475207776648, 0.14264165841184162, 0.14573418036811925, 0.18946172999170763, 0.15843849850156944, 0.37113541945476014, 0.9475230207843677, 0.9717844081163967, 0.9668356771127166, 0.9702617564722467, 0.9556378473300243, 0.9373403694937619, 0.9589259593742071, 0.9447962906712992, 0.9698497299263391, 0.5742034088661692, 0.5878704948415892, 0.6117315359987805, 0.6291228017641797, 0.610299647985471, 0.6034111525067278, 0.6237812221548846, 0.6038665479620582, 0.5812230493868747, 0.8405003326726702, 0.8395203274403383, 0.7429782705398422, 0.8209022996765293, 0.8182561472637946, 0.813150694436459, 0.7997720165309768, 0.7932216586145586, 0.8172294518867631, 0.5006255245436309, 0.5761666549071145, 0.47015604182506976, 0.5841172874531362, 0.476343389663732, 0.44106377359147186, 0.47657300244931056, 0.47350585181019056, 0.5698828761380264, 0.5690261920107187, 0.4641664550483945, 0.518525184404709, 0.6423389222362269, 0.5713280468177178, 0.5300717301315969, 0.5269393278703653, 0.4924857423861162, 0.5311049355518855, 0.5213729561050288, 0.482071417387956, 0.4983941593700095, 0.543264699900296, 0.5357052881506436, 0.5175595427265194, 0.5590175044446277, 0.5206308837463736, 0.532009390714715, 0.6387041132297883, 0.6031581266820606, 0.634859420805546, 0.6354406115638971, 0.6351203796902445, 0.620253560551555, 0.660708427074479, 0.6343340338547605, 0.649360037214926, 0.2230480854709801, 0.11562736584087363, 0.13373318228377973, 0.4105424991142941, 0.3889230302762372, 0.2833896319887139, 0.13799524153222642, 0.18079823295317843, 0.20261749734426326, 0.40372634893227255, 0.3862744214013887, 0.3772734054300204, 0.362601039919367, 0.4163822851757829, 0.39694089306414326, 0.3793576840988727, 0.407246751829933, 0.3163180313591579, 0.7322960803974842, 0.7358007167327224, 0.8017763839266403, 0.7661645296393291, 0.7255413989360573, 0.7749638088849659, 0.7591557251704524, 0.7395772370336443, 0.7521248358248597, 0.11821302257400168, 0.1103018654498279, 0.10967117895139766, 0.10380610788279587, 0.10254534960788819, 0.15515202892869673, 0.1067333722459487, 0.10954165096190005, 0.1316900165078987, 0.218732962415074, 0.23212231851764553, 0.17160492848474262, 0.6514862037955399, 0.3213898195843552, 0.3186715670708927, 0.2178997240937156, 0.13883470039528278, 0.24284043860378413, 0.43243825718171525, 0.3919423428119023, 0.4362226612566432, 0.4714995624077992, 0.4153794633450042, 0.44844089609680227, 0.4579930034527102, 0.42710513538398587, 0.4426344073751918, 0.34119795263022346, 0.3499571971616825, 0.3081787653057726, 0.36644947661865634, 0.3272860558009777, 0.3676183502864142, 0.34012693210909106, 0.3653054412824809, 0.37396256717005305, 0.19159710087865256, 0.19098614904398148, 0.17233375249865512, 0.21177972316137583, 0.2176724181894839, 0.2047447822803461, 0.19462649054055714, 0.21710713611670662, 0.20067829248717484, 0.4133332078632024, 0.20938841786326423, 0.21277711845611302, 0.5540336198158864, 0.565084825501263, 0.4378492965820743, 0.44173163498826906, 0.6254100199765793, 0.4139815408458817, 0.8107596560333791, 0.8470992151244546, 0.1529202646603648, 0.8218173273249814, 0.7528591924609928, 0.854095430342579, 0.7649613682570289, 0.165154339192791, 0.8624943214637536, 0.7867812150723005, 0.1656582616261274, 0.8143935580902967, 0.8498964417427712, 0.16468234936276438, 0.16726324878707344, 0.20830485241850283, 0.1552221453592172, 0.844703944187686, 0.19473931000669098, 0.18111667617221483, 0.1858714192079538, 0.3072668809006722, 0.17368727810287832, 0.18561269803903502, 0.1879570281135612, 0.20407086518780493, 0.17650989801875494, 0.07506193429527885, 0.07407921386722538, 0.07099599441741755, 0.08778930419732134, 0.07828066661513877, 0.05935365402482695, 0.07517765578744384, 0.08989410510793916, 0.07452420762820189]}, "mutation_prompt": null}
{"id": "51aaa64d-cb3b-4773-8b61-0ca444a948d5", "solution": "import numpy as np\n\nclass DEALS:\n    def __init__(self, budget, dim, pop_size=20, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F  # Mutation factor\n        self.CR = CR  # Crossover rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.eval_count = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_idx = np.argmin(fitness)\n        best = population[best_idx]\n        best_fitness = fitness[best_idx]\n        self.eval_count += self.pop_size\n\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n                \n                # Differential Evolution mutation and crossover\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_fitness = func(trial)\n                self.eval_count += 1\n\n                # Adaptive Local Search\n                if trial_fitness < fitness[i]:\n                    # Perform a local search around the trial solution\n                    local_search_step = np.random.uniform(-0.1, 0.1, self.dim)\n                    local_candidate = np.clip(trial + local_search_step, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_candidate)\n                    self.eval_count += 1\n                    \n                    if local_fitness < trial_fitness:\n                        trial = local_candidate\n                        trial_fitness = local_fitness\n\n                # Replacement\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best = trial\n\n        return best", "name": "DEALS", "description": "A hybrid Differential Evolution with Adaptive Local Search (DEALS) algorithm that combines global exploration capabilities of Differential Evolution with adaptive local search for fine-tuning solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59e2eebb-20d8-4bd6-b096-bad81fdace30", "metadata": {"aucs": [0.8405475038244972, 0.8249356327250117, 0.8295798877605443, 0.8528361017577312, 0.8364114637365246, 0.8405797060169217, 0.8566109843633182, 0.8395002906724337, 0.8190192292491372, 0.7061167270819153, 0.7365554799753681, 0.6888644869035554, 0.7172189592081244, 0.6874684263714038, 0.7240704812878834, 0.717094933880762, 0.721045163934109, 0.724039602623543, 0.13803074597386533, 0.15540491555938518, 0.44993303381862215, 0.35484266289532673, 0.14834745162255347, 0.15444689798892652, 0.3902781671726544, 0.14816383206529193, 0.15806621034256585, 0.13683727119611555, 0.10993982852851081, 0.1439717935731587, 0.1339475207776648, 0.14264165841184162, 0.14573418036811925, 0.18946172999170763, 0.15843849850156944, 0.37113541945476014, 0.9475230207843677, 0.9717844081163967, 0.9668356771127166, 0.9702617564722467, 0.9556378473300243, 0.9373403694937619, 0.9589259593742071, 0.9447962906712992, 0.9698497299263391, 0.5742034088661692, 0.5878704948415892, 0.6117315359987805, 0.6291228017641797, 0.610299647985471, 0.6034111525067278, 0.6237812221548846, 0.6038665479620582, 0.5812230493868747, 0.8405003326726702, 0.8395203274403383, 0.7429782705398422, 0.8209022996765293, 0.8182561472637946, 0.813150694436459, 0.7997720165309768, 0.7932216586145586, 0.8172294518867631, 0.5006255245436309, 0.5761666549071145, 0.47015604182506976, 0.5841172874531362, 0.476343389663732, 0.44106377359147186, 0.47657300244931056, 0.47350585181019056, 0.5698828761380264, 0.5690261920107187, 0.4641664550483945, 0.518525184404709, 0.6423389222362269, 0.5713280468177178, 0.5300717301315969, 0.5269393278703653, 0.4924857423861162, 0.5311049355518855, 0.5213729561050288, 0.482071417387956, 0.4983941593700095, 0.543264699900296, 0.5357052881506436, 0.5175595427265194, 0.5590175044446277, 0.5206308837463736, 0.532009390714715, 0.6387041132297883, 0.6031581266820606, 0.634859420805546, 0.6354406115638971, 0.6351203796902445, 0.620253560551555, 0.660708427074479, 0.6343340338547605, 0.649360037214926, 0.2230480854709801, 0.11562736584087363, 0.13373318228377973, 0.4105424991142941, 0.3889230302762372, 0.2833896319887139, 0.13799524153222642, 0.18079823295317843, 0.20261749734426326, 0.40372634893227255, 0.3862744214013887, 0.3772734054300204, 0.362601039919367, 0.4163822851757829, 0.39694089306414326, 0.3793576840988727, 0.407246751829933, 0.3163180313591579, 0.7322960803974842, 0.7358007167327224, 0.8017763839266403, 0.7661645296393291, 0.7255413989360573, 0.7749638088849659, 0.7591557251704524, 0.7395772370336443, 0.7521248358248597, 0.11821302257400168, 0.1103018654498279, 0.10967117895139766, 0.10380610788279587, 0.10254534960788819, 0.15515202892869673, 0.1067333722459487, 0.10954165096190005, 0.1316900165078987, 0.218732962415074, 0.23212231851764553, 0.17160492848474262, 0.6514862037955399, 0.3213898195843552, 0.3186715670708927, 0.2178997240937156, 0.13883470039528278, 0.24284043860378413, 0.43243825718171525, 0.3919423428119023, 0.4362226612566432, 0.4714995624077992, 0.4153794633450042, 0.44844089609680227, 0.4579930034527102, 0.42710513538398587, 0.4426344073751918, 0.34119795263022346, 0.3499571971616825, 0.3081787653057726, 0.36644947661865634, 0.3272860558009777, 0.3676183502864142, 0.34012693210909106, 0.3653054412824809, 0.37396256717005305, 0.19159710087865256, 0.19098614904398148, 0.17233375249865512, 0.21177972316137583, 0.2176724181894839, 0.2047447822803461, 0.19462649054055714, 0.21710713611670662, 0.20067829248717484, 0.4133332078632024, 0.20938841786326423, 0.21277711845611302, 0.5540336198158864, 0.565084825501263, 0.4378492965820743, 0.44173163498826906, 0.6254100199765793, 0.4139815408458817, 0.8107596560333791, 0.8470992151244546, 0.1529202646603648, 0.8218173273249814, 0.7528591924609928, 0.854095430342579, 0.7649613682570289, 0.165154339192791, 0.8624943214637536, 0.7867812150723005, 0.1656582616261274, 0.8143935580902967, 0.8498964417427712, 0.16468234936276438, 0.16726324878707344, 0.20830485241850283, 0.1552221453592172, 0.844703944187686, 0.19473931000669098, 0.18111667617221483, 0.1858714192079538, 0.3072668809006722, 0.17368727810287832, 0.18561269803903502, 0.1879570281135612, 0.20407086518780493, 0.17650989801875494, 0.07506193429527885, 0.07407921386722538, 0.07099599441741755, 0.08778930419732134, 0.07828066661513877, 0.05935365402482695, 0.07517765578744384, 0.08989410510793916, 0.07452420762820189]}, "mutation_prompt": null}
