{"id": "96970ab7-00eb-4530-8635-217f93b31611", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        \n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Mutation\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = self.population[a] + self.mutation_factor * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, -5.0, 5.0)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.crossover_rate\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = f_trial\n            \n            # Adapt mutation factor and crossover rate\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand()\n            self.crossover_rate = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "A dynamic population-based evolutionary algorithm combining differential evolution with adaptive mutation and crossover rates.", "configspace": "", "generation": 0, "fitness": 0.3947701900828701, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.872655527284725, 0.8814062875528696, 0.8719538611041666, 0.8837624270639313, 0.8815490834755189, 0.8667205643766231, 0.8782368836288105, 0.883417783517275, 0.8680562252028351, 0.7861136500137639, 0.7881846930731318, 0.7773860910836403, 0.7876177437828171, 0.7860383125691857, 0.785506693610893, 0.7868832308757585, 0.7688599074992408, 0.7693413579997889, 0.4385921083327746, 0.48568884646533095, 0.3813341834229914, 0.4371644217507499, 0.47799058551011153, 0.5835890260772423, 0.48326996926180277, 0.36598592966035703, 0.4574389457776722, 0.3491767968960027, 0.1603681226296172, 0.31503660361424946, 0.38135710236630616, 0.4411790219976025, 0.1427165782366594, 0.15067023548833292, 0.16029857405570402, 0.42501482096664767, 0.9771756030051892, 0.980972824213058, 0.9721766808272942, 0.9645456753037408, 0.9802380420179229, 0.9734506921762229, 0.9777215864172908, 0.9987900698199654, 0.9712599845931229, 0.6216819931299593, 0.562299463458491, 0.5461840516448662, 0.6094205854761483, 0.6032607824193378, 0.6077730061481728, 0.5783726822124902, 0.6009426087161513, 0.5705367869875606, 0.7317886552073405, 0.7331719231276679, 0.7493312013006366, 0.7512489918541304, 0.7804782527032831, 0.7658330552588435, 0.7618285154993059, 0.7547870811949011, 0.738081219004652, 0.3287628212608401, 0.3711643142081451, 0.4796239390050586, 0.2767038986824589, 0.35089824561194194, 0.26869921914693884, 0.39981009154763303, 0.31321852560766605, 0.3427637213615129, 0.19674858260273898, 0.2260434118707585, 0.021148838751931853, 0.3306275778919372, 0.2618066385809916, 0.3708808102412845, 0.24548200773541073, 0.2296923649951741, 0.22532214213557977, 0.2123960728177018, 0.17914074306569094, 0.24190841998008472, 9.999999999998899e-05, 0.19618389373081868, 0.19121807801574964, 0.1733434326872364, 0.156065392123934, 0.22670844624970388, 0.2895917391179057, 0.29849065940212016, 0.3605665206062031, 0.3545032120742688, 0.329817505050623, 0.3043262660092788, 0.3690277424719096, 0.34668931727041274, 0.3729047261045747, 0.09868788839565479, 0.06628618625809335, 0.05948785073021767, 0.18631236698322906, 0.07767749575500071, 0.19835347586686414, 0.13639272761509258, 0.09044141094123881, 0.10606689355485599, 0.2292825543774456, 0.23892276505529408, 0.2639660579707894, 0.27507226555696707, 0.27981772021629125, 0.28346513075985913, 0.2369219236355221, 0.25634544591897124, 0.2903770587736074, 0.6594467001085366, 0.6979923255508225, 0.6796705408147192, 0.6272683679165565, 0.668569821338731, 0.6603557512758803, 0.7112323264559094, 0.6834140241383133, 0.6702155200657381, 0.09744033715749723, 0.0976640982837036, 0.10081707829195874, 0.1032393154564537, 0.10298025272184985, 0.1056855253716692, 0.0881025089318993, 0.11742400607764614, 0.10468569379343862, 0.16340414766186573, 0.14242497866949977, 0.14230563629639215, 0.23889873425728425, 0.13178457809458555, 0.13804421939751232, 0.19845218736798798, 0.16260591903273947, 0.1275292568675035, 0.4154381990202338, 0.4007365721235502, 0.4407622252985669, 0.42331922757140283, 0.4161761086353919, 0.4214522017787051, 0.45947048257438805, 0.47257011833499274, 0.5092646664012175, 0.26983381757045477, 0.2851350483419739, 0.2997842448609367, 0.22150444267524427, 0.32302895458232717, 0.27738768547826476, 0.30734849354439997, 0.318411368729269, 0.32609268865894925, 0.18929425435843883, 0.19708723341523704, 0.19194273758829627, 0.19746790569458905, 0.18345315110178362, 0.18287485500274514, 0.18290134997458418, 0.20076029969281506, 0.21370331519405816, 0.2150102952631634, 0.2696051218625066, 0.2150089401082299, 0.3792410585237389, 0.435063408228368, 0.2734537647874625, 0.6302291910391604, 0.1949931448158705, 0.24912478847979436, 0.1609668052463772, 0.1706798871941102, 0.1932283884038507, 0.16272384723312594, 0.6234732506877583, 0.5887557709048454, 0.7099021338934153, 0.19536986018656077, 0.18517945522595625, 0.1998783558265178, 0.6105516419478902, 0.6846914975208351, 0.4781395454953997, 0.7314276853987906, 0.703347036174383, 0.20728207554228728, 0.7994858585274774, 0.15521223331493583, 0.19094224313143837, 0.18039081577324212, 0.1879312151877569, 0.19027031783597737, 0.18488999391256855, 0.18798399138411936, 0.19636751448396217, 0.1833782257031924, 0.17368342948962867, 0.08000625342125334, 0.08456896854335028, 0.09027987935927306, 0.08965812059406875, 0.09617375064666844, 0.1007637278252419, 0.08570362357936878, 0.07546261799546916, 0.08085508127695562]}, "mutation_prompt": null}
{"id": "39d50635-e821-43cb-b8e1-3384aab077c6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        \n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Mutation\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = self.population[a] + self.mutation_factor * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, -5.0, 5.0)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.crossover_rate\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                f_trial = func(trial)\n                evaluations += 1\n                if f_trial < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = f_trial\n            \n            # Adapt mutation factor and crossover rate\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand()\n            self.crossover_rate = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "A dynamic population-based evolutionary algorithm combining differential evolution with adaptive mutation and crossover rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: APIConnectionError('Connection error.').", "error": "APIConnectionError('Connection error.')", "parent_id": "96970ab7-00eb-4530-8635-217f93b31611", "metadata": {"aucs": [0.872655527284725, 0.8814062875528696, 0.8719538611041666, 0.8837624270639313, 0.8815490834755189, 0.8667205643766231, 0.8782368836288105, 0.883417783517275, 0.8680562252028351, 0.7861136500137639, 0.7881846930731318, 0.7773860910836403, 0.7876177437828171, 0.7860383125691857, 0.785506693610893, 0.7868832308757585, 0.7688599074992408, 0.7693413579997889, 0.4385921083327746, 0.48568884646533095, 0.3813341834229914, 0.4371644217507499, 0.47799058551011153, 0.5835890260772423, 0.48326996926180277, 0.36598592966035703, 0.4574389457776722, 0.3491767968960027, 0.1603681226296172, 0.31503660361424946, 0.38135710236630616, 0.4411790219976025, 0.1427165782366594, 0.15067023548833292, 0.16029857405570402, 0.42501482096664767, 0.9771756030051892, 0.980972824213058, 0.9721766808272942, 0.9645456753037408, 0.9802380420179229, 0.9734506921762229, 0.9777215864172908, 0.9987900698199654, 0.9712599845931229, 0.6216819931299593, 0.562299463458491, 0.5461840516448662, 0.6094205854761483, 0.6032607824193378, 0.6077730061481728, 0.5783726822124902, 0.6009426087161513, 0.5705367869875606, 0.7317886552073405, 0.7331719231276679, 0.7493312013006366, 0.7512489918541304, 0.7804782527032831, 0.7658330552588435, 0.7618285154993059, 0.7547870811949011, 0.738081219004652, 0.3287628212608401, 0.3711643142081451, 0.4796239390050586, 0.2767038986824589, 0.35089824561194194, 0.26869921914693884, 0.39981009154763303, 0.31321852560766605, 0.3427637213615129, 0.19674858260273898, 0.2260434118707585, 0.021148838751931853, 0.3306275778919372, 0.2618066385809916, 0.3708808102412845, 0.24548200773541073, 0.2296923649951741, 0.22532214213557977, 0.2123960728177018, 0.17914074306569094, 0.24190841998008472, 9.999999999998899e-05, 0.19618389373081868, 0.19121807801574964, 0.1733434326872364, 0.156065392123934, 0.22670844624970388, 0.2895917391179057, 0.29849065940212016, 0.3605665206062031, 0.3545032120742688, 0.329817505050623, 0.3043262660092788, 0.3690277424719096, 0.34668931727041274, 0.3729047261045747, 0.09868788839565479, 0.06628618625809335, 0.05948785073021767, 0.18631236698322906, 0.07767749575500071, 0.19835347586686414, 0.13639272761509258, 0.09044141094123881, 0.10606689355485599, 0.2292825543774456, 0.23892276505529408, 0.2639660579707894, 0.27507226555696707, 0.27981772021629125, 0.28346513075985913, 0.2369219236355221, 0.25634544591897124, 0.2903770587736074, 0.6594467001085366, 0.6979923255508225, 0.6796705408147192, 0.6272683679165565, 0.668569821338731, 0.6603557512758803, 0.7112323264559094, 0.6834140241383133, 0.6702155200657381, 0.09744033715749723, 0.0976640982837036, 0.10081707829195874, 0.1032393154564537, 0.10298025272184985, 0.1056855253716692, 0.0881025089318993, 0.11742400607764614, 0.10468569379343862, 0.16340414766186573, 0.14242497866949977, 0.14230563629639215, 0.23889873425728425, 0.13178457809458555, 0.13804421939751232, 0.19845218736798798, 0.16260591903273947, 0.1275292568675035, 0.4154381990202338, 0.4007365721235502, 0.4407622252985669, 0.42331922757140283, 0.4161761086353919, 0.4214522017787051, 0.45947048257438805, 0.47257011833499274, 0.5092646664012175, 0.26983381757045477, 0.2851350483419739, 0.2997842448609367, 0.22150444267524427, 0.32302895458232717, 0.27738768547826476, 0.30734849354439997, 0.318411368729269, 0.32609268865894925, 0.18929425435843883, 0.19708723341523704, 0.19194273758829627, 0.19746790569458905, 0.18345315110178362, 0.18287485500274514, 0.18290134997458418, 0.20076029969281506, 0.21370331519405816, 0.2150102952631634, 0.2696051218625066, 0.2150089401082299, 0.3792410585237389, 0.435063408228368, 0.2734537647874625, 0.6302291910391604, 0.1949931448158705, 0.24912478847979436, 0.1609668052463772, 0.1706798871941102, 0.1932283884038507, 0.16272384723312594, 0.6234732506877583, 0.5887557709048454, 0.7099021338934153, 0.19536986018656077, 0.18517945522595625, 0.1998783558265178, 0.6105516419478902, 0.6846914975208351, 0.4781395454953997, 0.7314276853987906, 0.703347036174383, 0.20728207554228728, 0.7994858585274774, 0.15521223331493583, 0.19094224313143837, 0.18039081577324212, 0.1879312151877569, 0.19027031783597737, 0.18488999391256855, 0.18798399138411936, 0.19636751448396217, 0.1833782257031924, 0.17368342948962867, 0.08000625342125334, 0.08456896854335028, 0.09027987935927306, 0.08965812059406875, 0.09617375064666844, 0.1007637278252419, 0.08570362357936878, 0.07546261799546916, 0.08085508127695562]}, "mutation_prompt": null}
