{"id": "65f62c70-90b7-41d5-b591-c2d85f7ded88", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                            (self.population_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_positions = np.copy(self.population)\n        self.best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                score = func(self.population[i])\n                evaluations += 1\n                \n                # Update personal best\n                if score < self.best_scores[i]:\n                    self.best_scores[i] = score\n                    self.best_positions[i] = self.population[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n            # Switch between DE and PSO strategies\n            if evaluations < self.budget * 0.5:\n                self._differential_evolution_step(func)\n            else:\n                self._particle_swarm_optimization_step()\n            self.iteration += 1\n\n        return self.global_best_position\n\n    def _differential_evolution_step(self, func):\n        F = 0.8\n        CR = 0.9\n        for i in range(self.population_size):\n            indices = list(range(self.population_size))\n            indices.remove(i)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            mutant = np.clip(self.population[a] + F * (self.population[b] - self.population[c]), \n                             self.lower_bound, self.upper_bound)\n            trial = np.copy(self.population[i])\n            for j in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[j] = mutant[j]\n            trial_score = func(trial)\n            if trial_score < self.best_scores[i]:\n                self.population[i] = trial\n                self.best_scores[i] = trial_score\n\n    def _particle_swarm_optimization_step(self):\n        w = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            self.velocity[i] = (w * self.velocity[i] +\n                                c1 * r1 * (self.best_positions[i] - self.population[i]) +\n                                c2 * r2 * (self.global_best_position - self.population[i]))\n            self.population[i] = np.clip(self.population[i] + self.velocity[i],\n                                         self.lower_bound, self.upper_bound)", "name": "HybridOptimization", "description": "A dynamic multi-strategy algorithm that adaptively switches between exploration and exploitation utilizing a hybrid of Differential Evolution and Particle Swarm Optimization techniques.", "configspace": "", "generation": 0, "fitness": 0.31353842034118895, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6999611201494843, 0.7092942908923916, 0.7106374943358438, 0.6944899900449804, 0.7331595115714022, 0.7514096904624425, 0.6945017907568392, 0.7365086973165472, 0.7235096156085632, 0.5135599004388756, 0.5309961117245787, 0.5166572080826065, 0.5666646923630683, 0.542115655193766, 0.48503174698638285, 0.5405629662762268, 0.5337938087683523, 0.5110785789181578, 0.08847410020646274, 0.11256363677896875, 0.11622005305546934, 0.108061267888656, 0.09986435426671303, 0.12671019428277286, 0.10550401491809536, 0.08673634186532686, 0.12103368660805014, 0.09629756705282488, 0.10057367724951749, 0.11444386106328908, 0.10531501108130092, 0.09115696241145166, 0.10221454107376116, 0.11180156491446036, 0.07817053677766084, 0.16082136973819272, 0.9306428381837526, 0.9290668132095053, 0.9549783838801066, 0.9092143492296642, 0.9594654680955105, 0.9502124770995395, 0.9464719550775506, 0.9606251110897611, 0.9871973400225643, 0.33370492716943123, 0.3736798689265659, 0.3760875887040894, 0.38893857408418187, 0.37834171861572197, 0.39815436900965784, 0.40718700560821275, 0.3390904891458778, 0.08488141061982224, 0.6792429095539267, 0.5283526082404137, 0.5727295880218031, 0.5655336822203793, 0.7556669395520453, 0.6666889028958669, 0.7162610439276076, 0.6073527416719234, 0.6647484876924858, 0.3779393925490866, 0.2046627164764444, 0.2536169562608943, 0.3543241010385201, 0.2390818400688901, 0.23847907019109993, 0.25901266837303305, 0.22973857097270145, 0.22693288504248388, 0.009593963184869048, 0.20868491838278247, 0.021784849709917453, 0.21260193750763823, 0.3177508469905862, 0.3158344563632707, 0.30005302216690677, 0.17060051083421535, 0.3071841013686508, 0.19363452883168086, 0.25398138410101645, 0.2771973922595674, 0.25402043809442953, 0.26791594160130505, 0.24120886632613847, 0.2558783967355275, 0.23504948856732477, 0.18780934425869178, 0.4155150498654705, 0.3702695064411944, 0.3649445200716034, 0.3515542906347656, 0.26636148893309086, 0.33653532868633695, 0.4338921083109587, 0.4368617471738796, 0.32001280757813333, 0.07903197521797178, 0.08919150143452026, 0.08399996951879674, 0.10660032805344832, 0.10446204844798923, 0.05431886697119648, 0.10324459155329169, 0.07546629907640057, 0.07487753069297542, 0.19067104210567798, 0.21339640394187742, 0.187515967742659, 0.24637906237593876, 0.26814298852932494, 0.2308678716348721, 0.19373341051823234, 0.2241932601021246, 0.21415073800242523, 0.5662419807027419, 0.6307128011497103, 0.580729587764126, 0.5788549530055396, 0.6118872959477064, 0.20641012931386704, 0.59494699073507, 0.5802272788230478, 0.5739749937294399, 0.08072027640518897, 0.1041273062757222, 0.07517939577715593, 0.08461251863989905, 0.08579381040002443, 0.08040592941341296, 0.08243371571711777, 0.08997017230936999, 0.08219774522951029, 0.14230417955751307, 0.13240650994292114, 0.14917868368596587, 0.27538058283214084, 0.14335277093211207, 0.1839385045798012, 0.32551175432571566, 0.13638727482319246, 0.158709186199405, 0.30012720696493067, 0.32915099828015104, 0.25715418345473784, 0.31870787564201253, 0.2922095935465948, 0.3301384404686074, 0.3233864740561837, 0.3121347567238526, 0.3271926669014612, 0.24641403478387114, 0.20885593760958499, 0.21862782406398584, 0.19701369926445345, 0.22095905770726754, 0.2340851225364855, 0.24331485839855282, 0.2764282684651769, 0.2634909027910619, 0.1702548663464326, 0.17498832011172638, 0.18663494398375924, 0.17161612534279247, 0.18280758602212688, 0.17173970734609134, 0.16806807142964186, 0.18345968551111125, 0.18385322706875118, 0.31719782061299706, 0.25665041554561363, 0.18856765813324783, 0.17391368936534912, 0.1862250520053813, 0.2391792181279675, 0.18119092482025334, 0.17562572849077474, 0.1845683145122915, 0.1683822447225395, 0.678712193761178, 0.14519278384551615, 0.6493815557401226, 0.1893229765318395, 0.7455564818164577, 0.13983400603699525, 0.5722104290355429, 0.16975979200770364, 0.1588108293662699, 0.16747552410264033, 0.16202830895943676, 0.5662583932553098, 0.4984236251648545, 0.19685823815028858, 0.6903256781417375, 0.19856269420749617, 0.6951049992732348, 0.18935871600834475, 0.18309559138206577, 0.1948479237446854, 0.17406722637794614, 0.1785198403062337, 0.16630033834281654, 0.1782260128068177, 0.18608796992685606, 0.16869434071614775, 0.0840024427124676, 0.07090486117584405, 0.0682250349060125, 0.06591212136927349, 0.06950822577080218, 0.06586145654365827, 0.06793094191170224, 0.07390984966875547, 0.07893906671025108]}, "mutation_prompt": null}
{"id": "d3671e24-63ab-4a3c-8fb0-c1bb85490baf", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, \n                                            (self.population_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_positions = np.copy(self.population)\n        self.best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                score = func(self.population[i])\n                evaluations += 1\n                \n                # Update personal best\n                if score < self.best_scores[i]:\n                    self.best_scores[i] = score\n                    self.best_positions[i] = self.population[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n            # Switch between DE and PSO strategies\n            if evaluations < self.budget * 0.5:\n                self._differential_evolution_step(func)\n            else:\n                self._particle_swarm_optimization_step()\n            self.iteration += 1\n\n        return self.global_best_position\n\n    def _differential_evolution_step(self, func):\n        F = 0.8\n        CR = 0.9\n        for i in range(self.population_size):\n            indices = list(range(self.population_size))\n            indices.remove(i)\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            mutant = np.clip(self.population[a] + F * (self.population[b] - self.population[c]), \n                             self.lower_bound, self.upper_bound)\n            trial = np.copy(self.population[i])\n            for j in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[j] = mutant[j]\n            trial_score = func(trial)\n            if trial_score < self.best_scores[i]:\n                self.population[i] = trial\n                self.best_scores[i] = trial_score\n\n    def _particle_swarm_optimization_step(self):\n        w = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        for i in range(self.population_size):\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            self.velocity[i] = (w * self.velocity[i] +\n                                c1 * r1 * (self.best_positions[i] - self.population[i]) +\n                                c2 * r2 * (self.global_best_position - self.population[i]))\n            self.population[i] = np.clip(self.population[i] + self.velocity[i],\n                                         self.lower_bound, self.upper_bound)", "name": "HybridOptimization", "description": "A dynamic multi-strategy algorithm that adaptively switches between exploration and exploitation utilizing a hybrid of Differential Evolution and Particle Swarm Optimization techniques.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65f62c70-90b7-41d5-b591-c2d85f7ded88", "metadata": {"aucs": [0.6999611201494843, 0.7092942908923916, 0.7106374943358438, 0.6944899900449804, 0.7331595115714022, 0.7514096904624425, 0.6945017907568392, 0.7365086973165472, 0.7235096156085632, 0.5135599004388756, 0.5309961117245787, 0.5166572080826065, 0.5666646923630683, 0.542115655193766, 0.48503174698638285, 0.5405629662762268, 0.5337938087683523, 0.5110785789181578, 0.08847410020646274, 0.11256363677896875, 0.11622005305546934, 0.108061267888656, 0.09986435426671303, 0.12671019428277286, 0.10550401491809536, 0.08673634186532686, 0.12103368660805014, 0.09629756705282488, 0.10057367724951749, 0.11444386106328908, 0.10531501108130092, 0.09115696241145166, 0.10221454107376116, 0.11180156491446036, 0.07817053677766084, 0.16082136973819272, 0.9306428381837526, 0.9290668132095053, 0.9549783838801066, 0.9092143492296642, 0.9594654680955105, 0.9502124770995395, 0.9464719550775506, 0.9606251110897611, 0.9871973400225643, 0.33370492716943123, 0.3736798689265659, 0.3760875887040894, 0.38893857408418187, 0.37834171861572197, 0.39815436900965784, 0.40718700560821275, 0.3390904891458778, 0.08488141061982224, 0.6792429095539267, 0.5283526082404137, 0.5727295880218031, 0.5655336822203793, 0.7556669395520453, 0.6666889028958669, 0.7162610439276076, 0.6073527416719234, 0.6647484876924858, 0.3779393925490866, 0.2046627164764444, 0.2536169562608943, 0.3543241010385201, 0.2390818400688901, 0.23847907019109993, 0.25901266837303305, 0.22973857097270145, 0.22693288504248388, 0.009593963184869048, 0.20868491838278247, 0.021784849709917453, 0.21260193750763823, 0.3177508469905862, 0.3158344563632707, 0.30005302216690677, 0.17060051083421535, 0.3071841013686508, 0.19363452883168086, 0.25398138410101645, 0.2771973922595674, 0.25402043809442953, 0.26791594160130505, 0.24120886632613847, 0.2558783967355275, 0.23504948856732477, 0.18780934425869178, 0.4155150498654705, 0.3702695064411944, 0.3649445200716034, 0.3515542906347656, 0.26636148893309086, 0.33653532868633695, 0.4338921083109587, 0.4368617471738796, 0.32001280757813333, 0.07903197521797178, 0.08919150143452026, 0.08399996951879674, 0.10660032805344832, 0.10446204844798923, 0.05431886697119648, 0.10324459155329169, 0.07546629907640057, 0.07487753069297542, 0.19067104210567798, 0.21339640394187742, 0.187515967742659, 0.24637906237593876, 0.26814298852932494, 0.2308678716348721, 0.19373341051823234, 0.2241932601021246, 0.21415073800242523, 0.5662419807027419, 0.6307128011497103, 0.580729587764126, 0.5788549530055396, 0.6118872959477064, 0.20641012931386704, 0.59494699073507, 0.5802272788230478, 0.5739749937294399, 0.08072027640518897, 0.1041273062757222, 0.07517939577715593, 0.08461251863989905, 0.08579381040002443, 0.08040592941341296, 0.08243371571711777, 0.08997017230936999, 0.08219774522951029, 0.14230417955751307, 0.13240650994292114, 0.14917868368596587, 0.27538058283214084, 0.14335277093211207, 0.1839385045798012, 0.32551175432571566, 0.13638727482319246, 0.158709186199405, 0.30012720696493067, 0.32915099828015104, 0.25715418345473784, 0.31870787564201253, 0.2922095935465948, 0.3301384404686074, 0.3233864740561837, 0.3121347567238526, 0.3271926669014612, 0.24641403478387114, 0.20885593760958499, 0.21862782406398584, 0.19701369926445345, 0.22095905770726754, 0.2340851225364855, 0.24331485839855282, 0.2764282684651769, 0.2634909027910619, 0.1702548663464326, 0.17498832011172638, 0.18663494398375924, 0.17161612534279247, 0.18280758602212688, 0.17173970734609134, 0.16806807142964186, 0.18345968551111125, 0.18385322706875118, 0.31719782061299706, 0.25665041554561363, 0.18856765813324783, 0.17391368936534912, 0.1862250520053813, 0.2391792181279675, 0.18119092482025334, 0.17562572849077474, 0.1845683145122915, 0.1683822447225395, 0.678712193761178, 0.14519278384551615, 0.6493815557401226, 0.1893229765318395, 0.7455564818164577, 0.13983400603699525, 0.5722104290355429, 0.16975979200770364, 0.1588108293662699, 0.16747552410264033, 0.16202830895943676, 0.5662583932553098, 0.4984236251648545, 0.19685823815028858, 0.6903256781417375, 0.19856269420749617, 0.6951049992732348, 0.18935871600834475, 0.18309559138206577, 0.1948479237446854, 0.17406722637794614, 0.1785198403062337, 0.16630033834281654, 0.1782260128068177, 0.18608796992685606, 0.16869434071614775, 0.0840024427124676, 0.07090486117584405, 0.0682250349060125, 0.06591212136927349, 0.06950822577080218, 0.06586145654365827, 0.06793094191170224, 0.07390984966875547, 0.07893906671025108]}, "mutation_prompt": null}
