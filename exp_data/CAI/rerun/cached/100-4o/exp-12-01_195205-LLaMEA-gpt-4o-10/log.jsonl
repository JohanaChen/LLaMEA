{"id": "36577ed5-5420-48e5-a6cc-b6f465003e66", "solution": "import numpy as np\n\nclass ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 5 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.strategy = 'rand/1/bin'\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[indices]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Selection\n                trial_fit = func(trial)\n                eval_count += 1\n                \n                if trial_fit < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fit\n\n            # Adaptation of parameters\n            self.F = np.clip(np.random.normal(0.5, 0.3), 0.1, 0.9)\n            self.CR = np.clip(np.random.normal(0.9, 0.1), 0.1, 1.0)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "ADE", "description": "Adaptive Differential Evolution with Self-Adaptive Control Parameters for Efficient Black Box Function Optimization.", "configspace": "", "generation": 0, "fitness": 0.4242541426058373, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8959457471745474, 0.8959457471745474, 0.8959457471745474, 0.9077401670445497, 0.9077401670445497, 0.9077401670445497, 0.8692587520949249, 0.8692587520949249, 0.8692587520949249, 0.8136504218998559, 0.8136504218998559, 0.8136504218998559, 0.8384287628159623, 0.8384287628159623, 0.8384287628159623, 0.8298907069189936, 0.8298907069189936, 0.8298907069189936, 0.6750689279341373, 0.6750689279341373, 0.6750689279341373, 0.6871335706301254, 0.6871335706301254, 0.6871335706301254, 0.1240477868287655, 0.1240477868287655, 0.1240477868287655, 0.1315871652283409, 0.1315871652283409, 0.1315871652283409, 0.17389613660951686, 0.17389613660951686, 0.17389613660951686, 0.6272669642982812, 0.6272669642982812, 0.6272669642982812, 0.9358742898928117, 0.9358742898928117, 0.9358742898928117, 0.8962701103884915, 0.8962701103884915, 0.8962701103884915, 0.9185684053569547, 0.9185684053569547, 0.9185684053569547, 0.4666647982886706, 0.4666647982886706, 0.4666647982886706, 0.42025294708075656, 0.42025294708075656, 0.42025294708075656, 0.17664044371613596, 0.17664044371613596, 0.17664044371613596, 0.9019322045916928, 0.9019322045916928, 0.9019322045916928, 0.9091683044276503, 0.9091683044276503, 0.9091683044276503, 0.8878634874591448, 0.8878634874591448, 0.8878634874591448, 0.16389544241984988, 0.16389544241984988, 0.16389544241984988, 0.559552564550394, 0.559552564550394, 0.559552564550394, 0.1960176162663696, 0.1960176162663696, 0.1960176162663696, 0.18583862468206258, 0.18583862468206258, 0.18583862468206258, 0.2265119396853239, 0.2265119396853239, 0.2265119396853239, 0.1620166251234445, 0.1620166251234445, 0.1620166251234445, 0.008553125546112428, 0.008553125546112428, 0.008553125546112428, 0.3042748431283615, 0.3042748431283615, 0.3042748431283615, 0.501293712822639, 0.501293712822639, 0.501293712822639, 0.1307097534764916, 0.1307097534764916, 0.1307097534764916, 0.07361275845679227, 0.07361275845679227, 0.07361275845679227, 0.4677841349456757, 0.4677841349456757, 0.4677841349456757, 0.2738925536896154, 0.2738925536896154, 0.2738925536896154, 0.16169525359877512, 0.16169525359877512, 0.16169525359877512, 0.14060869402914244, 0.14060869402914244, 0.14060869402914244, 0.20321781549381035, 0.20321781549381035, 0.20321781549381035, 0.38184605722245, 0.38184605722245, 0.38184605722245, 0.15231405519630226, 0.15231405519630226, 0.15231405519630226, 0.6972416943860318, 0.6972416943860318, 0.6972416943860318, 0.7560944797215098, 0.7560944797215098, 0.7560944797215098, 0.5594109304702906, 0.5594109304702906, 0.5594109304702906, 0.11028757636413411, 0.11028757636413411, 0.11028757636413411, 0.12959316529356124, 0.12959316529356124, 0.12959316529356124, 0.12323379793798028, 0.12323379793798028, 0.12323379793798028, 0.6304913140322495, 0.6304913140322495, 0.6304913140322495, 0.5392221951639471, 0.5392221951639471, 0.5392221951639471, 0.2649294033954356, 0.2649294033954356, 0.2649294033954356, 0.585295001034857, 0.585295001034857, 0.585295001034857, 0.5707191754013301, 0.5707191754013301, 0.5707191754013301, 0.5811125714367058, 0.5811125714367058, 0.5811125714367058, 0.3009797226027585, 0.3009797226027585, 0.3009797226027585, 0.20711014601979028, 0.20711014601979028, 0.20711014601979028, 0.4155033221273755, 0.4155033221273755, 0.4155033221273755, 0.2019674107938042, 0.2019674107938042, 0.2019674107938042, 0.23238118905588223, 0.23238118905588223, 0.23238118905588223, 0.2516072778584749, 0.2516072778584749, 0.2516072778584749, 0.7565530257062771, 0.7565530257062771, 0.7565530257062771, 0.2229962041189597, 0.2229962041189597, 0.2229962041189597, 0.21871982237729404, 0.21871982237729404, 0.21871982237729404, 0.8297776984203598, 0.8297776984203598, 0.8297776984203598, 0.16947628808845272, 0.16947628808845272, 0.16947628808845272, 0.1661380894415868, 0.1661380894415868, 0.1661380894415868, 0.40547929247102643, 0.40547929247102643, 0.40547929247102643, 0.5277647243572205, 0.5277647243572205, 0.5277647243572205, 0.8943608693556907, 0.8943608693556907, 0.8943608693556907, 0.1794601795212749, 0.1794601795212749, 0.1794601795212749, 0.18182115919458008, 0.18182115919458008, 0.18182115919458008, 0.19251733310699115, 0.19251733310699115, 0.19251733310699115, 0.09496457484594989, 0.09496457484594989, 0.09496457484594989, 0.08891537761326074, 0.08891537761326074, 0.08891537761326074, 0.07938758489132125, 0.07938758489132125, 0.07938758489132125]}, "mutation_prompt": null}
{"id": "527da12e-bde3-44fe-a5ba-db7431358ee1", "solution": "import numpy as np\n\nclass ADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 5 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.strategy = 'rand/1/bin'\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[indices]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                \n                # Selection\n                trial_fit = func(trial)\n                eval_count += 1\n                \n                if trial_fit < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fit\n\n            # Adaptation of parameters\n            self.F = np.clip(np.random.normal(0.5, 0.3), 0.1, 0.9)\n            self.CR = np.clip(np.random.normal(0.9, 0.1), 0.1, 1.0)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "ADE", "description": "Adaptive Differential Evolution with Self-Adaptive Control Parameters for Efficient Black Box Function Optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "36577ed5-5420-48e5-a6cc-b6f465003e66", "metadata": {"aucs": [0.8959457471745474, 0.8959457471745474, 0.8959457471745474, 0.9077401670445497, 0.9077401670445497, 0.9077401670445497, 0.8692587520949249, 0.8692587520949249, 0.8692587520949249, 0.8136504218998559, 0.8136504218998559, 0.8136504218998559, 0.8384287628159623, 0.8384287628159623, 0.8384287628159623, 0.8298907069189936, 0.8298907069189936, 0.8298907069189936, 0.6750689279341373, 0.6750689279341373, 0.6750689279341373, 0.6871335706301254, 0.6871335706301254, 0.6871335706301254, 0.1240477868287655, 0.1240477868287655, 0.1240477868287655, 0.1315871652283409, 0.1315871652283409, 0.1315871652283409, 0.17389613660951686, 0.17389613660951686, 0.17389613660951686, 0.6272669642982812, 0.6272669642982812, 0.6272669642982812, 0.9358742898928117, 0.9358742898928117, 0.9358742898928117, 0.8962701103884915, 0.8962701103884915, 0.8962701103884915, 0.9185684053569547, 0.9185684053569547, 0.9185684053569547, 0.4666647982886706, 0.4666647982886706, 0.4666647982886706, 0.42025294708075656, 0.42025294708075656, 0.42025294708075656, 0.17664044371613596, 0.17664044371613596, 0.17664044371613596, 0.9019322045916928, 0.9019322045916928, 0.9019322045916928, 0.9091683044276503, 0.9091683044276503, 0.9091683044276503, 0.8878634874591448, 0.8878634874591448, 0.8878634874591448, 0.16389544241984988, 0.16389544241984988, 0.16389544241984988, 0.559552564550394, 0.559552564550394, 0.559552564550394, 0.1960176162663696, 0.1960176162663696, 0.1960176162663696, 0.18583862468206258, 0.18583862468206258, 0.18583862468206258, 0.2265119396853239, 0.2265119396853239, 0.2265119396853239, 0.1620166251234445, 0.1620166251234445, 0.1620166251234445, 0.008553125546112428, 0.008553125546112428, 0.008553125546112428, 0.3042748431283615, 0.3042748431283615, 0.3042748431283615, 0.501293712822639, 0.501293712822639, 0.501293712822639, 0.1307097534764916, 0.1307097534764916, 0.1307097534764916, 0.07361275845679227, 0.07361275845679227, 0.07361275845679227, 0.4677841349456757, 0.4677841349456757, 0.4677841349456757, 0.2738925536896154, 0.2738925536896154, 0.2738925536896154, 0.16169525359877512, 0.16169525359877512, 0.16169525359877512, 0.14060869402914244, 0.14060869402914244, 0.14060869402914244, 0.20321781549381035, 0.20321781549381035, 0.20321781549381035, 0.38184605722245, 0.38184605722245, 0.38184605722245, 0.15231405519630226, 0.15231405519630226, 0.15231405519630226, 0.6972416943860318, 0.6972416943860318, 0.6972416943860318, 0.7560944797215098, 0.7560944797215098, 0.7560944797215098, 0.5594109304702906, 0.5594109304702906, 0.5594109304702906, 0.11028757636413411, 0.11028757636413411, 0.11028757636413411, 0.12959316529356124, 0.12959316529356124, 0.12959316529356124, 0.12323379793798028, 0.12323379793798028, 0.12323379793798028, 0.6304913140322495, 0.6304913140322495, 0.6304913140322495, 0.5392221951639471, 0.5392221951639471, 0.5392221951639471, 0.2649294033954356, 0.2649294033954356, 0.2649294033954356, 0.585295001034857, 0.585295001034857, 0.585295001034857, 0.5707191754013301, 0.5707191754013301, 0.5707191754013301, 0.5811125714367058, 0.5811125714367058, 0.5811125714367058, 0.3009797226027585, 0.3009797226027585, 0.3009797226027585, 0.20711014601979028, 0.20711014601979028, 0.20711014601979028, 0.4155033221273755, 0.4155033221273755, 0.4155033221273755, 0.2019674107938042, 0.2019674107938042, 0.2019674107938042, 0.23238118905588223, 0.23238118905588223, 0.23238118905588223, 0.2516072778584749, 0.2516072778584749, 0.2516072778584749, 0.7565530257062771, 0.7565530257062771, 0.7565530257062771, 0.2229962041189597, 0.2229962041189597, 0.2229962041189597, 0.21871982237729404, 0.21871982237729404, 0.21871982237729404, 0.8297776984203598, 0.8297776984203598, 0.8297776984203598, 0.16947628808845272, 0.16947628808845272, 0.16947628808845272, 0.1661380894415868, 0.1661380894415868, 0.1661380894415868, 0.40547929247102643, 0.40547929247102643, 0.40547929247102643, 0.5277647243572205, 0.5277647243572205, 0.5277647243572205, 0.8943608693556907, 0.8943608693556907, 0.8943608693556907, 0.1794601795212749, 0.1794601795212749, 0.1794601795212749, 0.18182115919458008, 0.18182115919458008, 0.18182115919458008, 0.19251733310699115, 0.19251733310699115, 0.19251733310699115, 0.09496457484594989, 0.09496457484594989, 0.09496457484594989, 0.08891537761326074, 0.08891537761326074, 0.08891537761326074, 0.07938758489132125, 0.07938758489132125, 0.07938758489132125]}, "mutation_prompt": null}
