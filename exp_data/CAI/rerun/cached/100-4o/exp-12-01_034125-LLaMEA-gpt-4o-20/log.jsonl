{"id": "d6e9750f-46e0-409e-ae4c-209676946f4c", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.7\n        self.cognitive_param = 1.5\n        self.social_param = 1.5\n        self.f = 0.8  # DE mutation factor\n        self.cr = 0.9  # DE crossover probability\n        self.bounds = (-5.0, 5.0)\n    \n    def __call__(self, func):\n        # Initialize particle swarm\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(pop)\n        personal_best_scores = np.array([func(ind) for ind in pop])\n        \n        # Global best initialization\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n        \n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_param * r1 * (personal_best_positions[i] - pop[i]) +\n                                 self.social_param * r2 * (global_best_position - pop[i]))\n                \n                # Update position\n                pop[i] = np.clip(pop[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new position\n                score = func(pop[i])\n                evaluations += 1\n                \n                # Update personal best if necessary\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = pop[i]\n                    \n                # Update global best if necessary\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = pop[i]\n                \n                # Apply Differential Evolution crossover\n                if evaluations < self.budget:\n                    # Select three random indices different from i\n                    indices = [idx for idx in range(self.population_size) if idx != i]\n                    a, b, c = pop[np.random.choice(indices, 3, replace=False)]\n                    \n                    mutant = np.clip(a + self.f * (b - c), self.bounds[0], self.bounds[1])\n                    trial = np.copy(pop[i])\n                    crossover = np.random.rand(self.dim) < self.cr\n                    trial[crossover] = mutant[crossover]\n                    \n                    # Evaluate trial\n                    trial_score = func(trial)\n                    evaluations += 1\n                    \n                    # Replace if trial is better\n                    if trial_score < score:\n                        pop[i] = trial\n                        score = trial_score\n                \n                # Update global best after DE selection as well\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = pop[i]\n        \n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution crossover for enhanced global and local search capabilities.", "configspace": "", "generation": 0, "fitness": 0.17026999944862192, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.41779131714729034, 0.4161974732006941, 0.4149910847169592, 0.38476686129609405, 0.46823796702276077, 0.25848140679970233, 0.4683981497969143, 0.39081257790207535, 0.4635852509342696, 0.06253725085563511, 0.04811419034407949, 0.04254712171952857, 0.07004094772660208, 0.00888334414437797, 0.0031309721679737557, 0.12305677194587838, 0.07555977619044063, 0.046128974419577196, 0.07353681077292529, 0.09648358343750318, 0.06038741346665155, 0.08413735049109416, 0.08572074099358706, 0.10204670479073197, 0.06912739594345407, 0.08545022719755979, 0.10600334003753964, 0.035821074825742816, 0.05694115981492265, 0.07992350761270373, 0.060870858640110104, 0.03699897619515702, 0.10385476085786727, 0.04014392213365048, 0.03529929805270826, 0.08079139574996974, 0.9854349203799357, 0.9889129462335251, 0.9881500005538727, 0.986409944280078, 0.9878486625631612, 0.9878558880315301, 0.9883226261971508, 0.9833237504826198, 0.9834863563524968, 0.11234774674557613, 0.09566785864841476, 0.06035547044760392, 0.0865791824297486, 0.12602501147500644, 0.14181782259119502, 0.10783911152960246, 0.07864282867370587, 0.11283672364080188, 0.21352628708288723, 0.1385580367233732, 0.20330042402346749, 0.1797940657197985, 0.19770468525983464, 0.18739111641059158, 0.1389036276360297, 0.13122766607102798, 0.15292393992981346, 0.09349969724538243, 0.14387983760014345, 0.11909074887932769, 0.08999122732750675, 0.09264605277097926, 0.06903889165393395, 0.14353750093231665, 0.11784961112174785, 0.1291487700909849, 0.028840690805552738, 0.017177174460627054, 0.10749489616582308, 0.11195063750008105, 0.1080433228176334, 0.1387926311992207, 0.001508704457055532, 0.0873605766341683, 0.028107008870847827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001572681911214957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04316854540992132, 0.04752077172527458, 0.04161623227418554, 0.07509985669483354, 9.999999999998899e-05, 0.02685924200074674, 0.043045418675064284, 0.040804540010940804, 0.028085192957466476, 0.11750922461876967, 9.999999999998899e-05, 0.01971802493213526, 0.013843801311557713, 0.010580098831275975, 9.999999999998899e-05, 0.008824825262004232, 0.03529026864915197, 0.001061662500492111, 0.04484723255428957, 0.04493546818264671, 0.11518342137916193, 0.033482088784050346, 0.023383210886210648, 0.027422299871678324, 0.07978487221610997, 0.06155634644833896, 0.07398495892817458, 0.37832153840177474, 0.3554874779327801, 0.30653622374579936, 0.2811383454690468, 0.42215282240535257, 0.28826834018860825, 0.38461487285075313, 0.3671213490083681, 0.39741461880655393, 0.07710420754525094, 0.07848187954159691, 0.07887043247545678, 0.06315957691012886, 0.06486998909901398, 0.0590868487420817, 0.06441499521731331, 0.06699707128889565, 0.0539968432632848, 0.14359884046169025, 0.13265409036954479, 0.14036221730310694, 0.12804583927790558, 0.1403645287000589, 0.13815979882638563, 0.14194893610302128, 0.15108497654955866, 0.14661325004446157, 0.17699015701661325, 0.20682490256217756, 0.22742054062421102, 0.238660440988141, 0.1581611516221728, 0.23018067637947082, 0.19656143385692593, 0.26601121951675766, 0.2655748482036141, 0.15374933168234417, 0.16576057126974753, 0.17694615449206252, 0.2342100327291904, 0.18274629586597702, 0.169115679989015, 0.13710619421239534, 0.2323728673280332, 0.16861231531450316, 0.149218653249515, 0.15254267326449023, 0.17481516062535607, 0.15573735444734627, 0.15895424778563505, 0.15058530797573, 0.18860763295162308, 0.19382045396054115, 0.15288939109766653, 0.16972312146507507, 0.17066196695425728, 0.1761137666790097, 0.17364000209506447, 0.16326802639898452, 0.20028823761998815, 0.17190524224562032, 0.18828392757668366, 0.18051773830271556, 0.20208988382156645, 0.15752152412868947, 0.15240744396472905, 0.16209773054820853, 0.19692792766887357, 0.16539937133079785, 0.15752885761535163, 0.16835647016514144, 0.1929261406427134, 0.2421179285965427, 0.20153098551931325, 0.15648841365545796, 0.19920622304221836, 0.16837952883871043, 0.1826517948895442, 0.2078250979317935, 0.20535524555380658, 0.1894737325886473, 0.1858472987554043, 0.18188926718852216, 0.17950511978521155, 0.18882073970598812, 0.17262460660934698, 0.1889879913222936, 0.18518413208257534, 0.18923241643525146, 0.17627138206351667, 0.10099448804245625, 0.05814258777196124, 0.05494342379133377, 0.055053568222194205, 0.070084542841923, 0.062369513537561816, 0.07681968820637997, 0.06761483859295225, 0.07739283328239144]}, "mutation_prompt": null}
{"id": "22dc7422-8833-496b-94b1-b7d5edc18cfe", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.7\n        self.cognitive_param = 1.5\n        self.social_param = 1.5\n        self.f = 0.8  # DE mutation factor\n        self.cr = 0.9  # DE crossover probability\n        self.bounds = (-5.0, 5.0)\n    \n    def __call__(self, func):\n        # Initialize particle swarm\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(pop)\n        personal_best_scores = np.array([func(ind) for ind in pop])\n        \n        # Global best initialization\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n        \n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_param * r1 * (personal_best_positions[i] - pop[i]) +\n                                 self.social_param * r2 * (global_best_position - pop[i]))\n                \n                # Update position\n                pop[i] = np.clip(pop[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new position\n                score = func(pop[i])\n                evaluations += 1\n                \n                # Update personal best if necessary\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = pop[i]\n                    \n                # Update global best if necessary\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = pop[i]\n                \n                # Apply Differential Evolution crossover\n                if evaluations < self.budget:\n                    # Select three random indices different from i\n                    indices = [idx for idx in range(self.population_size) if idx != i]\n                    a, b, c = pop[np.random.choice(indices, 3, replace=False)]\n                    \n                    mutant = np.clip(a + self.f * (b - c), self.bounds[0], self.bounds[1])\n                    trial = np.copy(pop[i])\n                    crossover = np.random.rand(self.dim) < self.cr\n                    trial[crossover] = mutant[crossover]\n                    \n                    # Evaluate trial\n                    trial_score = func(trial)\n                    evaluations += 1\n                    \n                    # Replace if trial is better\n                    if trial_score < score:\n                        pop[i] = trial\n                        score = trial_score\n                \n                # Update global best after DE selection as well\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = pop[i]\n        \n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution crossover for enhanced global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6e9750f-46e0-409e-ae4c-209676946f4c", "metadata": {"aucs": [0.41779131714729034, 0.4161974732006941, 0.4149910847169592, 0.38476686129609405, 0.46823796702276077, 0.25848140679970233, 0.4683981497969143, 0.39081257790207535, 0.4635852509342696, 0.06253725085563511, 0.04811419034407949, 0.04254712171952857, 0.07004094772660208, 0.00888334414437797, 0.0031309721679737557, 0.12305677194587838, 0.07555977619044063, 0.046128974419577196, 0.07353681077292529, 0.09648358343750318, 0.06038741346665155, 0.08413735049109416, 0.08572074099358706, 0.10204670479073197, 0.06912739594345407, 0.08545022719755979, 0.10600334003753964, 0.035821074825742816, 0.05694115981492265, 0.07992350761270373, 0.060870858640110104, 0.03699897619515702, 0.10385476085786727, 0.04014392213365048, 0.03529929805270826, 0.08079139574996974, 0.9854349203799357, 0.9889129462335251, 0.9881500005538727, 0.986409944280078, 0.9878486625631612, 0.9878558880315301, 0.9883226261971508, 0.9833237504826198, 0.9834863563524968, 0.11234774674557613, 0.09566785864841476, 0.06035547044760392, 0.0865791824297486, 0.12602501147500644, 0.14181782259119502, 0.10783911152960246, 0.07864282867370587, 0.11283672364080188, 0.21352628708288723, 0.1385580367233732, 0.20330042402346749, 0.1797940657197985, 0.19770468525983464, 0.18739111641059158, 0.1389036276360297, 0.13122766607102798, 0.15292393992981346, 0.09349969724538243, 0.14387983760014345, 0.11909074887932769, 0.08999122732750675, 0.09264605277097926, 0.06903889165393395, 0.14353750093231665, 0.11784961112174785, 0.1291487700909849, 0.028840690805552738, 0.017177174460627054, 0.10749489616582308, 0.11195063750008105, 0.1080433228176334, 0.1387926311992207, 0.001508704457055532, 0.0873605766341683, 0.028107008870847827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001572681911214957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04316854540992132, 0.04752077172527458, 0.04161623227418554, 0.07509985669483354, 9.999999999998899e-05, 0.02685924200074674, 0.043045418675064284, 0.040804540010940804, 0.028085192957466476, 0.11750922461876967, 9.999999999998899e-05, 0.01971802493213526, 0.013843801311557713, 0.010580098831275975, 9.999999999998899e-05, 0.008824825262004232, 0.03529026864915197, 0.001061662500492111, 0.04484723255428957, 0.04493546818264671, 0.11518342137916193, 0.033482088784050346, 0.023383210886210648, 0.027422299871678324, 0.07978487221610997, 0.06155634644833896, 0.07398495892817458, 0.37832153840177474, 0.3554874779327801, 0.30653622374579936, 0.2811383454690468, 0.42215282240535257, 0.28826834018860825, 0.38461487285075313, 0.3671213490083681, 0.39741461880655393, 0.07710420754525094, 0.07848187954159691, 0.07887043247545678, 0.06315957691012886, 0.06486998909901398, 0.0590868487420817, 0.06441499521731331, 0.06699707128889565, 0.0539968432632848, 0.14359884046169025, 0.13265409036954479, 0.14036221730310694, 0.12804583927790558, 0.1403645287000589, 0.13815979882638563, 0.14194893610302128, 0.15108497654955866, 0.14661325004446157, 0.17699015701661325, 0.20682490256217756, 0.22742054062421102, 0.238660440988141, 0.1581611516221728, 0.23018067637947082, 0.19656143385692593, 0.26601121951675766, 0.2655748482036141, 0.15374933168234417, 0.16576057126974753, 0.17694615449206252, 0.2342100327291904, 0.18274629586597702, 0.169115679989015, 0.13710619421239534, 0.2323728673280332, 0.16861231531450316, 0.149218653249515, 0.15254267326449023, 0.17481516062535607, 0.15573735444734627, 0.15895424778563505, 0.15058530797573, 0.18860763295162308, 0.19382045396054115, 0.15288939109766653, 0.16972312146507507, 0.17066196695425728, 0.1761137666790097, 0.17364000209506447, 0.16326802639898452, 0.20028823761998815, 0.17190524224562032, 0.18828392757668366, 0.18051773830271556, 0.20208988382156645, 0.15752152412868947, 0.15240744396472905, 0.16209773054820853, 0.19692792766887357, 0.16539937133079785, 0.15752885761535163, 0.16835647016514144, 0.1929261406427134, 0.2421179285965427, 0.20153098551931325, 0.15648841365545796, 0.19920622304221836, 0.16837952883871043, 0.1826517948895442, 0.2078250979317935, 0.20535524555380658, 0.1894737325886473, 0.1858472987554043, 0.18188926718852216, 0.17950511978521155, 0.18882073970598812, 0.17262460660934698, 0.1889879913222936, 0.18518413208257534, 0.18923241643525146, 0.17627138206351667, 0.10099448804245625, 0.05814258777196124, 0.05494342379133377, 0.055053568222194205, 0.070084542841923, 0.062369513537561816, 0.07681968820637997, 0.06761483859295225, 0.07739283328239144]}, "mutation_prompt": null}
