{"id": "1235a22e-994a-445d-9d39-d7f217d1d1ac", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "a769d5d1-598a-49b4-b2b2-5ac6a0348194", "solution": "import numpy as np\n\nclass HybridPSOGA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.crossover_rate = 0.7\n        self.mutation_rate = 0.1\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-self.max_velocity, self.max_velocity, (self.population_size, dim))\n        self.best_positions = np.copy(self.positions)\n        self.global_best_position = None\n        self.best_scores = np.full(self.population_size, np.inf)\n        self.global_best_score = np.inf\n\n    def _evaluate_population(self, func):\n        for i in range(self.population_size):\n            score = func(self.positions[i])\n            if score < self.best_scores[i]:\n                self.best_scores[i] = score\n                self.best_positions[i] = self.positions[i]\n            if score < self.global_best_score:\n                self.global_best_score = score\n                self.global_best_position = self.positions[i]\n\n    def _update_velocities_and_positions(self):\n        for i in range(self.population_size):\n            inertia = self.velocities[i]\n            cognitive = np.random.rand(self.dim) * (self.best_positions[i] - self.positions[i])\n            social = np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n            self.velocities[i] = inertia + cognitive + social\n            self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n            self.positions[i] += self.velocities[i]\n            self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n    def _crossover_and_mutate(self):\n        for i in range(self.population_size):\n            if np.random.rand() < self.crossover_rate:\n                partner_index = np.random.randint(self.population_size)\n                crossover_point = np.random.randint(1, self.dim)\n                self.positions[i, :crossover_point] = self.best_positions[partner_index, :crossover_point]\n            if np.random.rand() < self.mutation_rate:\n                mutation_vector = np.random.normal(0, 1, self.dim)\n                self.positions[i] += mutation_vector\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            self._evaluate_population(func)\n            evaluations += self.population_size\n            if evaluations >= self.budget:\n                break\n            self._update_velocities_and_positions()\n            self._crossover_and_mutate()\n        \n        return self.global_best_position", "name": "HybridPSOGA", "description": "Hybrid PSO-GA Algorithm combines Particle Swarm Optimization with Genetic Algorithm principles for enhanced exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": 0.1942333927819352, "feedback": "", "error": "", "parent_id": "1235a22e-994a-445d-9d39-d7f217d1d1ac", "metadata": {"aucs": [0.35185664504106473, 0.3165443100248604, 0.32305157908769433, 0.33498650364813176, 0.31619813027433696, 0.3181956906817536, 0.33133244463702394, 0.30128217189747086, 0.33325011453419806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08208243495342371, 0.10679964185883695, 0.13377619950849295, 0.11494590934899718, 0.18513312540166194, 0.09757026956496373, 0.1372857889389716, 0.12221970873454302, 0.10197786562521327, 0.0996934296771258, 0.07612492866165954, 0.09804752404777262, 0.09825093024563136, 0.09055171795713834, 0.10640316255237225, 0.09653072001203933, 0.10419514461691959, 0.08825129337612014, 0.9642445619991346, 0.9447517693492873, 0.9733695106680155, 0.9487749955400347, 0.9493260421684582, 0.9438418662771741, 0.9642814931755129, 0.9362405027703666, 0.9539843353747746, 0.18546701908429664, 0.20622655474249296, 0.19383224666851828, 0.1968911155235804, 0.19118499532570699, 0.2255458331063751, 0.16675868091522916, 0.18232281916382476, 0.1793185305375613, 0.30438883627427704, 0.28935784756650296, 0.24175347094580069, 0.20750538174670063, 0.21677004942859468, 0.2823262685260347, 0.22695194329601898, 0.2634893747726582, 0.2775435067139197, 0.11791553846703295, 0.12834502447510754, 0.11593810222874457, 0.13087809610284784, 0.17790169035186731, 0.1357864142032813, 0.13170564937552276, 0.12503398914924346, 0.11141357633563853, 0.11453441911251627, 0.12469596779103287, 0.14295672232005796, 0.10370606166299878, 0.10872707810948612, 0.11383200989083964, 0.12581294590937564, 0.08667201682475645, 0.12007963934504695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02941610299899533, 9.999999999998899e-05, 0.0013769596050265953, 0.09342720225925971, 0.08454940036809488, 0.15280571251597663, 0.08465160988657083, 0.10245214078844511, 0.008408049654485161, 0.13463245511315414, 0.12312203734033611, 0.08548110388119512, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051278983503476594, 0.051651035560664194, 0.05386248437135677, 0.04696977453617257, 0.05003305059311969, 0.06296363860078202, 0.0583151983801965, 0.08608112927683431, 0.06879634189801276, 0.2946464199965716, 0.335934234182258, 0.35104769452098117, 0.30083847355626614, 0.3179826027178779, 0.31717151742651417, 0.2967662025536426, 0.33194618565578327, 0.3629574218633256, 0.09346969600534172, 0.10274603581680053, 0.11567074641662056, 0.10127028998375887, 0.0917456996738032, 0.1286298630748972, 0.09279602863085123, 0.10516589397567133, 0.09533907403224107, 0.18098316590493468, 0.19085971005676716, 0.17561339486591054, 0.14237258275696962, 0.1635674346601831, 0.17041341968649248, 0.1446784693873746, 0.21092773687555366, 0.15280636730401953, 0.243737446068503, 0.25215694733215943, 0.24671774156750248, 0.24934269001217135, 0.23604581693356097, 0.2723231334182441, 0.24721254204499432, 0.22812518139078097, 0.23063355778056105, 0.1753986956763368, 0.18386060680944594, 0.184013324308829, 0.21806172147428948, 0.16430942253317116, 0.1712108817265755, 0.1869328627646124, 0.19083659349005566, 0.1670474987107109, 0.21532176055114427, 0.2151071315617512, 0.20338940522017301, 0.21187168169661663, 0.22165049041610574, 0.2277500924496958, 0.22869119024657458, 0.20294484831734794, 0.21839562695760628, 0.20641106744854243, 0.23074483441288407, 0.1758222259590062, 0.19981985999889484, 0.2090078806947313, 0.1912449559777748, 0.20248488784624696, 0.1954801574898719, 0.20304197841184546, 0.182467526557328, 0.16647236608376847, 0.1594978892081319, 0.43143674083767924, 0.1878044012775587, 0.4403076081172185, 0.14954406123997155, 0.1676975203284855, 0.43366367529776384, 0.4215994225168799, 0.3351599215736022, 0.41492810476800246, 0.19504447888090204, 0.38354692060494056, 0.45169583519714707, 0.26483273086388814, 0.3127716451754753, 0.2872416701226841, 0.18510057173636296, 0.17794185643572613, 0.18736011081195092, 0.18323009442020333, 0.18227827791009554, 0.1852617629949751, 0.19455526340907559, 0.2052924556540182, 0.18853247740222823, 0.07912208442199664, 0.08208739305977031, 0.08792987085824211, 0.08458607382992, 0.07991592953475102, 0.0824558510063369, 0.10387692775965096, 0.09310020463585711, 0.0788837257278634]}, "mutation_prompt": null}
