{"id": "aba112d8-a0af-4979-b40f-1ef5eeb5c9cb", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 10 + int(2 * np.sqrt(dim))\n        self.w = 0.7  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.f = 0.8  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(pos) for pos in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n\n        while evals < self.budget:\n            # PSO update\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.w * velocities \n                          + self.c1 * r1 * (personal_best_positions - positions)\n                          + self.c2 * r2 * (global_best_position - positions))\n            positions = positions + velocities\n            positions = np.clip(positions, self.lb, self.ub)\n            \n            # Evaluate fitness\n            scores = np.array([func(pos) for pos in positions])\n            evals += self.pop_size\n\n            # Update personal bests\n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best_positions[improved] = positions[improved]\n            \n            # Update global best\n            if np.min(personal_best_scores) < global_best_score:\n                global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n                global_best_score = np.min(personal_best_scores)\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                # Mutation\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                mutant_vector = personal_best_positions[indices[0]] + self.f * (personal_best_positions[indices[1]] - personal_best_positions[indices[2]])\n                mutant_vector = np.clip(mutant_vector, self.lb, self.ub)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(cross_points, mutant_vector, positions[i])\n                \n                # Selection\n                trial_score = func(trial_vector)\n                evals += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    positions[i] = trial_vector\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_position = trial_vector\n                            global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Differential Evolution for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.36715956647079123, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8804814355638495, 0.8720800437390623, 0.8642055346927263, 0.8812330660070247, 0.9016208133844715, 0.9017311240376646, 0.8537383700301195, 0.8662939954982742, 0.879429591709258, 0.7650706915168205, 0.6386665871329769, 0.7721517971055513, 0.7849788834205901, 0.7333544310829749, 0.7627159306863092, 0.018436685567478905, 0.7492676056681414, 0.7946258265150202, 0.11997868110729448, 0.10224601153366475, 0.15733161171996324, 0.10595828733083434, 0.07099553655374458, 0.14998876040902975, 0.1313575242554612, 0.12349067548825499, 0.1228501537343949, 0.13123916751698583, 0.10557007761849801, 0.09964572462038557, 0.12642373633515347, 0.11922833844932212, 0.1448617983400312, 0.13506414357005014, 0.13101473952005904, 0.10606627214118014, 0.9934145289137187, 0.9840916214646362, 0.9934560188445783, 0.9869218869098211, 0.9917930810130204, 0.9901410656659249, 0.988657733787211, 0.9890644909165334, 0.9888842907886802, 0.5660701692146788, 0.468962864680078, 0.44793713911339894, 0.5784526598349282, 0.5791560610331251, 0.5658044840293535, 0.12663465331397417, 0.5127963205262891, 0.5235865381415497, 0.7358424262054724, 0.8416956110288699, 0.3497572741808521, 0.7602879551203501, 0.8626936591724926, 0.20671938070801077, 0.7733850244952014, 0.8190212233498014, 0.7761829162640395, 0.4919127053365133, 0.4859035556435516, 0.5673238434663734, 0.5094933748282106, 0.6475865962818483, 0.4922902657423398, 0.558543351823483, 0.4339566375684051, 0.5007420011693063, 0.39314117221701295, 0.022670277096230707, 0.51730919800108, 0.6185916141398756, 0.46071397859291363, 0.4630361568725503, 0.13536904814070494, 0.12368436525093007, 0.5345005636204547, 0.2261769075315022, 9.999999999998899e-05, 0.19711416194754183, 0.2109716118609989, 0.01028671949571669, 0.11333737872448091, 0.18636136995665398, 0.404017787266603, 0.4716018606316045, 0.5979801975770522, 0.33182574369755535, 0.19685519744968738, 0.17382662566957952, 0.15583649260751042, 0.4776147718757674, 0.2250418648172109, 0.5763923496079308, 0.0768415612550194, 0.0503308407349321, 9.999999999998899e-05, 0.2847450426967988, 0.10905434764776734, 0.08229852184920927, 0.22485053741858052, 0.1836192254590815, 0.08469550833891626, 0.0837027774371012, 0.04401725042245597, 0.2274784011090104, 0.3724550614178894, 9.999999999998899e-05, 0.006609943274307417, 0.03942910082121165, 0.2365613475543702, 0.058098276834999685, 0.08392398877055807, 0.6816197201310412, 0.7843304404626679, 0.6509641947793994, 0.7491868458142705, 0.6710964155248229, 0.7746814774306654, 0.6293586825118321, 0.6620883968948563, 0.6413045060818592, 0.10880916193743473, 0.1069917364080415, 0.12192972607469021, 0.13583694064822227, 0.09524555471709772, 0.1252598593409684, 0.08376573983607738, 0.12815591699845041, 0.09045349312589446, 0.4820900304907645, 0.12999567877806928, 0.14025244155498262, 0.20087873506614473, 0.17801829763835253, 0.12151359714642607, 0.2217347801027193, 0.29956455965940465, 0.16162664221369727, 0.4856421217550082, 0.4886708974191949, 0.37811276105177316, 0.4696797466351218, 0.4816235508337757, 0.43078273384906307, 0.5070293463935787, 0.4894726308346037, 0.4537570925129074, 0.3373564185254768, 0.33194726478494896, 0.28343918502306276, 0.31699508273126453, 0.29364410424023313, 0.3226680069114184, 0.30388043790930097, 0.38407613323407075, 0.31092654854189405, 0.20141517083402782, 0.18931737897277268, 0.19411948389015077, 0.23153608478909704, 0.21578361465649587, 0.182107101746395, 0.2224451865476038, 0.18781326637484108, 0.24271903894563063, 0.1836429557815913, 0.4486393516820464, 0.4890693624378971, 0.1770709310807269, 0.2335777490054699, 0.21022364847793173, 0.20258775896399805, 0.18942550778060208, 0.189199589654504, 0.183065829451307, 0.19833015625857975, 0.11489946500798198, 0.17288423538417996, 0.20127415218194178, 0.8290606045011217, 0.9008440473723689, 0.14743892889725452, 0.15385090664107715, 0.8088126006195174, 0.16675358384616357, 0.8829588675410112, 0.21315314158324827, 0.22478257822776693, 0.2122335910251263, 0.10443453384204315, 0.16693389526910574, 0.20689499142768342, 0.19894326723544653, 0.20811016342028776, 0.19957972750167174, 0.2268625317987123, 0.18984024864418592, 0.30770076057311535, 0.2624557568057033, 0.20030753547888291, 0.19991260149781287, 0.06928725640479949, 0.08292041581826137, 0.0770875531882601, 0.0705731510122607, 0.07654217856327505, 0.07972884912767109, 0.10038178794742303, 0.07480434439945494, 0.0898450911482862]}, "mutation_prompt": null}
{"id": "40d82e45-d722-42af-afb7-3ae5e4f19309", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 10 + int(2 * np.sqrt(dim))\n        self.w = 0.7  # inertia weight\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.f = 0.8  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(pos) for pos in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n\n        while evals < self.budget:\n            # PSO update with adaptive parameters\n            self.w = 0.5 + 0.3 * np.random.rand()\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.w * velocities \n                          + self.c1 * r1 * (personal_best_positions - positions)\n                          + self.c2 * r2 * (global_best_position - positions))\n            positions = positions + velocities\n            positions = np.clip(positions, self.lb, self.ub)\n            \n            # Evaluate fitness\n            scores = np.array([func(pos) for pos in positions])\n            evals += self.pop_size\n\n            # Update personal bests\n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best_positions[improved] = positions[improved]\n            \n            # Update global best\n            if np.min(personal_best_scores) < global_best_score:\n                global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n                global_best_score = np.min(personal_best_scores)\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                # Mutation with chaotic search\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                chaos_factor = 0.9 * (1 - evals / self.budget)\n                mutant_vector = personal_best_positions[indices[0]] + chaos_factor * self.f * (personal_best_positions[indices[1]] - personal_best_positions[indices[2]])\n                mutant_vector = np.clip(mutant_vector, self.lb, self.ub)\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(cross_points, mutant_vector, positions[i])\n                \n                # Selection\n                trial_score = func(trial_vector)\n                evals += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    positions[i] = trial_vector\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_position = trial_vector\n                            global_best_score = trial_score\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with Adaptive Parameters and Chaotic Search for Improved Convergence.", "configspace": "", "generation": 1, "fitness": 0.3651226733280847, "feedback": "", "error": "", "parent_id": "aba112d8-a0af-4979-b40f-1ef5eeb5c9cb", "metadata": {"aucs": [0.9164571381155526, 0.9037702309827335, 0.9118550184281188, 0.9173784063577207, 0.8953736552307463, 0.8992641352266585, 0.906196655511419, 0.14348036969624045, 0.9111216028547907, 0.8323456157844822, 9.999999999998899e-05, 0.8173243359454265, 0.8436339045486455, 0.8375194465772161, 0.8452897476642791, 0.810186309819357, 0.06173925400007607, 0.8379097960840406, 0.1212995826290667, 0.13642459309721489, 0.1288048211565287, 0.12050708128651932, 0.1388209039440471, 0.5547361209739556, 0.1539949528278648, 0.12336260987233305, 0.1351448034006637, 0.11066296862051672, 0.15665081419443738, 0.10867263221144152, 0.13131510643798427, 0.13646745007939376, 0.12125696722447354, 0.1389978692876913, 0.123979997097174, 0.14491270032846626, 0.9925111743904405, 0.9918512986567437, 0.993254129196683, 0.9918298935694227, 0.9830301532606484, 0.9935230994737997, 0.9887836897882334, 0.9838705129948774, 0.9879733168516897, 0.060286948678047514, 0.7350978125005327, 0.7492924122644458, 0.15315849510236368, 0.15450511022416868, 0.7230497423664073, 0.7490953326008285, 0.7643390639404204, 0.7243078316850462, 0.9311353457773197, 0.8897747565446269, 0.8156069587324373, 0.2068281686297213, 0.20702925038804798, 0.858661429564161, 0.23576428046948594, 0.8857845222699376, 0.11735557224400273, 0.6678341399581502, 0.6689929475861343, 0.4173973037330183, 0.44348993252911084, 0.13309797006986135, 0.13379870072333033, 0.4804351817910485, 0.4200361414326379, 0.4466338438329176, 0.13471025956598637, 0.20668548279627275, 0.35584775280146963, 0.44102134573905616, 0.13416907165425596, 0.13478332779443736, 0.5495300190755108, 0.180463609736641, 0.4112776550760654, 0.0677557890482845, 0.019312569494457588, 0.06159200613150073, 0.13220379944299854, 0.2540985449908978, 0.06813488860067696, 0.09321155182719942, 0.1582013197115224, 0.13503950655463837, 0.11096239218541193, 0.20323658933536903, 0.5215252959307254, 0.3477573590290838, 0.29723315511186943, 0.3018710816122715, 0.4015107241355137, 0.20824287658918073, 0.22960367209090538, 0.06824061754898225, 0.23829009263622414, 0.05210148241239099, 0.08312469792669508, 0.09846555690846981, 0.08053641497328501, 0.11687769812451554, 0.13419193511165473, 0.07717434143365587, 0.2507775835366094, 0.3031019147576578, 0.22245747535288274, 0.26742449253361145, 0.006676031424391438, 0.24615226144753644, 0.05868939316461441, 0.2532683195026427, 0.13257885880023623, 0.677321500878779, 0.6169459905529604, 0.7644437779212806, 0.6338895782252119, 0.1827353985669078, 0.694158628971437, 0.6611198855616632, 0.6585311515467336, 0.62900252644155, 0.09095305866273373, 0.09952676578971498, 0.12113603461201494, 0.16424161218190292, 0.11823191553698997, 0.1201800479215257, 0.14417926880247267, 0.1467365448019876, 0.10723023914631358, 0.17647833673808544, 0.15661746996986836, 0.3366367051817506, 0.7863619279614156, 0.2100706065740906, 0.14302708799419306, 0.15426648262900322, 0.12157588648727446, 0.2268311554160397, 0.4777756036783424, 0.48824202464815936, 0.45882906412208235, 0.5445802216448395, 0.5584112981111518, 0.42390741705427326, 0.5297826299416315, 0.5593765392074495, 0.6056081901363418, 0.3452930594991117, 0.36963458626543444, 0.17385516604874685, 0.4554535994242368, 0.49564361381375444, 0.19619777299148622, 0.442507929355506, 0.4136897367624611, 0.0827915409526444, 0.2219083284058182, 0.21680832679626205, 0.19504397895163272, 0.19197992646254647, 0.18182292387046606, 0.22656456458760565, 0.2111013289265341, 0.21383109933770605, 0.18631408162354124, 0.2446641806494977, 0.7172790541830952, 0.2158984970378529, 0.24766078954463144, 0.21685552544907638, 0.6660059883872449, 0.19931217042280192, 0.23340311284053927, 0.21242054225313378, 0.9324531517989043, 0.18481093291220207, 0.15480557745495915, 0.9164380283270546, 0.20082690290567373, 0.2016707649408589, 0.15339307433284044, 0.11502492191843261, 0.16663689354792155, 0.872970612848412, 0.2138243858157164, 0.9044867006837864, 0.07953134988453514, 0.16933634743920634, 0.8308106482172746, 0.20388321508991392, 0.1698393270639228, 0.8747739491249967, 0.20447391741605525, 0.19271694196866318, 0.18077492301156983, 0.17251149513832476, 0.18997945448647446, 0.19588062656815253, 0.19321052138570627, 0.18748718541326337, 0.23803297298270965, 0.08743912635022366, 0.0793186865318054, 0.11732201045616564, 0.08940911690613518, 0.0834817877269054, 0.07511677968033348, 0.07295137418902375, 0.09488462228269112, 0.09662023862764857]}, "mutation_prompt": null}
