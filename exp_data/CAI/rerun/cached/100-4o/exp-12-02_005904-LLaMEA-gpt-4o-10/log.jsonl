{"id": "806dcd97-97ca-446d-be0d-e9c2168d0753", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n        self.population_size = 10 + int(2.5 * np.log(self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_values = np.full(self.population_size, float('inf'))\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = float('inf')\n        \n        self.f_cr = 0.5\n        self.f_f = 0.8\n    \n    def __call__(self, func):\n        for it in range(self.budget):\n            for i in range(self.population_size):\n                # Evaluate particle\n                value = func(self.particles[i])\n                \n                # Update personal best\n                if value < self.personal_best_values[i]:\n                    self.personal_best_values[i] = value\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                    \n                # Update global best\n                if value < self.global_best_value:\n                    self.global_best_value = value\n                    self.global_best_position = self.particles[i].copy()\n\n            # Update velocities and positions using PSO\n            inertia_weight = 0.5 + 0.4 * np.random.rand()\n            cognitive = 2.0 * np.random.rand(self.population_size, self.dim) * (self.personal_best_positions - self.particles)\n            social = 2.0 * np.random.rand(self.population_size, self.dim) * (self.global_best_position - self.particles)\n            self.velocities = inertia_weight * self.velocities + cognitive + social\n            self.particles += self.velocities\n            \n            # Boundary handling for particles\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution\n            for i in range(self.population_size):\n                indices = [index for index in range(self.population_size) if index != i]\n                a, b, c = self.particles[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = a + self.f_f * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.particles[i])\n                cross_points = np.random.rand(self.dim) < self.f_cr\n                trial_vector[cross_points] = mutant_vector[cross_points]\n                \n                # Evaluate trial vector\n                trial_value = func(trial_vector)\n                \n                # Selection\n                if trial_value < self.personal_best_values[i]:\n                    self.particles[i] = trial_vector\n                    self.personal_best_values[i] = trial_value\n                    self.personal_best_positions[i] = trial_vector.copy()\n                    \n                    if trial_value < self.global_best_value:\n                        self.global_best_value = trial_value\n                        self.global_best_position = trial_vector.copy()\n        \n        return self.global_best_position, self.global_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution that balances exploration and exploitation through dynamic parameter adjustment.", "configspace": "", "generation": 0, "fitness": 0.19959827373878286, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7141025713261959, 0.6717229805388206, 0.5766480454449131, 0.18999310296768512, 0.19068962965863623, 0.7166016382685739, 0.6884248638835235, 0.7140077564366318, 0.18293356939378824, 0.41212936389195565, 0.355043771880605, 0.3109609217810174, 0.3078121958343699, 0.04370904704705714, 0.05709371248040229, 9.999999999998899e-05, 0.39427320188374804, 0.05162656028680046, 0.14733218210567378, 0.13815581713088887, 0.12586531353297958, 0.07135956985766556, 0.16700853907655622, 0.12064488764955805, 0.05604061362103474, 0.05449836250962803, 0.04777787204895323, 0.12684370725679128, 0.04429511458458979, 0.10605201933438946, 0.12331564527928962, 0.15392145830180415, 0.09549511637851116, 0.06735939047712636, 0.034809375083933114, 0.06305735512288024, 0.9911646060043476, 0.9907446047246408, 0.9956018098781818, 0.9893728173529822, 0.9925399039075289, 0.9905561471463752, 0.07496612653264512, 0.9934377840287487, 0.99015973199924, 0.059458082650072686, 0.11106725716096277, 0.05930977527665293, 0.2833069176473795, 0.15111975145470458, 0.15126231480799635, 0.08312681286678902, 0.08853165791982343, 0.08752804740983533, 0.2396717351894041, 0.2065591374645046, 0.21655809426196415, 0.2728053980332842, 0.1914851462451732, 0.19280991227338062, 0.06779942578640474, 0.11541135285061177, 0.1168777135516198, 0.1531491418370684, 0.09224083145401674, 0.178028188303899, 9.999999999998899e-05, 0.12136889512147131, 0.1319721014174482, 0.1572985993792183, 0.15187173902279683, 0.15851289931715296, 0.18300925676109525, 0.016027613828854204, 0.15539434434222255, 0.15388591972149956, 0.13975025417971243, 0.1422592989363397, 0.26855621932676055, 0.08563368840272689, 0.10190435835679523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04096862688732994, 0.08638682976704437, 0.07911403563853059, 0.08787933797632308, 0.00029392545781281587, 0.01608565017334529, 0.041865645470935076, 0.03069491073872599, 0.037752998195859755, 0.045495836472930984, 9.999999999998899e-05, 0.037157142623383876, 0.08159218265031054, 9.999999999998899e-05, 0.049893430094289926, 0.07533323792924618, 0.06085542415429723, 0.057921455214363426, 0.09406570804778225, 0.033015063256720545, 0.07961169090361397, 0.005867009203788465, 0.006348546776684505, 9.999999999998899e-05, 0.05543644869527964, 0.04147344410365805, 0.07557659323680221, 0.4398794247611121, 0.41366497203513763, 0.4227529649046857, 0.4497474590095468, 0.1825681968678099, 0.20891783707833633, 0.4767264917046308, 0.1365380797573853, 0.48210897685823617, 0.09480671384394901, 0.12425565698687002, 0.0572603011146261, 0.10364977003457809, 0.10460467435808041, 0.07331299169342309, 0.13029775856518588, 0.08322995028514946, 0.07319677406638525, 0.24040111829839517, 0.17831203272374352, 0.2100444277806376, 0.1446376822290074, 0.26183990429456483, 0.17863536412085834, 0.1971402530238825, 0.1778673144826597, 0.15545114257272596, 0.3198420227419285, 0.3463524949296707, 0.30500036584915347, 0.29012821761972296, 0.27655925895651146, 0.2922564325581427, 0.33043164630473554, 0.193062972048761, 0.25405659506931855, 0.17504430816371008, 0.24849028921228733, 0.13628111371391038, 0.2508157319805251, 0.22498740484610047, 0.22488674806365794, 0.17815609388958475, 0.10315589684434567, 0.13258396927643012, 0.2062494115556387, 0.1875353671055201, 0.201502444413879, 0.2396052178386162, 0.18578617075111348, 0.1878333005373065, 0.19694102716839057, 0.19926223944996746, 0.19191351626347752, 0.22992848215441508, 0.21015779233853482, 0.23707549595366895, 0.1731467577029876, 0.19003506075145782, 0.21589642315789692, 0.20208226360327552, 0.18652898501621318, 0.21879437857188366, 0.8686621726705583, 0.2079980022718918, 0.12459429899299213, 0.8333012616151283, 0.19848221165413038, 0.19778489219527495, 0.14934472004534127, 0.11929583721670811, 0.14910269099462625, 0.0827955120429602, 0.2053784040662675, 0.16780328021450364, 0.10906885798828392, 0.10818003753565664, 0.2090909117377575, 0.1890089372446675, 0.1545635563612252, 0.19928775669413412, 0.233512343501043, 0.18461668193185266, 0.1948301557290223, 0.20818674825232308, 0.19600476599557204, 0.1979348553335516, 0.1904955793153872, 0.19222209364832266, 0.18979658176770353, 0.08018820988417796, 0.06297473148686661, 0.08331585428424226, 0.09896832876111805, 0.06915907642970509, 0.0525002686714483, 0.07776349395036364, 0.07041449894712226, 0.07459952813045656]}, "mutation_prompt": null}
{"id": "b0490738-2c8b-4bce-9dc7-f9f877f67d4a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n        self.population_size = 10 + int(2.5 * np.log(self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_values = np.full(self.population_size, float('inf'))\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_value = float('inf')\n        \n        self.f_cr = 0.5\n        self.f_f = 0.8\n    \n    def __call__(self, func):\n        for it in range(self.budget):\n            for i in range(self.population_size):\n                # Evaluate particle\n                value = func(self.particles[i])\n                \n                # Update personal best\n                if value < self.personal_best_values[i]:\n                    self.personal_best_values[i] = value\n                    self.personal_best_positions[i] = self.particles[i].copy()\n                    \n                # Update global best\n                if value < self.global_best_value:\n                    self.global_best_value = value\n                    self.global_best_position = self.particles[i].copy()\n\n            # Update velocities and positions using PSO\n            inertia_weight = 0.5 + 0.4 * np.random.rand()\n            cognitive = 2.1 * np.random.rand(self.population_size, self.dim) * (self.personal_best_positions - self.particles)  # Slightly increased\n            social = 2.1 * np.random.rand(self.population_size, self.dim) * (self.global_best_position - self.particles)  # Slightly increased\n            self.velocities = inertia_weight * self.velocities + cognitive + social\n            self.particles += self.velocities\n            \n            # Boundary handling for particles\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution with added perturbation\n            for i in range(self.population_size):\n                indices = [index for index in range(self.population_size) if index != i]\n                a, b, c = self.particles[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = a + self.f_f * (b - c) + 0.01 * np.random.randn(self.dim)  # Added perturbation\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                trial_vector = np.copy(self.particles[i])\n                cross_points = np.random.rand(self.dim) < self.f_cr\n                trial_vector[cross_points] = mutant_vector[cross_points]\n                \n                # Evaluate trial vector\n                trial_value = func(trial_vector)\n                \n                # Improved Selection\n                if trial_value < self.personal_best_values[i] or np.random.rand() < 0.05:  # Stochastic acceptance\n                    self.particles[i] = trial_vector\n                    self.personal_best_values[i] = trial_value\n                    self.personal_best_positions[i] = trial_vector.copy()\n                    \n                    if trial_value < self.global_best_value:\n                        self.global_best_value = trial_value\n                        self.global_best_position = trial_vector.copy()\n        \n        return self.global_best_position, self.global_best_value", "name": "HybridPSODE", "description": "An enhanced Hybrid PSO-DE with stochastic perturbations and improved selection for better convergence.", "configspace": "", "generation": 1, "fitness": 0.17975180465800894, "feedback": "", "error": "", "parent_id": "806dcd97-97ca-446d-be0d-e9c2168d0753", "metadata": {"aucs": [0.41903584852855524, 0.388330592837396, 0.43728631100047577, 0.3491969226563306, 0.4805779509354633, 0.43514764012407536, 0.4489711325410597, 0.3112041528228442, 0.48227590622922667, 0.057385343354942386, 0.046223011005081194, 0.019655005088191735, 0.18574974913012243, 0.035789458925277406, 9.999999999998899e-05, 0.04423753269067654, 0.07393546842187537, 0.010934650615310293, 0.1115459240819866, 0.10465983131058443, 0.053674553405751446, 0.08706107291627108, 0.07222270687707388, 0.09757597890341507, 0.0478596206017613, 0.04342031572655414, 0.10894128657912239, 0.07556897646991512, 0.08925753476883369, 0.1501759725446935, 0.07957853362882394, 0.10315419539885662, 0.07552319370697547, 0.09620531809428445, 0.08793368702102922, 0.09038888550760238, 0.9914415724571448, 0.991939293255198, 0.9931393231271299, 0.9933369753402228, 0.9905406151817663, 0.9912317949298604, 0.9886699787105151, 0.9890976020929325, 0.9892936119312357, 0.2480249414327761, 0.10488204353085384, 0.10855422984590135, 0.14017642463965108, 0.14196890902965664, 0.20776366592200013, 0.11200190525127962, 0.1692105165702149, 0.14198000772180963, 0.22029221617626693, 0.15583799598292247, 0.2074192983050529, 0.188391450250888, 0.19961682870229014, 0.19004074025011253, 0.12344725809569845, 0.20621952620764472, 0.12395074965393416, 0.129110389056739, 0.15702014390785735, 0.13819427154051223, 0.09805150265956075, 0.13640357447055562, 0.13442052189705578, 0.18558942535770484, 0.10814300931520049, 0.14731588813285723, 0.1288386085319818, 0.11250144493548031, 0.11995962935813642, 0.1360585324656598, 0.12740514817866222, 0.12308258591550858, 0.11879954242061741, 9.999999999998899e-05, 0.1328606439170693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009948080244773783, 0.052849661907820145, 0.038575968702243, 0.10878008604857348, 0.00349501487906978, 0.012735699019142732, 0.013662516092037946, 0.019470476218192978, 0.036805194935469965, 0.006332091270923379, 0.012894862593275658, 0.03408436485734767, 0.007240234744526952, 0.028221664867182916, 0.01041933104632331, 0.052454277762246426, 9.999999999998899e-05, 9.999999999998899e-05, 0.03397769580873533, 0.10725912346334299, 0.10163091675336233, 0.00575806580468774, 0.014284455851625522, 0.032996308260338836, 0.06393585170113658, 0.0691986120361684, 0.07419249590225918, 0.3494838521045216, 0.3552844501579493, 0.359701735111141, 0.32938220427876463, 0.4014171080309443, 0.27384289634928327, 0.40712388380688924, 0.29921363427425907, 0.38914895421373075, 0.06969625244497546, 0.1098078115997565, 0.09076298277617312, 0.10877301384984384, 0.10939591404706295, 0.12192869031051612, 0.09169492036600657, 0.06934311580887476, 0.07614989602810074, 0.2231693973417559, 0.12942743655460598, 0.1583447028823468, 0.18630542371765524, 0.24393378659915166, 0.12461624154133155, 0.15382976732081965, 0.13537830577140508, 0.1934238526994143, 0.21464107561857604, 0.17824405029643586, 0.20403232058032905, 0.18934412405298606, 0.1822969342680787, 0.16134515105442093, 0.2943116423305686, 0.20384502036743557, 0.15667118527951285, 0.15855029641232354, 0.15462216386810446, 0.19662487471004408, 0.21600259408547084, 0.17872425636940426, 0.10475475531125888, 0.18888364750320363, 0.13938974119850556, 0.07366276926066473, 0.19462826857255733, 0.17324369560723285, 0.1722489878581981, 0.17736796019834056, 0.1801603987874274, 0.16644822428669026, 0.1782303901090858, 0.18531069433499703, 0.1874006687756643, 0.18636516306246886, 0.17634294610353007, 0.18187755862347477, 0.17971711432918058, 0.18375925396929138, 0.19962453632158106, 0.1787097508677381, 0.1852719561102244, 0.18406394987157693, 0.47262832938823063, 0.16070634474585654, 0.1512524359361248, 0.5170313226943066, 0.1990505729445059, 0.19703742751569953, 0.16269702896264293, 0.11459094783382184, 0.16056592929930413, 0.0816922337253203, 0.16841941983157616, 0.16406150997268687, 0.20350066662938582, 0.22774630213739366, 0.20949225095747126, 0.2106912553374476, 0.08041528757221617, 0.18522113001047513, 0.18707744348996158, 0.1737639357439652, 0.19864508898570843, 0.17411033008657073, 0.1959421106027337, 0.176814260757165, 0.2030062228114089, 0.19974320434811, 0.18102727214737546, 0.06123455184536197, 0.06779962323980215, 0.06685131753360507, 0.07632829785845552, 0.06325578355895922, 0.045054263712135056, 0.06261113513229744, 0.041772200439473495, 0.07079563834144464]}, "mutation_prompt": null}
