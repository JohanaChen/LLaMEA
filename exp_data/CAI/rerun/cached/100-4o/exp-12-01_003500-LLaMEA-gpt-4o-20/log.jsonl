{"id": "b36921a3-40e7-4f50-a9fd-f56b229939df", "solution": "import numpy as np\n\nclass AdaptiveEvolutionaryStrategy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.sigma = 0.3\n        self.success_threshold = 0.2\n        self.success_rate = 0.0\n        self.success_count = 0\n        self.evaluations = 0\n        self.population_size = 15\n        self.step_size_adjustment = 1.2\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_index = np.argmin(fitness)\n        best_individual = population[best_index]\n        best_fitness = fitness[best_index]\n        \n        while self.evaluations < self.budget:\n            offspring = np.array([self.mutate(ind) for ind in population])\n            offspring_fitness = np.array([func(ind) for ind in offspring])\n            \n            new_population = []\n            new_fitness = []\n\n            # Select the best individuals from current and offspring\n            combined_population = np.vstack((population, offspring))\n            combined_fitness = np.hstack((fitness, offspring_fitness))\n            indices = np.argsort(combined_fitness)[:self.population_size]\n            \n            for idx in indices:\n                new_population.append(combined_population[idx])\n                new_fitness.append(combined_fitness[idx])\n\n            # Update success rate and adjust sigma\n            successful_mutations = np.sum(offspring_fitness < fitness)\n            self.success_rate = successful_mutations / self.population_size\n            if self.success_rate > self.success_threshold:\n                self.sigma *= self.step_size_adjustment\n            else:\n                self.sigma /= self.step_size_adjustment\n            \n            population = np.array(new_population)\n            fitness = np.array(new_fitness)\n            \n            # Update best found solution\n            current_best_index = np.argmin(fitness)\n            if fitness[current_best_index] < best_fitness:\n                best_fitness = fitness[current_best_index]\n                best_individual = population[current_best_index]\n            \n            self.evaluations += self.population_size * 2\n\n        return best_individual\n\n    def mutate(self, individual):\n        mutation = np.random.normal(0, self.sigma, self.dim)\n        new_individual = np.clip(individual + mutation, self.lower_bound, self.upper_bound)\n        return new_individual", "name": "AdaptiveEvolutionaryStrategy", "description": "An Adaptive Evolutionary Strategy that dynamically adjusts the mutation step size based on success rate for robust exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2642821887090842, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9153706029994452, 0.9097046442257268, 0.9073894710673485, 0.8850016027204032, 0.916156150079132, 0.9176852559005858, 0.9142794720299161, 0.9160074606753366, 0.916100410226704, 0.0, 0.044402288817402935, 0.0, 0.029651165247783995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11775850793638687, 0.08338093207440123, 0.13516454923046073, 0.1637006658023249, 0.11243628016395268, 0.07879220972132894, 0.11233643967539753, 0.11736231270569497, 0.08046609493826906, 0.16265685719909673, 0.11693556946996209, 0.04710392250016848, 0.1360041175570026, 0.1857492328448671, 0.09212315727589415, 0.11075339425421393, 0.10609973716822352, 0.11054921544657392, 0.9755952782894165, 0.9702573048594972, 0.9655536942644504, 0.2642755115388785, 0.11490898676330397, 0.9206372005050926, 0.3092237028812055, 0.10261901017423447, 0.18099209728723487, 0.8189712935613153, 0.8272948405711666, 0.8520338112331595, 0.8102507093915495, 0.8319697462530911, 0.8499358861311509, 0.8161994180530218, 0.8324809351112832, 0.7994196759063429, 0.21766441832624384, 0.2572986264591657, 0.13600078982747, 0.33329510715971167, 0.15974633863877774, 0.21230561580203122, 0.16226125781248335, 0.18081559395145452, 0.22610260369366486, 0.17165214103905269, 0.16158091992770096, 0.19316131104155576, 0.2043460903013138, 0.1856267805951467, 0.21593480416099864, 0.19907935859800818, 0.18579614242432985, 0.3151940723412444, 0.2097913350053101, 0.21613604129117658, 0.29389029651962606, 0.2007402765877664, 0.23484811454095345, 0.18706310335114784, 0.19972910629677565, 0.0, 0.18272735523620265, 0.0, 0.0, 0.0, 0.0471767049335885, 0.008618521714868432, 0.0, 0.0, 0.0, 0.0, 0.07521773181832436, 0.05213317384553773, 0.0682056391354845, 0.06905294227601044, 0.018189454388116255, 0.03512331947668712, 0.12977861621682418, 0.067278036648458, 0.045016599364728016, 0.21259746363604004, 0.050758714356305745, 0.19452128509764355, 0.10926485671426689, 0.23483801298252294, 0.1134334526431039, 0.14721853378592786, 0.24498312826015067, 0.16925957055642216, 0.11239240887460145, 0.13287540568389522, 0.2242775813136073, 0.10527063775693601, 0.1570129177727222, 0.24281490447706944, 0.21557296052944253, 0.15471467529299188, 0.12773554139104304, 0.5190366183536023, 0.48587778822491057, 0.5840597875342144, 0.4999677180712262, 0.5285815347556218, 0.5022232521358226, 0.48922680968048227, 0.49975272707741647, 0.5048028397222966, 0.08032623031224029, 0.1634062715843465, 0.8639436669824232, 0.13610373302527656, 0.10194982612159786, 0.14629539461588315, 0.12645001648601828, 0.11247176603529496, 0.09041921408103348, 0.28467855869386804, 0.2881180376329474, 0.20221043813320738, 0.286634506819363, 0.5577956438644837, 0.2079173468933735, 0.38440200831966487, 0.1959863102156275, 0.17516227126674022, 0.12807561791097088, 0.5512436967288932, 0.17404231095267153, 0.20037745294625076, 0.293616698336884, 0.3016463209674677, 0.19029046969036645, 0.14072470405746385, 0.11457445454953885, 0.09233477508598009, 0.10328054766481143, 0.13536749138992676, 0.16576796734116217, 0.24531097956849446, 0.2534869414370565, 0.17500841016606827, 0.20929576973266872, 0.1361944999124549, 0.3054314298949353, 0.20104962530507697, 0.25594735395022994, 0.3080345976059916, 0.1675813111813721, 0.23673458472220388, 0.2725267346102883, 0.19261140399016163, 0.1932681573219166, 0.18257725893265797, 0.21270298740106286, 0.22699194509243603, 0.18517538457978155, 0.22644251515332747, 0.20358670595930006, 0.1918632700527767, 0.20330242024999545, 0.19130171082820668, 0.11972388392974065, 0.9484010027229187, 0.1598006848095207, 0.9381863746256144, 0.20194570029080317, 0.9497790721097695, 0.10824948838399684, 0.1149507660372403, 0.15936149051562642, 0.33295338693215804, 0.2133333270581914, 0.3382150751824531, 0.21219685741939764, 0.16958941490671298, 0.21208487545463972, 0.10519021369928017, 0.15619589418250657, 0.2747283751036629, 0.2916067146585388, 0.2463577700399785, 0.22973864306034286, 0.21339861174763497, 0.2474148841495889, 0.26738706271489887, 0.2748493958889022, 0.27593082443996186, 0.27367163094619884, 0.11810954640302607, 0.07227821745477925, 0.09664418247353246, 0.06872342661035802, 0.083853698567106, 0.145245152966886, 0.131107682938164, 0.08465182617726297, 0.07166757004893132]}, "mutation_prompt": null}
{"id": "01ac0330-661e-4776-a291-19e417b15308", "solution": "import numpy as np\n\nclass AdaptiveEvolutionaryStrategy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.sigma = 0.3\n        self.success_threshold = 0.2\n        self.success_rate = 0.0\n        self.success_count = 0\n        self.evaluations = 0\n        self.population_size = 15\n        self.step_size_adjustment = 1.2\n\n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_index = np.argmin(fitness)\n        best_individual = population[best_index]\n        best_fitness = fitness[best_index]\n        \n        while self.evaluations < self.budget:\n            offspring = np.array([self.mutate(ind) for ind in population])\n            offspring_fitness = np.array([func(ind) for ind in offspring])\n            \n            new_population = []\n            new_fitness = []\n\n            # Select the best individuals from current and offspring\n            combined_population = np.vstack((population, offspring))\n            combined_fitness = np.hstack((fitness, offspring_fitness))\n            indices = np.argsort(combined_fitness)[:self.population_size]\n            \n            for idx in indices:\n                new_population.append(combined_population[idx])\n                new_fitness.append(combined_fitness[idx])\n\n            # Update success rate and adjust sigma\n            successful_mutations = np.sum(offspring_fitness < fitness)\n            self.success_rate = successful_mutations / self.population_size\n            if self.success_rate > self.success_threshold:\n                self.sigma *= self.step_size_adjustment\n            else:\n                self.sigma /= self.step_size_adjustment\n            \n            population = np.array(new_population)\n            fitness = np.array(new_fitness)\n            \n            # Update best found solution\n            current_best_index = np.argmin(fitness)\n            if fitness[current_best_index] < best_fitness:\n                best_fitness = fitness[current_best_index]\n                best_individual = population[current_best_index]\n            \n            self.evaluations += self.population_size * 2\n\n        return best_individual\n\n    def mutate(self, individual):\n        mutation = np.random.normal(0, self.sigma, self.dim)\n        new_individual = np.clip(individual + mutation, self.lower_bound, self.upper_bound)\n        return new_individual", "name": "AdaptiveEvolutionaryStrategy", "description": "An Adaptive Evolutionary Strategy that dynamically adjusts the mutation step size based on success rate for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b36921a3-40e7-4f50-a9fd-f56b229939df", "metadata": {"aucs": [0.9153706029994452, 0.9097046442257268, 0.9073894710673485, 0.8850016027204032, 0.916156150079132, 0.9176852559005858, 0.9142794720299161, 0.9160074606753366, 0.916100410226704, 0.0, 0.044402288817402935, 0.0, 0.029651165247783995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11775850793638687, 0.08338093207440123, 0.13516454923046073, 0.1637006658023249, 0.11243628016395268, 0.07879220972132894, 0.11233643967539753, 0.11736231270569497, 0.08046609493826906, 0.16265685719909673, 0.11693556946996209, 0.04710392250016848, 0.1360041175570026, 0.1857492328448671, 0.09212315727589415, 0.11075339425421393, 0.10609973716822352, 0.11054921544657392, 0.9755952782894165, 0.9702573048594972, 0.9655536942644504, 0.2642755115388785, 0.11490898676330397, 0.9206372005050926, 0.3092237028812055, 0.10261901017423447, 0.18099209728723487, 0.8189712935613153, 0.8272948405711666, 0.8520338112331595, 0.8102507093915495, 0.8319697462530911, 0.8499358861311509, 0.8161994180530218, 0.8324809351112832, 0.7994196759063429, 0.21766441832624384, 0.2572986264591657, 0.13600078982747, 0.33329510715971167, 0.15974633863877774, 0.21230561580203122, 0.16226125781248335, 0.18081559395145452, 0.22610260369366486, 0.17165214103905269, 0.16158091992770096, 0.19316131104155576, 0.2043460903013138, 0.1856267805951467, 0.21593480416099864, 0.19907935859800818, 0.18579614242432985, 0.3151940723412444, 0.2097913350053101, 0.21613604129117658, 0.29389029651962606, 0.2007402765877664, 0.23484811454095345, 0.18706310335114784, 0.19972910629677565, 0.0, 0.18272735523620265, 0.0, 0.0, 0.0, 0.0471767049335885, 0.008618521714868432, 0.0, 0.0, 0.0, 0.0, 0.07521773181832436, 0.05213317384553773, 0.0682056391354845, 0.06905294227601044, 0.018189454388116255, 0.03512331947668712, 0.12977861621682418, 0.067278036648458, 0.045016599364728016, 0.21259746363604004, 0.050758714356305745, 0.19452128509764355, 0.10926485671426689, 0.23483801298252294, 0.1134334526431039, 0.14721853378592786, 0.24498312826015067, 0.16925957055642216, 0.11239240887460145, 0.13287540568389522, 0.2242775813136073, 0.10527063775693601, 0.1570129177727222, 0.24281490447706944, 0.21557296052944253, 0.15471467529299188, 0.12773554139104304, 0.5190366183536023, 0.48587778822491057, 0.5840597875342144, 0.4999677180712262, 0.5285815347556218, 0.5022232521358226, 0.48922680968048227, 0.49975272707741647, 0.5048028397222966, 0.08032623031224029, 0.1634062715843465, 0.8639436669824232, 0.13610373302527656, 0.10194982612159786, 0.14629539461588315, 0.12645001648601828, 0.11247176603529496, 0.09041921408103348, 0.28467855869386804, 0.2881180376329474, 0.20221043813320738, 0.286634506819363, 0.5577956438644837, 0.2079173468933735, 0.38440200831966487, 0.1959863102156275, 0.17516227126674022, 0.12807561791097088, 0.5512436967288932, 0.17404231095267153, 0.20037745294625076, 0.293616698336884, 0.3016463209674677, 0.19029046969036645, 0.14072470405746385, 0.11457445454953885, 0.09233477508598009, 0.10328054766481143, 0.13536749138992676, 0.16576796734116217, 0.24531097956849446, 0.2534869414370565, 0.17500841016606827, 0.20929576973266872, 0.1361944999124549, 0.3054314298949353, 0.20104962530507697, 0.25594735395022994, 0.3080345976059916, 0.1675813111813721, 0.23673458472220388, 0.2725267346102883, 0.19261140399016163, 0.1932681573219166, 0.18257725893265797, 0.21270298740106286, 0.22699194509243603, 0.18517538457978155, 0.22644251515332747, 0.20358670595930006, 0.1918632700527767, 0.20330242024999545, 0.19130171082820668, 0.11972388392974065, 0.9484010027229187, 0.1598006848095207, 0.9381863746256144, 0.20194570029080317, 0.9497790721097695, 0.10824948838399684, 0.1149507660372403, 0.15936149051562642, 0.33295338693215804, 0.2133333270581914, 0.3382150751824531, 0.21219685741939764, 0.16958941490671298, 0.21208487545463972, 0.10519021369928017, 0.15619589418250657, 0.2747283751036629, 0.2916067146585388, 0.2463577700399785, 0.22973864306034286, 0.21339861174763497, 0.2474148841495889, 0.26738706271489887, 0.2748493958889022, 0.27593082443996186, 0.27367163094619884, 0.11810954640302607, 0.07227821745477925, 0.09664418247353246, 0.06872342661035802, 0.083853698567106, 0.145245152966886, 0.131107682938164, 0.08465182617726297, 0.07166757004893132]}, "mutation_prompt": null}
