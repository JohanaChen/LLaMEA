{"id": "3ea6cd5c-b03e-421d-845e-763fa5d465c0", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n    \n    def __call__(self, func):\n        # Initialize the population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        \n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Particle Swarm Optimization update\n            for i in range(self.population_size):\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_weight * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 self.social_weight * np.random.rand(self.dim) * (global_best_position - population[i]))\n                population[i] += velocities[i]\n                population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n            \n            # Differential Evolution update\n            for i in range(self.population_size):\n                indices = [index for index in range(self.population_size) if index != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.crossover_rate else population[i][j] for j in range(self.dim)])\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    if trial_score < personal_best_scores[global_best_index]:\n                        global_best_index = i\n                        global_best_position = trial\n            \n            if evaluations >= self.budget:\n                break\n            \n            # Update personal and global bests\n            for i in range(self.population_size):\n                score = func(population[i])\n                evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_scores[i] = score\n                    if score < personal_best_scores[global_best_index]:\n                        global_best_index = i\n                        global_best_position = population[i]\n\n        return global_best_position", "name": "HybridPSO_DE", "description": "Utilizes a hybrid approach combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to balance exploration and exploitation for efficiently navigating the search space.", "configspace": "", "generation": 0, "fitness": 0.19565468366580205, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.389998035380946, 0.39311713944350757, 0.4087947485117691, 0.4050183267645564, 0.4407723328069203, 0.44083947446898275, 0.3510826855426967, 0.3826927111062136, 0.4472750301580851, 9.999999999998899e-05, 0.09362926888329726, 0.08336143812600927, 0.09828465586341317, 0.07486593418489884, 9.999999999998899e-05, 0.009984056945826492, 0.08049112736774, 0.07002347151893895, 0.09369368581171422, 0.12250235461046466, 0.11452394522796217, 0.09977299010941187, 0.0904656523148677, 0.09829066293494382, 0.11601809329341972, 0.1033218758455392, 0.09295086787111473, 0.08961633859856633, 0.08825493807709117, 0.09454209788143686, 0.12063645206616425, 0.09700907327066055, 0.08396841375674047, 0.09289394515597071, 0.08067245375566456, 0.088175646296629, 0.9779825192676784, 0.9687167351044407, 0.9852505712239181, 0.9763029490231708, 0.9775352183357044, 0.9605781922173289, 0.9770883533118223, 0.9768982506173022, 0.9737960819049154, 0.2951292485145953, 0.2888270864309903, 0.11334814683398586, 0.2088666870439565, 0.25584553391348663, 0.14564767817747015, 0.2470191299396215, 0.21338862667835867, 0.1709887075586305, 0.1690970072534994, 0.4229688147349955, 0.23004802859118667, 0.19883748786064048, 0.2812093694177028, 0.1966106375355392, 0.23630303427255195, 0.21415224835687474, 0.2143496884238223, 0.12797090916693543, 0.08065042943294143, 0.14327011940811551, 0.09967961274745085, 0.09633415865573092, 0.14749617981054686, 0.1001666640845833, 0.13586920318714235, 0.13069444561686816, 0.1318678899869019, 0.12635218531452297, 0.1079994584339925, 0.11665854653208207, 0.12067117668725857, 0.111074672776731, 0.11736700169334557, 0.029401511314978257, 0.1499366564385879, 0.002709563197891063, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014188116726732147, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03449789364122513, 0.058165359550726325, 0.04849844527471636, 0.05168079039253681, 0.058318351065932084, 0.03368698215409627, 0.046220017127175606, 0.03555785241616416, 0.06098079332375406, 0.04535094678200968, 9.999999999998899e-05, 0.003992530851336551, 0.002354105432101683, 0.014115077326499192, 0.007635039840643731, 0.004926578675254367, 0.028959676027498826, 0.008278793274298035, 0.02876944104167256, 0.06913337554328114, 0.02990141575573102, 0.06306732927836345, 0.06583673012212199, 0.0833231760524884, 0.051665769487853286, 0.044495593995678595, 0.06905545374402222, 0.07151444833740128, 0.3926345035809714, 0.355577982226402, 0.3510293613467895, 0.35714297663171435, 0.3546624000721609, 0.4081837523027698, 0.4178011242551497, 0.3492620255252247, 0.3497481727715316, 0.10923818735584978, 0.08105512865567577, 0.12917625509551778, 0.10166690353635044, 0.09314706500889736, 0.09980747061705164, 0.10315196505529511, 0.07155248556154348, 0.0914769005796634, 0.24183615398770175, 0.12845258445080998, 0.16789524068752582, 0.2282970027779342, 0.21969959243512116, 0.20224273375327495, 0.23122016322734584, 0.1797165849821305, 0.15569616372977413, 0.2065057171451271, 0.2125314766919778, 0.2801663774981691, 0.2653849260624499, 0.2528378196748904, 0.22911794310943, 0.2496137820919856, 0.3011192530557699, 0.302260718004416, 0.16903059679503585, 0.1872189297017417, 0.19055475486103257, 0.1929370930354365, 0.1575854533768437, 0.1510481226875947, 0.19797386639824543, 0.20773049094807317, 0.21382651823097343, 0.19056271095632615, 0.1821005779435939, 0.16812505411814416, 0.19695670297082069, 0.21325815144768756, 0.17732616766439335, 0.18827826015247628, 0.19539580845304094, 0.1733294342057623, 0.19747943848057492, 0.18248611907508872, 0.2072761976917431, 0.2048542555941092, 0.17996093740174723, 0.17972129582293328, 0.19386188708814678, 0.16516409251610498, 0.192977372995617, 0.49411915043600296, 0.1660649828671038, 0.15172888231169712, 0.19120996848451122, 0.1883930647659231, 0.19366196194368313, 0.1647465615225412, 0.15946888609130927, 0.5430106781259902, 0.4035250271416442, 0.201440542670686, 0.27284128927501694, 0.35261248924549504, 0.3400422297972754, 0.14850461950221072, 0.19934564703691027, 0.2064483097795804, 0.20442439418781433, 0.18920623737803766, 0.18552433327503448, 0.17511844409538502, 0.18034105094085795, 0.19958036897456155, 0.17196729428592283, 0.18354116552533084, 0.20374167681220234, 0.1817150127464382, 0.07386695442623348, 0.06918378192229158, 0.08146398838686619, 0.0877577233620892, 0.06983653970864856, 0.08316881948066857, 0.06658723910142539, 0.07694858774884072, 0.06082439563452169]}, "mutation_prompt": null}
{"id": "f8cc4582-0b44-47e9-814c-3ec6287e3985", "solution": "import numpy as np\nimport random\n\nclass HybridPSO_DE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.temperature = 1.0  # New: Initial temperature for SA\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        \n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_weight * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 self.social_weight * np.random.rand(self.dim) * (global_best_position - population[i]))\n                population[i] += velocities[i]\n                population[i] = np.clip(population[i], self.lower_bound, self.upper_bound)\n            \n            # DE update with SA-inspired mutation\n            for i in range(self.population_size):\n                indices = [index for index in range(self.population_size) if index != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                if random.random() < self.temperature:  # New: SA acceptance probability\n                    mutant += np.random.normal(0, 1, self.dim)  # New: Gaussian noise\n                trial = np.array([mutant[j] if np.random.rand() < self.crossover_rate else population[i][j] for j in range(self.dim)])\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial\n                    personal_best_scores[i] = trial_score\n                    if trial_score < personal_best_scores[global_best_index]:\n                        global_best_index = i\n                        global_best_position = trial\n            \n            if evaluations >= self.budget:\n                break\n            \n            # Update personal and global bests\n            for i in range(self.population_size):\n                score = func(population[i])\n                evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_scores[i] = score\n                    if score < personal_best_scores[global_best_index]:\n                        global_best_index = i\n                        global_best_position = population[i]\n\n            self.temperature *= 0.99  # New: Cool down temperature\n\n        return global_best_position", "name": "HybridPSO_DE_SA", "description": "Introduces local optima escape via simulated annealing-inspired mutation to enhance exploration in hybrid PSO-DE.", "configspace": "", "generation": 1, "fitness": 0.20156516730612975, "feedback": "", "error": "", "parent_id": "3ea6cd5c-b03e-421d-845e-763fa5d465c0", "metadata": {"aucs": [0.41841301630847205, 0.3799160926751033, 0.43763847275434686, 0.4304270596302352, 0.4261076665309317, 0.4250701403932825, 0.44286115433907414, 0.4862098533246111, 0.42108535302843253, 0.01898386322110257, 0.13284036739852234, 0.10886601063914292, 0.09833019389107289, 0.05587088855832112, 0.01680306046147817, 0.004160411893094129, 0.03902667367927881, 0.06181535245627823, 0.10357322658765056, 0.10693557076455074, 0.10452734650812656, 0.11113284216145236, 0.12043773110320655, 0.10951084743443884, 0.08294443801256368, 0.09788773582370702, 0.08952472598804528, 0.08994568818794979, 0.0844923498181186, 0.0964196661755915, 0.10455718719104534, 0.10255395261885802, 0.08568986069766815, 0.08943280225567163, 0.11716270301013243, 0.10203196439586004, 0.9735810186862336, 0.9724816256344404, 0.9786074260718205, 0.972946112195939, 0.9728697204377167, 0.9725582532634454, 0.964790930296006, 0.973010438518807, 0.9664957250503832, 0.2464698078394496, 0.22193689392100324, 0.2432389057907065, 0.2762228737687916, 0.18327179506651858, 0.18907399451137696, 0.23801165958271808, 0.21999266970514364, 0.25915527413544537, 0.21884101075283968, 0.21343926493750576, 0.2560350807379461, 0.21158643857721804, 0.2582502211837451, 0.23884405904964534, 0.4554634430282347, 0.18936100331988315, 0.22943894484698046, 0.1411004045128711, 0.0676789626652875, 0.10796859719341623, 0.10066153365728969, 0.12404472494212482, 0.1270339246407891, 0.1295443325039083, 0.12158027669131155, 0.10055088514978361, 0.0859416797535758, 0.11129938580823162, 0.09139353584517595, 0.11639108537052889, 0.12002671712104473, 0.11683266472521281, 0.10179720818792481, 0.05593926429849139, 0.11191995632843466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027525935174820604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005970794464801421, 0.04327782362302912, 0.0818120980814423, 0.0618240978158503, 0.07527729323164878, 0.09160257735695398, 0.04017149234562878, 0.05487348258589919, 0.03946622759030449, 0.02931957508185501, 0.011509573006952434, 0.002772582349801267, 0.010405922922920752, 0.02836517144818207, 0.03070743541945098, 0.0008492529660228954, 0.023944184728437734, 0.000811772507903652, 0.012047762705841514, 0.042352977120501234, 0.07577478940376203, 0.06927650026416554, 0.09796431635429304, 0.08800659896575214, 0.06827986912142436, 0.09386642415870161, 0.08118340965434945, 0.06441216418995666, 0.3769645023782604, 0.42449888437392713, 0.3819018282028358, 0.37321928417004624, 0.38776146702831515, 0.40770610807985763, 0.34270122493412647, 0.3683892215507618, 0.3470806084490924, 0.1226926155084439, 0.10420703816670607, 0.10571482076593641, 0.08507363051973227, 0.09969583661042958, 0.12236444037664895, 0.10018131894214222, 0.11043917168756867, 0.09108052716918524, 0.15475473720784338, 0.15914869886505434, 0.16649862087196055, 0.18006012360709445, 0.24902675508088268, 0.13443187709056836, 0.18453998462207177, 0.21281641453401368, 0.15396764223289772, 0.2892474786275522, 0.25667291130152803, 0.2512913959897274, 0.26047481531981753, 0.22002377187489974, 0.24710925285169982, 0.25512546544132697, 0.2693200904478501, 0.2608595983879012, 0.20791011421022, 0.19129506923707595, 0.18582123343005263, 0.13725626196712915, 0.15959725611368591, 0.14879458880403984, 0.21187698662706167, 0.20372766207520987, 0.19639770309554772, 0.20397194544490138, 0.20889747399947411, 0.20264721776082106, 0.19549129260639464, 0.17311949895604317, 0.18687581729111657, 0.2071663816596767, 0.18993360855251384, 0.19643524991019767, 0.18202361497596464, 0.19023296936221812, 0.21644058516885356, 0.18220302496191831, 0.20803600335358075, 0.20630105867823434, 0.18366743589887058, 0.17582835925781237, 0.17220390011205966, 0.16218726561130947, 0.1854127702101228, 0.15176540059610566, 0.1668226958848259, 0.19169854394551067, 0.1915243272908589, 0.5039222941642216, 0.15814032555175983, 0.5911781172544259, 0.4659625817882552, 0.20261147138650804, 0.48300615340094155, 0.42085393625615297, 0.2908064376106868, 0.24070423859445933, 0.20605884003240915, 0.20191359327517566, 0.32219634431643485, 0.17825479099204145, 0.19259414199021907, 0.18638670693417758, 0.18638831996441707, 0.18583677702196189, 0.19507852390332525, 0.1828432544679648, 0.209802443420261, 0.2091826003500109, 0.07855330114735148, 0.07549467949354549, 0.08774976080614871, 0.0668479700629887, 0.08471332068053583, 0.08248026055661017, 0.07426486655142961, 0.07560850461172774, 0.08281799635634635]}, "mutation_prompt": null}
