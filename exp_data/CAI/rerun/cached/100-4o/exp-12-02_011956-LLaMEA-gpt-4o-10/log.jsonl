{"id": "b2000eb1-2dde-4a32-8f64-f67398f42b59", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.F = 0.8  # Differential evolution mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.w = 0.5   # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive (personal) coefficient for PSO\n        self.c2 = 1.5  # Social coefficient for PSO\n        self.max_evals = budget\n        self.evals = 0\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n\n    def _update_global_best(self):\n        for i, score in enumerate(self.personal_best_scores):\n            if score < self.global_best_score:\n                self.global_best_score = score\n                self.global_best_position = self.personal_best_positions[i]\n\n    def _differential_evolution(self, func):\n        for i in range(self.population_size):\n            indices = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n            mutant_vector = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n            trial_vector = np.copy(self.population[i])\n            crossover = np.random.rand(self.dim) < self.CR\n            trial_vector[crossover] = mutant_vector[crossover]\n            trial_score = func(trial_vector)\n            self.evals += 1\n            if trial_score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = trial_score\n                self.personal_best_positions[i] = trial_vector\n\n    def _particle_swarm_optimization(self, func):\n        r1 = np.random.rand(self.population_size, self.dim)\n        r2 = np.random.rand(self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (self.personal_best_positions - self.population)\n        social = self.c2 * r2 * (self.global_best_position - self.population)\n        self.velocities = self.w * self.velocities + cognitive + social\n        self.population += self.velocities\n        self.population = np.clip(self.population, self.bounds[0], self.bounds[1])\n\n        for i in range(self.population_size):\n            score = func(self.population[i])\n            self.evals += 1\n            if score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = score\n                self.personal_best_positions[i] = self.population[i]\n\n    def __call__(self, func):\n        while self.evals < self.max_evals:\n            self._differential_evolution(func)\n            self._update_global_best()\n            if self.evals < self.max_evals:  # Check to ensure budget is not exceeded\n                self._particle_swarm_optimization(func)\n                self._update_global_best()\n        return self.global_best_position, self.global_best_score", "name": "HybridDEPSO", "description": "Leveraging a hybrid differential evolution and particle swarm optimization to balance exploration and exploitation in search space.", "configspace": "", "generation": 0, "fitness": 0.2838008704241605, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.786392655946669, 0.7798388635728792, 0.8014433513493651, 0.7966381703721395, 0.7648923585870302, 0.7440093963852126, 0.8024151105437605, 0.7986451275969524, 0.7629024734317356, 0.04066652393626824, 0.540155943612328, 0.5441866028834088, 0.5002477186628554, 0.5160075358917854, 0.5039141014763424, 0.5733486667110631, 0.49162134730442053, 0.04694514802466365, 0.14637190166429315, 0.13840901563947794, 0.4076091779872292, 0.18068946928048446, 0.1644385530878606, 0.1340921245529313, 0.1311989716726616, 0.1400815068751584, 0.14263378877157007, 0.15516342659540094, 0.10322791334021131, 0.12854953076741293, 0.10608604320552184, 0.10479361915937313, 0.12199643042098707, 0.1146848362497076, 0.12665081939569844, 0.12477784965769678, 0.9833873263317334, 0.9867577073711722, 0.9861539041953273, 0.9833473287994933, 0.9783729238058184, 0.9747905158955663, 0.9791335083941657, 0.9856940362925665, 0.9751581654946111, 0.49425028560775863, 0.5743295649844355, 0.46730196619988673, 0.14581098456104158, 0.15014251418892055, 0.378046806052898, 0.41961848491333564, 0.12366725287278058, 0.26910390044073196, 0.22026725111681444, 0.1704038986290427, 0.22020460899076522, 0.19063449055309978, 0.15977964823998192, 0.8310657926575407, 0.12474278663426464, 0.7504766840371905, 0.5879220077293454, 0.1937420270175919, 0.21377823165447873, 0.26153259856121946, 0.12325869799557354, 0.18330462672062342, 0.19377253352317292, 0.22458233195891286, 0.19420782112917223, 0.1905013484582493, 0.1816006124378574, 0.015863587372558108, 0.12699807825070586, 0.34297902414000037, 0.2045943117011172, 0.22532149551467984, 0.0917796128390963, 0.23952515404491959, 0.22559919199245526, 9.999999999998899e-05, 9.999999999998899e-05, 0.008524084064937987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.063394910940475, 0.047863563031575684, 0.05040241181804739, 0.0004245120822983228, 0.0782977110023183, 0.05430185022852185, 0.04658531996532422, 0.024023045261330478, 0.13329323669216098, 0.08249192703226504, 0.029472592866250147, 0.08263932445919342, 0.06683804326904152, 0.06391897465472662, 0.06566017738150509, 0.08579453364193834, 0.07838161626054352, 0.05921354184794636, 0.04041992128967453, 0.07946369920528229, 0.15453140133607357, 0.10848835172382043, 0.09943465621349368, 0.15032743531436954, 0.05296113262698454, 0.22567417636229525, 0.07802433390691399, 0.5122133820041745, 0.49534237609589593, 0.4804655414086212, 0.506402107431514, 0.5519364180270088, 0.5541664599004859, 0.5364689284158985, 0.512890903653717, 0.5481132909838355, 0.15698636180101766, 0.11705059554854036, 0.1195240545549181, 0.10156122903130294, 0.515071149208274, 0.09205203873727663, 0.12127949850655584, 0.10992296597531548, 0.11977799302207237, 0.19031936198460997, 0.19505892296901728, 0.1966888874599957, 0.24266997107424138, 0.27056170980088223, 0.37247813667904983, 0.3051206028869854, 0.1845943327725178, 0.19861038319994517, 0.3557740372145858, 0.30305574619840914, 0.37082711683520386, 0.4188645950660066, 0.41644154208821815, 0.32549230221504044, 0.3932062744403556, 0.4630395926981835, 0.510293734709004, 0.3577647653625601, 0.22319604829649808, 0.31162943927921205, 0.18127827776606664, 0.19493120410282538, 0.2002943672282872, 0.16474117756430462, 0.23671497451285517, 0.26887003074311355, 0.20116136574491272, 0.24481278863239542, 0.21424943961363296, 0.1943961652181334, 0.20661214937167838, 0.1975483008554899, 0.22812005761635623, 0.2505395591542423, 0.19224359639195032, 0.22519067613726096, 0.2313978614543959, 0.23921754914813065, 0.1978814060404417, 0.20935541475094355, 0.21438979472082265, 0.23152323575966938, 0.19737239179806598, 0.18483121556401416, 0.18741576957351969, 0.7742865233026097, 0.20489974157911606, 0.8007442117732069, 0.7205497223203319, 0.7234497239178299, 0.8211082746885243, 0.2060540832946065, 0.17073353811620218, 0.14957103647739078, 0.15294197599052917, 0.6933187910795678, 0.2015044438161553, 0.11203876909582178, 0.16634406589336126, 0.20155625347968054, 0.1522899163149659, 0.20525352061919644, 0.2091095931917868, 0.18638201072190075, 0.18315731463338114, 0.18474805874879918, 0.2024257823327541, 0.22720926139281628, 0.199232427363628, 0.18458173319855697, 0.1909551747570557, 0.11494026461355988, 0.13198513802498424, 0.09041599754178964, 0.09924657876914567, 0.09904143830400658, 0.08776128976546338, 0.10582362155686842, 0.08309115660531674, 0.09135682194276873]}, "mutation_prompt": null}
{"id": "1de2ed16-8c2e-43ba-b83d-6fd2abeeda23", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.F = 0.8  # Differential evolution mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.w = 0.5   # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive (personal) coefficient for PSO\n        self.c2 = 1.5  # Social coefficient for PSO\n        self.max_evals = budget\n        self.evals = 0\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_score = float('inf')\n\n    def _update_global_best(self):\n        for i, score in enumerate(self.personal_best_scores):\n            if score < self.global_best_score:\n                self.global_best_score = score\n                self.global_best_position = self.personal_best_positions[i]\n\n    def _differential_evolution(self, func):\n        for i in range(self.population_size):\n            indices = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n            mutant_vector = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n            trial_vector = np.copy(self.population[i])\n            crossover = np.random.rand(self.dim) < self.CR\n            trial_vector[crossover] = mutant_vector[crossover]\n            trial_score = func(trial_vector)\n            self.evals += 1\n            if trial_score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = trial_score\n                self.personal_best_positions[i] = trial_vector\n\n    def _particle_swarm_optimization(self, func):\n        r1 = np.random.rand(self.population_size, self.dim)\n        r2 = np.random.rand(self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (self.personal_best_positions - self.population)\n        social = self.c2 * r2 * (self.global_best_position - self.population)\n        self.velocities = self.w * self.velocities + cognitive + social\n        self.population += self.velocities\n        self.population = np.clip(self.population, self.bounds[0], self.bounds[1])\n\n        for i in range(self.population_size):\n            score = func(self.population[i])\n            self.evals += 1\n            if score < self.personal_best_scores[i]:\n                self.personal_best_scores[i] = score\n                self.personal_best_positions[i] = self.population[i]\n\n    def __call__(self, func):\n        while self.evals < self.max_evals:\n            self._differential_evolution(func)\n            self._update_global_best()\n            if self.evals < self.max_evals:  # Check to ensure budget is not exceeded\n                self._particle_swarm_optimization(func)\n                self._update_global_best()\n        return self.global_best_position, self.global_best_score", "name": "HybridDEPSO", "description": "Leveraging a hybrid differential evolution and particle swarm optimization to balance exploration and exploitation in search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2000eb1-2dde-4a32-8f64-f67398f42b59", "metadata": {"aucs": [0.786392655946669, 0.7798388635728792, 0.8014433513493651, 0.7966381703721395, 0.7648923585870302, 0.7440093963852126, 0.8024151105437605, 0.7986451275969524, 0.7629024734317356, 0.04066652393626824, 0.540155943612328, 0.5441866028834088, 0.5002477186628554, 0.5160075358917854, 0.5039141014763424, 0.5733486667110631, 0.49162134730442053, 0.04694514802466365, 0.14637190166429315, 0.13840901563947794, 0.4076091779872292, 0.18068946928048446, 0.1644385530878606, 0.1340921245529313, 0.1311989716726616, 0.1400815068751584, 0.14263378877157007, 0.15516342659540094, 0.10322791334021131, 0.12854953076741293, 0.10608604320552184, 0.10479361915937313, 0.12199643042098707, 0.1146848362497076, 0.12665081939569844, 0.12477784965769678, 0.9833873263317334, 0.9867577073711722, 0.9861539041953273, 0.9833473287994933, 0.9783729238058184, 0.9747905158955663, 0.9791335083941657, 0.9856940362925665, 0.9751581654946111, 0.49425028560775863, 0.5743295649844355, 0.46730196619988673, 0.14581098456104158, 0.15014251418892055, 0.378046806052898, 0.41961848491333564, 0.12366725287278058, 0.26910390044073196, 0.22026725111681444, 0.1704038986290427, 0.22020460899076522, 0.19063449055309978, 0.15977964823998192, 0.8310657926575407, 0.12474278663426464, 0.7504766840371905, 0.5879220077293454, 0.1937420270175919, 0.21377823165447873, 0.26153259856121946, 0.12325869799557354, 0.18330462672062342, 0.19377253352317292, 0.22458233195891286, 0.19420782112917223, 0.1905013484582493, 0.1816006124378574, 0.015863587372558108, 0.12699807825070586, 0.34297902414000037, 0.2045943117011172, 0.22532149551467984, 0.0917796128390963, 0.23952515404491959, 0.22559919199245526, 9.999999999998899e-05, 9.999999999998899e-05, 0.008524084064937987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.063394910940475, 0.047863563031575684, 0.05040241181804739, 0.0004245120822983228, 0.0782977110023183, 0.05430185022852185, 0.04658531996532422, 0.024023045261330478, 0.13329323669216098, 0.08249192703226504, 0.029472592866250147, 0.08263932445919342, 0.06683804326904152, 0.06391897465472662, 0.06566017738150509, 0.08579453364193834, 0.07838161626054352, 0.05921354184794636, 0.04041992128967453, 0.07946369920528229, 0.15453140133607357, 0.10848835172382043, 0.09943465621349368, 0.15032743531436954, 0.05296113262698454, 0.22567417636229525, 0.07802433390691399, 0.5122133820041745, 0.49534237609589593, 0.4804655414086212, 0.506402107431514, 0.5519364180270088, 0.5541664599004859, 0.5364689284158985, 0.512890903653717, 0.5481132909838355, 0.15698636180101766, 0.11705059554854036, 0.1195240545549181, 0.10156122903130294, 0.515071149208274, 0.09205203873727663, 0.12127949850655584, 0.10992296597531548, 0.11977799302207237, 0.19031936198460997, 0.19505892296901728, 0.1966888874599957, 0.24266997107424138, 0.27056170980088223, 0.37247813667904983, 0.3051206028869854, 0.1845943327725178, 0.19861038319994517, 0.3557740372145858, 0.30305574619840914, 0.37082711683520386, 0.4188645950660066, 0.41644154208821815, 0.32549230221504044, 0.3932062744403556, 0.4630395926981835, 0.510293734709004, 0.3577647653625601, 0.22319604829649808, 0.31162943927921205, 0.18127827776606664, 0.19493120410282538, 0.2002943672282872, 0.16474117756430462, 0.23671497451285517, 0.26887003074311355, 0.20116136574491272, 0.24481278863239542, 0.21424943961363296, 0.1943961652181334, 0.20661214937167838, 0.1975483008554899, 0.22812005761635623, 0.2505395591542423, 0.19224359639195032, 0.22519067613726096, 0.2313978614543959, 0.23921754914813065, 0.1978814060404417, 0.20935541475094355, 0.21438979472082265, 0.23152323575966938, 0.19737239179806598, 0.18483121556401416, 0.18741576957351969, 0.7742865233026097, 0.20489974157911606, 0.8007442117732069, 0.7205497223203319, 0.7234497239178299, 0.8211082746885243, 0.2060540832946065, 0.17073353811620218, 0.14957103647739078, 0.15294197599052917, 0.6933187910795678, 0.2015044438161553, 0.11203876909582178, 0.16634406589336126, 0.20155625347968054, 0.1522899163149659, 0.20525352061919644, 0.2091095931917868, 0.18638201072190075, 0.18315731463338114, 0.18474805874879918, 0.2024257823327541, 0.22720926139281628, 0.199232427363628, 0.18458173319855697, 0.1909551747570557, 0.11494026461355988, 0.13198513802498424, 0.09041599754178964, 0.09924657876914567, 0.09904143830400658, 0.08776128976546338, 0.10582362155686842, 0.08309115660531674, 0.09135682194276873]}, "mutation_prompt": null}
