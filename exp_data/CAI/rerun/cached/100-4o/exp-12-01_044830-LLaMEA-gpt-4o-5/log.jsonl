{"id": "4e958acf-9bda-47af-940e-7b956004c6d4", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.c1 = 2.0  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.F = 0.8   # differential weight for DE\n        self.CR = 0.9  # crossover probability for DE\n        self.bounds = (-5.0, 5.0)\n        \n    def __call__(self, func):\n        # Initialize swarm\n        positions = np.random.uniform(self.bounds[0], self.bounds[1], (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                # Evaluate the current position\n                score = func(positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i].copy()\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i].copy()\n\n                # Stop if budget is exhausted\n                if evaluations >= self.budget:\n                    break\n            \n            # Update velocities and positions (PSO component)\n            r1, r2 = np.random.rand(2)\n            for i in range(self.swarm_size):\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                positions[i] += velocities[i]\n                \n                # Apply boundary constraints\n                positions[i] = np.clip(positions[i], self.bounds[0], self.bounds[1])\n            \n            # Differential Evolution mutation (DE component)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = np.random.choice(self.swarm_size, 3, replace=False)\n                x1, x2, x3 = positions[indices[0]], positions[indices[1]], positions[indices[2]]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n                \n                trial = np.copy(positions[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n                \n                trial_score = func(trial)\n                evaluations += 1\n                \n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial.copy()\n        \n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution mutation strategy for enhanced global exploration and local exploitation.", "configspace": "", "generation": 0, "fitness": 0.2442419079103351, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.80136873871301, 0.7576895240812426, 0.7958743793299367, 0.18975047159827674, 0.1567034428513987, 0.7646723523477708, 0.18241132472116883, 0.7194820783916376, 0.7760567396345498, 0.4535963398799987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04337197530416137, 0.30661412350930484, 0.2974941159639507, 0.4590859761645373, 0.04479415203388437, 0.06840310516274861, 0.12841839956992585, 0.06980582539144597, 0.07167121828732592, 0.0652366659324447, 0.11292721935543593, 0.06961752063094251, 0.1068544539475974, 0.114716605543703, 0.0692237673160806, 0.044696053621832155, 0.0786820235846637, 0.16448049152151578, 0.10469769147809671, 0.08764747586225952, 0.05064973267941697, 0.12231864674669746, 0.10388534107794334, 0.9892285721993941, 0.9894951183719137, 0.9820415886386086, 0.09979198535224931, 0.9892063838827881, 0.9794072098804075, 0.9895625953572923, 0.9888415802401914, 0.9818197839505702, 0.6057668045422384, 0.05793431486531975, 0.056613341937808426, 0.15002311195878282, 0.14430634939868092, 0.5359716428132374, 0.08400782885448876, 0.08575879065955994, 0.5118197125427439, 0.17198825287554842, 0.795627716145165, 0.6922965829361611, 0.20186746217082396, 0.18747275865205348, 0.18930737680391563, 0.12335886406031493, 0.12564367737926385, 0.7832715784596, 0.12712483581690026, 0.46350339472954083, 0.18819604015379376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3276140649342668, 0.15381568499631904, 0.278697546437359, 0.42473040337168066, 0.263335925264205, 0.12218046086200551, 0.45621496652697024, 0.13839468711531222, 0.3567554328989062, 0.03435833324557991, 0.36958790293173993, 0.09738313417640243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005088347121420256, 9.999999999998899e-05, 0.4468372667901822, 0.008317419762376321, 0.06535786932375309, 0.06454729231882705, 0.04317215760440196, 0.06790728226446519, 0.22497829940199676, 0.1620140253203275, 0.048492491523114634, 0.06078492463559726, 0.054764910786234244, 0.05387842594816761, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404423919130874, 0.06122511547914655, 9.999999999998899e-05, 0.06514975957420233, 0.08492021227669588, 0.08734699650212474, 0.1270902760982492, 0.35067570253713964, 9.999999999998899e-05, 0.297107908237662, 0.21366871858737135, 9.999999999998899e-05, 0.16734954335110508, 0.043910742949266, 9.999999999998899e-05, 0.22381309010351902, 0.15281482179919126, 0.5914111557024285, 0.6047946642395681, 0.208132886092821, 0.5512766004913664, 0.20713838528541895, 0.6004997181510351, 0.5743445987756444, 0.5953003938684904, 0.06862094796316054, 0.06607429832939193, 0.06998738315418163, 0.05610493065584521, 0.09562685803273274, 0.09572410879248805, 0.10608817470275189, 0.0796739735030364, 0.13233018068702984, 0.25898320283127063, 0.22115431869295477, 0.20755500096153623, 0.20470969645026227, 0.2153002992552382, 0.24758324138202992, 0.23866539848859158, 0.21063219115647103, 0.2370683583287828, 0.4465965449228777, 0.38561051076949604, 0.322716295057749, 0.42075064852159516, 0.1911238125873148, 0.3345132076654823, 0.2062206543895161, 0.3609732631107888, 0.4353618906523177, 0.30897513911843943, 0.08064708964549683, 0.2777240760775519, 0.19885289930742445, 0.22300998070523093, 0.3684448557305945, 0.16443232065543312, 0.2387958215785565, 0.1502177382718073, 0.23248587859588665, 0.19741123351800738, 0.22949116724156948, 0.19067570650877885, 0.242478722696147, 0.22172894699008572, 0.21471363330219806, 0.18309316213787508, 0.22181044446453002, 0.21430400036092956, 0.19861802831576236, 0.20053185041107557, 0.22080441133312623, 0.16755989192285958, 0.21289091238432323, 0.1897479233766879, 0.18203067922301241, 0.19262011115511202, 0.8245037291337314, 0.1673475165381566, 0.15287174003086945, 0.1883303255767853, 0.19769981694703287, 0.1997017602412703, 0.14262428506609703, 0.16291633959693896, 0.8579912444716288, 0.8624475417393772, 0.1673334939838209, 0.15193962298117802, 0.20648678099582807, 0.21983403870119111, 0.15105150784216526, 0.18492098694549586, 0.19625184693179154, 0.7594301967720094, 0.20230368889633032, 0.19391131402565132, 0.19324569479994202, 0.19073961523602023, 0.193643650546386, 0.17744394207196257, 0.18644808591108808, 0.1946247829803478, 0.18701481554075494, 0.1093138316392116, 0.08428794323964106, 0.08526208947849523, 0.06275635136349078, 0.10101837828581539, 0.06903427315372734, 0.05988218232691067, 0.0944587400607998, 0.09483543819669227]}, "mutation_prompt": null}
{"id": "e2a8ce0f-f7f3-4592-b765-37af835e0e4d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.c1 = 2.0  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.F = 0.8   # differential weight for DE\n        self.CR = 0.9  # crossover probability for DE\n        self.bounds = (-5.0, 5.0)\n        \n    def __call__(self, func):\n        # Initialize swarm\n        positions = np.random.uniform(self.bounds[0], self.bounds[1], (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                # Evaluate the current position\n                score = func(positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i].copy()\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i].copy()\n\n                # Stop if budget is exhausted\n                if evaluations >= self.budget:\n                    break\n            \n            # Update velocities and positions (PSO component)\n            r1, r2 = np.random.rand(2)\n            for i in range(self.swarm_size):\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                positions[i] += velocities[i]\n                \n                # Apply boundary constraints\n                positions[i] = np.clip(positions[i], self.bounds[0], self.bounds[1])\n            \n            # Differential Evolution mutation (DE component)\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = np.random.choice(self.swarm_size, 3, replace=False)\n                x1, x2, x3 = positions[indices[0]], positions[indices[1]], positions[indices[2]]\n                mutant = x1 + self.F * (x2 - x3)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n                \n                trial = np.copy(positions[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n                \n                trial_score = func(trial)\n                evaluations += 1\n                \n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial.copy()\n        \n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution mutation strategy for enhanced global exploration and local exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4e958acf-9bda-47af-940e-7b956004c6d4", "metadata": {"aucs": [0.80136873871301, 0.7576895240812426, 0.7958743793299367, 0.18975047159827674, 0.1567034428513987, 0.7646723523477708, 0.18241132472116883, 0.7194820783916376, 0.7760567396345498, 0.4535963398799987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04337197530416137, 0.30661412350930484, 0.2974941159639507, 0.4590859761645373, 0.04479415203388437, 0.06840310516274861, 0.12841839956992585, 0.06980582539144597, 0.07167121828732592, 0.0652366659324447, 0.11292721935543593, 0.06961752063094251, 0.1068544539475974, 0.114716605543703, 0.0692237673160806, 0.044696053621832155, 0.0786820235846637, 0.16448049152151578, 0.10469769147809671, 0.08764747586225952, 0.05064973267941697, 0.12231864674669746, 0.10388534107794334, 0.9892285721993941, 0.9894951183719137, 0.9820415886386086, 0.09979198535224931, 0.9892063838827881, 0.9794072098804075, 0.9895625953572923, 0.9888415802401914, 0.9818197839505702, 0.6057668045422384, 0.05793431486531975, 0.056613341937808426, 0.15002311195878282, 0.14430634939868092, 0.5359716428132374, 0.08400782885448876, 0.08575879065955994, 0.5118197125427439, 0.17198825287554842, 0.795627716145165, 0.6922965829361611, 0.20186746217082396, 0.18747275865205348, 0.18930737680391563, 0.12335886406031493, 0.12564367737926385, 0.7832715784596, 0.12712483581690026, 0.46350339472954083, 0.18819604015379376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3276140649342668, 0.15381568499631904, 0.278697546437359, 0.42473040337168066, 0.263335925264205, 0.12218046086200551, 0.45621496652697024, 0.13839468711531222, 0.3567554328989062, 0.03435833324557991, 0.36958790293173993, 0.09738313417640243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005088347121420256, 9.999999999998899e-05, 0.4468372667901822, 0.008317419762376321, 0.06535786932375309, 0.06454729231882705, 0.04317215760440196, 0.06790728226446519, 0.22497829940199676, 0.1620140253203275, 0.048492491523114634, 0.06078492463559726, 0.054764910786234244, 0.05387842594816761, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404423919130874, 0.06122511547914655, 9.999999999998899e-05, 0.06514975957420233, 0.08492021227669588, 0.08734699650212474, 0.1270902760982492, 0.35067570253713964, 9.999999999998899e-05, 0.297107908237662, 0.21366871858737135, 9.999999999998899e-05, 0.16734954335110508, 0.043910742949266, 9.999999999998899e-05, 0.22381309010351902, 0.15281482179919126, 0.5914111557024285, 0.6047946642395681, 0.208132886092821, 0.5512766004913664, 0.20713838528541895, 0.6004997181510351, 0.5743445987756444, 0.5953003938684904, 0.06862094796316054, 0.06607429832939193, 0.06998738315418163, 0.05610493065584521, 0.09562685803273274, 0.09572410879248805, 0.10608817470275189, 0.0796739735030364, 0.13233018068702984, 0.25898320283127063, 0.22115431869295477, 0.20755500096153623, 0.20470969645026227, 0.2153002992552382, 0.24758324138202992, 0.23866539848859158, 0.21063219115647103, 0.2370683583287828, 0.4465965449228777, 0.38561051076949604, 0.322716295057749, 0.42075064852159516, 0.1911238125873148, 0.3345132076654823, 0.2062206543895161, 0.3609732631107888, 0.4353618906523177, 0.30897513911843943, 0.08064708964549683, 0.2777240760775519, 0.19885289930742445, 0.22300998070523093, 0.3684448557305945, 0.16443232065543312, 0.2387958215785565, 0.1502177382718073, 0.23248587859588665, 0.19741123351800738, 0.22949116724156948, 0.19067570650877885, 0.242478722696147, 0.22172894699008572, 0.21471363330219806, 0.18309316213787508, 0.22181044446453002, 0.21430400036092956, 0.19861802831576236, 0.20053185041107557, 0.22080441133312623, 0.16755989192285958, 0.21289091238432323, 0.1897479233766879, 0.18203067922301241, 0.19262011115511202, 0.8245037291337314, 0.1673475165381566, 0.15287174003086945, 0.1883303255767853, 0.19769981694703287, 0.1997017602412703, 0.14262428506609703, 0.16291633959693896, 0.8579912444716288, 0.8624475417393772, 0.1673334939838209, 0.15193962298117802, 0.20648678099582807, 0.21983403870119111, 0.15105150784216526, 0.18492098694549586, 0.19625184693179154, 0.7594301967720094, 0.20230368889633032, 0.19391131402565132, 0.19324569479994202, 0.19073961523602023, 0.193643650546386, 0.17744394207196257, 0.18644808591108808, 0.1946247829803478, 0.18701481554075494, 0.1093138316392116, 0.08428794323964106, 0.08526208947849523, 0.06275635136349078, 0.10101837828581539, 0.06903427315372734, 0.05988218232691067, 0.0944587400607998, 0.09483543819669227]}, "mutation_prompt": null}
