{"id": "d3f62d0b-d1c9-42e4-af0a-e5c125174d28", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim, swarm_size=30, de_cr=0.9, de_f=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.de_cr = de_cr\n        self.de_f = de_f\n        self.global_best_pos = None\n        self.global_best_val = float('inf')\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_pos = np.copy(particles)\n        personal_best_val = np.full(self.swarm_size, float('inf'))\n        \n        eval_count = 0\n        while eval_count < self.budget:\n            for i in range(self.swarm_size):\n                if eval_count >= self.budget:\n                    break\n                # Evaluate the fitness of the current particle\n                fitness = func(particles[i])\n                eval_count += 1\n\n                # Update personal best if the current fitness is better\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = particles[i]\n\n                # Update global best if the current fitness is better\n                if fitness < self.global_best_val:\n                    self.global_best_val = fitness\n                    self.global_best_pos = particles[i]\n\n            # Update velocities and positions for the swarm\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = 0.5 * velocities[i] + 1.5 * r1 * (personal_best_pos[i] - particles[i]) + 1.5 * r2 * (self.global_best_pos - particles[i])\n                particles[i] = particles[i] + velocities[i]\n                \n                # Ensure particles remain within bounds\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Apply DE mutation and crossover\n            for i in range(self.swarm_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.swarm_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.de_f * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.de_cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, particles[i])\n                \n                # Evaluate the trial\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Perform selection\n                if trial_fitness < personal_best_val[i]:\n                    personal_best_val[i] = trial_fitness\n                    personal_best_pos[i] = trial\n                    particles[i] = trial\n\n                # Update global best if needed\n                if trial_fitness < self.global_best_val:\n                    self.global_best_val = trial_fitness\n                    self.global_best_pos = trial\n\n        return self.global_best_pos, self.global_best_val", "name": "HybridPSO_DE", "description": "A hybrid particle swarm optimization (PSO) with differential evolution (DE) to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.3504461457045033, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.866950786468491, 0.8517775720440542, 0.8550051369361583, 0.8629618985316212, 0.8761526446961722, 0.19057255894193137, 0.8513668345315517, 0.8480052588245413, 0.8789250061943691, 0.7441387172987953, 0.03984834516389568, 0.03631842028040844, 0.7244750802455842, 0.04390405193000102, 0.6299982453373769, 0.3960112642591661, 0.7279909639041684, 0.7138605679383645, 0.11560283690453421, 0.7384848694961464, 0.0949761194442943, 0.08196388449025693, 0.10825723838374302, 0.13353420245035308, 0.08814067922491065, 0.06895883675384917, 0.11496537942481777, 0.10158778644462962, 0.11668711690436206, 0.1378859181319383, 0.1153249848025173, 0.09139941607515245, 0.15489726142410076, 0.09995011601242243, 0.13614955723977473, 0.07861015219221279, 0.9852199372764163, 0.9914847430367643, 0.9913778728659453, 0.976122818680166, 0.9859836062103083, 0.980520149626372, 0.9856254503436163, 0.9860371312855919, 0.9866239239569872, 0.6967445748050181, 0.5770860595214803, 0.686166697210064, 0.7078517246600045, 0.6484975717897439, 0.15254558187314793, 0.08814486799853327, 0.08821234346356288, 0.08393865190350935, 0.25340319192360417, 0.3754473065525844, 0.8752969624762784, 0.21353126144399814, 0.19029422185685185, 0.19066799479843943, 0.12590268046928066, 0.13825065604837983, 0.23551639612630237, 0.6473038132853011, 0.5775336453366696, 0.12954058787274425, 0.6614638809116806, 0.5971725490818691, 0.6241576801499797, 0.6380862541788969, 0.6541542300736587, 0.5769738366277092, 0.7464365342065131, 0.46676025176157576, 0.1266342054244628, 0.6331223610464296, 0.12442425781132171, 0.13109885011672795, 0.6429656268968094, 0.12472228868793866, 0.12583064413126743, 0.0672783424467569, 0.19266274843883746, 9.999999999998899e-05, 0.36135410204237106, 9.999999999998899e-05, 0.03839331179262939, 0.39952771773799534, 0.4517449296364855, 0.16311597715431014, 0.5628476438174338, 0.0630775326362405, 0.23315869283918778, 0.4586930706239748, 0.5188221597552602, 0.10426728551208742, 0.7828596775919668, 0.41653643818814423, 0.4063142121782396, 0.0480450134926228, 0.057483063138768054, 0.03530388180097199, 0.35208288874628946, 0.0765239170792309, 0.155959922837966, 0.23283021011347338, 0.0941996500393234, 0.08027812023941328, 0.37644991813710904, 0.22613622738567563, 0.04297432866278961, 0.006422679856942337, 9.999999999998899e-05, 0.4053965970679605, 0.049107493098262234, 0.04870543890928258, 0.08131160392375436, 0.8107761482067122, 0.8118823503787624, 0.7617896436508869, 0.7226956377253708, 0.779782744258949, 0.7838513322197321, 0.7351008935779703, 0.7927978535815905, 0.7516951401591637, 0.07105043302700087, 0.06476518646633633, 0.09164433714543507, 0.14886472313631527, 0.11335555273932407, 0.0952782776070844, 0.14750529838894522, 0.0768106368363296, 0.13103182182118123, 0.2072922464671938, 0.16686478011550532, 0.2130960955663399, 0.19620990864972765, 0.7702965045634373, 0.15820126504789056, 0.43514279366641884, 0.23158880267202941, 0.22984311758962883, 0.2937473888459142, 0.2760875402402073, 0.3829089171637322, 0.44256664178623073, 0.3579112931203079, 0.32815749767564006, 0.5691992554424433, 0.5387255045641676, 0.4656535453016801, 0.15628384548802465, 0.3895074001752722, 0.31250487794388615, 0.583089038074908, 0.32748979969296765, 0.3908297813591125, 0.2814851064866364, 0.22617007848004123, 0.39827333943118093, 0.28834346882483164, 0.15705454969702004, 0.21889604856438682, 0.25177282823544334, 0.22854983587341682, 0.22766940115835788, 0.23850398940746054, 0.21078715902483158, 0.20554571290669565, 0.18529234033011632, 0.1871038286877622, 0.1937106149541059, 0.18968230369612138, 0.2035357541416556, 0.19172930583594605, 0.1885874329336672, 0.17998078012678032, 0.2512938612932678, 0.18551657456840087, 0.1685421254023337, 0.15451640508461528, 0.9019701376882933, 0.20050270852426888, 0.1995911122159295, 0.09965845688364117, 0.17025715186984614, 0.9182608756114339, 0.8971258488972936, 0.15723106122545705, 0.7626205746653218, 0.20811870675699007, 0.12839753378883212, 0.8453471823228119, 0.10515375302054186, 0.1034862297255873, 0.873543857542639, 0.22978720711003175, 0.21345318581448514, 0.25042058399832334, 0.2200490428641988, 0.21419600360734448, 0.26197561392092994, 0.20253306209557154, 0.18392962167707427, 0.22720290265370024, 0.11598240898544687, 0.08464811481610379, 0.08917140375647037, 0.09644085031644956, 0.09369718026842888, 0.10354769837070144, 0.08323995073169421, 0.10259359869755935, 0.095134772411546]}, "mutation_prompt": null}
{"id": "8c4fc8f4-63cf-4977-85b1-ffc40df124dd", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim, swarm_size=30, de_cr=0.9, de_f=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.de_cr = de_cr\n        self.de_f = de_f\n        self.global_best_pos = None\n        self.global_best_val = float('inf')\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_pos = np.copy(particles)\n        personal_best_val = np.full(self.swarm_size, float('inf'))\n        \n        eval_count = 0\n        while eval_count < self.budget:\n            for i in range(self.swarm_size):\n                if eval_count >= self.budget:\n                    break\n                # Evaluate the fitness of the current particle\n                fitness = func(particles[i])\n                eval_count += 1\n\n                # Update personal best if the current fitness is better\n                if fitness < personal_best_val[i]:\n                    personal_best_val[i] = fitness\n                    personal_best_pos[i] = particles[i]\n\n                # Update global best if the current fitness is better\n                if fitness < self.global_best_val:\n                    self.global_best_val = fitness\n                    self.global_best_pos = particles[i]\n\n            # Update velocities and positions for the swarm\n            w = 0.5 + 0.5 * (self.budget - eval_count) / self.budget  # Adaptive inertia weight\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = w * velocities[i] + 1.5 * r1 * (personal_best_pos[i] - particles[i]) + 1.5 * r2 * (self.global_best_pos - particles[i])\n                particles[i] = particles[i] + velocities[i]\n                \n                # Ensure particles remain within bounds\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Apply DE mutation and crossover\n            for i in range(self.swarm_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.swarm_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.de_f * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.de_cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, particles[i])\n                \n                # Evaluate the trial\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Perform selection\n                if trial_fitness < personal_best_val[i]:\n                    personal_best_val[i] = trial_fitness\n                    personal_best_pos[i] = trial\n                    particles[i] = trial\n\n                # Update global best if needed\n                if trial_fitness < self.global_best_val:\n                    self.global_best_val = trial_fitness\n                    self.global_best_pos = trial\n\n        return self.global_best_pos, self.global_best_val", "name": "HybridPSO_DE", "description": "An enhanced HybridPSO_DE using adaptive coefficients to dynamically balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.19053677915403183, "feedback": "", "error": "", "parent_id": "d3f62d0b-d1c9-42e4-af0a-e5c125174d28", "metadata": {"aucs": [0.4301758664351131, 0.3365754874831285, 0.3811701185404094, 0.415487942811539, 0.46480602004627414, 0.17933162671896485, 0.4765790872774188, 0.39056479802751765, 0.37606272893785153, 0.08076309842156859, 9.999999999998899e-05, 0.05294373491308124, 0.013212143331128079, 0.11999724818237067, 9.999999999998899e-05, 0.1355758575251108, 0.06987880095310961, 9.999999999998899e-05, 0.07725575812122809, 0.10157667547674987, 0.07958147404802407, 0.06677078756615029, 0.06166576822620795, 0.08993503403750924, 0.08371487603166716, 0.09294344086678574, 0.10546228737099517, 0.0708458690799918, 0.07662959716234019, 0.07685407642502828, 0.06455554138891206, 0.045957329774560685, 0.07922847156295643, 0.07198963479971121, 0.07120198560789248, 0.06994301015145288, 0.9860188294270005, 0.99165831410371, 0.9913538554937192, 0.9808572338516359, 0.9861171031062581, 0.9808832966986231, 0.9860814885052712, 0.9864993992961679, 0.981771979268907, 0.238284692846368, 0.19619907815619342, 0.23763941044354808, 0.1735672753804931, 0.2782380846435325, 0.14363926083264322, 0.08640712566511777, 0.084255950621412, 9.999999999998899e-05, 0.16307904853551936, 0.20971325348258352, 0.1803994003788827, 0.19658634372964334, 0.17221747136946874, 0.17390165818215264, 0.12090068835506518, 0.12098239667351496, 0.13602658971341208, 0.17160409612230776, 0.09288316538086805, 0.1536783501510779, 0.054388396673193395, 0.12311527171641123, 0.1912202753841893, 0.2340195673148603, 0.0891504145900972, 0.1730889733172628, 0.09776822791481865, 0.14394405440861424, 0.05046917634821735, 0.16919094066384455, 0.08772769928419843, 0.09398808596690955, 0.07993708425183299, 0.1614568585994821, 0.11150215856125811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034059205276826265, 9.999999999998899e-05, 9.999999999998899e-05, 0.07710756676432173, 0.033252007802736405, 0.0001707042001959369, 0.054027004862828965, 0.06509895309842251, 0.05000011920770597, 0.07551239681749489, 0.01780977706068876, 0.19845196998804926, 0.07157047029724639, 0.04643428293572416, 0.04085118774584717, 0.015248682947605618, 0.008331100928012702, 0.012237452916600389, 0.031442708815499154, 0.04762083168614939, 0.0232583427814268, 0.02495279495606051, 0.022287751410337453, 0.018612552793634496, 0.05543842476394878, 0.0647661635029666, 0.09139113769701979, 0.04691075911318765, 9.999999999998899e-05, 0.003135538683999961, 0.07054491222647807, 0.03792954074638788, 0.03755356543919186, 0.39390361851211797, 0.32519413202719694, 0.3297440128941811, 0.42390712795879093, 0.31868518106265564, 0.38442082073448336, 0.3362239877177857, 0.37186402696357135, 0.3574975365975639, 0.10964211878991226, 0.060313923918593915, 0.0669808271904534, 0.1249240624899145, 0.11171192657820317, 0.10141165318404433, 0.0781101090401074, 0.0884138118761515, 0.06377786816904463, 0.13724968154397044, 0.13916789806760976, 0.29166346475930294, 0.1957447861084557, 0.20797360648995533, 0.17738039396509375, 0.18580537359247928, 0.17910105420416256, 0.1858100250429453, 0.23311611085697015, 0.22807791984051695, 0.26740650794322884, 0.23760254243366807, 0.2298999427044882, 0.25236590870149056, 0.2328438154354453, 0.2783294021192688, 0.2655711341438689, 0.13902250225587653, 0.17126862184630243, 0.18231260492938595, 0.1408840721625818, 0.20493674360197223, 0.18568184244179498, 0.17821300004989116, 0.1987459362613213, 0.20517635433045367, 0.18724749513718564, 0.14387658662475455, 0.17452724938216657, 0.18138458042627492, 0.18927971747103578, 0.2162895000562084, 0.19622602545694623, 0.16952348858856436, 0.20203197327072098, 0.18819312437830626, 0.2418673740014382, 0.16688686338717795, 0.20550579475470032, 0.18901248468815968, 0.16842063332358026, 0.18372083645735948, 0.1609270429404187, 0.2706639120022387, 0.18123151270120874, 0.19299054344341515, 0.15201512805913264, 0.506122106932645, 0.18167638103167805, 0.18145518565515428, 0.11950446189745001, 0.16716787103310693, 0.47713257906493944, 0.40470392612034145, 0.3162139694667351, 0.16205089731796796, 0.4311049092575774, 0.20315914464098928, 0.48385159735906513, 0.18235562096472535, 0.19083373701861595, 0.47157297000974374, 0.19035387310062002, 0.18451062457517842, 0.20549257317357883, 0.20498449806002794, 0.19526153789797795, 0.18195294250309013, 0.19332345155117403, 0.1902824631818515, 0.19839790929897905, 0.07007276906044191, 0.0747314102455291, 0.07702669980502397, 0.08307518594925989, 0.0788844435598055, 0.07402057800222106, 0.07462041520309537, 0.07444267582148456, 0.0707675334669664]}, "mutation_prompt": null}
