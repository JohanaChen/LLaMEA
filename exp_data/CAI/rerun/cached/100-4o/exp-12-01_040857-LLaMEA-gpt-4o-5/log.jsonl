{"id": "07baedc8-63ec-4fa1-ba3c-b0e5d8e0b548", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, 10 * dim)  # Adjust population size based on dimension\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.f = 0.5  # Differential weight\n        self.cr = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                target = self.population[i]\n                a, b, c = self.select_random_indices(i)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(target, mutant)\n                trial = np.clip(trial, self.bounds[0], self.bounds[1])\n                self.evaluate_and_select(func, i, trial)\n            self.population = new_population if self.evaluations < self.budget else self.population\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n    def select_random_indices(self, current_index):\n        indices = list(range(self.pop_size))\n        indices.remove(current_index)\n        selected = np.random.choice(indices, 3, replace=False)\n        return self.population[selected[0]], self.population[selected[1]], self.population[selected[2]]\n\n    def mutate(self, a, b, c):\n        return a + self.f * (b - c)\n\n    def crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.cr\n        trial = np.where(crossover_mask, mutant, target)\n        return trial\n\n    def evaluate_and_select(self, func, target_index, trial):\n        trial_fitness = func(trial)\n        self.evaluations += 1\n        if trial_fitness < self.fitness[target_index]:\n            self.fitness[target_index] = trial_fitness\n            self.population[target_index] = trial", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Differential Mutation tailored for diverse optimization landscapes by dynamically balancing exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.060081179798907064, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.11869729595922507, 0.10954927552898264, 0.09818333215876973, 0.10462176297485715, 0.12087233960338739, 0.11042008850345264, 0.16845598744773904, 0.11286859144252936, 0.08308753217886755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02397323518859995, 0.01467079663371329, 0.009968077556886001, 0.010643411704069683, 0.006592353378601756, 0.02256622797717933, 0.018248263482334326, 0.007792397052521438, 0.01202543371909992, 9.999999999998899e-05, 9.999999999998899e-05, 0.006271005763207049, 0.01959972157639278, 0.0004952459975243739, 0.004466990035046026, 0.014763392921912755, 9.999999999998899e-05, 0.0071028976103836294, 0.045179741609489454, 0.06053028260321147, 0.04287777107098589, 0.05459717500827177, 0.06916093746241914, 0.04571313242669495, 0.0638860334912611, 0.06977827678266002, 0.05109428794874926, 0.06274794416174423, 0.03192088044927166, 9.999999999998899e-05, 0.010527403166499028, 0.00031549654350837564, 0.061633298475813225, 0.030025363867640098, 0.028032289719629233, 9.999999999998899e-05, 0.10027683525177622, 0.08803827208315795, 0.08789587480101924, 0.0667108215001172, 0.07285119553694963, 0.08831594899332718, 0.04204994809589935, 0.05931056463008866, 0.03871067985466414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05801178828411613, 0.05801178828411613, 0.05801178828411613, 0.05801178828411613, 0.05801178828411613, 0.058023036649259674, 0.05801178828411613, 0.05801178828411613, 0.05801178828411613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041548061633416955, 9.999999999998899e-05, 0.03058657955676558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15772763981643534, 0.15756555760738078, 0.14838054695461433, 0.16799559766184502, 0.15946988269196682, 0.16564466515928467, 0.16112956940342849, 0.12357301217256167, 0.16129288237668005, 9.999999999998899e-05, 9.999999999998899e-05, 0.02198412468535549, 0.03266886175302153, 9.999999999998899e-05, 0.017814021552896575, 0.022166781364517885, 9.999999999998899e-05, 0.02762246144264957, 0.08494000004272673, 0.08609370886951495, 0.11842175776965747, 0.09855305120349966, 0.10852972522114013, 0.10798713552628325, 0.08808199726801991, 0.08220579109667725, 0.09531207330171731, 0.10857949065891592, 0.1221387732466972, 0.1613932299901244, 0.13800672315110074, 0.13475447899008886, 0.1460131659647239, 0.12028165949079228, 0.17377774300845283, 0.1383423204326375, 0.05985564337097804, 0.051677249455602814, 0.08398582550377798, 0.056957211629895754, 0.06530427487712753, 0.06342850570876157, 0.0837317855149382, 0.0997711199450243, 0.06518151226386493, 0.2587326369867985, 0.258595759818672, 0.2588995135220937, 0.2586722810685218, 0.25859509333240593, 0.25863597145164785, 0.25883741651014724, 0.25843974015976057, 0.2588513565266555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1452676175282751, 0.08832285975673326, 0.10423775569975913, 0.09341111832305615, 0.09755742073408291, 0.1207914665021157, 0.06661401029160186, 0.1070176662487543, 0.10511484148144368, 0.08041145150753726, 0.11040265245322212, 0.12839292801330848, 0.06932034027342138, 0.06804675144690386, 0.05312746671110091, 0.05903250263678039, 0.057970899187173575, 0.0712922769408082, 0.04143420019681854, 0.15334867902645033, 0.128372137474824, 0.14763022729669195, 0.1456953545903894, 0.13279510358877555, 0.14430805107185862, 0.14969714796693134, 0.13401585901877988, 0.14689007985489466, 0.027758474981489756, 0.023765250492120638, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.02535012845648088, 0.022899287275248703, 0.03803354422653826, 0.020680136208875766]}, "mutation_prompt": null}
{"id": "9abb20f0-3a42-4505-8ca8-fe812cf60f23", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(100, 10 * dim)  # Adjust population size based on dimension\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.f = 0.5  # Differential weight\n        self.cr = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            new_population = np.zeros_like(self.population)\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                target = self.population[i]\n                a, b, c = self.select_random_indices(i)\n                mutant = self.mutate(a, b, c)\n                trial = self.crossover(target, mutant)\n                trial = np.clip(trial, self.bounds[0], self.bounds[1])\n                self.evaluate_and_select(func, i, trial)\n            self.population = new_population if self.evaluations < self.budget else self.population\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n    def select_random_indices(self, current_index):\n        indices = list(range(self.pop_size))\n        indices.remove(current_index)\n        selected = np.random.choice(indices, 3, replace=False)\n        return self.population[selected[0]], self.population[selected[1]], self.population[selected[2]]\n\n    def mutate(self, a, b, c):\n        return a + self.f * (b - c)\n\n    def crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.cr\n        trial = np.where(crossover_mask, mutant, target)\n        return trial\n\n    def evaluate_and_select(self, func, target_index, trial):\n        trial_fitness = func(trial)\n        self.evaluations += 1\n        if trial_fitness < self.fitness[target_index]:\n            self.fitness[target_index] = trial_fitness\n            self.population[target_index] = trial", "name": "HybridDE", "description": "Hybrid Differential Evolution with Adaptive Differential Mutation tailored for diverse optimization landscapes by dynamically balancing exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07baedc8-63ec-4fa1-ba3c-b0e5d8e0b548", "metadata": {"aucs": [0.11869729595922507, 0.10954927552898264, 0.09818333215876973, 0.10462176297485715, 0.12087233960338739, 0.11042008850345264, 0.16845598744773904, 0.11286859144252936, 0.08308753217886755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02397323518859995, 0.01467079663371329, 0.009968077556886001, 0.010643411704069683, 0.006592353378601756, 0.02256622797717933, 0.018248263482334326, 0.007792397052521438, 0.01202543371909992, 9.999999999998899e-05, 9.999999999998899e-05, 0.006271005763207049, 0.01959972157639278, 0.0004952459975243739, 0.004466990035046026, 0.014763392921912755, 9.999999999998899e-05, 0.0071028976103836294, 0.045179741609489454, 0.06053028260321147, 0.04287777107098589, 0.05459717500827177, 0.06916093746241914, 0.04571313242669495, 0.0638860334912611, 0.06977827678266002, 0.05109428794874926, 0.06274794416174423, 0.03192088044927166, 9.999999999998899e-05, 0.010527403166499028, 0.00031549654350837564, 0.061633298475813225, 0.030025363867640098, 0.028032289719629233, 9.999999999998899e-05, 0.10027683525177622, 0.08803827208315795, 0.08789587480101924, 0.0667108215001172, 0.07285119553694963, 0.08831594899332718, 0.04204994809589935, 0.05931056463008866, 0.03871067985466414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05801178828411613, 0.05801178828411613, 0.05801178828411613, 0.05801178828411613, 0.05801178828411613, 0.058023036649259674, 0.05801178828411613, 0.05801178828411613, 0.05801178828411613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041548061633416955, 9.999999999998899e-05, 0.03058657955676558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15772763981643534, 0.15756555760738078, 0.14838054695461433, 0.16799559766184502, 0.15946988269196682, 0.16564466515928467, 0.16112956940342849, 0.12357301217256167, 0.16129288237668005, 9.999999999998899e-05, 9.999999999998899e-05, 0.02198412468535549, 0.03266886175302153, 9.999999999998899e-05, 0.017814021552896575, 0.022166781364517885, 9.999999999998899e-05, 0.02762246144264957, 0.08494000004272673, 0.08609370886951495, 0.11842175776965747, 0.09855305120349966, 0.10852972522114013, 0.10798713552628325, 0.08808199726801991, 0.08220579109667725, 0.09531207330171731, 0.10857949065891592, 0.1221387732466972, 0.1613932299901244, 0.13800672315110074, 0.13475447899008886, 0.1460131659647239, 0.12028165949079228, 0.17377774300845283, 0.1383423204326375, 0.05985564337097804, 0.051677249455602814, 0.08398582550377798, 0.056957211629895754, 0.06530427487712753, 0.06342850570876157, 0.0837317855149382, 0.0997711199450243, 0.06518151226386493, 0.2587326369867985, 0.258595759818672, 0.2588995135220937, 0.2586722810685218, 0.25859509333240593, 0.25863597145164785, 0.25883741651014724, 0.25843974015976057, 0.2588513565266555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1452676175282751, 0.08832285975673326, 0.10423775569975913, 0.09341111832305615, 0.09755742073408291, 0.1207914665021157, 0.06661401029160186, 0.1070176662487543, 0.10511484148144368, 0.08041145150753726, 0.11040265245322212, 0.12839292801330848, 0.06932034027342138, 0.06804675144690386, 0.05312746671110091, 0.05903250263678039, 0.057970899187173575, 0.0712922769408082, 0.04143420019681854, 0.15334867902645033, 0.128372137474824, 0.14763022729669195, 0.1456953545903894, 0.13279510358877555, 0.14430805107185862, 0.14969714796693134, 0.13401585901877988, 0.14689007985489466, 0.027758474981489756, 0.023765250492120638, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.02535012845648088, 0.022899287275248703, 0.03803354422653826, 0.020680136208875766]}, "mutation_prompt": null}
