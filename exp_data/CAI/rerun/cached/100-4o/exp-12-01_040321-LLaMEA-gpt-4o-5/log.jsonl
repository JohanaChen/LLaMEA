{"id": "bf25148c-84cd-4bb0-b00e-ab314ef148a2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common practice is 5 to 10 times the dimensionality\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Initial crossover rate\n        self.shrink_factor = 0.99  # Factor to adjust F and CR over time\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(low=self.lower_bound, high=self.upper_bound, size=(self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Step 1: Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[indices]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Step 2: Crossover\n                crossover_points = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_points, mutant, population[i])\n\n                # Step 3: Selection\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Check if budget is exhausted\n                if evals >= self.budget:\n                    break\n\n            # Adaptive mechanism\n            self.F *= self.shrink_factor\n            self.CR *= self.shrink_factor\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm that dynamically adjusts mutation and crossover rates to explore and exploit efficiently within the search space.", "configspace": "", "generation": 0, "fitness": 0.3044164488079088, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8219460972232755, 0.8198312184830852, 0.8399978422780782, 0.8288176452525511, 0.8182202487721495, 0.8408924423468624, 0.8314048558089184, 0.8226165784180131, 0.834420962158872, 0.7036953994088122, 0.6901911444983257, 0.703154029051859, 0.7125152713927113, 0.6967184157216999, 0.706271783977337, 0.7123795749844816, 0.7161013307573854, 0.7040187407018725, 0.16569897016316448, 0.46048416303124573, 0.4706382632572609, 0.4339184159414984, 0.4568205588531684, 0.483409873946115, 0.4949682923163323, 0.46357695361213513, 0.5117068954396444, 0.4507739340577529, 0.14661797532708132, 0.157484969376381, 0.17105567041404757, 0.3897317355412012, 0.15986617725215635, 0.353044551346095, 0.38973053948498615, 0.14073250270508397, 0.9006504143589626, 0.913505471286501, 0.9636354375932839, 0.9048698957072139, 0.9073577535612404, 0.9066953672676863, 0.9402777056947793, 0.9324578469718607, 0.9083988431380802, 0.31990395816401573, 0.22794837715272132, 0.21940789955538342, 0.2652797790609669, 0.27145954676815887, 0.3561541892755409, 0.31078347253229854, 0.24586364639309444, 0.30164009775089884, 0.35426058633367463, 0.5202900694507747, 0.29060053913899264, 0.6763242613225883, 0.36517902876053376, 0.6222159026214246, 0.7448864000926676, 0.533721611366031, 0.646287083597675, 0.14702797661204436, 0.18661352179214508, 0.1745779392587179, 0.15684379200655618, 0.1607212173161353, 0.1601728134513598, 0.15248296953713147, 0.15015249441789913, 0.14112098785252802, 0.1433689333033843, 0.11525374286520951, 0.18572711098867534, 0.15531031841641085, 0.14355686643709165, 0.15059706002457274, 0.16085241676767204, 0.1266062367929226, 0.18017757032656467, 0.031093569705853086, 0.007645594127919542, 0.0074007408526906016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006023118314153919, 0.002521474433364368, 0.04139490750026198, 0.14175808514538635, 0.11488295171513785, 0.11181727515770967, 0.11647541055245925, 0.10436798966603167, 0.11190761762818346, 0.15314721043127089, 0.12921002766970635, 0.1657783590758527, 0.017894976300430465, 0.010641604843505181, 0.05310560381425111, 0.000634311037327695, 9.999999999998899e-05, 0.09208525040327875, 0.02687681026093436, 0.023707072058281264, 0.02178906424610727, 0.12607421822048182, 0.14397246536721797, 0.13259215427978455, 0.15871047420260875, 0.15184929440309947, 0.1636629366239637, 0.13107478823569674, 0.11204642242953944, 0.15800481561872526, 0.5163022847166925, 0.49699221052680675, 0.49299504164349384, 0.5292288299729265, 0.4940151588314805, 0.4864391642865936, 0.5098666789208335, 0.5132086672822889, 0.49811416825140276, 0.1076066539098216, 0.10757227303879568, 0.1400265744531296, 0.1253126491419838, 0.10019963884606864, 0.11349478126772994, 0.11603001613360853, 0.09679994536100589, 0.11051516655860083, 0.1520444678279853, 0.16952813578502468, 0.1612307368828635, 0.14555779426514714, 0.13819341991498224, 0.1509401527714357, 0.17051324068703666, 0.129254749507288, 0.1371031980398788, 0.33264673929097277, 0.34231677675112737, 0.36034381736605525, 0.377482179734027, 0.3674503834714157, 0.4087645399778518, 0.462012095155262, 0.43445111105260037, 0.41598546325342656, 0.24147408998295505, 0.24770843174985813, 0.2516786923263966, 0.24626668001666796, 0.21479013055068163, 0.20411560812752827, 0.2716301919796732, 0.2866699578553913, 0.2808132097679503, 0.19842054070382842, 0.20801729787115342, 0.19360316440069147, 0.18923445577493914, 0.21481966698950505, 0.22626082340384213, 0.22339626458793127, 0.17922073956886997, 0.24097369865036422, 0.32799194041083923, 0.31890327533537577, 0.2607912456315551, 0.4049790247889431, 0.31168377044693474, 0.22301425725792212, 0.3143699257055448, 0.23484337873861427, 0.24681680925877236, 0.2192970401447416, 0.3360604428580143, 0.15017664842371414, 0.46676234105988745, 0.5654670515064608, 0.6313866363222502, 0.413221306763663, 0.16408548642113985, 0.16401025731853147, 0.1974706052285179, 0.19563199458328506, 0.20139120226317475, 0.21901650596420752, 0.16224899543068827, 0.16769328368318548, 0.2052571230485678, 0.20156485839335614, 0.20674835687242932, 0.19248901971198307, 0.20662791838032502, 0.18557967811986287, 0.1828935783034642, 0.18608222282606435, 0.20265957081471886, 0.18496998260882425, 0.20048915061632966, 0.18885362347870382, 0.08406570550684378, 0.07827487626636653, 0.08901349942044035, 0.08117416031788327, 0.08693634613861323, 0.07478476581497617, 0.08177416195546572, 0.0830906522055389, 0.10845794626878646]}, "mutation_prompt": null}
{"id": "eeffc64d-7772-44bc-a099-e7df2b0e5b8c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common practice is 5 to 10 times the dimensionality\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Initial crossover rate\n        self.shrink_factor = 0.99  # Factor to adjust F and CR over time\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(low=self.lower_bound, high=self.upper_bound, size=(self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Step 1: Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = population[indices]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Step 2: Crossover\n                crossover_points = np.random.rand(self.dim) < self.CR\n                if not np.any(crossover_points):\n                    crossover_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_points, mutant, population[i])\n\n                # Step 3: Selection\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Check if budget is exhausted\n                if evals >= self.budget:\n                    break\n\n            # Adaptive mechanism\n            self.F *= self.shrink_factor\n            self.CR *= self.shrink_factor\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm that dynamically adjusts mutation and crossover rates to explore and exploit efficiently within the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bf25148c-84cd-4bb0-b00e-ab314ef148a2", "metadata": {"aucs": [0.8219460972232755, 0.8198312184830852, 0.8399978422780782, 0.8288176452525511, 0.8182202487721495, 0.8408924423468624, 0.8314048558089184, 0.8226165784180131, 0.834420962158872, 0.7036953994088122, 0.6901911444983257, 0.703154029051859, 0.7125152713927113, 0.6967184157216999, 0.706271783977337, 0.7123795749844816, 0.7161013307573854, 0.7040187407018725, 0.16569897016316448, 0.46048416303124573, 0.4706382632572609, 0.4339184159414984, 0.4568205588531684, 0.483409873946115, 0.4949682923163323, 0.46357695361213513, 0.5117068954396444, 0.4507739340577529, 0.14661797532708132, 0.157484969376381, 0.17105567041404757, 0.3897317355412012, 0.15986617725215635, 0.353044551346095, 0.38973053948498615, 0.14073250270508397, 0.9006504143589626, 0.913505471286501, 0.9636354375932839, 0.9048698957072139, 0.9073577535612404, 0.9066953672676863, 0.9402777056947793, 0.9324578469718607, 0.9083988431380802, 0.31990395816401573, 0.22794837715272132, 0.21940789955538342, 0.2652797790609669, 0.27145954676815887, 0.3561541892755409, 0.31078347253229854, 0.24586364639309444, 0.30164009775089884, 0.35426058633367463, 0.5202900694507747, 0.29060053913899264, 0.6763242613225883, 0.36517902876053376, 0.6222159026214246, 0.7448864000926676, 0.533721611366031, 0.646287083597675, 0.14702797661204436, 0.18661352179214508, 0.1745779392587179, 0.15684379200655618, 0.1607212173161353, 0.1601728134513598, 0.15248296953713147, 0.15015249441789913, 0.14112098785252802, 0.1433689333033843, 0.11525374286520951, 0.18572711098867534, 0.15531031841641085, 0.14355686643709165, 0.15059706002457274, 0.16085241676767204, 0.1266062367929226, 0.18017757032656467, 0.031093569705853086, 0.007645594127919542, 0.0074007408526906016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006023118314153919, 0.002521474433364368, 0.04139490750026198, 0.14175808514538635, 0.11488295171513785, 0.11181727515770967, 0.11647541055245925, 0.10436798966603167, 0.11190761762818346, 0.15314721043127089, 0.12921002766970635, 0.1657783590758527, 0.017894976300430465, 0.010641604843505181, 0.05310560381425111, 0.000634311037327695, 9.999999999998899e-05, 0.09208525040327875, 0.02687681026093436, 0.023707072058281264, 0.02178906424610727, 0.12607421822048182, 0.14397246536721797, 0.13259215427978455, 0.15871047420260875, 0.15184929440309947, 0.1636629366239637, 0.13107478823569674, 0.11204642242953944, 0.15800481561872526, 0.5163022847166925, 0.49699221052680675, 0.49299504164349384, 0.5292288299729265, 0.4940151588314805, 0.4864391642865936, 0.5098666789208335, 0.5132086672822889, 0.49811416825140276, 0.1076066539098216, 0.10757227303879568, 0.1400265744531296, 0.1253126491419838, 0.10019963884606864, 0.11349478126772994, 0.11603001613360853, 0.09679994536100589, 0.11051516655860083, 0.1520444678279853, 0.16952813578502468, 0.1612307368828635, 0.14555779426514714, 0.13819341991498224, 0.1509401527714357, 0.17051324068703666, 0.129254749507288, 0.1371031980398788, 0.33264673929097277, 0.34231677675112737, 0.36034381736605525, 0.377482179734027, 0.3674503834714157, 0.4087645399778518, 0.462012095155262, 0.43445111105260037, 0.41598546325342656, 0.24147408998295505, 0.24770843174985813, 0.2516786923263966, 0.24626668001666796, 0.21479013055068163, 0.20411560812752827, 0.2716301919796732, 0.2866699578553913, 0.2808132097679503, 0.19842054070382842, 0.20801729787115342, 0.19360316440069147, 0.18923445577493914, 0.21481966698950505, 0.22626082340384213, 0.22339626458793127, 0.17922073956886997, 0.24097369865036422, 0.32799194041083923, 0.31890327533537577, 0.2607912456315551, 0.4049790247889431, 0.31168377044693474, 0.22301425725792212, 0.3143699257055448, 0.23484337873861427, 0.24681680925877236, 0.2192970401447416, 0.3360604428580143, 0.15017664842371414, 0.46676234105988745, 0.5654670515064608, 0.6313866363222502, 0.413221306763663, 0.16408548642113985, 0.16401025731853147, 0.1974706052285179, 0.19563199458328506, 0.20139120226317475, 0.21901650596420752, 0.16224899543068827, 0.16769328368318548, 0.2052571230485678, 0.20156485839335614, 0.20674835687242932, 0.19248901971198307, 0.20662791838032502, 0.18557967811986287, 0.1828935783034642, 0.18608222282606435, 0.20265957081471886, 0.18496998260882425, 0.20048915061632966, 0.18885362347870382, 0.08406570550684378, 0.07827487626636653, 0.08901349942044035, 0.08117416031788327, 0.08693634613861323, 0.07478476581497617, 0.08177416195546572, 0.0830906522055389, 0.10845794626878646]}, "mutation_prompt": null}
