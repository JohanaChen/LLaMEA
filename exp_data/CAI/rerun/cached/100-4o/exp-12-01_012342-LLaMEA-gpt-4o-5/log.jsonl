{"id": "b20a5116-b2d3-4cd0-8647-df6fb3b02c71", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        self.differential_weight = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                score = func(self.population[i])\n                evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                # Update velocity and position\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_constant * r1 * (self.personal_best_positions[i] - self.population[i])\n                social_velocity = self.social_constant * r2 * (self.global_best_position - self.population[i])\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + cognitive_velocity + social_velocity\n                )\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.population_size):\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[idxs]\n                mutant_vector = x1 + self.differential_weight * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.crossover_probability\n                trial_vector[crossover_points] = mutant_vector[crossover_points]\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n            if evaluations >= self.budget:\n                break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm and Differential Evolution algorithm utilizing adaptive parameter tuning for robust exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.19500956292531926, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.38166187780169025, 0.4296059823858275, 0.4237845822383177, 0.4131564643626323, 0.45487990113870347, 0.39330172623914916, 0.4011866091768267, 0.42821776314991333, 0.34963816465689146, 9.999999999998899e-05, 0.03905053289983407, 0.02290049574887776, 0.011244250968563185, 0.010508954239032198, 0.06151516673640667, 0.022307115866333493, 0.006223270701749106, 0.11774120753422035, 0.09752877541178495, 0.0796782692035638, 0.09633663516266533, 0.07053530724355839, 0.06687545149275143, 0.0888266211782669, 0.10695295013171924, 0.15529409072156009, 0.11287888366370769, 0.08564336228908431, 0.06405706636361996, 0.0911857258769756, 0.0944973535450665, 0.08229833473460679, 0.07412360177705757, 0.07729945844147146, 0.08816083751638926, 0.07151311775931846, 0.9763414307408173, 0.9779545042429476, 0.9814433190400111, 0.9756379232554601, 0.9776112345016817, 0.974088969020936, 0.975055547530951, 0.9665072554850335, 0.9743828885992837, 0.23394199120207748, 0.21199034168373032, 0.23478746713812348, 0.16155947935301807, 0.2251926623368673, 0.1800569664850835, 0.11679379561740588, 0.16431094734893958, 0.08442571356123207, 0.21357054668080022, 0.3163044837996718, 0.5174951036443203, 0.2749103631127289, 0.20291750650770657, 0.25070753626744235, 0.11814200364682603, 0.21987058179163455, 0.28560364642253055, 0.14840365852079962, 0.11477090544543556, 0.12769695777477408, 0.11588917853038438, 0.1382159980614195, 0.08861295224151033, 0.1070133279076243, 0.13022181265423716, 0.1328837712301736, 0.15698670826398464, 0.019901362780965992, 0.11983386295884735, 0.16029962636154982, 0.10185009896682418, 0.11780310998591903, 0.1127585257384146, 0.06955530156216427, 0.09789029025423912, 0.0083585299170158, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011038260622076024, 9.999999999998899e-05, 0.013095806572493318, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016764440617933474, 0.04593709992146777, 0.08075394615912024, 0.07321780062014882, 0.042870414694723746, 0.03272244211617903, 0.027780991884725714, 0.06198868269711366, 0.04498095607061803, 0.05908963189376082, 0.00589971550529389, 0.0001709621217181878, 0.004039041436471269, 0.004015958459422153, 0.01169326680881222, 9.999999999998899e-05, 0.01541060730708832, 0.019254716129292637, 0.0002913882801538481, 0.05579704878594216, 0.0597593339539817, 0.051545820522190144, 0.04474333075548276, 0.04640429588096051, 0.09415456847309855, 0.05919819236432089, 0.05933220311057663, 0.06126499042998679, 0.33231406934706464, 0.34006801495826433, 0.3238204575294902, 0.33632853483232306, 0.33073051869585246, 0.4146888720127554, 0.3683408142060427, 0.31251054219280905, 0.38654958987009613, 0.0845692688192543, 0.11630086369016612, 0.09356015531216677, 0.08949709297125541, 0.08315063707000503, 0.09391149448366864, 0.09088318889161606, 0.08674247470621244, 0.14084318006248775, 0.14392568395745498, 0.16308648935152636, 0.19054713293127967, 0.14973898252629914, 0.2387745887641065, 0.17052657143608319, 0.18541824665791573, 0.14201486052366707, 0.21429675003852944, 0.2565858943581386, 0.22022451079564642, 0.228190262615235, 0.23018466050977227, 0.2414472261975501, 0.23518457655226488, 0.23574521023770123, 0.2705104456267029, 0.22492827156255213, 0.18980981791739948, 0.18907473289833931, 0.21851317724982033, 0.17596090238682394, 0.1472890761033212, 0.24071362119245965, 0.20730010331771775, 0.20699071979652994, 0.21489912394505717, 0.2237876963128811, 0.1862614210410085, 0.19137586329122447, 0.17573392895825346, 0.17700429780787108, 0.17354098216675806, 0.17098465183142486, 0.18301000430006065, 0.20727880627204698, 0.18242730008750963, 0.18183077819447013, 0.20933608933140624, 0.18308626349156332, 0.17635911584707809, 0.18757919622257102, 0.17397807749212935, 0.21078683819742094, 0.19209156593675503, 0.5277396266087406, 0.1873382056538374, 0.14559394451831809, 0.4141908832449951, 0.19453388390302984, 0.5374186080325483, 0.16381396030287576, 0.16444766961844504, 0.5428306953631691, 0.3794649646561252, 0.20943084035769388, 0.1744102190760798, 0.19274892308862335, 0.29514127613282626, 0.33563025240951905, 0.1986346766070911, 0.14999254640038795, 0.41276310661836746, 0.1862775005176004, 0.2046997669225319, 0.1922861553618852, 0.2008047987139545, 0.1970355308301609, 0.1983859111822983, 0.18699715586417665, 0.19816926319784012, 0.17379087767905954, 0.07834275779782762, 0.09812080131715373, 0.07012008890710708, 0.07199084468784023, 0.08016653453373546, 0.0786521077685105, 0.07832814124330922, 0.08352813465952935, 0.06604051605306394]}, "mutation_prompt": null}
{"id": "343ffe62-9b0c-49a0-9cb6-1983ee417e0f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        self.differential_weight = 0.8\n        self.crossover_probability = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.zeros(self.dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                score = func(self.population[i])\n                evaluations += 1\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n\n                # Update velocity and position\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_constant * r1 * (self.personal_best_positions[i] - self.population[i])\n                social_velocity = self.social_constant * r2 * (self.global_best_position - self.population[i])\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + cognitive_velocity + social_velocity\n                )\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.population_size):\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[idxs]\n                mutant_vector = x1 + self.differential_weight * (x2 - x3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                trial_vector = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.crossover_probability\n                trial_vector[crossover_points] = mutant_vector[crossover_points]\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n            if evaluations >= self.budget:\n                break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm and Differential Evolution algorithm utilizing adaptive parameter tuning for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b20a5116-b2d3-4cd0-8647-df6fb3b02c71", "metadata": {"aucs": [0.38166187780169025, 0.4296059823858275, 0.4237845822383177, 0.4131564643626323, 0.45487990113870347, 0.39330172623914916, 0.4011866091768267, 0.42821776314991333, 0.34963816465689146, 9.999999999998899e-05, 0.03905053289983407, 0.02290049574887776, 0.011244250968563185, 0.010508954239032198, 0.06151516673640667, 0.022307115866333493, 0.006223270701749106, 0.11774120753422035, 0.09752877541178495, 0.0796782692035638, 0.09633663516266533, 0.07053530724355839, 0.06687545149275143, 0.0888266211782669, 0.10695295013171924, 0.15529409072156009, 0.11287888366370769, 0.08564336228908431, 0.06405706636361996, 0.0911857258769756, 0.0944973535450665, 0.08229833473460679, 0.07412360177705757, 0.07729945844147146, 0.08816083751638926, 0.07151311775931846, 0.9763414307408173, 0.9779545042429476, 0.9814433190400111, 0.9756379232554601, 0.9776112345016817, 0.974088969020936, 0.975055547530951, 0.9665072554850335, 0.9743828885992837, 0.23394199120207748, 0.21199034168373032, 0.23478746713812348, 0.16155947935301807, 0.2251926623368673, 0.1800569664850835, 0.11679379561740588, 0.16431094734893958, 0.08442571356123207, 0.21357054668080022, 0.3163044837996718, 0.5174951036443203, 0.2749103631127289, 0.20291750650770657, 0.25070753626744235, 0.11814200364682603, 0.21987058179163455, 0.28560364642253055, 0.14840365852079962, 0.11477090544543556, 0.12769695777477408, 0.11588917853038438, 0.1382159980614195, 0.08861295224151033, 0.1070133279076243, 0.13022181265423716, 0.1328837712301736, 0.15698670826398464, 0.019901362780965992, 0.11983386295884735, 0.16029962636154982, 0.10185009896682418, 0.11780310998591903, 0.1127585257384146, 0.06955530156216427, 0.09789029025423912, 0.0083585299170158, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011038260622076024, 9.999999999998899e-05, 0.013095806572493318, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016764440617933474, 0.04593709992146777, 0.08075394615912024, 0.07321780062014882, 0.042870414694723746, 0.03272244211617903, 0.027780991884725714, 0.06198868269711366, 0.04498095607061803, 0.05908963189376082, 0.00589971550529389, 0.0001709621217181878, 0.004039041436471269, 0.004015958459422153, 0.01169326680881222, 9.999999999998899e-05, 0.01541060730708832, 0.019254716129292637, 0.0002913882801538481, 0.05579704878594216, 0.0597593339539817, 0.051545820522190144, 0.04474333075548276, 0.04640429588096051, 0.09415456847309855, 0.05919819236432089, 0.05933220311057663, 0.06126499042998679, 0.33231406934706464, 0.34006801495826433, 0.3238204575294902, 0.33632853483232306, 0.33073051869585246, 0.4146888720127554, 0.3683408142060427, 0.31251054219280905, 0.38654958987009613, 0.0845692688192543, 0.11630086369016612, 0.09356015531216677, 0.08949709297125541, 0.08315063707000503, 0.09391149448366864, 0.09088318889161606, 0.08674247470621244, 0.14084318006248775, 0.14392568395745498, 0.16308648935152636, 0.19054713293127967, 0.14973898252629914, 0.2387745887641065, 0.17052657143608319, 0.18541824665791573, 0.14201486052366707, 0.21429675003852944, 0.2565858943581386, 0.22022451079564642, 0.228190262615235, 0.23018466050977227, 0.2414472261975501, 0.23518457655226488, 0.23574521023770123, 0.2705104456267029, 0.22492827156255213, 0.18980981791739948, 0.18907473289833931, 0.21851317724982033, 0.17596090238682394, 0.1472890761033212, 0.24071362119245965, 0.20730010331771775, 0.20699071979652994, 0.21489912394505717, 0.2237876963128811, 0.1862614210410085, 0.19137586329122447, 0.17573392895825346, 0.17700429780787108, 0.17354098216675806, 0.17098465183142486, 0.18301000430006065, 0.20727880627204698, 0.18242730008750963, 0.18183077819447013, 0.20933608933140624, 0.18308626349156332, 0.17635911584707809, 0.18757919622257102, 0.17397807749212935, 0.21078683819742094, 0.19209156593675503, 0.5277396266087406, 0.1873382056538374, 0.14559394451831809, 0.4141908832449951, 0.19453388390302984, 0.5374186080325483, 0.16381396030287576, 0.16444766961844504, 0.5428306953631691, 0.3794649646561252, 0.20943084035769388, 0.1744102190760798, 0.19274892308862335, 0.29514127613282626, 0.33563025240951905, 0.1986346766070911, 0.14999254640038795, 0.41276310661836746, 0.1862775005176004, 0.2046997669225319, 0.1922861553618852, 0.2008047987139545, 0.1970355308301609, 0.1983859111822983, 0.18699715586417665, 0.19816926319784012, 0.17379087767905954, 0.07834275779782762, 0.09812080131715373, 0.07012008890710708, 0.07199084468784023, 0.08016653453373546, 0.0786521077685105, 0.07832814124330922, 0.08352813465952935, 0.06604051605306394]}, "mutation_prompt": null}
