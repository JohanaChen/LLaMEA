{"id": "16d7ea17-719b-410b-9253-01c03adc3327", "solution": "import numpy as np\n\nclass NovelOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.eval_count = 0\n\n    def __call__(self, func):\n        def simulated_annealing_schedule(t):\n            return max(0.01, np.exp(-0.005 * t))\n\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                self.eval_count += 1\n\n                # Simulated annealing acceptance\n                if trial_fitness < func(self.population[i]) or np.random.rand() < simulated_annealing_schedule(self.eval_count):\n                    self.population[i] = trial\n\n                # Update the best solution found\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n        return self.best_solution", "name": "NovelOptimizer", "description": "This algorithm combines differential evolution with a dynamic learning rate inspired by simulated annealing to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.24295147127241268, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5901573167663974, 0.5839687645462359, 0.5786563007385113, 0.5964226399462329, 0.5740000525385485, 0.6240357003622539, 0.6190035545313207, 0.6096525535079045, 0.6132949196432211, 0.306695848483273, 0.3355495820075478, 0.31424834137079083, 0.290871001246215, 0.315868076736854, 0.3002767628949806, 0.3386915180879728, 0.37162882652877205, 0.33704808118354035, 0.09264780926196203, 0.09078129397331358, 0.08545149196088386, 0.11120218642036761, 0.09802225500156436, 0.10772080002366369, 0.10685680198962777, 0.10260654849555173, 0.09371983192444511, 0.07531825235360412, 0.07646980801439918, 0.09763344547821184, 0.08483370112674837, 0.08478756758419803, 0.07361684281822567, 0.08548907901031633, 0.08294172336387617, 0.09570746612027359, 0.8403399784565577, 0.8360862746636887, 0.8580876577163254, 0.91449114230056, 0.8629415324038983, 0.7309299252625254, 0.8636244454738727, 0.8911246756609726, 0.8147929144000354, 0.26606884629090366, 0.23780507904660775, 0.2566901450210963, 0.2388422016626982, 0.248131340127009, 0.19727691409642611, 0.237915500965297, 0.2678425712360507, 0.2511280212564706, 0.5368572103582907, 0.48592811122109325, 0.5235852774729661, 0.530037410694643, 0.5553172468452771, 0.501194330399461, 0.4758014374518905, 0.5256270071456322, 0.5139585202461427, 0.15242844123408728, 0.12438988931233219, 0.2180472185107417, 0.17834688924486486, 0.1664487490858062, 0.1581336041065462, 0.14831000089271618, 0.13982510568049966, 0.1876397547875739, 0.1126976073331829, 0.08331635824657169, 0.10333764897603892, 0.13119175276089223, 0.11242664101815592, 0.1402053119678922, 0.1637853430864239, 0.16938599290647194, 0.15862618953490004, 0.10117020728448056, 0.1070626085097145, 0.1288735371066918, 0.12347062675903142, 0.1281538269594097, 0.11157700595676001, 0.08399174768428952, 0.13684190067641977, 0.1513178471511426, 0.22321017494314088, 0.2779779113560713, 0.23163542481521804, 0.1855179892281924, 0.23362095569993735, 0.232337413430296, 0.23953914625991402, 0.2506801288876862, 0.25003201944211084, 0.03589599447999714, 0.043637435237361966, 0.03116471964477807, 0.03474613592182163, 0.04494619134380884, 0.04687004767397718, 0.06741144550498124, 0.02924703890814362, 0.06072054700767948, 0.13802998617595186, 0.14446543311207793, 0.15671472314488133, 0.14817991496699656, 0.15068471462620892, 0.1450803339377137, 0.16115761371932114, 0.15528543910093195, 0.14660841655995915, 0.4598641731379346, 0.46941062902329955, 0.4703967178227042, 0.4673637650418374, 0.4691501411337743, 0.4714618233514385, 0.4774850619997515, 0.4414012681772842, 0.4513638616635147, 0.07940325585016672, 0.0939471684408889, 0.07984332381001058, 0.08080768971316354, 0.06897255700051375, 0.09390360268543008, 0.10372504558775708, 0.07400429456332036, 0.09949803441829319, 0.1254101676672984, 0.14390948375460044, 0.1363780484303836, 0.12482602880840876, 0.12179022580204746, 0.13178454315843358, 0.179020995864267, 0.12166266798055181, 0.13296159326588908, 0.31002429784546615, 0.2746201438726583, 0.2852632423730206, 0.2702181385326715, 0.27738074604092144, 0.27031028275423985, 0.2919682227267655, 0.30416144869942996, 0.30212639675834174, 0.2185145811253535, 0.20679468154592273, 0.21682757968985267, 0.2063106218228946, 0.21230733920234368, 0.2090797400125518, 0.2369814714581917, 0.21335120175459377, 0.24776758501240237, 0.17320474010575615, 0.16496114971375997, 0.1812046158309638, 0.1749373268743879, 0.17761047117014828, 0.1807550042078686, 0.21687802138493695, 0.1747830396075356, 0.18005504274482542, 0.1678063582265089, 0.16974246204086885, 0.16990928963535568, 0.16345895840466906, 0.16304532094187996, 0.1628422271926564, 0.15465286028469727, 0.17370676176945576, 0.16866962729444746, 0.14921236246879288, 0.21787613910694548, 0.16966296663648828, 0.19268599618435722, 0.24135205270906723, 0.18206347475410833, 0.5952977145656857, 0.3720446498944062, 0.22168254369273332, 0.1600729928213641, 0.18328407328586505, 0.4730042857820149, 0.20731940655644654, 0.1223349653118132, 0.18171841628000884, 0.422993851430717, 0.14562584050411698, 0.13120170785262197, 0.16952505130023166, 0.18058020097520655, 0.17480525084727871, 0.18025444765981324, 0.17076267584904603, 0.1814287070118159, 0.17388050224598683, 0.1784787996901519, 0.20198913436822596, 0.07167728601895906, 0.0763317013677075, 0.07410488296116435, 0.07819703775575815, 0.06742326297214951, 0.07197811829157019, 0.06706139105740017, 0.07867916721891433, 0.0742480047799089]}, "mutation_prompt": null}
{"id": "5837165d-55eb-439d-8f02-a31a62ab0f4a", "solution": "import numpy as np\n\nclass NovelOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Initial crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.eval_count = 0\n\n    def __call__(self, func):\n        def simulated_annealing_schedule(t):\n            return max(0.01, np.exp(-0.005 * t))\n\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                if self.eval_count >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adjust crossover probability over time\n                dynamic_CR = self.CR * (1 - self.eval_count / self.budget)\n                crossover = np.random.rand(self.dim) < dynamic_CR\n                \n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                self.eval_count += 1\n\n                # Simulated annealing acceptance\n                if trial_fitness < func(self.population[i]) or np.random.rand() < simulated_annealing_schedule(self.eval_count):\n                    self.population[i] = trial\n\n                # Update the best solution found\n                if trial_fitness < self.best_fitness:\n                    self.best_fitness = trial_fitness\n                    self.best_solution = trial\n\n        return self.best_solution", "name": "NovelOptimizer", "description": "This algorithm refines the acceptance criteria to include a dynamic adjustment of the crossover probability based on iteration count.", "configspace": "", "generation": 1, "fitness": 0.20625334199747328, "feedback": "", "error": "", "parent_id": "16d7ea17-719b-410b-9253-01c03adc3327", "metadata": {"aucs": [0.5683743240726293, 0.5668292930453038, 0.581025677390097, 0.5488107589283886, 0.5473613164090968, 0.5936784132733307, 0.6368286048697542, 0.602728125034254, 0.5528446624965613, 0.29280430995562745, 0.3037175931435161, 0.3313311429359467, 0.30172798921828314, 0.30919064287577036, 0.3231423834745437, 0.2629951400553886, 0.25740120087311114, 0.2751984302085747, 0.10321230969842377, 0.10655832996742354, 0.10881382345117818, 0.09794327784376988, 0.09905069809214706, 0.1018463631022265, 0.12534194983382785, 0.0981377212068183, 0.10642040450495183, 0.09872170553998749, 0.08928244694774434, 0.09414034287484141, 0.08691907232390927, 0.08904415404234134, 0.08760993073605117, 0.0900974737193464, 0.11330522288659717, 0.0898840358255204, 0.9241635945859684, 0.7894800361029753, 0.8210012633284223, 0.8762302038041476, 0.8175477197576216, 0.8032982887416228, 0.7921108087046904, 0.9460542533710209, 0.8923794589277948, 0.2085310738604057, 0.22781577291963617, 0.17743666721200713, 0.1972957652141939, 0.2024866423679459, 0.20345740853819505, 0.22089711718306748, 0.1938354845801975, 0.16812216747909736, 0.22057980196689098, 0.24490400072645502, 0.24613877645087456, 0.24671169193537557, 0.25723488933428684, 0.2576828872324799, 0.22998381874115026, 0.29676604275232443, 0.26067973287005086, 0.12055377056319194, 0.13321276334897902, 0.12983528260571053, 0.12433856487695849, 0.13158736019742934, 0.12841876607911906, 0.13049477360663708, 0.13979208366003737, 0.13489134777121103, 0.12024352447176767, 0.07035093845561147, 0.11054980983415552, 0.14062671201924282, 0.1361255264063016, 0.11382309358258358, 0.11825369626933224, 0.10510732052536331, 0.10810324234191626, 0.024030385450684477, 0.04685843201987394, 0.0022893738089602156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14994122814529687, 0.08605303141688114, 0.09534070301344255, 0.06998768216171847, 0.05519191877496965, 0.06985416595373173, 0.10406421498781981, 0.1180678108178741, 0.12987343985333355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08722652620789306, 0.08876844631703118, 0.08368171495814736, 0.08618582139693154, 0.09277423266275087, 0.09008248577663747, 0.08375691340870561, 0.07673405093986274, 0.08693568506905436, 0.3948908880483568, 0.399276141586568, 0.39923323737638305, 0.4328209683837164, 0.4063591912102351, 0.41663301520902474, 0.41545426547367226, 0.3999093256449493, 0.38669741289794013, 0.07772857785290421, 0.08342392396003084, 0.08847938609026629, 0.07611046715874059, 0.07720532515642675, 0.10166770290458371, 0.0739422656089066, 0.08168904927688259, 0.08712379653226432, 0.14121906285332952, 0.14061945962996836, 0.15019598016561375, 0.1344802454874916, 0.12910537219741114, 0.12088862193703387, 0.13503951101318012, 0.12114873610925003, 0.13535449551185952, 0.2603199125306974, 0.2648866988870039, 0.2686576102333056, 0.25852057444798515, 0.24010492140286543, 0.2530913086321427, 0.29216078354083586, 0.29608527735305756, 0.27998667965653135, 0.17985333803453107, 0.18182929456599928, 0.19798991706468505, 0.17256974365100974, 0.16444159908479428, 0.15247542625756072, 0.1857471145984838, 0.1987968481808965, 0.19709274077435335, 0.17627651875799144, 0.17042927797166108, 0.16819949483001895, 0.21303031780033244, 0.1934678493044386, 0.1797118294668104, 0.20845738384578727, 0.21281545849681793, 0.19492575808818624, 0.17273276255295278, 0.17642383744208323, 0.1639578580058384, 0.1759898669949994, 0.16388020445158435, 0.16862859224890203, 0.16876741355352765, 0.16687485450452, 0.17241894559351567, 0.5353038398861394, 0.3388044415676196, 0.1443675101075138, 0.16109781843443394, 0.1680437506080702, 0.1635841530076857, 0.46633553414583384, 0.1491463115825089, 0.193863164511633, 0.18561912776932754, 0.18973337388899492, 0.2549242834610046, 0.15702973571980017, 0.19177811521865507, 0.15395486937127867, 0.27473266206840474, 0.19385220982732265, 0.20004793664302611, 0.16924645080198175, 0.17181847630949598, 0.17972601791012344, 0.17901257615401267, 0.16814419868408914, 0.18654941009890802, 0.1907946183519159, 0.19229168714947942, 0.17582414019675074, 0.07536990080029227, 0.07489823849676491, 0.07109974641732131, 0.07044859447214336, 0.06751773259594829, 0.06577743792145208, 0.07248427585759987, 0.060082141778219356, 0.06847147225145311]}, "mutation_prompt": null}
