{"id": "3445db0d-979a-4f28-afb1-9f4ca3399825", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Population size\n        self.cr = 0.9  # Crossover probability\n        self.f = 0.8  # Differential weight\n        self.bounds = (-5.0, 5.0)\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                mutant = x0 + self.f * (x1 - x2)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_mask, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return pop[best_index], fitness[best_index]\n\n# Example usage:\n# optimizer = AdaptiveDifferentialEvolution(budget=10000, dim=10)\n# best_solution, best_value = optimizer(some_black_box_function)", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm with dynamic parameter adjustment for efficient exploration and exploitation in variable dimensions.", "configspace": "", "generation": 0, "fitness": 0.261332256345072, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6303508354012273, 0.5881740726649367, 0.5891367376365919, 0.6568358532205242, 0.6555401612365537, 0.65296100072555, 0.6637250105621948, 0.6265200288477026, 0.6187073213074975, 0.37439341304077844, 0.3800832742909276, 0.40121637057003157, 0.36186636213755163, 0.39349809186942775, 0.37504237839940546, 0.3676173354635739, 0.4193998164447448, 0.37875790113541397, 0.08457234728953755, 0.09768538036614738, 0.09939994212135517, 0.09869526375611914, 0.10221110508964115, 0.09338603933660983, 0.09402119400699771, 0.08731927456072386, 0.0975070629226138, 0.0846779025785136, 0.08475860204237373, 0.10875946924860236, 0.08593690562373735, 0.09274532457230034, 0.08477075380675247, 0.08852976634851817, 0.08869646286835409, 0.09196649997552997, 0.9806164642140757, 0.9131818418276485, 0.9674545387139455, 0.9574454447453314, 0.9162789564746359, 0.937231638163827, 0.9708179656152067, 0.9572804101259852, 0.9689147118055341, 0.28767841534904903, 0.27664866878666927, 0.2767787090641307, 0.2923089614211929, 0.2936114022452716, 0.2978810074614271, 0.3049580789019337, 0.2947505647469819, 0.3244318716073322, 0.4526956263143981, 0.5248197934116622, 0.41221304718668095, 0.5446581167637885, 0.5107403124377873, 0.5252956318567661, 0.48803742374257464, 0.5922773014258165, 0.505131848408342, 0.18994771786815068, 0.17033309018921095, 0.18962320003970023, 0.1910976729789471, 0.20456379799817226, 0.2070114110775435, 0.20124931116062617, 0.15631712961686228, 0.1529920834026519, 0.3055112677980847, 0.1845900816905398, 0.2276708148330614, 0.18309171089383114, 0.1441194727355769, 0.1969768063407772, 0.14134762277706048, 0.1792125223003732, 0.19596984723449518, 0.10801259564742283, 0.10967396084522951, 0.13301285818910424, 0.12525735077891154, 0.12275425545154262, 0.11890239086965615, 0.133685315045173, 0.11501453728025224, 0.11283451563224478, 0.2539429787238767, 0.25896604227405284, 0.25913870931783944, 0.24087463892121008, 0.2149830053963011, 0.2187834475285385, 0.27922647490104313, 0.2924978657640861, 0.28086858341926335, 0.028143112581165197, 0.039852708190292296, 0.017294577783444454, 0.043772841013424824, 0.02461714117929914, 0.04127468037370052, 0.04327819683910983, 0.04587756189208636, 0.05844591588151238, 0.16455666449639217, 0.15526429165349842, 0.15266820615463972, 0.16384632922330133, 0.15995796486835245, 0.16239319887670844, 0.15369415611647597, 0.15767720857427558, 0.16742728621304837, 0.45465858219947897, 0.47302634420768974, 0.48483373588285883, 0.5086286141823626, 0.4832328721843345, 0.4946498136198044, 0.4602369260347182, 0.48678270611797436, 0.48532356754305794, 0.0844803077644134, 0.08415303633101867, 0.10025593786815001, 0.08432894306818195, 0.09502256669064424, 0.08987697026955177, 0.08039373434577479, 0.07934987507880142, 0.09686658210897281, 0.16801503062757928, 0.17302141451976039, 0.15502553429251453, 0.16352084702203262, 0.13602443403332198, 0.13638572837206264, 0.16024913837653498, 0.12693231315176212, 0.16391225786162578, 0.2874423904336383, 0.25031984715689437, 0.2840692816521003, 0.24230536005838954, 0.23905103299313368, 0.2594671564596721, 0.27418700571780275, 0.294969186889666, 0.28426947115397716, 0.21751662185266252, 0.19659104531943938, 0.1939266368330259, 0.19054678573538264, 0.190122406672665, 0.20111429963049443, 0.19993247051676832, 0.2110290629383278, 0.21386775057452556, 0.18996915365687672, 0.1663641699353139, 0.19324255631970033, 0.17364760462161344, 0.1870411048485292, 0.19408361306047373, 0.19284687291941127, 0.17892342692630614, 0.20398711381524892, 0.17165340471788326, 0.1967187745695591, 0.18302442806360586, 0.17590332188346436, 0.1765885235593807, 0.17347456612798162, 0.1776861424187095, 0.17522357168451674, 0.18793134262210875, 0.15921784572767506, 0.6129508645813364, 0.6642467290753948, 0.1786883177057873, 0.18378424769521984, 0.18073628786737195, 0.15403689036891155, 0.20886084501698632, 0.342656479443594, 0.18670770639170065, 0.19405961062195598, 0.18446824984255095, 0.35460133867526933, 0.2680880141132066, 0.18146512164890416, 0.20313234900068633, 0.4998942066599751, 0.20536619896909192, 0.18783732924635088, 0.18023815829916234, 0.20220339461419934, 0.18749187771032993, 0.16688167222158756, 0.19104640338469214, 0.1754204263818494, 0.18923353842363744, 0.17298381898649295, 0.06350994990888392, 0.07711820996947749, 0.06395195290550271, 0.07669306676589549, 0.07181442078783418, 0.06805418663340457, 0.07552370055913327, 0.06568610617668169, 0.07719139294140276]}, "mutation_prompt": null}
{"id": "3b55e0ab-c08e-45e4-88a9-b4d0ad3131b6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Population size\n        self.cr = 0.9  # Crossover probability\n        self.f = 0.8  # Differential weight\n        self.bounds = (-5.0, 5.0)\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        eval_count = self.population_size\n        \n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = pop[indices]\n                mutant = x0 + self.f * (x1 - x2)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover_mask, mutant, pop[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                eval_count += 1\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return pop[best_index], fitness[best_index]\n\n# Example usage:\n# optimizer = AdaptiveDifferentialEvolution(budget=10000, dim=10)\n# best_solution, best_value = optimizer(some_black_box_function)", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm with dynamic parameter adjustment for efficient exploration and exploitation in variable dimensions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3445db0d-979a-4f28-afb1-9f4ca3399825", "metadata": {"aucs": [0.6303508354012273, 0.5881740726649367, 0.5891367376365919, 0.6568358532205242, 0.6555401612365537, 0.65296100072555, 0.6637250105621948, 0.6265200288477026, 0.6187073213074975, 0.37439341304077844, 0.3800832742909276, 0.40121637057003157, 0.36186636213755163, 0.39349809186942775, 0.37504237839940546, 0.3676173354635739, 0.4193998164447448, 0.37875790113541397, 0.08457234728953755, 0.09768538036614738, 0.09939994212135517, 0.09869526375611914, 0.10221110508964115, 0.09338603933660983, 0.09402119400699771, 0.08731927456072386, 0.0975070629226138, 0.0846779025785136, 0.08475860204237373, 0.10875946924860236, 0.08593690562373735, 0.09274532457230034, 0.08477075380675247, 0.08852976634851817, 0.08869646286835409, 0.09196649997552997, 0.9806164642140757, 0.9131818418276485, 0.9674545387139455, 0.9574454447453314, 0.9162789564746359, 0.937231638163827, 0.9708179656152067, 0.9572804101259852, 0.9689147118055341, 0.28767841534904903, 0.27664866878666927, 0.2767787090641307, 0.2923089614211929, 0.2936114022452716, 0.2978810074614271, 0.3049580789019337, 0.2947505647469819, 0.3244318716073322, 0.4526956263143981, 0.5248197934116622, 0.41221304718668095, 0.5446581167637885, 0.5107403124377873, 0.5252956318567661, 0.48803742374257464, 0.5922773014258165, 0.505131848408342, 0.18994771786815068, 0.17033309018921095, 0.18962320003970023, 0.1910976729789471, 0.20456379799817226, 0.2070114110775435, 0.20124931116062617, 0.15631712961686228, 0.1529920834026519, 0.3055112677980847, 0.1845900816905398, 0.2276708148330614, 0.18309171089383114, 0.1441194727355769, 0.1969768063407772, 0.14134762277706048, 0.1792125223003732, 0.19596984723449518, 0.10801259564742283, 0.10967396084522951, 0.13301285818910424, 0.12525735077891154, 0.12275425545154262, 0.11890239086965615, 0.133685315045173, 0.11501453728025224, 0.11283451563224478, 0.2539429787238767, 0.25896604227405284, 0.25913870931783944, 0.24087463892121008, 0.2149830053963011, 0.2187834475285385, 0.27922647490104313, 0.2924978657640861, 0.28086858341926335, 0.028143112581165197, 0.039852708190292296, 0.017294577783444454, 0.043772841013424824, 0.02461714117929914, 0.04127468037370052, 0.04327819683910983, 0.04587756189208636, 0.05844591588151238, 0.16455666449639217, 0.15526429165349842, 0.15266820615463972, 0.16384632922330133, 0.15995796486835245, 0.16239319887670844, 0.15369415611647597, 0.15767720857427558, 0.16742728621304837, 0.45465858219947897, 0.47302634420768974, 0.48483373588285883, 0.5086286141823626, 0.4832328721843345, 0.4946498136198044, 0.4602369260347182, 0.48678270611797436, 0.48532356754305794, 0.0844803077644134, 0.08415303633101867, 0.10025593786815001, 0.08432894306818195, 0.09502256669064424, 0.08987697026955177, 0.08039373434577479, 0.07934987507880142, 0.09686658210897281, 0.16801503062757928, 0.17302141451976039, 0.15502553429251453, 0.16352084702203262, 0.13602443403332198, 0.13638572837206264, 0.16024913837653498, 0.12693231315176212, 0.16391225786162578, 0.2874423904336383, 0.25031984715689437, 0.2840692816521003, 0.24230536005838954, 0.23905103299313368, 0.2594671564596721, 0.27418700571780275, 0.294969186889666, 0.28426947115397716, 0.21751662185266252, 0.19659104531943938, 0.1939266368330259, 0.19054678573538264, 0.190122406672665, 0.20111429963049443, 0.19993247051676832, 0.2110290629383278, 0.21386775057452556, 0.18996915365687672, 0.1663641699353139, 0.19324255631970033, 0.17364760462161344, 0.1870411048485292, 0.19408361306047373, 0.19284687291941127, 0.17892342692630614, 0.20398711381524892, 0.17165340471788326, 0.1967187745695591, 0.18302442806360586, 0.17590332188346436, 0.1765885235593807, 0.17347456612798162, 0.1776861424187095, 0.17522357168451674, 0.18793134262210875, 0.15921784572767506, 0.6129508645813364, 0.6642467290753948, 0.1786883177057873, 0.18378424769521984, 0.18073628786737195, 0.15403689036891155, 0.20886084501698632, 0.342656479443594, 0.18670770639170065, 0.19405961062195598, 0.18446824984255095, 0.35460133867526933, 0.2680880141132066, 0.18146512164890416, 0.20313234900068633, 0.4998942066599751, 0.20536619896909192, 0.18783732924635088, 0.18023815829916234, 0.20220339461419934, 0.18749187771032993, 0.16688167222158756, 0.19104640338469214, 0.1754204263818494, 0.18923353842363744, 0.17298381898649295, 0.06350994990888392, 0.07711820996947749, 0.06395195290550271, 0.07669306676589549, 0.07181442078783418, 0.06805418663340457, 0.07552370055913327, 0.06568610617668169, 0.07719139294140276]}, "mutation_prompt": null}
