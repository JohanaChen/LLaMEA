{"id": "e69e1328-1598-4bce-8c00-2d27cb6721dc", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = int(5 + np.ceil(3 * np.log(dim)))\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.f = 0.8  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize particles and velocities\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        global_best = personal_best[np.argmin(personal_best_scores)]\n        global_best_score = min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # PSO update\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.w * velocities[i] \n                                 + self.c1 * r1 * (personal_best[i] - particles[i])\n                                 + self.c2 * r2 * (global_best - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                score = func(particles[i])\n                evaluations += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_scores[i] = score\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best = particles[i]\n                    global_best_score = score\n\n                if evaluations >= self.budget:\n                    break\n\n            if evaluations >= self.budget:\n                break\n\n            # DE update\n            for i in range(self.population_size):\n                indices = np.random.permutation(self.population_size)\n                x1, x2, x3 = personal_best[indices[:3]]\n                mutant = x1 + self.f * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.copy(particles[i])\n                crossover = np.random.rand(self.dim) < self.cr\n                trial[crossover] = mutant[crossover]\n\n                trial_score = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_score < personal_best_scores[i]:\n                    personal_best[i] = trial\n                    personal_best_scores[i] = trial_score\n                \n                # Update global best\n                if trial_score < global_best_score:\n                    global_best = trial\n                    global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhanced exploration and exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.36935264381615346, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9482922568450539, 0.9362216982054222, 0.9491953145435856, 0.9400859182433612, 0.9381727623547597, 0.16111682749636658, 0.18329868902609825, 0.9373886222262735, 0.9405893398998698, 0.8793672308175908, 0.8298927499576321, 0.8437559869560615, 0.8649982948558695, 0.8438027203073715, 0.882760052145648, 0.8857500378023864, 0.06045281197504282, 0.8885773651390857, 0.12021174213674857, 0.11884886863700483, 0.16530378553452907, 0.14754510888300443, 0.10742764233389712, 0.13506173503139218, 0.14763188230925084, 0.06227512385400058, 0.0804782185360362, 0.11170699853707844, 0.0283631263887133, 0.0939176059968968, 0.09831438910518686, 0.02660301052058167, 0.09314325888126773, 0.08339031894816562, 0.1110974062671547, 0.04845237214243081, 0.9935228363639396, 0.9913626031169246, 0.9954307827097728, 0.9937153479205745, 0.991655197878716, 0.0749847760135155, 0.09987137524276246, 0.9957403643867184, 0.07462799778442264, 0.8092313395340907, 0.8858615067560365, 0.7585642088160278, 0.8854105785061606, 0.8324325983489174, 0.8903765963103392, 0.8904007016586261, 0.8698095045206757, 0.875532274133146, 0.2557951564929948, 0.11286938795843293, 0.9529196991578837, 0.344062541646597, 0.16067952070053448, 0.21554471121795837, 0.06856767584883416, 0.11593527748105903, 0.15569797603965052, 0.13569384766030756, 0.7759257405588933, 0.7945978078362572, 0.9041817165403971, 0.8259296404417428, 0.7821362624781993, 0.8463506745003692, 0.13306094188454953, 0.8883614663095878, 0.8158457224145859, 9.999999999998899e-05, 0.7514871897972466, 0.8101576791395375, 0.8090365401709898, 0.13739865413964725, 0.8384870489429782, 0.03500464924589519, 0.8107707963994261, 0.18450371913901975, 0.24711286649466124, 0.09877411460285601, 0.10434399912698333, 0.061483595235191535, 0.04281457123728338, 0.2637791869646656, 0.010451531244502044, 9.999999999998899e-05, 0.28240261308669345, 0.20839497663784168, 0.17855067625536325, 0.35248352188194376, 0.24941455909128996, 0.1441877999596347, 0.9058882906317968, 0.02636728887416262, 0.17737397343005645, 0.23090112299449717, 0.1940728905712824, 0.2720887015612363, 0.49091753105987346, 0.2253001913026671, 0.7410035041429694, 0.2700221465364606, 0.5630463055584773, 0.0790282119812824, 0.6096606638941984, 0.42863379325270456, 0.39358816062470414, 0.03997639532502273, 0.006861959775183668, 0.006805902988273882, 0.4392525026461801, 0.08556438329082228, 0.08559923754821508, 0.8961349079164093, 0.8604087385979151, 0.787160329967781, 0.712075683738016, 0.6556872396653965, 0.20963785004698265, 0.8006174510350527, 0.7006319723848402, 0.7258381157626916, 0.07990147524355673, 0.08198708635643792, 0.04545189568005448, 0.11175377203742587, 0.08781856521214793, 0.163669715250214, 0.1458905653096968, 0.0972250356281158, 0.10755359373717255, 0.28193682984353063, 0.12899120386484209, 0.16994123021292706, 0.3671852460917653, 0.2107594681934426, 0.18006676664843213, 0.16442791039536986, 0.20627148115412908, 0.2422028247764253, 0.30205462986320375, 0.3759365640991018, 0.3150777658622905, 0.5345671940671206, 0.21817415688821207, 0.2672787624025368, 0.2378403760212504, 0.20325726726009774, 0.26111074073416607, 0.24884981979653753, 0.283741800566097, 0.18744090445970518, 0.26482431447501176, 0.18600071057016443, 0.1979398525846755, 0.3616536848955557, 0.460219183303359, 0.31875184814997326, 0.2205913882520193, 0.25119512288128265, 0.23155354676204243, 0.23271607249217208, 0.15773812832634393, 0.23950622462939464, 0.24748271707065517, 0.17674666672794792, 0.2206364960832108, 0.18564709068136853, 0.23020551741260564, 0.20546951409604075, 0.18019272968369682, 0.17696426109451913, 0.20051820666283926, 0.2011184134779468, 0.22755976299985614, 0.21129457991728373, 0.1897480099560076, 0.14300238207831373, 0.9609977938564632, 0.17398403958510844, 0.2020276677747347, 0.16976451972736573, 0.15421524023946842, 0.16816822376857, 0.16858802124117844, 0.96429235988413, 0.11322884336697281, 0.9533578059025205, 0.9292081631892369, 0.15528015920231641, 0.21431204111446944, 0.16934946579457888, 0.15729409762262403, 0.927985217935564, 0.23320746619478283, 0.20983916684989545, 0.19277751762033057, 0.17657882688472004, 0.24094741679327758, 0.21772390229255534, 0.2303192691752841, 0.2040498700314166, 0.2657732015351879, 0.10306627357758902, 0.06897484845138702, 0.1126206051691031, 0.12912524640456668, 0.11937902287737912, 0.10077451404597726, 0.11330916871437635, 0.06758380085175886, 0.05686284778415007]}, "mutation_prompt": null}
{"id": "dba3ff6f-9a46-44d5-b05c-c0e3b6a0ebef", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = int(5 + np.ceil(3 * np.log(dim)))\n        self.w = 0.5  # inertia weight\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.f = 0.8  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize particles and velocities\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = particles.copy()\n        personal_best_scores = np.array([func(p) for p in particles])\n        global_best = personal_best[np.argmin(personal_best_scores)]\n        global_best_score = min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # PSO update\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.w * velocities[i] \n                                 + self.c1 * r1 * (personal_best[i] - particles[i])\n                                 + self.c2 * r2 * (global_best - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                score = func(particles[i])\n                evaluations += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_scores[i] = score\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best = particles[i]\n                    global_best_score = score\n\n                if evaluations >= self.budget:\n                    break\n\n            if evaluations >= self.budget:\n                break\n\n            # DE update\n            for i in range(self.population_size):\n                indices = np.random.permutation(self.population_size)\n                x1, x2, x3 = personal_best[indices[:3]]\n                mutant = x1 + self.f * (x2 - x3)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.copy(particles[i])\n                crossover = np.random.rand(self.dim) < self.cr\n                trial[crossover] = mutant[crossover]\n\n                trial_score = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_score < personal_best_scores[i]:\n                    personal_best[i] = trial\n                    personal_best_scores[i] = trial_score\n                \n                # Update global best\n                if trial_score < global_best_score:\n                    global_best = trial\n                    global_best_score = trial_score\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Evolution for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e69e1328-1598-4bce-8c00-2d27cb6721dc", "metadata": {"aucs": [0.9482922568450539, 0.9362216982054222, 0.9491953145435856, 0.9400859182433612, 0.9381727623547597, 0.16111682749636658, 0.18329868902609825, 0.9373886222262735, 0.9405893398998698, 0.8793672308175908, 0.8298927499576321, 0.8437559869560615, 0.8649982948558695, 0.8438027203073715, 0.882760052145648, 0.8857500378023864, 0.06045281197504282, 0.8885773651390857, 0.12021174213674857, 0.11884886863700483, 0.16530378553452907, 0.14754510888300443, 0.10742764233389712, 0.13506173503139218, 0.14763188230925084, 0.06227512385400058, 0.0804782185360362, 0.11170699853707844, 0.0283631263887133, 0.0939176059968968, 0.09831438910518686, 0.02660301052058167, 0.09314325888126773, 0.08339031894816562, 0.1110974062671547, 0.04845237214243081, 0.9935228363639396, 0.9913626031169246, 0.9954307827097728, 0.9937153479205745, 0.991655197878716, 0.0749847760135155, 0.09987137524276246, 0.9957403643867184, 0.07462799778442264, 0.8092313395340907, 0.8858615067560365, 0.7585642088160278, 0.8854105785061606, 0.8324325983489174, 0.8903765963103392, 0.8904007016586261, 0.8698095045206757, 0.875532274133146, 0.2557951564929948, 0.11286938795843293, 0.9529196991578837, 0.344062541646597, 0.16067952070053448, 0.21554471121795837, 0.06856767584883416, 0.11593527748105903, 0.15569797603965052, 0.13569384766030756, 0.7759257405588933, 0.7945978078362572, 0.9041817165403971, 0.8259296404417428, 0.7821362624781993, 0.8463506745003692, 0.13306094188454953, 0.8883614663095878, 0.8158457224145859, 9.999999999998899e-05, 0.7514871897972466, 0.8101576791395375, 0.8090365401709898, 0.13739865413964725, 0.8384870489429782, 0.03500464924589519, 0.8107707963994261, 0.18450371913901975, 0.24711286649466124, 0.09877411460285601, 0.10434399912698333, 0.061483595235191535, 0.04281457123728338, 0.2637791869646656, 0.010451531244502044, 9.999999999998899e-05, 0.28240261308669345, 0.20839497663784168, 0.17855067625536325, 0.35248352188194376, 0.24941455909128996, 0.1441877999596347, 0.9058882906317968, 0.02636728887416262, 0.17737397343005645, 0.23090112299449717, 0.1940728905712824, 0.2720887015612363, 0.49091753105987346, 0.2253001913026671, 0.7410035041429694, 0.2700221465364606, 0.5630463055584773, 0.0790282119812824, 0.6096606638941984, 0.42863379325270456, 0.39358816062470414, 0.03997639532502273, 0.006861959775183668, 0.006805902988273882, 0.4392525026461801, 0.08556438329082228, 0.08559923754821508, 0.8961349079164093, 0.8604087385979151, 0.787160329967781, 0.712075683738016, 0.6556872396653965, 0.20963785004698265, 0.8006174510350527, 0.7006319723848402, 0.7258381157626916, 0.07990147524355673, 0.08198708635643792, 0.04545189568005448, 0.11175377203742587, 0.08781856521214793, 0.163669715250214, 0.1458905653096968, 0.0972250356281158, 0.10755359373717255, 0.28193682984353063, 0.12899120386484209, 0.16994123021292706, 0.3671852460917653, 0.2107594681934426, 0.18006676664843213, 0.16442791039536986, 0.20627148115412908, 0.2422028247764253, 0.30205462986320375, 0.3759365640991018, 0.3150777658622905, 0.5345671940671206, 0.21817415688821207, 0.2672787624025368, 0.2378403760212504, 0.20325726726009774, 0.26111074073416607, 0.24884981979653753, 0.283741800566097, 0.18744090445970518, 0.26482431447501176, 0.18600071057016443, 0.1979398525846755, 0.3616536848955557, 0.460219183303359, 0.31875184814997326, 0.2205913882520193, 0.25119512288128265, 0.23155354676204243, 0.23271607249217208, 0.15773812832634393, 0.23950622462939464, 0.24748271707065517, 0.17674666672794792, 0.2206364960832108, 0.18564709068136853, 0.23020551741260564, 0.20546951409604075, 0.18019272968369682, 0.17696426109451913, 0.20051820666283926, 0.2011184134779468, 0.22755976299985614, 0.21129457991728373, 0.1897480099560076, 0.14300238207831373, 0.9609977938564632, 0.17398403958510844, 0.2020276677747347, 0.16976451972736573, 0.15421524023946842, 0.16816822376857, 0.16858802124117844, 0.96429235988413, 0.11322884336697281, 0.9533578059025205, 0.9292081631892369, 0.15528015920231641, 0.21431204111446944, 0.16934946579457888, 0.15729409762262403, 0.927985217935564, 0.23320746619478283, 0.20983916684989545, 0.19277751762033057, 0.17657882688472004, 0.24094741679327758, 0.21772390229255534, 0.2303192691752841, 0.2040498700314166, 0.2657732015351879, 0.10306627357758902, 0.06897484845138702, 0.1126206051691031, 0.12912524640456668, 0.11937902287737912, 0.10077451404597726, 0.11330916871437635, 0.06758380085175886, 0.05686284778415007]}, "mutation_prompt": null}
