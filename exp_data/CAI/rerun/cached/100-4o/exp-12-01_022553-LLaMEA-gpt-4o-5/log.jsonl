{"id": "63954203-919c-4293-97ee-43cb1d5e22a6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 5 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = swarm.copy()\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_score = np.inf\n        global_best_position = None\n        \n        evaluations = 0\n        \n        while evaluations < self.budget:\n            # Evaluate swarm\n            for i in range(self.population_size):\n                score = func(swarm[i])\n                evaluations += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i].copy()\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i].copy()\n                \n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions (PSO)\n            r1, r2 = np.random.rand(2)\n            for i in range(self.population_size):\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 self.c2 * r2 * (global_best_position - swarm[i]))\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = swarm[indices]\n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate,\n                                        mutant_vector, swarm[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                \n                # Selection\n                if trial_score < personal_best_scores[i]:\n                    swarm[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                    \n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization and Differential Evolution with adaptive mutation to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.2726780156137515, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7965949953457365, 0.7965949953457365, 0.7965949953457365, 0.7964088449880745, 0.7964088449880745, 0.7964088449880745, 0.7935821939204661, 0.7935821939204661, 0.7935821939204661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5253059704772589, 0.5253059704772589, 0.5253059704772589, 0.004637330655020366, 0.004637330655020366, 0.004637330655020366, 0.11609204082336744, 0.11609204082336744, 0.11609204082336744, 0.08521073100726317, 0.08521073100726317, 0.08521073100726317, 0.09567686362406636, 0.09567686362406636, 0.09567686362406636, 0.11240903584159734, 0.11240903584159734, 0.11240903584159734, 0.06921803230435453, 0.06921803230435453, 0.06921803230435453, 0.006385573637800568, 0.006385573637800568, 0.006385573637800568, 0.9692767652360106, 0.9692767652360106, 0.9692767652360106, 0.9882009965376927, 0.9882009965376927, 0.9882009965376927, 0.9879896674820408, 0.9879896674820408, 0.9879896674820408, 0.05986276669106827, 0.05986276669106827, 0.05986276669106827, 0.12958871486602908, 0.12958871486602908, 0.12958871486602908, 0.6831252569958326, 0.6831252569958326, 0.6831252569958326, 0.060040398983276844, 0.060040398983276844, 0.060040398983276844, 0.17237594345833518, 0.17237594345833518, 0.17237594345833518, 0.7766191413143764, 0.7766191413143764, 0.7766191413143764, 0.4095574303391175, 0.4095574303391175, 0.4095574303391175, 0.5852442778205142, 0.5852442778205142, 0.5852442778205142, 0.516483684492818, 0.516483684492818, 0.516483684492818, 0.471870327822566, 0.471870327822566, 0.471870327822566, 0.572140925793787, 0.572140925793787, 0.572140925793787, 0.45598415382640367, 0.45598415382640367, 0.45598415382640367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2554590691181444, 0.2554590691181444, 0.2554590691181444, 0.084209953202533, 0.084209953202533, 0.084209953202533, 0.21662046401468182, 0.21662046401468182, 0.21662046401468182, 0.05192614589071931, 0.05192614589071931, 0.05192614589071931, 0.030375399617510235, 0.030375399617510235, 0.030375399617510235, 0.09008416253522222, 0.09008416253522222, 0.09008416253522222, 0.2133003384244967, 0.2133003384244967, 0.2133003384244967, 0.04163890151962624, 0.04163890151962624, 0.04163890151962624, 0.037141495382284284, 0.037141495382284284, 0.037141495382284284, 0.07945155181357821, 0.07945155181357821, 0.07945155181357821, 0.6826319910639066, 0.6826319910639066, 0.6826319910639066, 0.16739495557206396, 0.16739495557206396, 0.16739495557206396, 0.6420828756350327, 0.6420828756350327, 0.6420828756350327, 0.1308643556692468, 0.1308643556692468, 0.1308643556692468, 0.05682389344691019, 0.05682389344691019, 0.05682389344691019, 0.09320280062223285, 0.09320280062223285, 0.09320280062223285, 0.16978070455168126, 0.16978070455168126, 0.16978070455168126, 0.22646394331386754, 0.22646394331386754, 0.22646394331386754, 0.18401906403270463, 0.18401906403270463, 0.18401906403270463, 0.35625413180270915, 0.35625413180270915, 0.35625413180270915, 0.20570876807079097, 0.20570876807079097, 0.20570876807079097, 0.12909004258653878, 0.12909004258653878, 0.12909004258653878, 0.2122811419262869, 0.2122811419262869, 0.2122811419262869, 0.17782715269317362, 0.17782715269317362, 0.17782715269317362, 0.12335632427919685, 0.12335632427919685, 0.12335632427919685, 0.20934690655904642, 0.20934690655904642, 0.20934690655904642, 0.19287359633556944, 0.19287359633556944, 0.19287359633556944, 0.18656111283734078, 0.18656111283734078, 0.18656111283734078, 0.18623976331242365, 0.18623976331242365, 0.18623976331242365, 0.1920494203044969, 0.1920494203044969, 0.1920494203044969, 0.197458943095834, 0.197458943095834, 0.197458943095834, 0.9169088128650263, 0.9169088128650263, 0.9169088128650263, 0.1583538594966385, 0.1583538594966385, 0.1583538594966385, 0.16522180801994857, 0.16522180801994857, 0.16522180801994857, 0.06544450266057689, 0.06544450266057689, 0.06544450266057689, 0.2082859563945313, 0.2082859563945313, 0.2082859563945313, 0.1563235091368862, 0.1563235091368862, 0.1563235091368862, 0.23813450806687586, 0.23813450806687586, 0.23813450806687586, 0.20147950884256138, 0.20147950884256138, 0.20147950884256138, 0.25048392030808075, 0.25048392030808075, 0.25048392030808075, 0.06695903238705647, 0.06695903238705647, 0.06695903238705647, 0.058332288917134045, 0.058332288917134045, 0.058332288917134045, 0.08418798358006552, 0.08418798358006552, 0.08418798358006552]}, "mutation_prompt": null}
{"id": "c04b6c07-2c66-4378-8884-16b03305c99c", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 5 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n    \n    def __call__(self, func):\n        np.random.seed(42)\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = swarm.copy()\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_score = np.inf\n        global_best_position = None\n        \n        evaluations = 0\n        \n        while evaluations < self.budget:\n            # Evaluate swarm\n            for i in range(self.population_size):\n                score = func(swarm[i])\n                evaluations += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = swarm[i].copy()\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = swarm[i].copy()\n                \n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions (PSO)\n            r1, r2 = np.random.rand(2)\n            for i in range(self.population_size):\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - swarm[i]) +\n                                 self.c2 * r2 * (global_best_position - swarm[i]))\n                swarm[i] += velocities[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                indices = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = swarm[indices]\n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate,\n                                        mutant_vector, swarm[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                \n                # Selection\n                if trial_score < personal_best_scores[i]:\n                    swarm[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                    \n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n        return global_best_position, global_best_score", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization and Differential Evolution with adaptive mutation to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63954203-919c-4293-97ee-43cb1d5e22a6", "metadata": {"aucs": [0.7965949953457365, 0.7965949953457365, 0.7965949953457365, 0.7964088449880745, 0.7964088449880745, 0.7964088449880745, 0.7935821939204661, 0.7935821939204661, 0.7935821939204661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5253059704772589, 0.5253059704772589, 0.5253059704772589, 0.004637330655020366, 0.004637330655020366, 0.004637330655020366, 0.11609204082336744, 0.11609204082336744, 0.11609204082336744, 0.08521073100726317, 0.08521073100726317, 0.08521073100726317, 0.09567686362406636, 0.09567686362406636, 0.09567686362406636, 0.11240903584159734, 0.11240903584159734, 0.11240903584159734, 0.06921803230435453, 0.06921803230435453, 0.06921803230435453, 0.006385573637800568, 0.006385573637800568, 0.006385573637800568, 0.9692767652360106, 0.9692767652360106, 0.9692767652360106, 0.9882009965376927, 0.9882009965376927, 0.9882009965376927, 0.9879896674820408, 0.9879896674820408, 0.9879896674820408, 0.05986276669106827, 0.05986276669106827, 0.05986276669106827, 0.12958871486602908, 0.12958871486602908, 0.12958871486602908, 0.6831252569958326, 0.6831252569958326, 0.6831252569958326, 0.060040398983276844, 0.060040398983276844, 0.060040398983276844, 0.17237594345833518, 0.17237594345833518, 0.17237594345833518, 0.7766191413143764, 0.7766191413143764, 0.7766191413143764, 0.4095574303391175, 0.4095574303391175, 0.4095574303391175, 0.5852442778205142, 0.5852442778205142, 0.5852442778205142, 0.516483684492818, 0.516483684492818, 0.516483684492818, 0.471870327822566, 0.471870327822566, 0.471870327822566, 0.572140925793787, 0.572140925793787, 0.572140925793787, 0.45598415382640367, 0.45598415382640367, 0.45598415382640367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2554590691181444, 0.2554590691181444, 0.2554590691181444, 0.084209953202533, 0.084209953202533, 0.084209953202533, 0.21662046401468182, 0.21662046401468182, 0.21662046401468182, 0.05192614589071931, 0.05192614589071931, 0.05192614589071931, 0.030375399617510235, 0.030375399617510235, 0.030375399617510235, 0.09008416253522222, 0.09008416253522222, 0.09008416253522222, 0.2133003384244967, 0.2133003384244967, 0.2133003384244967, 0.04163890151962624, 0.04163890151962624, 0.04163890151962624, 0.037141495382284284, 0.037141495382284284, 0.037141495382284284, 0.07945155181357821, 0.07945155181357821, 0.07945155181357821, 0.6826319910639066, 0.6826319910639066, 0.6826319910639066, 0.16739495557206396, 0.16739495557206396, 0.16739495557206396, 0.6420828756350327, 0.6420828756350327, 0.6420828756350327, 0.1308643556692468, 0.1308643556692468, 0.1308643556692468, 0.05682389344691019, 0.05682389344691019, 0.05682389344691019, 0.09320280062223285, 0.09320280062223285, 0.09320280062223285, 0.16978070455168126, 0.16978070455168126, 0.16978070455168126, 0.22646394331386754, 0.22646394331386754, 0.22646394331386754, 0.18401906403270463, 0.18401906403270463, 0.18401906403270463, 0.35625413180270915, 0.35625413180270915, 0.35625413180270915, 0.20570876807079097, 0.20570876807079097, 0.20570876807079097, 0.12909004258653878, 0.12909004258653878, 0.12909004258653878, 0.2122811419262869, 0.2122811419262869, 0.2122811419262869, 0.17782715269317362, 0.17782715269317362, 0.17782715269317362, 0.12335632427919685, 0.12335632427919685, 0.12335632427919685, 0.20934690655904642, 0.20934690655904642, 0.20934690655904642, 0.19287359633556944, 0.19287359633556944, 0.19287359633556944, 0.18656111283734078, 0.18656111283734078, 0.18656111283734078, 0.18623976331242365, 0.18623976331242365, 0.18623976331242365, 0.1920494203044969, 0.1920494203044969, 0.1920494203044969, 0.197458943095834, 0.197458943095834, 0.197458943095834, 0.9169088128650263, 0.9169088128650263, 0.9169088128650263, 0.1583538594966385, 0.1583538594966385, 0.1583538594966385, 0.16522180801994857, 0.16522180801994857, 0.16522180801994857, 0.06544450266057689, 0.06544450266057689, 0.06544450266057689, 0.2082859563945313, 0.2082859563945313, 0.2082859563945313, 0.1563235091368862, 0.1563235091368862, 0.1563235091368862, 0.23813450806687586, 0.23813450806687586, 0.23813450806687586, 0.20147950884256138, 0.20147950884256138, 0.20147950884256138, 0.25048392030808075, 0.25048392030808075, 0.25048392030808075, 0.06695903238705647, 0.06695903238705647, 0.06695903238705647, 0.058332288917134045, 0.058332288917134045, 0.058332288917134045, 0.08418798358006552, 0.08418798358006552, 0.08418798358006552]}, "mutation_prompt": null}
