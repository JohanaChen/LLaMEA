{"id": "bb337afc-ed97-474d-bd2f-149284895b56", "solution": "import numpy as np\n\nclass EcosystemSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))\n        self.personal_best = self.population.copy()\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_score = np.inf\n        self.iterations = self.budget // self.population_size\n    \n    def __call__(self, func):\n        eval_count = 0\n        for _ in range(self.iterations):\n            for i in range(self.population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best[i] = self.population[i].copy()\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = self.population[i].copy()\n            \n            for i in range(self.population_size):\n                # Dynamic neighborhood influence\n                local_best = self._find_local_best(i)\n                inertia_weight = 0.5 + np.random.rand() / 2  # Between 0.5 and 1.0\n                cognitive_component = 2 * np.random.rand(self.dim) * (self.personal_best[i] - self.population[i])\n                social_component = 2 * np.random.rand(self.dim) * (local_best - self.population[i])\n                \n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.population[i] += self.velocities[i]\n                \n                # Ensure the new position is within bounds\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n            \n            if eval_count >= self.budget:\n                break\n        \n        return self.global_best, self.global_best_score\n\n    def _find_local_best(self, index):\n        # Consider a random subset as the neighborhood\n        neighborhood_size = max(1, self.population_size // 10)\n        neighbors = np.random.choice(self.population_size, neighborhood_size, replace=False)\n        local_best = self.population[neighbors[0]]\n        local_best_score = self.personal_best_scores[neighbors[0]]\n        \n        for neighbor in neighbors:\n            if self.personal_best_scores[neighbor] < local_best_score:\n                local_best_score = self.personal_best_scores[neighbor]\n                local_best = self.population[neighbor]\n        \n        return local_best", "name": "EcosystemSwarmOptimizer", "description": "A collaborative swarm exploration algorithm inspired by biological ecosystems that adaptively balances exploration and exploitation using dynamic neighborhood structures.", "configspace": "", "generation": 0, "fitness": 0.11776081363316754, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.15755700618165625, 0.15219006978907001, 0.17597095644318228, 0.2101162441215192, 0.18121676229836392, 0.19047613155239262, 0.19092014956408843, 0.16139494023818768, 0.18125872879553662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04352762335636484, 0.02890159567781847, 0.03229577359288793, 0.07248588626052221, 0.034147634320002895, 0.04199331836348197, 0.037962105039721084, 0.05348623990651136, 0.028815281002153692, 0.014486712005124747, 0.010615130129443262, 0.06112274547437724, 0.01959972157639278, 0.031084494359411075, 0.02181016414882908, 0.022713643297761932, 0.019485723843707947, 0.02072467945469436, 0.983802250694534, 0.9851131198033933, 0.9818112107361384, 0.9859455771534666, 0.9808711667293416, 0.9847644968796405, 0.9807015447140885, 0.9861410408268277, 0.9847003269541629, 0.06368304073075381, 0.06709566424729985, 0.05765125939172522, 0.09252413375412982, 0.07544192273028216, 0.0601596980810597, 0.0742685787905093, 0.0650463397734593, 0.0830017389194252, 0.11975892741512484, 0.1521321740846131, 0.09214154387049589, 0.09367361239040817, 0.11181568900077798, 0.11959472471258503, 0.11373827745244347, 0.11569119256291183, 0.10478896694571449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007631045300540817, 9.999999999998899e-05, 9.999999999998899e-05, 0.00744353144393628, 9.999999999998899e-05, 0.014271288759926004, 0.014961047604938216, 0.018195324387183298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034388703434089507, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03512064612668442, 0.03577933749356632, 0.013253993948849185, 0.005702449116963937, 0.027268930958375126, 0.03138401147162384, 0.005260044008688736, 0.025614825817710907, 0.027199819992086982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024906379606403295, 9.999999999998899e-05, 0.014823869874369677, 0.003333975731411698, 0.00582156581999993, 0.15360226914080521, 0.2318123895765618, 0.16494947348649458, 0.1859325141975382, 0.1767638541759905, 0.18335654842357685, 0.16819311763059208, 0.1708801540422723, 0.18630748081763215, 0.04995771115869685, 0.050069637294830716, 0.04675831672518138, 0.037659844205057746, 0.0516432926720618, 0.03768244946689303, 0.04968797625455956, 0.043487198303536534, 0.03334511486357372, 0.13140350805540912, 0.13329401893770776, 0.1400717708211694, 0.14292745908760918, 0.14219904222963797, 0.1333173168860008, 0.16553343627384043, 0.1284066724613856, 0.1432997806441868, 0.1835612897820984, 0.16790806251424129, 0.17649431623650813, 0.147711114022115, 0.15010100391335868, 0.18239751226755174, 0.15502782981559926, 0.17377774300845283, 0.16363796400061403, 0.10294126778460666, 0.10572955057027011, 0.10015917417110465, 0.095950278664793, 0.09724508912419283, 0.11950538791316323, 0.1026287421798574, 0.10218760837107999, 0.12915373892529858, 0.14186406312495603, 0.14239403466958866, 0.15342484689888858, 0.1343000832905913, 0.13412344184485958, 0.14693784705869561, 0.13308645856496637, 0.13168126388338064, 0.14778609528049091, 0.009909598531635644, 0.10553513500804512, 0.10766630614154693, 0.13124821564361078, 0.08406798853158193, 0.14271383178687358, 0.1388728774026049, 0.05489681511938993, 0.002554085204657386, 0.12693500085551712, 0.14866159960659242, 0.13718320543927076, 0.1442184312313073, 0.14683467402831263, 0.11368506849631543, 0.13808244308607664, 0.12519677729336454, 0.14721987337096576, 0.15031763914962415, 0.1406656816737596, 0.18663359008919567, 0.15879739610778942, 0.08521711767170304, 0.11672585041405759, 0.18388854868747695, 0.18308466164790016, 0.16772835568371103, 0.19259272505251424, 0.1865569755287113, 0.1901154850786142, 0.17060808982366016, 0.19595420616149672, 0.18954975332615864, 0.18805217125240326, 0.17581859979459658, 0.19453081404884442, 0.04473033409047078, 0.03144099257123267, 0.03159446555752676, 0.03743374960581436, 0.038645401300362425, 0.03527652530261727, 0.03262417574023424, 0.040735729151235134, 0.039047989815500284]}, "mutation_prompt": null}
{"id": "c04617b2-3dea-46cc-8b80-7575efd906bc", "solution": "import numpy as np\n\nclass EcosystemSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))\n        self.personal_best = self.population.copy()\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_score = np.inf\n        self.iterations = self.budget // self.population_size\n    \n    def __call__(self, func):\n        eval_count = 0\n        for _ in range(self.iterations):\n            for i in range(self.population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best[i] = self.population[i].copy()\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = self.population[i].copy()\n            \n            for i in range(self.population_size):\n                local_best = self._find_local_best(i)\n                inertia_weight = 0.5 + 0.5 * (self.global_best_score / (1e-8 + np.min(self.personal_best_scores)))  # Adaptive inertia\n                cognitive_component = 1.5 * np.random.rand(self.dim) * (self.personal_best[i] - self.population[i])  # Reduced cognitive influence\n                social_component = 2.5 * np.random.rand(self.dim) * (local_best - self.population[i])  # Increased social influence\n                \n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.population[i] += self.velocities[i]\n                \n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n            \n            if eval_count >= self.budget:\n                break\n        \n        return self.global_best, self.global_best_score\n\n    def _find_local_best(self, index):\n        neighborhood_size = max(1, self.population_size // 5)  # Larger neighborhood\n        neighbors = np.random.choice(self.population_size, neighborhood_size, replace=False)\n        local_best = self.population[neighbors[0]]\n        local_best_score = self.personal_best_scores[neighbors[0]]\n        \n        for neighbor in neighbors:\n            if self.personal_best_scores[neighbor] < local_best_score:\n                local_best_score = self.personal_best_scores[neighbor]\n                local_best = self.population[neighbor]\n        \n        return local_best", "name": "EcosystemSwarmOptimizer", "description": "An adaptive ecosystem-inspired optimizer using dynamic hierarchical structures to balance exploration and exploitation while intelligently adapting inertia weight and neighborhood influence.", "configspace": "", "generation": 1, "fitness": 0.10652230003649521, "feedback": "", "error": "", "parent_id": "bb337afc-ed97-474d-bd2f-149284895b56", "metadata": {"aucs": [0.17800205771851674, 0.11171039909787595, 0.12509887420330745, 0.14922976770745844, 0.149016252069053, 0.14716409137050301, 0.14107590206434673, 0.1311643217784042, 0.12363778915306156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02311951735599993, 0.015792269876958254, 0.03165100806775645, 0.029873829128442053, 0.01936458029053323, 0.02313564150304137, 0.03536347138522633, 0.033305669791647396, 0.02483983921422328, 0.006527853040098619, 0.0046861062957636035, 9.999999999998899e-05, 0.04970733838082453, 0.0029880110492130907, 0.012721432091426288, 0.014763392921912755, 0.003803194792222908, 0.0035236722314495594, 0.9891072797445671, 0.986131019496186, 0.9906560975966664, 0.9898108105609021, 0.9880206655626681, 0.988624520159116, 0.9906706164680019, 0.9882656663351189, 0.9903289379351041, 0.06274794416174423, 0.03657295347982181, 0.04267763698492233, 0.045108807346614266, 0.012860826003117998, 0.044258196232488056, 0.0320990392058893, 0.05180945564460304, 0.06561084103133685, 0.10027683525177622, 0.13367605664268523, 0.0800760342079222, 0.16136884587732547, 0.1323901189030079, 0.11583563955205811, 0.08344563345572464, 0.07744247442607011, 0.0774614354478621, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009827309370774362, 0.00979900887191909, 0.012826512839641535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023099395748864437, 0.0037084552229794676, 0.04029745843025101, 0.0006194115535957945, 0.021511346207430893, 9.999999999998899e-05, 0.030830091826188455, 0.02768650249921889, 0.01726880665786701, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006016866962589629, 9.999999999998899e-05, 0.13663893167344154, 0.15756555760738078, 0.15432700371218855, 0.15859406919717478, 0.15858294368819803, 0.16623371599378656, 0.20215060983950306, 0.13012199593676432, 0.14992135960751007, 0.03961040570886709, 0.051094365220941795, 0.03209855777553783, 0.03266886175302153, 0.02643319314977255, 0.027707432206866223, 0.01998747675933077, 0.04039963137712477, 0.028536913911664352, 0.11896516204308827, 0.14272968243513984, 0.13600251027013088, 0.11858721376200299, 0.15807430340942463, 0.11894319864761416, 0.1480900541172594, 0.1477427773865393, 0.1299921561234958, 0.13121825297763812, 0.13793882576899197, 0.1613932299901244, 0.14219208044534548, 0.14021890616721755, 0.13042735628247903, 0.1390480789625026, 0.17377774300845283, 0.13937259662481205, 0.07292339019380267, 0.07856608215181204, 0.10518002790989645, 0.0913143675739555, 0.08989564100853731, 0.1054539024544332, 0.0844716573700689, 0.10265778195176323, 0.07974302476918838, 0.16391599902065668, 0.1210186905615721, 0.15088987869281467, 0.14848495239434456, 0.12602584178299747, 0.1317011086169375, 0.14463876292249456, 0.1278655608749284, 0.1261963614278906, 0.08985986250668465, 9.999999999998899e-05, 0.025304833269043647, 9.999999999998899e-05, 9.999999999998899e-05, 0.13915095301901725, 0.04533963190131218, 9.999999999998899e-05, 9.999999999998899e-05, 0.15738882399529464, 0.11006000370071378, 0.11979062492902248, 0.12371358857737846, 0.1296413968716481, 0.14365660013042103, 0.14841295737688653, 0.11755159477253452, 0.16031367719644352, 0.1441735045006871, 0.13063086795181877, 0.1605463475313258, 0.08569474449917414, 0.10058379918481442, 0.07980580424266248, 0.18550981637666142, 0.17527393517819712, 0.1817585883031424, 0.1975453258676373, 0.18901939690115854, 0.17470514299385087, 0.1768865850706377, 0.17217301245748817, 0.17071313233675722, 0.18371825228633298, 0.1759244741674968, 0.18788925153004898, 0.03703358860228878, 0.03513917537914435, 0.04101461798498918, 0.027015293023570086, 0.03425093938292756, 0.024488048987251765, 0.021161979253382923, 0.03803354422653826, 0.03182106971326415]}, "mutation_prompt": null}
