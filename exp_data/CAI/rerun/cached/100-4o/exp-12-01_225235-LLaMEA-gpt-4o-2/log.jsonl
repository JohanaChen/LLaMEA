{"id": "578f112c-834d-4819-a5d0-aadd83132d60", "solution": "import numpy as np\n\nclass ChaoticAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.evaluations = 0\n\n    def chaotic_sequence(self, x):\n        r = 3.99  # Chaotic constant\n        return r * x * (1 - x)\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = self.population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        chaotic_param = np.random.rand()\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < fitness[i]:\n                    self.population[i] = trial\n                    fitness[i] = f_trial\n\n                    if f_trial < best_fitness:\n                        best_solution = trial\n                        best_fitness = f_trial\n\n            if self.evaluations >= self.budget:\n                break\n\n            chaotic_param = self.chaotic_sequence(chaotic_param)\n            self.F = 0.4 + chaotic_param * 0.2\n            self.CR = 0.8 + chaotic_param * 0.1\n\n        return best_solution, best_fitness", "name": "ChaoticAdaptiveDifferentialEvolution", "description": "The algorithm combines differential evolution with adaptive learning rates and chaotic sequences to enhance global exploration and convergence.", "configspace": "", "generation": 0, "fitness": 0.36591970413827174, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8217317104812277, 0.7989186038423904, 0.808421124789124, 0.8054298416482326, 0.8096798501965305, 0.7995615589014591, 0.8232169860008279, 0.8072039480048518, 0.8042272354386952, 0.67273113138277, 0.6763185799512641, 0.6648823628922653, 0.6532843429728419, 0.6818589288315456, 0.6857725604087064, 0.6620658093636993, 0.6271587622675374, 0.6597769175898656, 0.17779599065808127, 0.1203482735284277, 0.12253953693594977, 0.11096334905267846, 0.11345732317563673, 0.11603683633433304, 0.11903592330305435, 0.12597298377992194, 0.1350498810500509, 0.10098301584713842, 0.10903229990056884, 0.10859764235392122, 0.10154099947470208, 0.12019286765702875, 0.10910061799345916, 0.10967636698760541, 0.10445673329455407, 0.10572203469489361, 0.8756074323210393, 0.9546548257375922, 0.9278086661480033, 0.9269700363793866, 0.8949442189474548, 0.9439428731627872, 0.9097349327625235, 0.8593303692558126, 0.8766805370646221, 0.5189933502945723, 0.4421241702950338, 0.3965205733889927, 0.49599903405236667, 0.5164021186954622, 0.46838496793023976, 0.4861874719649042, 0.5199872775270732, 0.4699959688494001, 0.7457001266399901, 0.7722017554996, 0.7438738436548353, 0.757232045527859, 0.7550034456498114, 0.7358572582901075, 0.7253543639367714, 0.766432585390686, 0.7808190334579554, 0.21132093004147257, 0.2502858512481847, 0.2570744253820475, 0.23173042972661706, 0.25111443849483917, 0.12223975093023276, 0.19293047891052884, 0.27804850210749055, 0.2153859413826259, 0.18565788702569452, 0.1806002682868948, 0.3511253911307598, 0.22922428893164948, 0.21029650722395443, 0.23366623609814374, 0.229832874537799, 0.19696101433566815, 0.2236595287718437, 0.2695135278525419, 0.2977342221124605, 0.303875711417222, 0.37367337589494576, 0.3225846902887062, 0.3332300099952167, 0.28252355304380794, 0.3040975991102718, 0.32650899450991, 0.4486813085355258, 0.44699881061830615, 0.37789684325886497, 0.4323507455861413, 0.4087663475568427, 0.4288038841969819, 0.47562752491293814, 0.5003121470333922, 0.4616710195871886, 0.12345602549569945, 0.06523386707535761, 0.07416305106923993, 0.23765669794726907, 0.17463343115909358, 0.2323283455931181, 0.08770530758567041, 0.13883371458216576, 0.07965180826818852, 0.284633680200159, 0.24704924599840594, 0.27157740653675255, 0.30392714266593734, 0.3266286835839205, 0.2887112637636299, 0.2641797654683603, 0.27268390656942165, 0.2734914865251865, 0.6896874022826658, 0.7143127438033674, 0.6766952206314627, 0.6779990962489953, 0.6897610703714343, 0.6767547830164136, 0.7161916665927767, 0.6434232113993013, 0.6996715814537664, 0.1050902130492628, 0.09141432384993153, 0.0925210679296038, 0.09366236511524761, 0.10354526448665624, 0.08739503837000318, 0.09742887871724837, 0.10449953026977632, 0.10184731346824516, 0.13805798725062357, 0.1295968605292246, 0.15009758285314123, 0.18452914309029822, 0.15277969573139838, 0.18078745968324472, 0.13480531772292326, 0.15620459587909685, 0.15282746816730175, 0.4088844529724034, 0.39332510381965524, 0.3988865104242181, 0.39360658387577485, 0.4106112690935797, 0.4227214939337419, 0.4193345306517655, 0.4468608500460346, 0.4389967766779216, 0.31303538633187744, 0.2651207120145327, 0.3013540561559279, 0.2881872773503158, 0.29389386319047106, 0.3314213640613748, 0.33676387136745256, 0.33231055710767154, 0.3317104312987589, 0.19821188406837287, 0.18644099392059732, 0.18417528973736352, 0.2062396375571942, 0.20025893047480614, 0.18663997044618896, 0.19700654435314857, 0.20436302727940348, 0.18939571246199216, 0.18685220616396758, 0.23523329794465653, 0.20094444940554623, 0.191015601224094, 0.2561055018719067, 0.20377752711664288, 0.198019788354713, 0.24887562118354256, 0.21095409085015682, 0.7064851469323776, 0.7690908274321102, 0.6751427562576926, 0.7571036545021201, 0.1865238339627111, 0.18608820174999885, 0.6272321251943347, 0.17833875071900906, 0.5599709956021315, 0.731802785697181, 0.16604228381684183, 0.6366940938412453, 0.29315261237153556, 0.5397699770448305, 0.6534862452554013, 0.6918544357262499, 0.14986620518102733, 0.2085440794369392, 0.19613953256057237, 0.18739003823350076, 0.2059757091344281, 0.18955077995269132, 0.1783701121649468, 0.20359407820406672, 0.17949552549308623, 0.17859411850476137, 0.17322319981213563, 0.08074388577863989, 0.08029069305780978, 0.08788467426503432, 0.08044112021624805, 0.09242158877235163, 0.07918842767136847, 0.08192209603662781, 0.08085553276264468, 0.08022781979484572]}, "mutation_prompt": null}
{"id": "01dad9f9-37eb-4e96-9635-ddb594963183", "solution": "import numpy as np\n\nclass ChaoticAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.evaluations = 0\n\n    def chaotic_sequence(self, x):\n        r = 3.99  # Chaotic constant\n        return r * x * (1 - x)\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = self.population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        chaotic_param = np.random.rand()\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR:\n                        trial[j] = mutant[j]\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < fitness[i]:\n                    self.population[i] = trial\n                    fitness[i] = f_trial\n\n                    if f_trial < best_fitness:\n                        best_solution = trial\n                        best_fitness = f_trial\n\n            if self.evaluations >= self.budget:\n                break\n\n            chaotic_param = self.chaotic_sequence(chaotic_param)\n            self.F = 0.4 + chaotic_param * 0.2\n            self.CR = 0.8 + chaotic_param * 0.1\n\n        return best_solution, best_fitness", "name": "ChaoticAdaptiveDifferentialEvolution", "description": "The algorithm combines differential evolution with adaptive learning rates and chaotic sequences to enhance global exploration and convergence.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "578f112c-834d-4819-a5d0-aadd83132d60", "metadata": {"aucs": [0.8217317104812277, 0.7989186038423904, 0.808421124789124, 0.8054298416482326, 0.8096798501965305, 0.7995615589014591, 0.8232169860008279, 0.8072039480048518, 0.8042272354386952, 0.67273113138277, 0.6763185799512641, 0.6648823628922653, 0.6532843429728419, 0.6818589288315456, 0.6857725604087064, 0.6620658093636993, 0.6271587622675374, 0.6597769175898656, 0.17779599065808127, 0.1203482735284277, 0.12253953693594977, 0.11096334905267846, 0.11345732317563673, 0.11603683633433304, 0.11903592330305435, 0.12597298377992194, 0.1350498810500509, 0.10098301584713842, 0.10903229990056884, 0.10859764235392122, 0.10154099947470208, 0.12019286765702875, 0.10910061799345916, 0.10967636698760541, 0.10445673329455407, 0.10572203469489361, 0.8756074323210393, 0.9546548257375922, 0.9278086661480033, 0.9269700363793866, 0.8949442189474548, 0.9439428731627872, 0.9097349327625235, 0.8593303692558126, 0.8766805370646221, 0.5189933502945723, 0.4421241702950338, 0.3965205733889927, 0.49599903405236667, 0.5164021186954622, 0.46838496793023976, 0.4861874719649042, 0.5199872775270732, 0.4699959688494001, 0.7457001266399901, 0.7722017554996, 0.7438738436548353, 0.757232045527859, 0.7550034456498114, 0.7358572582901075, 0.7253543639367714, 0.766432585390686, 0.7808190334579554, 0.21132093004147257, 0.2502858512481847, 0.2570744253820475, 0.23173042972661706, 0.25111443849483917, 0.12223975093023276, 0.19293047891052884, 0.27804850210749055, 0.2153859413826259, 0.18565788702569452, 0.1806002682868948, 0.3511253911307598, 0.22922428893164948, 0.21029650722395443, 0.23366623609814374, 0.229832874537799, 0.19696101433566815, 0.2236595287718437, 0.2695135278525419, 0.2977342221124605, 0.303875711417222, 0.37367337589494576, 0.3225846902887062, 0.3332300099952167, 0.28252355304380794, 0.3040975991102718, 0.32650899450991, 0.4486813085355258, 0.44699881061830615, 0.37789684325886497, 0.4323507455861413, 0.4087663475568427, 0.4288038841969819, 0.47562752491293814, 0.5003121470333922, 0.4616710195871886, 0.12345602549569945, 0.06523386707535761, 0.07416305106923993, 0.23765669794726907, 0.17463343115909358, 0.2323283455931181, 0.08770530758567041, 0.13883371458216576, 0.07965180826818852, 0.284633680200159, 0.24704924599840594, 0.27157740653675255, 0.30392714266593734, 0.3266286835839205, 0.2887112637636299, 0.2641797654683603, 0.27268390656942165, 0.2734914865251865, 0.6896874022826658, 0.7143127438033674, 0.6766952206314627, 0.6779990962489953, 0.6897610703714343, 0.6767547830164136, 0.7161916665927767, 0.6434232113993013, 0.6996715814537664, 0.1050902130492628, 0.09141432384993153, 0.0925210679296038, 0.09366236511524761, 0.10354526448665624, 0.08739503837000318, 0.09742887871724837, 0.10449953026977632, 0.10184731346824516, 0.13805798725062357, 0.1295968605292246, 0.15009758285314123, 0.18452914309029822, 0.15277969573139838, 0.18078745968324472, 0.13480531772292326, 0.15620459587909685, 0.15282746816730175, 0.4088844529724034, 0.39332510381965524, 0.3988865104242181, 0.39360658387577485, 0.4106112690935797, 0.4227214939337419, 0.4193345306517655, 0.4468608500460346, 0.4389967766779216, 0.31303538633187744, 0.2651207120145327, 0.3013540561559279, 0.2881872773503158, 0.29389386319047106, 0.3314213640613748, 0.33676387136745256, 0.33231055710767154, 0.3317104312987589, 0.19821188406837287, 0.18644099392059732, 0.18417528973736352, 0.2062396375571942, 0.20025893047480614, 0.18663997044618896, 0.19700654435314857, 0.20436302727940348, 0.18939571246199216, 0.18685220616396758, 0.23523329794465653, 0.20094444940554623, 0.191015601224094, 0.2561055018719067, 0.20377752711664288, 0.198019788354713, 0.24887562118354256, 0.21095409085015682, 0.7064851469323776, 0.7690908274321102, 0.6751427562576926, 0.7571036545021201, 0.1865238339627111, 0.18608820174999885, 0.6272321251943347, 0.17833875071900906, 0.5599709956021315, 0.731802785697181, 0.16604228381684183, 0.6366940938412453, 0.29315261237153556, 0.5397699770448305, 0.6534862452554013, 0.6918544357262499, 0.14986620518102733, 0.2085440794369392, 0.19613953256057237, 0.18739003823350076, 0.2059757091344281, 0.18955077995269132, 0.1783701121649468, 0.20359407820406672, 0.17949552549308623, 0.17859411850476137, 0.17322319981213563, 0.08074388577863989, 0.08029069305780978, 0.08788467426503432, 0.08044112021624805, 0.09242158877235163, 0.07918842767136847, 0.08192209603662781, 0.08085553276264468, 0.08022781979484572]}, "mutation_prompt": null}
