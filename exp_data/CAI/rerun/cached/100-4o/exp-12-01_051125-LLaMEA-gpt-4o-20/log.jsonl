{"id": "d8017985-2bc9-46d7-9a59-15079575cc81", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20  # Population size for DE\n        self.F = 0.8  # Differential weight factor\n        self.CR = 0.9  # Crossover probability\n        self.T0 = 100  # Initial temperature for SA\n        self.cooling_rate = 0.99  # Cooling down rate for SA\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n    def _mutate(self, pop, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = pop[a] + self.F * (pop[b] - pop[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def _crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def _anneal(self, current_best, new_candidate, current_temp):\n        delta = new_candidate - current_best\n        if delta < 0 or np.random.rand() < np.exp(-delta / current_temp):\n            return True\n        return False\n\n    def __call__(self, func):\n        pop = self._initialize_population()\n        fitness = np.apply_along_axis(func, 1, pop)\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        evals = self.pop_size\n        temp = self.T0\n\n        while evals < self.budget:\n            for idx in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                mutant = self._mutate(pop, idx)\n                trial = self._crossover(pop[idx], mutant)\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[idx]:\n                    pop[idx] = trial\n                    fitness[idx] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n                elif self._anneal(fitness[idx], trial_fitness, temp):\n                    pop[idx] = trial\n                    fitness[idx] = trial_fitness\n\n            temp *= self.cooling_rate\n\n        return best", "name": "HybridDESA", "description": "A hybrid algorithm combining Differential Evolution and Simulated Annealing to balance exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.19198862106850856, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.21740074972336332, 0.2077882482100707, 0.23117181451960644, 0.2667974076302728, 0.2442148787969627, 0.24525078552410073, 0.17078116997866877, 0.2235989056308676, 0.21977243632145949, 0.2157496870046519, 9.999999999998899e-05, 0.21603907588125404, 0.18512369418999175, 0.19986307278049675, 0.20310234586519516, 0.19180616605460254, 0.19880816118501865, 0.19536333747930457, 0.09944646807824553, 0.08480858955057902, 0.08564027231588134, 0.09590542321784656, 0.09479463084191375, 0.09504532759305562, 0.09094408408439447, 0.10148548259104029, 0.094171948664171, 0.08684586605238687, 0.08275712553574233, 0.0951753175086757, 0.08995508003770591, 0.08278961841878296, 0.09145526023385231, 0.07890533287150991, 0.08690590225829042, 0.09346105262353954, 0.9154086337562976, 0.9048824855779315, 0.8904072716798006, 0.9411322656267793, 0.9068258082513376, 0.9578461810554585, 0.9392158594561604, 0.9752274237830159, 0.9782792274996255, 0.16033867502848576, 0.16784852939334982, 0.16567539958812538, 0.169938182593111, 0.17260869372655108, 0.16975531735664462, 0.08558053519180464, 0.08613850428033043, 0.15121722101363122, 0.21064735547015623, 0.19462804732472883, 0.1980045616588525, 0.2070563404251281, 0.20146162294288983, 0.2175202669549432, 0.20659428320683748, 0.24269747164336064, 0.22576370513218202, 0.1658903152910911, 0.135273707855608, 0.14905448278533295, 0.14004007658927187, 0.14781065450310094, 0.15904577011870424, 0.16215446897753305, 0.16813128717624892, 0.16612473267259797, 0.15940685116720255, 0.2071001209367499, 0.1570595242535735, 0.15649329124942246, 0.1791433361568444, 0.1422513723161104, 0.1560103354853356, 0.15266460196696663, 0.15644728839230193, 0.17799970239139473, 0.19463077023166175, 0.18236050128906867, 0.18817490409490234, 0.19469209213048355, 0.18717460125297936, 0.19598598848091675, 0.18423907731337397, 0.1822910765648983, 0.22429462386664445, 0.21609306844528053, 0.20042074378763108, 0.2069927820728108, 0.1931124990181189, 0.2316037595719136, 0.216366896779976, 0.21006738290471105, 0.24242414963154046, 0.11205597350074747, 0.17126341728346328, 0.13307017507003238, 0.15079771747734616, 0.16717894214473794, 0.18218703698546834, 0.1632622378498514, 0.15666090885552963, 0.17950595371792366, 0.12151516598088474, 0.1283064311142712, 0.117273098912824, 0.11841283223056831, 0.1321505619044916, 0.12736507182653223, 0.11655180343692495, 0.12200251515190708, 0.12020523595672061, 0.2125013340195746, 0.20701381174371092, 0.2053050626237577, 0.2357490868759612, 0.24211350413750599, 0.2285443815720931, 0.20897262174479148, 0.23131782776484255, 0.2113673118898649, 0.08170697375125113, 0.0807192819431719, 0.0794912925446819, 0.0820776566391005, 0.08114471342229845, 0.08274157318922648, 0.08701742168381443, 0.10297690576055141, 0.08846344840131237, 0.13657830073183996, 0.14730606803239954, 0.17716998528024397, 0.1544652329207522, 0.15980344338435903, 0.1604747787390305, 0.13274089317606885, 0.19652733141819823, 0.16443426369800695, 0.17269429143406867, 0.18227411267189864, 0.17587010746405563, 0.18837138537294962, 0.17855575325915685, 0.1747116498610629, 0.18282181420729804, 0.18759176134144884, 0.1722472878956427, 0.14738026513853142, 0.1377971306842123, 0.14057529161163707, 0.13794931211324601, 0.14542055552846556, 0.13660961999275079, 0.1462255803284539, 0.15121911518672349, 0.16241353770132794, 0.16506888283618137, 0.1559978320815315, 0.16696821399971518, 0.16796211147998186, 0.1739155748566953, 0.17051484236139258, 0.1620026191267223, 0.1469864616616562, 0.16024101569625304, 0.17074335756376002, 0.17680162025694623, 0.17169002533155564, 0.18540081030480526, 0.18598607911727738, 0.18390277160175894, 0.18163776643149976, 0.1762116324485754, 0.17450533198239804, 0.15693819036127954, 0.2924881916117136, 0.1464452722864127, 0.15954192412387092, 0.16032303744658916, 0.16050607329767264, 0.24316699982084267, 0.15627714887973088, 0.1640890200155376, 0.15436241300152775, 0.1581839709739299, 0.15681479125558817, 0.14160074181734417, 0.14856083535607867, 0.1614514388707614, 0.1862912414967196, 0.16725340394862143, 0.17916413924488916, 0.18275524250893804, 0.18684705397248225, 0.17374609487712855, 0.19546268728007454, 0.18368972471186717, 0.19264590242507418, 0.20004027989292417, 0.18398044935410562, 0.1885342166678362, 0.06650224461820342, 0.0636728711914547, 0.07347577271039607, 0.06388904508916893, 0.07265017650048944, 0.06153419113656833, 0.06354952383382839, 0.07025878498201688, 0.062142521222586566]}, "mutation_prompt": null}
{"id": "4ec10156-cac3-4250-af6e-231d89a1fb05", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 20  # Population size for DE\n        self.F = 0.8  # Differential weight factor\n        self.CR = 0.9  # Crossover probability\n        self.T0 = 100  # Initial temperature for SA\n        self.cooling_rate = 0.99  # Cooling down rate for SA\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n    def _mutate(self, pop, idx):\n        indices = list(range(self.pop_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = pop[a] + self.F * (pop[b] - pop[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def _crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def _anneal(self, current_best, new_candidate, current_temp):\n        delta = new_candidate - current_best\n        if delta < 0 or np.random.rand() < np.exp(-delta / current_temp):\n            return True\n        return False\n\n    def __call__(self, func):\n        pop = self._initialize_population()\n        fitness = np.apply_along_axis(func, 1, pop)\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        evals = self.pop_size\n        temp = self.T0\n\n        while evals < self.budget:\n            for idx in range(self.pop_size):\n                if evals >= self.budget:\n                    break\n\n                mutant = self._mutate(pop, idx)\n                trial = self._crossover(pop[idx], mutant)\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[idx]:\n                    pop[idx] = trial\n                    fitness[idx] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n                elif self._anneal(fitness[idx], trial_fitness, temp):\n                    pop[idx] = trial\n                    fitness[idx] = trial_fitness\n\n            temp *= self.cooling_rate\n\n        return best", "name": "HybridDESA", "description": "A hybrid algorithm combining Differential Evolution and Simulated Annealing to balance exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8017985-2bc9-46d7-9a59-15079575cc81", "metadata": {"aucs": [0.21740074972336332, 0.2077882482100707, 0.23117181451960644, 0.2667974076302728, 0.2442148787969627, 0.24525078552410073, 0.17078116997866877, 0.2235989056308676, 0.21977243632145949, 0.2157496870046519, 9.999999999998899e-05, 0.21603907588125404, 0.18512369418999175, 0.19986307278049675, 0.20310234586519516, 0.19180616605460254, 0.19880816118501865, 0.19536333747930457, 0.09944646807824553, 0.08480858955057902, 0.08564027231588134, 0.09590542321784656, 0.09479463084191375, 0.09504532759305562, 0.09094408408439447, 0.10148548259104029, 0.094171948664171, 0.08684586605238687, 0.08275712553574233, 0.0951753175086757, 0.08995508003770591, 0.08278961841878296, 0.09145526023385231, 0.07890533287150991, 0.08690590225829042, 0.09346105262353954, 0.9154086337562976, 0.9048824855779315, 0.8904072716798006, 0.9411322656267793, 0.9068258082513376, 0.9578461810554585, 0.9392158594561604, 0.9752274237830159, 0.9782792274996255, 0.16033867502848576, 0.16784852939334982, 0.16567539958812538, 0.169938182593111, 0.17260869372655108, 0.16975531735664462, 0.08558053519180464, 0.08613850428033043, 0.15121722101363122, 0.21064735547015623, 0.19462804732472883, 0.1980045616588525, 0.2070563404251281, 0.20146162294288983, 0.2175202669549432, 0.20659428320683748, 0.24269747164336064, 0.22576370513218202, 0.1658903152910911, 0.135273707855608, 0.14905448278533295, 0.14004007658927187, 0.14781065450310094, 0.15904577011870424, 0.16215446897753305, 0.16813128717624892, 0.16612473267259797, 0.15940685116720255, 0.2071001209367499, 0.1570595242535735, 0.15649329124942246, 0.1791433361568444, 0.1422513723161104, 0.1560103354853356, 0.15266460196696663, 0.15644728839230193, 0.17799970239139473, 0.19463077023166175, 0.18236050128906867, 0.18817490409490234, 0.19469209213048355, 0.18717460125297936, 0.19598598848091675, 0.18423907731337397, 0.1822910765648983, 0.22429462386664445, 0.21609306844528053, 0.20042074378763108, 0.2069927820728108, 0.1931124990181189, 0.2316037595719136, 0.216366896779976, 0.21006738290471105, 0.24242414963154046, 0.11205597350074747, 0.17126341728346328, 0.13307017507003238, 0.15079771747734616, 0.16717894214473794, 0.18218703698546834, 0.1632622378498514, 0.15666090885552963, 0.17950595371792366, 0.12151516598088474, 0.1283064311142712, 0.117273098912824, 0.11841283223056831, 0.1321505619044916, 0.12736507182653223, 0.11655180343692495, 0.12200251515190708, 0.12020523595672061, 0.2125013340195746, 0.20701381174371092, 0.2053050626237577, 0.2357490868759612, 0.24211350413750599, 0.2285443815720931, 0.20897262174479148, 0.23131782776484255, 0.2113673118898649, 0.08170697375125113, 0.0807192819431719, 0.0794912925446819, 0.0820776566391005, 0.08114471342229845, 0.08274157318922648, 0.08701742168381443, 0.10297690576055141, 0.08846344840131237, 0.13657830073183996, 0.14730606803239954, 0.17716998528024397, 0.1544652329207522, 0.15980344338435903, 0.1604747787390305, 0.13274089317606885, 0.19652733141819823, 0.16443426369800695, 0.17269429143406867, 0.18227411267189864, 0.17587010746405563, 0.18837138537294962, 0.17855575325915685, 0.1747116498610629, 0.18282181420729804, 0.18759176134144884, 0.1722472878956427, 0.14738026513853142, 0.1377971306842123, 0.14057529161163707, 0.13794931211324601, 0.14542055552846556, 0.13660961999275079, 0.1462255803284539, 0.15121911518672349, 0.16241353770132794, 0.16506888283618137, 0.1559978320815315, 0.16696821399971518, 0.16796211147998186, 0.1739155748566953, 0.17051484236139258, 0.1620026191267223, 0.1469864616616562, 0.16024101569625304, 0.17074335756376002, 0.17680162025694623, 0.17169002533155564, 0.18540081030480526, 0.18598607911727738, 0.18390277160175894, 0.18163776643149976, 0.1762116324485754, 0.17450533198239804, 0.15693819036127954, 0.2924881916117136, 0.1464452722864127, 0.15954192412387092, 0.16032303744658916, 0.16050607329767264, 0.24316699982084267, 0.15627714887973088, 0.1640890200155376, 0.15436241300152775, 0.1581839709739299, 0.15681479125558817, 0.14160074181734417, 0.14856083535607867, 0.1614514388707614, 0.1862912414967196, 0.16725340394862143, 0.17916413924488916, 0.18275524250893804, 0.18684705397248225, 0.17374609487712855, 0.19546268728007454, 0.18368972471186717, 0.19264590242507418, 0.20004027989292417, 0.18398044935410562, 0.1885342166678362, 0.06650224461820342, 0.0636728711914547, 0.07347577271039607, 0.06388904508916893, 0.07265017650048944, 0.06153419113656833, 0.06354952383382839, 0.07025878498201688, 0.062142521222586566]}, "mutation_prompt": null}
