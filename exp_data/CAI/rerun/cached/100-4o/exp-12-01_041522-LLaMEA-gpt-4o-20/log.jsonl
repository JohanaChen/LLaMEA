{"id": "3495de28-1e96-4c64-8cc7-8c1f99fd3de4", "solution": "import numpy as np\n\nclass AdaptiveCMAES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.sigma_initial = 0.3 * (self.upper_bound - self.lower_bound)\n        self.lamda = 4 + int(3 * np.log(dim))\n        self.mu = self.lamda // 2\n        self.weights = np.log(self.mu + 0.5) - np.log(np.arange(1, self.mu + 1))\n        self.weights /= np.sum(self.weights)\n        self.mueff = np.sum(self.weights) ** 2 / np.sum(self.weights ** 2)\n        self.cc = (4 + self.mueff / dim) / (dim + 4 + 2 * self.mueff / dim)\n        self.cs = (self.mueff + 2) / (dim + self.mueff + 5)\n        self.c1 = 2 / ((dim + 1.3) ** 2 + self.mueff)\n        self.cmu = min(1 - self.c1, 2 * (self.mueff - 2 + 1 / self.mueff) / ((dim + 2) ** 2 + self.mueff))\n        self.damps = 1 + 2 * max(0, np.sqrt((self.mueff - 1) / (dim + 1)) - 1) + self.cs\n        self.ps = np.zeros(dim)\n        self.pc = np.zeros(dim)\n        self.B = np.eye(dim)\n        self.D = np.ones(dim)\n        self.C = np.eye(dim)\n        self.eigen_updated = 0\n        self.chiN = np.sqrt(dim) * (1 - 1 / (4 * dim) + 1 / (21 * dim ** 2))\n\n    def __call__(self, func):\n        xmean = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        sigma = self.sigma_initial\n        eval_count = 0\n\n        while eval_count < self.budget:\n            if eval_count + self.lamda > self.budget:\n                break\n\n            arz = np.random.randn(self.lamda, self.dim)\n            ary = arz @ np.diag(self.D)\n            arz = arz @ self.B\n            arx = xmean + sigma * ary\n            arx = np.clip(arx, self.lower_bound, self.upper_bound)\n            arfitness = np.array([func(x) for x in arx])\n            eval_count += self.lamda\n\n            arindex = np.argsort(arfitness)\n            arfitness = arfitness[arindex]\n            xold = xmean\n            xmean = self.weights @ arx[arindex[:self.mu]]\n\n            self.ps = (1 - self.cs) * self.ps + np.sqrt(self.cs * (2 - self.cs) * self.mueff) * (xmean - xold) / sigma\n            hsig = np.linalg.norm(self.ps) / np.sqrt(1 - (1 - self.cs) ** (2 * eval_count / self.lamda)) / self.chiN < (1.4 + 2 / (self.dim + 1))\n            self.pc = (1 - self.cc) * self.pc + hsig * np.sqrt(self.cc * (2 - self.cc) * self.mueff) * (xmean - xold) / sigma\n            artmp = (arx[arindex[:self.mu]] - xold) / sigma\n            self.C = (1 - self.c1 - self.cmu) * self.C + self.c1 * (self.pc @ self.pc.T + (1 - hsig) * self.cc * (2 - self.cc) * self.C) + self.cmu * artmp.T @ (np.diag(self.weights) @ artmp)\n\n            sigma *= np.exp((np.linalg.norm(self.ps) / self.chiN - 1) * self.cs / self.damps)\n\n            if eval_count - self.eigen_updated > self.lamda / (self.c1 + self.cmu) / self.dim / 10:\n                self.eigen_updated = eval_count\n                self.C = np.triu(self.C) + np.triu(self.C, 1).T\n                self.D, self.B = np.linalg.eigh(self.C)\n                self.D = np.sqrt(self.D)", "name": "AdaptiveCMAES", "description": "An adaptive covariance matrix adaptation evolution strategy (CMA-ES) with dynamic restart, leveraging diversity for robust search.", "configspace": "", "generation": 0, "fitness": 0.17472339616000035, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7135469581124747, 0.7964085238388144, 0.8219097890118521, 0.7474802823524367, 0.947842118380049, 0.8790229063399815, 0.6675049660832076, 0.736625693714309, 0.801835233555827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08942101768706856, 0.08385771281907728, 0.05729295009773561, 0.10422632369886231, 0.10307454954450135, 0.0635837562194056, 0.11148390565246569, 0.12618903742410714, 0.09765753130400046, 0.07552503480857309, 0.08272824949545321, 0.01020884958845003, 0.06171354561159348, 0.05564408735488291, 0.04072330422171999, 0.054656621503833214, 0.046197948422872503, 0.041415458085930945, 0.19193346500642616, 0.18862619494210142, 0.0631315825390728, 0.23405175808409828, 0.15900770609154047, 0.12063264142279473, 0.17557600317937594, 0.17202936316607154, 0.9920289319564755, 0.2322352317667824, 0.12500315509974058, 0.013944080455101537, 0.11145319011216581, 0.22688948987594137, 0.09732979507030992, 0.20845469364997993, 0.17677725193186766, 0.14445591069129082, 0.2010283320456705, 0.20252206740001533, 0.06232766892585695, 0.49780578534018016, 0.23317271133088302, 0.10690472298559472, 0.1523927539752623, 0.09286493205151292, 0.16930787036966688, 0.15317707924572987, 0.1318976542284056, 0.14332016118986302, 0.1569601111934631, 0.1406562136547338, 0.13883406984190116, 0.15669510546901333, 0.13150054784571508, 0.13485778514926683, 0.17397503645804846, 9.999999999998899e-05, 0.13122074833060837, 0.13291330834132298, 0.2128066863588468, 0.108099968635478, 0.09369770871951644, 0.025863274901398503, 0.11031324045455804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07794358510502952, 0.056401229002771114, 0.12999476972060875, 9.999999999998899e-05, 0.045810360526397975, 0.010419224191132392, 0.018638086447720026, 0.03441713265324631, 0.015411740592427337, 0.11790553753853805, 0.05432377614689632, 0.05006256068221937, 0.10714780956427317, 0.10473414325263641, 9.999999999998899e-05, 0.12275354350251977, 0.2176748335889721, 0.16620203531397015, 0.23837427380407694, 0.2655251611390027, 0.07967840428643791, 0.051173140248582105, 0.13870164533593887, 0.009422090999422816, 0.08643205359070849, 0.08571305816372554, 0.09463591812191519, 0.5497287025847759, 0.5472516885153844, 0.4747203508456974, 0.39382417112568135, 0.44522022861558763, 0.36384296861545906, 0.37257055417960505, 0.38820907802770566, 0.35744500924650424, 0.09046567734067334, 0.11040604409252697, 0.13371476705651497, 0.08473317670329272, 0.1023435481375704, 0.08601160052035173, 0.10788327131359765, 0.09324570003404131, 0.08297398589138161, 0.12239079966009248, 0.1775456632668092, 0.1527113224705119, 0.24128093446327104, 0.24509846195892981, 0.24944852234810555, 0.13493438068755836, 0.1440758336937622, 0.14871444720529803, 0.23736311512245523, 0.2813224590694975, 0.17816334187763827, 0.2479889321338512, 0.3453891642692313, 0.21190689110718408, 0.2019805246651637, 0.2405421753895699, 0.3173765832426909, 0.1586444246275065, 0.17474635611006362, 0.2159287918868481, 0.3434480957793541, 0.1852605156394913, 0.13965457188708874, 0.16127170988530848, 0.18289928156644097, 0.09499911094170621, 0.21053916899734837, 0.2261328694119391, 0.19148810898104707, 0.20417789419265242, 0.21247262666378675, 0.2018854585691492, 0.19655577729017115, 0.19257507738540613, 0.18758069264642208, 0.198904784116968, 0.1989586882333062, 0.19524188850176205, 0.20531111968526727, 0.18952483121679864, 0.1900336001900268, 0.19467223777155385, 0.19115636056502816, 0.1981077978995437, 0.1599261864120981, 0.14855078415158718, 0.1054883989155746, 0.20081773412131776, 0.17046241536098494, 0.16893143024531365, 0.08687410020432107, 0.46354154547337056, 0.15424305836475616, 0.14359411781659914, 0.1042616366425575, 0.11129574849560142, 0.09227641376339069, 0.3678199016573077, 0.1942931319298674, 0.15635135806736722, 0.09510713993911246, 0.06586928075099985, 0.17373224703155032, 0.20170626397351177, 0.1803247237494381, 0.18537217842248888, 0.18119625822238727, 0.19206420322705742, 0.1901637767134976, 0.20876119629749723, 0.19118935115184554, 0.07547303973984854, 0.07920300438567429, 0.07452197088484713, 0.075080059371461, 0.08089853958059834, 0.08480635758513522, 0.07885609413279726, 0.08543494197140133, 0.07872060775465561]}, "mutation_prompt": null}
{"id": "fb71d4d5-05fc-400f-9326-6a21502a9671", "solution": "import numpy as np\n\nclass AdaptiveCMAES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.sigma_initial = 0.3 * (self.upper_bound - self.lower_bound)\n        self.lamda = 4 + int(3 * np.log(dim))\n        self.mu = self.lamda // 2\n        self.weights = np.log(self.mu + 0.5) - np.log(np.arange(1, self.mu + 1))\n        self.weights /= np.sum(self.weights)\n        self.mueff = np.sum(self.weights) ** 2 / np.sum(self.weights ** 2)\n        self.cc = (4 + self.mueff / dim) / (dim + 4 + 2 * self.mueff / dim)\n        self.cs = (self.mueff + 2) / (dim + self.mueff + 5)\n        self.c1 = 2 / ((dim + 1.3) ** 2 + self.mueff)\n        self.cmu = min(1 - self.c1, 2 * (self.mueff - 2 + 1 / self.mueff) / ((dim + 2) ** 2 + self.mueff))\n        self.damps = 1 + 2 * max(0, np.sqrt((self.mueff - 1) / (dim + 1)) - 1) + self.cs\n        self.ps = np.zeros(dim)\n        self.pc = np.zeros(dim)\n        self.B = np.eye(dim)\n        self.D = np.ones(dim)\n        self.C = np.eye(dim)\n        self.eigen_updated = 0\n        self.chiN = np.sqrt(dim) * (1 - 1 / (4 * dim) + 1 / (21 * dim ** 2))\n\n    def __call__(self, func):\n        xmean = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        sigma = self.sigma_initial\n        eval_count = 0\n\n        while eval_count < self.budget:\n            if eval_count + self.lamda > self.budget:\n                break\n\n            arz = np.random.randn(self.lamda, self.dim)\n            ary = arz @ np.diag(self.D)\n            arz = arz @ self.B\n            arx = xmean + sigma * ary\n            arx = np.clip(arx, self.lower_bound, self.upper_bound)\n            arfitness = np.array([func(x) for x in arx])\n            eval_count += self.lamda\n\n            arindex = np.argsort(arfitness)\n            arfitness = arfitness[arindex]\n            xold = xmean\n            xmean = self.weights @ arx[arindex[:self.mu]]\n\n            self.ps = (1 - self.cs) * self.ps + np.sqrt(self.cs * (2 - self.cs) * self.mueff) * (xmean - xold) / sigma\n            hsig = np.linalg.norm(self.ps) / np.sqrt(1 - (1 - self.cs) ** (2 * eval_count / self.lamda)) / self.chiN < (1.4 + 2 / (self.dim + 1))\n            self.pc = (1 - self.cc) * self.pc + hsig * np.sqrt(self.cc * (2 - self.cc) * self.mueff) * (xmean - xold) / sigma\n            artmp = (arx[arindex[:self.mu]] - xold) / sigma\n            self.C = (1 - self.c1 - self.cmu) * self.C + self.c1 * (self.pc @ self.pc.T + (1 - hsig) * self.cc * (2 - self.cc) * self.C) + self.cmu * artmp.T @ (np.diag(self.weights) @ artmp)\n\n            sigma *= np.exp((np.linalg.norm(self.ps) / self.chiN - 1) * self.cs / self.damps)\n\n            if eval_count - self.eigen_updated > self.lamda / (self.c1 + self.cmu) / self.dim / 10:\n                self.eigen_updated = eval_count\n                self.C = np.triu(self.C) + np.triu(self.C, 1).T\n                self.D, self.B = np.linalg.eigh(self.C)\n                self.D = np.sqrt(self.D)", "name": "AdaptiveCMAES", "description": "An adaptive covariance matrix adaptation evolution strategy (CMA-ES) with dynamic restart, leveraging diversity for robust search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3495de28-1e96-4c64-8cc7-8c1f99fd3de4", "metadata": {"aucs": [0.7135469581124747, 0.7964085238388144, 0.8219097890118521, 0.7474802823524367, 0.947842118380049, 0.8790229063399815, 0.6675049660832076, 0.736625693714309, 0.801835233555827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08942101768706856, 0.08385771281907728, 0.05729295009773561, 0.10422632369886231, 0.10307454954450135, 0.0635837562194056, 0.11148390565246569, 0.12618903742410714, 0.09765753130400046, 0.07552503480857309, 0.08272824949545321, 0.01020884958845003, 0.06171354561159348, 0.05564408735488291, 0.04072330422171999, 0.054656621503833214, 0.046197948422872503, 0.041415458085930945, 0.19193346500642616, 0.18862619494210142, 0.0631315825390728, 0.23405175808409828, 0.15900770609154047, 0.12063264142279473, 0.17557600317937594, 0.17202936316607154, 0.9920289319564755, 0.2322352317667824, 0.12500315509974058, 0.013944080455101537, 0.11145319011216581, 0.22688948987594137, 0.09732979507030992, 0.20845469364997993, 0.17677725193186766, 0.14445591069129082, 0.2010283320456705, 0.20252206740001533, 0.06232766892585695, 0.49780578534018016, 0.23317271133088302, 0.10690472298559472, 0.1523927539752623, 0.09286493205151292, 0.16930787036966688, 0.15317707924572987, 0.1318976542284056, 0.14332016118986302, 0.1569601111934631, 0.1406562136547338, 0.13883406984190116, 0.15669510546901333, 0.13150054784571508, 0.13485778514926683, 0.17397503645804846, 9.999999999998899e-05, 0.13122074833060837, 0.13291330834132298, 0.2128066863588468, 0.108099968635478, 0.09369770871951644, 0.025863274901398503, 0.11031324045455804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07794358510502952, 0.056401229002771114, 0.12999476972060875, 9.999999999998899e-05, 0.045810360526397975, 0.010419224191132392, 0.018638086447720026, 0.03441713265324631, 0.015411740592427337, 0.11790553753853805, 0.05432377614689632, 0.05006256068221937, 0.10714780956427317, 0.10473414325263641, 9.999999999998899e-05, 0.12275354350251977, 0.2176748335889721, 0.16620203531397015, 0.23837427380407694, 0.2655251611390027, 0.07967840428643791, 0.051173140248582105, 0.13870164533593887, 0.009422090999422816, 0.08643205359070849, 0.08571305816372554, 0.09463591812191519, 0.5497287025847759, 0.5472516885153844, 0.4747203508456974, 0.39382417112568135, 0.44522022861558763, 0.36384296861545906, 0.37257055417960505, 0.38820907802770566, 0.35744500924650424, 0.09046567734067334, 0.11040604409252697, 0.13371476705651497, 0.08473317670329272, 0.1023435481375704, 0.08601160052035173, 0.10788327131359765, 0.09324570003404131, 0.08297398589138161, 0.12239079966009248, 0.1775456632668092, 0.1527113224705119, 0.24128093446327104, 0.24509846195892981, 0.24944852234810555, 0.13493438068755836, 0.1440758336937622, 0.14871444720529803, 0.23736311512245523, 0.2813224590694975, 0.17816334187763827, 0.2479889321338512, 0.3453891642692313, 0.21190689110718408, 0.2019805246651637, 0.2405421753895699, 0.3173765832426909, 0.1586444246275065, 0.17474635611006362, 0.2159287918868481, 0.3434480957793541, 0.1852605156394913, 0.13965457188708874, 0.16127170988530848, 0.18289928156644097, 0.09499911094170621, 0.21053916899734837, 0.2261328694119391, 0.19148810898104707, 0.20417789419265242, 0.21247262666378675, 0.2018854585691492, 0.19655577729017115, 0.19257507738540613, 0.18758069264642208, 0.198904784116968, 0.1989586882333062, 0.19524188850176205, 0.20531111968526727, 0.18952483121679864, 0.1900336001900268, 0.19467223777155385, 0.19115636056502816, 0.1981077978995437, 0.1599261864120981, 0.14855078415158718, 0.1054883989155746, 0.20081773412131776, 0.17046241536098494, 0.16893143024531365, 0.08687410020432107, 0.46354154547337056, 0.15424305836475616, 0.14359411781659914, 0.1042616366425575, 0.11129574849560142, 0.09227641376339069, 0.3678199016573077, 0.1942931319298674, 0.15635135806736722, 0.09510713993911246, 0.06586928075099985, 0.17373224703155032, 0.20170626397351177, 0.1803247237494381, 0.18537217842248888, 0.18119625822238727, 0.19206420322705742, 0.1901637767134976, 0.20876119629749723, 0.19118935115184554, 0.07547303973984854, 0.07920300438567429, 0.07452197088484713, 0.075080059371461, 0.08089853958059834, 0.08480635758513522, 0.07885609413279726, 0.08543494197140133, 0.07872060775465561]}, "mutation_prompt": null}
