{"id": "6b9c7efc-bd6a-4322-ab21-b85206ab9d80", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.4\n        self.social_weight = 1.4\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.global_best_position = None\n        self.best_fitness = float('inf')\n\n    def evaluate_population(self, func):\n        fitness = np.apply_along_axis(func, 1, self.positions)\n        return fitness\n\n    def update_velocities_positions(self):\n        r1, r2 = np.random.rand(2)\n        for i in range(self.population_size):\n            cognitive_component = self.cognitive_weight * r1 * (self.personal_best_positions[i] - self.positions[i])\n            social_component = self.social_weight * r2 * (self.global_best_position - self.positions[i])\n            self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                  cognitive_component + social_component)\n            self.positions[i] += self.velocities[i]\n            self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            fitness = self.evaluate_population(func)\n            evaluations += self.population_size\n            \n            for i in range(self.population_size):\n                if fitness[i] < self.best_fitness:\n                    self.best_fitness = fitness[i]\n                    self.global_best_position = self.positions[i]\n\n                if fitness[i] < np.apply_along_axis(func, 1, self.personal_best_positions[[i]])[0]:\n                    self.personal_best_positions[i] = self.positions[i]\n            \n            self.update_velocities_positions()\n\n        return self.global_best_position, self.best_fitness", "name": "AdaptiveSwarmOptimization", "description": "Adaptive Swarm Optimization (ASO) blends swarm intelligence with adaptive learning to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.17437741765341913, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.4567916619325211, 0.4499396592262398, 0.4430371454932126, 0.452682235340195, 0.42918297011526896, 0.4129405233989014, 0.20687947242122595, 0.17003189241020267, 0.339362321651298, 9.999999999998899e-05, 0.02378933777690051, 9.999999999998899e-05, 0.0033947432281354883, 0.006569071573999774, 9.999999999998899e-05, 0.02749753063997562, 9.999999999998899e-05, 9.999999999998899e-05, 0.11601624198476479, 0.036854811737793924, 0.06673377912343981, 0.0863777371575738, 0.061741371711556026, 0.11091972522222493, 0.06895519741776157, 0.09905616796586314, 0.05128096500746693, 0.07601524287802308, 0.023535464419495056, 0.032980270076051754, 0.06925185360979558, 0.09934833239504837, 0.0884136937997424, 0.09183920058633266, 0.041300166489778745, 0.050609664160574885, 0.9784408684727904, 0.8541307364746348, 0.9725240568361746, 0.8748583857271726, 0.9781675196689621, 0.9184658234789126, 0.9779266603839737, 0.9631211785107846, 0.9637636151221284, 0.2606688526952117, 0.2191663820438896, 9.999999999998899e-05, 0.25283005492142663, 0.12974808252150616, 0.13038495042668397, 0.10180670786212465, 0.0715406388822557, 0.23118246520309071, 0.16443673090684574, 0.1475550900281638, 0.12893834238251, 0.21156254276217545, 0.13620892459021794, 0.18495107621989348, 0.11907691478972593, 0.11395055931584341, 0.22049363604216443, 0.16867009774626718, 0.1065778692596101, 9.999999999998899e-05, 0.07762321556984919, 0.09260726798484853, 0.03735828787948903, 0.09079538338961834, 0.13062254644728832, 0.13332459716431, 0.14344942240640646, 0.057644501380757496, 0.09702324891799641, 0.12746145494684902, 0.09172147562462396, 0.13329182160418207, 0.11238582300106936, 0.009765350427763608, 0.09025352722884761, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003936708666965938, 9.999999999998899e-05, 9.999999999998899e-05, 0.05026030222371647, 0.027577213636012177, 0.059805641310190394, 0.08828721556973629, 0.03380412923142162, 0.008676932135000981, 0.09854719992767624, 0.04787208402492893, 0.033192623219659434, 9.999999999998899e-05, 9.999999999998899e-05, 0.051024464653186774, 0.041274868047025626, 0.032839467794649524, 9.999999999998899e-05, 0.009182381338467938, 9.999999999998899e-05, 0.03962529179224061, 0.05985035160157581, 9.999999999998899e-05, 0.053679662672185824, 0.00354752409701109, 0.06366398478135438, 0.002639097234847898, 0.09252110425697879, 9.999999999998899e-05, 0.06396920156065866, 0.14746782131649694, 0.29665135304988066, 0.41143952725881805, 0.4262628361126567, 0.20379178146536892, 0.3143698729490023, 0.3546809844284161, 0.17012800706740216, 0.3411595850588137, 0.08723107553204501, 0.06643344398998452, 0.06118673846711786, 0.06220743648307381, 0.059866271979773455, 0.09540404544397008, 0.08261782913827187, 0.09874128771417767, 0.0739802154923167, 0.17279448467150582, 0.17986256423849667, 0.1928345321233894, 0.3172088054178145, 0.24803640466848786, 0.17180689229819546, 0.17692725320095615, 0.22211369002047476, 0.18785261084963545, 0.2769654483951931, 0.24735870168170226, 0.2791705754747573, 0.23431494662125008, 0.1921047063920689, 0.22127570627150595, 0.201969447364426, 0.24912164389239388, 0.18196892335320647, 0.19689292820411952, 0.19400609977768268, 0.23021993377646133, 0.1234008194246573, 0.14783359016825837, 0.15195584650505445, 0.22039267929413142, 0.23992760288090242, 0.133149539944726, 0.2142693175119449, 0.14135611807573678, 0.20355594692686896, 0.2111694281495604, 0.19616823641871706, 0.18498532962956205, 0.18275337374515854, 0.17354180977779743, 0.17711387290731895, 0.192026983682284, 0.18239038394809437, 0.14859576910839822, 0.1780887351005549, 0.19089787287426674, 0.18692128607802483, 0.18409017390575189, 0.1815731470394525, 0.17832659766140935, 0.44353319933624646, 0.1621783995112943, 0.11286783285013136, 0.656966076002429, 0.1939854034468711, 0.18887395344936175, 0.1379078819109869, 0.15243956238635814, 0.5536222307008185, 0.4148488816699868, 0.20700448144454275, 0.07291901150602698, 0.45394489912917935, 0.1080280153801143, 0.10669670666787456, 0.18224800238147354, 0.10300853704875212, 0.13080329278580138, 0.1903749545685527, 0.2032432764197637, 0.2054329220109803, 0.21345036526440886, 0.1778395030522304, 0.18202683690022714, 0.1718856233718019, 0.1812264123552828, 0.1747245898195281, 0.08915082172670541, 0.08387254617957385, 0.07370361060151531, 0.07460221731448125, 0.05938889340346687, 0.05574719864975619, 0.06722679127996833, 0.07818664536572995, 0.08096917687046445]}, "mutation_prompt": null}
{"id": "66291cbb-3adc-4d60-a5b1-17773630b203", "solution": "import numpy as np\n\nclass ImprovedAdaptiveSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_weight = 1.4\n        self.social_weight = 1.4\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.global_best_position = None\n        self.best_fitness = float('inf')\n        self.damping_factor = 0.99  # New damping factor\n\n    def evaluate_population(self, func):\n        fitness = np.apply_along_axis(func, 1, self.positions)\n        return fitness\n\n    def update_velocities_positions(self):\n        r1, r2 = np.random.rand(2)\n        for i in range(self.population_size):\n            cognitive_component = self.cognitive_weight * r1 * (self.personal_best_positions[i] - self.positions[i])\n            social_component = self.social_weight * r2 * (self.global_best_position - self.positions[i])\n            self.velocities[i] = (self.inertia_weight * self.velocities[i] +\n                                  cognitive_component + social_component)\n            self.velocities[i] *= self.damping_factor  # Apply damping\n            self.positions[i] += self.velocities[i]\n            self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n        self.inertia_weight *= 0.995  # Gradually reduce inertia weight\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            fitness = self.evaluate_population(func)\n            evaluations += self.population_size\n            \n            for i in range(self.population_size):\n                if fitness[i] < self.best_fitness:\n                    self.best_fitness = fitness[i]\n                    self.global_best_position = self.positions[i]\n\n                if fitness[i] < np.apply_along_axis(func, 1, self.personal_best_positions[[i]])[0]:\n                    self.personal_best_positions[i] = self.positions[i]\n            \n            self.update_velocities_positions()\n\n        return self.global_best_position, self.best_fitness", "name": "ImprovedAdaptiveSwarmOptimization", "description": "Improved Adaptive Swarm Optimization (IASO) introduces dynamic adjustment of weights and adaptive velocity damping to enhance exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.17992310161973937, "feedback": "", "error": "", "parent_id": "6b9c7efc-bd6a-4322-ab21-b85206ab9d80", "metadata": {"aucs": [0.5303034474061631, 0.31051451420505105, 0.4397598518496515, 0.5597378640800132, 0.6375295195922006, 0.4532505055636308, 0.46356427328270045, 0.1667200864476588, 0.3778674594904621, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05896813225811348, 9.999999999998899e-05, 9.999999999998899e-05, 0.036100890526857055, 9.999999999998899e-05, 0.10280773746834126, 0.03567261853024006, 0.06265845499665079, 0.1150693113455663, 0.05021298708576727, 0.10051534066696555, 0.09756369012400012, 0.0937997183790138, 0.0493569932031358, 0.09509542832201401, 0.035203604238169484, 0.039756883839467294, 0.08133364559765754, 0.029660602779409073, 0.0347731272116385, 0.0924223401614288, 0.028898346675841236, 0.01430300664359041, 0.9783809586614217, 0.8413960343316021, 0.9732347810151413, 0.9332852258195786, 0.9781578112185474, 0.9164568051388352, 0.9721931501388057, 0.9630860567707252, 0.9634651404563566, 0.2384957885641803, 0.21107893180422388, 9.999999999998899e-05, 0.20151129157073366, 0.14390075147775838, 0.14217513358388878, 0.08515912773975798, 0.11819190098163512, 0.15329345655322069, 0.21175694584108629, 0.1665232696244593, 0.12921684732648153, 0.21356429026690338, 0.16808544908694345, 0.18788146002848594, 0.0986903537770717, 0.1183190699266079, 0.3215707820905134, 0.3082605356658451, 0.11417197435568482, 9.999999999998899e-05, 0.08318629498285246, 0.12091999774507167, 0.08802128072422744, 9.999999999998899e-05, 0.12015476826728322, 0.13260335403620505, 0.21438577606716425, 0.003863681312118894, 0.10041009670481693, 0.14238829590724877, 0.09195874801245973, 0.12233933382117157, 0.19328098486437062, 0.0002035596393307193, 0.09912735269081441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025563541722927963, 0.0148526910619321, 9.999999999998899e-05, 0.06008342660224952, 0.023627147139578808, 0.0801520793445748, 0.06528825926211235, 0.0010218009464204592, 0.041555991850676044, 0.16517282531553024, 0.05260234382855966, 0.03954489286300544, 9.999999999998899e-05, 9.999999999998899e-05, 0.09288420695982036, 0.043755259145393355, 0.05878945292808513, 9.999999999998899e-05, 0.021681891484439775, 0.04586976553233113, 0.05950341963264705, 0.0726581759000352, 9.999999999998899e-05, 0.12568518237408266, 0.05655176852061883, 0.009491648563672794, 0.004391852836878041, 0.11501446925448344, 9.999999999998899e-05, 0.06617049630443128, 0.1455940267678485, 0.36912780519584765, 0.42454255511142325, 0.4170349108427205, 0.20349226028383682, 0.4073325515479579, 0.4070808585762622, 0.13084646489060991, 0.33863587077057533, 0.09846880947751602, 0.06017560190985294, 0.06290685487478243, 0.059297316589346116, 0.03702925894414821, 0.08686936683915958, 0.07635726550222321, 0.0984376825425135, 0.06669732432116982, 0.17657299663729298, 0.23807664073906354, 0.17589317893000644, 0.27959837994811587, 0.23098988325734493, 0.21833796181236087, 0.17848569882238496, 0.12783212875705685, 0.2087786645889128, 0.21405185980058206, 0.18928093064121276, 0.2609342951706636, 0.25179626629131047, 0.15044859929724552, 0.1911002620990172, 0.20163164164681624, 0.24759984782178757, 0.2850533413709485, 0.18912985411769545, 0.16171213120540362, 0.1477216474076296, 0.1675997384601542, 0.09381211051912619, 0.21288178702583438, 0.15043636702885255, 0.2598002237398165, 0.15572565479600564, 0.20034019376203338, 0.18160862357118568, 0.18567664090347558, 0.21431958678140528, 0.19924536269620208, 0.14589082637526352, 0.23421315382676233, 0.2095037010587878, 0.18300644039416514, 0.1895338920698838, 0.1898001466377356, 0.16305261484051992, 0.20196387745456346, 0.2184625946966292, 0.17101522161304294, 0.1761751886394115, 0.17809965740099087, 0.1807171738110246, 0.3644672299628525, 0.1674026850440179, 0.11285413076379414, 0.7628980623043125, 0.19598365785723182, 0.1857297868553861, 0.14050357440901984, 0.15714899995807607, 0.48196429236848315, 0.5693328997999053, 0.20183645017580443, 0.07330429010505235, 0.1489853890530083, 0.1080789644019664, 0.14556740281816383, 0.1820078247172311, 0.1038467000141935, 0.1534869081004161, 0.1788264150393386, 0.19387351583903323, 0.21503838589322044, 0.19393454387892062, 0.1960853674211155, 0.19178405578526203, 0.18197972392618134, 0.21350219404619852, 0.19619064388891283, 0.096441651709816, 0.0739693489804677, 0.06613015404371303, 0.0799291468915655, 0.07787243419223833, 0.07153474511911595, 0.06950932744578497, 0.07181140498185468, 0.059864048681012916]}, "mutation_prompt": null}
