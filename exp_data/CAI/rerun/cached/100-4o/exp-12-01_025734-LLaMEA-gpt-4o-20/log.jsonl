{"id": "e6049600-af3a-49e1-82b9-672cee28f319", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F_min, self.F_max = 0.5, 0.9\n        self.CR_min, self.CR_max = 0.1, 0.9\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Adaptive parameter setting\n                F = np.random.uniform(self.F_min, self.F_max)\n                CR = np.random.uniform(self.CR_min, self.CR_max)\n\n                # Mutation and crossover\n                parents = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[parents]\n                mutant = x1 + F * (x2 - x3)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n                \n                # Crossover\n                trial = np.copy(population[i])\n                crossover_mask = np.random.rand(self.dim) < CR\n                trial[crossover_mask] = mutant[crossover_mask]\n                \n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                \n                if evaluations >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDE", "description": "Adaptive Differential Evolution with Self-Adaptive Control Parameters for efficient exploration and exploitation across diverse landscapes.", "configspace": "", "generation": 0, "fitness": 0.23152924038969724, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6998376932213293, 0.6789978998930273, 0.6716357694718527, 0.6802177331296765, 0.6888024946889408, 0.7018272768386231, 0.7018340824724296, 0.6852147080741819, 0.6709735356886377, 0.44480574446708276, 0.42641607913040924, 0.413167160108018, 0.39813312232073395, 0.40435378924075305, 0.40179950896818273, 0.4244803309993832, 0.4525249113963956, 0.427244291195338, 0.18954485611646354, 0.13981016733761042, 0.16255914382573178, 0.15530541235451112, 0.16012840035737985, 0.1508967883339889, 0.17001304248420912, 0.16861738160363526, 0.14876841395382268, 0.14707030803839605, 0.1347369268336539, 0.127229984522775, 0.1428483789014201, 0.14516877618101875, 0.13830344691892515, 0.1388860387656028, 0.11573086407868505, 0.14685624070108372, 0.932861392095468, 0.9579972836627272, 0.9671730464212303, 0.931426587139783, 0.9394837278209016, 0.9503246239300178, 0.9684833652611091, 0.9563833081248324, 0.9434152479633642, 0.24318360524772498, 0.22285276462666093, 0.2572760423798349, 0.2207503003194239, 0.23954912017941032, 0.27345320375411686, 0.24357116118898547, 0.2047289529124462, 0.2597129922911827, 0.26409600089435226, 0.22070283072253605, 0.21459856133611888, 0.28277219521905517, 0.30217794660476216, 0.2704386422266907, 0.24703388719394648, 0.2851127194162132, 0.27084411404869013, 0.13599293295603643, 0.14406594530711736, 0.14820441981685384, 0.1489760315241323, 0.14687796339983072, 0.15503236562357248, 0.14949276496149777, 0.1475898584698636, 0.1270054094311196, 0.1265189850214803, 0.09603725967720889, 0.15648440104889982, 0.14483050125918706, 0.14073450246220032, 0.1469685669295392, 0.13564119288417043, 0.13527615479463617, 0.15011365342669492, 9.999999999998899e-05, 0.0024620201686397225, 0.005979177687485349, 0.011809506980210105, 0.004439037378502375, 0.003426562545855827, 0.0045088024413351135, 9.999999999998899e-05, 0.003802785171606593, 0.08079692105436354, 0.06677011241798259, 0.11625458263777488, 0.09610454476286578, 0.07058611093908917, 0.08125289000550018, 0.09967389338395538, 0.08848240631673066, 0.13196722529819382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023227838728904215, 9.999999999998899e-05, 0.00031624429016885447, 0.00018513429955002714, 9.999999999998899e-05, 0.07669033844272832, 0.10918745533391683, 0.10410639728204574, 0.10260598973378032, 0.09536170961745882, 0.11096886565392594, 0.08544190262864881, 0.09368004416606379, 0.10372311695148706, 0.4400124450426707, 0.4668741816651133, 0.4405321239549169, 0.44924953863039496, 0.4541244962879548, 0.425205477642398, 0.4683972069175868, 0.4292040869944461, 0.43536707249997464, 0.0903722530081581, 0.10064948209591129, 0.09000768988929375, 0.08155410866348489, 0.08278251345778409, 0.078533067693219, 0.08780847125568858, 0.078878668193888, 0.09803726838274873, 0.1421089984389664, 0.1365880244911989, 0.1682511675473778, 0.13506348230087983, 0.15815020543310188, 0.13720346963369778, 0.14357991779038948, 0.16864079494484596, 0.14340627012338814, 0.2481836178599406, 0.2591200932329347, 0.2616830504807848, 0.24819464681671688, 0.2629961991205906, 0.2605062713236088, 0.26866570989552374, 0.2893337784302876, 0.28189040695391754, 0.17797699049304572, 0.18121381754985988, 0.1860844503006268, 0.17645094039292508, 0.16289849122615763, 0.1785362535291397, 0.18840994804855926, 0.19071997408215258, 0.1955160946097736, 0.1892709094954893, 0.22025074525726662, 0.17065627871324285, 0.20184093691837957, 0.1755123950102201, 0.18439536378008592, 0.18584686262589056, 0.18538191948569283, 0.18443761311186313, 0.1942805531527917, 0.18886293640564977, 0.19654792598567683, 0.18188355924495558, 0.203093414780953, 0.24216511869745538, 0.2062450474862607, 0.19994961336639172, 0.19711049653545953, 0.19327351096811285, 0.26342064966193635, 0.18407920360046215, 0.26171777551802244, 0.17537386135556643, 0.33567673594378367, 0.18508508094167542, 0.16259384475883476, 0.21522019968836614, 0.20349357784896582, 0.2036519367608356, 0.1946960231506617, 0.24220079400066719, 0.17700301830921594, 0.17528448730909785, 0.2774505579165554, 0.23273066386334518, 0.376698311074239, 0.17878777772385224, 0.1780724285137656, 0.18719218431533602, 0.1788772596579683, 0.17367487158461992, 0.20074539598997754, 0.17895062303682918, 0.1692289696008722, 0.18872648318650187, 0.0741949602416091, 0.0790026636972414, 0.0772737919193307, 0.07256970680391095, 0.06989639917471269, 0.06587324765545421, 0.06786415774478705, 0.06709137078525795, 0.07125469644019355]}, "mutation_prompt": null}
{"id": "6041006d-a63a-4681-922e-67003de65c2f", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F_min, self.F_max = 0.5, 0.9\n        self.CR_min, self.CR_max = 0.1, 0.9\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.pop_size\n        best_idx = np.argmin(fitness)\n        best = population[best_idx].copy()\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                # Adaptive parameter setting with chaotic dynamics\n                F = self.F_min + (self.F_max - self.F_min) * np.abs(np.sin(evaluations))\n                CR = self.CR_min + (self.CR_max - self.CR_min) * np.abs(np.cos(evaluations))\n\n                parents = np.random.choice(self.pop_size, 3, replace=False)\n                x1, x2, x3 = population[parents]\n                mutant = x1 + F * (x2 - x3)\n                mutant = np.clip(mutant, self.bounds[0], self.bounds[1])\n                \n                trial = np.copy(population[i])\n                crossover_mask = np.random.rand(self.dim) < CR\n                trial[crossover_mask] = mutant[crossover_mask]\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best = trial.copy()\n                \n                if evaluations >= self.budget:\n                    break\n\n        return best, fitness[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Adaptive Differential Evolution by introducing chaotic dynamics and elitism to boost exploration and convergence efficiency.", "configspace": "", "generation": 1, "fitness": 0.2552402052893173, "feedback": "", "error": "", "parent_id": "e6049600-af3a-49e1-82b9-672cee28f319", "metadata": {"aucs": [0.6464167073245091, 0.686805110192793, 0.6891520951915828, 0.6774657880535029, 0.6889005586758438, 0.7033598824536751, 0.7123894743552062, 0.6959353524322662, 0.7136494485080759, 0.43888277557969746, 0.47841553770995293, 0.47883945597482347, 0.41833638592930567, 0.4441365860478329, 0.4598206815523094, 0.4534388870685031, 0.4474038025953234, 0.43431682071372013, 0.1355417202382554, 0.14883337076939274, 0.1388712812778614, 0.1320771819275457, 0.13172079712279228, 0.13778820239496947, 0.1275885654754524, 0.12864661471796446, 0.14405166924810842, 0.1117073568309459, 0.1170564830433305, 0.133141409755411, 0.1301101376771001, 0.11997714610986732, 0.1157033840439774, 0.11814193511164539, 0.12317338794845345, 0.11852788412128579, 0.9673798725389641, 0.9518995655410649, 0.9603412013135129, 0.9452923680373718, 0.948635398721757, 0.9484994005244041, 0.9397976366510026, 0.9529107046745939, 0.9557597492009625, 0.28165326471479013, 0.24961822511605714, 0.2737521046626906, 0.24838492503659304, 0.2769093162086993, 0.27707987396439626, 0.2996517911889618, 0.27733478409983325, 0.28301975593362494, 0.39100585637894514, 0.4444040150329054, 0.2676142557646999, 0.45184457097719677, 0.5041666181310389, 0.4982726348959071, 0.5470080769094281, 0.4381183550863268, 0.44461726923471456, 0.161943804627118, 0.17908848719266357, 0.14737367892985986, 0.14737562207785415, 0.1552240509456858, 0.14445994225185277, 0.16885287008700112, 0.16109827560023093, 0.1516572755582547, 0.11486631396719071, 0.18677453271781863, 0.1380727104820516, 0.18408573340784629, 0.15147553543035197, 0.15613068463242818, 0.15352938082172518, 0.16272449295547664, 0.1491364767489134, 0.057270064345633864, 0.051170994124011715, 0.04590050431784909, 0.04566301023718988, 0.04865256419827746, 0.03776813489273645, 0.05199019492172996, 0.05008998107841511, 0.06576503828427083, 0.15784347903706675, 0.1607301036926092, 0.16994612998720882, 0.1370838747378289, 0.14219750309069445, 0.15371026369124463, 0.18624545300270623, 0.17033702122979888, 0.19905032368826114, 0.008379431544705218, 0.020755296347332086, 0.006948096682940164, 0.02872456249022981, 0.000600623868283634, 0.007165070664756246, 0.0015761575130515126, 0.019643754320671558, 0.021128097149543335, 0.11556287768224394, 0.12170825779473704, 0.12345162274923283, 0.13991170531157038, 0.1275068464538952, 0.12458450730139103, 0.13264693706170183, 0.11914080306858343, 0.1255893122602625, 0.45440641927824843, 0.46141134308191034, 0.47000777567559315, 0.47325178529181, 0.45926347343308493, 0.49680185481720884, 0.48353337738286395, 0.4605066921002259, 0.47166505104854595, 0.09967609528668486, 0.09242094707450743, 0.10634004815205811, 0.10014645522597387, 0.07721067757655276, 0.08387631815349927, 0.08235908347123655, 0.07554152639956024, 0.10951608449608063, 0.16626910997063427, 0.1368026927905146, 0.1540488308263961, 0.15400870491772056, 0.16117558842019664, 0.1394107491828217, 0.13412624886358449, 0.13846460031797092, 0.17062293023599173, 0.2649314594591893, 0.29024445457173076, 0.2856993955071473, 0.2711521337491818, 0.25936799281671985, 0.28896273569558206, 0.2871729160449329, 0.29823700671399656, 0.30008979200051444, 0.20273125127706226, 0.19833716176290972, 0.19604329855315172, 0.19906790387345175, 0.18830935929545478, 0.18227724340724405, 0.2094700766255584, 0.2157049756017504, 0.2175799865376813, 0.20450133108851032, 0.20383050514831114, 0.1840054796522842, 0.16532985261892696, 0.182591419222894, 0.18328032836135688, 0.22119812006232287, 0.19850768996847312, 0.2070385136930798, 0.20566828137980164, 0.18864104847781538, 0.18938274517541098, 0.18844800534175643, 0.17639413996142683, 0.21911548220504196, 0.18977075966555057, 0.1881615984979741, 0.1931835398767181, 0.4175744834938654, 0.34469991221306273, 0.33430174889825504, 0.22292218579950973, 0.2786507143339909, 0.24922720345018334, 0.21172348443081734, 0.1912120395224205, 0.34005792626118025, 0.2657583009208654, 0.18734912515449964, 0.3534121624790685, 0.18089122148119352, 0.3112496665770895, 0.24599661032396503, 0.20288668734115223, 0.20169438210939994, 0.4244633694283291, 0.178089085103177, 0.2011228914793688, 0.17440386769446792, 0.1738562208240816, 0.19582060746184238, 0.18063211401776602, 0.18707415866823163, 0.17620002973569282, 0.18131394135068157, 0.07486560863637937, 0.06929766286778505, 0.07585205959660468, 0.069477157416439, 0.0743000072361405, 0.0745881038957894, 0.07584454756288983, 0.087377046270672, 0.06480162512258103]}, "mutation_prompt": null}
