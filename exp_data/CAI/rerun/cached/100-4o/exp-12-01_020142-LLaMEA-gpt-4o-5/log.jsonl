{"id": "07da7d74-bbf7-41ad-adff-ffc8fa9fe5cf", "solution": "import numpy as np\n\nclass MemeticDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=50, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F  # Differential weight\n        self.CR = CR  # Crossover probability\n        self.bounds = (-5.0, 5.0)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def _initialize_population(self):\n        lower, upper = self.bounds\n        return np.random.uniform(lower, upper, (self.pop_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        fitness = np.apply_along_axis(func, 1, population)\n        return fitness\n\n    def _select_parents(self, population, fitness):\n        indices = np.random.choice(self.pop_size, 3, replace=False)\n        p1, p2, p3 = population[indices]\n        return p1, p2, p3\n\n    def _crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.rand() < self.CR or i == np.random.randint(self.dim):\n                trial[i] = mutant[i]\n        return trial\n\n    def _local_search(self, candidate, func):\n        step_size = 0.01\n        for i in range(self.dim):\n            candidate[i] += step_size * np.random.randn()\n            candidate[i] = np.clip(candidate[i], *self.bounds)\n        return candidate, func(candidate)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = self._evaluate_population(population, func)\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                p1, p2, p3 = self._select_parents(population, fitness)\n                mutant = np.clip(p1 + self.F * (p2 - p3), *self.bounds)\n                trial = self._crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.pop_size):\n                if evaluations < self.budget:\n                    candidate, local_fitness = self._local_search(population[i], func)\n                    evaluations += 1\n                    if local_fitness < fitness[i]:\n                        population[i] = candidate\n                        fitness[i] = local_fitness\n\n                        if local_fitness < self.best_fitness:\n                            self.best_solution = candidate\n                            self.best_fitness = local_fitness\n\n        return self.best_solution, self.best_fitness", "name": "MemeticDifferentialEvolution", "description": "A Memetic Differential Evolution algorithm combining global exploration with local search for efficient convergence.", "configspace": "", "generation": 0, "fitness": 0.17456133359113343, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.37509096194351554, 0.36883337016699647, 0.3346080122243348, 0.4091064474640852, 0.39100014104709613, 0.397981341239943, 0.3667821251794935, 0.38413513368437646, 0.38100224098996416, 0.05960138839127338, 0.058257106601237174, 0.06262477562330937, 0.029299682813959782, 0.04365290042324088, 0.03356322814096635, 0.05501685893507802, 0.05468689917014158, 0.05007968802075624, 0.07664236796320145, 0.075667015254406, 0.07637565326095463, 0.07734676615831027, 0.0760247273781568, 0.08270521848152368, 0.10329859398832908, 0.07411978084433701, 0.08098720869265186, 0.0714900530057172, 0.08218484752382849, 0.08230135419238593, 0.07592570709539503, 0.08570921569196088, 0.07367193490262702, 0.07174138998157342, 0.07401637660799265, 0.07149942730602343, 0.9678893449559821, 0.9398697285556753, 0.8376307414862232, 0.5884443247554889, 0.8713718788579332, 0.8514718970246047, 0.7270320228360728, 0.7914767167998416, 0.7911511781952689, 0.18492119015334307, 0.18409846024812138, 0.14458254442554574, 0.14524150965732863, 0.1494666830970618, 0.17009495983616285, 0.20895919332682167, 0.1869363709074483, 0.21142149594201987, 0.25762948616080483, 0.2233892632475888, 0.20870389790505928, 0.23181840980170587, 0.2711862178383333, 0.25874364296253816, 0.2568633093680288, 0.23869116382744693, 0.32446620218241373, 0.0892481374530234, 0.0891132809498254, 0.09597762978741176, 0.11198703374073071, 0.0927102598292533, 0.1156619121650172, 0.09230482582659427, 0.09467429817950579, 0.10163645780094888, 0.09917474305233931, 0.10430869440896495, 0.1195146371118293, 0.102910746200372, 0.08141023775500889, 0.09573421112212965, 0.10728548674252525, 0.09414126922369359, 0.09253477495130591, 0.01792943034400818, 0.009143489136614558, 0.030487957864469895, 0.0057685069076487405, 0.020070674063940697, 0.012487860377679683, 0.030316781337796028, 0.013291095349346471, 0.012201976614522159, 0.10971899120845341, 0.10921525788883424, 0.10646113579817917, 0.1200917823088059, 0.09957868198733466, 0.11045829827922038, 0.12055800097413216, 0.10033627139092949, 0.09132004864098908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016737497185475014, 0.07706747904189837, 0.07734201578505695, 0.07012820061369873, 0.07641386247980841, 0.06761304663276402, 0.06352061914522278, 0.08153268760732335, 0.0843681250725411, 0.07269524547432105, 0.35129925105369564, 0.3310063678468923, 0.3313822488732956, 0.349124321880977, 0.3393687598709565, 0.3396639130393937, 0.3494288998304953, 0.33609811576601956, 0.35034464320070946, 0.06748693522380977, 0.07939623321186973, 0.08797116500382163, 0.07262214162582337, 0.0649473697777283, 0.07905457975022967, 0.0887830600660422, 0.10500407170425463, 0.07454827852160939, 0.14026085197171034, 0.16911205263443585, 0.15647911822817262, 0.1316372249872778, 0.17676004575628723, 0.14294555986045054, 0.15638689436124553, 0.13749075542747324, 0.13600835449071924, 0.21905567437723839, 0.21104305595670148, 0.21724812603235355, 0.21310327539240048, 0.2069434870077803, 0.21661232202325187, 0.23046141724942193, 0.21737214358602364, 0.22007087170437922, 0.1540163719206954, 0.15992364875451182, 0.15637978233141825, 0.15249446253325571, 0.16584306253482517, 0.14470287343307753, 0.16896216953573107, 0.17960792405498904, 0.1575380995403317, 0.18862689809521316, 0.17817600616095608, 0.1820956790249325, 0.19568495647747897, 0.19075296709280143, 0.18861435729059572, 0.1876734614927249, 0.17960964732508855, 0.1823492662770121, 0.1698408967427968, 0.16673251720759186, 0.16369616594637681, 0.1696835407934616, 0.16031277788813203, 0.1751465266488098, 0.15611743240943565, 0.1557344012786025, 0.17136850128433057, 0.27910581949651836, 0.14642021551596152, 0.15765063480365804, 0.17130182120684534, 0.15216419672927495, 0.2276753133296373, 0.18945490431456402, 0.19077989110294813, 0.1707476338766366, 0.3139679334238995, 0.20333813237099552, 0.21300201737255164, 0.1626322778795506, 0.1716229642939221, 0.17550740083983163, 0.19870150449833468, 0.19622751148487194, 0.3225034479125206, 0.18919967799837667, 0.19405964248659835, 0.17990016474659065, 0.19299520216725452, 0.18881147957439104, 0.18461219656752825, 0.17605308017211574, 0.18090591057719885, 0.18927345444840105, 0.06646744669096571, 0.06275460372342112, 0.06889134633015204, 0.07055894583461308, 0.06965031942492184, 0.07627251384707379, 0.06442628826739183, 0.07333788108047101, 0.07256661683613674]}, "mutation_prompt": null}
{"id": "503d0735-1e4d-41e2-bf9a-a2e28ec4bd54", "solution": "import numpy as np\n\nclass MemeticDifferentialEvolution:\n    def __init__(self, budget, dim, pop_size=50, F=0.8, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F  # Differential weight\n        self.CR = CR  # Crossover probability\n        self.bounds = (-5.0, 5.0)\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def _initialize_population(self):\n        lower, upper = self.bounds\n        return np.random.uniform(lower, upper, (self.pop_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        fitness = np.apply_along_axis(func, 1, population)\n        return fitness\n\n    def _select_parents(self, population, fitness):\n        indices = np.random.choice(self.pop_size, 3, replace=False)\n        p1, p2, p3 = population[indices]\n        return p1, p2, p3\n\n    def _crossover(self, target, mutant):\n        trial = np.copy(target)\n        for i in range(self.dim):\n            if np.random.rand() < self.CR or i == np.random.randint(self.dim):\n                trial[i] = mutant[i]\n        return trial\n\n    def _local_search(self, candidate, func):\n        step_size = 0.01 * (1 - self.best_fitness / np.max([self.best_fitness, 1e-8]))\n        for i in range(self.dim):\n            candidate[i] += step_size * np.random.randn()\n            candidate[i] = np.clip(candidate[i], *self.bounds)\n        return candidate, func(candidate)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = self._evaluate_population(population, func)\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                p1, p2, p3 = self._select_parents(population, fitness)\n                mutant = np.clip(p1 + self.F * (p2 - p3), *self.bounds)\n                trial = self._crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.pop_size):\n                if evaluations < self.budget:\n                    candidate, local_fitness = self._local_search(population[i], func)\n                    evaluations += 1\n                    if local_fitness < fitness[i]:\n                        population[i] = candidate\n                        fitness[i] = local_fitness\n\n                        if local_fitness < self.best_fitness:\n                            self.best_solution = candidate\n                            self.best_fitness = local_fitness\n\n        return self.best_solution, self.best_fitness", "name": "MemeticDifferentialEvolution", "description": "Enhanced Memetic Differential Evolution with adaptive local search step size for better convergence.", "configspace": "", "generation": 1, "fitness": 0.14450970883694433, "feedback": "", "error": "", "parent_id": "07da7d74-bbf7-41ad-adff-ffc8fa9fe5cf", "metadata": {"aucs": [0.38017248076863785, 0.3400142322685, 0.3440052379374149, 0.38547522092179853, 0.4089592989935864, 0.39900031532418, 0.11203028245912561, 0.1154085322710976, 0.08147560071736881, 9.999999999998899e-05, 9.999999999998899e-05, 0.01152470293635266, 0.003267720409158903, 0.003907686716327574, 0.02432030387974138, 0.028829825798779907, 0.011693172559545606, 0.023161983552263177, 0.004096261787770894, 0.01467079663371329, 0.00980428608183559, 0.07600952110327486, 0.07568877186106182, 0.08782475242835974, 0.08398017573795802, 0.0748120041091006, 0.0718495078986836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06161306507029962, 0.07026106604042792, 0.06159984517002015, 0.06762205478625272, 0.06244322158948035, 0.06638624931835035, 0.9808088921215355, 0.962082222723011, 0.9346294289113231, 0.7564037036195178, 0.856063345658483, 0.928653575488622, 0.7848715151366881, 0.832187116771921, 0.8713162964018141, 0.17507809165938304, 0.16282558616440057, 0.17049377100403074, 0.17544610652673143, 0.1624205706571764, 0.16955708365687583, 0.03577220799398895, 0.03193778931609614, 0.032910110683667115, 0.22873948525324317, 0.2171709706584496, 0.2006832006462106, 0.22589474600117732, 0.277216994795888, 0.26013444232495453, 0.2397859808179137, 0.2566664016611828, 0.21529890168721155, 0.10657177895425085, 0.11410762393053664, 0.10044181024979792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09612674136569788, 0.12190574101737817, 0.09164049678746067, 0.13867041889659426, 0.1095275356678983, 0.13029426714726944, 0.08880855379730368, 0.08531548470672712, 0.10109042896568643, 0.09650927382972818, 0.09885298362494599, 0.08189483342663972, 0.0167685350262049, 0.01018826261545569, 0.049921536680462286, 0.02856898893761628, 0.030991823399317053, 0.02032944430315997, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1511770022396538, 0.13513310953079904, 0.14496713276427797, 0.08006651756051475, 0.0563328201523251, 0.06144250163339371, 0.1530250734805939, 0.16254412144931651, 0.11729476291500274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.070071208618118, 0.07789929233621118, 0.07628339198525647, 0.03078936234795182, 0.030619636366662095, 0.028902411244419057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13376135414752754, 0.15756555760738078, 0.14838054695461433, 0.11835455572806985, 0.12101235324761184, 0.12272678648846036, 0.32282856690363637, 0.3518274833423255, 0.3372865714738319, 0.07285251025222328, 0.08155001674089601, 0.07894442086365072, 0.07386614847467188, 0.06505460205642799, 0.07742930313569651, 0.041809398345881155, 0.04777692383110643, 0.041157077487320226, 0.1297247507143695, 0.12939184317586627, 0.13946741114266237, 0.129603959764639, 0.13039181982181414, 0.13077058001404507, 0.12198564390923972, 0.11399226665228301, 0.16188756755780342, 0.12288864337878858, 0.11629904601782304, 0.1613932299901244, 0.1969712835527514, 0.17964901117527565, 0.1825684779914336, 0.23299659591392163, 0.22728323563488284, 0.21728458486365665, 0.08953794628946066, 0.08272218323579195, 0.08419702009373486, 0.15283255967024922, 0.13977397667814462, 0.14996433739113801, 0.15661326011401155, 0.1700229551778537, 0.15104114889646136, 0.11943364695601921, 0.10552804526518689, 0.13345086981233123, 0.1764396878934551, 0.16727956880755557, 0.19953431191033466, 0.169608670655222, 0.1598768401371875, 0.18259098500730775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16176013694520863, 0.16364486807169054, 0.15972442215119464, 0.16045297984620865, 0.15087435490568568, 0.15841796496464922, 0.1685041602305255, 0.20846130611076574, 0.27254643951618795, 0.17248466530754614, 0.1485150065327343, 0.16019473218447033, 0.1070176662487543, 0.11415350724723516, 0.09001020391233017, 0.11040265245322212, 0.10267165755511809, 0.09798130098322022, 0.21750549176903056, 0.13062796918900244, 0.12175223668214763, 0.08572700538253941, 0.10151915257015587, 0.08575406152308973, 0.17895230933259887, 0.18145793859940917, 0.18230209492515825, 0.18205102869870293, 0.16390560698291556, 0.17558183505960756, 0.17029644923682985, 0.17101650841424065, 0.1734721161368873, 0.06317504523716522, 0.06504634352129468, 0.061530324627914856, 0.05170828177395359, 0.07528572263944533, 0.06673510509271796, 0.061918641161115784, 0.06290284744230235, 0.06224120184425197]}, "mutation_prompt": null}
