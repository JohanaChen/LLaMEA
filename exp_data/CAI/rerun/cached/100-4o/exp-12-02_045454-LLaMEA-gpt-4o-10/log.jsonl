{"id": "8492319a-22de-4143-9b06-ae3d2531acf9", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 40\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_bound = (self.upper_bound - self.lower_bound) / 2.0\n        self.inertia_weight = 0.729\n        self.cognitive_coeff = 1.49445\n        self.social_coeff = 1.49445\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.vel_bound, self.vel_bound, (self.pop_size, self.dim))\n        self.personal_best_position = np.copy(self.population)\n        self.personal_best_value = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        while self.evaluation_count < self.budget:\n            for i, particle in enumerate(self.population):\n                fitness_value = func(particle)\n                self.evaluation_count += 1\n\n                if fitness_value < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness_value\n                    self.personal_best_position[i] = particle\n\n                if fitness_value < self.global_best_value:\n                    self.global_best_value = fitness_value\n                    self.global_best_position = particle\n\n            for i, particle in enumerate(self.population):\n                r_p = np.random.rand(self.dim)\n                r_g = np.random.rand(self.dim)\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] +\n                                    self.cognitive_coeff * r_p * (self.personal_best_position[i] - particle) +\n                                    self.social_coeff * r_g * (self.global_best_position - particle))\n                self.velocity[i] = np.clip(self.velocity[i], -self.vel_bound, self.vel_bound)\n                self.population[i] = particle + self.velocity[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n            if self.evaluation_count >= self.budget:\n                break\n            \n            trial_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.evaluation_count >= self.budget:\n                    break\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = np.clip(self.population[a] +\n                                        self.mutation_factor * (self.personal_best_position[b] - self.personal_best_position[c]),\n                                        self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover_mask, mutant_vector, self.population[i])\n                trial_value = func(trial_vector)\n                self.evaluation_count += 1\n                \n                if trial_value < self.personal_best_value[i]:\n                    self.population[i] = trial_vector\n                    self.personal_best_value[i] = trial_value\n                    self.personal_best_position[i] = trial_vector\n\n                    if trial_value < self.global_best_value:\n                        self.global_best_value = trial_value\n                        self.global_best_position = trial_vector\n\n        return self.global_best_value, self.global_best_position", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Differential Evolution to enhance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.21620078321810562, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3972089510172748, 0.443476215511311, 0.473091045975223, 0.4065390402633565, 0.5209622998315491, 0.4987326093610789, 0.484696465135939, 0.4251720815830081, 0.39501261886621286, 0.13296675946222536, 0.1557856450948748, 0.09912167257350013, 0.11753158522510476, 0.028512545122030275, 0.09799540633343129, 0.24682252871867105, 0.06955902935396074, 0.16262308509199497, 0.13010495050512982, 0.11894882772324111, 0.13805208919176037, 0.10059251425262206, 0.07537202752324446, 0.1341399176096304, 0.09871052381592449, 0.09404350750238843, 0.10427816805197931, 0.11380301213656874, 0.1313217807692043, 0.0826451034445177, 0.10272204798530238, 0.08668537836627588, 0.07645786736759397, 0.09715538170927807, 0.08692980691406305, 0.08237094996905348, 0.9734166131250793, 0.9838501936270344, 0.9716620591596176, 0.9725630990778286, 0.9666012717483644, 0.9663243679864063, 0.973950126269033, 0.967776847870865, 0.9844097286187697, 0.2616178879892118, 0.26105136505749815, 0.2809682313956432, 0.2661245409223032, 0.238861389487942, 0.13570586686315533, 0.2809413849321081, 0.33730498236863393, 0.23880495044857375, 0.3201029561943116, 0.4060397901751924, 0.5668274441549617, 0.256509584777316, 0.4384927676732413, 0.30406519077472605, 0.27512547801098, 0.22585240130130646, 0.32184734487297384, 0.1788585652033533, 0.16538390648426593, 0.12396247740865762, 0.10398495562454424, 0.1616955843625132, 0.12826336150156004, 0.1489513146765612, 0.09054149921698296, 0.12354350479795084, 0.15625305784652688, 0.1371621231611032, 0.21463792100979906, 0.1308281497947963, 0.12051967166595423, 0.18415240738475103, 0.11069995536891708, 0.11511965413685266, 0.11742147999437202, 0.014411158230483112, 9.999999999998899e-05, 0.02282763883571992, 0.024535146299297983, 0.028611475761505023, 0.009947430566477511, 9.999999999998899e-05, 0.024197094148113107, 0.039847672651628474, 0.03879189212110756, 0.0925029911152997, 0.09113916018401236, 0.12362742053524711, 0.017210823398058128, 0.097726259821587, 0.057423459040917835, 0.09289602821588028, 0.07287948254129029, 0.015536275634302932, 0.01685455388138457, 0.02705140404610995, 0.04284107027496653, 0.018047562624416424, 0.011156413118177388, 0.07126092535187012, 0.01726251846453286, 0.016433806519493888, 0.03522240736169391, 0.06940658300919422, 0.10622770165903972, 0.09699426780919362, 0.1345827496270542, 0.09430226322072954, 0.07073896081852815, 0.05135263687430902, 0.09083523882955047, 0.4035917688389542, 0.3454219187366244, 0.4173072485037874, 0.39817062675030124, 0.3652316947491082, 0.39507591753272, 0.3959288745535503, 0.377152880885836, 0.3769150576144973, 0.10651666201420162, 0.10510352668695355, 0.10907369506832398, 0.1141517543112146, 0.10581260004381199, 0.08771115466194568, 0.09107833088786899, 0.12748887474887927, 0.0890775719132404, 0.1504740268158834, 0.1949343677406149, 0.16017800219893885, 0.18608811331793973, 0.1848110232672131, 0.1511490576460215, 0.13731758413669592, 0.20468097626716886, 0.20946170643673934, 0.21935732953426257, 0.27148761595346227, 0.23375236919862818, 0.26216072456788564, 0.2827066666604162, 0.3013019047856119, 0.30359575071757494, 0.29805447220946535, 0.28863925643159727, 0.1994938839097059, 0.15612939554667427, 0.19277326038007137, 0.18734252217164993, 0.20043667900064288, 0.18259041702564993, 0.19843989241343452, 0.16561741399472252, 0.18067111191610308, 0.20327775748094112, 0.17175820983737755, 0.19001279815221173, 0.19145224763870838, 0.2056904658204466, 0.21569136747256, 0.20093545073459618, 0.20497205133775764, 0.195650830267031, 0.2016721486959343, 0.193387126548216, 0.18475994358041847, 0.19711941376463216, 0.27341240712388915, 0.21105881569503204, 0.20301439420078882, 0.20416960812598883, 0.19331396212567964, 0.1965125260909183, 0.1680965333825556, 0.1501326311801906, 0.6132798495192097, 0.18863059425588202, 0.19053798872698213, 0.18889734320552432, 0.16854032576134437, 0.5421725705148034, 0.4121473342239389, 0.20907531541612867, 0.15227133476102006, 0.488869881262456, 0.16469818286031057, 0.15510377016130728, 0.20666675485500052, 0.21005438836528956, 0.5393085040190329, 0.18143437078009939, 0.18406680149310428, 0.19452461874387394, 0.1785192808472168, 0.18561077892035094, 0.19860713947643338, 0.20703863096290553, 0.19075409851775849, 0.19640286419474517, 0.08719073972792413, 0.08781120203032566, 0.08457460762048663, 0.08193407786177742, 0.07837118941254828, 0.08269168821920558, 0.08045026955724421, 0.07588729802627892, 0.0888956423356001]}, "mutation_prompt": null}
{"id": "4b2c14bb-4301-4355-b979-6162c6d197dd", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 40\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_bound = (self.upper_bound - self.lower_bound) / 2.0\n        self.inertia_weight = 0.729\n        self.cognitive_coeff = 1.49445\n        self.social_coeff = 1.49445\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.vel_bound, self.vel_bound, (self.pop_size, self.dim))\n        self.personal_best_position = np.copy(self.population)\n        self.personal_best_value = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluation_count = 0\n\n    def __call__(self, func):\n        while self.evaluation_count < self.budget:\n            for i, particle in enumerate(self.population):\n                fitness_value = func(particle)\n                self.evaluation_count += 1\n\n                if fitness_value < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness_value\n                    self.personal_best_position[i] = particle\n\n                if fitness_value < self.global_best_value:\n                    self.global_best_value = fitness_value\n                    self.global_best_position = particle\n\n            for i, particle in enumerate(self.population):\n                r_p = np.random.rand(self.dim)\n                r_g = np.random.rand(self.dim)\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] +\n                                    self.cognitive_coeff * r_p * (self.personal_best_position[i] - particle) +\n                                    self.social_coeff * r_g * (self.global_best_position - particle))\n                self.velocity[i] = np.clip(self.velocity[i], -self.vel_bound, self.vel_bound)\n                self.population[i] = particle + self.velocity[i]\n                self.population[i] = np.clip(self.population[i], self.lower_bound, self.upper_bound)\n\n            if self.evaluation_count >= self.budget:\n                break\n            \n            trial_population = np.copy(self.population)\n            for i in range(self.pop_size):\n                if self.evaluation_count >= self.budget:\n                    break\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = np.clip(self.population[a] +\n                                        self.mutation_factor * (self.personal_best_position[b] - self.personal_best_position[c]),\n                                        self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(crossover_mask):\n                    crossover_mask[np.random.randint(0, self.dim)] = True\n                trial_vector = np.where(crossover_mask, mutant_vector, self.population[i])\n                trial_value = func(trial_vector)\n                self.evaluation_count += 1\n                \n                if trial_value < self.personal_best_value[i]:\n                    self.population[i] = trial_vector\n                    self.personal_best_value[i] = trial_value\n                    self.personal_best_position[i] = trial_vector\n\n                    if trial_value < self.global_best_value:\n                        self.global_best_value = trial_value\n                        self.global_best_position = trial_vector\n            \n            # Adaptive parameters and elitism\n            self.inertia_weight = 0.9 * (1 - self.evaluation_count / self.budget)\n            elite_idx = np.argmin(self.personal_best_value)\n            self.population[elite_idx] = self.global_best_position\n\n        return self.global_best_value, self.global_best_position", "name": "HybridPSO_DE", "description": "Enhanced Hybrid PSO-DE with adaptive parameters and elitism for improved convergence.", "configspace": "", "generation": 1, "fitness": 0.26001694632640926, "feedback": "", "error": "", "parent_id": "8492319a-22de-4143-9b06-ae3d2531acf9", "metadata": {"aucs": [0.6035941045087605, 0.5998873291066453, 0.5894179656600875, 0.6665526684404228, 0.6687083919777743, 0.1878324682687511, 0.6405450906646726, 0.6492178187600137, 0.6414837655930458, 0.4551887894487069, 0.41450138588924534, 0.33995421905484835, 0.394184952896244, 0.321125849533482, 0.3793133084452416, 0.38315430115579885, 0.4095840953035397, 0.41491536188986056, 0.10865301955348428, 0.130456455192815, 0.11244937282080814, 0.10297893001442848, 0.12502376577748253, 0.11995781485299972, 0.11546468402902099, 0.4110422171030125, 0.09547336920460658, 0.12729341111955805, 0.12136414213194058, 0.10129303639087628, 0.10603654038890109, 0.10236309722598602, 0.09515951710322756, 0.11246982755059176, 0.09704093300355165, 0.11443219646510094, 0.9720969814839513, 0.9838565779540744, 0.9685955355988913, 0.9671508058187462, 0.964219317372993, 0.9716131073578627, 0.9779023238049275, 0.9732712220200711, 0.9844097286187697, 0.42958490988702547, 0.46034357208831334, 0.412987342061778, 0.3589486322580536, 0.38003971648209134, 0.4303197322030229, 0.3970071800529613, 0.35622738072566884, 0.4026988023718293, 0.5051839046626255, 0.5561209029396224, 0.19815865868471938, 0.2727959945073132, 0.17808213535445516, 0.6483778631294863, 0.547415125917607, 0.1985334729857975, 0.570034417132707, 0.1801406899841651, 0.1959055656306925, 0.17161362580866568, 0.09543301551717975, 0.18464813457337736, 0.198697272041076, 0.10470830332074033, 0.18085959045567823, 0.16069239095432786, 0.1724475813932177, 0.018267222034630493, 0.17063534096725197, 0.127887778782121, 0.09455954018451251, 0.2008017192342555, 0.17046254565682506, 0.09231381676605777, 0.18578316398051997, 0.012031936299214063, 9.999999999998899e-05, 0.00233519864931242, 0.01791645630010319, 0.0341519629341448, 0.004582650138418964, 0.01535903098667879, 0.048315429609758764, 0.0017450222046858643, 0.08938895435527616, 0.049962837570206475, 0.09961936193900944, 0.07004371152813749, 0.03644632589706365, 0.0382308136351559, 0.06787344327889167, 0.1066445558629262, 0.07688376944762954, 0.03233369407397568, 0.02844278124032429, 0.07082243297678381, 0.0899731936750946, 0.043401201739214246, 0.05524269681215044, 0.05898228742857192, 0.09681251880339348, 0.05264886121574419, 0.1331806964857386, 0.16185776479970648, 0.09859419987136475, 0.12142331333600664, 0.1667708199560518, 0.14804403369642727, 0.05026165746665012, 0.05269218011360666, 0.20439305636368177, 0.45802058200952267, 0.46449652121020446, 0.47784219370470593, 0.46330301094309434, 0.4307165356736081, 0.46695709031605004, 0.4402729436563231, 0.4655096027847003, 0.5034224703653101, 0.10806102226569747, 0.10559961004499396, 0.09665311798258591, 0.0958023478259955, 0.09650475370832134, 0.12033446781146884, 0.11012543980133482, 0.11810610308078862, 0.33801988686883044, 0.3307698982491116, 0.19052762266172052, 0.14783934746905214, 0.17022249287101654, 0.16545274869083226, 0.13242367692297352, 0.21312981256053376, 0.1743093999403793, 0.18924525407544857, 0.3582594408519313, 0.3566940805111767, 0.3876775140351879, 0.3624954031640918, 0.33403212204195676, 0.3235774974113972, 0.3609160212826936, 0.40594855904269045, 0.40843317047627414, 0.21255536709481748, 0.21776469178475677, 0.18786386194145388, 0.25898088111575124, 0.23790082218061293, 0.30147511735411014, 0.23947785580194114, 0.2578382104629987, 0.2597190141425775, 0.22639465050890217, 0.20069572408961933, 0.22562386202040385, 0.19294266697183093, 0.2096322629437669, 0.19540629260218345, 0.22525294386863404, 0.18638442912358244, 0.22239516569555162, 0.20935384885235842, 0.20284314846702423, 0.17749140514801043, 0.19113671728525616, 0.2160215923608192, 0.19955453495008113, 0.21404090789334518, 0.16556928135535132, 0.3670379784239416, 0.19076278047721618, 0.1788367965599713, 0.12339095841565373, 0.6588772323172455, 0.18317774408528553, 0.1874626592117905, 0.1900046423107613, 0.16685840599712431, 0.6757539576525982, 0.5760780635674554, 0.20228372936552574, 0.16726471724064085, 0.5778986434715891, 0.1683308488655112, 0.19387808338867019, 0.20329909607189534, 0.1984873336463432, 0.19094268632240774, 0.1838346263523838, 0.19115740263550662, 0.19953601751836503, 0.19781620768306818, 0.1879897033531409, 0.19710514871953644, 0.19199484249887722, 0.1822297434174487, 0.181216167671978, 0.08490514150426776, 0.08266745810645038, 0.07454903578104355, 0.0821727376860586, 0.0958739509705705, 0.07535085767483418, 0.0876021960040323, 0.09309824022254454, 0.10046186500764032]}, "mutation_prompt": null}
