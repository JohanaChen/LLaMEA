{"id": "1587e57e-4972-431c-aa6f-55391678dcc9", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + int(3 * np.log(dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9 # Crossover probability\n        self.bounds = (-5.0, 5.0)\n        self.evals = 0\n\n    def __call__(self, func):\n        # Initialize population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        self.evals += self.pop_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        while self.evals < self.budget:\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if self.evals >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f_trial = func(trial)\n                self.evals += 1\n\n                # Greedy selection\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n            # Local search on the best individual found\n            for _ in range(self.dim):\n                if self.evals >= self.budget:\n                    break\n                candidate = best + np.random.normal(scale=0.05, size=self.dim)\n                candidate = np.clip(candidate, self.bounds[0], self.bounds[1])\n                f_candidate = func(candidate)\n                self.evals += 1\n                if f_candidate < fitness[best_idx]:\n                    best = candidate\n                    fitness[best_idx] = f_candidate\n\n        return best", "name": "HybridDE", "description": "A hybrid evolution strategy combining differential evolution with local search for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.41585351193323167, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8691148913258255, 0.8764455313737456, 0.869193158667146, 0.5254914176492609, 0.8505495843021658, 0.8889337245972657, 0.8712352605761172, 0.8525721648338813, 0.8508227939030188, 0.8032170600718366, 0.7556644373648981, 0.7979189934844535, 0.75736485498873, 0.7905327674054075, 0.7737909702937689, 0.775034739508399, 0.7773119886173976, 0.779731324141319, 0.5923861817066268, 0.14661942617152368, 0.1486635712087545, 0.1501241521609572, 0.13529243700727023, 0.15256361583479994, 0.159843872473297, 0.15785856875662907, 0.1615636730884875, 0.13527217951438164, 0.266911405208729, 0.13186774133815793, 0.1458755144917846, 0.15441231321773963, 0.11998093119085074, 0.11858121246141251, 0.1372580372442158, 0.1726852394533398, 0.9823282185132277, 0.9684345646238707, 0.976721986697793, 0.9679756294322142, 0.9604878376095496, 0.9749012598663508, 0.9882293087567174, 0.9799162344293507, 0.9717029674742726, 0.6299864365457766, 0.6488081208722065, 0.6650653879080664, 0.3922697873325235, 0.5851220047097639, 0.6669084520003392, 0.6939608930859491, 0.6759739252412602, 0.6571688805084235, 0.9064668393520178, 0.8384844549608091, 0.632721836681916, 0.8860313347697115, 0.8577186217211437, 0.8424138667822559, 0.8309052785876383, 0.8196438801867759, 0.8394932482818579, 0.42469121254201114, 0.5190635440576377, 0.382069955569603, 0.3228315368927981, 0.260133671625316, 0.12709138687450772, 0.44891564275731466, 0.44513221338087317, 0.5375951510521926, 0.31228324441086885, 0.17988464074073673, 0.6096387798656268, 0.40056338177387374, 0.6572073039836269, 0.358468441725481, 0.5139332273993935, 0.648292893236021, 0.3669242718282686, 9.999999999998899e-05, 0.1820615444399446, 0.08555238410132493, 0.3484810622909743, 0.1687955934067049, 0.08314322488144787, 0.42557487481111744, 0.2748213412816938, 0.21397327910485642, 0.4453727630596226, 0.36572474961433266, 0.5203911629894502, 0.2984524350815796, 0.056667829905679534, 0.4581582496297524, 0.70360036078413, 0.5780231250201439, 0.5579206595083249, 0.12266254974601054, 0.2047193735182934, 0.04851285745140854, 0.17131135212522386, 0.20669593130976982, 0.2194359983850842, 0.13782082476202873, 0.21173607099480696, 0.25420380779554885, 0.3814705241406816, 0.3132343819062182, 0.30963273152063076, 0.5124097414952445, 0.39589772678916, 0.4103268370448704, 0.31357538340899593, 0.37768042901729093, 0.31624276183562183, 0.7931718256033593, 0.6456817230950325, 0.7369090295089411, 0.6063177509340689, 0.8064269475471456, 0.7138678932106177, 0.789810175449101, 0.7433627721967481, 0.6654702017413838, 0.17842261070752397, 0.1309717614611451, 0.1848409696144323, 0.12544938337441724, 0.12174649736834109, 0.1357950247703379, 0.10853584517479353, 0.10959377839572604, 0.09209823942700024, 0.15013824610229187, 0.5629050335410326, 0.19569406550195223, 0.2590822240513033, 0.20336328117235503, 0.23825558874253872, 0.20613082369894242, 0.19431828472770463, 0.13407482608624322, 0.46221167915996697, 0.4605309109997259, 0.5154738916706965, 0.4840436105942625, 0.4828022203482848, 0.4587515861197118, 0.48816801168474055, 0.5778036556405897, 0.5044282362496832, 0.28377536433364625, 0.3866457004086167, 0.3310156433885878, 0.3655428592994957, 0.22858889184921216, 0.35350325578203556, 0.35943678668119305, 0.3775925684136935, 0.40083968525951164, 0.197499516712193, 0.1888079975701814, 0.20800747287468457, 0.2185057058705584, 0.2178620969461149, 0.19946081486431444, 0.2275487139181176, 0.18679246844334763, 0.19059245002161385, 0.20131438839154636, 0.24887820172402353, 0.2204794047675106, 0.7034763182996249, 0.20702450856065502, 0.23356509889970067, 0.23424890814180555, 0.20334879315224075, 0.6125824252066413, 0.9058812104993826, 0.8093681122185831, 0.15425760389068743, 0.17138523463215405, 0.2018293062295604, 0.8996659848779704, 0.6336025677947027, 0.7015433226596217, 0.19933962731043497, 0.1554362995588373, 0.21280114727220678, 0.40856444447553875, 0.7541363339905355, 0.16734351820567894, 0.6540400981270275, 0.2112373233845235, 0.12668259846378405, 0.21195636650587568, 0.21145767231024393, 0.1850265708208333, 0.20560844237304998, 0.17504976722036059, 0.17621628197965855, 0.18558288417763213, 0.19529776789529107, 0.18508000907109845, 0.21324497299564693, 0.08113538366465323, 0.0890743307131805, 0.09017667026105736, 0.08052123533165156, 0.09352309102575673, 0.09083038556382528, 0.06831415321158896, 0.0925185094130826, 0.09141328855981423]}, "mutation_prompt": null}
{"id": "6312583a-b1bf-4aff-94be-c9f9cd7a8221", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + int(3 * np.log(dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9 # Crossover probability\n        self.bounds = (-5.0, 5.0)\n        self.evals = 0\n\n    def __call__(self, func):\n        # Initialize population\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        self.evals += self.pop_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        while self.evals < self.budget:\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if self.evals >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f_trial = func(trial)\n                self.evals += 1\n\n                # Greedy selection\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n            # Local search on the best individual found\n            for _ in range(self.dim):\n                if self.evals >= self.budget:\n                    break\n                candidate = best + np.random.normal(scale=0.05, size=self.dim)\n                candidate = np.clip(candidate, self.bounds[0], self.bounds[1])\n                f_candidate = func(candidate)\n                self.evals += 1\n                if f_candidate < fitness[best_idx]:\n                    best = candidate\n                    fitness[best_idx] = f_candidate\n\n        return best", "name": "HybridDE", "description": "A hybrid evolution strategy combining differential evolution with local search for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1587e57e-4972-431c-aa6f-55391678dcc9", "metadata": {"aucs": [0.8691148913258255, 0.8764455313737456, 0.869193158667146, 0.5254914176492609, 0.8505495843021658, 0.8889337245972657, 0.8712352605761172, 0.8525721648338813, 0.8508227939030188, 0.8032170600718366, 0.7556644373648981, 0.7979189934844535, 0.75736485498873, 0.7905327674054075, 0.7737909702937689, 0.775034739508399, 0.7773119886173976, 0.779731324141319, 0.5923861817066268, 0.14661942617152368, 0.1486635712087545, 0.1501241521609572, 0.13529243700727023, 0.15256361583479994, 0.159843872473297, 0.15785856875662907, 0.1615636730884875, 0.13527217951438164, 0.266911405208729, 0.13186774133815793, 0.1458755144917846, 0.15441231321773963, 0.11998093119085074, 0.11858121246141251, 0.1372580372442158, 0.1726852394533398, 0.9823282185132277, 0.9684345646238707, 0.976721986697793, 0.9679756294322142, 0.9604878376095496, 0.9749012598663508, 0.9882293087567174, 0.9799162344293507, 0.9717029674742726, 0.6299864365457766, 0.6488081208722065, 0.6650653879080664, 0.3922697873325235, 0.5851220047097639, 0.6669084520003392, 0.6939608930859491, 0.6759739252412602, 0.6571688805084235, 0.9064668393520178, 0.8384844549608091, 0.632721836681916, 0.8860313347697115, 0.8577186217211437, 0.8424138667822559, 0.8309052785876383, 0.8196438801867759, 0.8394932482818579, 0.42469121254201114, 0.5190635440576377, 0.382069955569603, 0.3228315368927981, 0.260133671625316, 0.12709138687450772, 0.44891564275731466, 0.44513221338087317, 0.5375951510521926, 0.31228324441086885, 0.17988464074073673, 0.6096387798656268, 0.40056338177387374, 0.6572073039836269, 0.358468441725481, 0.5139332273993935, 0.648292893236021, 0.3669242718282686, 9.999999999998899e-05, 0.1820615444399446, 0.08555238410132493, 0.3484810622909743, 0.1687955934067049, 0.08314322488144787, 0.42557487481111744, 0.2748213412816938, 0.21397327910485642, 0.4453727630596226, 0.36572474961433266, 0.5203911629894502, 0.2984524350815796, 0.056667829905679534, 0.4581582496297524, 0.70360036078413, 0.5780231250201439, 0.5579206595083249, 0.12266254974601054, 0.2047193735182934, 0.04851285745140854, 0.17131135212522386, 0.20669593130976982, 0.2194359983850842, 0.13782082476202873, 0.21173607099480696, 0.25420380779554885, 0.3814705241406816, 0.3132343819062182, 0.30963273152063076, 0.5124097414952445, 0.39589772678916, 0.4103268370448704, 0.31357538340899593, 0.37768042901729093, 0.31624276183562183, 0.7931718256033593, 0.6456817230950325, 0.7369090295089411, 0.6063177509340689, 0.8064269475471456, 0.7138678932106177, 0.789810175449101, 0.7433627721967481, 0.6654702017413838, 0.17842261070752397, 0.1309717614611451, 0.1848409696144323, 0.12544938337441724, 0.12174649736834109, 0.1357950247703379, 0.10853584517479353, 0.10959377839572604, 0.09209823942700024, 0.15013824610229187, 0.5629050335410326, 0.19569406550195223, 0.2590822240513033, 0.20336328117235503, 0.23825558874253872, 0.20613082369894242, 0.19431828472770463, 0.13407482608624322, 0.46221167915996697, 0.4605309109997259, 0.5154738916706965, 0.4840436105942625, 0.4828022203482848, 0.4587515861197118, 0.48816801168474055, 0.5778036556405897, 0.5044282362496832, 0.28377536433364625, 0.3866457004086167, 0.3310156433885878, 0.3655428592994957, 0.22858889184921216, 0.35350325578203556, 0.35943678668119305, 0.3775925684136935, 0.40083968525951164, 0.197499516712193, 0.1888079975701814, 0.20800747287468457, 0.2185057058705584, 0.2178620969461149, 0.19946081486431444, 0.2275487139181176, 0.18679246844334763, 0.19059245002161385, 0.20131438839154636, 0.24887820172402353, 0.2204794047675106, 0.7034763182996249, 0.20702450856065502, 0.23356509889970067, 0.23424890814180555, 0.20334879315224075, 0.6125824252066413, 0.9058812104993826, 0.8093681122185831, 0.15425760389068743, 0.17138523463215405, 0.2018293062295604, 0.8996659848779704, 0.6336025677947027, 0.7015433226596217, 0.19933962731043497, 0.1554362995588373, 0.21280114727220678, 0.40856444447553875, 0.7541363339905355, 0.16734351820567894, 0.6540400981270275, 0.2112373233845235, 0.12668259846378405, 0.21195636650587568, 0.21145767231024393, 0.1850265708208333, 0.20560844237304998, 0.17504976722036059, 0.17621628197965855, 0.18558288417763213, 0.19529776789529107, 0.18508000907109845, 0.21324497299564693, 0.08113538366465323, 0.0890743307131805, 0.09017667026105736, 0.08052123533165156, 0.09352309102575673, 0.09083038556382528, 0.06831415321158896, 0.0925185094130826, 0.09141328855981423]}, "mutation_prompt": null}
