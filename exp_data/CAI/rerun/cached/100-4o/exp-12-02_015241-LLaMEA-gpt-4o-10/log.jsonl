{"id": "37524744-ac84-44d2-8005-8d7f17a7e81d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n        \n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n    \n    def evaluate_population(self, func, population):\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations += len(population)\n        return fitness\n    \n    def opposition_based_learning(self, population):\n        opposite_population = self.lower_bound + self.upper_bound - population\n        return opposite_population\n    \n    def mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        \n        mutants = []\n        for i in range(self.population_size):\n            idxs = indices[indices != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = a + self.mutation_factor * (b - c)\n            mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n            mutants.append(mutant)\n        return np.array(mutants)\n    \n    def crossover(self, population, mutants):\n        cross_points = np.random.rand(self.population_size, self.dim) < self.crossover_rate\n        cross_points[np.arange(self.population_size), np.random.randint(0, self.dim, self.population_size)] = True\n        trial_population = np.where(cross_points, mutants, population)\n        return trial_population\n    \n    def select(self, population, trial_population, fitness, trial_fitness):\n        improved = trial_fitness < fitness\n        population[improved] = trial_population[improved]\n        fitness[improved] = trial_fitness[improved]\n        return population, fitness\n    \n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = self.evaluate_population(func, population)\n        \n        while self.evaluations < self.budget:\n            opposite_population = self.opposition_based_learning(population)\n            opposite_fitness = self.evaluate_population(func, opposite_population)\n            for i in range(self.population_size):\n                if opposite_fitness[i] < fitness[i]:\n                    population[i] = opposite_population[i]\n                    fitness[i] = opposite_fitness[i]\n\n            best_idx = np.argmin(fitness)\n            mutants = self.mutate(population, best_idx)\n            trial_population = self.crossover(population, mutants)\n            trial_fitness = self.evaluate_population(func, trial_population)\n            population, fitness = self.select(population, trial_population, fitness, trial_fitness)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Opposition-Based Learning to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.2482380937922447, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.596183550672766, 0.5262527545093973, 0.5864437728509293, 0.5557679502475281, 0.5539381237321264, 0.5406548083260813, 0.603184491174367, 0.5726163216341349, 0.5333724066826232, 0.24991568222625815, 0.26027041171441356, 0.2663923776044568, 0.25886120164032556, 0.26893324986749634, 0.29138865433841554, 0.3143592469885833, 0.2765024051513929, 0.2623774720706855, 0.09708575653745577, 0.10620071538191256, 0.09733052977159318, 0.09388999811791876, 0.08405095979593957, 0.08930174489232101, 0.10895993505674817, 0.10836543408506893, 0.0997082725690911, 0.09090982045845997, 0.09624700001212583, 0.07686045824042542, 0.08516361322692523, 0.08991078400506558, 0.09149290766965146, 0.08005995584283954, 0.08235655316411317, 0.08980460603619211, 0.7290213742894417, 0.7667603590547714, 0.6950390874393941, 0.7406474581261075, 0.7408596003151167, 0.8084161162732635, 0.7105507658569822, 0.8253189581050063, 0.7422639210313358, 0.22000298703895627, 0.2380722034259385, 0.21059573045940594, 0.23511666642593643, 0.24854056298728944, 0.20298538211467254, 0.2166542807996017, 0.2408402875851734, 0.2021193039086111, 0.6160317767993808, 0.5315465572074463, 0.5893937823704778, 0.6031169773651802, 0.5502348474588894, 0.5763824903847384, 0.6367805885740172, 0.505870064636152, 0.5469614484620369, 0.1676594678015596, 0.13319859478273044, 0.14751995336643486, 0.13460735332670593, 0.15661356216212718, 0.14155584994532489, 0.13770616879782993, 0.13316943298259043, 0.15988544953075723, 0.1357139007000856, 0.1962264715158768, 0.15457852748250167, 0.23894369986266184, 0.183105944560761, 0.20310939260106486, 0.25075530846163097, 0.1577513199603522, 0.15871513501208412, 0.10035849598473356, 0.20810429753094373, 0.1738700526510225, 0.14163373604057794, 0.12368277630964497, 0.15940736355874907, 0.15266567989455393, 0.11892860172877917, 0.14300022061232098, 0.2850454582599452, 0.27778984873605517, 0.30373711269610426, 0.26859567399857354, 0.23787333354790463, 0.2780336664152082, 0.29815183139483137, 0.2841903888461157, 0.27491031112885844, 0.05584608619747922, 0.03537063629686377, 0.037458552539673784, 0.0444539217726766, 0.055318365235329514, 0.044833303071075026, 0.05514534379958225, 0.04285939829706131, 0.037668774723585874, 0.14554399095820625, 0.1393450609115533, 0.1410196022479262, 0.15672664046746287, 0.15651385642619442, 0.16314710177302116, 0.13894364122291514, 0.14275626322235424, 0.1531576102040434, 0.45980235562200245, 0.4408113456727466, 0.4949818706135237, 0.4263150723724993, 0.48716048206663465, 0.4573892612418988, 0.48381345851757207, 0.4546796599879993, 0.4687528769945787, 0.08443432239151283, 0.08519774557970683, 0.09127748928656798, 0.09602598536964091, 0.07921948536034173, 0.07899921266826837, 0.09643916232277683, 0.07841480739564866, 0.07828313069473425, 0.15159662636785054, 0.12626543695814596, 0.1412962441781458, 0.13394832948132385, 0.1631482345401366, 0.1454393082226838, 0.12301882495248861, 0.12317514753649228, 0.1474374761307623, 0.2841475891543125, 0.27972666666755597, 0.3042056720545744, 0.28414319803722476, 0.2948177559009074, 0.2967319892956658, 0.30386397642526775, 0.2947704423236909, 0.2903151902586424, 0.21505001616873465, 0.206430998820329, 0.23365534462180693, 0.223309689562589, 0.22806947253799992, 0.21564499648192348, 0.23327359871524367, 0.24069569678227476, 0.22391173576515766, 0.1839210948881812, 0.18132725420229578, 0.17369631244471162, 0.19140972868001593, 0.19232585265421376, 0.18948821723263487, 0.17681714691398553, 0.19360885458012522, 0.18350637866791608, 0.1747134161183791, 0.17127803949814735, 0.17911659052553275, 0.1756506118378306, 0.17643688619653874, 0.18081871390124438, 0.18253681570221636, 0.18150251765669168, 0.176257009766135, 0.44843597326916906, 0.14448876545382427, 0.16084287917272833, 0.4780235247138571, 0.44661517889805447, 0.57678823505544, 0.3198575765622661, 0.39976945223691795, 0.1902711139144151, 0.3106820652507699, 0.2883852994958276, 0.15684740417358467, 0.19677157630679476, 0.2142066998883887, 0.4689100637521001, 0.20307590624628336, 0.19988227299241645, 0.27258908162588447, 0.18055346850380416, 0.19887147223682677, 0.17733119577023715, 0.1830790691001013, 0.2029592055065027, 0.17247973295290553, 0.1782911330503525, 0.18074799311641032, 0.1885227369839284, 0.07674359190991253, 0.06517006448665019, 0.0798858369938964, 0.07288484905500792, 0.07625654475300814, 0.07871243124274585, 0.08239950163259968, 0.07710294870026013, 0.07435455420744674]}, "mutation_prompt": null}
{"id": "082f46c9-8a94-48bd-aec5-df8bdd148d42", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.9\n        self.evaluations = 0\n        \n    def initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n    \n    def evaluate_population(self, func, population):\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations += len(population)\n        return fitness\n    \n    def opposition_based_learning(self, population):\n        opposite_population = self.lower_bound + self.upper_bound - population\n        return opposite_population\n    \n    def mutate(self, population, best_idx):\n        indices = np.arange(self.population_size)\n        np.random.shuffle(indices)\n        \n        mutants = []\n        for i in range(self.population_size):\n            idxs = indices[indices != i]\n            a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n            mutant = a + self.mutation_factor * (b - c)\n            mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n            mutants.append(mutant)\n        return np.array(mutants)\n    \n    def crossover(self, population, mutants):\n        cross_points = np.random.rand(self.population_size, self.dim) < self.crossover_rate\n        cross_points[np.arange(self.population_size), np.random.randint(0, self.dim, self.population_size)] = True\n        trial_population = np.where(cross_points, mutants, population)\n        return trial_population\n    \n    def select(self, population, trial_population, fitness, trial_fitness):\n        improved = trial_fitness < fitness\n        population[improved] = trial_population[improved]\n        fitness[improved] = trial_fitness[improved]\n        return population, fitness\n    \n    def __call__(self, func):\n        population = self.initialize_population()\n        fitness = self.evaluate_population(func, population)\n        \n        while self.evaluations < self.budget:\n            opposite_population = self.opposition_based_learning(population)\n            opposite_fitness = self.evaluate_population(func, opposite_population)\n            for i in range(self.population_size):\n                if opposite_fitness[i] < fitness[i]:\n                    population[i] = opposite_population[i]\n                    fitness[i] = opposite_fitness[i]\n\n            best_idx = np.argmin(fitness)\n            mutants = self.mutate(population, best_idx)\n            trial_population = self.crossover(population, mutants)\n            trial_fitness = self.evaluate_population(func, trial_population)\n            population, fitness = self.select(population, trial_population, fitness, trial_fitness)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Opposition-Based Learning to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37524744-ac84-44d2-8005-8d7f17a7e81d", "metadata": {"aucs": [0.596183550672766, 0.5262527545093973, 0.5864437728509293, 0.5557679502475281, 0.5539381237321264, 0.5406548083260813, 0.603184491174367, 0.5726163216341349, 0.5333724066826232, 0.24991568222625815, 0.26027041171441356, 0.2663923776044568, 0.25886120164032556, 0.26893324986749634, 0.29138865433841554, 0.3143592469885833, 0.2765024051513929, 0.2623774720706855, 0.09708575653745577, 0.10620071538191256, 0.09733052977159318, 0.09388999811791876, 0.08405095979593957, 0.08930174489232101, 0.10895993505674817, 0.10836543408506893, 0.0997082725690911, 0.09090982045845997, 0.09624700001212583, 0.07686045824042542, 0.08516361322692523, 0.08991078400506558, 0.09149290766965146, 0.08005995584283954, 0.08235655316411317, 0.08980460603619211, 0.7290213742894417, 0.7667603590547714, 0.6950390874393941, 0.7406474581261075, 0.7408596003151167, 0.8084161162732635, 0.7105507658569822, 0.8253189581050063, 0.7422639210313358, 0.22000298703895627, 0.2380722034259385, 0.21059573045940594, 0.23511666642593643, 0.24854056298728944, 0.20298538211467254, 0.2166542807996017, 0.2408402875851734, 0.2021193039086111, 0.6160317767993808, 0.5315465572074463, 0.5893937823704778, 0.6031169773651802, 0.5502348474588894, 0.5763824903847384, 0.6367805885740172, 0.505870064636152, 0.5469614484620369, 0.1676594678015596, 0.13319859478273044, 0.14751995336643486, 0.13460735332670593, 0.15661356216212718, 0.14155584994532489, 0.13770616879782993, 0.13316943298259043, 0.15988544953075723, 0.1357139007000856, 0.1962264715158768, 0.15457852748250167, 0.23894369986266184, 0.183105944560761, 0.20310939260106486, 0.25075530846163097, 0.1577513199603522, 0.15871513501208412, 0.10035849598473356, 0.20810429753094373, 0.1738700526510225, 0.14163373604057794, 0.12368277630964497, 0.15940736355874907, 0.15266567989455393, 0.11892860172877917, 0.14300022061232098, 0.2850454582599452, 0.27778984873605517, 0.30373711269610426, 0.26859567399857354, 0.23787333354790463, 0.2780336664152082, 0.29815183139483137, 0.2841903888461157, 0.27491031112885844, 0.05584608619747922, 0.03537063629686377, 0.037458552539673784, 0.0444539217726766, 0.055318365235329514, 0.044833303071075026, 0.05514534379958225, 0.04285939829706131, 0.037668774723585874, 0.14554399095820625, 0.1393450609115533, 0.1410196022479262, 0.15672664046746287, 0.15651385642619442, 0.16314710177302116, 0.13894364122291514, 0.14275626322235424, 0.1531576102040434, 0.45980235562200245, 0.4408113456727466, 0.4949818706135237, 0.4263150723724993, 0.48716048206663465, 0.4573892612418988, 0.48381345851757207, 0.4546796599879993, 0.4687528769945787, 0.08443432239151283, 0.08519774557970683, 0.09127748928656798, 0.09602598536964091, 0.07921948536034173, 0.07899921266826837, 0.09643916232277683, 0.07841480739564866, 0.07828313069473425, 0.15159662636785054, 0.12626543695814596, 0.1412962441781458, 0.13394832948132385, 0.1631482345401366, 0.1454393082226838, 0.12301882495248861, 0.12317514753649228, 0.1474374761307623, 0.2841475891543125, 0.27972666666755597, 0.3042056720545744, 0.28414319803722476, 0.2948177559009074, 0.2967319892956658, 0.30386397642526775, 0.2947704423236909, 0.2903151902586424, 0.21505001616873465, 0.206430998820329, 0.23365534462180693, 0.223309689562589, 0.22806947253799992, 0.21564499648192348, 0.23327359871524367, 0.24069569678227476, 0.22391173576515766, 0.1839210948881812, 0.18132725420229578, 0.17369631244471162, 0.19140972868001593, 0.19232585265421376, 0.18948821723263487, 0.17681714691398553, 0.19360885458012522, 0.18350637866791608, 0.1747134161183791, 0.17127803949814735, 0.17911659052553275, 0.1756506118378306, 0.17643688619653874, 0.18081871390124438, 0.18253681570221636, 0.18150251765669168, 0.176257009766135, 0.44843597326916906, 0.14448876545382427, 0.16084287917272833, 0.4780235247138571, 0.44661517889805447, 0.57678823505544, 0.3198575765622661, 0.39976945223691795, 0.1902711139144151, 0.3106820652507699, 0.2883852994958276, 0.15684740417358467, 0.19677157630679476, 0.2142066998883887, 0.4689100637521001, 0.20307590624628336, 0.19988227299241645, 0.27258908162588447, 0.18055346850380416, 0.19887147223682677, 0.17733119577023715, 0.1830790691001013, 0.2029592055065027, 0.17247973295290553, 0.1782911330503525, 0.18074799311641032, 0.1885227369839284, 0.07674359190991253, 0.06517006448665019, 0.0798858369938964, 0.07288484905500792, 0.07625654475300814, 0.07871243124274585, 0.08239950163259968, 0.07710294870026013, 0.07435455420744674]}, "mutation_prompt": null}
