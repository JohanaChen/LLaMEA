{"id": "1e9cc919-3975-4d22-aef6-95681e3c21b3", "solution": "import numpy as np\n\nclass HybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.HM_size = 10\n        self.HMCR = 0.9\n        self.PAR_min = 0.1\n        self.PAR_max = 0.5\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.HM_size, dim))\n        self.fitness = np.full(self.HM_size, np.inf)\n    \n    def __call__(self, func):\n        eval_count = 0\n        \n        # Initialize harmony memory with initial evaluation\n        for i in range(self.HM_size):\n            self.fitness[i] = func(self.population[i])\n            eval_count += 1\n            if eval_count >= self.budget:\n                return self.best_solution()\n        \n        while eval_count < self.budget:\n            new_harmony = np.zeros(self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < self.HMCR:\n                    idx = np.random.randint(self.HM_size)\n                    new_harmony[j] = self.population[idx, j]\n                    if np.random.rand() < self.PAR_min + (self.PAR_max - self.PAR_min) * eval_count / self.budget:\n                        new_harmony[j] += np.random.uniform(-1, 1) * self.bw\n                else:\n                    new_harmony[j] = np.random.uniform(self.lower_bound, self.upper_bound)\n            \n            # Differential Evolution Crossover\n            if np.random.rand() < 0.2:  # 20% chance to apply DE\n                indices = np.random.choice(self.HM_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F = 0.8\n                new_harmony = x1 + F * (x2 - x3)\n                new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n\n            new_fitness = func(new_harmony)\n            eval_count += 1\n\n            if new_fitness < np.max(self.fitness):\n                worst_idx = np.argmax(self.fitness)\n                self.population[worst_idx] = new_harmony\n                self.fitness[worst_idx] = new_fitness\n        \n        return self.best_solution()\n\n    def best_solution(self):\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "HybridHarmonySearch", "description": "A hybrid harmony search algorithm with adaptive parameter control and differential evolution crossover for robust exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.28073302599632266, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7803148511062682, 0.7831746901982196, 0.7911043570843047, 0.7837636477433249, 0.7457966187700893, 0.7525524171081783, 0.7777523472741605, 0.7965592841139487, 0.7501556080582897, 0.47125101836242533, 0.39314536277589507, 0.28289728293660965, 0.2953239365095527, 0.30467608915784017, 0.3346304047501769, 0.4924106050185979, 0.32858556525087046, 0.39155983885272716, 0.15875616978183593, 0.16306214640315575, 0.191611836786442, 0.1820299815091343, 0.4773124822195014, 0.656796147712509, 0.3943901272241236, 0.4362324184955376, 0.32712736535039866, 0.16329215177111345, 0.1490644189215996, 0.1444291881336801, 0.18599920019338712, 0.2305245751836147, 0.19246204041249004, 0.17192366500781264, 0.1817769428659206, 0.17851549412498002, 0.9516844996463312, 0.9648419567986606, 0.9553943137440035, 0.9505254735422798, 0.9064909136441659, 0.9644502588630645, 0.9772445592090524, 0.9596793832355223, 0.9593345932297047, 0.33303946278084773, 0.38214845382860596, 0.3928302200088789, 0.4111783118146023, 0.4507048749177488, 0.3419959722856737, 0.3850027188989348, 0.40968233951550204, 0.3816111989819214, 0.16889510183965795, 0.13661422949997526, 0.13446963723277605, 0.22360906552215343, 0.2596463078180883, 0.15568669290515869, 0.1785308117028651, 0.11794501830080295, 0.2244324478340325, 0.21063992896008887, 0.17620504861224928, 0.15812840161546993, 0.23553901318293957, 0.15615417118010788, 0.16068570838570218, 0.21606833899145406, 0.17909289265245498, 0.16961213743365022, 0.2918800901769606, 0.09767988516233728, 0.16222353614956186, 0.1124922474017308, 0.12406479712930252, 0.18815284230875062, 0.1802653497535741, 0.14767241631739803, 0.1963155835884236, 9.999999999998899e-05, 0.027520869520810676, 9.999999999998899e-05, 0.039945234061033674, 0.28713679937066716, 0.006225167004285881, 0.06088161974453177, 9.999999999998899e-05, 0.16833351299986565, 0.2725048391853585, 0.1023646112307286, 0.12257442025750387, 0.1345433159832612, 0.2265072625142418, 0.07589074611413182, 0.12116864163280006, 0.11876450656979143, 0.29251977618424685, 0.147984500276936, 0.20900317076224006, 0.15103815505979024, 0.19720504092242663, 0.111840977577356, 0.11052915736609081, 0.11289722633442545, 0.1451971681093175, 0.1119331451786798, 0.09925764061529752, 0.06331476060342955, 0.10022487510662537, 0.12092046651080379, 0.03515895642836364, 0.19784093187213325, 0.11360426640238386, 0.08659640989396244, 0.08803089178599965, 0.5334406330721857, 0.47163209287397945, 0.4544659232077146, 0.45907298224288884, 0.5088619795494972, 0.4926401451894138, 0.4315859884704397, 0.4469544184295351, 0.5042642493408223, 0.14947636814295961, 0.1079017348918937, 0.08480557854559323, 0.1667140031403329, 0.051970527550981416, 0.11959800551164557, 0.06288886361629953, 0.113398269852512, 0.11944069233332844, 0.2680634200042964, 0.18803398324489118, 0.19018005078842493, 0.3404025380922616, 0.11671134215782164, 0.18624467397401911, 0.18112891945071774, 0.1927911481716863, 0.2530910513176057, 0.2176986007454168, 0.23899326573821245, 0.19739313930672608, 0.2351666890373122, 0.1966272005066223, 0.2650714666175281, 0.1835673941689644, 0.3178756054251105, 0.2699753146276085, 0.1889358468274137, 0.27916657716506466, 0.1409036150754629, 0.1633091748924389, 0.13514874137116162, 0.22091939453442677, 0.17051426067852316, 0.279388528782071, 0.15687310008414568, 0.23173479506290506, 0.21010056855753123, 0.22033187616654637, 0.18556938036669512, 0.22873196665271966, 0.24157381725817517, 0.23053454686770602, 0.2173174528101467, 0.27023870781917203, 0.21257309216627096, 0.6833223095616535, 0.2121785000080011, 0.2517147821725715, 0.5687522300215615, 0.24705266135202364, 0.19125805985448519, 0.21033443646474836, 0.22621349809493763, 0.18905266817124033, 0.16733990711696556, 0.1585958054352815, 0.4651398837341828, 0.9279700219180324, 0.18648283144836086, 0.8198331005670405, 0.1593319461802697, 0.1683547429428982, 0.16979633924255655, 0.4207994261388869, 0.20476624088970918, 0.21203878877651683, 0.3592129079779316, 0.4311740908472267, 0.15788399465339753, 0.1128214501748458, 0.751881731871132, 0.22922106900582717, 0.1945254241480926, 0.18296548199842988, 0.24501670308579282, 0.22258315398181816, 0.18104705130005105, 0.23199136247283336, 0.21079804114997702, 0.232403665897986, 0.07924830020760276, 0.1101290481819609, 0.0758399576267057, 0.07011148694148583, 0.09590136103411528, 0.1290673529445916, 0.060694434555483845, 0.1110494156890327, 0.07918369994021901]}, "mutation_prompt": null}
{"id": "d9fedecb-5cf9-4176-8d89-344afa98aeb1", "solution": "import numpy as np\n\nclass HybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.HM_size = 10\n        self.HMCR = 0.9\n        self.PAR_min = 0.1\n        self.PAR_max = 0.5\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.HM_size, dim))\n        self.fitness = np.full(self.HM_size, np.inf)\n    \n    def __call__(self, func):\n        eval_count = 0\n        \n        # Initialize harmony memory with initial evaluation\n        for i in range(self.HM_size):\n            self.fitness[i] = func(self.population[i])\n            eval_count += 1\n            if eval_count >= self.budget:\n                return self.best_solution()\n        \n        while eval_count < self.budget:\n            new_harmony = np.zeros(self.dim)\n            for j in range(self.dim):\n                if np.random.rand() < self.HMCR:\n                    idx = np.random.randint(self.HM_size)\n                    new_harmony[j] = self.population[idx, j]\n                    if np.random.rand() < self.PAR_min + (self.PAR_max - self.PAR_min) * eval_count / self.budget:\n                        self.bw = 0.005 * (self.upper_bound - self.lower_bound)  # Adjusted line\n                        new_harmony[j] += np.random.uniform(-1, 1) * self.bw\n                else:\n                    new_harmony[j] = np.random.uniform(self.lower_bound, self.upper_bound)\n            \n            # Differential Evolution Crossover\n            if np.random.rand() < 0.1 + 0.1 * eval_count / self.budget:  # Adjusted line\n                indices = np.random.choice(self.HM_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F = 0.8\n                new_harmony = x1 + F * (x2 - x3)\n                new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n\n            new_fitness = func(new_harmony)\n            eval_count += 1\n\n            if new_fitness < np.max(self.fitness):\n                worst_idx = np.argmax(self.fitness)\n                self.population[worst_idx] = new_harmony\n                self.fitness[worst_idx] = new_fitness\n        \n        return self.best_solution()\n\n    def best_solution(self):\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "HybridHarmonySearch", "description": "Enhanced Hybrid Harmony Search with dynamic bandwidth adjustment and adaptive DE probability.", "configspace": "", "generation": 1, "fitness": 0.2812867756900276, "feedback": "", "error": "", "parent_id": "1e9cc919-3975-4d22-aef6-95681e3c21b3", "metadata": {"aucs": [0.865548741820488, 0.7845263959464004, 0.8591268195704148, 0.787189957986544, 0.7922967769746498, 0.8270837371745601, 0.8339929042488989, 0.8334479307962401, 0.819221172561522, 0.48178808761210035, 0.352415472215568, 0.449123537045485, 0.484799913641516, 0.45655625533130995, 0.29406929334255005, 0.4184933667258238, 0.3265260217294611, 0.3536728568259234, 0.5545186784385909, 0.26843973112236286, 0.333477016005177, 0.42424490344517696, 0.4208123169753277, 0.4207186035017444, 0.3812849810979234, 0.32783555835052136, 0.5204064295389284, 0.1609359715382579, 0.15276869158450446, 0.16182782616655644, 0.15838104786603435, 0.4702100877123977, 0.16218719506126056, 0.16436327370745074, 0.17380602648456045, 0.17497562567519742, 0.9411594977003651, 0.9581868209431031, 0.9314228049293298, 0.9185163659870706, 0.9151216946707621, 0.9512855440663316, 0.9444320542790562, 0.9454255073338023, 0.9410983179927105, 0.3992941115449129, 0.36645369920490645, 0.41122752359580084, 0.39661581568797044, 0.4696857895440024, 0.43469480778334624, 0.375570124533265, 0.412229375671862, 0.41089245085794535, 0.2172349956856835, 0.09794038643642089, 0.1661697441389608, 0.17361067721727974, 0.13389139773219227, 0.19122002803596538, 0.17444429614403434, 0.2985713596085696, 0.14504850220084353, 0.1409681379633574, 0.38329633925987117, 0.22307762746225768, 0.27282218672351677, 0.1579397723033169, 0.17849604559648802, 0.30484740546867295, 0.2943214691406688, 0.2620713301768628, 0.18930451787731462, 0.08882032508553128, 0.12936409126837678, 0.18421614717374513, 0.17354118341956404, 0.20428041874082004, 0.2126055379502766, 9.999999999998899e-05, 0.13023683076599424, 0.006624300505159608, 9.999999999998899e-05, 0.02536334672250873, 9.999999999998899e-05, 0.04239918727360126, 0.0008228833292838189, 0.0016298034496745606, 9.999999999998899e-05, 0.05189479617718973, 0.24323249251524115, 0.047659553838977575, 0.0752947436112208, 0.20552504082933643, 0.05667323138602409, 0.13811065869152228, 0.1790921217160465, 0.18890320558734486, 0.23288837400413276, 0.22356392705427552, 0.13635332638685993, 0.12081148721442114, 0.0844238889322787, 0.20411783121449967, 0.12984446071341205, 0.14877632148228837, 0.17863640502703915, 0.10485798140316727, 0.1866959479864605, 0.045585141658824435, 0.12352746622803712, 0.2527845213772322, 0.07841275687261917, 0.1317180794192, 0.10252476461871685, 0.1788150496346057, 0.07941307489789573, 0.44798422298587914, 0.4769674078193049, 0.4695099994682346, 0.5179624753016732, 0.509640265731863, 0.45773158732457275, 0.4678831660402435, 0.5056824308771743, 0.49864342836163444, 0.08790031913078944, 0.09691644423126711, 0.05671263817999317, 0.07314289474848357, 0.0726297863102614, 0.08748144625150034, 0.08447654953744532, 0.07135560985962985, 0.12116413411106819, 0.2650301661250941, 0.1917692353861139, 0.1874687675539627, 0.2696719499846112, 0.1679303547144747, 0.2235788482747677, 0.1374196611003894, 0.22912197637753084, 0.21118764379303023, 0.17331023937532786, 0.3038581927592092, 0.18708145957032973, 0.2451786879882082, 0.16569466278243994, 0.21972819380805642, 0.17500001159817435, 0.20962314710164465, 0.14968243602886466, 0.12480593742236956, 0.2005455868789885, 0.21375755795662277, 0.17204027204755512, 0.15708523184335155, 0.1533449668963529, 0.1371968099735441, 0.18661768787272248, 0.1515403096496748, 0.23559912785069237, 0.2807060377416909, 0.20286195963751452, 0.21837214778338698, 0.22164230879082925, 0.20450911099718383, 0.1768925792935454, 0.19340723248115266, 0.22515313147572602, 0.20596172430456638, 0.2123047536993805, 0.25408149644816613, 0.5857329778509959, 0.2511428507168444, 0.19919825196915508, 0.22945447088676396, 0.20579552167003112, 0.20521835367036279, 0.15953290176841106, 0.17244713927003652, 0.18885537874436298, 0.8240871412394781, 0.13656904365403788, 0.8878279481024015, 0.15901696820869127, 0.1735351947459962, 0.1617337474352316, 0.46558972998141857, 0.16880449219103866, 0.42903278133267075, 0.19176366702315795, 0.20805340498633484, 0.4311398386375628, 0.44538403551552175, 0.10501306034017344, 0.3015898785138601, 0.20582280911975537, 0.18333878450114904, 0.218847477752798, 0.2365405780778317, 0.2587128419919028, 0.21513785151103637, 0.233902199339746, 0.24753531099494763, 0.2414870469937821, 0.0741602512497378, 0.07234440411652465, 0.0834420007366522, 0.09593546142697107, 0.11144559070335491, 0.09725901317615537, 0.12243792816887089, 0.04539583696117733, 0.07303053464710463]}, "mutation_prompt": null}
