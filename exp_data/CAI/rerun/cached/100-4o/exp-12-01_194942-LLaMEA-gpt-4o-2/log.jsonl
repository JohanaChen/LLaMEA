{"id": "8979803f-7f88-4724-bc6d-78594113da7e", "solution": "import numpy as np\n\nclass AdaptivePSOWithLevyMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.7\n        self.velocity_max = 0.2 * (self.upper_bound - self.lower_bound)\n\n    def levy_flight(self, L):\n        # Levy distribution\n        return np.random.normal(0, 1, L) / (np.abs(np.random.normal(0, 1, L))**(1/3))\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.velocity_max, self.velocity_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(pop)\n        personal_best_scores = np.array([func(ind) for ind in pop])\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best_position - pop[i]))\n\n                velocities[i] = np.clip(velocities[i], -self.velocity_max, self.velocity_max)\n                pop[i] += velocities[i]\n                pop[i] = np.clip(pop[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.1:  # Apply Levy mutation with 10% probability\n                    pop[i] += self.levy_flight(self.dim)\n\n                score = func(pop[i])\n                eval_count += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = pop[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = pop[i]\n\n                if eval_count >= self.budget:  # Stop if budget is exhausted\n                    break\n\n        return global_best_position, global_best_score", "name": "AdaptivePSOWithLevyMutation", "description": "Adaptive Particle Swarm Optimization with Differential Levy Mutation for enhanced exploration-exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.20298262670956077, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.42203860993449893, 0.42203860993449893, 0.42203860993449893, 0.3856538748359244, 0.3856538748359244, 0.3856538748359244, 0.36301009249662963, 0.36301009249662963, 0.36301009249662963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015889322548015006, 0.0015889322548015006, 0.0015889322548015006, 0.10406949248559938, 0.10406949248559938, 0.10406949248559938, 0.10135197107990512, 0.10135197107990512, 0.10135197107990512, 0.09669218666927337, 0.09669218666927337, 0.09669218666927337, 0.05810688576798928, 0.05810688576798928, 0.05810688576798928, 0.08499431701104954, 0.08499431701104954, 0.08499431701104954, 0.10949436252166744, 0.10949436252166744, 0.10949436252166744, 0.9898715848310218, 0.9898715848310218, 0.9898715848310218, 0.9835225613469886, 0.9835225613469886, 0.9835225613469886, 0.9847380218777118, 0.9847380218777118, 0.9847380218777118, 0.25447966878192374, 0.25447966878192374, 0.25447966878192374, 0.2379327812800005, 0.2379327812800005, 0.2379327812800005, 0.2548331717056982, 0.2548331717056982, 0.2548331717056982, 0.2607834255538032, 0.2607834255538032, 0.2607834255538032, 0.17426217391874177, 0.17426217391874177, 0.17426217391874177, 0.3306502330402603, 0.3306502330402603, 0.3306502330402603, 0.12096636714408282, 0.12096636714408282, 0.12096636714408282, 0.12878711311517477, 0.12878711311517477, 0.12878711311517477, 0.136354785182478, 0.136354785182478, 0.136354785182478, 0.16662039406135576, 0.16662039406135576, 0.16662039406135576, 0.18381612115572266, 0.18381612115572266, 0.18381612115572266, 0.16430221383873178, 0.16430221383873178, 0.16430221383873178, 0.018129458724076564, 0.018129458724076564, 0.018129458724076564, 0.02468435327926677, 0.02468435327926677, 0.02468435327926677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06556463637899035, 0.06556463637899035, 0.06556463637899035, 0.06282816666489666, 0.06282816666489666, 0.06282816666489666, 0.06057275609287771, 0.06057275609287771, 0.06057275609287771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07872860929562486, 0.07872860929562486, 0.07872860929562486, 0.09368378214395312, 0.09368378214395312, 0.09368378214395312, 0.06414645370317362, 0.06414645370317362, 0.06414645370317362, 0.3668326261012278, 0.3668326261012278, 0.3668326261012278, 0.3818079422515235, 0.3818079422515235, 0.3818079422515235, 0.38606414400012234, 0.38606414400012234, 0.38606414400012234, 0.08412046171658316, 0.08412046171658316, 0.08412046171658316, 0.0947405421195806, 0.0947405421195806, 0.0947405421195806, 0.09509149701566366, 0.09509149701566366, 0.09509149701566366, 0.21965716328898932, 0.21965716328898932, 0.21965716328898932, 0.15760172140595619, 0.15760172140595619, 0.15760172140595619, 0.1857121252150319, 0.1857121252150319, 0.1857121252150319, 0.2558683273661123, 0.2558683273661123, 0.2558683273661123, 0.27399279479080374, 0.27399279479080374, 0.27399279479080374, 0.2618850967793994, 0.2618850967793994, 0.2618850967793994, 0.22614309935728194, 0.22614309935728194, 0.22614309935728194, 0.16921452820749638, 0.16921452820749638, 0.16921452820749638, 0.1952213249000745, 0.1952213249000745, 0.1952213249000745, 0.2027159609938286, 0.2027159609938286, 0.2027159609938286, 0.21376235197227278, 0.21376235197227278, 0.21376235197227278, 0.19320406957728176, 0.19320406957728176, 0.19320406957728176, 0.21665656489394336, 0.21665656489394336, 0.21665656489394336, 0.20169504402790828, 0.20169504402790828, 0.20169504402790828, 0.1886341744800547, 0.1886341744800547, 0.1886341744800547, 0.5649236706194417, 0.5649236706194417, 0.5649236706194417, 0.158556791225274, 0.158556791225274, 0.158556791225274, 0.15465659185224445, 0.15465659185224445, 0.15465659185224445, 0.4503674903679402, 0.4503674903679402, 0.4503674903679402, 0.20434303329276504, 0.20434303329276504, 0.20434303329276504, 0.15660561012259622, 0.15660561012259622, 0.15660561012259622, 0.17296022881014217, 0.17296022881014217, 0.17296022881014217, 0.19083007587573697, 0.19083007587573697, 0.19083007587573697, 0.18251130682984373, 0.18251130682984373, 0.18251130682984373, 0.07613183037117632, 0.07613183037117632, 0.07613183037117632, 0.08506938737772018, 0.08506938737772018, 0.08506938737772018, 0.07931198770846459, 0.07931198770846459, 0.07931198770846459]}, "mutation_prompt": null}
{"id": "1e4c0e27-422e-44a2-9292-7f2042f9360c", "solution": "import numpy as np\n\nclass AdaptivePSOWithLevyMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.7\n        self.velocity_max = 0.2 * (self.upper_bound - self.lower_bound)\n\n    def levy_flight(self, L):\n        # Levy distribution\n        return np.random.normal(0, 1, L) / (np.abs(np.random.normal(0, 1, L))**(1/3))\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.velocity_max, self.velocity_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(pop)\n        personal_best_scores = np.array([func(ind) for ind in pop])\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - pop[i]) +\n                                 self.c2 * r2 * (global_best_position - pop[i]))\n\n                velocities[i] = np.clip(velocities[i], -self.velocity_max, self.velocity_max)\n                pop[i] += velocities[i]\n                pop[i] = np.clip(pop[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.1:  # Apply Levy mutation with 10% probability\n                    pop[i] += self.levy_flight(self.dim)\n\n                score = func(pop[i])\n                eval_count += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = pop[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = pop[i]\n\n                if eval_count >= self.budget:  # Stop if budget is exhausted\n                    break\n\n        return global_best_position, global_best_score", "name": "AdaptivePSOWithLevyMutation", "description": "Adaptive Particle Swarm Optimization with Differential Levy Mutation for enhanced exploration-exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8979803f-7f88-4724-bc6d-78594113da7e", "metadata": {"aucs": [0.42203860993449893, 0.42203860993449893, 0.42203860993449893, 0.3856538748359244, 0.3856538748359244, 0.3856538748359244, 0.36301009249662963, 0.36301009249662963, 0.36301009249662963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015889322548015006, 0.0015889322548015006, 0.0015889322548015006, 0.10406949248559938, 0.10406949248559938, 0.10406949248559938, 0.10135197107990512, 0.10135197107990512, 0.10135197107990512, 0.09669218666927337, 0.09669218666927337, 0.09669218666927337, 0.05810688576798928, 0.05810688576798928, 0.05810688576798928, 0.08499431701104954, 0.08499431701104954, 0.08499431701104954, 0.10949436252166744, 0.10949436252166744, 0.10949436252166744, 0.9898715848310218, 0.9898715848310218, 0.9898715848310218, 0.9835225613469886, 0.9835225613469886, 0.9835225613469886, 0.9847380218777118, 0.9847380218777118, 0.9847380218777118, 0.25447966878192374, 0.25447966878192374, 0.25447966878192374, 0.2379327812800005, 0.2379327812800005, 0.2379327812800005, 0.2548331717056982, 0.2548331717056982, 0.2548331717056982, 0.2607834255538032, 0.2607834255538032, 0.2607834255538032, 0.17426217391874177, 0.17426217391874177, 0.17426217391874177, 0.3306502330402603, 0.3306502330402603, 0.3306502330402603, 0.12096636714408282, 0.12096636714408282, 0.12096636714408282, 0.12878711311517477, 0.12878711311517477, 0.12878711311517477, 0.136354785182478, 0.136354785182478, 0.136354785182478, 0.16662039406135576, 0.16662039406135576, 0.16662039406135576, 0.18381612115572266, 0.18381612115572266, 0.18381612115572266, 0.16430221383873178, 0.16430221383873178, 0.16430221383873178, 0.018129458724076564, 0.018129458724076564, 0.018129458724076564, 0.02468435327926677, 0.02468435327926677, 0.02468435327926677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06556463637899035, 0.06556463637899035, 0.06556463637899035, 0.06282816666489666, 0.06282816666489666, 0.06282816666489666, 0.06057275609287771, 0.06057275609287771, 0.06057275609287771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07872860929562486, 0.07872860929562486, 0.07872860929562486, 0.09368378214395312, 0.09368378214395312, 0.09368378214395312, 0.06414645370317362, 0.06414645370317362, 0.06414645370317362, 0.3668326261012278, 0.3668326261012278, 0.3668326261012278, 0.3818079422515235, 0.3818079422515235, 0.3818079422515235, 0.38606414400012234, 0.38606414400012234, 0.38606414400012234, 0.08412046171658316, 0.08412046171658316, 0.08412046171658316, 0.0947405421195806, 0.0947405421195806, 0.0947405421195806, 0.09509149701566366, 0.09509149701566366, 0.09509149701566366, 0.21965716328898932, 0.21965716328898932, 0.21965716328898932, 0.15760172140595619, 0.15760172140595619, 0.15760172140595619, 0.1857121252150319, 0.1857121252150319, 0.1857121252150319, 0.2558683273661123, 0.2558683273661123, 0.2558683273661123, 0.27399279479080374, 0.27399279479080374, 0.27399279479080374, 0.2618850967793994, 0.2618850967793994, 0.2618850967793994, 0.22614309935728194, 0.22614309935728194, 0.22614309935728194, 0.16921452820749638, 0.16921452820749638, 0.16921452820749638, 0.1952213249000745, 0.1952213249000745, 0.1952213249000745, 0.2027159609938286, 0.2027159609938286, 0.2027159609938286, 0.21376235197227278, 0.21376235197227278, 0.21376235197227278, 0.19320406957728176, 0.19320406957728176, 0.19320406957728176, 0.21665656489394336, 0.21665656489394336, 0.21665656489394336, 0.20169504402790828, 0.20169504402790828, 0.20169504402790828, 0.1886341744800547, 0.1886341744800547, 0.1886341744800547, 0.5649236706194417, 0.5649236706194417, 0.5649236706194417, 0.158556791225274, 0.158556791225274, 0.158556791225274, 0.15465659185224445, 0.15465659185224445, 0.15465659185224445, 0.4503674903679402, 0.4503674903679402, 0.4503674903679402, 0.20434303329276504, 0.20434303329276504, 0.20434303329276504, 0.15660561012259622, 0.15660561012259622, 0.15660561012259622, 0.17296022881014217, 0.17296022881014217, 0.17296022881014217, 0.19083007587573697, 0.19083007587573697, 0.19083007587573697, 0.18251130682984373, 0.18251130682984373, 0.18251130682984373, 0.07613183037117632, 0.07613183037117632, 0.07613183037117632, 0.08506938737772018, 0.08506938737772018, 0.08506938737772018, 0.07931198770846459, 0.07931198770846459, 0.07931198770846459]}, "mutation_prompt": null}
