{"id": "44ecb883-09b2-49ea-870e-c55ca30846b6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(40, budget // 10)\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.w = 0.7   # Inertia weight\n        self.F = 0.8   # Differential evolution mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound,\n                                       (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate population\n            for i in range(self.population_size):\n                score = func(population[i])\n                evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = population[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = population[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # Update velocities and positions (PSO)\n            r1 = np.random.uniform(0, 1, (self.population_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.population_size, self.dim))\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - population) +\n                          self.c2 * r2 * (global_best_position - population))\n            population = population + velocities\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            # Apply differential evolution mutation and crossover\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.CR,\n                                        mutant_vector, population[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                if trial_score < global_best_score:\n                    global_best_score = trial_score\n                    global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position", "name": "HybridPSO_DE", "description": "A hybrid particle swarm optimization with differential evolution for enhanced exploration and exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.18543845938417214, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.41645845400966885, 0.41645845400966885, 0.41645845400966885, 0.4919716139475948, 0.4919716139475948, 0.4919716139475948, 0.4457162662569867, 0.4457162662569867, 0.4457162662569867, 0.006958222124449631, 0.006958222124449631, 0.006958222124449631, 0.19079611186980305, 0.19079611186980305, 0.19079611186980305, 0.03686300838123224, 0.03686300838123224, 0.03686300838123224, 0.08441536579640085, 0.08441536579640085, 0.08441536579640085, 0.0812382692071415, 0.0812382692071415, 0.0812382692071415, 0.10110940671388036, 0.10110940671388036, 0.10110940671388036, 0.0860187679525346, 0.0860187679525346, 0.0860187679525346, 0.10955461120873788, 0.10955461120873788, 0.10955461120873788, 0.07381577287977104, 0.07381577287977104, 0.07381577287977104, 0.9822136932338582, 0.9822136932338582, 0.9822136932338582, 0.9790604318518886, 0.9790604318518886, 0.9790604318518886, 0.9876749257979843, 0.9876749257979843, 0.9876749257979843, 0.2218080747288621, 0.2218080747288621, 0.2218080747288621, 0.14598918836905683, 0.14598918836905683, 0.14598918836905683, 0.0873390114895527, 0.0873390114895527, 0.0873390114895527, 0.21163832431458296, 0.21163832431458296, 0.21163832431458296, 0.15578569941252463, 0.15578569941252463, 0.15578569941252463, 0.19669803393504004, 0.19669803393504004, 0.19669803393504004, 0.13363711095612596, 0.13363711095612596, 0.13363711095612596, 0.10736431824899861, 0.10736431824899861, 0.10736431824899861, 0.11286042698776277, 0.11286042698776277, 0.11286042698776277, 0.12164433014264964, 0.12164433014264964, 0.12164433014264964, 0.08687266237605296, 0.08687266237605296, 0.08687266237605296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004660247889965996, 0.0004660247889965996, 0.0004660247889965996, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014657130605418178, 0.014657130605418178, 0.014657130605418178, 0.05733103616858681, 0.05733103616858681, 0.05733103616858681, 0.032507232423944155, 0.032507232423944155, 0.032507232423944155, 0.022741354720523854, 0.022741354720523854, 0.022741354720523854, 0.007316056034642471, 0.007316056034642471, 0.007316056034642471, 0.007168949531890179, 0.007168949531890179, 0.007168949531890179, 0.005618964078357047, 0.005618964078357047, 0.005618964078357047, 0.02967247384751759, 0.02967247384751759, 0.02967247384751759, 0.06761470423221438, 0.06761470423221438, 0.06761470423221438, 0.3716895725484164, 0.3716895725484164, 0.3716895725484164, 0.3711932635233376, 0.3711932635233376, 0.3711932635233376, 0.34669880586108204, 0.34669880586108204, 0.34669880586108204, 0.09316157255120738, 0.09316157255120738, 0.09316157255120738, 0.07877977569841843, 0.07877977569841843, 0.07877977569841843, 0.07844174217485489, 0.07844174217485489, 0.07844174217485489, 0.1476906381287426, 0.1476906381287426, 0.1476906381287426, 0.18793892555231173, 0.18793892555231173, 0.18793892555231173, 0.1772776401233812, 0.1772776401233812, 0.1772776401233812, 0.2449539860782992, 0.2449539860782992, 0.2449539860782992, 0.18710422967577167, 0.18710422967577167, 0.18710422967577167, 0.27604218659895763, 0.27604218659895763, 0.27604218659895763, 0.19363207095330104, 0.19363207095330104, 0.19363207095330104, 0.18164549568491362, 0.18164549568491362, 0.18164549568491362, 0.18351963989131137, 0.18351963989131137, 0.18351963989131137, 0.16955936336379385, 0.16955936336379385, 0.16955936336379385, 0.17572699809462644, 0.17572699809462644, 0.17572699809462644, 0.18396238430652567, 0.18396238430652567, 0.18396238430652567, 0.18041996171620212, 0.18041996171620212, 0.18041996171620212, 0.1956980716879546, 0.1956980716879546, 0.1956980716879546, 0.233049914636145, 0.233049914636145, 0.233049914636145, 0.6040736011103585, 0.6040736011103585, 0.6040736011103585, 0.1534272201924174, 0.1534272201924174, 0.1534272201924174, 0.19026786998914547, 0.19026786998914547, 0.19026786998914547, 0.15170692892024418, 0.15170692892024418, 0.15170692892024418, 0.20123592016182534, 0.20123592016182534, 0.20123592016182534, 0.1285087441320748, 0.1285087441320748, 0.1285087441320748, 0.18060312708888393, 0.18060312708888393, 0.18060312708888393, 0.18338469782650235, 0.18338469782650235, 0.18338469782650235, 0.19422189181367244, 0.19422189181367244, 0.19422189181367244, 0.06875124152406475, 0.06875124152406475, 0.06875124152406475, 0.07746080934062083, 0.07746080934062083, 0.07746080934062083, 0.05884475608579742, 0.05884475608579742, 0.05884475608579742]}, "mutation_prompt": null}
{"id": "d36ab1c4-0dbd-48a3-8f8e-f146b9f09f79", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(40, budget // 10)\n        self.c1 = 2.0  # Cognitive coefficient\n        self.c2 = 2.0  # Social coefficient\n        self.w = 0.7   # Inertia weight\n        self.F = 0.8   # Differential evolution mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound,\n                                       (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate population\n            for i in range(self.population_size):\n                score = func(population[i])\n                evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = population[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = population[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # Update velocities and positions (PSO)\n            r1 = np.random.uniform(0, 1, (self.population_size, self.dim))\n            r2 = np.random.uniform(0, 1, (self.population_size, self.dim))\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - population) +\n                          self.c2 * r2 * (global_best_position - population))\n            population = population + velocities\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            # Apply differential evolution mutation and crossover\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.CR,\n                                        mutant_vector, population[i])\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial_vector\n                if trial_score < global_best_score:\n                    global_best_score = trial_score\n                    global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position", "name": "HybridPSO_DE", "description": "A hybrid particle swarm optimization with differential evolution for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44ecb883-09b2-49ea-870e-c55ca30846b6", "metadata": {"aucs": [0.41645845400966885, 0.41645845400966885, 0.41645845400966885, 0.4919716139475948, 0.4919716139475948, 0.4919716139475948, 0.4457162662569867, 0.4457162662569867, 0.4457162662569867, 0.006958222124449631, 0.006958222124449631, 0.006958222124449631, 0.19079611186980305, 0.19079611186980305, 0.19079611186980305, 0.03686300838123224, 0.03686300838123224, 0.03686300838123224, 0.08441536579640085, 0.08441536579640085, 0.08441536579640085, 0.0812382692071415, 0.0812382692071415, 0.0812382692071415, 0.10110940671388036, 0.10110940671388036, 0.10110940671388036, 0.0860187679525346, 0.0860187679525346, 0.0860187679525346, 0.10955461120873788, 0.10955461120873788, 0.10955461120873788, 0.07381577287977104, 0.07381577287977104, 0.07381577287977104, 0.9822136932338582, 0.9822136932338582, 0.9822136932338582, 0.9790604318518886, 0.9790604318518886, 0.9790604318518886, 0.9876749257979843, 0.9876749257979843, 0.9876749257979843, 0.2218080747288621, 0.2218080747288621, 0.2218080747288621, 0.14598918836905683, 0.14598918836905683, 0.14598918836905683, 0.0873390114895527, 0.0873390114895527, 0.0873390114895527, 0.21163832431458296, 0.21163832431458296, 0.21163832431458296, 0.15578569941252463, 0.15578569941252463, 0.15578569941252463, 0.19669803393504004, 0.19669803393504004, 0.19669803393504004, 0.13363711095612596, 0.13363711095612596, 0.13363711095612596, 0.10736431824899861, 0.10736431824899861, 0.10736431824899861, 0.11286042698776277, 0.11286042698776277, 0.11286042698776277, 0.12164433014264964, 0.12164433014264964, 0.12164433014264964, 0.08687266237605296, 0.08687266237605296, 0.08687266237605296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004660247889965996, 0.0004660247889965996, 0.0004660247889965996, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014657130605418178, 0.014657130605418178, 0.014657130605418178, 0.05733103616858681, 0.05733103616858681, 0.05733103616858681, 0.032507232423944155, 0.032507232423944155, 0.032507232423944155, 0.022741354720523854, 0.022741354720523854, 0.022741354720523854, 0.007316056034642471, 0.007316056034642471, 0.007316056034642471, 0.007168949531890179, 0.007168949531890179, 0.007168949531890179, 0.005618964078357047, 0.005618964078357047, 0.005618964078357047, 0.02967247384751759, 0.02967247384751759, 0.02967247384751759, 0.06761470423221438, 0.06761470423221438, 0.06761470423221438, 0.3716895725484164, 0.3716895725484164, 0.3716895725484164, 0.3711932635233376, 0.3711932635233376, 0.3711932635233376, 0.34669880586108204, 0.34669880586108204, 0.34669880586108204, 0.09316157255120738, 0.09316157255120738, 0.09316157255120738, 0.07877977569841843, 0.07877977569841843, 0.07877977569841843, 0.07844174217485489, 0.07844174217485489, 0.07844174217485489, 0.1476906381287426, 0.1476906381287426, 0.1476906381287426, 0.18793892555231173, 0.18793892555231173, 0.18793892555231173, 0.1772776401233812, 0.1772776401233812, 0.1772776401233812, 0.2449539860782992, 0.2449539860782992, 0.2449539860782992, 0.18710422967577167, 0.18710422967577167, 0.18710422967577167, 0.27604218659895763, 0.27604218659895763, 0.27604218659895763, 0.19363207095330104, 0.19363207095330104, 0.19363207095330104, 0.18164549568491362, 0.18164549568491362, 0.18164549568491362, 0.18351963989131137, 0.18351963989131137, 0.18351963989131137, 0.16955936336379385, 0.16955936336379385, 0.16955936336379385, 0.17572699809462644, 0.17572699809462644, 0.17572699809462644, 0.18396238430652567, 0.18396238430652567, 0.18396238430652567, 0.18041996171620212, 0.18041996171620212, 0.18041996171620212, 0.1956980716879546, 0.1956980716879546, 0.1956980716879546, 0.233049914636145, 0.233049914636145, 0.233049914636145, 0.6040736011103585, 0.6040736011103585, 0.6040736011103585, 0.1534272201924174, 0.1534272201924174, 0.1534272201924174, 0.19026786998914547, 0.19026786998914547, 0.19026786998914547, 0.15170692892024418, 0.15170692892024418, 0.15170692892024418, 0.20123592016182534, 0.20123592016182534, 0.20123592016182534, 0.1285087441320748, 0.1285087441320748, 0.1285087441320748, 0.18060312708888393, 0.18060312708888393, 0.18060312708888393, 0.18338469782650235, 0.18338469782650235, 0.18338469782650235, 0.19422189181367244, 0.19422189181367244, 0.19422189181367244, 0.06875124152406475, 0.06875124152406475, 0.06875124152406475, 0.07746080934062083, 0.07746080934062083, 0.07746080934062083, 0.05884475608579742, 0.05884475608579742, 0.05884475608579742]}, "mutation_prompt": null}
