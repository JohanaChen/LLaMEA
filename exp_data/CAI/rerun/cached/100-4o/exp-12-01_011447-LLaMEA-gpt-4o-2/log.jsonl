{"id": "a6313326-b416-4ba5-8847-a325fdb7f0af", "solution": "import numpy as np\n\nclass HybridDELocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.7\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n\n    def differential_evolution(self, func, evaluations_left):\n        for _ in range(evaluations_left):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_value = func(trial)\n\n                if trial_value < self.best_value:\n                    self.best_solution, self.best_value = trial, trial_value\n\n                if trial_value < func(self.population[i]):\n                    self.population[i] = trial\n\n                evaluations_left -= 1\n                if evaluations_left <= 0:\n                    return\n\n    def local_search(self, func, solution):\n        step_size = 0.1\n        improved = True\n        current_value = func(solution)\n        while improved:\n            improved = False\n            for i in range(self.dim):\n                for direction in [-1, 1]:\n                    candidate = solution.copy()\n                    candidate[i] += direction * step_size\n                    candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                    candidate_value = func(candidate)\n                    if candidate_value < current_value:\n                        solution, current_value = candidate, candidate_value\n                        improved = True\n                        if current_value < self.best_value:\n                            self.best_solution, self.best_value = solution, current_value\n        return solution\n\n    def __call__(self, func):\n        evaluations_left = self.budget\n        self.differential_evolution(func, evaluations_left // 2)\n        self.best_solution = self.local_search(func, self.best_solution)\n        return self.best_solution", "name": "HybridDELocalSearch", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Local Search, leveraging global exploration and local exploitation for efficient optimization.", "configspace": "", "generation": 0, "fitness": 0.2132591253279488, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6275888153674192, 0.5842913990328409, 0.6151005212158724, 0.6098758723451113, 0.624207098807052, 0.6402803416321667, 0.6670277287548501, 0.6033165918909649, 0.6157448009772057, 0.32793027459475665, 0.3257144892666467, 0.32813875384593993, 0.332435742846401, 0.3209022299010922, 0.2765797167192594, 0.32576607949186764, 0.3130912198743302, 0.34512773950858033, 0.1092764437120628, 0.11043820328882958, 0.111679755840014, 0.12379177661481067, 0.11631045087791059, 0.10085128909832752, 0.10628012889658911, 0.11867871804162045, 0.12602308596984912, 0.10555675738974712, 0.09294094264995201, 0.09691863449028026, 0.10205894064388776, 0.092383056544453, 0.09201634268843695, 0.09725039787699774, 0.10076783875522577, 0.09756961448598944, 0.8610420062397136, 0.9151892421513357, 0.8575786554547864, 0.9093151697387903, 0.8977352577003033, 0.8612460092663854, 0.9279037495563203, 0.899909328981639, 0.8585103271666632, 0.21963634756180805, 0.21188553385323317, 0.20832756425552557, 0.225727523919652, 0.23460265776544897, 0.21619217719485428, 0.22730417886654108, 0.22543981308193983, 0.24109820824763972, 0.22906365068056234, 0.2639869230452655, 0.24131969646857787, 0.28038323767430107, 0.27404282362451937, 0.2470907042074466, 0.30765169206628984, 0.2755081985556196, 0.2938057488225273, 0.11594814095843209, 0.12157864468135215, 0.1501837949081264, 0.13372250642571215, 0.14672913079628547, 0.12075121526332167, 0.14859686489710844, 0.14759653611083068, 0.14518809730643645, 0.14207722919547938, 0.12703390755148591, 0.11906410794528532, 0.11669201478871472, 0.11057541585476449, 0.13467773094306068, 0.12405766398675677, 0.15221309623410473, 0.1587351262079877, 0.004463026632641642, 0.004292989592951213, 0.006309685840747092, 0.020645981455786222, 0.01276098652654123, 0.00224480883756073, 0.006416197563677617, 0.001968768015747635, 0.00038662419627710776, 0.09003533129909214, 0.1110628544178266, 0.1291025420762193, 0.07809468349247128, 0.08525218276150426, 0.06876606879987646, 0.12482948718942322, 0.13211678128715043, 0.114144555192221, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024580659750378375, 0.0006250876582795106, 9.999999999998899e-05, 0.0010683982548939097, 0.004724425054373205, 0.008008948388385728, 0.0001923279720181803, 0.08047933038431565, 0.09477516328835078, 0.07703310752863946, 0.10272336762899392, 0.08914397939040064, 0.10261095938747988, 0.07888607296643624, 0.09528351474435426, 0.1020788505572513, 0.43250498912012303, 0.4174897441675146, 0.43829236161185914, 0.41278160738625824, 0.42827798283845464, 0.4347771732963184, 0.422726772735009, 0.4125125644454344, 0.4389889700522833, 0.090269059131725, 0.08165294618362984, 0.07874157097525747, 0.08848586315515405, 0.07946435635458349, 0.0822321950860252, 0.09265450944143572, 0.08871063167131055, 0.0810135847391904, 0.11942103368506252, 0.12878252565787607, 0.14767517971269062, 0.15454522393320624, 0.13685697823249265, 0.1327923322118244, 0.1483911834613325, 0.14637899216204064, 0.13108278865649914, 0.2562673931265924, 0.24960644407692978, 0.26528331839973807, 0.25344967743764923, 0.24170929877471714, 0.25245144527289465, 0.27012541533979684, 0.2782281331209435, 0.2852349020154341, 0.17704714252575382, 0.19515040629867575, 0.17771482794958482, 0.18931350679180303, 0.17076578799501219, 0.17948986473172868, 0.18071030415882927, 0.20870730526273595, 0.19210361657489616, 0.19546466580053534, 0.1757804470881703, 0.18485825610027173, 0.19646275900959143, 0.17663689928206527, 0.19520492121708832, 0.1844536859824405, 0.180798702163823, 0.2004538159613345, 0.1804734106690803, 0.1698371114602747, 0.17109921402894235, 0.17275121794705806, 0.18301958394005569, 0.17214638936239135, 0.18389675545410367, 0.17579593946046224, 0.1718274484603195, 0.1868268467294344, 0.2498906803888854, 0.19821402431056856, 0.21567506390517366, 0.17098137729679108, 0.2635772378265717, 0.1918405603254263, 0.13040160507359455, 0.27030764873552715, 0.17512160972946478, 0.18013882760820454, 0.17657709685181855, 0.13992500780181327, 0.16159541952105505, 0.1876460141957933, 0.18647973562503073, 0.32360512603425085, 0.19406226286695305, 0.1731630249864704, 0.20746756337281202, 0.18247009501455513, 0.17207380623421453, 0.1770906010614608, 0.17420485207226377, 0.17531402668257356, 0.20373019622765765, 0.17813530528399857, 0.07526569962967022, 0.07019331913203697, 0.06654318000142634, 0.06859869054695422, 0.07495811114314621, 0.0778714362414974, 0.06362537962649184, 0.07216386549854392, 0.062298041411290805]}, "mutation_prompt": null}
{"id": "10074b16-dea9-4069-845c-b34c860630b1", "solution": "import numpy as np\n\nclass HybridDELocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.7\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n\n    def differential_evolution(self, func, evaluations_left):\n        for _ in range(evaluations_left):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_value = func(trial)\n\n                if trial_value < self.best_value:\n                    self.best_solution, self.best_value = trial, trial_value\n\n                if trial_value < func(self.population[i]):\n                    self.population[i] = trial\n\n                evaluations_left -= 1\n                if evaluations_left <= 0:\n                    return\n\n    def local_search(self, func, solution):\n        step_size = 0.1\n        improved = True\n        current_value = func(solution)\n        while improved:\n            improved = False\n            for i in range(self.dim):\n                for direction in [-1, 1]:\n                    candidate = solution.copy()\n                    candidate[i] += direction * step_size\n                    candidate = np.clip(candidate, self.lower_bound, self.upper_bound)\n                    candidate_value = func(candidate)\n                    if candidate_value < current_value:\n                        solution, current_value = candidate, candidate_value\n                        improved = True\n                        if current_value < self.best_value:\n                            self.best_solution, self.best_value = solution, current_value\n        return solution\n\n    def __call__(self, func):\n        evaluations_left = self.budget\n        self.differential_evolution(func, evaluations_left // 2)\n        self.best_solution = self.local_search(func, self.best_solution)\n        return self.best_solution", "name": "HybridDELocalSearch", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Local Search, leveraging global exploration and local exploitation for efficient optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a6313326-b416-4ba5-8847-a325fdb7f0af", "metadata": {"aucs": [0.6275888153674192, 0.5842913990328409, 0.6151005212158724, 0.6098758723451113, 0.624207098807052, 0.6402803416321667, 0.6670277287548501, 0.6033165918909649, 0.6157448009772057, 0.32793027459475665, 0.3257144892666467, 0.32813875384593993, 0.332435742846401, 0.3209022299010922, 0.2765797167192594, 0.32576607949186764, 0.3130912198743302, 0.34512773950858033, 0.1092764437120628, 0.11043820328882958, 0.111679755840014, 0.12379177661481067, 0.11631045087791059, 0.10085128909832752, 0.10628012889658911, 0.11867871804162045, 0.12602308596984912, 0.10555675738974712, 0.09294094264995201, 0.09691863449028026, 0.10205894064388776, 0.092383056544453, 0.09201634268843695, 0.09725039787699774, 0.10076783875522577, 0.09756961448598944, 0.8610420062397136, 0.9151892421513357, 0.8575786554547864, 0.9093151697387903, 0.8977352577003033, 0.8612460092663854, 0.9279037495563203, 0.899909328981639, 0.8585103271666632, 0.21963634756180805, 0.21188553385323317, 0.20832756425552557, 0.225727523919652, 0.23460265776544897, 0.21619217719485428, 0.22730417886654108, 0.22543981308193983, 0.24109820824763972, 0.22906365068056234, 0.2639869230452655, 0.24131969646857787, 0.28038323767430107, 0.27404282362451937, 0.2470907042074466, 0.30765169206628984, 0.2755081985556196, 0.2938057488225273, 0.11594814095843209, 0.12157864468135215, 0.1501837949081264, 0.13372250642571215, 0.14672913079628547, 0.12075121526332167, 0.14859686489710844, 0.14759653611083068, 0.14518809730643645, 0.14207722919547938, 0.12703390755148591, 0.11906410794528532, 0.11669201478871472, 0.11057541585476449, 0.13467773094306068, 0.12405766398675677, 0.15221309623410473, 0.1587351262079877, 0.004463026632641642, 0.004292989592951213, 0.006309685840747092, 0.020645981455786222, 0.01276098652654123, 0.00224480883756073, 0.006416197563677617, 0.001968768015747635, 0.00038662419627710776, 0.09003533129909214, 0.1110628544178266, 0.1291025420762193, 0.07809468349247128, 0.08525218276150426, 0.06876606879987646, 0.12482948718942322, 0.13211678128715043, 0.114144555192221, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024580659750378375, 0.0006250876582795106, 9.999999999998899e-05, 0.0010683982548939097, 0.004724425054373205, 0.008008948388385728, 0.0001923279720181803, 0.08047933038431565, 0.09477516328835078, 0.07703310752863946, 0.10272336762899392, 0.08914397939040064, 0.10261095938747988, 0.07888607296643624, 0.09528351474435426, 0.1020788505572513, 0.43250498912012303, 0.4174897441675146, 0.43829236161185914, 0.41278160738625824, 0.42827798283845464, 0.4347771732963184, 0.422726772735009, 0.4125125644454344, 0.4389889700522833, 0.090269059131725, 0.08165294618362984, 0.07874157097525747, 0.08848586315515405, 0.07946435635458349, 0.0822321950860252, 0.09265450944143572, 0.08871063167131055, 0.0810135847391904, 0.11942103368506252, 0.12878252565787607, 0.14767517971269062, 0.15454522393320624, 0.13685697823249265, 0.1327923322118244, 0.1483911834613325, 0.14637899216204064, 0.13108278865649914, 0.2562673931265924, 0.24960644407692978, 0.26528331839973807, 0.25344967743764923, 0.24170929877471714, 0.25245144527289465, 0.27012541533979684, 0.2782281331209435, 0.2852349020154341, 0.17704714252575382, 0.19515040629867575, 0.17771482794958482, 0.18931350679180303, 0.17076578799501219, 0.17948986473172868, 0.18071030415882927, 0.20870730526273595, 0.19210361657489616, 0.19546466580053534, 0.1757804470881703, 0.18485825610027173, 0.19646275900959143, 0.17663689928206527, 0.19520492121708832, 0.1844536859824405, 0.180798702163823, 0.2004538159613345, 0.1804734106690803, 0.1698371114602747, 0.17109921402894235, 0.17275121794705806, 0.18301958394005569, 0.17214638936239135, 0.18389675545410367, 0.17579593946046224, 0.1718274484603195, 0.1868268467294344, 0.2498906803888854, 0.19821402431056856, 0.21567506390517366, 0.17098137729679108, 0.2635772378265717, 0.1918405603254263, 0.13040160507359455, 0.27030764873552715, 0.17512160972946478, 0.18013882760820454, 0.17657709685181855, 0.13992500780181327, 0.16159541952105505, 0.1876460141957933, 0.18647973562503073, 0.32360512603425085, 0.19406226286695305, 0.1731630249864704, 0.20746756337281202, 0.18247009501455513, 0.17207380623421453, 0.1770906010614608, 0.17420485207226377, 0.17531402668257356, 0.20373019622765765, 0.17813530528399857, 0.07526569962967022, 0.07019331913203697, 0.06654318000142634, 0.06859869054695422, 0.07495811114314621, 0.0778714362414974, 0.06362537962649184, 0.07216386549854392, 0.062298041411290805]}, "mutation_prompt": null}
