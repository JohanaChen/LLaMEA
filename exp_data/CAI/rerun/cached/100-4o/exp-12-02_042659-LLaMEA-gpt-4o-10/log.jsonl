{"id": "66a42006-0137-49ff-8cb1-8fef72a0edb1", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim, F=0.8, Cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.Cr = Cr\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.evaluations = 0\n        \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation (Differential Evolution)\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.Cr\n                trial[crossover_points] = mutant[crossover_points]\n                \n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n                if f_trial < func(self.population[i]):\n                    self.population[i] = trial\n                    if f_trial < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = f_trial\n                \n                # Simulated Annealing-like exploitation\n                temperature = max(1.0, (self.budget - self.evaluations) / self.budget)\n                new_solution = trial + np.random.normal(0, 0.1, self.dim) * temperature\n                new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                f_new = func(new_solution)\n                self.evaluations += 1\n                if f_new < f_trial or np.exp((f_trial - f_new) / temperature) > np.random.rand():\n                    trial = new_solution\n                    f_trial = f_new\n                    if f_trial < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = f_trial\n\n        return self.best_solution", "name": "HybridDESA", "description": "A Hybrid Differential Evolution and Simulated Annealing algorithm that explores using DE and exploits using SA with adaptive control.", "configspace": "", "generation": 0, "fitness": 0.1540618003685106, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.28585938443064973, 0.27973825323300916, 0.29252664519444294, 0.3311861053486025, 0.3359452823468101, 0.32607085555958104, 0.3028745008254875, 0.34331729808709865, 0.3036965532789919, 0.07235533141231176, 0.04682346807432092, 0.06417204950721911, 0.04565038447910652, 0.05620043535857111, 0.06302004548798668, 0.07565941769797968, 0.07656442746912895, 0.07466413990710008, 0.06945850832326073, 0.07735751403625313, 0.0713828441240959, 0.06411479975447765, 0.06890323447386582, 0.07134952632912195, 0.07791489056350875, 0.07139219364010607, 0.07283748538076706, 0.05155997241448729, 0.05850456679824656, 0.05723640137570052, 0.0676312801714174, 0.05802032346798791, 0.05980554590908527, 0.06368955194951231, 0.06329745319106128, 0.05758098367526476, 0.8105583498291302, 0.9224072637496833, 0.7912386072333233, 0.7632737303399849, 0.721248078562367, 0.8473298494336783, 0.6865581048427828, 0.8916591782152208, 0.9247786434730116, 0.14775063306520986, 0.10294888005444613, 0.11349795252805528, 0.12769423819548698, 0.10845146991695076, 0.1306202892693531, 0.14750324492402067, 0.14112852536880727, 0.13456043033983167, 0.2006404570109045, 0.24067411237650227, 0.1931527866578685, 0.19856859705463603, 0.19377589763940573, 0.20875803681756244, 0.19037169887600502, 0.20782341064676557, 0.1988194450961155, 0.06802037643190129, 0.0594830481024341, 0.04727401393904296, 0.07746999478041983, 0.06500714510465166, 0.06237730671887198, 0.07214691255409922, 0.08438785857353237, 0.07534169859075879, 0.08689462306716855, 0.045585250157254786, 0.08747812173240932, 0.06623901268048848, 0.07028547703275068, 0.0773513206721993, 0.04870868366924408, 0.05221522135808532, 0.055357704496079685, 0.01693687834148372, 0.0007759659238414374, 0.00811003641850272, 0.0071760724151732624, 0.0005399300063261281, 9.999999999998899e-05, 0.004674460079550635, 0.015009278531258108, 0.0041664527048953515, 0.08067164019642437, 0.11352031631333681, 0.10866165788579707, 0.08086182141829945, 0.16840919068230376, 0.08289961638570165, 0.09104092113915963, 0.12349166567969405, 0.104753789037907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04295511823548803, 0.03906813283616262, 0.04738912220809166, 0.04653495559919085, 0.058663472853276444, 0.04864719565570663, 0.057311076183206744, 0.05015154775585984, 0.05329184172790591, 0.2733608451968461, 0.2886174046211313, 0.29291413752615203, 0.2811851086839148, 0.2837048816223121, 0.29111588104996444, 0.2727221596572703, 0.28821969771827494, 0.27272290774075836, 0.07093513234391868, 0.07386057185807915, 0.07065864021325852, 0.06421237254665935, 0.07246552412643614, 0.06616922390544533, 0.07330240219368478, 0.05473658796331515, 0.07414816526989909, 0.14296332508520848, 0.1260836437120706, 0.1544486961243149, 0.14421824472462574, 0.13734236723034787, 0.1264820621793009, 0.1539821030474504, 0.12277665205945121, 0.11503120661585475, 0.19105820319290823, 0.19825686239301998, 0.20545854339050762, 0.18318786917347074, 0.1684296539071607, 0.17629631046305272, 0.19103193804594032, 0.20500277579948012, 0.20860277699880603, 0.14713787620093755, 0.12719674773535006, 0.13278144472455788, 0.15228781585899942, 0.12964328852013185, 0.1429199776230351, 0.1445916285507921, 0.13643952426159045, 0.14777116874468377, 0.17659168673634884, 0.17297472257945834, 0.16732815346675867, 0.16055414716798733, 0.1501097558440222, 0.16646677324310422, 0.19994613733472355, 0.15953800300495602, 0.16576075765610765, 0.15554688829614183, 0.1599286682782156, 0.15962432350323708, 0.16219232580682508, 0.14589842298883382, 0.15278392586578426, 0.16143152879541667, 0.14788543958366596, 0.15833628142494272, 0.23224789702458348, 0.16568933437000577, 0.2824711442689941, 0.14043988982030586, 0.222000512806227, 0.138059019525423, 0.12899851912304716, 0.12719580208261927, 0.16275790224445286, 0.1596045614219438, 0.30133525571507735, 0.15249969738996638, 0.14356739223771897, 0.14105514021037746, 0.1716417480110749, 0.18830019077505522, 0.1969329885523713, 0.17844505689714496, 0.16869285726287686, 0.18296283206388342, 0.1743542550658238, 0.19679802330726648, 0.1855016665878093, 0.18570462822972245, 0.18452257895563184, 0.17497905305153294, 0.18427258082508946, 0.05812750998676952, 0.06688022430860474, 0.054076454978150834, 0.07351893002484866, 0.062494375989760154, 0.05568817869763132, 0.056077966521447475, 0.05986347629643862, 0.0577294521220576]}, "mutation_prompt": null}
{"id": "9dbf9ed0-bbd2-4598-91aa-eedab4eb001d", "solution": "import numpy as np\n\nclass HybridDESA:\n    def __init__(self, budget, dim, F=0.8, Cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.Cr = Cr\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.evaluations = 0\n        \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation (Differential Evolution)\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                x0, x1, x2 = self.population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.Cr\n                trial[crossover_points] = mutant[crossover_points]\n                \n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n                if f_trial < func(self.population[i]):\n                    self.population[i] = trial\n                    if f_trial < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = f_trial\n                \n                # Simulated Annealing-like exploitation\n                temperature = max(1.0, (self.budget - self.evaluations) / self.budget)\n                new_solution = trial + np.random.normal(0, 0.1, self.dim) * temperature\n                new_solution = np.clip(new_solution, self.lower_bound, self.upper_bound)\n                f_new = func(new_solution)\n                self.evaluations += 1\n                if f_new < f_trial or np.exp((f_trial - f_new) / temperature) > np.random.rand():\n                    trial = new_solution\n                    f_trial = f_new\n                    if f_trial < self.best_fitness:\n                        self.best_solution = trial\n                        self.best_fitness = f_trial\n\n        return self.best_solution", "name": "HybridDESA", "description": "A Hybrid Differential Evolution and Simulated Annealing algorithm that explores using DE and exploits using SA with adaptive control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "66a42006-0137-49ff-8cb1-8fef72a0edb1", "metadata": {"aucs": [0.28585938443064973, 0.27973825323300916, 0.29252664519444294, 0.3311861053486025, 0.3359452823468101, 0.32607085555958104, 0.3028745008254875, 0.34331729808709865, 0.3036965532789919, 0.07235533141231176, 0.04682346807432092, 0.06417204950721911, 0.04565038447910652, 0.05620043535857111, 0.06302004548798668, 0.07565941769797968, 0.07656442746912895, 0.07466413990710008, 0.06945850832326073, 0.07735751403625313, 0.0713828441240959, 0.06411479975447765, 0.06890323447386582, 0.07134952632912195, 0.07791489056350875, 0.07139219364010607, 0.07283748538076706, 0.05155997241448729, 0.05850456679824656, 0.05723640137570052, 0.0676312801714174, 0.05802032346798791, 0.05980554590908527, 0.06368955194951231, 0.06329745319106128, 0.05758098367526476, 0.8105583498291302, 0.9224072637496833, 0.7912386072333233, 0.7632737303399849, 0.721248078562367, 0.8473298494336783, 0.6865581048427828, 0.8916591782152208, 0.9247786434730116, 0.14775063306520986, 0.10294888005444613, 0.11349795252805528, 0.12769423819548698, 0.10845146991695076, 0.1306202892693531, 0.14750324492402067, 0.14112852536880727, 0.13456043033983167, 0.2006404570109045, 0.24067411237650227, 0.1931527866578685, 0.19856859705463603, 0.19377589763940573, 0.20875803681756244, 0.19037169887600502, 0.20782341064676557, 0.1988194450961155, 0.06802037643190129, 0.0594830481024341, 0.04727401393904296, 0.07746999478041983, 0.06500714510465166, 0.06237730671887198, 0.07214691255409922, 0.08438785857353237, 0.07534169859075879, 0.08689462306716855, 0.045585250157254786, 0.08747812173240932, 0.06623901268048848, 0.07028547703275068, 0.0773513206721993, 0.04870868366924408, 0.05221522135808532, 0.055357704496079685, 0.01693687834148372, 0.0007759659238414374, 0.00811003641850272, 0.0071760724151732624, 0.0005399300063261281, 9.999999999998899e-05, 0.004674460079550635, 0.015009278531258108, 0.0041664527048953515, 0.08067164019642437, 0.11352031631333681, 0.10866165788579707, 0.08086182141829945, 0.16840919068230376, 0.08289961638570165, 0.09104092113915963, 0.12349166567969405, 0.104753789037907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04295511823548803, 0.03906813283616262, 0.04738912220809166, 0.04653495559919085, 0.058663472853276444, 0.04864719565570663, 0.057311076183206744, 0.05015154775585984, 0.05329184172790591, 0.2733608451968461, 0.2886174046211313, 0.29291413752615203, 0.2811851086839148, 0.2837048816223121, 0.29111588104996444, 0.2727221596572703, 0.28821969771827494, 0.27272290774075836, 0.07093513234391868, 0.07386057185807915, 0.07065864021325852, 0.06421237254665935, 0.07246552412643614, 0.06616922390544533, 0.07330240219368478, 0.05473658796331515, 0.07414816526989909, 0.14296332508520848, 0.1260836437120706, 0.1544486961243149, 0.14421824472462574, 0.13734236723034787, 0.1264820621793009, 0.1539821030474504, 0.12277665205945121, 0.11503120661585475, 0.19105820319290823, 0.19825686239301998, 0.20545854339050762, 0.18318786917347074, 0.1684296539071607, 0.17629631046305272, 0.19103193804594032, 0.20500277579948012, 0.20860277699880603, 0.14713787620093755, 0.12719674773535006, 0.13278144472455788, 0.15228781585899942, 0.12964328852013185, 0.1429199776230351, 0.1445916285507921, 0.13643952426159045, 0.14777116874468377, 0.17659168673634884, 0.17297472257945834, 0.16732815346675867, 0.16055414716798733, 0.1501097558440222, 0.16646677324310422, 0.19994613733472355, 0.15953800300495602, 0.16576075765610765, 0.15554688829614183, 0.1599286682782156, 0.15962432350323708, 0.16219232580682508, 0.14589842298883382, 0.15278392586578426, 0.16143152879541667, 0.14788543958366596, 0.15833628142494272, 0.23224789702458348, 0.16568933437000577, 0.2824711442689941, 0.14043988982030586, 0.222000512806227, 0.138059019525423, 0.12899851912304716, 0.12719580208261927, 0.16275790224445286, 0.1596045614219438, 0.30133525571507735, 0.15249969738996638, 0.14356739223771897, 0.14105514021037746, 0.1716417480110749, 0.18830019077505522, 0.1969329885523713, 0.17844505689714496, 0.16869285726287686, 0.18296283206388342, 0.1743542550658238, 0.19679802330726648, 0.1855016665878093, 0.18570462822972245, 0.18452257895563184, 0.17497905305153294, 0.18427258082508946, 0.05812750998676952, 0.06688022430860474, 0.054076454978150834, 0.07351893002484866, 0.062494375989760154, 0.05568817869763132, 0.056077966521447475, 0.05986347629643862, 0.0577294521220576]}, "mutation_prompt": null}
