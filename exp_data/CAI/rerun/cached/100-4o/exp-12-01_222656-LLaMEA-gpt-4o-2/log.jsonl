{"id": "fd968816-cabe-4400-bfc7-37d249b99a72", "solution": "import numpy as np\n\nclass HybridMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.7\n        self.temp = 1.0\n        self.temp_decay = 0.99\n\n    def __call__(self, func):\n        evals = 0\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals += self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temp):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n            self.temp *= self.temp_decay\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridMetaheuristicOptimizer", "description": "A hybrid metaheuristic combining Differential Evolution and Simulated Annealing to balance exploration and exploitation for effective optimization.", "configspace": "", "generation": 0, "fitness": 0.2408162943582222, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3875109900984226, 0.3770301092054764, 0.378901633633295, 0.3772643000868482, 0.37241012209944424, 0.37819499402480783, 0.3906323671017532, 0.3732939713271546, 0.3721216152611332, 0.32798520369019313, 0.3103740067623526, 0.303416247273936, 0.31269420155820704, 0.31693627400313473, 0.3526215469662628, 0.3087929766043892, 0.3263689114930366, 0.3264438391781508, 0.1484669889757182, 0.14006923427492235, 0.14112338166008143, 0.19615041724255955, 0.17317966854029077, 0.1653682663570195, 0.15641154473458407, 0.2127986603804004, 0.15702069909926708, 0.13184712544605304, 0.12958898450869716, 0.13415408291586517, 0.14787269457002272, 0.1360058746258901, 0.14808762575876222, 0.12788131554980575, 0.1508917817475316, 0.13748757592763083, 0.9279740335430651, 0.9414488632418002, 0.9212211718218577, 0.9386575127699955, 0.9243195628335398, 0.9109893449858898, 0.9552523779304362, 0.9651993314993882, 0.9448626265950741, 0.2795787557605721, 0.28688178336811154, 0.25417478073744804, 0.2775782059796482, 0.27638438059280646, 0.2666955835327406, 0.2706265165913816, 0.2728243662089882, 0.26596360517307627, 0.32244951593045057, 0.3161269713695557, 0.4932159176230524, 0.4041552741476582, 0.34370001041035203, 0.38607616313514403, 0.6564621800943435, 0.3198895000007911, 0.35543121593065174, 0.17476018906811241, 0.17426276941216656, 0.18034067928102626, 0.18611408652328154, 0.17155374048969463, 0.1876369928354501, 0.17679060380545397, 0.17521941076337522, 0.17981179913235135, 0.17616467079435427, 0.17533483922955673, 0.20691814770674777, 0.18457208888741183, 0.18149065849571178, 0.19502889782222588, 0.1617473414042051, 0.19101266542995676, 0.1563609746912391, 0.042565553434069314, 0.061677076628405825, 0.07327368372717302, 0.05908432369430483, 0.06848226545083402, 0.06483485384156029, 0.0735071163213874, 0.04832367209521604, 0.08881685516495286, 0.16395832361636353, 0.18119170755535474, 0.20624542715691563, 0.15434001192845903, 0.19622807921404606, 0.1479543639089439, 0.2032803086891578, 0.2208959781666323, 0.198626811903022, 0.041777231313376295, 0.032897273192161625, 0.02134589928798447, 0.019368076116669908, 0.02322010569625177, 0.031219392671539614, 0.0715999834485086, 0.0603216714286573, 0.08419279901246224, 0.16048342331445842, 0.1654788052143702, 0.15153460357547355, 0.17541759841211146, 0.1770155858565784, 0.16940878160966755, 0.1590028623047094, 0.16560856515837563, 0.16451284147418666, 0.3344922487659785, 0.35404856188166167, 0.3526852329659518, 0.3605171225113091, 0.35169423527069554, 0.35141320414406907, 0.3426358830416659, 0.3553593167673835, 0.3513461415709056, 0.09738344613765837, 0.10023606801438578, 0.10655847314446387, 0.08241902383405286, 0.09321588542000647, 0.107905664436442, 0.09331912910482876, 0.112545936689737, 0.10170909339322953, 0.11699500749387715, 0.14507968192236453, 0.15012863548211075, 0.13809088749704712, 0.1307598639759785, 0.1392758566632134, 0.1355251825268906, 0.13350314246733563, 0.13970163423245285, 0.2655280962871355, 0.27802213211058824, 0.27166945584171465, 0.2790178766703463, 0.2772037275573712, 0.29347851891452126, 0.2767305310459447, 0.2771801112825518, 0.2779477951769015, 0.23552288532876464, 0.23105002246867112, 0.23487948098222156, 0.24949802609670335, 0.2250149363731616, 0.23101368430104008, 0.26226897660338333, 0.24321673715041492, 0.25609640608387885, 0.19108799057920578, 0.18789160159103013, 0.19916598977293554, 0.20582875830529246, 0.20074091850779563, 0.20253136349632928, 0.1873627627457385, 0.20314222940160642, 0.206225098294476, 0.19096817852590142, 0.18284379989349486, 0.2512892101781212, 0.18181739907007055, 0.20154991212560558, 0.25524539172089067, 0.21841705444320647, 0.1910470602703006, 0.20805506385857342, 0.17339071030784248, 0.33163066762537663, 0.18044031981591546, 0.3304453399631243, 0.4481476129523059, 0.36789177322340527, 0.33406735972033874, 0.36630052604025154, 0.3665231430247884, 0.2874671930047189, 0.20328507727858514, 0.2000946927062588, 0.4050927468199208, 0.19184467708769293, 0.2615480029640427, 0.1996838248559899, 0.29790149889791384, 0.20737174358186228, 0.17735384265438603, 0.1770844956540455, 0.19834215598456595, 0.18297256087243896, 0.18028038161470794, 0.1801646318272997, 0.17656913650738004, 0.19552865799434604, 0.2105065855541265, 0.08283461948845305, 0.07692771072018745, 0.07980812002638427, 0.07599497059062177, 0.07653986982334304, 0.07558762224355464, 0.07408631184456149, 0.08790502019330382, 0.0772609836527901]}, "mutation_prompt": null}
{"id": "ca118c5d-6fbe-4cdb-aab7-e293089314b7", "solution": "import numpy as np\n\nclass HybridMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.7\n        self.temp = 1.0\n        self.temp_decay = 0.99\n\n    def __call__(self, func):\n        evals = 0\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals += self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_rate\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temp):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if evals >= self.budget:\n                    break\n\n            self.temp *= self.temp_decay\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridMetaheuristicOptimizer", "description": "A hybrid metaheuristic combining Differential Evolution and Simulated Annealing to balance exploration and exploitation for effective optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fd968816-cabe-4400-bfc7-37d249b99a72", "metadata": {"aucs": [0.3875109900984226, 0.3770301092054764, 0.378901633633295, 0.3772643000868482, 0.37241012209944424, 0.37819499402480783, 0.3906323671017532, 0.3732939713271546, 0.3721216152611332, 0.32798520369019313, 0.3103740067623526, 0.303416247273936, 0.31269420155820704, 0.31693627400313473, 0.3526215469662628, 0.3087929766043892, 0.3263689114930366, 0.3264438391781508, 0.1484669889757182, 0.14006923427492235, 0.14112338166008143, 0.19615041724255955, 0.17317966854029077, 0.1653682663570195, 0.15641154473458407, 0.2127986603804004, 0.15702069909926708, 0.13184712544605304, 0.12958898450869716, 0.13415408291586517, 0.14787269457002272, 0.1360058746258901, 0.14808762575876222, 0.12788131554980575, 0.1508917817475316, 0.13748757592763083, 0.9279740335430651, 0.9414488632418002, 0.9212211718218577, 0.9386575127699955, 0.9243195628335398, 0.9109893449858898, 0.9552523779304362, 0.9651993314993882, 0.9448626265950741, 0.2795787557605721, 0.28688178336811154, 0.25417478073744804, 0.2775782059796482, 0.27638438059280646, 0.2666955835327406, 0.2706265165913816, 0.2728243662089882, 0.26596360517307627, 0.32244951593045057, 0.3161269713695557, 0.4932159176230524, 0.4041552741476582, 0.34370001041035203, 0.38607616313514403, 0.6564621800943435, 0.3198895000007911, 0.35543121593065174, 0.17476018906811241, 0.17426276941216656, 0.18034067928102626, 0.18611408652328154, 0.17155374048969463, 0.1876369928354501, 0.17679060380545397, 0.17521941076337522, 0.17981179913235135, 0.17616467079435427, 0.17533483922955673, 0.20691814770674777, 0.18457208888741183, 0.18149065849571178, 0.19502889782222588, 0.1617473414042051, 0.19101266542995676, 0.1563609746912391, 0.042565553434069314, 0.061677076628405825, 0.07327368372717302, 0.05908432369430483, 0.06848226545083402, 0.06483485384156029, 0.0735071163213874, 0.04832367209521604, 0.08881685516495286, 0.16395832361636353, 0.18119170755535474, 0.20624542715691563, 0.15434001192845903, 0.19622807921404606, 0.1479543639089439, 0.2032803086891578, 0.2208959781666323, 0.198626811903022, 0.041777231313376295, 0.032897273192161625, 0.02134589928798447, 0.019368076116669908, 0.02322010569625177, 0.031219392671539614, 0.0715999834485086, 0.0603216714286573, 0.08419279901246224, 0.16048342331445842, 0.1654788052143702, 0.15153460357547355, 0.17541759841211146, 0.1770155858565784, 0.16940878160966755, 0.1590028623047094, 0.16560856515837563, 0.16451284147418666, 0.3344922487659785, 0.35404856188166167, 0.3526852329659518, 0.3605171225113091, 0.35169423527069554, 0.35141320414406907, 0.3426358830416659, 0.3553593167673835, 0.3513461415709056, 0.09738344613765837, 0.10023606801438578, 0.10655847314446387, 0.08241902383405286, 0.09321588542000647, 0.107905664436442, 0.09331912910482876, 0.112545936689737, 0.10170909339322953, 0.11699500749387715, 0.14507968192236453, 0.15012863548211075, 0.13809088749704712, 0.1307598639759785, 0.1392758566632134, 0.1355251825268906, 0.13350314246733563, 0.13970163423245285, 0.2655280962871355, 0.27802213211058824, 0.27166945584171465, 0.2790178766703463, 0.2772037275573712, 0.29347851891452126, 0.2767305310459447, 0.2771801112825518, 0.2779477951769015, 0.23552288532876464, 0.23105002246867112, 0.23487948098222156, 0.24949802609670335, 0.2250149363731616, 0.23101368430104008, 0.26226897660338333, 0.24321673715041492, 0.25609640608387885, 0.19108799057920578, 0.18789160159103013, 0.19916598977293554, 0.20582875830529246, 0.20074091850779563, 0.20253136349632928, 0.1873627627457385, 0.20314222940160642, 0.206225098294476, 0.19096817852590142, 0.18284379989349486, 0.2512892101781212, 0.18181739907007055, 0.20154991212560558, 0.25524539172089067, 0.21841705444320647, 0.1910470602703006, 0.20805506385857342, 0.17339071030784248, 0.33163066762537663, 0.18044031981591546, 0.3304453399631243, 0.4481476129523059, 0.36789177322340527, 0.33406735972033874, 0.36630052604025154, 0.3665231430247884, 0.2874671930047189, 0.20328507727858514, 0.2000946927062588, 0.4050927468199208, 0.19184467708769293, 0.2615480029640427, 0.1996838248559899, 0.29790149889791384, 0.20737174358186228, 0.17735384265438603, 0.1770844956540455, 0.19834215598456595, 0.18297256087243896, 0.18028038161470794, 0.1801646318272997, 0.17656913650738004, 0.19552865799434604, 0.2105065855541265, 0.08283461948845305, 0.07692771072018745, 0.07980812002638427, 0.07599497059062177, 0.07653986982334304, 0.07558762224355464, 0.07408631184456149, 0.08790502019330382, 0.0772609836527901]}, "mutation_prompt": null}
