{"id": "a82754e0-fb12-4b50-b976-4a95d753f757", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.7\n\n    def __call__(self, func):\n        np.random.seed(0)\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(pop)\n        personal_best_scores = np.array([func(ind) for ind in pop])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Particle Swarm Optimization update\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_constant * r1 * (personal_best_positions[i] - pop[i]) +\n                                 self.social_constant * r2 * (global_best_position - pop[i]))\n\n                pop[i] = np.clip(pop[i] + velocities[i], self.lower_bound, self.upper_bound)\n                score = func(pop[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = pop[i]\n\n                # Differential Evolution crossover and mutation\n                if evaluations < self.budget:\n                    a, b, c = pop[np.random.choice(self.population_size, 3, replace=False)]\n                    mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, pop[i])\n                    trial_score = func(trial_vector)\n                    evaluations += 1\n\n                    if trial_score < score:\n                        pop[i] = trial_vector\n                        score = trial_score\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = pop[i]\n\n        return global_best_position, global_best_score", "name": "HybridOptimizer", "description": "A hybrid adaptive exploration-exploitation algorithm combining Particle Swarm Optimization and Differential Evolution for effective search across diverse landscapes.", "configspace": "", "generation": 0, "fitness": 0.21769844245967673, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.46939870697384656, 0.46939870697384656, 0.46939870697384656, 0.41992096816538804, 0.41992096816538804, 0.41992096816538804, 0.5800471586614819, 0.5800471586614819, 0.5800471586614819, 0.1057059706623582, 0.1057059706623582, 0.1057059706623582, 0.0477226026822134, 0.0477226026822134, 0.0477226026822134, 0.0648329147992216, 0.0648329147992216, 0.0648329147992216, 0.08660165488194693, 0.08660165488194693, 0.08660165488194693, 0.10244020961691858, 0.10244020961691858, 0.10244020961691858, 0.08495156668232684, 0.08495156668232684, 0.08495156668232684, 0.12607617827244033, 0.12607617827244033, 0.12607617827244033, 0.05542664415787313, 0.05542664415787313, 0.05542664415787313, 0.08050323193736708, 0.08050323193736708, 0.08050323193736708, 0.9835422968982048, 0.9835422968982048, 0.9835422968982048, 0.9835608789190413, 0.9835608789190413, 0.9835608789190413, 0.9811273674515155, 0.9811273674515155, 0.9811273674515155, 0.14854855175890658, 0.14854855175890658, 0.14854855175890658, 0.14413341430224214, 0.14413341430224214, 0.14413341430224214, 0.1601554801739501, 0.1601554801739501, 0.1601554801739501, 0.5232131303969447, 0.5232131303969447, 0.5232131303969447, 0.500302195496261, 0.500302195496261, 0.500302195496261, 0.27408932979126543, 0.27408932979126543, 0.27408932979126543, 0.21609271127170082, 0.21609271127170082, 0.21609271127170082, 0.10499124751074174, 0.10499124751074174, 0.10499124751074174, 0.15891923109507422, 0.15891923109507422, 0.15891923109507422, 0.11125826294838426, 0.11125826294838426, 0.11125826294838426, 0.1402905764238117, 0.1402905764238117, 0.1402905764238117, 0.1532896060014729, 0.1532896060014729, 0.1532896060014729, 0.044980387770577, 0.044980387770577, 0.044980387770577, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029641609094914756, 0.029641609094914756, 0.029641609094914756, 0.06035008611699455, 0.06035008611699455, 0.06035008611699455, 0.14548589277867918, 0.14548589277867918, 0.14548589277867918, 0.050558891966655195, 0.050558891966655195, 0.050558891966655195, 0.006626276944763587, 0.006626276944763587, 0.006626276944763587, 0.009225979419129726, 0.009225979419129726, 0.009225979419129726, 0.03165750965102454, 0.03165750965102454, 0.03165750965102454, 0.1318123661527858, 0.1318123661527858, 0.1318123661527858, 0.12271901301765797, 0.12271901301765797, 0.12271901301765797, 0.11109936145152355, 0.11109936145152355, 0.11109936145152355, 0.3531200590174519, 0.3531200590174519, 0.3531200590174519, 0.41783215538809837, 0.41783215538809837, 0.41783215538809837, 0.38985176048059944, 0.38985176048059944, 0.38985176048059944, 0.09072842888317989, 0.09072842888317989, 0.09072842888317989, 0.0756953379097608, 0.0756953379097608, 0.0756953379097608, 0.07881611029078062, 0.07881611029078062, 0.07881611029078062, 0.1513736599338168, 0.1513736599338168, 0.1513736599338168, 0.13884909740528528, 0.13884909740528528, 0.13884909740528528, 0.16510636894646702, 0.16510636894646702, 0.16510636894646702, 0.23497810997613122, 0.23497810997613122, 0.23497810997613122, 0.25128288388412345, 0.25128288388412345, 0.25128288388412345, 0.28115658830599966, 0.28115658830599966, 0.28115658830599966, 0.15683659854507825, 0.15683659854507825, 0.15683659854507825, 0.22610113712839952, 0.22610113712839952, 0.22610113712839952, 0.18253666777088828, 0.18253666777088828, 0.18253666777088828, 0.179942522876695, 0.179942522876695, 0.179942522876695, 0.16908089243708824, 0.16908089243708824, 0.16908089243708824, 0.19577758266759682, 0.19577758266759682, 0.19577758266759682, 0.1808951746721752, 0.1808951746721752, 0.1808951746721752, 0.18052957928030555, 0.18052957928030555, 0.18052957928030555, 0.17840929433343622, 0.17840929433343622, 0.17840929433343622, 0.18611605337853665, 0.18611605337853665, 0.18611605337853665, 0.6073189961007059, 0.6073189961007059, 0.6073189961007059, 0.17690608852008005, 0.17690608852008005, 0.17690608852008005, 0.4532433547210498, 0.4532433547210498, 0.4532433547210498, 0.4528494670003249, 0.4528494670003249, 0.4528494670003249, 0.20609628423639037, 0.20609628423639037, 0.20609628423639037, 0.18352348478110037, 0.18352348478110037, 0.18352348478110037, 0.18996621867048558, 0.18996621867048558, 0.18996621867048558, 0.19286581781476098, 0.19286581781476098, 0.19286581781476098, 0.06878445592402571, 0.06878445592402571, 0.06878445592402571, 0.06260983082988336, 0.06260983082988336, 0.06260983082988336, 0.06370833268841691, 0.06370833268841691, 0.06370833268841691]}, "mutation_prompt": null}
{"id": "dfe7c5c8-b5e6-4f92-886f-c8f1eba518bf", "solution": "import numpy as np\n\nclass HybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.9  # Changed initial inertia weight for better exploration\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.7\n        self.min_inertia_weight = 0.4  # Added minimum inertia weight for dynamic adjustment\n\n    def __call__(self, func):\n        np.random.seed(0)\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(pop)\n        personal_best_scores = np.array([func(ind) for ind in pop])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive inertia weight adjustment\n                self.inertia_weight = self.min_inertia_weight + (0.9 - self.min_inertia_weight) * (1 - evaluations / self.budget)\n                \n                # Particle Swarm Optimization update\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_constant * r1 * (personal_best_positions[i] - pop[i]) +\n                                 self.social_constant * r2 * (global_best_position - pop[i]))\n\n                pop[i] = np.clip(pop[i] + velocities[i], self.lower_bound, self.upper_bound)\n                score = func(pop[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = pop[i]\n\n                # Differential Evolution crossover and mutation with tournament selection\n                if evaluations < self.budget:\n                    indices = np.random.choice(self.population_size, 5, replace=False)\n                    a, b, c = sorted([(func(pop[idx]), pop[idx]) for idx in indices], key=lambda x: x[0])[:3]\n                    mutant_vector = np.clip(a[1] + self.mutation_factor * (b[1] - c[1]), self.lower_bound, self.upper_bound)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, pop[i])\n                    trial_score = func(trial_vector)\n                    evaluations += 1\n\n                    if trial_score < score:\n                        pop[i] = trial_vector\n                        score = trial_score\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = pop[i]\n\n        return global_best_position, global_best_score", "name": "HybridOptimizer", "description": "An enhanced hybrid optimizer incorporating adaptive inertia weight and tournament selection to improve convergence speed and robustness.", "configspace": "", "generation": 1, "fitness": 0.13778425160213814, "feedback": "", "error": "", "parent_id": "a82754e0-fb12-4b50-b976-4a95d753f757", "metadata": {"aucs": [0.26510907544781015, 0.26510907544781015, 0.26510907544781015, 0.21157297944666176, 0.21157297944666176, 0.21157297944666176, 0.22394132322218685, 0.22394132322218685, 0.22394132322218685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0407834725481121, 0.0407834725481121, 0.0407834725481121, 0.05290290200264358, 0.05290290200264358, 0.05290290200264358, 0.046101121846588655, 0.046101121846588655, 0.046101121846588655, 0.02559847407387983, 0.02559847407387983, 0.02559847407387983, 0.06542196173568138, 0.06542196173568138, 0.06542196173568138, 0.09171824807816242, 0.09171824807816242, 0.09171824807816242, 0.9561841170017036, 0.9561841170017036, 0.9561841170017036, 0.9574612940873832, 0.9574612940873832, 0.9574612940873832, 0.9734491337246448, 0.9734491337246448, 0.9734491337246448, 0.11681702767754965, 0.11681702767754965, 0.11681702767754965, 0.11056090514921213, 0.11056090514921213, 0.11056090514921213, 0.09463551830792838, 0.09463551830792838, 0.09463551830792838, 0.14052105281078653, 0.14052105281078653, 0.14052105281078653, 0.15686593235585, 0.15686593235585, 0.15686593235585, 0.17832867500739524, 0.17832867500739524, 0.17832867500739524, 0.01692586128427387, 0.01692586128427387, 0.01692586128427387, 0.07060397020697706, 0.07060397020697706, 0.07060397020697706, 0.020129248042116688, 0.020129248042116688, 0.020129248042116688, 0.004732569789426266, 0.004732569789426266, 0.004732569789426266, 0.08066064560092567, 0.08066064560092567, 0.08066064560092567, 0.07217396044199342, 0.07217396044199342, 0.07217396044199342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013257856690453429, 0.013257856690453429, 0.013257856690453429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032335039005139676, 0.032335039005139676, 0.032335039005139676, 0.046573996757316105, 0.046573996757316105, 0.046573996757316105, 0.032736886762509076, 0.032736886762509076, 0.032736886762509076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020636695558731266, 0.020636695558731266, 0.020636695558731266, 0.22127256249229543, 0.22127256249229543, 0.22127256249229543, 0.24303074235529842, 0.24303074235529842, 0.24303074235529842, 0.22357951075941385, 0.22357951075941385, 0.22357951075941385, 0.053624033020988615, 0.053624033020988615, 0.053624033020988615, 0.05190776754613635, 0.05190776754613635, 0.05190776754613635, 0.053877071891839656, 0.053877071891839656, 0.053877071891839656, 0.12434979114459566, 0.12434979114459566, 0.12434979114459566, 0.12955646419798428, 0.12955646419798428, 0.12955646419798428, 0.11708153626485873, 0.11708153626485873, 0.11708153626485873, 0.16801356288674762, 0.16801356288674762, 0.16801356288674762, 0.171992761074511, 0.171992761074511, 0.171992761074511, 0.17815143049919058, 0.17815143049919058, 0.17815143049919058, 0.14079765705136849, 0.14079765705136849, 0.14079765705136849, 0.10445211041543712, 0.10445211041543712, 0.10445211041543712, 0.13385540595057843, 0.13385540595057843, 0.13385540595057843, 0.19472016495925193, 0.19472016495925193, 0.19472016495925193, 0.17283334773098946, 0.17283334773098946, 0.17283334773098946, 0.13824320324934702, 0.13824320324934702, 0.13824320324934702, 0.15475262904874598, 0.15475262904874598, 0.15475262904874598, 0.15466496481779124, 0.15466496481779124, 0.15466496481779124, 0.1548254972559745, 0.1548254972559745, 0.1548254972559745, 0.15882064619680059, 0.15882064619680059, 0.15882064619680059, 0.18248785681685553, 0.18248785681685553, 0.18248785681685553, 0.14170538152476853, 0.14170538152476853, 0.14170538152476853, 0.2373470506588764, 0.2373470506588764, 0.2373470506588764, 0.1653382834235274, 0.1653382834235274, 0.1653382834235274, 0.14206577202453086, 0.14206577202453086, 0.14206577202453086, 0.17506049251015465, 0.17506049251015465, 0.17506049251015465, 0.16527067596123457, 0.16527067596123457, 0.16527067596123457, 0.17594550887783966, 0.17594550887783966, 0.17594550887783966, 0.05408184171182162, 0.05408184171182162, 0.05408184171182162, 0.06492372196879892, 0.06492372196879892, 0.06492372196879892, 0.05209672440135038, 0.05209672440135038, 0.05209672440135038]}, "mutation_prompt": null}
