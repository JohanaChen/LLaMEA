{"id": "a21e6143-6bc3-49c8-8eca-a78659337ac1", "solution": "import numpy as np\n\nclass AdaptiveHybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 40\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.adaptive_rate = 0.1\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.positions = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evals += self.population_size\n\n            for i in range(self.population_size):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            if evals >= self.budget:\n                break\n\n            adaptive_local_search = np.random.random() < self.adaptive_rate\n            if adaptive_local_search:\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate_position = self.global_best_position + perturbation\n                candidate_position = np.clip(candidate_position, self.bounds[0], self.bounds[1])\n                candidate_score = func(candidate_position)\n                evals += 1\n                if candidate_score < self.global_best_score:\n                    self.global_best_score = candidate_score\n                    self.global_best_position = candidate_position\n\n            r1, r2 = np.random.rand(2)\n            self.velocities = (self.inertia_weight * self.velocities +\n                               self.cognitive_coeff * r1 * (self.personal_best_positions - self.positions) +\n                               self.social_coeff * r2 * (self.global_best_position - self.positions))\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.bounds[0], self.bounds[1])\n\n        return self.global_best_position", "name": "AdaptiveHybridSwarmOptimization", "description": "Adaptive Hybrid Swarm Optimization (AHSO) combines the explorative power of Particle Swarm Optimization with adaptive local search to efficiently navigate diverse optimization landscapes.", "configspace": "", "generation": 0, "fitness": 0.19453137451488092, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6999409486651165, 0.46742553845521995, 0.5394516514472356, 0.6841085748496137, 0.21345648916685056, 0.5642232952379547, 0.4216829515743249, 0.4222578988472869, 0.6204271631910623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005224869970339219, 0.005838767074895279, 0.02978828771041442, 0.0058791137859569575, 0.009249054700960047, 0.07520146898219005, 0.050387285123496106, 0.05291347101233945, 0.12901427425448653, 0.058844585831293594, 0.03525856019499474, 0.0983890738896267, 0.044034078809636945, 0.06356983055174636, 0.10084670096333648, 0.08081281058664613, 0.025498996729144574, 0.07278815400246164, 0.047967554896476416, 0.10144008909143432, 0.11132504110886243, 0.07143786003539809, 0.05646989787548973, 0.9777616281563458, 0.9904148691873496, 0.9707466336621648, 0.970897558741074, 0.9785507176593801, 0.9787385517125885, 0.9841788643967136, 0.9879719003681734, 0.9875780906342335, 0.044043622638024305, 0.055460872078989865, 9.999999999998899e-05, 0.08819991470018518, 0.12085708718319255, 0.03841890747371157, 0.08884741641401195, 0.057175438911772236, 0.09360617302364116, 0.8246600708364242, 0.16432746525816766, 0.09565661471015885, 0.2108665368553888, 0.11559875601126512, 0.1175681611513244, 0.5264964688357894, 0.15426543984798158, 0.1461829250351826, 0.10068965703293997, 0.12456648615185406, 0.09309916548094921, 0.05725943274039691, 0.08738443116803041, 0.12801735139138803, 0.12255024127041603, 0.10830212218984347, 0.13440244965344883, 0.10901053943092642, 0.13925165208662527, 0.17836433655332584, 0.2027393594651472, 0.26664065977036744, 0.1484323483406943, 0.10414390101012072, 0.09249741520590637, 0.19159881880179574, 0.12422208205111307, 9.999999999998899e-05, 9.999999999998899e-05, 0.044603522606655455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02927850839451185, 0.012136929382929873, 0.018280837871534672, 0.15151330405120567, 0.03689245415941733, 0.17357288790601266, 0.08854043413416424, 0.038052957419147826, 0.018334530834319573, 0.032451001156121095, 0.14502672926676607, 9.999999999998899e-05, 9.999999999998899e-05, 0.050375941117603906, 0.06650115815663704, 0.029280915302849264, 0.07284924836140183, 0.07462306279032671, 0.12594278784379787, 0.1838314497038842, 0.019881768046542514, 0.05609947378037172, 0.04128142014913805, 0.03424663581977461, 0.18091623689901593, 0.12545864978067833, 9.999999999998899e-05, 9.999999999998899e-05, 0.3468059983927727, 0.38155507596224847, 0.439709896150257, 0.42621584548899727, 0.3595006556213176, 0.5126436299394216, 0.4466370967367137, 0.37781746258570137, 0.1874216742218905, 0.0989149428056697, 0.028694422823174137, 0.07642802654793246, 0.08594191125238504, 0.047965153439728625, 0.11209383133066042, 0.06596066396314404, 0.07777152970022161, 0.14086403869476904, 0.15242255699384766, 0.2180044346180927, 0.13748317096632634, 0.2043290248987728, 0.6644677016294875, 0.3233744447636011, 0.22247387726928725, 0.1617634360333735, 0.29609329645313687, 0.26574938284611394, 0.1700678635992543, 0.2843756634457064, 0.35765470108028896, 0.2595228300660499, 0.1645765733750144, 0.1917929285136234, 0.17488148624989208, 0.19069768252054686, 0.2755390662215106, 0.0869225850273515, 0.30357451079139963, 0.23117957178966209, 0.1512073406028106, 0.16246468120764146, 0.23278368241188296, 0.20816455682727375, 0.1555071720407104, 0.19852619741468525, 0.22108955906423677, 0.19387387554817193, 0.21396091213843516, 0.18696511507184066, 0.21576307625105107, 0.15831841263025448, 0.16930705273112745, 0.20772992149094427, 0.1878749774262104, 0.17453410171444317, 0.1701682266733735, 0.1918958590278811, 0.2002273745193761, 0.20070360313591007, 0.1947136084950607, 0.17248017062522503, 0.18199847276518333, 0.16814524613817317, 0.16692361490169738, 0.47406686660849107, 0.15840718036519852, 0.1647922216152663, 0.16868172996551145, 0.2033008513458251, 0.160147159565447, 0.17090230376434012, 0.1278051712945093, 0.0728840035068784, 0.07358148934975384, 0.21923655369435735, 0.08222224933424116, 0.16999568596219994, 0.1603330150023028, 0.5053399955279385, 0.28493182429477526, 0.21950158287219768, 0.18177802054883785, 0.17939165941233692, 0.1801290658648439, 0.1948964300406505, 0.2021942008202423, 0.18950839424273758, 0.2032004004468947, 0.19559204903115113, 0.09380755616938263, 0.08534874417694904, 0.1009595413011597, 0.08879081011181611, 0.08210708987638105, 0.04386146026005422, 0.09315951572810022, 0.09319577915325694, 0.06064051946767779]}, "mutation_prompt": null}
{"id": "92a712c2-3c83-4be0-9a00-5210adc43b33", "solution": "import numpy as np\n\nclass AdaptiveHybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 40\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.adaptive_rate = 0.1\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.positions = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evals = 0\n        while evals < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evals += self.population_size\n\n            for i in range(self.population_size):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            if evals >= self.budget:\n                break\n\n            adaptive_local_search = np.random.random() < self.adaptive_rate\n            if adaptive_local_search:\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate_position = self.global_best_position + perturbation\n                candidate_position = np.clip(candidate_position, self.bounds[0], self.bounds[1])\n                candidate_score = func(candidate_position)\n                evals += 1\n                if candidate_score < self.global_best_score:\n                    self.global_best_score = candidate_score\n                    self.global_best_position = candidate_position\n\n            r1, r2 = np.random.rand(2)\n            self.velocities = (self.inertia_weight * self.velocities +\n                               self.cognitive_coeff * r1 * (self.personal_best_positions - self.positions) +\n                               self.social_coeff * r2 * (self.global_best_position - self.positions))\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.bounds[0], self.bounds[1])\n\n        return self.global_best_position", "name": "AdaptiveHybridSwarmOptimization", "description": "Adaptive Hybrid Swarm Optimization (AHSO) combines the explorative power of Particle Swarm Optimization with adaptive local search to efficiently navigate diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a21e6143-6bc3-49c8-8eca-a78659337ac1", "metadata": {"aucs": [0.6999409486651165, 0.46742553845521995, 0.5394516514472356, 0.6841085748496137, 0.21345648916685056, 0.5642232952379547, 0.4216829515743249, 0.4222578988472869, 0.6204271631910623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005224869970339219, 0.005838767074895279, 0.02978828771041442, 0.0058791137859569575, 0.009249054700960047, 0.07520146898219005, 0.050387285123496106, 0.05291347101233945, 0.12901427425448653, 0.058844585831293594, 0.03525856019499474, 0.0983890738896267, 0.044034078809636945, 0.06356983055174636, 0.10084670096333648, 0.08081281058664613, 0.025498996729144574, 0.07278815400246164, 0.047967554896476416, 0.10144008909143432, 0.11132504110886243, 0.07143786003539809, 0.05646989787548973, 0.9777616281563458, 0.9904148691873496, 0.9707466336621648, 0.970897558741074, 0.9785507176593801, 0.9787385517125885, 0.9841788643967136, 0.9879719003681734, 0.9875780906342335, 0.044043622638024305, 0.055460872078989865, 9.999999999998899e-05, 0.08819991470018518, 0.12085708718319255, 0.03841890747371157, 0.08884741641401195, 0.057175438911772236, 0.09360617302364116, 0.8246600708364242, 0.16432746525816766, 0.09565661471015885, 0.2108665368553888, 0.11559875601126512, 0.1175681611513244, 0.5264964688357894, 0.15426543984798158, 0.1461829250351826, 0.10068965703293997, 0.12456648615185406, 0.09309916548094921, 0.05725943274039691, 0.08738443116803041, 0.12801735139138803, 0.12255024127041603, 0.10830212218984347, 0.13440244965344883, 0.10901053943092642, 0.13925165208662527, 0.17836433655332584, 0.2027393594651472, 0.26664065977036744, 0.1484323483406943, 0.10414390101012072, 0.09249741520590637, 0.19159881880179574, 0.12422208205111307, 9.999999999998899e-05, 9.999999999998899e-05, 0.044603522606655455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02927850839451185, 0.012136929382929873, 0.018280837871534672, 0.15151330405120567, 0.03689245415941733, 0.17357288790601266, 0.08854043413416424, 0.038052957419147826, 0.018334530834319573, 0.032451001156121095, 0.14502672926676607, 9.999999999998899e-05, 9.999999999998899e-05, 0.050375941117603906, 0.06650115815663704, 0.029280915302849264, 0.07284924836140183, 0.07462306279032671, 0.12594278784379787, 0.1838314497038842, 0.019881768046542514, 0.05609947378037172, 0.04128142014913805, 0.03424663581977461, 0.18091623689901593, 0.12545864978067833, 9.999999999998899e-05, 9.999999999998899e-05, 0.3468059983927727, 0.38155507596224847, 0.439709896150257, 0.42621584548899727, 0.3595006556213176, 0.5126436299394216, 0.4466370967367137, 0.37781746258570137, 0.1874216742218905, 0.0989149428056697, 0.028694422823174137, 0.07642802654793246, 0.08594191125238504, 0.047965153439728625, 0.11209383133066042, 0.06596066396314404, 0.07777152970022161, 0.14086403869476904, 0.15242255699384766, 0.2180044346180927, 0.13748317096632634, 0.2043290248987728, 0.6644677016294875, 0.3233744447636011, 0.22247387726928725, 0.1617634360333735, 0.29609329645313687, 0.26574938284611394, 0.1700678635992543, 0.2843756634457064, 0.35765470108028896, 0.2595228300660499, 0.1645765733750144, 0.1917929285136234, 0.17488148624989208, 0.19069768252054686, 0.2755390662215106, 0.0869225850273515, 0.30357451079139963, 0.23117957178966209, 0.1512073406028106, 0.16246468120764146, 0.23278368241188296, 0.20816455682727375, 0.1555071720407104, 0.19852619741468525, 0.22108955906423677, 0.19387387554817193, 0.21396091213843516, 0.18696511507184066, 0.21576307625105107, 0.15831841263025448, 0.16930705273112745, 0.20772992149094427, 0.1878749774262104, 0.17453410171444317, 0.1701682266733735, 0.1918958590278811, 0.2002273745193761, 0.20070360313591007, 0.1947136084950607, 0.17248017062522503, 0.18199847276518333, 0.16814524613817317, 0.16692361490169738, 0.47406686660849107, 0.15840718036519852, 0.1647922216152663, 0.16868172996551145, 0.2033008513458251, 0.160147159565447, 0.17090230376434012, 0.1278051712945093, 0.0728840035068784, 0.07358148934975384, 0.21923655369435735, 0.08222224933424116, 0.16999568596219994, 0.1603330150023028, 0.5053399955279385, 0.28493182429477526, 0.21950158287219768, 0.18177802054883785, 0.17939165941233692, 0.1801290658648439, 0.1948964300406505, 0.2021942008202423, 0.18950839424273758, 0.2032004004468947, 0.19559204903115113, 0.09380755616938263, 0.08534874417694904, 0.1009595413011597, 0.08879081011181611, 0.08210708987638105, 0.04386146026005422, 0.09315951572810022, 0.09319577915325694, 0.06064051946767779]}, "mutation_prompt": null}
