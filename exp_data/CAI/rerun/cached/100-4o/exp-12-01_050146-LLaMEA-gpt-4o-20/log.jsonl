{"id": "950ab76f-e338-4bc4-ba4e-1aa24d32b2a1", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50  # Number of particles\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.differential_weight = 0.8\n        self.crossover_rate = 0.9\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.position = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_value = float('inf')\n        self.evaluate_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        while self.evaluate_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.evaluate_count < self.budget:\n                    current_value = func(self.position[i])\n                    self.evaluate_count += 1\n                    if current_value < self.personal_best_value[i]:\n                        self.personal_best_value[i] = current_value\n                        self.personal_best_position[i] = self.position[i]\n                    if current_value < self.global_best_value:\n                        self.global_best_value = current_value\n                        self.global_best_position = self.position[i]\n            \n            # Update velocity and position using PSO\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (self.personal_best_position[i] - self.position[i])\n                social_velocity = self.social_component * r2 * (self.global_best_position - self.position[i])\n                self.velocity[i] = (self.inertia_weight * self.velocity[i]\n                                    + cognitive_velocity\n                                    + social_velocity)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], self.lower_bound, self.upper_bound)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                if self.evaluate_count < self.budget:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                    mutant_vector = self.position[a] + self.differential_weight * (self.position[b] - self.position[c])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    trial_vector = np.copy(self.position[i])\n                    crossover = np.random.rand(self.dim) < self.crossover_rate\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    trial_value = func(trial_vector)\n                    self.evaluate_count += 1\n                    if trial_value < self.personal_best_value[i]:\n                        self.position[i] = trial_vector\n                        self.personal_best_value[i] = trial_value\n                        self.personal_best_position[i] = trial_vector\n                    if trial_value < self.global_best_value:\n                        self.global_best_value = trial_value\n                        self.global_best_position = trial_vector\n\n        return self.global_best_position, self.global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.2091814917589342, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.46520076984573544, 0.43307445234540565, 0.4574696061415858, 0.4123376492236126, 0.4888885592349691, 0.4450818163274495, 0.4845013947537373, 0.43609311717283306, 0.42537143476697825, 0.11417940621592093, 0.15174596520293304, 0.06311358645155818, 0.08520663995234878, 0.13083589377771443, 0.12605065218932854, 0.08570958204326729, 0.1396769946502624, 0.07365340620474292, 0.11932002047612733, 0.08952307887553779, 0.11377485787081587, 0.13506494525832935, 0.07831263592992765, 0.11861239766887643, 0.0980140305424062, 0.1001715473821323, 0.12176774831081527, 0.11649721783418432, 0.09020083937265522, 0.10111167361464746, 0.08730079034011284, 0.08157051485579925, 0.10250484035729679, 0.09271066534538708, 0.09541233909398106, 0.12205584062410468, 0.9760390120891783, 0.9785563889964026, 0.9759740078434229, 0.9675318216276289, 0.9734396506673013, 0.9759496694207325, 0.9767213207105655, 0.9861543918529603, 0.9777122976137981, 0.2002737183044343, 0.22207079090695325, 0.2700670287261321, 0.250215825791575, 0.23520429845537993, 0.14762788963771423, 0.2370651109134848, 0.2585718652249761, 0.22327006581255593, 0.2900670643021185, 0.25225844701264855, 0.2445655672247935, 0.06824797475286737, 0.28891814632266555, 0.18556745619587223, 0.16475481288729332, 0.38095252987933914, 0.46815073165204024, 0.1461465478596048, 0.165264618368421, 0.1260491926295041, 0.08522729272366947, 0.15763431661852467, 0.14340299047668126, 0.12246538790311368, 0.12061834717075637, 0.12359664896171485, 0.11492416392319882, 0.05040285392703425, 0.11505199197867055, 0.11115560133594626, 0.13435089470077222, 0.16366715902899254, 0.0996319932276889, 0.14652409902875074, 0.11104259214417489, 0.01261597687717153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005114273353774568, 0.0054938100419335, 9.999999999998899e-05, 0.021170718946501577, 0.026193538457744525, 9.999999999998899e-05, 0.058204817716775326, 0.07917904901661099, 0.0851100043784796, 0.011880258852777326, 0.032016626510576685, 0.07503474505955077, 0.08427101722395403, 0.04620053731877283, 0.013422052178992838, 0.03836045590173576, 0.032307800515435914, 0.013342328603422327, 0.034578656389964046, 0.03035963803275188, 0.032037671498491904, 0.0244428020570584, 0.03413816585703866, 0.025390546586620655, 0.0592388178921498, 0.06735292696912287, 0.05246312883945903, 0.03181740350365048, 0.05741731642094583, 0.05134579055918931, 0.06789662662512541, 0.06097055401041762, 0.04592301126061049, 0.40597035088253064, 0.3906267763367298, 0.35668237904667444, 0.3993312536522895, 0.38103339196672714, 0.36107008121817974, 0.3774398604682697, 0.39184386788505576, 0.38730072808638794, 0.12825983074506442, 0.07180848518134786, 0.07211600761227566, 0.09120771564839159, 0.11612199958601233, 0.09592771007538592, 0.09711164279964035, 0.09178025964208425, 0.10411438290468444, 0.185487885281846, 0.13842488451324642, 0.18976142038152544, 0.1718530434410901, 0.24982614356739208, 0.19730835910550248, 0.20451421674907344, 0.20350096113913985, 0.18857282608405512, 0.28730908492936125, 0.2584544380983057, 0.2414758510838726, 0.2663258576523073, 0.2994487084583165, 0.32918571353109405, 0.2437809203977339, 0.3104889187543962, 0.24481909370187838, 0.20759136415717638, 0.17853758281059184, 0.23843328090953797, 0.172049543246531, 0.2189670541468477, 0.23101434851309188, 0.14256469514745673, 0.24112533434495298, 0.1828394513054019, 0.22087182421625184, 0.2480112107879341, 0.19133869217086408, 0.22406660246320287, 0.21312817498716952, 0.1779478904857975, 0.2075428489325254, 0.19956160215459962, 0.1890938746606332, 0.1995655022856626, 0.2339675860797178, 0.19373087406399703, 0.22793781868675334, 0.2031003985397749, 0.17900247424303617, 0.2094809575712665, 0.17677957205614603, 0.17645757517421823, 0.12918298594127697, 0.594176410792145, 0.6284282044352187, 0.16112142030441623, 0.2043566891226577, 0.16715300403632394, 0.42914001020214865, 0.6376368815852587, 0.1359597152307479, 0.16451114923373278, 0.16557134323193734, 0.1201779433686947, 0.3867061723045968, 0.1935435540883752, 0.29704924735495597, 0.16796205397145025, 0.14968190110284252, 0.40364258273468157, 0.18215112044258785, 0.18826649666320416, 0.21853908532395294, 0.187017105479798, 0.1828795157188713, 0.18285426953027917, 0.1708280004962871, 0.1951960755449692, 0.17483121033329085, 0.07878073287123222, 0.07885092991143683, 0.0764780135399733, 0.08258153576634308, 0.08731263763185904, 0.07766450664252023, 0.07561225784889702, 0.09655677695649478, 0.089517786913336]}, "mutation_prompt": null}
{"id": "21701233-f99b-4833-b2cc-dbebd0449eae", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50  # Number of particles\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.differential_weight = 0.8\n        self.crossover_rate = 0.9\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.position = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_value = float('inf')\n        self.evaluate_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        while self.evaluate_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.evaluate_count < self.budget:\n                    current_value = func(self.position[i])\n                    self.evaluate_count += 1\n                    if current_value < self.personal_best_value[i]:\n                        self.personal_best_value[i] = current_value\n                        self.personal_best_position[i] = self.position[i]\n                    if current_value < self.global_best_value:\n                        self.global_best_value = current_value\n                        self.global_best_position = self.position[i]\n            \n            # Update velocity and position using PSO\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (self.personal_best_position[i] - self.position[i])\n                social_velocity = self.social_component * r2 * (self.global_best_position - self.position[i])\n                self.velocity[i] = (self.inertia_weight * self.velocity[i]\n                                    + cognitive_velocity\n                                    + social_velocity)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], self.lower_bound, self.upper_bound)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                if self.evaluate_count < self.budget:\n                    a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                    mutant_vector = self.position[a] + self.differential_weight * (self.position[b] - self.position[c])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    trial_vector = np.copy(self.position[i])\n                    crossover = np.random.rand(self.dim) < self.crossover_rate\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    trial_value = func(trial_vector)\n                    self.evaluate_count += 1\n                    if trial_value < self.personal_best_value[i]:\n                        self.position[i] = trial_vector\n                        self.personal_best_value[i] = trial_value\n                        self.personal_best_position[i] = trial_vector\n                    if trial_value < self.global_best_value:\n                        self.global_best_value = trial_value\n                        self.global_best_position = trial_vector\n\n        return self.global_best_position, self.global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "950ab76f-e338-4bc4-ba4e-1aa24d32b2a1", "metadata": {"aucs": [0.46520076984573544, 0.43307445234540565, 0.4574696061415858, 0.4123376492236126, 0.4888885592349691, 0.4450818163274495, 0.4845013947537373, 0.43609311717283306, 0.42537143476697825, 0.11417940621592093, 0.15174596520293304, 0.06311358645155818, 0.08520663995234878, 0.13083589377771443, 0.12605065218932854, 0.08570958204326729, 0.1396769946502624, 0.07365340620474292, 0.11932002047612733, 0.08952307887553779, 0.11377485787081587, 0.13506494525832935, 0.07831263592992765, 0.11861239766887643, 0.0980140305424062, 0.1001715473821323, 0.12176774831081527, 0.11649721783418432, 0.09020083937265522, 0.10111167361464746, 0.08730079034011284, 0.08157051485579925, 0.10250484035729679, 0.09271066534538708, 0.09541233909398106, 0.12205584062410468, 0.9760390120891783, 0.9785563889964026, 0.9759740078434229, 0.9675318216276289, 0.9734396506673013, 0.9759496694207325, 0.9767213207105655, 0.9861543918529603, 0.9777122976137981, 0.2002737183044343, 0.22207079090695325, 0.2700670287261321, 0.250215825791575, 0.23520429845537993, 0.14762788963771423, 0.2370651109134848, 0.2585718652249761, 0.22327006581255593, 0.2900670643021185, 0.25225844701264855, 0.2445655672247935, 0.06824797475286737, 0.28891814632266555, 0.18556745619587223, 0.16475481288729332, 0.38095252987933914, 0.46815073165204024, 0.1461465478596048, 0.165264618368421, 0.1260491926295041, 0.08522729272366947, 0.15763431661852467, 0.14340299047668126, 0.12246538790311368, 0.12061834717075637, 0.12359664896171485, 0.11492416392319882, 0.05040285392703425, 0.11505199197867055, 0.11115560133594626, 0.13435089470077222, 0.16366715902899254, 0.0996319932276889, 0.14652409902875074, 0.11104259214417489, 0.01261597687717153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005114273353774568, 0.0054938100419335, 9.999999999998899e-05, 0.021170718946501577, 0.026193538457744525, 9.999999999998899e-05, 0.058204817716775326, 0.07917904901661099, 0.0851100043784796, 0.011880258852777326, 0.032016626510576685, 0.07503474505955077, 0.08427101722395403, 0.04620053731877283, 0.013422052178992838, 0.03836045590173576, 0.032307800515435914, 0.013342328603422327, 0.034578656389964046, 0.03035963803275188, 0.032037671498491904, 0.0244428020570584, 0.03413816585703866, 0.025390546586620655, 0.0592388178921498, 0.06735292696912287, 0.05246312883945903, 0.03181740350365048, 0.05741731642094583, 0.05134579055918931, 0.06789662662512541, 0.06097055401041762, 0.04592301126061049, 0.40597035088253064, 0.3906267763367298, 0.35668237904667444, 0.3993312536522895, 0.38103339196672714, 0.36107008121817974, 0.3774398604682697, 0.39184386788505576, 0.38730072808638794, 0.12825983074506442, 0.07180848518134786, 0.07211600761227566, 0.09120771564839159, 0.11612199958601233, 0.09592771007538592, 0.09711164279964035, 0.09178025964208425, 0.10411438290468444, 0.185487885281846, 0.13842488451324642, 0.18976142038152544, 0.1718530434410901, 0.24982614356739208, 0.19730835910550248, 0.20451421674907344, 0.20350096113913985, 0.18857282608405512, 0.28730908492936125, 0.2584544380983057, 0.2414758510838726, 0.2663258576523073, 0.2994487084583165, 0.32918571353109405, 0.2437809203977339, 0.3104889187543962, 0.24481909370187838, 0.20759136415717638, 0.17853758281059184, 0.23843328090953797, 0.172049543246531, 0.2189670541468477, 0.23101434851309188, 0.14256469514745673, 0.24112533434495298, 0.1828394513054019, 0.22087182421625184, 0.2480112107879341, 0.19133869217086408, 0.22406660246320287, 0.21312817498716952, 0.1779478904857975, 0.2075428489325254, 0.19956160215459962, 0.1890938746606332, 0.1995655022856626, 0.2339675860797178, 0.19373087406399703, 0.22793781868675334, 0.2031003985397749, 0.17900247424303617, 0.2094809575712665, 0.17677957205614603, 0.17645757517421823, 0.12918298594127697, 0.594176410792145, 0.6284282044352187, 0.16112142030441623, 0.2043566891226577, 0.16715300403632394, 0.42914001020214865, 0.6376368815852587, 0.1359597152307479, 0.16451114923373278, 0.16557134323193734, 0.1201779433686947, 0.3867061723045968, 0.1935435540883752, 0.29704924735495597, 0.16796205397145025, 0.14968190110284252, 0.40364258273468157, 0.18215112044258785, 0.18826649666320416, 0.21853908532395294, 0.187017105479798, 0.1828795157188713, 0.18285426953027917, 0.1708280004962871, 0.1951960755449692, 0.17483121033329085, 0.07878073287123222, 0.07885092991143683, 0.0764780135399733, 0.08258153576634308, 0.08731263763185904, 0.07766450664252023, 0.07561225784889702, 0.09655677695649478, 0.089517786913336]}, "mutation_prompt": null}
