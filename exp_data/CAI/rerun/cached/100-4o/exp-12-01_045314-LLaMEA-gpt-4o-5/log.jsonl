{"id": "1287bcaf-fa7e-4a17-a034-b1738d6f63fd", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.population_size, dim))\n        self.best_personal_positions = np.copy(self.particles)\n        self.best_personal_scores = np.full(self.population_size, np.inf)\n        self.best_global_position = None\n        self.best_global_score = np.inf\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def evaluate_population(self, func):\n        scores = np.array([func(p) for p in self.particles])\n        for i, score in enumerate(scores):\n            if score < self.best_personal_scores[i]:\n                self.best_personal_scores[i] = score\n                self.best_personal_positions[i] = self.particles[i]\n            if score < self.best_global_score:\n                self.best_global_score = score\n                self.best_global_position = self.particles[i]\n        return scores\n\n    def update_velocities_and_positions(self):\n        w = 0.5  # inertia weight\n        c1 = 1.5  # cognitive parameter\n        c2 = 1.5  # social parameter\n        r1, r2 = np.random.rand(2)\n\n        for i in range(self.population_size):\n            cognitive_component = c1 * r1 * (self.best_personal_positions[i] - self.particles[i])\n            social_component = c2 * r2 * (self.best_global_position - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive_component + social_component\n            self.particles[i] += self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], -5.0, 5.0)\n\n    def differential_evolution_step(self):\n        new_population = np.copy(self.particles)\n        for i in range(self.population_size):\n            indices = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            mutant_vector = np.clip(self.particles[a] + self.F * (self.particles[b] - self.particles[c]), -5.0, 5.0)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial_vector = np.where(crossover, mutant_vector, self.particles[i])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            if func(trial_vector) < func(self.particles[i]):\n                new_population[i] = trial_vector\n        self.particles = new_population\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            self.evaluate_population(func)\n            self.update_velocities_and_positions()\n            self.differential_evolution_step()\n            evaluations += self.population_size\n        return self.best_global_position, self.best_global_score", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution for robust exploration-exploitation balance in diverse optimization landscapes.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 59, in __call__\n  File \"<string>\", line 50, in differential_evolution_step\nNameError: name 'func' is not defined\n.", "error": "NameError(\"name 'func' is not defined\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 59, in __call__\n  File \"<string>\", line 50, in differential_evolution_step\nNameError: name 'func' is not defined\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "59bc0d50-6d06-40ea-b48a-4165b834743b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.population_size, dim))\n        self.best_personal_positions = np.copy(self.particles)\n        self.best_personal_scores = np.full(self.population_size, np.inf)\n        self.best_global_position = None\n        self.best_global_score = np.inf\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def evaluate_population(self, func):\n        scores = np.array([func(p) for p in self.particles])\n        for i, score in enumerate(scores):\n            if score < self.best_personal_scores[i]:\n                self.best_personal_scores[i] = score\n                self.best_personal_positions[i] = self.particles[i]\n            if score < self.best_global_score:\n                self.best_global_score = score\n                self.best_global_position = self.particles[i]\n        return scores\n\n    def update_velocities_and_positions(self):\n        w = 0.5  # inertia weight\n        c1 = 1.5  # cognitive parameter\n        c2 = 1.5  # social parameter\n        r1, r2 = np.random.rand(2)\n\n        for i in range(self.population_size):\n            cognitive_component = c1 * r1 * (self.best_personal_positions[i] - self.particles[i])\n            social_component = c2 * r2 * (self.best_global_position - self.particles[i])\n            self.velocities[i] = w * self.velocities[i] + cognitive_component + social_component\n            self.particles[i] += self.velocities[i]\n            self.particles[i] = np.clip(self.particles[i], -5.0, 5.0)\n\n    def differential_evolution_step(self, func):  # Changed line: added func parameter\n        new_population = np.copy(self.particles)\n        for i in range(self.population_size):\n            indices = [idx for idx in range(self.population_size) if idx != i]\n            a, b, c = np.random.choice(indices, 3, replace=False)\n            mutant_vector = np.clip(self.particles[a] + self.F * (self.particles[b] - self.particles[c]), -5.0, 5.0)\n            crossover = np.random.rand(self.dim) < self.CR\n            trial_vector = np.where(crossover, mutant_vector, self.particles[i])\n            trial_vector = np.clip(trial_vector, -5.0, 5.0)\n            if func(trial_vector) < func(self.particles[i]):\n                new_population[i] = trial_vector\n        self.particles = new_population\n\n    def __call__(self, func):\n        evaluations = 0\n        elite_particle = np.copy(self.best_global_position)  # New line: track an elite particle\n        while evaluations < self.budget:\n            self.evaluate_population(func)\n            self.update_velocities_and_positions()\n            self.differential_evolution_step(func)  # Changed line: pass func to DE step\n            self.particles[0] = elite_particle  # New line: reintroduce elite particle\n            evaluations += self.population_size\n        return self.best_global_position, self.best_global_score", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution, adding an elite strategy for enhanced convergence speed and solution quality.", "configspace": "", "generation": 1, "fitness": 0.24725307883709358, "feedback": "", "error": "", "parent_id": "1287bcaf-fa7e-4a17-a034-b1738d6f63fd", "metadata": {"aucs": [0.6234312098922775, 0.5984446037574758, 0.6076628779705135, 0.6562404469893844, 0.46522504679158716, 0.18612763487906647, 0.6547255411426678, 0.5699031254574222, 0.5225704664777823, 0.20383885728855367, 0.14823098400815948, 0.17717132915842793, 0.23884392610195482, 0.027515659982948137, 0.10518744164044802, 9.999999999998899e-05, 0.06790679599439531, 0.016229698246154167, 0.11147482725132163, 0.0785258020899664, 0.0790718885637951, 0.10635904476472646, 0.1072258928723333, 0.0839818153355183, 0.08323617042356346, 0.12031609520438691, 0.11557375136022585, 0.06112939214821067, 0.09635864686516393, 0.07332765033600663, 0.10659549396933088, 0.08752595776618544, 0.08066259988237257, 0.08534070115375503, 0.0861116879655448, 0.1063173046473943, 0.967828113062735, 0.9534003528710233, 0.9689630933557033, 0.9439283259112868, 0.7417391372991875, 0.9298882174065685, 0.9666307275389878, 0.9678816051647721, 0.9676919370639114, 0.3250436793381333, 0.16884803870218568, 0.054621149499587185, 0.2893314482932611, 0.29677817307337373, 0.14159111280675662, 0.40341841151659596, 0.29255375984558263, 0.0830922063836429, 0.6012671726751668, 0.4703638762654342, 0.42629700277828864, 0.19942332595669543, 0.7473588758898351, 0.18757474186230472, 0.5917240186737742, 0.6795140787479699, 0.4333797546956657, 0.17634213365545925, 0.21549593382165533, 0.10925478151991852, 0.05022105411740485, 0.1592977829004536, 0.08072796083122102, 0.3017370231792593, 0.3163337110455151, 0.10746587439784305, 0.18835006535829857, 0.171383321163604, 0.15684438365356712, 0.20494039654735774, 0.1771988788249944, 0.14089713144762006, 0.33203882496263215, 0.22123187411985457, 0.12214972519156386, 0.0515425745820175, 0.07097427891856134, 0.07394712021153005, 0.008487342396504949, 0.29229820361175973, 0.010893908835601596, 0.12285034270920225, 0.11565478564583642, 0.05519705180229417, 0.16828235023644722, 0.11332603289886922, 0.06609156362509327, 0.2262328846101469, 0.07217016278916, 0.2159517011948665, 0.10320588706322231, 0.3980702814335898, 0.04307446767640832, 9.999999999998899e-05, 0.17691651604517977, 0.0752562804663004, 0.054353618189524555, 0.06154210391926718, 0.04806617946209957, 0.10079360133447623, 0.05542475679728831, 0.09534972248164597, 0.08368365542537448, 0.19487056126555602, 0.1891207810369715, 0.19231990586583647, 0.20536442834161994, 0.0051310733838608735, 0.08676027817749588, 0.14108901445815758, 0.06738964515710522, 0.5662261719188657, 0.5408803291946971, 0.33668103822475803, 0.5156295915731235, 0.46220487244480135, 0.22093309291882102, 0.35195939816929933, 0.48392836290041985, 0.4021317552164161, 0.06274864997033802, 0.10750718023619465, 0.08649800793116269, 0.08595842625749506, 0.07913243023643557, 0.08499978685634835, 0.08613362477168118, 0.08111608684231653, 0.07555554840420753, 0.15018993673320913, 0.19741242131035508, 0.20045790290350007, 0.23880163956628508, 0.27994241657045127, 0.18815527101770635, 0.15235301788092148, 0.14549310225869216, 0.1426454986725315, 0.2583369478304296, 0.3618576179622012, 0.3022145818628196, 0.3547524300076459, 0.24169420988290147, 0.29028867112680057, 0.33342504119622485, 0.31992244946817716, 0.2689860159511497, 0.2530637736858077, 0.26735831302448054, 0.18038137370666574, 0.22552126303093833, 0.24844897562158053, 0.16262516873547994, 0.17615434213955572, 0.24182333696593306, 0.2285121110543401, 0.1980500355854965, 0.19086967810410815, 0.16583704178859748, 0.19944275525453825, 0.18974546646993629, 0.1710646665010308, 0.1864608977079265, 0.19725816229793902, 0.21306923672236244, 0.1849691273228864, 0.18528705874380824, 0.1701598289900479, 0.2236714762580505, 0.19373326131086321, 0.1820902575865494, 0.1820748424738191, 0.19968507797163648, 0.17670257343139295, 0.7307216781853403, 0.6248237205578032, 0.18267259985650786, 0.8381466228579237, 0.1957425124128217, 0.16254517619844588, 0.13906405372071118, 0.15538241479611803, 0.33756267324974865, 0.7424145813904206, 0.21024944891978403, 0.07315908280061612, 0.3078356892905548, 0.5256837507326619, 0.13754882064201213, 0.7086284402733909, 0.7589410072381756, 0.19488884800870032, 0.18006245617540895, 0.17904765787552246, 0.18311593508549473, 0.1844398691157897, 0.17671458267460072, 0.18066381880684856, 0.16926990860770563, 0.17838114493433221, 0.17233204331148722, 0.09662100552381747, 0.07795624393321454, 0.07468349842785049, 0.07896038515889725, 0.06807108636234638, 0.07314407355348795, 0.09835800627098701, 0.07365095951349254, 0.07165097974949819]}, "mutation_prompt": null}
