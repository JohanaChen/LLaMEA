{"id": "32ffe10d-8060-4c42-a289-0dcd9073c4bc", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.population_size, dim))\n        self.p_best = self.population.copy()\n        self.g_best = None\n        self.p_best_scores = np.full(self.population_size, np.inf)\n        self.g_best_score = np.inf\n        self.best_individual = None\n        self.best_score = np.inf\n        self.evals = 0\n\n    def __call__(self, func):\n        w = 0.7  # Inertia weight\n        c1 = 1.5  # Cognitive component\n        c2 = 1.5  # Social component\n        \n        while self.evals < self.budget:\n            for i in range(self.population_size):\n                score = func(self.population[i])\n                self.evals += 1\n                \n                if score < self.p_best_scores[i]:\n                    self.p_best_scores[i] = score\n                    self.p_best[i] = self.population[i].copy()\n                \n                if score < self.g_best_score:\n                    self.g_best_score = score\n                    self.g_best = self.population[i].copy()\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = (\n                    w * self.velocities[i] +\n                    c1 * r1 * (self.p_best[i] - self.population[i]) +\n                    c2 * r2 * (self.g_best - self.population[i])\n                )\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], -5.0, 5.0)\n                \n            # Evolutionary phase - simulated binary crossover and mutation\n            if self.evals < 0.5 * self.budget:\n                for i in range(0, self.population_size, 2):\n                    if np.random.rand() < 0.9:  # Crossover probability\n                        parent1, parent2 = self.population[i], self.population[i+1]\n                        child1, child2 = self.simulated_binary_crossover(parent1, parent2)\n                        self.population[i], self.population[i+1] = child1, child2\n\n                for i in range(self.population_size):\n                    if np.random.rand() < 0.1:  # Mutation probability\n                        self.population[i] = self.polynomial_mutation(self.population[i])\n\n        self.best_individual = self.g_best\n        self.best_score = self.g_best_score\n        return self.best_individual\n\n    def simulated_binary_crossover(self, parent1, parent2, eta=10):\n        child1, child2 = np.empty_like(parent1), np.empty_like(parent2)\n        for j in range(self.dim):\n            u = np.random.rand()\n            if u <= 0.5:\n                beta = (2 * u) ** (1 / (eta + 1))\n            else:\n                beta = (1 / (2 * (1 - u))) ** (1 / (eta + 1))\n            child1[j] = 0.5 * ((1 + beta) * parent1[j] + (1 - beta) * parent2[j])\n            child2[j] = 0.5 * ((1 - beta) * parent1[j] + (1 + beta) * parent2[j])\n        return np.clip(child1, -5.0, 5.0), np.clip(child2, -5.0, 5.0)\n\n    def polynomial_mutation(self, individual, eta=20):\n        mutant = np.copy(individual)\n        for j in range(self.dim):\n            if np.random.rand() < 1 / self.dim:\n                delta = (2 * np.random.rand()) ** (1 / (eta + 1)) - 1\n                mutant[j] += delta\n        return np.clip(mutant, -5.0, 5.0)", "name": "HybridEvoSwarmOptimizer", "description": "A hybrid evolutionary and swarm-based optimization algorithm that dynamically balances exploration and exploitation by adaptively adjusting search strategies based on performance feedback and diversity metrics.", "configspace": "", "generation": 0, "fitness": 0.30466855620852656, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8897661674274427, 0.8957560940986855, 0.8934007709859149, 0.8758807475415965, 0.8322954772585006, 0.8747617630941597, 0.8664392475871394, 0.8826939317421457, 0.8844180674181474, 0.5311528050740617, 0.5133733663594002, 0.5446711748715062, 0.5755029662612883, 0.5256728800202976, 0.4727013513419177, 0.4556724226808724, 0.5473283265943755, 0.4580200569418291, 0.07272663868465334, 0.05178229910463539, 0.06856944883691107, 0.06868818990832082, 0.09326274693228132, 0.06543343353880249, 0.08568807447542093, 0.0840388057139555, 0.07313413083734299, 0.09374035910287837, 0.14495340505699128, 0.06225775623917029, 0.07332658272799364, 0.0734822759225513, 0.09027333508158297, 0.036106755124348244, 0.13276037653636885, 0.0642242204846627, 0.9928509594833268, 0.9886653338410115, 0.9937203264587081, 0.9868626018383273, 0.9926479210624983, 0.9873086419897165, 0.9912509689600527, 0.9934786216666484, 0.9910487047406811, 0.5656894298432198, 0.7060023475227, 0.5743938885913463, 0.661107188596709, 0.7030303510161375, 0.6477379015412874, 0.597684244300902, 0.6688115023113516, 0.5945900468373619, 0.36632438522206323, 0.21627750757125896, 0.24587721816621144, 0.04381310448747211, 0.21473628512619636, 0.20837689381785574, 0.07655797517925167, 0.15233728221052967, 0.13339798516559676, 0.5867371843959653, 0.13154542887519893, 0.5073746281293092, 0.6267275948339404, 0.13100349253503063, 0.5497157962638196, 0.13428629281232318, 0.5552530624887028, 0.13466922056245056, 0.5438851850584447, 0.5530051962237791, 0.13473049656078095, 0.612096993750511, 0.5188329805211894, 0.5786725750825711, 0.5968548443492616, 0.5056668192003515, 0.12699841050917804, 0.08384491413442519, 0.049173951561893414, 0.050319627069467465, 0.039751736457845466, 0.06659293452458481, 0.07731077694924693, 0.06437795354411902, 0.12731404439736127, 0.1466049435802983, 0.12981052445244168, 0.0881516443879724, 0.07783683291787691, 0.10279505215210305, 0.058462796044329246, 0.035570884163511285, 0.29750477962115296, 0.07957998710970093, 0.06826997016839109, 0.05428056845110496, 0.14693880345217203, 0.1145713949035424, 0.08380540023856808, 0.3286710868518772, 0.08590045908486499, 0.22343792007434038, 0.17384265060710236, 0.08363777998858535, 0.05912200760365216, 0.36862622854046123, 0.4227521500118505, 0.006729694110047646, 0.059163791480661754, 0.006647107447410594, 0.1645717924226232, 0.05742509645209681, 0.08518774831082687, 0.6298134037586787, 0.6485595244219546, 0.5866629540293989, 0.5905369803311176, 0.6071366477827892, 0.5921278036913616, 0.6805819246572246, 0.6823909514589457, 0.6356922372784772, 0.08093507912815734, 0.09456373137936136, 0.06999845571069085, 0.09387516312559929, 0.083175426051182, 0.11895479693491395, 0.09274218717594263, 0.10577341910137184, 0.08131883763394965, 0.19437124019387386, 0.3742252087070007, 0.14108342923761885, 0.258424294613517, 0.49098619865031634, 0.14499440541983333, 0.44624881930949767, 0.26589414512036924, 0.2843225455153824, 0.19959782554439787, 0.2912219379456288, 0.43847003668284545, 0.40412727021141015, 0.17640233903157643, 0.1792642763153266, 0.1999943895531484, 0.45871941845184927, 0.15064261729283368, 0.22039643225560757, 0.135495048021946, 0.18102499992543153, 0.249347715684608, 0.22770990660910106, 0.17228836835639283, 0.1907260974540156, 0.264805289339871, 0.07432457938092607, 0.232376730666226, 0.18598928990805064, 0.2127942036788102, 0.18634582029433355, 0.1746341516737433, 0.21759406861848452, 0.23249299789601086, 0.1800575214527944, 0.21549784833016628, 0.20389893762535494, 0.20547019910239983, 0.193660873518685, 0.22907865446926967, 0.1707490674428227, 0.21050310772245462, 0.16869346657168427, 0.25093561616731275, 0.1847120284510353, 0.10559110869761457, 0.18935413961077152, 0.15487210374703786, 0.17313128433285985, 0.20196810241827357, 0.2016923735347138, 0.12355480077271097, 0.17051010918818443, 0.15929111074487423, 0.08316291880348703, 0.20803412116116438, 0.05196092178808431, 0.10441471198099628, 0.1697106048344441, 0.21121019313989498, 0.21339943838234265, 0.9013697241005321, 0.8838062438861528, 0.19606463749401326, 0.20750498827942088, 0.21401758617038558, 0.2002372727892795, 0.2119112934603844, 0.2222921497572502, 0.22596365308374566, 0.20523376748492128, 0.19815004707818806, 0.0879500832747997, 0.06381073476502808, 0.09778096092229649, 0.09671148873197821, 0.07509919023437561, 0.07468259336127614, 0.06733212946605904, 0.06890438282889988, 0.09711692409232386]}, "mutation_prompt": null}
{"id": "9f2994f5-642a-41ad-b350-56692ed85cbc", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.population_size, dim))\n        self.p_best = self.population.copy()\n        self.g_best = None\n        self.p_best_scores = np.full(self.population_size, np.inf)\n        self.g_best_score = np.inf\n        self.best_individual = None\n        self.best_score = np.inf\n        self.evals = 0\n\n    def __call__(self, func):\n        w = 0.7  # Inertia weight\n        c1 = 1.5  # Cognitive component\n        c2 = 1.5  # Social component\n        \n        while self.evals < self.budget:\n            for i in range(self.population_size):\n                score = func(self.population[i])\n                self.evals += 1\n                \n                if score < self.p_best_scores[i]:\n                    self.p_best_scores[i] = score\n                    self.p_best[i] = self.population[i].copy()\n                \n                if score < self.g_best_score:\n                    self.g_best_score = score\n                    self.g_best = self.population[i].copy()\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = (\n                    w * self.velocities[i] +\n                    c1 * r1 * (self.p_best[i] - self.population[i]) +\n                    c2 * r2 * (self.g_best - self.population[i])\n                )\n                self.population[i] += self.velocities[i]\n                self.population[i] = np.clip(self.population[i], -5.0, 5.0)\n                \n            # Evolutionary phase - simulated binary crossover and mutation\n            if self.evals < 0.5 * self.budget:\n                for i in range(0, self.population_size, 2):\n                    if np.random.rand() < 0.9:  # Crossover probability\n                        parent1, parent2 = self.population[i], self.population[i+1]\n                        child1, child2 = self.simulated_binary_crossover(parent1, parent2)\n                        self.population[i], self.population[i+1] = child1, child2\n\n                for i in range(self.population_size):\n                    if np.random.rand() < 0.1:  # Mutation probability\n                        self.population[i] = self.polynomial_mutation(self.population[i])\n\n        self.best_individual = self.g_best\n        self.best_score = self.g_best_score\n        return self.best_individual\n\n    def simulated_binary_crossover(self, parent1, parent2, eta=10):\n        child1, child2 = np.empty_like(parent1), np.empty_like(parent2)\n        for j in range(self.dim):\n            u = np.random.rand()\n            if u <= 0.5:\n                beta = (2 * u) ** (1 / (eta + 1))\n            else:\n                beta = (1 / (2 * (1 - u))) ** (1 / (eta + 1))\n            child1[j] = 0.5 * ((1 + beta) * parent1[j] + (1 - beta) * parent2[j])\n            child2[j] = 0.5 * ((1 - beta) * parent1[j] + (1 + beta) * parent2[j])\n        return np.clip(child1, -5.0, 5.0), np.clip(child2, -5.0, 5.0)\n\n    def polynomial_mutation(self, individual, eta=20):\n        mutant = np.copy(individual)\n        for j in range(self.dim):\n            if np.random.rand() < 1 / self.dim:\n                delta = (2 * np.random.rand()) ** (1 / (eta + 1)) - 1\n                mutant[j] += delta\n        return np.clip(mutant, -5.0, 5.0)", "name": "HybridEvoSwarmOptimizer", "description": "A hybrid evolutionary and swarm-based optimization algorithm that dynamically balances exploration and exploitation by adaptively adjusting search strategies based on performance feedback and diversity metrics.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "32ffe10d-8060-4c42-a289-0dcd9073c4bc", "metadata": {"aucs": [0.8897661674274427, 0.8957560940986855, 0.8934007709859149, 0.8758807475415965, 0.8322954772585006, 0.8747617630941597, 0.8664392475871394, 0.8826939317421457, 0.8844180674181474, 0.5311528050740617, 0.5133733663594002, 0.5446711748715062, 0.5755029662612883, 0.5256728800202976, 0.4727013513419177, 0.4556724226808724, 0.5473283265943755, 0.4580200569418291, 0.07272663868465334, 0.05178229910463539, 0.06856944883691107, 0.06868818990832082, 0.09326274693228132, 0.06543343353880249, 0.08568807447542093, 0.0840388057139555, 0.07313413083734299, 0.09374035910287837, 0.14495340505699128, 0.06225775623917029, 0.07332658272799364, 0.0734822759225513, 0.09027333508158297, 0.036106755124348244, 0.13276037653636885, 0.0642242204846627, 0.9928509594833268, 0.9886653338410115, 0.9937203264587081, 0.9868626018383273, 0.9926479210624983, 0.9873086419897165, 0.9912509689600527, 0.9934786216666484, 0.9910487047406811, 0.5656894298432198, 0.7060023475227, 0.5743938885913463, 0.661107188596709, 0.7030303510161375, 0.6477379015412874, 0.597684244300902, 0.6688115023113516, 0.5945900468373619, 0.36632438522206323, 0.21627750757125896, 0.24587721816621144, 0.04381310448747211, 0.21473628512619636, 0.20837689381785574, 0.07655797517925167, 0.15233728221052967, 0.13339798516559676, 0.5867371843959653, 0.13154542887519893, 0.5073746281293092, 0.6267275948339404, 0.13100349253503063, 0.5497157962638196, 0.13428629281232318, 0.5552530624887028, 0.13466922056245056, 0.5438851850584447, 0.5530051962237791, 0.13473049656078095, 0.612096993750511, 0.5188329805211894, 0.5786725750825711, 0.5968548443492616, 0.5056668192003515, 0.12699841050917804, 0.08384491413442519, 0.049173951561893414, 0.050319627069467465, 0.039751736457845466, 0.06659293452458481, 0.07731077694924693, 0.06437795354411902, 0.12731404439736127, 0.1466049435802983, 0.12981052445244168, 0.0881516443879724, 0.07783683291787691, 0.10279505215210305, 0.058462796044329246, 0.035570884163511285, 0.29750477962115296, 0.07957998710970093, 0.06826997016839109, 0.05428056845110496, 0.14693880345217203, 0.1145713949035424, 0.08380540023856808, 0.3286710868518772, 0.08590045908486499, 0.22343792007434038, 0.17384265060710236, 0.08363777998858535, 0.05912200760365216, 0.36862622854046123, 0.4227521500118505, 0.006729694110047646, 0.059163791480661754, 0.006647107447410594, 0.1645717924226232, 0.05742509645209681, 0.08518774831082687, 0.6298134037586787, 0.6485595244219546, 0.5866629540293989, 0.5905369803311176, 0.6071366477827892, 0.5921278036913616, 0.6805819246572246, 0.6823909514589457, 0.6356922372784772, 0.08093507912815734, 0.09456373137936136, 0.06999845571069085, 0.09387516312559929, 0.083175426051182, 0.11895479693491395, 0.09274218717594263, 0.10577341910137184, 0.08131883763394965, 0.19437124019387386, 0.3742252087070007, 0.14108342923761885, 0.258424294613517, 0.49098619865031634, 0.14499440541983333, 0.44624881930949767, 0.26589414512036924, 0.2843225455153824, 0.19959782554439787, 0.2912219379456288, 0.43847003668284545, 0.40412727021141015, 0.17640233903157643, 0.1792642763153266, 0.1999943895531484, 0.45871941845184927, 0.15064261729283368, 0.22039643225560757, 0.135495048021946, 0.18102499992543153, 0.249347715684608, 0.22770990660910106, 0.17228836835639283, 0.1907260974540156, 0.264805289339871, 0.07432457938092607, 0.232376730666226, 0.18598928990805064, 0.2127942036788102, 0.18634582029433355, 0.1746341516737433, 0.21759406861848452, 0.23249299789601086, 0.1800575214527944, 0.21549784833016628, 0.20389893762535494, 0.20547019910239983, 0.193660873518685, 0.22907865446926967, 0.1707490674428227, 0.21050310772245462, 0.16869346657168427, 0.25093561616731275, 0.1847120284510353, 0.10559110869761457, 0.18935413961077152, 0.15487210374703786, 0.17313128433285985, 0.20196810241827357, 0.2016923735347138, 0.12355480077271097, 0.17051010918818443, 0.15929111074487423, 0.08316291880348703, 0.20803412116116438, 0.05196092178808431, 0.10441471198099628, 0.1697106048344441, 0.21121019313989498, 0.21339943838234265, 0.9013697241005321, 0.8838062438861528, 0.19606463749401326, 0.20750498827942088, 0.21401758617038558, 0.2002372727892795, 0.2119112934603844, 0.2222921497572502, 0.22596365308374566, 0.20523376748492128, 0.19815004707818806, 0.0879500832747997, 0.06381073476502808, 0.09778096092229649, 0.09671148873197821, 0.07509919023437561, 0.07468259336127614, 0.06733212946605904, 0.06890438282889988, 0.09711692409232386]}, "mutation_prompt": null}
