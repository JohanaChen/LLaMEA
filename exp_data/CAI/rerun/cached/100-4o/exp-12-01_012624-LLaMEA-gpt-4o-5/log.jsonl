{"id": "27955da3-ccee-47f0-aceb-aac5e14b07ab", "solution": "import numpy as np\n\nclass HybridDELS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Check budget\n                if self.evaluations >= self.budget:\n                    break\n\n            # Local Search on the best individual\n            if self.evaluations < self.budget:\n                best_idx = np.argmin(fitness)\n                best_individual = population[best_idx]\n                neighborhood_size = 0.1\n                for _ in range(5):  # 5 local search steps\n                    if self.evaluations >= self.budget:\n                        break\n                    local_move = np.random.uniform(-neighborhood_size, neighborhood_size, self.dim)\n                    neighbor = np.clip(best_individual + local_move, self.lower_bound, self.upper_bound)\n                    neighbor_fitness = func(neighbor)\n                    self.evaluations += 1\n                    if neighbor_fitness < fitness[best_idx]:\n                        population[best_idx] = neighbor\n                        fitness[best_idx] = neighbor_fitness\n\n        # Return the best found solution\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELS", "description": "A hybrid metaheuristic leveraging Differential Evolution and Local Search for effective exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2743773155587982, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6124251725316229, 0.5984516591808757, 0.5889339708372792, 0.6674965151982162, 0.6428026212323693, 0.6674190485997797, 0.6447028661941816, 0.6471951964217011, 0.6176335930437049, 0.3433482296335343, 0.33281168245164683, 0.3190183232731493, 0.33868191544573045, 0.340401869388928, 0.33468919244430295, 0.3801022320642261, 0.32223998177188284, 0.3336367123548113, 0.11039497720041269, 0.11922051609560824, 0.0983047241314402, 0.11107057567207634, 0.1123056720501121, 0.1004606727985301, 0.11383365756004382, 0.11445027119520434, 0.1124325432753216, 0.08745345057959564, 0.096388432695653, 0.10179967503012655, 0.12009286197868785, 0.1108479081663436, 0.09337048279479854, 0.1078696015181424, 0.10211176133149691, 0.09666069763278862, 0.9669459390221269, 0.9187584509370105, 0.9265517294830833, 0.9787015092770766, 0.9526640079986559, 0.9351816615594492, 0.9375715515759864, 0.9539365534725754, 0.9386586976381225, 0.3042796342730809, 0.30003849593383713, 0.3017025401421637, 0.283464787165834, 0.3002740425392769, 0.31082446124431773, 0.32116224449597464, 0.3155937282310227, 0.32462051250312673, 0.4874797551742698, 0.4000262808279367, 0.47092999930521096, 0.5442076681262036, 0.606691197337937, 0.40499476152136327, 0.4963054297503795, 0.6907678373027871, 0.584061222444437, 0.19292752745455344, 0.1765040225912915, 0.23585722221615701, 0.16673771501699908, 0.18749447015152187, 0.2453020695257997, 0.16714582192593974, 0.2141383978156045, 0.21612011534997977, 0.2208976911538364, 0.13101658811436068, 0.2558411165278949, 0.20871883550418147, 0.17700654189123577, 0.1810898604050475, 0.2315652929704115, 0.16587255770163378, 0.19624021228947564, 0.12299025579115919, 0.116904997098642, 0.11544333124313466, 0.12438148799987625, 0.13507176392624565, 0.09906143829177605, 0.10961137685779143, 0.10584365431013265, 0.1180718429855675, 0.22655475969163685, 0.21373974575652532, 0.22756195333911966, 0.21205900343146733, 0.23371051999238557, 0.2228881059189285, 0.24588655490262268, 0.26518835488345105, 0.2594681263672517, 0.023141806416787758, 0.012250952493402467, 0.012957866562496756, 0.029513805450115282, 0.02256046146183177, 0.017468741419631395, 0.02975911382866603, 0.039506722294382235, 0.03430012966289764, 0.14132536873124246, 0.14886438515305167, 0.16976766047549663, 0.16218233004946614, 0.15436540924758135, 0.17535107652412207, 0.15406711312786514, 0.14864576276596342, 0.17903047454518983, 0.46419752267857006, 0.5024056089793263, 0.48837198849168184, 0.4748487749550655, 0.4820236340051147, 0.5005446326741717, 0.4768174699067178, 0.48785815208452676, 0.5097484370150156, 0.13109168818613692, 0.12206951009531808, 0.10584939197629228, 0.10429652391436561, 0.16068227206013141, 0.09390343096075648, 0.09916886525232982, 0.11039501877454272, 0.08644362142864159, 0.1639540897145394, 0.3066583884568136, 0.2059546190414009, 0.23949797013866725, 0.21358388069524958, 0.17646579144876162, 0.20209201364858087, 0.2114927332397495, 0.347343738022746, 0.2600965060527879, 0.26254399156325525, 0.28348524807991393, 0.2558083091492328, 0.2702527485683519, 0.28030667220398287, 0.2887217181366538, 0.2745165593165192, 0.2782493288494373, 0.22062907797330333, 0.1930690425362498, 0.2288094374712364, 0.20847332434335897, 0.20172383775116776, 0.1927474688071853, 0.20275953208686293, 0.24588930293290379, 0.22830953970123158, 0.1827085430495291, 0.18421867157755678, 0.17394697404828385, 0.19896581813106018, 0.1793020319440669, 0.1931822695739066, 0.1918947003207495, 0.19229838184267223, 0.16729347904046787, 0.19792657278935966, 0.19714594214964276, 0.20482668378824842, 0.20984369139863768, 0.18690424263831573, 0.1857963653871002, 0.1774357960507501, 0.18250563243707119, 0.19051892943752358, 0.14966138133285, 0.7282169579451292, 0.17898264922450635, 0.19814994880845294, 0.641494484200689, 0.18393319401853436, 0.38883618304528744, 0.343717402899931, 0.5123187658795707, 0.5545675080804923, 0.44953241950549316, 0.5203654222870289, 0.1909714843602336, 0.4431529245291519, 0.16477424083724235, 0.209916204681299, 0.626265420159982, 0.21086348975472213, 0.1836849373759175, 0.17828578336832357, 0.1779860746675589, 0.17329011378946602, 0.18622775474065845, 0.1848682183116177, 0.18913549924025908, 0.1898281912219878, 0.19347408050587578, 0.09390215385103984, 0.07516438355301269, 0.08018635948852793, 0.0753787713575379, 0.07586821409141087, 0.07166663950939778, 0.07472549577850573, 0.0772696015292913, 0.07054519313421992]}, "mutation_prompt": null}
{"id": "3461dfb6-2cfa-40a5-8715-e707ce5239da", "solution": "import numpy as np\n\nclass HybridDELS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial vector\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Check budget\n                if self.evaluations >= self.budget:\n                    break\n\n            # Local Search on the best individual\n            if self.evaluations < self.budget:\n                best_idx = np.argmin(fitness)\n                best_individual = population[best_idx]\n                neighborhood_size = 0.1\n                for _ in range(5):  # 5 local search steps\n                    if self.evaluations >= self.budget:\n                        break\n                    local_move = np.random.uniform(-neighborhood_size, neighborhood_size, self.dim)\n                    neighbor = np.clip(best_individual + local_move, self.lower_bound, self.upper_bound)\n                    neighbor_fitness = func(neighbor)\n                    self.evaluations += 1\n                    if neighbor_fitness < fitness[best_idx]:\n                        population[best_idx] = neighbor\n                        fitness[best_idx] = neighbor_fitness\n\n        # Return the best found solution\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDELS", "description": "A hybrid metaheuristic leveraging Differential Evolution and Local Search for effective exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "27955da3-ccee-47f0-aceb-aac5e14b07ab", "metadata": {"aucs": [0.6124251725316229, 0.5984516591808757, 0.5889339708372792, 0.6674965151982162, 0.6428026212323693, 0.6674190485997797, 0.6447028661941816, 0.6471951964217011, 0.6176335930437049, 0.3433482296335343, 0.33281168245164683, 0.3190183232731493, 0.33868191544573045, 0.340401869388928, 0.33468919244430295, 0.3801022320642261, 0.32223998177188284, 0.3336367123548113, 0.11039497720041269, 0.11922051609560824, 0.0983047241314402, 0.11107057567207634, 0.1123056720501121, 0.1004606727985301, 0.11383365756004382, 0.11445027119520434, 0.1124325432753216, 0.08745345057959564, 0.096388432695653, 0.10179967503012655, 0.12009286197868785, 0.1108479081663436, 0.09337048279479854, 0.1078696015181424, 0.10211176133149691, 0.09666069763278862, 0.9669459390221269, 0.9187584509370105, 0.9265517294830833, 0.9787015092770766, 0.9526640079986559, 0.9351816615594492, 0.9375715515759864, 0.9539365534725754, 0.9386586976381225, 0.3042796342730809, 0.30003849593383713, 0.3017025401421637, 0.283464787165834, 0.3002740425392769, 0.31082446124431773, 0.32116224449597464, 0.3155937282310227, 0.32462051250312673, 0.4874797551742698, 0.4000262808279367, 0.47092999930521096, 0.5442076681262036, 0.606691197337937, 0.40499476152136327, 0.4963054297503795, 0.6907678373027871, 0.584061222444437, 0.19292752745455344, 0.1765040225912915, 0.23585722221615701, 0.16673771501699908, 0.18749447015152187, 0.2453020695257997, 0.16714582192593974, 0.2141383978156045, 0.21612011534997977, 0.2208976911538364, 0.13101658811436068, 0.2558411165278949, 0.20871883550418147, 0.17700654189123577, 0.1810898604050475, 0.2315652929704115, 0.16587255770163378, 0.19624021228947564, 0.12299025579115919, 0.116904997098642, 0.11544333124313466, 0.12438148799987625, 0.13507176392624565, 0.09906143829177605, 0.10961137685779143, 0.10584365431013265, 0.1180718429855675, 0.22655475969163685, 0.21373974575652532, 0.22756195333911966, 0.21205900343146733, 0.23371051999238557, 0.2228881059189285, 0.24588655490262268, 0.26518835488345105, 0.2594681263672517, 0.023141806416787758, 0.012250952493402467, 0.012957866562496756, 0.029513805450115282, 0.02256046146183177, 0.017468741419631395, 0.02975911382866603, 0.039506722294382235, 0.03430012966289764, 0.14132536873124246, 0.14886438515305167, 0.16976766047549663, 0.16218233004946614, 0.15436540924758135, 0.17535107652412207, 0.15406711312786514, 0.14864576276596342, 0.17903047454518983, 0.46419752267857006, 0.5024056089793263, 0.48837198849168184, 0.4748487749550655, 0.4820236340051147, 0.5005446326741717, 0.4768174699067178, 0.48785815208452676, 0.5097484370150156, 0.13109168818613692, 0.12206951009531808, 0.10584939197629228, 0.10429652391436561, 0.16068227206013141, 0.09390343096075648, 0.09916886525232982, 0.11039501877454272, 0.08644362142864159, 0.1639540897145394, 0.3066583884568136, 0.2059546190414009, 0.23949797013866725, 0.21358388069524958, 0.17646579144876162, 0.20209201364858087, 0.2114927332397495, 0.347343738022746, 0.2600965060527879, 0.26254399156325525, 0.28348524807991393, 0.2558083091492328, 0.2702527485683519, 0.28030667220398287, 0.2887217181366538, 0.2745165593165192, 0.2782493288494373, 0.22062907797330333, 0.1930690425362498, 0.2288094374712364, 0.20847332434335897, 0.20172383775116776, 0.1927474688071853, 0.20275953208686293, 0.24588930293290379, 0.22830953970123158, 0.1827085430495291, 0.18421867157755678, 0.17394697404828385, 0.19896581813106018, 0.1793020319440669, 0.1931822695739066, 0.1918947003207495, 0.19229838184267223, 0.16729347904046787, 0.19792657278935966, 0.19714594214964276, 0.20482668378824842, 0.20984369139863768, 0.18690424263831573, 0.1857963653871002, 0.1774357960507501, 0.18250563243707119, 0.19051892943752358, 0.14966138133285, 0.7282169579451292, 0.17898264922450635, 0.19814994880845294, 0.641494484200689, 0.18393319401853436, 0.38883618304528744, 0.343717402899931, 0.5123187658795707, 0.5545675080804923, 0.44953241950549316, 0.5203654222870289, 0.1909714843602336, 0.4431529245291519, 0.16477424083724235, 0.209916204681299, 0.626265420159982, 0.21086348975472213, 0.1836849373759175, 0.17828578336832357, 0.1779860746675589, 0.17329011378946602, 0.18622775474065845, 0.1848682183116177, 0.18913549924025908, 0.1898281912219878, 0.19347408050587578, 0.09390215385103984, 0.07516438355301269, 0.08018635948852793, 0.0753787713575379, 0.07586821409141087, 0.07166663950939778, 0.07472549577850573, 0.0772696015292913, 0.07054519313421992]}, "mutation_prompt": null}
