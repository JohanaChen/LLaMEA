{"id": "4dd4f368-5569-4fdc-82a9-1f87c389b08e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.c1 = 1.49  # cognitive coefficient\n        self.c2 = 1.49  # social coefficient\n        self.w = 0.729  # inertia weight\n        self.F = 0.5    # DE scaling factor\n        self.CR = 0.9   # DE crossover rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n        # Initialize particles\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.num_particles):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Update personal and global best\n                score = func(self.positions[i])\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n            \n            # Update velocities and positions\n            for i in range(self.num_particles):\n                if self.evaluations >= self.budget:\n                    break\n\n                # PSO velocity update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (\n                    self.w * self.velocities[i] +\n                    self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i]) +\n                    self.c2 * r2 * (self.global_best_position - self.positions[i])\n                )\n                # Position update\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n                # Differential Evolution mutation and crossover\n                indices = np.random.choice(self.num_particles, 3, replace=False)\n                a, b, c = self.positions[indices]\n                mutant_vector = a + self.F * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(self.positions[i])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n\n                # Evaluate trial vector\n                trial_score = func(trial_vector)\n                self.evaluations += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.positions[i] = trial_vector\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial_vector\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution elements to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.24896975460318108, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6671332608902139, 0.6857424242477466, 0.709076472305702, 0.7832542573357759, 0.18960203521933605, 0.7358422953813383, 0.6900289381164765, 0.17555120893459442, 0.7589719047440766, 0.38042918975864337, 0.03668803332579029, 0.12216092494447095, 0.5533516018702573, 0.3899864684459823, 0.2290888930141569, 0.22824528914356834, 0.31927998227834453, 0.3850052868875159, 0.10049942391332356, 0.12990092130046138, 0.11828461132790091, 0.13807802455490514, 0.1098495246550597, 0.10825580568652171, 0.1750147561414127, 0.10350184984554067, 0.2812309526463267, 0.11482915809471073, 0.12528139662198523, 0.11112486590097892, 0.16362860615321184, 0.1586571597179378, 0.12517501151689758, 0.11839564952460202, 0.11948159636171418, 0.12839964188570607, 0.9892269090032251, 0.9851418939229746, 0.993206305258655, 0.09964362961321871, 0.9855879042339425, 0.9888630110444296, 0.98876096298738, 0.9826128775585542, 0.9858504056731789, 0.4059925023942911, 0.0590688529925214, 0.05926045030688987, 0.446645657251296, 0.4206275535145477, 0.41653715917939693, 0.3561030509719152, 0.08800685468245995, 0.42391068743996807, 0.17201571731636833, 0.22331241800788737, 0.17051009764771552, 0.7540841564487637, 0.7454688365279392, 0.26318767446499136, 0.06800780039412002, 0.125016713464408, 0.5465474071804479, 0.09235931198632641, 0.20829718070642123, 0.1803198540125429, 0.17510800539300475, 0.12450097937328519, 0.17795573845010382, 0.1921131550001144, 0.17035557802653145, 0.31539904194445667, 0.18220901732507155, 0.18047726986557378, 0.17800523247277256, 0.1829626464691798, 0.1997178261652105, 0.17461402390400038, 0.19505830451118222, 0.21487016999354536, 0.1209796171238271, 0.002108694133639788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003957118168437246, 9.999999999998899e-05, 9.999999999998899e-05, 0.05173634361609769, 0.1366193512588909, 0.03113742075264614, 0.17039622162968082, 0.04385435525994508, 0.08003633741862926, 0.017324657292454915, 0.043443108872445735, 0.03228209379421387, 0.05856245046690178, 0.03850284609536525, 0.09160377517064067, 0.042205781761319616, 0.05810797377702526, 0.05828389279717194, 0.05539696862213073, 0.08808617514893591, 0.042814199020748345, 0.057047573793781114, 0.11562022788683768, 0.11646024743908279, 0.0954092070030772, 0.006113396520564085, 0.0737310523517204, 0.005619925946023563, 0.12429553671469185, 0.04705359791643371, 0.058206171622740444, 0.4481638205717714, 0.4837522024070122, 0.4948112478297244, 0.5168204950192097, 0.5654439234726873, 0.20905726343283737, 0.4884403930348119, 0.4819602815452224, 0.5034563918526767, 0.1482835891203116, 0.10309426377098552, 0.11845043057509042, 0.09300341919794919, 0.09467579641363522, 0.1319838998951196, 0.11785603155393232, 0.09612246765547439, 0.13890661594585996, 0.2576398588511877, 0.1789912987157406, 0.17629131583415625, 0.23204053576609418, 0.22979708418195033, 0.2959729522444542, 0.18809974978772803, 0.18305475006688898, 0.20537578201352213, 0.3813108181599555, 0.3124911642978583, 0.39323672991823566, 0.3862643499541497, 0.34492307121833043, 0.28176815719419046, 0.41456442846137986, 0.3897748909122736, 0.3675516971539582, 0.2673773176901788, 0.2853003954889648, 0.1792350939136491, 0.29946229492927656, 0.19901567937804443, 0.275544173738983, 0.2703919700711561, 0.3060676795637862, 0.3237680189903941, 0.2695870064233379, 0.23475257001147798, 0.212602509315589, 0.18434327102086512, 0.2071979243766413, 0.21243456507812397, 0.2063155476451246, 0.2087721175911651, 0.23192642251246776, 0.2359578662921975, 0.1999994666321746, 0.21029673484720823, 0.21286360639695878, 0.21700762698944176, 0.19794277087324486, 0.5153176670008877, 0.21840688182989632, 0.20198820788833693, 0.1632097220448293, 0.16522141258751688, 0.15429973575964573, 0.7987186737278885, 0.2000809970963181, 0.8404746280632138, 0.12176263354314054, 0.1691514103338777, 0.15202725988181554, 0.1566214122647932, 0.16844502777454395, 0.12444304119863814, 0.08181475925067572, 0.21008570285532235, 0.20803776771185112, 0.7665327223355523, 0.1618471921705572, 0.1293934256155297, 0.1994626785911099, 0.18529600551872827, 0.21158704463942413, 0.18946956609532573, 0.20096333413685075, 0.20002758039909507, 0.192281557979883, 0.1765864868096254, 0.21379155067272126, 0.09244815292514863, 0.15331450575008188, 0.08466959253980966, 0.07759899915916557, 0.08862894839392688, 0.10670351555136925, 0.0992541959113129, 0.08354171548515466, 0.09178432419822435]}, "mutation_prompt": null}
{"id": "b4929492-ec42-4c37-8b26-5a942d767440", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.c1 = 1.49  # cognitive coefficient\n        self.c2 = 1.49  # social coefficient\n        self.w = 0.729  # inertia weight\n        self.F = 0.5    # DE scaling factor\n        self.CR = 0.9   # DE crossover rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n        # Initialize particles\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.num_particles):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Update personal and global best\n                score = func(self.positions[i])\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n            \n            # Update velocities and positions\n            for i in range(self.num_particles):\n                if self.evaluations >= self.budget:\n                    break\n\n                # PSO velocity update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocities[i] = (\n                    self.w * self.velocities[i] +\n                    self.c1 * r1 * (self.personal_best_positions[i] - self.positions[i]) +\n                    self.c2 * r2 * (self.global_best_position - self.positions[i])\n                )\n                # Position update\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n                # Differential Evolution mutation and crossover\n                indices = np.random.choice(self.num_particles, 3, replace=False)\n                a, b, c = self.positions[indices]\n                mutant_vector = a + self.F * (b - c)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(self.positions[i])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n\n                # Evaluate trial vector\n                trial_score = func(trial_vector)\n                self.evaluations += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.positions[i] = trial_vector\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial_vector\n\n                    if trial_score < self.global_best_score:\n                        self.global_best_score = trial_score\n                        self.global_best_position = trial_vector\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution elements to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4dd4f368-5569-4fdc-82a9-1f87c389b08e", "metadata": {"aucs": [0.6671332608902139, 0.6857424242477466, 0.709076472305702, 0.7832542573357759, 0.18960203521933605, 0.7358422953813383, 0.6900289381164765, 0.17555120893459442, 0.7589719047440766, 0.38042918975864337, 0.03668803332579029, 0.12216092494447095, 0.5533516018702573, 0.3899864684459823, 0.2290888930141569, 0.22824528914356834, 0.31927998227834453, 0.3850052868875159, 0.10049942391332356, 0.12990092130046138, 0.11828461132790091, 0.13807802455490514, 0.1098495246550597, 0.10825580568652171, 0.1750147561414127, 0.10350184984554067, 0.2812309526463267, 0.11482915809471073, 0.12528139662198523, 0.11112486590097892, 0.16362860615321184, 0.1586571597179378, 0.12517501151689758, 0.11839564952460202, 0.11948159636171418, 0.12839964188570607, 0.9892269090032251, 0.9851418939229746, 0.993206305258655, 0.09964362961321871, 0.9855879042339425, 0.9888630110444296, 0.98876096298738, 0.9826128775585542, 0.9858504056731789, 0.4059925023942911, 0.0590688529925214, 0.05926045030688987, 0.446645657251296, 0.4206275535145477, 0.41653715917939693, 0.3561030509719152, 0.08800685468245995, 0.42391068743996807, 0.17201571731636833, 0.22331241800788737, 0.17051009764771552, 0.7540841564487637, 0.7454688365279392, 0.26318767446499136, 0.06800780039412002, 0.125016713464408, 0.5465474071804479, 0.09235931198632641, 0.20829718070642123, 0.1803198540125429, 0.17510800539300475, 0.12450097937328519, 0.17795573845010382, 0.1921131550001144, 0.17035557802653145, 0.31539904194445667, 0.18220901732507155, 0.18047726986557378, 0.17800523247277256, 0.1829626464691798, 0.1997178261652105, 0.17461402390400038, 0.19505830451118222, 0.21487016999354536, 0.1209796171238271, 0.002108694133639788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003957118168437246, 9.999999999998899e-05, 9.999999999998899e-05, 0.05173634361609769, 0.1366193512588909, 0.03113742075264614, 0.17039622162968082, 0.04385435525994508, 0.08003633741862926, 0.017324657292454915, 0.043443108872445735, 0.03228209379421387, 0.05856245046690178, 0.03850284609536525, 0.09160377517064067, 0.042205781761319616, 0.05810797377702526, 0.05828389279717194, 0.05539696862213073, 0.08808617514893591, 0.042814199020748345, 0.057047573793781114, 0.11562022788683768, 0.11646024743908279, 0.0954092070030772, 0.006113396520564085, 0.0737310523517204, 0.005619925946023563, 0.12429553671469185, 0.04705359791643371, 0.058206171622740444, 0.4481638205717714, 0.4837522024070122, 0.4948112478297244, 0.5168204950192097, 0.5654439234726873, 0.20905726343283737, 0.4884403930348119, 0.4819602815452224, 0.5034563918526767, 0.1482835891203116, 0.10309426377098552, 0.11845043057509042, 0.09300341919794919, 0.09467579641363522, 0.1319838998951196, 0.11785603155393232, 0.09612246765547439, 0.13890661594585996, 0.2576398588511877, 0.1789912987157406, 0.17629131583415625, 0.23204053576609418, 0.22979708418195033, 0.2959729522444542, 0.18809974978772803, 0.18305475006688898, 0.20537578201352213, 0.3813108181599555, 0.3124911642978583, 0.39323672991823566, 0.3862643499541497, 0.34492307121833043, 0.28176815719419046, 0.41456442846137986, 0.3897748909122736, 0.3675516971539582, 0.2673773176901788, 0.2853003954889648, 0.1792350939136491, 0.29946229492927656, 0.19901567937804443, 0.275544173738983, 0.2703919700711561, 0.3060676795637862, 0.3237680189903941, 0.2695870064233379, 0.23475257001147798, 0.212602509315589, 0.18434327102086512, 0.2071979243766413, 0.21243456507812397, 0.2063155476451246, 0.2087721175911651, 0.23192642251246776, 0.2359578662921975, 0.1999994666321746, 0.21029673484720823, 0.21286360639695878, 0.21700762698944176, 0.19794277087324486, 0.5153176670008877, 0.21840688182989632, 0.20198820788833693, 0.1632097220448293, 0.16522141258751688, 0.15429973575964573, 0.7987186737278885, 0.2000809970963181, 0.8404746280632138, 0.12176263354314054, 0.1691514103338777, 0.15202725988181554, 0.1566214122647932, 0.16844502777454395, 0.12444304119863814, 0.08181475925067572, 0.21008570285532235, 0.20803776771185112, 0.7665327223355523, 0.1618471921705572, 0.1293934256155297, 0.1994626785911099, 0.18529600551872827, 0.21158704463942413, 0.18946956609532573, 0.20096333413685075, 0.20002758039909507, 0.192281557979883, 0.1765864868096254, 0.21379155067272126, 0.09244815292514863, 0.15331450575008188, 0.08466959253980966, 0.07759899915916557, 0.08862894839392688, 0.10670351555136925, 0.0992541959113129, 0.08354171548515466, 0.09178432419822435]}, "mutation_prompt": null}
