{"id": "f09c6306-8713-4270-8175-27ad6ad02e23", "solution": "import numpy as np\n\nclass HybridADE:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F  # Differential weight\n        self.CR = CR  # Crossover probability\n        self.lb = -5.0  # Lower bound of search space\n        self.ub = 5.0   # Upper bound of search space\n        self.max_eval = budget\n        self.eval_count = 0\n\n    def __call__(self, func):\n        # Initialize population\n        pop = self.lb + (self.ub - self.lb) * np.random.rand(self.pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in pop])\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.eval_count < self.max_eval:\n            for i in range(self.pop_size):\n                if self.eval_count >= self.max_eval:\n                    break\n\n                # Mutation: create a mutant vector\n                idxs = np.random.choice([j for j in range(self.pop_size) if j != i], 3, replace=False)\n                mutant = pop[idxs[0]] + self.F * (pop[idxs[1]] - pop[idxs[2]])\n                mutant = np.clip(mutant, self.lb, self.ub)\n\n                # Crossover: create a trial vector\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):  # ensure at least one crossover\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n\n                # Selection: replace if trial is better\n                trial_fitness = func(trial)\n                self.eval_count += 1\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_individual = trial\n                        best_fitness = trial_fitness\n\n            # Adaptive restart if stagnant\n            if self.eval_count < self.max_eval and self.eval_count % (self.pop_size * 5) == 0:\n                sorted_indices = np.argsort(fitness)\n                top_individuals = pop[sorted_indices[:self.pop_size // 5]]\n                pop = self.lb + (self.ub - self.lb) * np.random.rand(self.pop_size, self.dim)\n                pop[:len(top_individuals)] = top_individuals\n                fitness[:len(top_individuals)] = [func(ind) for ind in top_individuals]\n                self.eval_count += len(top_individuals)\n\n        return best_individual, best_fitness", "name": "HybridADE", "description": "Hybrid Adaptive Differential Evolution with Randomized Restarts to balance exploration and exploitation across diverse optimization landscapes.", "configspace": "", "generation": 0, "fitness": 0.3873535540951155, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7942899473651974, 0.7650007864209842, 0.808519271873695, 0.7953243101602387, 0.7979813862431714, 0.7877367634473715, 0.7935138555620584, 0.8025558551992583, 0.784794569265393, 0.6279156870287337, 0.6305446812363424, 0.6435775191583526, 0.6483038526428839, 0.6470329864662481, 0.6220929533333477, 0.6768518969158226, 0.6351624313333618, 0.6340629605789523, 0.10755765812544127, 0.12248095106819712, 0.10371510572903953, 0.10225282066728592, 0.1150338169520706, 0.10574766642961475, 0.12277670427851006, 0.11429297149033246, 0.11639755614216885, 0.11203789223372929, 0.11774741563280477, 0.10419982583604703, 0.11515811408508436, 0.1040613507604059, 0.10020394918670117, 0.10485344471020275, 0.11068543240723516, 0.10741814389336957, 0.9633611478386261, 0.9625633046793035, 0.9418855395658469, 0.9543299585156452, 0.9585319452530745, 0.9493298483911655, 0.9567377507607139, 0.9547616806830216, 0.9682754239846886, 0.4662313120202479, 0.4309906838563248, 0.4384573666244288, 0.4733781911147775, 0.4724017666801702, 0.524462764314827, 0.5153505460396037, 0.45103543307775584, 0.3836963137642114, 0.7359990473678756, 0.7300908391996683, 0.7618179486033773, 0.8130603523869941, 0.7557520830933113, 0.8169513723512677, 0.7552725387895338, 0.7583792234128206, 0.7587540910238373, 0.22317776143422863, 0.20997789470323747, 0.34436555007942204, 0.3853882760670524, 0.3296567035392727, 0.23372499691998316, 0.20776569821903235, 0.17706177617279573, 0.28967939738387904, 0.21935859022412396, 0.1738821189125701, 0.26798540484534183, 0.15862758881154337, 0.2638396691823566, 0.27354468256964815, 0.22972328501577555, 0.25657517866736257, 0.1771171942063161, 0.33511866536917645, 0.4141988951836607, 0.4360545870556368, 0.3992436084221411, 0.3576290474360124, 0.3978845989927766, 0.44831484932715693, 0.43523514894787574, 0.45066206865260305, 0.5556274172943861, 0.5192993063128051, 0.522827258427687, 0.4892691726577517, 0.514815738207839, 0.48946302288701715, 0.5651678193247843, 0.5192097686417803, 0.5653581384704578, 0.2276155579175142, 0.12562189146524938, 0.1341070052627118, 0.25810729619418604, 0.33865416374758617, 0.2468237056750493, 0.13187250236041748, 0.2040577482549475, 0.22193638258857495, 0.31601549679062946, 0.339706437930295, 0.3455342297212103, 0.33130671803621514, 0.35291243876223066, 0.3322059834786498, 0.32489583791167764, 0.3371412130529349, 0.309128460830177, 0.7032808893269944, 0.7138647445880064, 0.7229879762690183, 0.7078847640949322, 0.7052942810666849, 0.7185056002426908, 0.7161377290181105, 0.7150031054254793, 0.6987222654593581, 0.10839152875278191, 0.10191030699192538, 0.09720671587229879, 0.10542126508667804, 0.09291980946707845, 0.09818880567797583, 0.09840751636285172, 0.10742280298997653, 0.10553027164151996, 0.16917130901145283, 0.15693759887286962, 0.16189925512161807, 0.15072077799007988, 0.17585858212934014, 0.13263925233418994, 0.20035747568144402, 0.14716677203323814, 0.20281389493310464, 0.4235238656088749, 0.404055958018951, 0.43870053838391876, 0.42763912647856783, 0.3950936392125384, 0.3968213485866815, 0.4280313480508626, 0.4475922670200947, 0.4800561591381929, 0.3193236959446656, 0.3187904940430262, 0.3328135706216562, 0.31120513956427276, 0.3115798743800058, 0.32215523426318515, 0.3401853923075572, 0.34032348476054664, 0.3393014340919063, 0.20125087750883563, 0.1744906822086565, 0.1854273843571551, 0.19044828792023272, 0.19133601665586653, 0.18428339302221053, 0.196588580788003, 0.2297043832554151, 0.20930255194502378, 0.36753830319279845, 0.20756025035341785, 0.18126403579801076, 0.19173361144990086, 0.21316350071337764, 0.2629257172643895, 0.1965656776245669, 0.19775552501376548, 0.22399813745786223, 0.6038871788627961, 0.7679750346652487, 0.19762956168007506, 0.6999480131928324, 0.7315182376956855, 0.6706261856374826, 0.5644640631864783, 0.5214180468424285, 0.6360654460807117, 0.16334007087727298, 0.720957759552195, 0.6998309120215426, 0.19970424532411468, 0.5347422953829939, 0.6974334518124685, 0.20160262451882016, 0.741256061097056, 0.20909173755964328, 0.18703424967770788, 0.19295450928629643, 0.19234896730535989, 0.18695809190412305, 0.1865729333040692, 0.19591224392728768, 0.19345621736519936, 0.20197047286870684, 0.19487467651633783, 0.07907586893660168, 0.08755081097865713, 0.07864470235507948, 0.06724337758272392, 0.08489940395206708, 0.08596479060666118, 0.0804128598624082, 0.08662729819748816, 0.07898554468312247]}, "mutation_prompt": null}
{"id": "e5a879e6-2d06-4501-aa08-38efedd0042a", "solution": "import numpy as np\n\nclass HybridADE:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F  # Differential weight\n        self.CR = CR  # Crossover probability\n        self.lb = -5.0  # Lower bound of search space\n        self.ub = 5.0   # Upper bound of search space\n        self.max_eval = budget\n        self.eval_count = 0\n\n    def __call__(self, func):\n        # Initialize population\n        pop = self.lb + (self.ub - self.lb) * np.random.rand(self.pop_size, self.dim)\n        fitness = np.array([func(ind) for ind in pop])\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(fitness)\n        best_individual = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while self.eval_count < self.max_eval:\n            for i in range(self.pop_size):\n                if self.eval_count >= self.max_eval:\n                    break\n\n                # Mutation: create a mutant vector\n                idxs = np.random.choice([j for j in range(self.pop_size) if j != i], 3, replace=False)\n                mutant = pop[idxs[0]] + self.F * (pop[idxs[1]] - pop[idxs[2]])\n                mutant = np.clip(mutant, self.lb, self.ub)\n\n                # Crossover: create a trial vector\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):  # ensure at least one crossover\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n\n                # Selection: replace if trial is better\n                trial_fitness = func(trial)\n                self.eval_count += 1\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_individual = trial\n                        best_fitness = trial_fitness\n\n            # Adaptive restart if stagnant\n            if self.eval_count < self.max_eval and self.eval_count % (self.pop_size * 5) == 0:\n                sorted_indices = np.argsort(fitness)\n                top_individuals = pop[sorted_indices[:self.pop_size // 5]]\n                pop = self.lb + (self.ub - self.lb) * np.random.rand(self.pop_size, self.dim)\n                pop[:len(top_individuals)] = top_individuals\n                fitness[:len(top_individuals)] = [func(ind) for ind in top_individuals]\n                self.eval_count += len(top_individuals)\n\n        return best_individual, best_fitness", "name": "HybridADE", "description": "Hybrid Adaptive Differential Evolution with Randomized Restarts to balance exploration and exploitation across diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f09c6306-8713-4270-8175-27ad6ad02e23", "metadata": {"aucs": [0.7942899473651974, 0.7650007864209842, 0.808519271873695, 0.7953243101602387, 0.7979813862431714, 0.7877367634473715, 0.7935138555620584, 0.8025558551992583, 0.784794569265393, 0.6279156870287337, 0.6305446812363424, 0.6435775191583526, 0.6483038526428839, 0.6470329864662481, 0.6220929533333477, 0.6768518969158226, 0.6351624313333618, 0.6340629605789523, 0.10755765812544127, 0.12248095106819712, 0.10371510572903953, 0.10225282066728592, 0.1150338169520706, 0.10574766642961475, 0.12277670427851006, 0.11429297149033246, 0.11639755614216885, 0.11203789223372929, 0.11774741563280477, 0.10419982583604703, 0.11515811408508436, 0.1040613507604059, 0.10020394918670117, 0.10485344471020275, 0.11068543240723516, 0.10741814389336957, 0.9633611478386261, 0.9625633046793035, 0.9418855395658469, 0.9543299585156452, 0.9585319452530745, 0.9493298483911655, 0.9567377507607139, 0.9547616806830216, 0.9682754239846886, 0.4662313120202479, 0.4309906838563248, 0.4384573666244288, 0.4733781911147775, 0.4724017666801702, 0.524462764314827, 0.5153505460396037, 0.45103543307775584, 0.3836963137642114, 0.7359990473678756, 0.7300908391996683, 0.7618179486033773, 0.8130603523869941, 0.7557520830933113, 0.8169513723512677, 0.7552725387895338, 0.7583792234128206, 0.7587540910238373, 0.22317776143422863, 0.20997789470323747, 0.34436555007942204, 0.3853882760670524, 0.3296567035392727, 0.23372499691998316, 0.20776569821903235, 0.17706177617279573, 0.28967939738387904, 0.21935859022412396, 0.1738821189125701, 0.26798540484534183, 0.15862758881154337, 0.2638396691823566, 0.27354468256964815, 0.22972328501577555, 0.25657517866736257, 0.1771171942063161, 0.33511866536917645, 0.4141988951836607, 0.4360545870556368, 0.3992436084221411, 0.3576290474360124, 0.3978845989927766, 0.44831484932715693, 0.43523514894787574, 0.45066206865260305, 0.5556274172943861, 0.5192993063128051, 0.522827258427687, 0.4892691726577517, 0.514815738207839, 0.48946302288701715, 0.5651678193247843, 0.5192097686417803, 0.5653581384704578, 0.2276155579175142, 0.12562189146524938, 0.1341070052627118, 0.25810729619418604, 0.33865416374758617, 0.2468237056750493, 0.13187250236041748, 0.2040577482549475, 0.22193638258857495, 0.31601549679062946, 0.339706437930295, 0.3455342297212103, 0.33130671803621514, 0.35291243876223066, 0.3322059834786498, 0.32489583791167764, 0.3371412130529349, 0.309128460830177, 0.7032808893269944, 0.7138647445880064, 0.7229879762690183, 0.7078847640949322, 0.7052942810666849, 0.7185056002426908, 0.7161377290181105, 0.7150031054254793, 0.6987222654593581, 0.10839152875278191, 0.10191030699192538, 0.09720671587229879, 0.10542126508667804, 0.09291980946707845, 0.09818880567797583, 0.09840751636285172, 0.10742280298997653, 0.10553027164151996, 0.16917130901145283, 0.15693759887286962, 0.16189925512161807, 0.15072077799007988, 0.17585858212934014, 0.13263925233418994, 0.20035747568144402, 0.14716677203323814, 0.20281389493310464, 0.4235238656088749, 0.404055958018951, 0.43870053838391876, 0.42763912647856783, 0.3950936392125384, 0.3968213485866815, 0.4280313480508626, 0.4475922670200947, 0.4800561591381929, 0.3193236959446656, 0.3187904940430262, 0.3328135706216562, 0.31120513956427276, 0.3115798743800058, 0.32215523426318515, 0.3401853923075572, 0.34032348476054664, 0.3393014340919063, 0.20125087750883563, 0.1744906822086565, 0.1854273843571551, 0.19044828792023272, 0.19133601665586653, 0.18428339302221053, 0.196588580788003, 0.2297043832554151, 0.20930255194502378, 0.36753830319279845, 0.20756025035341785, 0.18126403579801076, 0.19173361144990086, 0.21316350071337764, 0.2629257172643895, 0.1965656776245669, 0.19775552501376548, 0.22399813745786223, 0.6038871788627961, 0.7679750346652487, 0.19762956168007506, 0.6999480131928324, 0.7315182376956855, 0.6706261856374826, 0.5644640631864783, 0.5214180468424285, 0.6360654460807117, 0.16334007087727298, 0.720957759552195, 0.6998309120215426, 0.19970424532411468, 0.5347422953829939, 0.6974334518124685, 0.20160262451882016, 0.741256061097056, 0.20909173755964328, 0.18703424967770788, 0.19295450928629643, 0.19234896730535989, 0.18695809190412305, 0.1865729333040692, 0.19591224392728768, 0.19345621736519936, 0.20197047286870684, 0.19487467651633783, 0.07907586893660168, 0.08755081097865713, 0.07864470235507948, 0.06724337758272392, 0.08489940395206708, 0.08596479060666118, 0.0804128598624082, 0.08662729819748816, 0.07898554468312247]}, "mutation_prompt": null}
