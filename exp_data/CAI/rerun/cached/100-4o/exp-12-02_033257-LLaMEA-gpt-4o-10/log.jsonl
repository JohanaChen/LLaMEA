{"id": "9131a603-a37b-4a27-a4ae-60b36b39d4c5", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.7\n        self.elitism_rate = 0.1\n        self.bounds = (-5.0, 5.0)\n        self.num_elites = int(self.elitism_rate * self.population_size)\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Select elites\n            elite_indices = np.argsort(fitness)[:self.num_elites]\n            elites = population[elite_indices]\n\n            # Differential Evolution Mutation\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant = np.clip(x1 + self.mutation_factor * (x2 - x3), *self.bounds)\n\n                # Crossover\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Genetic Algorithm Crossover and Elitism\n            new_population = []\n            sorted_indices = np.argsort(fitness)\n            for i in range(self.num_elites):\n                new_population.append(population[sorted_indices[i]])\n\n            while len(new_population) < self.population_size:\n                if evaluations >= self.budget:\n                    break\n                parents = population[np.random.choice(self.population_size, 2)]\n                crossover_point = np.random.randint(1, self.dim)\n                offspring = np.concatenate(\n                    (parents[0][:crossover_point], parents[1][crossover_point:]))\n\n                if np.random.rand() < 0.5:  # Mutation in GA\n                    mut_idx = np.random.randint(self.dim)\n                    offspring[mut_idx] += np.random.normal(0, 0.1)\n                    offspring = np.clip(offspring, *self.bounds)\n\n                new_fitness = func(offspring)\n                evaluations += 1\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            fitness = np.array([func(ind) for ind in population])\n            evaluations += self.population_size\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridGADE", "description": "Hybrid Genetic Algorithm with Adaptive Differential Evolution to explore and exploit the search space efficiently within a limited budget.", "configspace": "", "generation": 0, "fitness": 0.23779806049983374, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5364782303687103, 0.5563466453302526, 0.5546396223675149, 0.5439047722759065, 0.5618050726219252, 0.5530324990175302, 0.5579917140660293, 0.5877128109920069, 0.5403441582667554, 0.2256635137759937, 0.2385405382077388, 0.21369460939458673, 0.21467532960387314, 0.2218867401237128, 0.3000660770078355, 0.23575074186413525, 0.2848465191178301, 0.23533258537496837, 0.13019178727061353, 0.15149809940073267, 0.1287905783237504, 0.08979265610077569, 0.15928163831164888, 0.17906119302305945, 0.17940012934793081, 0.1396832009414657, 0.14002723914102078, 0.08366050659588875, 0.10108343150468158, 0.07519719754377607, 0.11830242685344472, 0.11134828848385026, 0.15891061057675893, 0.11294280073431873, 0.11876756117653897, 0.1366295637766729, 0.9512163673399203, 0.9754935541051353, 0.9771269920398294, 0.9379271733820523, 0.9811030324322842, 0.9535114180517179, 0.9627462719888424, 0.9259796152168964, 0.9669215542056573, 0.24215969203422438, 0.2881850681601701, 0.2855537930506261, 0.26323235026592706, 0.292823508801213, 0.31608654834255034, 0.25507545986915703, 0.25264229475272126, 0.2752201843975939, 0.2983329176927205, 0.7384881321976794, 0.16341775100651645, 0.248233976917555, 0.26318218351960176, 0.5535161426778061, 0.17178093783525383, 0.17137324407554588, 0.2299167356611046, 0.19410600206110606, 0.12230276013285524, 0.15721665639200455, 0.19535033314089956, 0.14700275884217262, 0.2345043301065729, 0.1512330273700232, 0.18672358031534686, 0.1682374361303991, 0.15481705477324137, 0.27468616526376854, 0.15127693211994486, 0.11911894638788978, 0.15726250180789214, 0.12253377054382342, 0.11830658878355604, 0.18647256851080773, 0.171112807525025, 9.999999999998899e-05, 9.999999999998899e-05, 0.006857969585363, 9.999999999998899e-05, 0.0002738234723219657, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013188574561262545, 0.031522520626119155, 0.06433877793816223, 0.04125558699474097, 0.051869367347586515, 0.012089520749519744, 0.0472984867330104, 0.01582656824469708, 0.08458313745151258, 0.04660097419303111, 0.07330866519076829, 0.07069474866441161, 0.07119987954657792, 0.052494311311676034, 0.04662715586179256, 0.007036351066159852, 0.04951398271801388, 0.054495816715122825, 0.032159704621329, 0.05967033445130332, 0.08922825890829866, 0.06319065025368142, 0.0677554237167044, 0.07091064126749302, 0.14645863808624637, 0.05550321163342997, 0.08708407533991414, 0.06915921694018723, 0.07589729091993613, 0.4210875852581375, 0.4655133472495899, 0.45309240744970036, 0.4776853585251206, 0.4675220025837846, 0.4622288930127142, 0.4779816406396413, 0.4614024227558562, 0.4490050806073126, 0.12779141478693345, 0.11180352190741127, 0.1239877267364865, 0.11016041660797071, 0.1011693678725567, 0.09498775656429737, 0.07247349619164267, 0.08005120706335567, 0.1501770709383683, 0.17739390639226715, 0.19156466904704073, 0.30838068884826275, 0.27282944041382184, 0.2786361961747258, 0.30138746484364287, 0.18182920973824201, 0.26946271627735463, 0.22887155132051862, 0.3284400583609205, 0.31546445250008337, 0.24296175771583262, 0.2701159004961071, 0.3019602443447734, 0.3093585799220593, 0.3248418996012039, 0.3380367474166107, 0.33518648740710855, 0.18426130438391564, 0.18695462541350993, 0.1740704485004133, 0.16048100816469146, 0.20656555349797268, 0.2157054747580942, 0.18741122457153325, 0.24361877514796126, 0.1701888017766955, 0.22109980936682927, 0.20447195455096268, 0.19505138617868456, 0.21499008038665757, 0.19702565741433087, 0.203948560001325, 0.20114348573753038, 0.19884042642930344, 0.20517571557086967, 0.19453189434212947, 0.1964677405910653, 0.24547884329204261, 0.22077970503283317, 0.43371276567967243, 0.18084061193775036, 0.22131563122487596, 0.19766534943227998, 0.20220611410881018, 0.1625466921707881, 0.1649518815659261, 0.15109665336318445, 0.7231259528009297, 0.7007984803557472, 0.7514058024899343, 0.16352107237550428, 0.16563880508776396, 0.16519127083397067, 0.478121565097239, 0.12333614477978971, 0.1643810777332495, 0.15092130433500917, 0.29368698464843523, 0.20770484686588409, 0.2067314480361666, 0.1624580521553145, 0.11210353388136429, 0.18537563509004817, 0.19090249889550537, 0.17656421219114782, 0.17909635788361922, 0.20222748973219773, 0.18768754359318907, 0.229842667838298, 0.19873440292115674, 0.2012826816845098, 0.09565825536106565, 0.07687178873357803, 0.07208295057394587, 0.09146307346292237, 0.0784367043501567, 0.07534455471464485, 0.087546804961807, 0.08005948618111303, 0.08230757074820116]}, "mutation_prompt": null}
{"id": "dbf597b1-3d6c-4f88-844f-f42bdd5d0571", "solution": "import numpy as np\n\nclass HybridGADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.7\n        self.elitism_rate = 0.1\n        self.bounds = (-5.0, 5.0)\n        self.num_elites = int(self.elitism_rate * self.population_size)\n\n    def __call__(self, func):\n        population = np.random.uniform(\n            self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Calculate dynamic mutation factor based on fitness diversity\n            fitness_std = np.std(fitness)\n            self.mutation_factor = 0.5 + 0.5 * (fitness_std / (np.mean(fitness) + 1e-9))\n\n            # Select elites\n            elite_indices = np.argsort(fitness)[:self.num_elites]\n            elites = population[elite_indices]\n\n            # Differential Evolution Mutation\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant = np.clip(x1 + self.mutation_factor * (x2 - x3), *self.bounds)\n\n                # Crossover\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_rate:\n                        trial[j] = mutant[j]\n\n                # Selection\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n            # Genetic Algorithm Crossover and Elitism\n            new_population = []\n            sorted_indices = np.argsort(fitness)\n            for i in range(self.num_elites):\n                new_population.append(population[sorted_indices[i]])\n\n            while len(new_population) < self.population_size:\n                if evaluations >= self.budget:\n                    break\n                parents_indices = np.random.choice(self.population_size, 2, replace=False)\n                parents = population[parents_indices]\n                crossover_point = np.random.randint(1, self.dim)\n                offspring = np.concatenate(\n                    (parents[0][:crossover_point], parents[1][crossover_point:]))\n\n                if np.random.rand() < 0.5:  # Mutation in GA\n                    mut_idx = np.random.randint(self.dim)\n                    offspring[mut_idx] += np.random.normal(0, 0.1)\n                    offspring = np.clip(offspring, *self.bounds)\n\n                new_fitness = func(offspring)\n                evaluations += 1\n                new_population.append(offspring)\n\n            population = np.array(new_population)\n            fitness = np.array([func(ind) for ind in population])\n            evaluations += self.population_size\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridGADE", "description": "Enhanced Hybrid Genetic Algorithm with Adaptive Differential Evolution by introducing a dynamic mutation factor based on fitness diversity and improved selection strategy for better convergence.", "configspace": "", "generation": 1, "fitness": 0.23576385731325347, "feedback": "", "error": "", "parent_id": "9131a603-a37b-4a27-a4ae-60b36b39d4c5", "metadata": {"aucs": [0.5978442115805334, 0.6262315107092571, 0.6401125711219628, 0.6226377379775891, 0.6368087542608368, 0.5859765173967844, 0.6075711870523459, 0.6098038507524267, 0.6218139756345734, 0.16289611652074742, 0.131100345966486, 0.18196292547580106, 0.1919654446920952, 0.12003539248918982, 0.1787209409728917, 0.15621605091676571, 0.18045862211075836, 0.190737485014026, 0.31575865100188294, 0.26607168760886335, 0.11044492147435014, 0.1511469413648001, 0.12908718840306532, 0.18571000312612018, 0.10727489978186655, 0.17520247497905406, 0.10747381538014555, 0.053643658229358904, 0.1591088522300057, 0.10753344629995387, 0.18023631991460387, 0.1053402963182376, 0.11709782374762712, 0.1731640772565446, 0.1565393267704479, 0.13323558046896955, 0.9645672160558147, 0.9654759653972871, 0.9711265747572955, 0.905424546469387, 0.9463703115339452, 0.9332960389814261, 0.9343549400176037, 0.95871666362746, 0.9451935842128629, 0.2328766898416167, 0.25470847034545196, 0.20831155044911898, 0.2718205879810587, 0.1901431856317256, 0.22694965543695766, 0.24043327728729114, 0.28888177392555414, 0.2534937928718932, 0.23720757827647, 0.15731928151300167, 0.22387555247889623, 0.18841967863607068, 0.15833439600653088, 0.1547514217252277, 0.12619018928449477, 0.1414284182475245, 0.1365442445870464, 0.1138719847503038, 0.18002510188845755, 0.1432125756834055, 0.09680142914408318, 0.19591800480271637, 0.20758126455793313, 0.21848427914075186, 0.10645250440411202, 0.1624225089711956, 0.2809275724489505, 0.17514527111973333, 0.16246821291115443, 0.15579829418858004, 0.14816798907943507, 0.15595809398187088, 0.1894598637991216, 0.15796185982685707, 0.16225978334196078, 0.0027801183437144994, 0.029657667262566467, 9.999999999998899e-05, 0.023047100019873534, 9.999999999998899e-05, 9.999999999998899e-05, 0.13712699536867823, 9.999999999998899e-05, 9.999999999998899e-05, 0.0677348838425903, 0.06267240431122223, 0.0645902894955821, 0.05223062774606679, 0.005608400992623275, 0.024060941320185547, 0.07179973640045956, 0.05180371268397921, 0.011847000380683315, 0.009725596991357222, 0.0597221108290682, 0.05052448623484784, 0.04265626926880317, 0.03275339286783163, 0.0022488200270774916, 0.03757263214513784, 0.028289934580913556, 0.058185164781417886, 0.13794255718997772, 0.10649455660353668, 0.08907600045883701, 0.12157226350208661, 0.07220698932142955, 0.047542923261769676, 0.09164923799715285, 0.08397660431127019, 0.07802125399298798, 0.4473369718102522, 0.4466694902639602, 0.5182341590889438, 0.48799933727435374, 0.4712941692903829, 0.4311970873720439, 0.4648003451902688, 0.47285337545910766, 0.4481977830269256, 0.15438377035039486, 0.08763144818996282, 0.11618783173272607, 0.11586225738285827, 0.11027978206961908, 0.10751834335638866, 0.14741329515781598, 0.08311922024660467, 0.11720342061153877, 0.2525903859189026, 0.2779489304236076, 0.22766705582679603, 0.2760316266826298, 0.2530289174302719, 0.18625947052791902, 0.36675688461579925, 0.2523099971423397, 0.26051645901110465, 0.19077513510351973, 0.24155778201590306, 0.16535231825096075, 0.3700168468860193, 0.37761238786245155, 0.3498601812491273, 0.3759186886361441, 0.3756604419927262, 0.1776986144298247, 0.22042980560742498, 0.21835840475286394, 0.15131874809846846, 0.21963888791704456, 0.18827490228787036, 0.2524273017839126, 0.18208123842513035, 0.19285166710748203, 0.25941702134107714, 0.2143929544874773, 0.2058721060750065, 0.19094370162705654, 0.2084708977437355, 0.20761437780987813, 0.2430281599041818, 0.21401094691345024, 0.23695636494363193, 0.23049885594621344, 0.23385727959604952, 0.19538529729742538, 0.1969950086746528, 0.21951859540599228, 0.18919562681226987, 0.18999850512648397, 0.1941010485244219, 0.21825671126581292, 0.19288027291928178, 0.6200200354907153, 0.18116380191335757, 0.15032840062713826, 0.7736345174033498, 0.19335961807207735, 0.8022999099677971, 0.16414331313928543, 0.16669494498725668, 0.16378544322068989, 0.7070052877933325, 0.20784783252995465, 0.31829192018664565, 0.12683398277501978, 0.19403929267761233, 0.5508208644290955, 0.15223005108588772, 0.20410487792458665, 0.11104704683755795, 0.16903345146704485, 0.19035052979047928, 0.2182085752499453, 0.17618772616639622, 0.19989832065475266, 0.18786745681340322, 0.21380710264692793, 0.18589350408278338, 0.1823540359284317, 0.11000044741970838, 0.07705420275946895, 0.0857707874036443, 0.09436362313177837, 0.06659891756031155, 0.08822619494162354, 0.09010403399884248, 0.08557334528139982, 0.08181442587562304]}, "mutation_prompt": null}
