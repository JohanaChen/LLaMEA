{"id": "7fe84ac1-6382-46cd-94e8-d7af29934deb", "solution": "import numpy as np\n\nclass AdaptiveExplorationExploitation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.max_generations = self.budget // self.population_size\n        self.f_weights = np.linspace(0.5, 1.0, self.max_generations)\n        self.w_inertia = np.linspace(0.9, 0.4, self.max_generations) \n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_pos = personal_best_positions[np.argmin(personal_best_scores)]\n        \n        for generation in range(self.max_generations):\n            f_weight = self.f_weights[generation]\n            w_inertia = self.w_inertia[generation]\n            \n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                r1, r2, r3 = population[indices]\n                mutant_vector = r1 + f_weight * (r2 - r3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < 0.9\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                velocities[i] = w_inertia * velocities[i] + 0.5 * np.random.rand() * (personal_best_positions[i] - population[i]) + 0.5 * np.random.rand() * (global_best_pos - population[i])\n                trial_vector += velocities[i]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                \n                trial_score = func(trial_vector)\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n                    if trial_score < func(global_best_pos):\n                        global_best_pos = trial_vector\n                        \n            population = personal_best_positions\n\n        return global_best_pos", "name": "AdaptiveExplorationExploitation", "description": "An adaptive population-based algorithm inspired by differential evolution and particle swarm optimization, leveraging both exploration and exploitation using adaptive scaling and inertia weights.", "configspace": "", "generation": 0, "fitness": 0.2887689539629538, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.756306120140631, 0.756306120140631, 0.756306120140631, 0.7626093434603864, 0.7626093434603864, 0.7626093434603864, 0.17495057882683596, 0.17495057882683596, 0.17495057882683596, 0.06979953918366077, 0.06979953918366077, 0.06979953918366077, 0.5814387519018154, 0.5814387519018154, 0.5814387519018154, 0.5687662019193973, 0.5687662019193973, 0.5687662019193973, 0.10129174511064154, 0.10129174511064154, 0.10129174511064154, 0.09555952482334529, 0.09555952482334529, 0.09555952482334529, 0.10776593583897143, 0.10776593583897143, 0.10776593583897143, 0.06882011869937976, 0.06882011869937976, 0.06882011869937976, 0.08691959137440886, 0.08691959137440886, 0.08691959137440886, 0.09383108154802344, 0.09383108154802344, 0.09383108154802344, 0.9794405108753814, 0.9794405108753814, 0.9794405108753814, 0.9882610916688949, 0.9882610916688949, 0.9882610916688949, 0.9850833515257472, 0.9850833515257472, 0.9850833515257472, 0.3620834016066825, 0.3620834016066825, 0.3620834016066825, 0.3329838154292748, 0.3329838154292748, 0.3329838154292748, 0.31808156927846765, 0.31808156927846765, 0.31808156927846765, 0.6565760645722633, 0.6565760645722633, 0.6565760645722633, 0.5327769146200312, 0.5327769146200312, 0.5327769146200312, 0.16859323520829017, 0.16859323520829017, 0.16859323520829017, 0.3052561539083809, 0.3052561539083809, 0.3052561539083809, 0.09887260451932767, 0.09887260451932767, 0.09887260451932767, 0.2821877920091742, 0.2821877920091742, 0.2821877920091742, 0.33863057845942357, 0.33863057845942357, 0.33863057845942357, 0.35072074862840996, 0.35072074862840996, 0.35072074862840996, 0.4401151040138287, 0.4401151040138287, 0.4401151040138287, 0.2173660223957371, 0.2173660223957371, 0.2173660223957371, 0.17303942567952213, 0.17303942567952213, 0.17303942567952213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3362550246853703, 0.3362550246853703, 0.3362550246853703, 0.2742717107145579, 0.2742717107145579, 0.2742717107145579, 0.4142966427644462, 0.4142966427644462, 0.4142966427644462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12594978670442902, 0.12594978670442902, 0.12594978670442902, 0.07798197657974981, 0.07798197657974981, 0.07798197657974981, 0.20562459003017075, 0.20562459003017075, 0.20562459003017075, 0.2829727383872349, 0.2829727383872349, 0.2829727383872349, 0.04795865643235264, 0.04795865643235264, 0.04795865643235264, 0.538242251087613, 0.538242251087613, 0.538242251087613, 0.2079367044691739, 0.2079367044691739, 0.2079367044691739, 0.5985967881845857, 0.5985967881845857, 0.5985967881845857, 0.08264522967626053, 0.08264522967626053, 0.08264522967626053, 0.07770960178938635, 0.07770960178938635, 0.07770960178938635, 0.07284429363280376, 0.07284429363280376, 0.07284429363280376, 0.1643368243085892, 0.1643368243085892, 0.1643368243085892, 0.17024023002914546, 0.17024023002914546, 0.17024023002914546, 0.1879149634475874, 0.1879149634475874, 0.1879149634475874, 0.3383734958324881, 0.3383734958324881, 0.3383734958324881, 0.2898997268258853, 0.2898997268258853, 0.2898997268258853, 0.3402184982561073, 0.3402184982561073, 0.3402184982561073, 0.22724030675740647, 0.22724030675740647, 0.22724030675740647, 0.2232232714581256, 0.2232232714581256, 0.2232232714581256, 0.2599040353446097, 0.2599040353446097, 0.2599040353446097, 0.18175084766147942, 0.18175084766147942, 0.18175084766147942, 0.16897193927384213, 0.16897193927384213, 0.16897193927384213, 0.1808871862812873, 0.1808871862812873, 0.1808871862812873, 0.18242628064450817, 0.18242628064450817, 0.18242628064450817, 0.17426002476797875, 0.17426002476797875, 0.17426002476797875, 0.20314716130573984, 0.20314716130573984, 0.20314716130573984, 0.7318026262710045, 0.7318026262710045, 0.7318026262710045, 0.6163661187566531, 0.6163661187566531, 0.6163661187566531, 0.16440731994634428, 0.16440731994634428, 0.16440731994634428, 0.10824869992116726, 0.10824869992116726, 0.10824869992116726, 0.6095090960334911, 0.6095090960334911, 0.6095090960334911, 0.15311705522393237, 0.15311705522393237, 0.15311705522393237, 0.19527208094213933, 0.19527208094213933, 0.19527208094213933, 0.19010152063372088, 0.19010152063372088, 0.19010152063372088, 0.17820709220784958, 0.17820709220784958, 0.17820709220784958, 0.06907832075725107, 0.06907832075725107, 0.06907832075725107, 0.07300578559118154, 0.07300578559118154, 0.07300578559118154, 0.06784126448869243, 0.06784126448869243, 0.06784126448869243]}, "mutation_prompt": null}
{"id": "edc20a0f-ba2e-4370-8007-2d089cfbeeeb", "solution": "import numpy as np\n\nclass AdaptiveExplorationExploitation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.max_generations = self.budget // self.population_size\n        self.f_weights = np.linspace(0.5, 1.0, self.max_generations)\n        self.w_inertia = np.linspace(0.9, 0.4, self.max_generations) \n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_pos = personal_best_positions[np.argmin(personal_best_scores)]\n        \n        for generation in range(self.max_generations):\n            f_weight = self.f_weights[generation]\n            w_inertia = self.w_inertia[generation]\n            \n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                r1, r2, r3 = population[indices]\n                mutant_vector = r1 + f_weight * (r2 - r3)\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < 0.9\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                velocities[i] = w_inertia * velocities[i] + 0.5 * np.random.rand() * (personal_best_positions[i] - population[i]) + 0.5 * np.random.rand() * (global_best_pos - population[i])\n                trial_vector += velocities[i]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                \n                trial_score = func(trial_vector)\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n                    if trial_score < func(global_best_pos):\n                        global_best_pos = trial_vector\n                        \n            population = personal_best_positions\n\n        return global_best_pos", "name": "AdaptiveExplorationExploitation", "description": "An adaptive population-based algorithm inspired by differential evolution and particle swarm optimization, leveraging both exploration and exploitation using adaptive scaling and inertia weights.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7fe84ac1-6382-46cd-94e8-d7af29934deb", "metadata": {"aucs": [0.756306120140631, 0.756306120140631, 0.756306120140631, 0.7626093434603864, 0.7626093434603864, 0.7626093434603864, 0.17495057882683596, 0.17495057882683596, 0.17495057882683596, 0.06979953918366077, 0.06979953918366077, 0.06979953918366077, 0.5814387519018154, 0.5814387519018154, 0.5814387519018154, 0.5687662019193973, 0.5687662019193973, 0.5687662019193973, 0.10129174511064154, 0.10129174511064154, 0.10129174511064154, 0.09555952482334529, 0.09555952482334529, 0.09555952482334529, 0.10776593583897143, 0.10776593583897143, 0.10776593583897143, 0.06882011869937976, 0.06882011869937976, 0.06882011869937976, 0.08691959137440886, 0.08691959137440886, 0.08691959137440886, 0.09383108154802344, 0.09383108154802344, 0.09383108154802344, 0.9794405108753814, 0.9794405108753814, 0.9794405108753814, 0.9882610916688949, 0.9882610916688949, 0.9882610916688949, 0.9850833515257472, 0.9850833515257472, 0.9850833515257472, 0.3620834016066825, 0.3620834016066825, 0.3620834016066825, 0.3329838154292748, 0.3329838154292748, 0.3329838154292748, 0.31808156927846765, 0.31808156927846765, 0.31808156927846765, 0.6565760645722633, 0.6565760645722633, 0.6565760645722633, 0.5327769146200312, 0.5327769146200312, 0.5327769146200312, 0.16859323520829017, 0.16859323520829017, 0.16859323520829017, 0.3052561539083809, 0.3052561539083809, 0.3052561539083809, 0.09887260451932767, 0.09887260451932767, 0.09887260451932767, 0.2821877920091742, 0.2821877920091742, 0.2821877920091742, 0.33863057845942357, 0.33863057845942357, 0.33863057845942357, 0.35072074862840996, 0.35072074862840996, 0.35072074862840996, 0.4401151040138287, 0.4401151040138287, 0.4401151040138287, 0.2173660223957371, 0.2173660223957371, 0.2173660223957371, 0.17303942567952213, 0.17303942567952213, 0.17303942567952213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3362550246853703, 0.3362550246853703, 0.3362550246853703, 0.2742717107145579, 0.2742717107145579, 0.2742717107145579, 0.4142966427644462, 0.4142966427644462, 0.4142966427644462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12594978670442902, 0.12594978670442902, 0.12594978670442902, 0.07798197657974981, 0.07798197657974981, 0.07798197657974981, 0.20562459003017075, 0.20562459003017075, 0.20562459003017075, 0.2829727383872349, 0.2829727383872349, 0.2829727383872349, 0.04795865643235264, 0.04795865643235264, 0.04795865643235264, 0.538242251087613, 0.538242251087613, 0.538242251087613, 0.2079367044691739, 0.2079367044691739, 0.2079367044691739, 0.5985967881845857, 0.5985967881845857, 0.5985967881845857, 0.08264522967626053, 0.08264522967626053, 0.08264522967626053, 0.07770960178938635, 0.07770960178938635, 0.07770960178938635, 0.07284429363280376, 0.07284429363280376, 0.07284429363280376, 0.1643368243085892, 0.1643368243085892, 0.1643368243085892, 0.17024023002914546, 0.17024023002914546, 0.17024023002914546, 0.1879149634475874, 0.1879149634475874, 0.1879149634475874, 0.3383734958324881, 0.3383734958324881, 0.3383734958324881, 0.2898997268258853, 0.2898997268258853, 0.2898997268258853, 0.3402184982561073, 0.3402184982561073, 0.3402184982561073, 0.22724030675740647, 0.22724030675740647, 0.22724030675740647, 0.2232232714581256, 0.2232232714581256, 0.2232232714581256, 0.2599040353446097, 0.2599040353446097, 0.2599040353446097, 0.18175084766147942, 0.18175084766147942, 0.18175084766147942, 0.16897193927384213, 0.16897193927384213, 0.16897193927384213, 0.1808871862812873, 0.1808871862812873, 0.1808871862812873, 0.18242628064450817, 0.18242628064450817, 0.18242628064450817, 0.17426002476797875, 0.17426002476797875, 0.17426002476797875, 0.20314716130573984, 0.20314716130573984, 0.20314716130573984, 0.7318026262710045, 0.7318026262710045, 0.7318026262710045, 0.6163661187566531, 0.6163661187566531, 0.6163661187566531, 0.16440731994634428, 0.16440731994634428, 0.16440731994634428, 0.10824869992116726, 0.10824869992116726, 0.10824869992116726, 0.6095090960334911, 0.6095090960334911, 0.6095090960334911, 0.15311705522393237, 0.15311705522393237, 0.15311705522393237, 0.19527208094213933, 0.19527208094213933, 0.19527208094213933, 0.19010152063372088, 0.19010152063372088, 0.19010152063372088, 0.17820709220784958, 0.17820709220784958, 0.17820709220784958, 0.06907832075725107, 0.06907832075725107, 0.06907832075725107, 0.07300578559118154, 0.07300578559118154, 0.07300578559118154, 0.06784126448869243, 0.06784126448869243, 0.06784126448869243]}, "mutation_prompt": null}
