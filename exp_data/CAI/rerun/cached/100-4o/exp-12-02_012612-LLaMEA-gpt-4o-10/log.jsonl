{"id": "5e956f53-49c4-43f8-8de0-9d9d274f80f7", "solution": "import numpy as np\n\nclass APSOX:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.swarm = None\n        self.velocities = None\n        self.best_personal_positions = None\n        self.best_personal_scores = None\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def initialize_swarm(self):\n        self.swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.swarm)\n        self.best_personal_scores = np.full(self.population_size, np.inf)\n\n    def update_particles(self, inertia, cognitive, social):\n        r1 = np.random.random((self.population_size, self.dim))\n        r2 = np.random.random((self.population_size, self.dim))\n        self.velocities = (inertia * self.velocities +\n                           cognitive * r1 * (self.best_personal_positions - self.swarm) +\n                           social * r2 * (self.global_best_position - self.swarm))\n        \n        self.swarm += self.velocities\n        np.clip(self.swarm, self.lower_bound, self.upper_bound, out=self.swarm)\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) > 0.5\n        offspring = np.where(mask, parent1, parent2)\n        np.clip(offspring, self.lower_bound, self.upper_bound, out=offspring)\n        return offspring\n\n    def __call__(self, func):\n        self.initialize_swarm()\n        inertia = 0.7\n        cognitive = 1.4\n        social = 1.4\n        crossover_rate = 0.2\n\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                score = func(self.swarm[i])\n                self.evaluations += 1\n                \n                if score < self.best_personal_scores[i]:\n                    self.best_personal_scores[i] = score\n                    self.best_personal_positions[i] = np.copy(self.swarm[i])\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = np.copy(self.swarm[i])\n            \n            self.update_particles(inertia, cognitive, social)\n            \n            if np.random.rand() < crossover_rate:\n                indices = np.random.choice(self.population_size, 2, replace=False)\n                offspring = self.crossover(self.swarm[indices[0]], self.swarm[indices[1]])\n                offspring_score = func(offspring)\n                self.evaluations += 1\n                \n                if offspring_score < self.global_best_score:\n                    self.global_best_score = offspring_score\n                    self.global_best_position = np.copy(offspring)\n\n            if self.evaluations >= self.budget:\n                break\n\n        return self.global_best_position", "name": "APSOX", "description": "Adaptive Particle Swarm Optimization with Crossover (APSOX) combines particle swarm optimization with genetic crossover for enhanced diversity and convergence.", "configspace": "", "generation": 0, "fitness": 0.25755765088453814, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9398987694461501, 0.12672040404022267, 0.9391038152277632, 0.9401263878691957, 0.18370720456603007, 0.9425036582888434, 0.950135777977348, 0.9420310066176514, 0.9334255660361742, 0.04384393091854366, 0.04399171490843201, 0.08171141640561941, 9.999999999998899e-05, 0.8043983460170779, 0.8587768782542766, 0.05515622589423841, 0.054970552528474936, 0.8207889166970441, 0.16318736176677118, 0.11680005483442601, 0.13060839799579516, 0.0774705474651981, 0.07269609890255235, 0.1269423934451741, 0.12249010835037277, 0.09857720224553834, 0.13443060525014283, 0.09418097453930674, 0.11757507368870246, 0.11058174623541073, 0.11847416703879698, 0.09615950034318554, 0.09367057335447337, 0.1637109476706562, 0.14718167744059008, 0.054334052759529405, 0.9958618965520748, 0.9908742241366196, 0.9948295648757133, 0.9895670092064008, 0.9906569563414686, 0.9856770320256104, 0.9922482853842955, 0.989598346587647, 0.9899120701514241, 0.8376690228399369, 0.060322943584057986, 0.059620391739468315, 0.1541180404271365, 0.15447130901250095, 0.1542768067800484, 0.12927750759593404, 0.08902662250202853, 0.8670832998318978, 0.2311009305541062, 0.2169924624998505, 0.2306528608550541, 0.2842647663679303, 0.1940807925416409, 0.1135913882116889, 0.07604431229248598, 0.08517207981089725, 0.3313117144221457, 0.1306069178767042, 0.24224525590649348, 0.25801720818390017, 0.10346578087436742, 0.2420046254436492, 0.23799013979953143, 0.2834331458142789, 0.1327618324538673, 0.24331089622312863, 0.2498156449851997, 9.999999999998899e-05, 0.1354770819206893, 0.291203607383998, 0.2765513203350536, 0.1372601860614412, 0.2875982504083219, 0.0354228787721369, 0.1357955182723184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012904884444416509, 0.1980198387506673, 0.04086188911702282, 0.1364585465015119, 9.999999999998899e-05, 9.999999999998899e-05, 0.20178454627411424, 0.10539912933822992, 0.13905949374768412, 0.06492367340372873, 9.999999999998899e-05, 0.05097620881466536, 0.060705832905430857, 0.08876099557762718, 0.1250446696490275, 0.053798267574765135, 9.999999999998899e-05, 0.2464899029832014, 0.10353422482023977, 0.08325357580097448, 0.08462157778729418, 0.13282860291478427, 0.37511699353840877, 0.07718029215922284, 0.09412168720818537, 0.10567709976037809, 0.059764426839177265, 0.04012439513003463, 9.999999999998899e-05, 0.04027624459008328, 0.21114743905310107, 9.999999999998899e-05, 0.12483022814248412, 0.5399187314370523, 0.5688900542386595, 0.5698169035173952, 0.5623508573356573, 0.20995418310839542, 0.20967518923752737, 0.607914883627494, 0.5899901547353824, 0.6235146560410707, 0.08451797003107664, 0.06626044090776284, 0.02088983308025094, 0.14772354761661521, 0.06942468135067592, 0.08747508903136858, 0.08721759763182313, 0.10974000716006282, 0.10187176759803063, 0.28291250166031745, 0.24485304023983534, 0.18154840048011878, 0.2188234246747769, 0.2293256273239075, 0.1706672986244928, 0.24294405479329573, 0.21211091492110667, 0.17382480813344015, 0.24328578626596165, 0.3171669991496281, 0.3047018671442112, 0.25564268933239187, 0.2682020273686758, 0.43830547486560467, 0.19294090839020284, 0.3871364750580819, 0.17467991536487426, 0.12054482317407966, 0.20253193150828463, 0.16429378436380926, 0.2666467738205741, 0.19823413489766084, 0.29972740694550015, 0.23474150370922464, 0.21605939449888079, 0.1023179650754229, 0.22407247444349543, 0.2648840454233319, 0.24203942395192413, 0.22497457769301155, 0.19863852415383298, 0.2303816325922784, 0.2528286927369079, 0.20392743658406176, 0.2187701956886764, 0.22911225440479666, 0.20418467501847315, 0.19924094241984558, 0.19413837570814474, 0.18328575261984947, 0.20337153669659658, 0.18533158348566936, 0.2561401498735083, 0.22740007766618808, 0.9533278780993636, 0.18896995350618895, 0.15452275090519685, 0.9489361926262555, 0.2018055514335253, 0.20216027771250544, 0.15999265005943653, 0.12647121209977052, 0.16360730621167818, 0.8796198198823181, 0.21339924764809715, 0.8397161286446199, 0.21352560789417008, 0.16930314251469303, 0.21225388811705115, 0.104350908803029, 0.1699369441222217, 0.10443795607493234, 0.22932200732822006, 0.21511489500163206, 0.19830239555060203, 0.2223849301341535, 0.21556846479948877, 0.1902806524897751, 0.23561909176838458, 0.22376150632763803, 0.18934642425139336, 0.082451147473112, 0.10449320721117805, 0.08226150463917015, 0.12304061957359014, 0.06598029861220167, 0.11248008414260124, 0.08059685931762617, 0.04619277096196661, 0.09448983479988038]}, "mutation_prompt": null}
{"id": "9468fd4e-883c-45f8-8290-81655874fbe6", "solution": "import numpy as np\n\nclass APSOX:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.swarm = None\n        self.velocities = None\n        self.best_personal_positions = None\n        self.best_personal_scores = None\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def initialize_swarm(self):\n        self.swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.best_personal_positions = np.copy(self.swarm)\n        self.best_personal_scores = np.full(self.population_size, np.inf)\n\n    def update_particles(self, inertia, cognitive, social):\n        r1 = np.random.random((self.population_size, self.dim))\n        r2 = np.random.random((self.population_size, self.dim))\n        self.velocities = (inertia * self.velocities +\n                           cognitive * r1 * (self.best_personal_positions - self.swarm) +\n                           social * r2 * (self.global_best_position - self.swarm))\n        \n        self.swarm += self.velocities\n        np.clip(self.swarm, self.lower_bound, self.upper_bound, out=self.swarm)\n\n    def crossover(self, parent1, parent2):\n        mask = np.random.rand(self.dim) > 0.5\n        offspring = np.where(mask, parent1, parent2)\n        np.clip(offspring, self.lower_bound, self.upper_bound, out=offspring)\n        return offspring\n\n    def __call__(self, func):\n        self.initialize_swarm()\n        inertia = 0.7\n        cognitive = 1.4\n        social = 1.4\n        crossover_rate = 0.2\n\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                score = func(self.swarm[i])\n                self.evaluations += 1\n                \n                if score < self.best_personal_scores[i]:\n                    self.best_personal_scores[i] = score\n                    self.best_personal_positions[i] = np.copy(self.swarm[i])\n                \n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = np.copy(self.swarm[i])\n            \n            self.update_particles(inertia, cognitive, social)\n            \n            if np.random.rand() < crossover_rate:\n                indices = np.random.choice(self.population_size, 2, replace=False)\n                offspring = self.crossover(self.swarm[indices[0]], self.swarm[indices[1]])\n                offspring_score = func(offspring)\n                self.evaluations += 1\n                \n                if offspring_score < self.global_best_score:\n                    self.global_best_score = offspring_score\n                    self.global_best_position = np.copy(offspring)\n\n            if self.evaluations >= self.budget:\n                break\n\n        return self.global_best_position", "name": "APSOX", "description": "Adaptive Particle Swarm Optimization with Crossover (APSOX) combines particle swarm optimization with genetic crossover for enhanced diversity and convergence.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5e956f53-49c4-43f8-8de0-9d9d274f80f7", "metadata": {"aucs": [0.9398987694461501, 0.12672040404022267, 0.9391038152277632, 0.9401263878691957, 0.18370720456603007, 0.9425036582888434, 0.950135777977348, 0.9420310066176514, 0.9334255660361742, 0.04384393091854366, 0.04399171490843201, 0.08171141640561941, 9.999999999998899e-05, 0.8043983460170779, 0.8587768782542766, 0.05515622589423841, 0.054970552528474936, 0.8207889166970441, 0.16318736176677118, 0.11680005483442601, 0.13060839799579516, 0.0774705474651981, 0.07269609890255235, 0.1269423934451741, 0.12249010835037277, 0.09857720224553834, 0.13443060525014283, 0.09418097453930674, 0.11757507368870246, 0.11058174623541073, 0.11847416703879698, 0.09615950034318554, 0.09367057335447337, 0.1637109476706562, 0.14718167744059008, 0.054334052759529405, 0.9958618965520748, 0.9908742241366196, 0.9948295648757133, 0.9895670092064008, 0.9906569563414686, 0.9856770320256104, 0.9922482853842955, 0.989598346587647, 0.9899120701514241, 0.8376690228399369, 0.060322943584057986, 0.059620391739468315, 0.1541180404271365, 0.15447130901250095, 0.1542768067800484, 0.12927750759593404, 0.08902662250202853, 0.8670832998318978, 0.2311009305541062, 0.2169924624998505, 0.2306528608550541, 0.2842647663679303, 0.1940807925416409, 0.1135913882116889, 0.07604431229248598, 0.08517207981089725, 0.3313117144221457, 0.1306069178767042, 0.24224525590649348, 0.25801720818390017, 0.10346578087436742, 0.2420046254436492, 0.23799013979953143, 0.2834331458142789, 0.1327618324538673, 0.24331089622312863, 0.2498156449851997, 9.999999999998899e-05, 0.1354770819206893, 0.291203607383998, 0.2765513203350536, 0.1372601860614412, 0.2875982504083219, 0.0354228787721369, 0.1357955182723184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012904884444416509, 0.1980198387506673, 0.04086188911702282, 0.1364585465015119, 9.999999999998899e-05, 9.999999999998899e-05, 0.20178454627411424, 0.10539912933822992, 0.13905949374768412, 0.06492367340372873, 9.999999999998899e-05, 0.05097620881466536, 0.060705832905430857, 0.08876099557762718, 0.1250446696490275, 0.053798267574765135, 9.999999999998899e-05, 0.2464899029832014, 0.10353422482023977, 0.08325357580097448, 0.08462157778729418, 0.13282860291478427, 0.37511699353840877, 0.07718029215922284, 0.09412168720818537, 0.10567709976037809, 0.059764426839177265, 0.04012439513003463, 9.999999999998899e-05, 0.04027624459008328, 0.21114743905310107, 9.999999999998899e-05, 0.12483022814248412, 0.5399187314370523, 0.5688900542386595, 0.5698169035173952, 0.5623508573356573, 0.20995418310839542, 0.20967518923752737, 0.607914883627494, 0.5899901547353824, 0.6235146560410707, 0.08451797003107664, 0.06626044090776284, 0.02088983308025094, 0.14772354761661521, 0.06942468135067592, 0.08747508903136858, 0.08721759763182313, 0.10974000716006282, 0.10187176759803063, 0.28291250166031745, 0.24485304023983534, 0.18154840048011878, 0.2188234246747769, 0.2293256273239075, 0.1706672986244928, 0.24294405479329573, 0.21211091492110667, 0.17382480813344015, 0.24328578626596165, 0.3171669991496281, 0.3047018671442112, 0.25564268933239187, 0.2682020273686758, 0.43830547486560467, 0.19294090839020284, 0.3871364750580819, 0.17467991536487426, 0.12054482317407966, 0.20253193150828463, 0.16429378436380926, 0.2666467738205741, 0.19823413489766084, 0.29972740694550015, 0.23474150370922464, 0.21605939449888079, 0.1023179650754229, 0.22407247444349543, 0.2648840454233319, 0.24203942395192413, 0.22497457769301155, 0.19863852415383298, 0.2303816325922784, 0.2528286927369079, 0.20392743658406176, 0.2187701956886764, 0.22911225440479666, 0.20418467501847315, 0.19924094241984558, 0.19413837570814474, 0.18328575261984947, 0.20337153669659658, 0.18533158348566936, 0.2561401498735083, 0.22740007766618808, 0.9533278780993636, 0.18896995350618895, 0.15452275090519685, 0.9489361926262555, 0.2018055514335253, 0.20216027771250544, 0.15999265005943653, 0.12647121209977052, 0.16360730621167818, 0.8796198198823181, 0.21339924764809715, 0.8397161286446199, 0.21352560789417008, 0.16930314251469303, 0.21225388811705115, 0.104350908803029, 0.1699369441222217, 0.10443795607493234, 0.22932200732822006, 0.21511489500163206, 0.19830239555060203, 0.2223849301341535, 0.21556846479948877, 0.1902806524897751, 0.23561909176838458, 0.22376150632763803, 0.18934642425139336, 0.082451147473112, 0.10449320721117805, 0.08226150463917015, 0.12304061957359014, 0.06598029861220167, 0.11248008414260124, 0.08059685931762617, 0.04619277096196661, 0.09448983479988038]}, "mutation_prompt": null}
