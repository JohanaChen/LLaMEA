{"id": "05aa6587-bb5b-4666-900c-f227e1512a44", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.inertia_weight = 0.9\n        self.c1 = 2.0  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.best_positions = np.copy(self.positions)\n        self.best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def update_velocities(self):\n        for i in range(self.num_particles):\n            r1 = np.random.rand(self.dim)\n            r2 = np.random.rand(self.dim)\n            cognitive_velocity = self.c1 * r1 * (self.best_positions[i] - self.positions[i])\n            social_velocity = self.c2 * r2 * (self.global_best_position - self.positions[i])\n            self.velocities[i] = (self.inertia_weight * self.velocities[i] + cognitive_velocity + social_velocity)\n\n    def update_positions(self):\n        self.positions += self.velocities\n        self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n            \n            # Update personal bests\n            better_mask = scores < self.best_scores\n            self.best_scores[better_mask] = scores[better_mask]\n            self.best_positions[better_mask] = self.positions[better_mask]\n            \n            # Update global best\n            min_score = np.min(scores)\n            if min_score < self.global_best_score:\n                self.global_best_score = min_score\n                self.global_best_position = self.positions[np.argmin(scores)]\n            \n            # Update inertia weight dynamically\n            self.inertia_weight = 0.4 + (0.5 * (self.budget - evaluations) / self.budget)\n            \n            # Update velocities and positions\n            self.update_velocities()\n            self.update_positions()\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "A multi-strategy Particle Swarm Optimization (PSO) algorithm with adaptive inertia weight and dynamic neighborhood topology to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.13685265008221634, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.2682318963392174, 0.32336997627333963, 0.29005018668573934, 0.15493066036286096, 0.14108780540426524, 0.16262494287506557, 0.17341061408093572, 0.1478305788705, 0.14669714697144776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017527545956335433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018570710594123518, 9.999999999998899e-05, 0.038651380113715494, 0.03618258313363654, 0.04091169455465771, 0.04771973111804195, 0.0801085930133093, 0.05535139096877306, 0.05274459395540565, 0.023196130470421683, 0.029872716745778738, 0.046619775468740965, 0.029661527238157626, 0.06645764146385169, 0.04337682181938596, 0.041287042167394095, 0.033074772652393, 0.02168707411425186, 0.021841254624560658, 0.06810117080246636, 0.9932781103676772, 0.994358714529594, 0.9943488939017671, 0.9881449181034305, 0.9913028967538714, 0.985997628215223, 0.9894625331726629, 0.9892713092052887, 0.9914472849036652, 0.05407013859233101, 0.05964111472893818, 0.05257848710011892, 0.13578420653415146, 0.11955018049217958, 0.11509597836382923, 0.07647849329671685, 0.07824931381336842, 0.08029505916533997, 0.1590024403511877, 0.18341303014140242, 0.15463397347313568, 0.16803474132509122, 0.15691782342347982, 0.11385508828489588, 0.12146643037988292, 0.12329631297028076, 0.11684873587655764, 0.04486037897229034, 0.09328555903332636, 0.07537437888114351, 0.05232418298212871, 9.999999999998899e-05, 0.04723918665361437, 0.07777724896576133, 9.999999999998899e-05, 0.12539296106558162, 0.09675020644630017, 0.010140871889261494, 0.06353166832301016, 0.02709842127326134, 0.12773239363797861, 0.18320163628728237, 0.032581614165466455, 0.02378515797605174, 0.037703128262267294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016633706670811987, 0.017578062389377203, 0.00414669357626829, 0.013202849071572209, 0.026490349804194957, 9.999999999998899e-05, 0.02870137874275458, 0.02612539894921717, 0.020329691702545283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02151722244300147, 0.00819911036605081, 9.999999999998899e-05, 0.01902111030381526, 0.019829230939726994, 9.999999999998899e-05, 0.00082559853793851, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01813176680652684, 0.25149243584160563, 0.2463103789420249, 0.38451432908269967, 0.16529716256177673, 0.17041417435811268, 0.16629230471784318, 0.3061680194613259, 0.12147838862861537, 0.34988294200584724, 0.07644120785397557, 0.051421443348682816, 0.07190387500896489, 0.0669074563479024, 0.01593244941353711, 0.06649192376959401, 0.05716088935169117, 0.06680644129642332, 0.042383544758064606, 0.15287288565614743, 0.14226358196825117, 0.1118571982200236, 0.18082985382619776, 0.14222019663156515, 0.15560276494549907, 0.1180573411908219, 0.11600844838101398, 0.18207778803026697, 0.14898336997625705, 0.16792867758322338, 0.22749871552529644, 0.1958738423846731, 0.1749120055024801, 0.2181930743983912, 0.2048875709972411, 0.21483615516494492, 0.15426208171642453, 0.12658091888227974, 0.13460421765157116, 0.13485567808805277, 0.09711421325435099, 0.13692800700384578, 0.14587332879091008, 0.10759671955737982, 0.13145385604789206, 0.15653635755387296, 0.17752805692175533, 0.1292604462932766, 0.1802370253445268, 0.15999677577454918, 0.16416789545575428, 0.16954040946654347, 0.19591566453056197, 0.14606535853761582, 0.18935737612364412, 0.1519470936126014, 0.17058881397665193, 0.17578864886660484, 0.16822778114119885, 0.15224509382611573, 0.17149505667034137, 0.16779179513209475, 0.16495569614100136, 0.15656228131998573, 0.1370296295060418, 0.12005363460296048, 0.11497811175279404, 0.1238021043284947, 0.15914247082998623, 0.14407747900612955, 0.08200578149393134, 0.162612421014662, 0.16569384580058155, 0.13846260775106256, 0.177298217153658, 0.10548998412786748, 0.09269649711972283, 0.1976416556120214, 0.10706073168296848, 0.1729499036951787, 0.18541017437568752, 0.22473590620208317, 0.18186829768452228, 0.1923214083312219, 0.17826895170347345, 0.17884701306324258, 0.1499846676401574, 0.17653114137557568, 0.20032853599981326, 0.18884550381493836, 0.18120819909132468, 0.07061899102174918, 0.06340657808814754, 0.0660251192254323, 0.04677996161191589, 0.06700538704195658, 0.05943129603662278, 0.039203814148689564, 0.03526722355923284, 0.0695103655638426]}, "mutation_prompt": null}
{"id": "fb9d35d7-2bab-4165-b385-67b8aaa817c8", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 30\n        self.inertia_weight = 0.9\n        self.c1 = 2.0  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        self.best_positions = np.copy(self.positions)\n        self.best_scores = np.full(self.num_particles, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def update_velocities(self):\n        for i in range(self.num_particles):\n            r1 = np.random.rand(self.dim)\n            r2 = np.random.rand(self.dim)\n            cognitive_velocity = self.c1 * r1 * (self.best_positions[i] - self.positions[i])\n            social_velocity = self.c2 * r2 * (self.global_best_position - self.positions[i])\n            self.velocities[i] = (self.inertia_weight * self.velocities[i] + cognitive_velocity + social_velocity)\n\n    def update_positions(self):\n        self.positions += self.velocities\n        self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n            \n            # Update personal bests\n            better_mask = scores < self.best_scores\n            self.best_scores[better_mask] = scores[better_mask]\n            self.best_positions[better_mask] = self.positions[better_mask]\n            \n            # Update global best\n            min_score = np.min(scores)\n            if min_score < self.global_best_score:\n                self.global_best_score = min_score\n                self.global_best_position = self.positions[np.argmin(scores)]\n            \n            # Update inertia weight dynamically\n            self.inertia_weight = 0.4 + (0.5 * (self.budget - evaluations) / self.budget)\n            \n            # Adjust social coefficient dynamically\n            self.c2 = 3.0 * (evaluations / self.budget)\n\n            # Update velocities and positions\n            self.update_velocities()\n            self.update_positions()\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced dynamic adjustment of social coefficient to enhance convergence speed in AdaptivePSO.", "configspace": "", "generation": 1, "fitness": 0.28352432800265637, "feedback": "", "error": "", "parent_id": "05aa6587-bb5b-4666-900c-f227e1512a44", "metadata": {"aucs": [0.8109385223216656, 0.7807100508975422, 0.7995309878052502, 0.8017600771430463, 0.6871396035625192, 0.6824417274998231, 0.802410567108104, 0.6386427492818263, 0.8003336522452704, 0.21825686286264523, 0.38337701088897636, 0.28515456295736097, 0.23446325061622442, 0.32887756088030584, 0.3522331234038625, 0.310842500148789, 0.48035821431322256, 0.4516594509626395, 0.12087070536678635, 0.10361428922300076, 0.15070601678073203, 0.15272672309917068, 0.12992531811860897, 0.155872602902142, 0.1600735363899547, 0.08500013452097466, 0.14829109507258342, 0.11154072575204133, 0.10427253730152919, 0.09856466745077563, 0.09665367283224313, 0.14107669766206032, 0.10476090273793581, 0.10450300154525305, 0.13846703207538535, 0.09570980193410727, 0.9625475732445211, 0.9376459878539531, 0.9396877203165641, 0.9294056457831305, 0.937541113865842, 0.9314352118035417, 0.9435450980913094, 0.9531625037398149, 0.9523160842113011, 0.2875285092454364, 0.4074266188011798, 0.36757546804851127, 0.5299611705213787, 0.4354712965008498, 0.47083581760079407, 0.4059882926756617, 0.38989922783625386, 0.44224391184488543, 0.6730011278993151, 0.2970573443984935, 0.2164830180595353, 0.8355085321279736, 0.2544577763689243, 0.26648339770916174, 0.2287455311975205, 0.22817095851754943, 0.23939605456127888, 0.1790191952432275, 0.1727979131038364, 0.23647709466380762, 0.15701113261008126, 0.17024893714264067, 0.16107335090305863, 0.1798243789279157, 0.18746587851835061, 0.1832461258414846, 0.1845316149785916, 0.1872864880874756, 0.2622876199388037, 0.1894198488949579, 0.1753994386999126, 0.15520306756002977, 0.20701682557443368, 0.18144121521730083, 0.1932237572726665, 9.999999999998899e-05, 0.05446284257890144, 9.999999999998899e-05, 0.056375629214520995, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06940143325656956, 0.10644829509053777, 0.06855309276797239, 0.13548581793732228, 0.07197369277677468, 0.06887259990947803, 0.05710415065248142, 0.08837658325958198, 0.09186305194551747, 0.09062801655741837, 0.05253202137604107, 0.1315595312441019, 0.10342388430239735, 0.06719291255835036, 0.06080924504797203, 0.06384090212678561, 0.1332996133979052, 0.08297675407217686, 0.1793001382391518, 0.15870922088209138, 0.041090280757222764, 0.1836441243171777, 0.09879842712520237, 0.10746497229155849, 0.08790259888119822, 0.16549029079642208, 0.11621415467094631, 0.07950984807065509, 0.48080275716515675, 0.4302365419005697, 0.48896013865718346, 0.5154258787316818, 0.4756019990153779, 0.4980013321382969, 0.5268695018998524, 0.49104440649207304, 0.5387415886121341, 0.10055904924454584, 0.08830490669220437, 0.14160708356893936, 0.0941143063287152, 0.0919631477083156, 0.11449295703177009, 0.08762498236226912, 0.09780229604571467, 0.08137328509424657, 0.1885767657221531, 0.21150822355900156, 0.20254323482308645, 0.16319639695324817, 0.16193590552898807, 0.20783416590344506, 0.15713197723517447, 0.2575631966081513, 0.18591731424179248, 0.2507867786111335, 0.2553715709969333, 0.32392877013295507, 0.3831033785196063, 0.3318889583580843, 0.3439283179909247, 0.28947673307274757, 0.311250090760521, 0.3437534486374909, 0.22422750785883505, 0.23917370395233628, 0.16645036224022336, 0.23623503781305644, 0.19452294489358146, 0.231642193835487, 0.18478402693571838, 0.22483119271482344, 0.22254057739369593, 0.2170312265914609, 0.1831956998761296, 0.20840131748260315, 0.20837889934263698, 0.20358119909400763, 0.19429619080265148, 0.17807439195265196, 0.2303679331532782, 0.21000129084033026, 0.1766756329659842, 0.18807280336920085, 0.21998591115140886, 0.2007249321554141, 0.20215432190843186, 0.22255260921030917, 0.21638420310400075, 0.2089000002876208, 0.25816993226832674, 0.7936949710302419, 0.7253287273904865, 0.18598373876574037, 0.7839962760768187, 0.681669381370126, 0.5218036299980342, 0.7157355464782913, 0.5032961918111456, 0.7509833402352147, 0.43417476744356587, 0.4153793972807517, 0.389039448651458, 0.522879836292084, 0.4701603966471217, 0.189573577982716, 0.24818867845836945, 0.6349793530208034, 0.5327147843485679, 0.1796303234878467, 0.18285369001672092, 0.20431918885097589, 0.17559676897778076, 0.1877917652552874, 0.19458615800572165, 0.1792799055238563, 0.18337459343876872, 0.19456744877077414, 0.10087780055503426, 0.08947855507248093, 0.07205496078973772, 0.07115019504123088, 0.07514058378666633, 0.11081492499483592, 0.08290149451742423, 0.06726530693552812, 0.07325277396082763]}, "mutation_prompt": null}
