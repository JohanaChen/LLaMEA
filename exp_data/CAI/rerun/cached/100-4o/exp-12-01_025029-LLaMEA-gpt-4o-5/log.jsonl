{"id": "555f4866-a8c5-4500-a5b7-44933913d1d1", "solution": "import numpy as np\n\nclass AdaptiveMultiPopPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.num_pops = 3\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_global_position = None\n        self.best_global_value = np.inf\n\n    def initialize_population(self):\n        positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.pop_size, np.inf)\n        return positions, velocities, personal_best_positions, personal_best_values\n\n    def __call__(self, func):\n        num_evaluations = 0\n        populations = [self.initialize_population() for _ in range(self.num_pops)]\n\n        while num_evaluations < self.budget:\n            for pop_index, (positions, velocities, personal_best_positions, personal_best_values) in enumerate(populations):\n                for i in range(self.pop_size):\n                    current_value = func(positions[i])\n                    num_evaluations += 1\n                    \n                    if current_value < personal_best_values[i]:\n                        personal_best_positions[i] = positions[i]\n                        personal_best_values[i] = current_value\n\n                    if current_value < self.best_global_value:\n                        self.best_global_position = positions[i]\n                        self.best_global_value = current_value\n\n                    if num_evaluations >= self.budget:\n                        break\n                \n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities = (self.w * velocities + \n                              self.c1 * r1 * (personal_best_positions - positions) +\n                              self.c2 * r2 * (self.best_global_position - positions))\n                positions += velocities\n                positions = np.clip(positions, self.lb, self.ub)\n\n                # Adapt strategy based on remaining evaluations\n                if num_evaluations / self.budget > 0.7:\n                    self.w = 0.3  # Encourage exploitation\n                    self.c1, self.c2 = 2.0, 2.0\n                else:\n                    self.w = 0.5  # Encourage exploration\n                    self.c1, self.c2 = 1.5, 1.5\n\n        return self.best_global_position, self.best_global_value", "name": "AdaptiveMultiPopPSO", "description": "An adaptive multi-population Particle Swarm Optimization (PSO) algorithm with dynamic exploration-exploitation balance to efficiently navigate the search space.", "configspace": "", "generation": 0, "fitness": 0.1961909060294531, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.36178157694498136, 0.3595143516454694, 0.3283458630587405, 0.3521060837632689, 0.36342639535084464, 0.36958785919279, 0.3411135937764914, 0.3486507033381907, 0.3956517997350584, 0.02043880486617522, 9.999999999998899e-05, 0.039817307710503735, 0.031149062068869027, 0.016354828733415205, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021548420584110994, 9.999999999998899e-05, 0.10933438308613064, 0.08536324086865865, 0.11774485330885565, 0.0820820653116574, 0.10270461510463069, 0.08983561036968679, 0.09111134630559958, 0.09817845992599217, 0.1090099580904611, 0.08054873780497818, 0.07509601302044722, 0.09265598855695245, 0.08711432208872505, 0.07925713451852456, 0.09134415000409213, 0.08652367559847918, 0.07716420190758144, 0.07120079983219585, 0.9303416142953409, 0.9569795522808051, 0.9441309776957196, 0.8575230367780411, 0.9067520940082481, 0.9365153958218789, 0.9393962898583872, 0.9038133447754412, 0.9367001137480521, 0.23474294417818053, 0.22115481985554308, 0.23150592213684806, 0.199052393645352, 0.26729056956706543, 0.21045884925573433, 0.19557062360599897, 0.21752996622591947, 0.21168943237181648, 0.30500276762556133, 0.2702666662530562, 0.25294110590448304, 0.32686106643847535, 0.20050338589314742, 0.27905148312344596, 0.2726466453323273, 0.24185681741891962, 0.21678076758660136, 0.08985400057988391, 0.1114682989553738, 0.1675504533347013, 0.13274678979796195, 0.12490651249013796, 0.13413126592147506, 0.1425667501143838, 0.14365058139681863, 0.15299756217482408, 0.14281131205382303, 0.12060146332203459, 0.1154960013871894, 0.1407606638201494, 0.14325626966932814, 0.1310900375164672, 0.08801710000038743, 0.11584583798628989, 0.14478709437616888, 9.999999999998899e-05, 9.999999999998899e-05, 0.008881173629095573, 0.013509193250993645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06456731073996302, 0.07233838945476201, 0.07433749294997216, 0.05544002848709262, 0.056621962038260976, 0.0634155662281568, 0.1333391348457249, 0.05993978475636508, 0.05117961607838861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0679339324284256, 0.06713429585034592, 0.0611708495411738, 0.08115252609477297, 0.06121489239492495, 0.0681985613486602, 0.08256508537371887, 0.06752596209540929, 0.060852384044950636, 0.3480776340251659, 0.3345189844059512, 0.3379476567569514, 0.35251493710868564, 0.3309661941171873, 0.37839156733451795, 0.33194377699558764, 0.3349204017275689, 0.34158296509631647, 0.08202623438618206, 0.13193080599433504, 0.07812232124041907, 0.11746865824924535, 0.10137727791384565, 0.09143358189938666, 0.09871239372588703, 0.08731276104053964, 0.07200141060142595, 0.1628728284751041, 0.14547952749342696, 0.19714300868774548, 0.1380140631456397, 0.19412880524134757, 0.17109794585497617, 0.15970509340075478, 0.1750169294673225, 0.19318600602678848, 0.24493410422649287, 0.2581212518899435, 0.2411392023425465, 0.25744681819445336, 0.23609040155043104, 0.26497956137676293, 0.24567150459057607, 0.2452371825265307, 0.23950693535051382, 0.18881701682347385, 0.17625644186476908, 0.1746764688568626, 0.15747827698892125, 0.19493110340561048, 0.168256766498029, 0.21713136816358736, 0.19920167854285065, 0.21163894065343347, 0.2095215312927332, 0.19502737792985947, 0.19341568787726238, 0.192520258269111, 0.2254160349728377, 0.19792219070331962, 0.21631495517353083, 0.2120430272229782, 0.2235313473790307, 0.19026820142237788, 0.17867958307834375, 0.17993638682169333, 0.19686995801328333, 0.1839796756511719, 0.19168248514466135, 0.19727705584030353, 0.2334143624762144, 0.18782070546961005, 0.1289008223691962, 0.19323912710191293, 0.5364342490904096, 0.4285279658627892, 0.45608988521670946, 0.16891042765220887, 0.4911738326699058, 0.16905425339312152, 0.3399523250232802, 0.39695407750261424, 0.1541730032219315, 0.4785487592017269, 0.40425344208737857, 0.37873103935586094, 0.410187382855267, 0.1691810635770582, 0.15397053425053653, 0.28738179683130094, 0.18970070977781162, 0.17718463445776944, 0.17358963684875017, 0.1750371592915292, 0.17532445245659278, 0.17945053383082266, 0.18788932214613485, 0.1793011310325674, 0.18889909837044538, 0.07420811889860235, 0.08464841332106898, 0.08214423266027404, 0.09140334608535572, 0.07889505939882979, 0.08698048612652998, 0.09467704207340633, 0.08047600827344237, 0.07743530089651052]}, "mutation_prompt": null}
{"id": "3db1d628-da82-44f4-8b55-f5ff5a609feb", "solution": "import numpy as np\n\nclass AdaptiveMultiPopPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.num_pops = 3\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.lb = -5.0\n        self.ub = 5.0\n        self.best_global_position = None\n        self.best_global_value = np.inf\n\n    def initialize_population(self):\n        positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.pop_size, np.inf)\n        return positions, velocities, personal_best_positions, personal_best_values\n\n    def __call__(self, func):\n        num_evaluations = 0\n        populations = [self.initialize_population() for _ in range(self.num_pops)]\n\n        while num_evaluations < self.budget:\n            for pop_index, (positions, velocities, personal_best_positions, personal_best_values) in enumerate(populations):\n                for i in range(self.pop_size):\n                    current_value = func(positions[i])\n                    num_evaluations += 1\n                    \n                    if current_value < personal_best_values[i]:\n                        personal_best_positions[i] = positions[i]\n                        personal_best_values[i] = current_value\n\n                    if current_value < self.best_global_value:\n                        self.best_global_position = positions[i]\n                        self.best_global_value = current_value\n\n                    if num_evaluations >= self.budget:\n                        break\n                \n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities = (self.w * velocities + \n                              self.c1 * r1 * (personal_best_positions - positions) +\n                              self.c2 * r2 * (self.best_global_position - positions))\n                positions += velocities\n                positions = np.clip(positions, self.lb, self.ub)\n\n                # Adapt strategy based on remaining evaluations\n                if num_evaluations / self.budget > 0.7:\n                    self.w = 0.3  # Encourage exploitation\n                    self.c1, self.c2 = 2.0, 2.0\n                else:\n                    self.w = 0.5  # Encourage exploration\n                    self.c1, self.c2 = 1.5, 1.5\n\n        return self.best_global_position, self.best_global_value", "name": "AdaptiveMultiPopPSO", "description": "An adaptive multi-population Particle Swarm Optimization (PSO) algorithm with dynamic exploration-exploitation balance to efficiently navigate the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "555f4866-a8c5-4500-a5b7-44933913d1d1", "metadata": {"aucs": [0.36178157694498136, 0.3595143516454694, 0.3283458630587405, 0.3521060837632689, 0.36342639535084464, 0.36958785919279, 0.3411135937764914, 0.3486507033381907, 0.3956517997350584, 0.02043880486617522, 9.999999999998899e-05, 0.039817307710503735, 0.031149062068869027, 0.016354828733415205, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021548420584110994, 9.999999999998899e-05, 0.10933438308613064, 0.08536324086865865, 0.11774485330885565, 0.0820820653116574, 0.10270461510463069, 0.08983561036968679, 0.09111134630559958, 0.09817845992599217, 0.1090099580904611, 0.08054873780497818, 0.07509601302044722, 0.09265598855695245, 0.08711432208872505, 0.07925713451852456, 0.09134415000409213, 0.08652367559847918, 0.07716420190758144, 0.07120079983219585, 0.9303416142953409, 0.9569795522808051, 0.9441309776957196, 0.8575230367780411, 0.9067520940082481, 0.9365153958218789, 0.9393962898583872, 0.9038133447754412, 0.9367001137480521, 0.23474294417818053, 0.22115481985554308, 0.23150592213684806, 0.199052393645352, 0.26729056956706543, 0.21045884925573433, 0.19557062360599897, 0.21752996622591947, 0.21168943237181648, 0.30500276762556133, 0.2702666662530562, 0.25294110590448304, 0.32686106643847535, 0.20050338589314742, 0.27905148312344596, 0.2726466453323273, 0.24185681741891962, 0.21678076758660136, 0.08985400057988391, 0.1114682989553738, 0.1675504533347013, 0.13274678979796195, 0.12490651249013796, 0.13413126592147506, 0.1425667501143838, 0.14365058139681863, 0.15299756217482408, 0.14281131205382303, 0.12060146332203459, 0.1154960013871894, 0.1407606638201494, 0.14325626966932814, 0.1310900375164672, 0.08801710000038743, 0.11584583798628989, 0.14478709437616888, 9.999999999998899e-05, 9.999999999998899e-05, 0.008881173629095573, 0.013509193250993645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06456731073996302, 0.07233838945476201, 0.07433749294997216, 0.05544002848709262, 0.056621962038260976, 0.0634155662281568, 0.1333391348457249, 0.05993978475636508, 0.05117961607838861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0679339324284256, 0.06713429585034592, 0.0611708495411738, 0.08115252609477297, 0.06121489239492495, 0.0681985613486602, 0.08256508537371887, 0.06752596209540929, 0.060852384044950636, 0.3480776340251659, 0.3345189844059512, 0.3379476567569514, 0.35251493710868564, 0.3309661941171873, 0.37839156733451795, 0.33194377699558764, 0.3349204017275689, 0.34158296509631647, 0.08202623438618206, 0.13193080599433504, 0.07812232124041907, 0.11746865824924535, 0.10137727791384565, 0.09143358189938666, 0.09871239372588703, 0.08731276104053964, 0.07200141060142595, 0.1628728284751041, 0.14547952749342696, 0.19714300868774548, 0.1380140631456397, 0.19412880524134757, 0.17109794585497617, 0.15970509340075478, 0.1750169294673225, 0.19318600602678848, 0.24493410422649287, 0.2581212518899435, 0.2411392023425465, 0.25744681819445336, 0.23609040155043104, 0.26497956137676293, 0.24567150459057607, 0.2452371825265307, 0.23950693535051382, 0.18881701682347385, 0.17625644186476908, 0.1746764688568626, 0.15747827698892125, 0.19493110340561048, 0.168256766498029, 0.21713136816358736, 0.19920167854285065, 0.21163894065343347, 0.2095215312927332, 0.19502737792985947, 0.19341568787726238, 0.192520258269111, 0.2254160349728377, 0.19792219070331962, 0.21631495517353083, 0.2120430272229782, 0.2235313473790307, 0.19026820142237788, 0.17867958307834375, 0.17993638682169333, 0.19686995801328333, 0.1839796756511719, 0.19168248514466135, 0.19727705584030353, 0.2334143624762144, 0.18782070546961005, 0.1289008223691962, 0.19323912710191293, 0.5364342490904096, 0.4285279658627892, 0.45608988521670946, 0.16891042765220887, 0.4911738326699058, 0.16905425339312152, 0.3399523250232802, 0.39695407750261424, 0.1541730032219315, 0.4785487592017269, 0.40425344208737857, 0.37873103935586094, 0.410187382855267, 0.1691810635770582, 0.15397053425053653, 0.28738179683130094, 0.18970070977781162, 0.17718463445776944, 0.17358963684875017, 0.1750371592915292, 0.17532445245659278, 0.17945053383082266, 0.18788932214613485, 0.1793011310325674, 0.18889909837044538, 0.07420811889860235, 0.08464841332106898, 0.08214423266027404, 0.09140334608535572, 0.07889505939882979, 0.08698048612652998, 0.09467704207340633, 0.08047600827344237, 0.07743530089651052]}, "mutation_prompt": null}
