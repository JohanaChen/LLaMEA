{"id": "928c4a81-f049-4b04-abc4-dc4f2694e34a", "solution": "import numpy as np\n\nclass EPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.inertia_weight = 0.7\n        self.cognitive_const = 1.5\n        self.social_const = 1.5\n        self.mutation_rate = 0.1\n    \n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, \n                                      (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            # Evaluate fitness\n            scores = np.array([func(pos) for pos in positions])\n            evaluations += self.population_size\n            \n            # Update personal bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                    \n            # Update global best\n            min_score_idx = np.argmin(scores)\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best_position = positions[min_score_idx]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_const * r1 * (personal_best_positions[i] - positions[i])\n                social_velocity = self.social_const * r2 * (global_best_position - positions[i])\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 cognitive_velocity + social_velocity)\n                positions[i] += velocities[i]\n                \n                # Apply boundaries\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n                \n                # Mutation strategy to escape local optima\n                if np.random.rand() < self.mutation_rate:\n                    mutation_vector = np.random.normal(0, 1, self.dim)\n                    positions[i] += mutation_vector\n                    positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n        \n        return global_best_position", "name": "EPSO", "description": "A hybrid Evolutionary and Particle Swarm Optimization (EPSO) algorithm that adapts to the problem landscape by combining exploration and exploitation strategies dynamically.", "configspace": "", "generation": 0, "fitness": 0.1838320219707457, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3755719961925825, 0.3545786433009682, 0.32640602722079115, 0.3997387720351332, 0.350633845332024, 0.4792236949241525, 0.35549462488788763, 0.3769255537263695, 0.41220725207171305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000572975486997529, 0.020278112814058113, 9.999999999998899e-05, 9.999999999998899e-05, 0.00037970061944803124, 9.999999999998899e-05, 0.08819471841116777, 0.08375503006645635, 0.09964611573744364, 0.1035369102263306, 0.09437666993460059, 0.10919716792511369, 0.0974762490437322, 0.09137271418315285, 0.10458871100593337, 0.06646531180656479, 0.10428857581776774, 0.07970549103149915, 0.09219752992199715, 0.07904973548921901, 0.07848030505918135, 0.08366626185936055, 0.07895788829157824, 0.08713219521650317, 0.9914040048466258, 0.9892443541777705, 0.9915031968995975, 0.9862352197887446, 0.9870108682583503, 0.9908553637216247, 0.9889457308477969, 0.990160564448474, 0.9862301180751205, 0.21601544390074223, 0.1769183561790062, 0.194691593738198, 0.18747427118852078, 0.17216186993034954, 0.20084834714581812, 0.21622985774947168, 0.21575886431448377, 0.19079579834544969, 0.28492480280032306, 0.19734758907626626, 0.21979642668794008, 0.2122815903588744, 0.21215357394699663, 0.28113290242810807, 0.21683729411168684, 0.20706734480016697, 0.22179262999423066, 0.09667694813340999, 0.1247912846789122, 0.1455934500738777, 0.1086068052668756, 0.11376632993421554, 0.07944766954063653, 0.11610524029783809, 0.07732960128917277, 0.11210769420051747, 0.11793175270474499, 0.075276508050795, 0.10648061188565794, 0.11100447968460225, 0.06529046887196222, 0.12093349140067056, 0.1129496417357212, 0.11144699504664934, 0.1085326337626944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07651649383573678, 0.039652956878339474, 0.05885428076458976, 0.06488731531459146, 0.018944439052179796, 0.06588982110166142, 0.06162913849261331, 0.045546601181163715, 0.06379911018996731, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07104071968472703, 0.07706741018022056, 0.059534230195953386, 0.08068467572251525, 0.06768852213381438, 0.02863169138806665, 0.052498172678488886, 0.03965776052820624, 0.05331836418423175, 0.32333355127891883, 0.3109490431255163, 0.33549159022122754, 0.3375189994681942, 0.3318600164703761, 0.3407962157768839, 0.3494892387169065, 0.3245719057798777, 0.35676704245251023, 0.11190426860600333, 0.0937359683306549, 0.09573518236311451, 0.09534662223769663, 0.08379975473074008, 0.08484206537316274, 0.07611948850755756, 0.07455874648815097, 0.11950147417673218, 0.16219280215327603, 0.21770667689959577, 0.15401349479276139, 0.202267021793489, 0.205038859511943, 0.15774870252007678, 0.2192284803183212, 0.17152147475533563, 0.19087371352924187, 0.26067706927731926, 0.24282873523813187, 0.2343990380065185, 0.22772624331228986, 0.2571661990040045, 0.2471999988446606, 0.23592864713340433, 0.2951287396475025, 0.225971638329439, 0.20296872120434928, 0.1865839230638523, 0.17572878787022728, 0.1576716178118056, 0.16526953382941922, 0.1475773021758061, 0.1883118159635564, 0.20147802677880133, 0.17594120155081783, 0.17907825601995286, 0.16516960901386157, 0.1927213735095461, 0.22425690131960474, 0.20482829868237384, 0.18010662126828048, 0.20792196993773293, 0.1995047391191902, 0.19268815274465922, 0.1933880092680227, 0.1765526017940232, 0.1868959190973737, 0.20174364319834515, 0.18506084134530532, 0.18142436057578193, 0.20425207745699092, 0.18056141226868516, 0.17595370922396014, 0.48298830948081106, 0.16719552686121497, 0.15459315486763447, 0.17598772088003334, 0.19037191088899286, 0.19032119451681606, 0.12127814596134345, 0.15959294872920549, 0.20520006381676537, 0.36233860125896733, 0.16457091960245596, 0.19647112617787288, 0.20406224933179196, 0.18317902241592654, 0.1979185940632131, 0.20997836055127728, 0.17658717840147797, 0.2638708593617163, 0.1836368685824452, 0.16933393991403423, 0.20121718622086204, 0.17957466027850877, 0.1778873827295061, 0.18726770144455718, 0.1923775467782015, 0.19910758200937384, 0.20468657716380267, 0.06427646437713208, 0.08972665584594852, 0.08187223198580884, 0.08708115121632054, 0.07143342644329465, 0.07376954879821129, 0.06907163614430079, 0.07130937100998147, 0.07757272484091793]}, "mutation_prompt": null}
{"id": "a91c6380-2871-426c-818d-a27d1640a8e4", "solution": "import numpy as np\n\nclass EPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 30\n        self.inertia_weight = 0.7\n        self.cognitive_const = 1.5\n        self.social_const = 1.5\n        self.mutation_rate = 0.1\n    \n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, \n                                      (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            # Evaluate fitness\n            scores = np.array([func(pos) for pos in positions])\n            evaluations += self.population_size\n            \n            # Update personal bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                    \n            # Update global best\n            min_score_idx = np.argmin(scores)\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best_position = positions[min_score_idx]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_const * r1 * (personal_best_positions[i] - positions[i])\n                social_velocity = self.social_const * r2 * (global_best_position - positions[i])\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 cognitive_velocity + social_velocity)\n                positions[i] += velocities[i]\n                \n                # Apply boundaries\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n                \n                # Mutation strategy to escape local optima\n                if np.random.rand() < self.mutation_rate:\n                    mutation_vector = np.random.normal(0, 1, self.dim)\n                    positions[i] += mutation_vector\n                    positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n        \n        return global_best_position", "name": "EPSO", "description": "A hybrid Evolutionary and Particle Swarm Optimization (EPSO) algorithm that adapts to the problem landscape by combining exploration and exploitation strategies dynamically.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "928c4a81-f049-4b04-abc4-dc4f2694e34a", "metadata": {"aucs": [0.3755719961925825, 0.3545786433009682, 0.32640602722079115, 0.3997387720351332, 0.350633845332024, 0.4792236949241525, 0.35549462488788763, 0.3769255537263695, 0.41220725207171305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000572975486997529, 0.020278112814058113, 9.999999999998899e-05, 9.999999999998899e-05, 0.00037970061944803124, 9.999999999998899e-05, 0.08819471841116777, 0.08375503006645635, 0.09964611573744364, 0.1035369102263306, 0.09437666993460059, 0.10919716792511369, 0.0974762490437322, 0.09137271418315285, 0.10458871100593337, 0.06646531180656479, 0.10428857581776774, 0.07970549103149915, 0.09219752992199715, 0.07904973548921901, 0.07848030505918135, 0.08366626185936055, 0.07895788829157824, 0.08713219521650317, 0.9914040048466258, 0.9892443541777705, 0.9915031968995975, 0.9862352197887446, 0.9870108682583503, 0.9908553637216247, 0.9889457308477969, 0.990160564448474, 0.9862301180751205, 0.21601544390074223, 0.1769183561790062, 0.194691593738198, 0.18747427118852078, 0.17216186993034954, 0.20084834714581812, 0.21622985774947168, 0.21575886431448377, 0.19079579834544969, 0.28492480280032306, 0.19734758907626626, 0.21979642668794008, 0.2122815903588744, 0.21215357394699663, 0.28113290242810807, 0.21683729411168684, 0.20706734480016697, 0.22179262999423066, 0.09667694813340999, 0.1247912846789122, 0.1455934500738777, 0.1086068052668756, 0.11376632993421554, 0.07944766954063653, 0.11610524029783809, 0.07732960128917277, 0.11210769420051747, 0.11793175270474499, 0.075276508050795, 0.10648061188565794, 0.11100447968460225, 0.06529046887196222, 0.12093349140067056, 0.1129496417357212, 0.11144699504664934, 0.1085326337626944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07651649383573678, 0.039652956878339474, 0.05885428076458976, 0.06488731531459146, 0.018944439052179796, 0.06588982110166142, 0.06162913849261331, 0.045546601181163715, 0.06379911018996731, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07104071968472703, 0.07706741018022056, 0.059534230195953386, 0.08068467572251525, 0.06768852213381438, 0.02863169138806665, 0.052498172678488886, 0.03965776052820624, 0.05331836418423175, 0.32333355127891883, 0.3109490431255163, 0.33549159022122754, 0.3375189994681942, 0.3318600164703761, 0.3407962157768839, 0.3494892387169065, 0.3245719057798777, 0.35676704245251023, 0.11190426860600333, 0.0937359683306549, 0.09573518236311451, 0.09534662223769663, 0.08379975473074008, 0.08484206537316274, 0.07611948850755756, 0.07455874648815097, 0.11950147417673218, 0.16219280215327603, 0.21770667689959577, 0.15401349479276139, 0.202267021793489, 0.205038859511943, 0.15774870252007678, 0.2192284803183212, 0.17152147475533563, 0.19087371352924187, 0.26067706927731926, 0.24282873523813187, 0.2343990380065185, 0.22772624331228986, 0.2571661990040045, 0.2471999988446606, 0.23592864713340433, 0.2951287396475025, 0.225971638329439, 0.20296872120434928, 0.1865839230638523, 0.17572878787022728, 0.1576716178118056, 0.16526953382941922, 0.1475773021758061, 0.1883118159635564, 0.20147802677880133, 0.17594120155081783, 0.17907825601995286, 0.16516960901386157, 0.1927213735095461, 0.22425690131960474, 0.20482829868237384, 0.18010662126828048, 0.20792196993773293, 0.1995047391191902, 0.19268815274465922, 0.1933880092680227, 0.1765526017940232, 0.1868959190973737, 0.20174364319834515, 0.18506084134530532, 0.18142436057578193, 0.20425207745699092, 0.18056141226868516, 0.17595370922396014, 0.48298830948081106, 0.16719552686121497, 0.15459315486763447, 0.17598772088003334, 0.19037191088899286, 0.19032119451681606, 0.12127814596134345, 0.15959294872920549, 0.20520006381676537, 0.36233860125896733, 0.16457091960245596, 0.19647112617787288, 0.20406224933179196, 0.18317902241592654, 0.1979185940632131, 0.20997836055127728, 0.17658717840147797, 0.2638708593617163, 0.1836368685824452, 0.16933393991403423, 0.20121718622086204, 0.17957466027850877, 0.1778873827295061, 0.18726770144455718, 0.1923775467782015, 0.19910758200937384, 0.20468657716380267, 0.06427646437713208, 0.08972665584594852, 0.08187223198580884, 0.08708115121632054, 0.07143342644329465, 0.07376954879821129, 0.06907163614430079, 0.07130937100998147, 0.07757272484091793]}, "mutation_prompt": null}
