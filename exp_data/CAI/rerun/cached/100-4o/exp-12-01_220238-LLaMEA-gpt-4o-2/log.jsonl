{"id": "51e28597-2356-4f8f-bef2-5ecec1141230", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * self.dim  # Using a scale factor based on dimensionality\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()\n        population = rng.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                indices = rng.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n                cross_points = rng.random(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n                \n                if rng.random() < 0.2:  # Adaptive local search with 20% probability\n                    local_search = rng.uniform(-0.1, 0.1, self.dim)\n                    trial = np.clip(trial + local_search, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "The algorithm combines differential evolution with adaptive local search to balance exploration and exploitation efficiently.", "configspace": "", "generation": 0, "fitness": 0.2483359827549598, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5600831006385514, 0.604881417963323, 0.5642588909382968, 0.6131120380299668, 0.5730657063100146, 0.6431644699080904, 0.6035707949665532, 0.5768834452604934, 0.5865069238753571, 0.31148159146725696, 0.2942898480360817, 0.33353454461634524, 0.3097194095007407, 0.2811230877136771, 0.30905568346772994, 0.32220590442420705, 0.2775525553832152, 0.3364875839289482, 0.09969152320630315, 0.09667115341661725, 0.09809379789348027, 0.0918791506811385, 0.11124680045564905, 0.0980579979498134, 0.097249081111206, 0.09570340427135893, 0.10430095478991208, 0.0821623706729171, 0.0820309460236407, 0.07651570766123428, 0.10089380407370097, 0.091467290353759, 0.07595760690371822, 0.08428036740884437, 0.07899011713372783, 0.09714943181337998, 0.8830644188086727, 0.9565125845165425, 0.8726049602826337, 0.9021665821406335, 0.9526780486969165, 0.9320379165498123, 0.9270263907980378, 0.9370402891514764, 0.8933641534242182, 0.2678163038088702, 0.255467305306999, 0.23891082410758613, 0.25757683947192556, 0.2707605130923403, 0.2626996519439274, 0.28208328981218234, 0.2678430441443712, 0.2942335457236287, 0.42093632300328976, 0.5102791815360407, 0.5100155750977968, 0.5230944503237464, 0.49803761270197555, 0.5794719708150149, 0.5453074282142125, 0.4528506567361944, 0.4878297437458935, 0.14842624379282665, 0.19415230198844635, 0.18577235334133035, 0.19013635123602202, 0.1840718183596911, 0.19455849515524692, 0.1889980123084427, 0.1898147750962076, 0.1527839993473432, 0.13677347890156977, 0.2535097341495459, 0.14488160769359915, 0.1643709181562576, 0.1655997811770853, 0.20110338569299469, 0.17711094374693115, 0.16082924048565728, 0.19403343216862468, 0.0872351887829429, 0.09505391121746976, 0.08001215201420442, 0.07581912689709969, 0.0738658860128244, 0.07314636939142527, 0.10934214495331307, 0.08804386965958655, 0.1126425167884052, 0.20413090646866738, 0.2003461279766482, 0.19255699576533958, 0.20872871562445194, 0.21706015067853146, 0.20050417826382283, 0.22856690938868973, 0.23773899214025596, 0.2681846237040776, 0.016308798926666923, 0.001521953651762331, 0.03725752862298326, 0.013193347454417248, 0.02884236384584471, 0.03339952531360446, 0.025166780855744197, 0.03531149304255887, 0.01624256810784297, 0.13609137434463814, 0.12997089297311304, 0.13608056726097273, 0.1510977472048779, 0.14709451474877389, 0.1662737975482267, 0.1468803605081206, 0.13552842700457535, 0.14056587093339312, 0.4485243029940075, 0.4420266979182961, 0.4426263993011804, 0.4562478786723214, 0.45659946988803635, 0.44936968718639525, 0.46578100645021314, 0.47384194863771667, 0.45594487894345304, 0.0792898186515113, 0.07780450514484161, 0.08766276138493723, 0.09263995589809437, 0.10212245766773143, 0.09137267624769141, 0.08778037027617613, 0.08035458009707341, 0.07451492048529851, 0.12913976402833505, 0.20016424128715737, 0.21858111410049696, 0.15949454747027847, 0.13691554683079554, 0.1385530583091018, 0.13775338429558703, 0.11949049448787241, 0.15523795604533663, 0.269080967943613, 0.27034515230677447, 0.26798320313479196, 0.27242273047577614, 0.27236257630837046, 0.2518050958695216, 0.2803614772538079, 0.2725169853577605, 0.27257132560743835, 0.19033596294474242, 0.19968575909949116, 0.18809126228908157, 0.18404016924630295, 0.18444622201589345, 0.17772473798487043, 0.21223830013726597, 0.21444349073482172, 0.22012998371678383, 0.17298828034662217, 0.1749597240028553, 0.21037645714727138, 0.1886544528010814, 0.17018315710092724, 0.18436611651570511, 0.17127423682289322, 0.19470921249564577, 0.16961978282911572, 0.1873383416237282, 0.17321453349985172, 0.18190993641961228, 0.17432657792057793, 0.1939842788784215, 0.17347890751961692, 0.1782936450849345, 0.17612002782321157, 0.1797676958660568, 0.24850273112836108, 0.4543836460938053, 0.49127010451203446, 0.16462679567084926, 0.17789550075955962, 0.47123728290328293, 0.25859072959156426, 0.35667552400196023, 0.2030532144849908, 0.20068848349838941, 0.4661615241172231, 0.15949894939542553, 0.26137176396650874, 0.17422682881399232, 0.1758174298363605, 0.20283974434449314, 0.5537343243379231, 0.14397962380181217, 0.18407274891644698, 0.19651741491261698, 0.18060324740212563, 0.1996380087009636, 0.20277114245271755, 0.19073975874770688, 0.1801038659286125, 0.1748573111652333, 0.18900936761979992, 0.06819874914710677, 0.06424128318852362, 0.06953087431976057, 0.07303307545814319, 0.06482225842780243, 0.08253625190905989, 0.06975027647605547, 0.07440764094208685, 0.07343795119496022]}, "mutation_prompt": null}
{"id": "eff3010f-5b16-4e8f-ae69-6478dc13f0fe", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * self.dim  # Using a scale factor based on dimensionality\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()\n        population = rng.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                if evals >= self.budget:\n                    break\n                indices = rng.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = population[indices]\n                mutant = np.clip(x0 + self.F * (x1 - x2), self.lower_bound, self.upper_bound)\n                cross_points = rng.random(self.dim) < self.CR\n                trial = np.where(cross_points, mutant, population[i])\n                \n                if rng.random() < 0.2:  # Adaptive local search with 20% probability\n                    local_search = rng.uniform(-0.1, 0.1, self.dim)\n                    trial = np.clip(trial + local_search, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "The algorithm combines differential evolution with adaptive local search to balance exploration and exploitation efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51e28597-2356-4f8f-bef2-5ecec1141230", "metadata": {"aucs": [0.5600831006385514, 0.604881417963323, 0.5642588909382968, 0.6131120380299668, 0.5730657063100146, 0.6431644699080904, 0.6035707949665532, 0.5768834452604934, 0.5865069238753571, 0.31148159146725696, 0.2942898480360817, 0.33353454461634524, 0.3097194095007407, 0.2811230877136771, 0.30905568346772994, 0.32220590442420705, 0.2775525553832152, 0.3364875839289482, 0.09969152320630315, 0.09667115341661725, 0.09809379789348027, 0.0918791506811385, 0.11124680045564905, 0.0980579979498134, 0.097249081111206, 0.09570340427135893, 0.10430095478991208, 0.0821623706729171, 0.0820309460236407, 0.07651570766123428, 0.10089380407370097, 0.091467290353759, 0.07595760690371822, 0.08428036740884437, 0.07899011713372783, 0.09714943181337998, 0.8830644188086727, 0.9565125845165425, 0.8726049602826337, 0.9021665821406335, 0.9526780486969165, 0.9320379165498123, 0.9270263907980378, 0.9370402891514764, 0.8933641534242182, 0.2678163038088702, 0.255467305306999, 0.23891082410758613, 0.25757683947192556, 0.2707605130923403, 0.2626996519439274, 0.28208328981218234, 0.2678430441443712, 0.2942335457236287, 0.42093632300328976, 0.5102791815360407, 0.5100155750977968, 0.5230944503237464, 0.49803761270197555, 0.5794719708150149, 0.5453074282142125, 0.4528506567361944, 0.4878297437458935, 0.14842624379282665, 0.19415230198844635, 0.18577235334133035, 0.19013635123602202, 0.1840718183596911, 0.19455849515524692, 0.1889980123084427, 0.1898147750962076, 0.1527839993473432, 0.13677347890156977, 0.2535097341495459, 0.14488160769359915, 0.1643709181562576, 0.1655997811770853, 0.20110338569299469, 0.17711094374693115, 0.16082924048565728, 0.19403343216862468, 0.0872351887829429, 0.09505391121746976, 0.08001215201420442, 0.07581912689709969, 0.0738658860128244, 0.07314636939142527, 0.10934214495331307, 0.08804386965958655, 0.1126425167884052, 0.20413090646866738, 0.2003461279766482, 0.19255699576533958, 0.20872871562445194, 0.21706015067853146, 0.20050417826382283, 0.22856690938868973, 0.23773899214025596, 0.2681846237040776, 0.016308798926666923, 0.001521953651762331, 0.03725752862298326, 0.013193347454417248, 0.02884236384584471, 0.03339952531360446, 0.025166780855744197, 0.03531149304255887, 0.01624256810784297, 0.13609137434463814, 0.12997089297311304, 0.13608056726097273, 0.1510977472048779, 0.14709451474877389, 0.1662737975482267, 0.1468803605081206, 0.13552842700457535, 0.14056587093339312, 0.4485243029940075, 0.4420266979182961, 0.4426263993011804, 0.4562478786723214, 0.45659946988803635, 0.44936968718639525, 0.46578100645021314, 0.47384194863771667, 0.45594487894345304, 0.0792898186515113, 0.07780450514484161, 0.08766276138493723, 0.09263995589809437, 0.10212245766773143, 0.09137267624769141, 0.08778037027617613, 0.08035458009707341, 0.07451492048529851, 0.12913976402833505, 0.20016424128715737, 0.21858111410049696, 0.15949454747027847, 0.13691554683079554, 0.1385530583091018, 0.13775338429558703, 0.11949049448787241, 0.15523795604533663, 0.269080967943613, 0.27034515230677447, 0.26798320313479196, 0.27242273047577614, 0.27236257630837046, 0.2518050958695216, 0.2803614772538079, 0.2725169853577605, 0.27257132560743835, 0.19033596294474242, 0.19968575909949116, 0.18809126228908157, 0.18404016924630295, 0.18444622201589345, 0.17772473798487043, 0.21223830013726597, 0.21444349073482172, 0.22012998371678383, 0.17298828034662217, 0.1749597240028553, 0.21037645714727138, 0.1886544528010814, 0.17018315710092724, 0.18436611651570511, 0.17127423682289322, 0.19470921249564577, 0.16961978282911572, 0.1873383416237282, 0.17321453349985172, 0.18190993641961228, 0.17432657792057793, 0.1939842788784215, 0.17347890751961692, 0.1782936450849345, 0.17612002782321157, 0.1797676958660568, 0.24850273112836108, 0.4543836460938053, 0.49127010451203446, 0.16462679567084926, 0.17789550075955962, 0.47123728290328293, 0.25859072959156426, 0.35667552400196023, 0.2030532144849908, 0.20068848349838941, 0.4661615241172231, 0.15949894939542553, 0.26137176396650874, 0.17422682881399232, 0.1758174298363605, 0.20283974434449314, 0.5537343243379231, 0.14397962380181217, 0.18407274891644698, 0.19651741491261698, 0.18060324740212563, 0.1996380087009636, 0.20277114245271755, 0.19073975874770688, 0.1801038659286125, 0.1748573111652333, 0.18900936761979992, 0.06819874914710677, 0.06424128318852362, 0.06953087431976057, 0.07303307545814319, 0.06482225842780243, 0.08253625190905989, 0.06975027647605547, 0.07440764094208685, 0.07343795119496022]}, "mutation_prompt": null}
