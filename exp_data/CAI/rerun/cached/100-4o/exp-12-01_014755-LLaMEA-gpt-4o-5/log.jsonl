{"id": "d7401f21-c8d7-4554-b5f8-21495a177560", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "fbcc9196-9beb-409c-9850-e700deb6f2f0", "solution": "import numpy as np\n\nclass HybridDE_LocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def __call__(self, func):\n        eval_count = 0\n        while eval_count < self.budget:\n            # Evaluate current population\n            for i in range(self.population_size):\n                if self.fitness[i] == np.inf:  # Only evaluate unevaluated individuals\n                    self.fitness[i] = func(self.population[i])\n                    eval_count += 1\n                    if eval_count >= self.budget:\n                        return self.get_best_solution()\n\n            # Differential Evolution Mutation and Crossover\n            for i in range(self.population_size):\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.mutation_factor * (self.population[b] - self.population[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.crossover_rate\n                trial[crossover_points] = mutant[crossover_points]\n                trial_fitness = func(trial)\n                eval_count += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                if eval_count >= self.budget:\n                    return self.get_best_solution()\n\n            # Local Search on Best Individual\n            best_idx = np.argmin(self.fitness)\n            best_individual = self.population[best_idx]\n            local_best = self.local_search(func, best_individual)\n            local_best_fitness = func(local_best)\n            eval_count += 1\n            if local_best_fitness < self.fitness[best_idx]:\n                self.population[best_idx] = local_best\n                self.fitness[best_idx] = local_best_fitness\n\n        return self.get_best_solution()\n\n    def local_search(self, func, individual):\n        step_size = 0.1\n        for _ in range(10):\n            neighbor = individual + np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(neighbor, self.lower_bound, self.upper_bound)\n            if func(neighbor) < func(individual):\n                individual = neighbor\n        return individual\n\n    def get_best_solution(self):\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "HybridDE_LocalSearch", "description": "A hybrid optimization algorithm that combines Differential Evolution and Local Search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": 0.25016099497881783, "feedback": "", "error": "", "parent_id": "d7401f21-c8d7-4554-b5f8-21495a177560", "metadata": {"aucs": [0.5679899392597063, 0.5170791698755111, 0.5558596978866421, 0.582299765840279, 0.5545765058203708, 0.551958794565353, 0.5789799606079368, 0.5467771211311929, 0.5655366871319476, 0.24901232817773333, 0.2620955517508624, 0.2717344484531047, 0.23367777422319236, 0.23434493159182546, 0.2340427547497944, 0.24074999812922737, 0.26162501790931947, 0.23276819945803562, 0.11646457046867131, 0.13991855409996878, 0.12376105711461127, 0.0984376919707114, 0.13736889225260207, 0.09987969558963927, 0.1112503490475103, 0.11521097726751539, 0.12320389997334091, 0.09337936792024537, 0.10901712637959549, 0.08322171226775865, 0.09609730843213948, 0.10975689397844157, 0.10837664748827391, 0.08713882685531116, 0.09159163850013086, 0.09321034941273487, 0.9603921276159101, 0.9508805315395695, 0.8964236604374627, 0.8888132104543092, 0.966757190789224, 0.9516762290676849, 0.927357965167126, 0.8693519618754344, 0.9682313869409414, 0.2824356667406145, 0.29112408272929624, 0.2888047720166097, 0.30452097518743226, 0.2830814147684432, 0.2906392574806439, 0.3116569596793741, 0.29847261788028234, 0.32757676689190707, 0.6611174519920932, 0.4449761420814896, 0.3976918090236573, 0.3062879292440902, 0.42735480090461975, 0.3633630717509466, 0.4522335629353522, 0.3918841095975004, 0.4046705013798041, 0.21737490794037262, 0.14627604096287306, 0.1526064503082054, 0.1556040530625019, 0.22026393010689294, 0.17188323368104996, 0.16827607483007234, 0.16333675173646622, 0.1718732415412635, 0.161713541678022, 0.13459065374837942, 0.12590283250874623, 0.16208178186705335, 0.20355355332180136, 0.19392705486042627, 0.17166052148727262, 0.15002394078495707, 0.1526192560159736, 0.053292680767229816, 0.08804014710055108, 0.10605046807944962, 0.09615458363228258, 0.07853086087298233, 0.06632587684602764, 0.07609929212138233, 0.06470828517403537, 0.0634050982879657, 0.1903465778647957, 0.2017880613349905, 0.23357162231831985, 0.21591956582840388, 0.1747967617534847, 0.17313960588817612, 0.20788981961190545, 0.21921939694948567, 0.20659641864648193, 0.011096962608955652, 0.00856002018446711, 0.00190241192833418, 0.014453863223886532, 0.0010639280709024979, 0.010272683009001637, 0.01737919933554366, 0.004896769961023506, 0.019031393719432743, 0.12779026344751143, 0.12350346275053048, 0.12765935841167197, 0.15509414790750875, 0.12246560302593912, 0.13371481753254333, 0.13857455409163544, 0.11752676367456372, 0.14840523206636358, 0.4771725118596116, 0.46261419981725627, 0.4634819222731036, 0.43594500874770825, 0.48344943851869826, 0.46709928779472154, 0.46238840122992697, 0.47041043647867886, 0.45625881708927274, 0.13671332236663747, 0.10023581991515751, 0.0903931578371765, 0.12296892844567353, 0.09030513076777102, 0.13000601941725254, 0.11507576030520816, 0.08758288443763262, 0.07536673236660119, 0.15815044635194375, 0.18566032666371213, 0.1987223389839562, 0.16469389663314649, 0.2370801578423387, 0.30504581808270625, 0.23101892464828366, 0.20212302563316653, 0.18535056166372943, 0.2464861309578975, 0.26686195180979744, 0.24373802431267722, 0.23946087637847224, 0.24289157049182164, 0.2799992687998948, 0.2637564595377443, 0.2799124190525403, 0.2872032895989951, 0.21056739938596747, 0.18960956670214701, 0.21346555271847445, 0.20407407655432064, 0.18206389939447032, 0.195398688054097, 0.21486098787820063, 0.20640983639018284, 0.21232112791476443, 0.19367159258234345, 0.19775733543352858, 0.1899766970041561, 0.18888510019406946, 0.18055103571553754, 0.17552763941896132, 0.1866124904410148, 0.20637877007836847, 0.18681714865712806, 0.1929870249688641, 0.19202682262374104, 0.1973559343413812, 0.18583558182772864, 0.18963662617663024, 0.22022550791303797, 0.18841659909308495, 0.21002265770676454, 0.17858400107981742, 0.7231632055497698, 0.15069193074880494, 0.15271635110156256, 0.16714660718753005, 0.2000877117301193, 0.5196298258954408, 0.23534171024885342, 0.4114754163373736, 0.7270827546110473, 0.46150083976420575, 0.21011471930000258, 0.5574738130006038, 0.2076314977295659, 0.26653534278433244, 0.1814903291226787, 0.20414257372000688, 0.4797229312276303, 0.21298921465145448, 0.19219277898327614, 0.23229428688288478, 0.17901570644937492, 0.19955152297446266, 0.17525592530744727, 0.18946399113224388, 0.19106014670572524, 0.18916850448202904, 0.201277892684965, 0.07677971255997329, 0.07504184676042946, 0.07796171273871055, 0.06511658189675185, 0.06706683078118891, 0.06989485231374715, 0.07925836484183546, 0.08048619396869394, 0.08028358166707661]}, "mutation_prompt": null}
