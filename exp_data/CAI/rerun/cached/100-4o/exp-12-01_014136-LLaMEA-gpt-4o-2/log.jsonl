{"id": "8627a8b1-b37d-4908-9490-12b482b51655", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.CR = 0.9  # Crossover probability\n        self.F = 0.8   # Differential weight\n        self.evaluations = 0\n\n    def opposition_based_learning(self):\n        opposite_population = self.bounds[0] + self.bounds[1] - self.population\n        return opposite_population\n\n    def evaluate(self, func):\n        for i in range(self.population_size):\n            if self.evaluations < self.budget:\n                if self.fitness[i] == np.inf:\n                    self.fitness[i] = func(self.population[i])\n                    self.evaluations += 1\n                if self.fitness[i] < self.best_fitness:\n                    self.best_fitness = self.fitness[i]\n                    self.best_solution = self.population[i].copy()\n\n    def differential_evolution(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                a, b, c = self.population[np.random.choice(self.population_size, 3, replace=False)]\n                mutant_vector = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                \n                trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.population[i])\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial_vector.copy()\n\n    def __call__(self, func):\n        self.evaluate(func)\n        opposite_population = self.opposition_based_learning()\n        for i in range(self.population_size):\n            if self.evaluations < self.budget:\n                opposite_fitness = func(opposite_population[i])\n                self.evaluations += 1\n                if opposite_fitness < self.fitness[i]:\n                    self.population[i] = opposite_population[i]\n                    self.fitness[i] = opposite_fitness\n                    if opposite_fitness < self.best_fitness:\n                        self.best_fitness = opposite_fitness\n                        self.best_solution = opposite_population[i].copy()\n        \n        self.differential_evolution(func)\n        return self.best_solution, self.best_fitness", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Adaptive Differential Evolution with Opposition-Based Learning for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.26677538961531877, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.6504569105636014, 0.618842017691543, 0.6426460337574322, 0.6310764186751108, 0.6306254694491236, 0.6344470116448435, 0.6412765467145307, 0.6386728736368615, 0.6146927785785756, 0.39209690332327707, 0.3759849211215568, 0.36852062765509996, 0.41030216689406207, 0.35932333407705463, 0.37965695725558024, 0.36918563593040243, 0.36878982814770533, 0.39998971933308647, 0.09925202463782845, 0.09783691952713236, 0.11720578669955195, 0.10846701435096806, 0.0927445338349282, 0.0980149605238454, 0.10063842321262328, 0.09883801107961954, 0.09290511647343647, 0.08301721292166897, 0.09598375399002257, 0.09136064956516876, 0.0897536510860869, 0.08531134766632242, 0.0873726106517001, 0.08336324517975813, 0.08114981906336083, 0.09400911435253134, 0.9262655649795315, 0.9420974868309149, 0.9293300288346353, 0.8773866533626173, 0.9419727471783683, 0.9358906287189149, 0.9067192324709427, 0.9431270451814603, 0.9613492362955136, 0.2861052407538973, 0.2710478640071392, 0.2793383087272031, 0.2647664624815912, 0.27981703854296525, 0.262154368915119, 0.29312048423171366, 0.30077410770751745, 0.2813490616269658, 0.4436398334141891, 0.4712718900946179, 0.3973827096614486, 0.5489901093170022, 0.5326292823515644, 0.5153649046615854, 0.47780263001190837, 0.5432462410985827, 0.5674315088014008, 0.1816249505651767, 0.16984107697062212, 0.1985102062975187, 0.2145001645365674, 0.16561887386577834, 0.23384315139119394, 0.22538626120744898, 0.2125853005300683, 0.19733299043763686, 0.011151043619303525, 0.22920781059215622, 0.23050647182508077, 0.20066111907338402, 0.16861097843509465, 0.14753464827732254, 0.20593213105837105, 0.17248635389778078, 0.17544148653509894, 0.14008393784202877, 0.10325079275605364, 0.14439343016256567, 0.12959586496953757, 0.10716382954201964, 0.10871607490855462, 0.12606544591723634, 0.10678773934653585, 0.13562928780810257, 0.25619482103679425, 0.2565326630495589, 0.2767365999406819, 0.2490811319881021, 0.23148183321627724, 0.2641711386003801, 0.2933669472447572, 0.26332256354804595, 0.28859469264312265, 0.04117291698982006, 0.024139733840110256, 0.039457443754130184, 0.029715179687113458, 0.062418327483561575, 0.06392749303581824, 0.045160817012587895, 0.042011747668113775, 0.05358841282935822, 0.1662425679593572, 0.1513926844344471, 0.14113142007510016, 0.1616981485368939, 0.16586435996539384, 0.15360203172528109, 0.1490531239750984, 0.1548694950115338, 0.16176566326373198, 0.47042830961926907, 0.49067953196192904, 0.4754455421417967, 0.46077813252706634, 0.48687601556255977, 0.5073551283968305, 0.48199032894813265, 0.47797143912164586, 0.5051827291757819, 0.12177825994856772, 0.08730034792496977, 0.08890310834055748, 0.07823923717953363, 0.0997442501228919, 0.07705175281720344, 0.08064137129661608, 0.08469041151891399, 0.10266928148352128, 0.14346975705713427, 0.1908821453402515, 0.16324384621254906, 0.13863531190356992, 0.1621617968735929, 0.12704058899648185, 0.14843593155116253, 0.16092965616585864, 0.14831759197955874, 0.2738067908066846, 0.2581465914524418, 0.2823748535315944, 0.28408933409978, 0.25097731932296874, 0.2676799125155843, 0.2666327248549494, 0.27204201498743363, 0.2968034806663269, 0.21178200508990308, 0.19907603425331666, 0.19666878614662708, 0.21559806869549303, 0.20293689222801925, 0.17862223212462214, 0.20920032756511586, 0.20536627800415708, 0.20845554855676818, 0.17288320813470404, 0.18143358297507262, 0.17923676729450178, 0.1890137738251807, 0.1825784855570769, 0.19953744363666182, 0.18822923781443812, 0.1689289957736113, 0.1967451602787451, 0.18309507516283297, 0.17565520166165138, 0.1711671974804534, 0.18026938604160492, 0.17601021863033328, 0.16964418360658873, 0.18783408944253288, 0.1831253427714603, 0.18242619797977933, 0.6402925199102281, 0.1604893620915585, 0.6257068860828092, 0.1699357984208636, 0.17673599549360675, 0.3734279666753043, 0.5804136388086709, 0.3479533825757454, 0.3888380925491516, 0.4066338250113475, 0.2001223374322607, 0.19143870285071207, 0.18416578077741064, 0.19887189716165887, 0.3510280796476841, 0.5508758394253634, 0.6143050004892461, 0.20598149035226943, 0.1791423085795001, 0.17435174868834513, 0.18521082862970795, 0.20300852332772545, 0.18312560384291854, 0.19483861350520704, 0.17746680624126743, 0.1857763198210487, 0.18146626721292003, 0.06890440228860883, 0.07666222519835975, 0.07117248366929052, 0.07317035954058759, 0.06904079000129681, 0.07705400039706634, 0.0711469089711676, 0.07320611030622526, 0.06927231338604578]}, "mutation_prompt": null}
{"id": "67ca2cc2-aae8-4704-9db1-3acbcc568859", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.best_solution = None\n        self.best_fitness = np.inf\n        self.CR = 0.9  # Crossover probability\n        self.F = 0.8   # Differential weight\n        self.evaluations = 0\n\n    def opposition_based_learning(self):\n        opposite_population = self.bounds[0] + self.bounds[1] - self.population\n        return opposite_population\n\n    def evaluate(self, func):\n        for i in range(self.population_size):\n            if self.evaluations < self.budget:\n                if self.fitness[i] == np.inf:\n                    self.fitness[i] = func(self.population[i])\n                    self.evaluations += 1\n                if self.fitness[i] < self.best_fitness:\n                    self.best_fitness = self.fitness[i]\n                    self.best_solution = self.population[i].copy()\n\n    def differential_evolution(self, func):\n        while self.evaluations < self.budget:\n            fitness_std = np.std(self.fitness)  # Calculate fitness diversity\n            self.CR = 0.5 + 0.4 * (fitness_std / (np.max(self.fitness) - np.min(self.fitness) + 1e-10))  # Adjust CR\n            for i in range(self.population_size):\n                a, b, c = self.population[np.random.choice(self.population_size, 3, replace=False)]\n                mutant_vector = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n                \n                trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.population[i])\n                trial_fitness = func(trial_vector)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial_vector\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial_vector.copy()\n\n    def __call__(self, func):\n        self.evaluate(func)\n        opposite_population = self.opposition_based_learning()\n        for i in range(self.population_size):\n            if self.evaluations < self.budget:\n                opposite_fitness = func(opposite_population[i])\n                self.evaluations += 1\n                if opposite_fitness < self.fitness[i]:\n                    self.population[i] = opposite_population[i]\n                    self.fitness[i] = opposite_fitness\n                    if opposite_fitness < self.best_fitness:\n                        self.best_fitness = opposite_fitness\n                        self.best_solution = opposite_population[i].copy()\n        \n        self.differential_evolution(func)\n        return self.best_solution, self.best_fitness", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Incorporating a dynamic adjustment of the crossover probability (CR) based on fitness diversity to improve exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.22201986284610367, "feedback": "", "error": "", "parent_id": "8627a8b1-b37d-4908-9490-12b482b51655", "metadata": {"aucs": [0.6600097556146027, 0.6519709025337702, 0.645625647580903, 0.6682400178654292, 0.6959167138431859, 0.6654910598517572, 0.6931793933917942, 0.6825655123693405, 0.6686892559603346, 0.40544431291969474, 0.43467031042186766, 0.4386474332543586, 0.39349431125449663, 0.4412834439740516, 0.41862381933684456, 0.4284458638543178, 0.42751570798800553, 0.44537981084936107, 0.1596528077235302, 0.11899300312614891, 0.13600903077739823, 0.165552261584322, 0.12950503572861838, 0.15668193424475763, 0.1279968132735415, 0.15028111433196356, 0.13848124973886644, 0.13186594616499347, 0.13063100533351557, 0.13981106687966183, 0.13577413529382032, 0.13057079778630054, 0.12021006936072665, 0.123408104827326, 0.11274962353317719, 0.124801019877113, 0.9592668004320664, 0.9522030242008128, 0.9512674719757316, 0.9680258354801974, 0.9490936750189416, 0.9705065925506361, 0.9541980353073924, 0.9670818711794159, 0.943109829887506, 0.22049183417323182, 0.2224051450393134, 0.25284296677912166, 0.24108544367566187, 0.23861132756033498, 0.21204333545621523, 0.22510068249724335, 0.22583436171326077, 0.2438876721357538, 0.24389467211982896, 0.21005189821698045, 0.1959296285397556, 0.23659008270879545, 0.2012814578388018, 0.2417954830357879, 0.24942546414036637, 0.2645218255789408, 0.23341044914081954, 0.14158034855143142, 0.12662378850651546, 0.12241592570904902, 0.13435837890101232, 0.10813944270675524, 0.1141818337849696, 0.14514779512110976, 0.15193223842499448, 0.12915288356939858, 0.11811186736773693, 0.08841830564045217, 0.11618728610026008, 0.10768345992129147, 0.12308909182341432, 0.13098459627252346, 0.12973760284434088, 0.1069363643520761, 0.10234102496191755, 9.999999999998899e-05, 0.003717885525211795, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005889851436510218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0834860433840382, 0.06578248154630817, 0.0667135160857868, 0.07096743040669429, 0.06530552553285507, 0.04206584159670945, 0.07845657192254385, 0.06407440766633576, 0.05531753988621568, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08050014473742562, 0.07426377340310808, 0.07859864407597195, 0.08498308927990406, 0.09287291080056925, 0.09244448853599119, 0.0822486827746941, 0.07513661404802718, 0.08083566832802624, 0.4256126192156475, 0.4322107342302469, 0.40563291843623606, 0.4439100000452071, 0.44084120493405277, 0.43110591941673615, 0.4385533430196199, 0.44900842040744626, 0.4323319761698965, 0.08868608485905627, 0.084202186382203, 0.11021345137147343, 0.11288716364946305, 0.08030487056892721, 0.08002103580726327, 0.09642516330606155, 0.06767293629070514, 0.0856644016897894, 0.14709319714308933, 0.15206872223943757, 0.138727645932341, 0.13711914841796258, 0.13987510680221926, 0.14280988630859315, 0.14974031619560357, 0.1811152456248899, 0.13934622036282907, 0.2477913963271513, 0.2472340557368169, 0.24067253051091253, 0.2281272073272098, 0.21104240057110568, 0.25411474638606846, 0.2705194574361117, 0.27600691684316947, 0.2737409142642464, 0.17156114376473086, 0.18150711451170265, 0.17455477139955222, 0.16238629894431744, 0.16050462860904102, 0.16266235828932518, 0.1966350603753685, 0.17933063602262023, 0.19192329219261284, 0.18755204370080225, 0.18471002364995492, 0.17968094539762802, 0.1858582743054772, 0.17529143934035507, 0.216983396608466, 0.17786328349543545, 0.19916162397372728, 0.17482675652777235, 0.19187493286409363, 0.20695849190825188, 0.1950053498194938, 0.18410852292328117, 0.18877207310678912, 0.1865887982692428, 0.18809951689307314, 0.19226900330179109, 0.18272468664389474, 0.17123052527344285, 0.16623020700841862, 0.1629222747878244, 0.2428088281698937, 0.16334011078851363, 0.20762990646074364, 0.17198855335861485, 0.1738274256721144, 0.19956765193716453, 0.2515095605616955, 0.15252159865706272, 0.29469711140328536, 0.16525444803785105, 0.15948447931120302, 0.20132113308341892, 0.26455731411146133, 0.21710132068614607, 0.3494554367719521, 0.18948954056427658, 0.173909893481074, 0.18794413183484926, 0.186674382733662, 0.18842460690409613, 0.20321032136524275, 0.1842498820879236, 0.17295047438107536, 0.19273842029908772, 0.08068118681637604, 0.07868355805379501, 0.06659978508028985, 0.08240096177643152, 0.07349169531050304, 0.08103640225064357, 0.07466842673107454, 0.07441428650894832, 0.07834288335752804]}, "mutation_prompt": null}
