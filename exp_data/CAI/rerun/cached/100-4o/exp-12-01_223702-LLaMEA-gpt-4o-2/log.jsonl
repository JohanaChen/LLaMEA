{"id": "1011e944-8af3-4981-8b47-e1fa911dffbc", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.f = 0.5  # Scaling factor for DE\n        self.cr = 0.9  # Crossover probability for DE\n        self.inertia_weight = 0.7  # Inertia weight for PSO\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.population_size, self.dim)\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution mutation and crossover\n                candidates = list(range(i)) + list(range(i + 1, self.population_size))\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = np.clip(population[a] + self.f * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Evaluate trial vector\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                # Selection\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                    # Update global best\n                    if trial_score < personal_best_scores[global_best_index]:\n                        global_best_index = i\n                        global_best_position = trial_vector\n\n                # Particle Swarm Optimization update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_component = self.inertia_weight * velocities[i]\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - population[i])\n                social_component = self.social_constant * r2 * (global_best_position - population[i])\n                velocities[i] = inertia_component + cognitive_component + social_component\n                population[i] = np.clip(population[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position", "name": "DEPSO", "description": "A hybridized Differential Evolution and Particle Swarm Optimization that adapts exploration and exploitation based on population diversity.", "configspace": "", "generation": 0, "fitness": 0.27593713180549695, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7849894820353893, 0.7571580791677269, 0.8019507696284957, 0.18329594112002667, 0.1823504966310484, 0.8025969135652832, 0.7522936483972793, 0.7619848300373978, 0.8020511355798414, 0.4756160500525284, 0.5347889999586632, 0.6116598204365964, 0.5705986738308971, 0.45484116265140784, 0.5731845210926418, 0.48851420848744553, 0.6056443075422948, 0.5689931557474825, 0.1453914382331617, 0.13934534256917264, 0.14755601439345667, 0.14085196552644463, 0.1468855082212125, 0.13059300150212094, 0.1107167381474854, 0.14341102241191583, 0.1503896484645274, 0.11817034331929388, 0.1014312464082121, 0.13661261930470814, 0.09976564781301767, 0.12028736928806028, 0.1200442187798102, 0.10066876835956573, 0.1258840101600296, 0.12828625352960987, 0.9933133018119034, 0.9901625718201819, 0.9912392041586228, 0.9885269885617503, 0.9948024422042759, 0.9917255466784858, 0.9937975210504161, 0.9935096938598825, 0.9934382396492705, 0.5420103633630649, 0.5516162708126044, 0.5887416030349593, 0.3650568697113473, 0.5103558673267571, 0.5431981246066837, 0.5357616833630472, 0.08875287348624838, 0.08851385291289426, 0.22495471098019992, 0.34502180231619883, 0.35788648989706584, 0.7325664319860928, 0.19138699312247043, 0.1163350915112189, 0.21359111833414302, 0.3471155726873466, 0.805339057607647, 0.20722188806692077, 0.19902373945177654, 0.18629619043237966, 0.12478302621960413, 0.20596006133745848, 0.12633024234082169, 0.18696027198040632, 0.18011519842392076, 0.17825420323956764, 0.20125818104108595, 0.009976330326521232, 0.21700605796602768, 0.2090340624402094, 0.21940791162827522, 0.2273420129207202, 0.229629501534236, 0.21995906383198482, 0.2501626462395654, 9.999999999998899e-05, 0.033472224236775205, 0.026923410172649875, 0.019727401444253556, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010337055795384131, 0.0072470447480745825, 9.999999999998899e-05, 0.08684397068375205, 0.054772633207913146, 0.10275861965081479, 0.07192142478369878, 0.042983498015424226, 0.024628353674540082, 0.05534282237156496, 0.07708612850073115, 0.09304409952196968, 0.03103404190266157, 0.03327399371969675, 0.22585667813314847, 0.07117834460872163, 0.06620623559412597, 0.08506544675677119, 0.08444623172529553, 0.064242253818939, 0.07316205238595686, 0.06539591204789252, 0.05838974800474972, 0.11245717735362537, 0.0059180349017651235, 0.18164603903418142, 0.006265069972227644, 0.11906015914817325, 9.999999999998899e-05, 0.11672112050661543, 0.49115527850887786, 0.5174735715035288, 0.516752577939577, 0.5213655628330691, 0.49929974778056263, 0.5341073188437503, 0.5164471830238604, 0.5247769539713647, 0.5251216168496095, 0.10894295903037676, 0.10747990360381787, 0.08237520899325323, 0.09394550312625527, 0.13119482864335985, 0.13463551376718896, 0.11775262183293511, 0.1149363778886332, 0.10808295013646108, 0.1994610548446556, 0.27498078672982673, 0.2839626945684155, 0.2505851790225765, 0.49764889111841504, 0.19340119660865662, 0.4096472429735428, 0.20489517302858484, 0.1543237413656463, 0.2929440602541471, 0.41335488439819, 0.4427778349271484, 0.3242904818038491, 0.37232639586336114, 0.38487781907966945, 0.447864490418421, 0.46926110835642953, 0.441457138731138, 0.23718588098480775, 0.2591855247997551, 0.14779165008823003, 0.25804652373983494, 0.30331655874472996, 0.27529038848860865, 0.1366703497962688, 0.29023315225527124, 0.2968689335185697, 0.20203319709161793, 0.20349360851423248, 0.2214929300298264, 0.19696435855437733, 0.18609429200434136, 0.18284703221199827, 0.21367504354524514, 0.19865559798631915, 0.21823659257563266, 0.4955457821565378, 0.21216102310578167, 0.23549092043677977, 0.21105544563891576, 0.23634917308172132, 0.5997659612311603, 0.22523358015775552, 0.1932072534930681, 0.24184640692790504, 0.17381652203586495, 0.1960124732731664, 0.1545166301948384, 0.17779023399290383, 0.19923681248725866, 0.16706644104007595, 0.09980306381252124, 0.15752710914753187, 0.1642435920784031, 0.15403356231818832, 0.20878853992029822, 0.1677581975568322, 0.20743933331311637, 0.16768978920646171, 0.6219562989296639, 0.20978091981551705, 0.18619968929751307, 0.7335855147865986, 0.17319309674493855, 0.18298118867212276, 0.18133744708361588, 0.1921374335718642, 0.18175748428268312, 0.21295004686144214, 0.20264769975549268, 0.18579603717422655, 0.1877741087740239, 0.08038095824851477, 0.08139308630546005, 0.08999514255847774, 0.07935527583067326, 0.07794198295080079, 0.0827279662138275, 0.11843976649764576, 0.09320908499313119, 0.0945971568780285]}, "mutation_prompt": null}
{"id": "d57caacd-0a03-4385-98da-9f102e5e6f9a", "solution": "import numpy as np\n\nclass DEPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.f = 0.5  # Scaling factor for DE\n        self.cr = 0.9  # Crossover probability for DE\n        self.inertia_weight = 0.9  # Updated initial inertia weight for PSO\n        self.cognitive_constant = 1.5\n        self.social_constant = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        # Initialize population\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.rand(self.population_size, self.dim)\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution mutation and crossover\n                candidates = list(range(i)) + list(range(i + 1, self.population_size))\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant_vector = np.clip(population[a] + self.f * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.cr\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n\n                # Evaluate trial vector\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                # Selection\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                    # Update global best\n                    if trial_score < personal_best_scores[global_best_index]:\n                        global_best_index = i\n                        global_best_position = trial_vector\n\n                # Particle Swarm Optimization update\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_component = self.inertia_weight * velocities[i]\n                cognitive_component = self.cognitive_constant * r1 * (personal_best_positions[i] - population[i])\n                social_component = self.social_constant * r2 * (global_best_position - population[i])\n                velocities[i] = inertia_component + cognitive_component + social_component\n                population[i] = np.clip(population[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                self.inertia_weight *= 0.99  # Dynamically adjust inertia weight\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position", "name": "DEPSO", "description": "Enhanced DEPSO with dynamic inertia weight adaptation for improved balance between exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.31711105669492395, "feedback": "", "error": "", "parent_id": "1011e944-8af3-4981-8b47-e1fa911dffbc", "metadata": {"aucs": [0.93203285924565, 0.9256349905926073, 0.9317830583614369, 0.9101488148119432, 0.9249041904935046, 0.19105635468592064, 0.9265458578613139, 0.9371996079250532, 0.9417652263520564, 0.8814646142269789, 0.8734988892835912, 0.8697934552697424, 0.8744525666641746, 0.8445569547833949, 0.8772447222839935, 0.8666832243202924, 0.8737195354315459, 0.8796067632586524, 0.18551830396281543, 0.11688013367000494, 0.13481970795184772, 0.16243402277765906, 0.07475009269691602, 0.06812457917506476, 0.11251734577241423, 0.14586369622218376, 0.16153134995201313, 0.12549239558356384, 0.12958253093078842, 0.09810931860768246, 0.11772329661533243, 0.13431150258290692, 0.08226482154953241, 0.13401584246259102, 0.12392677891221449, 0.11646530683600287, 0.9933049191499735, 0.990583840786163, 0.9913651684833124, 0.988460266024127, 0.9943344997180784, 0.991807005353604, 0.9938088370886781, 0.9938976289257225, 0.9934421670425353, 0.8504023522235609, 0.8268255946569388, 0.8361634490442413, 0.8499055457517802, 0.8447880198025235, 0.8092553526715383, 0.8126251401213049, 0.8150526486863675, 0.08888749533262585, 0.23050266471972347, 0.17026150952982677, 0.21456547552797856, 0.28126235883703077, 0.20636639217175312, 0.11708159570942023, 0.06843619996317796, 0.12445969468299467, 0.17787015003888518, 0.26811659124413323, 0.22428260331542993, 0.23251157435746717, 0.21644256164741904, 0.23963690968914175, 0.22175152947665833, 0.23943703920524484, 0.22109875960309378, 0.2213669564568307, 0.24284699949371857, 0.21602074427997564, 0.2609767538416543, 0.13291288795403744, 0.26005384630668016, 0.23687306208046255, 0.2671663764657647, 0.33661813172668076, 0.2666518733206895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04983465472303383, 0.050405817952964616, 0.015562982250231672, 0.0009481363559005196, 0.03205198207293891, 0.03131302783139911, 0.04704836849323368, 0.044072014087991884, 0.054077253725173025, 0.092385033941779, 0.0217114171387619, 0.046066646325560234, 0.016615260970296752, 0.05765703941996958, 0.05966844651507541, 0.053277769433329514, 0.038787102998768974, 0.17507863706003224, 0.24565732325592649, 0.1829690121538181, 0.23262948833412855, 0.10631692364671541, 0.1334588880712465, 0.08062306379429662, 0.058519514353407964, 0.1650492000401408, 0.18348914435509234, 0.0694769447894632, 0.09476936804294622, 0.006713309016509239, 0.39059192797389564, 9.999999999998899e-05, 0.10468578871978829, 0.5517184687948677, 0.5402021284779891, 0.5716256901964537, 0.5750771616449442, 0.5808421628869933, 0.5712148469080864, 0.5873761640773444, 0.6333472508094458, 0.5904106251223726, 0.07411912139035937, 0.11721303497393987, 0.11754286004999903, 0.1579955124651662, 0.1764076368258286, 0.15876993716989196, 0.14715070174184042, 0.11034594589538393, 0.14628507976321636, 0.2405681617457488, 0.30013596982563173, 0.19088597877458646, 0.2666635450880648, 0.293677388243889, 0.18267634790784304, 0.3366976593929527, 0.27671346337618596, 0.3184562154341999, 0.4863678312223282, 0.35042700405936433, 0.30435017086797767, 0.20391041669162924, 0.39576286976287733, 0.43789757858556344, 0.5706894564531034, 0.8400394135810703, 0.29027993527920126, 0.25616422760853785, 0.38493732658667756, 0.22799366718668246, 0.32278655666901346, 0.2937917923055805, 0.39379352682467383, 0.26163726607361615, 0.36869121856208353, 0.3788966019475928, 0.2127371075006076, 0.20812251686157002, 0.22748912649645237, 0.2029069469203646, 0.22860962356349568, 0.23100943863807566, 0.208438499666168, 0.21069772562599987, 0.202689780099768, 0.2120296773062279, 0.22114681867928154, 0.2270678102565855, 0.21338673241752426, 0.1804763359152668, 0.1869252534883985, 0.18946289160939989, 0.8765515038312707, 0.1854068250990255, 0.1739209040504942, 0.20075819992895294, 0.1548881639450903, 0.1785615733351522, 0.20106839060032777, 0.17215491024209373, 0.09996066317046082, 0.14837494373506888, 0.16659408416241495, 0.08321820665752622, 0.16949295352162685, 0.21181388782526533, 0.15541354334779267, 0.16908243538270906, 0.21199537953356606, 0.9084844925333069, 0.18647076694962228, 0.1675248355649841, 0.2003987895992977, 0.18461022080828304, 0.1765152525032525, 0.19627327657991633, 0.1885583450700874, 0.18646511553303002, 0.18618607971070278, 0.18378493589087808, 0.1984698006400476, 0.08742523008169134, 0.09392996953382937, 0.09713779619273355, 0.07685460438836911, 0.0899128314718346, 0.0922290274337696, 0.11881496835942396, 0.09448476948098172, 0.08765299264656623]}, "mutation_prompt": null}
