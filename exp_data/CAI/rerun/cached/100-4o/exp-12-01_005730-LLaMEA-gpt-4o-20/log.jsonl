{"id": "63e2af47-7ddc-477a-a873-b74aafbc8f53", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.elite_fraction = 0.1\n        self.neighborhood_size = max(3, int(0.2 * self.population_size))\n        self.func_evals = 0\n\n    def __call__(self, func):\n        lower, upper = self.bounds\n        population = np.random.uniform(lower, upper, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        self.func_evals += self.population_size\n\n        while self.func_evals < self.budget:\n            elite_count = int(self.elite_fraction * self.population_size)\n            elite_indices = np.argsort(fitness)[:elite_count]\n            elite_set = population[elite_indices]\n\n            for i in range(self.population_size):\n                if self.func_evals >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant = self.mutate(x1, x2, x3)\n                trial = self.crossover(population[i], mutant)\n\n                if np.random.rand() < 0.2:\n                    trial = self.local_search(trial, elite_set)\n\n                trial_fitness = func(trial)\n                self.func_evals += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index]\n\n    def mutate(self, x1, x2, x3):\n        mutant = x1 + self.mutation_factor * (x2 - x3)\n        return np.clip(mutant, *self.bounds)\n\n    def crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_probability\n        if not np.any(crossover_mask):\n            crossover_mask[np.random.randint(self.dim)] = True\n        return np.where(crossover_mask, mutant, target)\n\n    def local_search(self, trial, elite_set):\n        for elite in elite_set:\n            perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n            neighbor = trial + perturbation * (elite - trial)\n            trial = np.clip(neighbor, *self.bounds)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive neighborhood search for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.2574638104985326, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.654290363819272, 0.6316430667118509, 0.6477578488939095, 0.6330707427774681, 0.6399123482760806, 0.6594461405106042, 0.6230187360050274, 0.6356304333225722, 0.6070496873793125, 0.39889548591000523, 0.3898532197563678, 0.3988351268986772, 0.3640916810313123, 0.3862076636904823, 0.3776062457904582, 0.37392883996623727, 0.3658105447769977, 0.423861112815499, 0.09468742655806361, 0.10162814128721587, 0.11351344954994269, 0.10681257185733462, 0.0921823150510811, 0.09568910328894231, 0.08525672846819021, 0.08982783172158593, 0.100978191879322, 0.08881676103545144, 0.09119401042450903, 0.08415317195447336, 0.094495031601733, 0.08141197374826004, 0.08012554184572895, 0.0971076807991752, 0.08767457060945194, 0.08881896273858036, 0.9027475495777416, 0.9296441934416866, 0.9497953478392182, 0.9464382527743505, 0.964300009169765, 0.9148130141378359, 0.9641985193370778, 0.9477586144348488, 0.9176264797685538, 0.29843315648363744, 0.26955130406201755, 0.2433556165076458, 0.27955092985533403, 0.2856842622719441, 0.3080481352394636, 0.2971264324837827, 0.2964349264480036, 0.3042954549574505, 0.5485011192279445, 0.46616742279010037, 0.48289803080207205, 0.6384947908095615, 0.5015266762414364, 0.5080852464050821, 0.5451994490077259, 0.6347234577448637, 0.4792978648235723, 0.22000709947244523, 0.16356745961124564, 0.18637705338951327, 0.16223480415204594, 0.21315164031494915, 0.19597734699711478, 0.1727920900018527, 0.19976608212481173, 0.19123346736255487, 0.22716158721123614, 0.17834948923342964, 0.26590487155226006, 0.15599849735000282, 0.2145259236227981, 0.19876032735442672, 0.22308842498668324, 0.16102217225199944, 0.18648631538155835, 0.10141029017170944, 0.05114726761235566, 0.09509434402920547, 0.12266235806904913, 0.10683662563964813, 0.0924975652825949, 0.08203647375690903, 0.08367944574594333, 0.08265732562689099, 0.2232494988489956, 0.18322545642962906, 0.2398774344562401, 0.22543603950602487, 0.17526648087986374, 0.187427566294038, 0.22917137674687116, 0.19524970286224175, 0.22589268423454156, 0.019113075059989937, 0.01765867362177831, 0.030029315274478496, 0.026856233514360617, 0.002207239419528384, 0.032349250090070725, 0.02175864978835984, 0.03321319455969696, 0.018756023931792654, 0.16143463532647728, 0.14369060626907193, 0.14658608951480379, 0.14628913183586334, 0.15854427511543923, 0.1504337999378511, 0.14428660455002884, 0.14456035245311505, 0.1528219278181332, 0.4960034897154487, 0.4807642410003178, 0.4853223419912748, 0.4787823778662754, 0.4698228748013601, 0.4715492366555619, 0.45825652602252653, 0.45967039424523237, 0.48972720402397174, 0.07856610709980427, 0.0874586215155887, 0.09308132738996899, 0.08451381908504951, 0.076699511145086, 0.07690713359123036, 0.08399444213593488, 0.08077613630791602, 0.0795040205833708, 0.13875046931937518, 0.12385255470449696, 0.1436947853000352, 0.13794096088481989, 0.19536250631687802, 0.16600217905458137, 0.12861582846947783, 0.1388921666529639, 0.1506212022651049, 0.2860183656069579, 0.2691518941324804, 0.26840059961608276, 0.2762772253627881, 0.2736113138364671, 0.26971480583981156, 0.2862658814722865, 0.3019337676782716, 0.30026463796350067, 0.20480958531756677, 0.19976851031627685, 0.2074290473187288, 0.1959222556844109, 0.20233968485995735, 0.20338213943204764, 0.2149682314072877, 0.21514029839337168, 0.20642786245752953, 0.1755679376218785, 0.1710632493649722, 0.19759419775229792, 0.175399186896681, 0.18819968768096274, 0.16869518146839468, 0.18473014687016875, 0.17873582894815754, 0.17236947454768292, 0.1716183039445477, 0.17165972711940303, 0.18614645322759338, 0.17909541049438615, 0.17135678852793967, 0.1769225787122055, 0.18299054105558477, 0.1703662332186957, 0.1783438650038046, 0.4766834455247485, 0.16521045986981298, 0.1815802255067953, 0.39507205390833466, 0.18338967403454998, 0.1745198445400149, 0.2067175945226496, 0.32184296724731654, 0.2631620561398752, 0.1933138904011611, 0.5072247384664326, 0.5033523867414511, 0.1760209504006972, 0.42096984002016347, 0.14536067515773432, 0.19637869190247526, 0.20642855127205073, 0.2027981235422367, 0.19794431017886327, 0.18374316472845154, 0.18044441964566338, 0.1883344020488834, 0.17056871232329762, 0.17419070181346563, 0.18211796936201308, 0.17269238386824215, 0.18826250563276348, 0.07206179658936673, 0.07752407229187919, 0.07476503397728429, 0.07064858910428573, 0.07278800296797094, 0.06186069920838455, 0.06654972537755599, 0.06531601691720312, 0.07474035911572341]}, "mutation_prompt": null}
{"id": "2a490cdd-c266-441e-8faf-4a7f525d1d0e", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.elite_fraction = 0.1\n        self.neighborhood_size = max(3, int(0.2 * self.population_size))\n        self.func_evals = 0\n\n    def __call__(self, func):\n        lower, upper = self.bounds\n        population = np.random.uniform(lower, upper, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        self.func_evals += self.population_size\n\n        while self.func_evals < self.budget:\n            elite_count = int(self.elite_fraction * self.population_size)\n            elite_indices = np.argsort(fitness)[:elite_count]\n            elite_set = population[elite_indices]\n\n            for i in range(self.population_size):\n                if self.func_evals >= self.budget:\n                    break\n\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = population[indices]\n                mutant = self.mutate(x1, x2, x3)\n                trial = self.crossover(population[i], mutant)\n\n                if np.random.rand() < 0.2:\n                    trial = self.local_search(trial, elite_set)\n\n                trial_fitness = func(trial)\n                self.func_evals += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index]\n\n    def mutate(self, x1, x2, x3):\n        mutant = x1 + self.mutation_factor * (x2 - x3)\n        return np.clip(mutant, *self.bounds)\n\n    def crossover(self, target, mutant):\n        crossover_mask = np.random.rand(self.dim) < self.crossover_probability\n        if not np.any(crossover_mask):\n            crossover_mask[np.random.randint(self.dim)] = True\n        return np.where(crossover_mask, mutant, target)\n\n    def local_search(self, trial, elite_set):\n        for elite in elite_set:\n            perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n            neighbor = trial + perturbation * (elite - trial)\n            trial = np.clip(neighbor, *self.bounds)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive neighborhood search for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63e2af47-7ddc-477a-a873-b74aafbc8f53", "metadata": {"aucs": [0.654290363819272, 0.6316430667118509, 0.6477578488939095, 0.6330707427774681, 0.6399123482760806, 0.6594461405106042, 0.6230187360050274, 0.6356304333225722, 0.6070496873793125, 0.39889548591000523, 0.3898532197563678, 0.3988351268986772, 0.3640916810313123, 0.3862076636904823, 0.3776062457904582, 0.37392883996623727, 0.3658105447769977, 0.423861112815499, 0.09468742655806361, 0.10162814128721587, 0.11351344954994269, 0.10681257185733462, 0.0921823150510811, 0.09568910328894231, 0.08525672846819021, 0.08982783172158593, 0.100978191879322, 0.08881676103545144, 0.09119401042450903, 0.08415317195447336, 0.094495031601733, 0.08141197374826004, 0.08012554184572895, 0.0971076807991752, 0.08767457060945194, 0.08881896273858036, 0.9027475495777416, 0.9296441934416866, 0.9497953478392182, 0.9464382527743505, 0.964300009169765, 0.9148130141378359, 0.9641985193370778, 0.9477586144348488, 0.9176264797685538, 0.29843315648363744, 0.26955130406201755, 0.2433556165076458, 0.27955092985533403, 0.2856842622719441, 0.3080481352394636, 0.2971264324837827, 0.2964349264480036, 0.3042954549574505, 0.5485011192279445, 0.46616742279010037, 0.48289803080207205, 0.6384947908095615, 0.5015266762414364, 0.5080852464050821, 0.5451994490077259, 0.6347234577448637, 0.4792978648235723, 0.22000709947244523, 0.16356745961124564, 0.18637705338951327, 0.16223480415204594, 0.21315164031494915, 0.19597734699711478, 0.1727920900018527, 0.19976608212481173, 0.19123346736255487, 0.22716158721123614, 0.17834948923342964, 0.26590487155226006, 0.15599849735000282, 0.2145259236227981, 0.19876032735442672, 0.22308842498668324, 0.16102217225199944, 0.18648631538155835, 0.10141029017170944, 0.05114726761235566, 0.09509434402920547, 0.12266235806904913, 0.10683662563964813, 0.0924975652825949, 0.08203647375690903, 0.08367944574594333, 0.08265732562689099, 0.2232494988489956, 0.18322545642962906, 0.2398774344562401, 0.22543603950602487, 0.17526648087986374, 0.187427566294038, 0.22917137674687116, 0.19524970286224175, 0.22589268423454156, 0.019113075059989937, 0.01765867362177831, 0.030029315274478496, 0.026856233514360617, 0.002207239419528384, 0.032349250090070725, 0.02175864978835984, 0.03321319455969696, 0.018756023931792654, 0.16143463532647728, 0.14369060626907193, 0.14658608951480379, 0.14628913183586334, 0.15854427511543923, 0.1504337999378511, 0.14428660455002884, 0.14456035245311505, 0.1528219278181332, 0.4960034897154487, 0.4807642410003178, 0.4853223419912748, 0.4787823778662754, 0.4698228748013601, 0.4715492366555619, 0.45825652602252653, 0.45967039424523237, 0.48972720402397174, 0.07856610709980427, 0.0874586215155887, 0.09308132738996899, 0.08451381908504951, 0.076699511145086, 0.07690713359123036, 0.08399444213593488, 0.08077613630791602, 0.0795040205833708, 0.13875046931937518, 0.12385255470449696, 0.1436947853000352, 0.13794096088481989, 0.19536250631687802, 0.16600217905458137, 0.12861582846947783, 0.1388921666529639, 0.1506212022651049, 0.2860183656069579, 0.2691518941324804, 0.26840059961608276, 0.2762772253627881, 0.2736113138364671, 0.26971480583981156, 0.2862658814722865, 0.3019337676782716, 0.30026463796350067, 0.20480958531756677, 0.19976851031627685, 0.2074290473187288, 0.1959222556844109, 0.20233968485995735, 0.20338213943204764, 0.2149682314072877, 0.21514029839337168, 0.20642786245752953, 0.1755679376218785, 0.1710632493649722, 0.19759419775229792, 0.175399186896681, 0.18819968768096274, 0.16869518146839468, 0.18473014687016875, 0.17873582894815754, 0.17236947454768292, 0.1716183039445477, 0.17165972711940303, 0.18614645322759338, 0.17909541049438615, 0.17135678852793967, 0.1769225787122055, 0.18299054105558477, 0.1703662332186957, 0.1783438650038046, 0.4766834455247485, 0.16521045986981298, 0.1815802255067953, 0.39507205390833466, 0.18338967403454998, 0.1745198445400149, 0.2067175945226496, 0.32184296724731654, 0.2631620561398752, 0.1933138904011611, 0.5072247384664326, 0.5033523867414511, 0.1760209504006972, 0.42096984002016347, 0.14536067515773432, 0.19637869190247526, 0.20642855127205073, 0.2027981235422367, 0.19794431017886327, 0.18374316472845154, 0.18044441964566338, 0.1883344020488834, 0.17056871232329762, 0.17419070181346563, 0.18211796936201308, 0.17269238386824215, 0.18826250563276348, 0.07206179658936673, 0.07752407229187919, 0.07476503397728429, 0.07064858910428573, 0.07278800296797094, 0.06186069920838455, 0.06654972537755599, 0.06531601691720312, 0.07474035911572341]}, "mutation_prompt": null}
