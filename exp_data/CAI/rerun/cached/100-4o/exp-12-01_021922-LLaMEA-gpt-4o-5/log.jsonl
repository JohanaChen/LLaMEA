{"id": "efceb128-987e-4040-abf7-63e7e4cb4711", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, swarm_size=50, inertia_max=0.9, inertia_min=0.4):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_max = inertia_max\n        self.inertia_min = inertia_min\n        self.position = np.random.uniform(-5, 5, (self.swarm_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                fitness_value = func(self.position[i])\n                self.evaluations += 1\n                if fitness_value < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness_value\n                    self.personal_best_position[i] = self.position[i]\n                if fitness_value < self.global_best_value:\n                    self.global_best_value = fitness_value\n                    self.global_best_position = self.position[i]\n            \n            inertia_weight = self.inertia_max - (self.inertia_max - self.inertia_min) * (self.evaluations / self.budget)\n            \n            for i in range(self.swarm_size):\n                r1, r2 = np.random.random(self.dim), np.random.random(self.dim)\n                self.velocity[i] = (inertia_weight * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best_position[i] - self.position[i]) +\n                                    self.c2 * r2 * (self.global_best_position - self.position[i]))\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5, 5)\n                \n            # Local Search Intensification\n            if np.random.rand() < 0.1:\n                random_idx = np.random.randint(0, self.swarm_size)\n                local_search_position = self.position[random_idx] + np.random.uniform(-0.1, 0.1, self.dim)\n                local_search_position = np.clip(local_search_position, -5, 5)\n                local_fitness = func(local_search_position)\n                self.evaluations += 1\n                if local_fitness < self.personal_best_value[random_idx]:\n                    self.personal_best_value[random_idx] = local_fitness\n                    self.personal_best_position[random_idx] = local_search_position\n                if local_fitness < self.global_best_value:\n                    self.global_best_value = local_fitness\n                    self.global_best_position = local_search_position\n\n        return self.global_best_value, self.global_best_position", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with Dynamic Inertia Weight and Local Search Intensification.", "configspace": "", "generation": 0, "fitness": 0.17830575526493878, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.41461414847607747, 0.33767509942722695, 0.45618042333835895, 0.36503334510621344, 0.43012166197251644, 0.400073119765718, 0.4523631624246034, 0.38540872672458903, 0.3755553277340662, 0.056387146347963046, 0.01976029381732336, 0.023503890787441195, 9.999999999998899e-05, 0.10301828621119458, 0.02226445672157884, 0.05660622795665349, 0.027736075995311915, 0.01670444999669929, 0.09826747494496468, 0.09682015147392997, 0.07938973846935804, 0.08607028593691868, 0.07333407780867363, 0.05992358454012425, 0.10271640996845122, 0.08474114442801839, 0.10367996568716642, 0.08326260770163207, 0.07784171688832975, 0.0711843514138305, 0.08127006924572688, 0.08005167625740817, 0.07844248311408242, 0.08064229796179423, 0.07747288438582622, 0.08624710343944719, 0.9860506748399849, 0.9491321208903081, 0.9900791352692719, 0.9880320250798488, 0.9860634252448685, 0.9841809019161455, 0.9862950582595978, 0.985812602028214, 0.9856416105216008, 0.2672813108273362, 0.17380787892955618, 0.08088168453875222, 0.14095850579166613, 0.21241483061401956, 0.14168781631620275, 0.1778178574185606, 0.1694842894834051, 0.12366449406964564, 0.16203593215788314, 0.1637929033414668, 0.16079730860804575, 0.1972371947927375, 0.17238054114655044, 0.1834727547648337, 0.21821656505273257, 0.12003977570372282, 0.15902779848163917, 0.16437839160742151, 0.09555663051752072, 0.0676942385648659, 0.0566765721419783, 0.11506449694264032, 0.058215705754899094, 0.0817201288910896, 0.09628406602420614, 0.12185171958713126, 0.11155383709923039, 0.06689160404254857, 0.060545253897564044, 0.04334364365216703, 0.07518142868383404, 0.09265268865602339, 0.08635175628550806, 0.03738257055860117, 0.0877888076010862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00026777616520434755, 0.030003459013822842, 0.03316957581434932, 0.04398845088622516, 0.017856361624826622, 0.010203307458477529, 0.02003842733902672, 0.05649034424052224, 0.026953212779071922, 0.02147439110744853, 9.999999999998899e-05, 9.999999999998899e-05, 0.017591969376525962, 0.02309114904737053, 0.024908301992474513, 0.019056428227516742, 0.025312824716986704, 0.03495436985603506, 0.0404897028995872, 0.06194746860174816, 0.02036848745368991, 0.04971598735581173, 0.02232641955769299, 0.05688222740814286, 0.10121874253483876, 0.03717510218837483, 0.032137902279104624, 0.05209823941795644, 0.3020087598879536, 0.36651774780821933, 0.3389836856810441, 0.332141558635334, 0.35178681506040954, 0.24844085881774314, 0.38435267065406975, 0.3390845068489784, 0.3816529684342246, 0.06809524276543322, 0.07748926872110551, 0.0742208487671282, 0.08021227862850644, 0.07135735965595957, 0.07247522319906585, 0.07284299680791495, 0.06471890221668908, 0.06683764067937314, 0.17284378457515248, 0.19389071392679225, 0.1543210755665918, 0.20429114224503153, 0.22521005868248634, 0.1589637045299409, 0.17280135227424742, 0.14080168323651432, 0.17487062751887938, 0.2094035726537402, 0.20455290958690564, 0.2613955827825708, 0.22616281851094155, 0.2291211228593648, 0.24578190232699715, 0.21463557197088323, 0.25974325410895904, 0.23469573190686965, 0.1457092988317461, 0.13382860274808284, 0.17284465762259282, 0.1292645133251401, 0.15658197780451844, 0.1770283894296144, 0.17787461484484124, 0.17969105081036119, 0.153237035133567, 0.1548642528774311, 0.16617357512303388, 0.19081736950929273, 0.17587418489904616, 0.17351702648940193, 0.1942320232250907, 0.18651972252715898, 0.1911126345572305, 0.20836052919878156, 0.17863232084946012, 0.3040153512743088, 0.16933509228649601, 0.17575598939546222, 0.18460250170653214, 0.19653207979992438, 0.17348251560594397, 0.19727025989117886, 0.1545332268851014, 0.2413435151547535, 0.15701376134512124, 0.17153637393331833, 0.4992144689586919, 0.18344298277775217, 0.14023147900145538, 0.1629100771006663, 0.14090136717029222, 0.5065469882050966, 0.42044608243743664, 0.20288970578958665, 0.15995377340794525, 0.1684767908025755, 0.28928173787235933, 0.13286578299627583, 0.19749225196268705, 0.20016942702361706, 0.2709545126234728, 0.19861876628553365, 0.20309447343665565, 0.18335478845789743, 0.2121428597438786, 0.21868535416867396, 0.18533673490793412, 0.18805297448798763, 0.1850086932499131, 0.19869040752898903, 0.07154997107488814, 0.06874339899548032, 0.06202814811184054, 0.06072731136683418, 0.06808001384219664, 0.06434975893426198, 0.07338333914339112, 0.06807312338122506, 0.0694501699537663]}, "mutation_prompt": null}
{"id": "ed373430-6ccd-44c7-81ec-45935cc62640", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, swarm_size=50, inertia_max=0.9, inertia_min=0.4):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_max = inertia_max\n        self.inertia_min = inertia_min\n        self.position = np.random.uniform(-5, 5, (self.swarm_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        self.personal_best_position = np.copy(self.position)\n        self.personal_best_value = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                fitness_value = func(self.position[i])\n                self.evaluations += 1\n                if fitness_value < self.personal_best_value[i]:\n                    self.personal_best_value[i] = fitness_value\n                    self.personal_best_position[i] = self.position[i]\n                if fitness_value < self.global_best_value:\n                    self.global_best_value = fitness_value\n                    self.global_best_position = self.position[i]\n            \n            # Stochastic inertia weight adjustment\n            inertia_weight = np.random.uniform(self.inertia_min, self.inertia_max)\n            \n            for i in range(self.swarm_size):\n                r1, r2 = np.random.random(self.dim), np.random.random(self.dim)\n                self.velocity[i] = (inertia_weight * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best_position[i] - self.position[i]) +\n                                    self.c2 * r2 * (self.global_best_position - self.position[i]))\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5, 5)\n                \n            # Local Search Intensification\n            if np.random.rand() < 0.1:\n                random_idx = np.random.randint(0, self.swarm_size)\n                local_search_position = self.position[random_idx] + np.random.uniform(-0.1, 0.1, self.dim)\n                local_search_position = np.clip(local_search_position, -5, 5)\n                local_fitness = func(local_search_position)\n                self.evaluations += 1\n                if local_fitness < self.personal_best_value[random_idx]:\n                    self.personal_best_value[random_idx] = local_fitness\n                    self.personal_best_position[random_idx] = local_search_position\n                if local_fitness < self.global_best_value:\n                    self.global_best_value = local_fitness\n                    self.global_best_position = local_search_position\n\n        return self.global_best_value, self.global_best_position", "name": "AdaptivePSO", "description": "Enhanced Adaptive PSO with stochastic inertia weight adjustment for balanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.20965337953744728, "feedback": "", "error": "", "parent_id": "efceb128-987e-4040-abf7-63e7e4cb4711", "metadata": {"aucs": [0.5048222007621372, 0.41625528274922463, 0.4984661847493693, 0.5372131665382078, 0.5875256908829422, 0.6086074340982157, 0.6081374023106351, 0.6163029888756552, 0.6247403353861116, 9.999999999998899e-05, 9.999999999998899e-05, 0.25581997927842803, 9.999999999998899e-05, 0.1838414220610337, 0.07299936976250443, 9.999999999998899e-05, 0.2014052079864197, 0.1331948681556745, 0.12182556126088406, 0.10749845421537807, 0.11016049252100124, 0.1094815629373821, 0.08341676319844205, 0.11181073127252295, 0.11142010105610456, 0.14785186075997103, 0.09711780243165535, 0.11363252825078196, 0.10825993603186945, 0.10938670310386567, 0.10304140416313035, 0.11576759528224323, 0.11813931954228174, 0.08859711817764071, 0.10846841981872368, 0.10990440482462782, 0.9859801705494513, 0.9864196019448155, 0.9856394457617259, 0.983586492544618, 0.9860214907238668, 0.9793414799677164, 0.9853578038736931, 0.9857380020270583, 0.9856607213444948, 0.28026414636259667, 0.2165361798709543, 0.2381028859779103, 0.14573111432530572, 0.21165960479894974, 0.144629928966152, 0.09184629619607565, 0.12152951681966262, 0.2338188808373487, 0.1850267218288668, 0.16821881308565356, 0.2168482779527826, 0.19846194979191933, 0.19327334069289825, 0.19178741821423684, 0.1701536562473086, 0.15410229010295717, 0.26513222272761405, 0.15075272884676838, 0.14493518816835838, 0.15040307989693757, 0.09582961471615092, 0.1388408502127626, 0.09478587641723535, 0.1286447627571362, 0.12490301063058362, 0.13212440754223376, 0.1776972337371433, 0.11635643991461364, 0.10906268575221334, 0.11270065542955743, 0.1098724671150152, 0.1531319661467021, 0.11282346264229093, 0.03089648338827078, 0.1477239717942761, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01497122656735117, 9.999999999998899e-05, 0.06425978244745079, 0.03860518303767346, 0.07884907815912934, 0.013900407648319901, 0.007339582555923152, 0.006815149609352145, 0.04770654014307807, 0.057369568773684154, 0.03795682746113338, 0.05052692970003736, 0.004328887232546874, 0.03228581552893883, 0.10969195728711878, 0.030326115258402897, 0.023606937936442196, 0.03640874053147325, 0.05511934209936242, 0.06748208531744271, 0.08555959987392037, 0.07509483641111492, 0.04439703359528069, 0.025316291684879588, 0.08468581521587548, 0.005780241557182708, 0.06887257138385905, 0.11968212767560849, 0.10414624183227061, 0.4101373777237033, 0.40748691865432485, 0.382467456597267, 0.45681348422234047, 0.38723014518129717, 0.44392946364018016, 0.42425756461057496, 0.39361617652462055, 0.38594775282275995, 0.0725798141362669, 0.08117324191912922, 0.09169423132521748, 0.10574747168026621, 0.08448570127616117, 0.09059104248740746, 0.08294820591065344, 0.09676124208392378, 0.10344881756798319, 0.15422303644491153, 0.3091111340572805, 0.18221585790302675, 0.23939867239189971, 0.26798471902635934, 0.1986438446602422, 0.2829473828211242, 0.17920309871830487, 0.20339107596654504, 0.21474096784303398, 0.20230055235331945, 0.3093741879693299, 0.2553525069705662, 0.24449533197360773, 0.27935897774528917, 0.3061679744986986, 0.3027334910627617, 0.3088895766986066, 0.22250056101958593, 0.19535229250786412, 0.1971694052612739, 0.15012819857868964, 0.2221618600651889, 0.17760395340125656, 0.23294393744575725, 0.2085119957442939, 0.14343458080840688, 0.18875281284844203, 0.14088509478100208, 0.18182199573112068, 0.21790596058351797, 0.19325418827954355, 0.18990293533609115, 0.21958891184853657, 0.2247233958019419, 0.2074209154988763, 0.2153559404260743, 0.19152709382047395, 0.20078770807794755, 0.19107056201183692, 0.18541603123544714, 0.21342779726688133, 0.19075299556635394, 0.19665125598956112, 0.1909929495378757, 0.1602007596646976, 0.16009323496853523, 0.14964907162734598, 0.5340358507187324, 0.19478428826360494, 0.19490617717086045, 0.14686467557041638, 0.17348356083161798, 0.6834368064434745, 0.42409790969590655, 0.19634556452373686, 0.19690919314509658, 0.2997384542010225, 0.2372813810862503, 0.15658494257223898, 0.19883494463689033, 0.2027650336999519, 0.4277482903849492, 0.2082404312101792, 0.19682602763989876, 0.2003667813604827, 0.2027621834671619, 0.18582664364340484, 0.20080908157445787, 0.20435249515861265, 0.2230565046249785, 0.2017783263048496, 0.07257651995526726, 0.0735711780344036, 0.08307464251228025, 0.07589450542028975, 0.08738642054002554, 0.08978294550713273, 0.09094964384546056, 0.10484720442751982, 0.07362393109925292]}, "mutation_prompt": null}
