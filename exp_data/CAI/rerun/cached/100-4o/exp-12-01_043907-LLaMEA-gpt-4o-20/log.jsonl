{"id": "d859c7be-2cb2-4310-853b-bf73a0e06784", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population_size = int(np.clip(20, 5, budget // dim))\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, float('inf'))\n        self.current_evaluations = 0\n\n    def mutate(self, idx):\n        indices = [i for i in range(self.population_size) if i != idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = self.pop[a] + self.F * (self.pop[b] - self.pop[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        offspring = np.where(cross_points, mutant, target)\n        return offspring\n\n    def adapt_population_size(self):\n        # Adjust population size dynamically during iterations\n        factor = np.exp(-self.current_evaluations / self.budget)\n        self.population_size = max(5, int(self.population_size * factor))\n        self.pop = self.pop[:self.population_size]\n        self.scores = self.scores[:self.population_size]\n\n    def __call__(self, func):\n        # Initial evaluation\n        for i in range(self.population_size):\n            self.scores[i] = func(self.pop[i])\n            self.current_evaluations += 1\n            if self.current_evaluations >= self.budget:\n                return self.pop[np.argmin(self.scores)]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                offspring = self.crossover(self.pop[i], mutant)\n                score = func(offspring)\n                self.current_evaluations += 1\n\n                if score < self.scores[i]:\n                    self.pop[i] = offspring\n                    self.scores[i] = score\n\n                if self.current_evaluations >= self.budget:\n                    return self.pop[np.argmin(self.scores)]\n            \n            # Adapt the population size over time\n            self.adapt_population_size()\n\n        return self.pop[np.argmin(self.scores)]", "name": "AdaptiveDifferentialEvolution", "description": "A dynamic population-based search algorithm that combines differential evolution with adaptive population sizing for diverse exploration and efficient convergence.", "configspace": "", "generation": 0, "fitness": 0.14392946678919322, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.36152167654598055, 0.3219431970223805, 0.21000705675752074, 0.369236316529282, 0.18331396646903864, 0.42533550401727993, 0.31190890899693346, 0.3379799373922169, 0.35450477651015755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575413554629173, 0.04003914450115875, 0.010779573411168752, 9.999999999998899e-05, 0.004193628800098992, 0.06578673659415435, 0.08807248877412877, 0.12510507246093017, 0.09173145547405748, 0.10856769750869133, 0.0830958382306144, 0.08560103364697824, 0.06921852312067822, 0.08800531816547486, 0.0670091101729633, 0.057106412345625523, 0.02325096223341594, 0.08909571741134437, 0.06179091367700984, 0.0371136442026323, 0.1175230470219325, 0.022518784853959195, 0.0935411228867069, 0.050255099344447274, 0.20060592868754512, 0.9821974202534534, 0.18417229356979647, 0.9744015890116074, 0.974053081799595, 0.3091247785369311, 0.9852489742061882, 0.25992202016640453, 0.9788590666122425, 0.05332844830101313, 0.11596918389133948, 0.0424949067839574, 0.12458611104457484, 0.04899525270776828, 0.11028809149910268, 0.07868011355433369, 0.06310643118146397, 0.13942379031516905, 0.18613876685636743, 0.10997627020328071, 0.19898883719540272, 0.19037148081402822, 0.13323896155457116, 0.21259757083969677, 0.15269092949935004, 0.23695205458812252, 0.18066897613214827, 0.14579658886721159, 0.13844366272228148, 0.0020184851972966378, 0.05516037729968959, 0.1123847034531924, 0.010940834498629703, 0.10896331230021006, 9.999999999998899e-05, 0.013125292621772533, 0.043707821388635604, 0.010046409387188926, 0.03159274405828327, 0.10512303518215371, 0.16428887016013882, 0.1405017154933541, 0.05671702329195105, 0.0648781293506816, 0.13307035749146456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09052036852794243, 0.07551415660879157, 0.04803597321342845, 0.17948581913973372, 0.062252036634755537, 0.05607438438345003, 0.1095264556659471, 0.02557487457204133, 0.2067179934561132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1601394220208242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11980716966723848, 9.999999999998899e-05, 0.011369614649915816, 0.14209318191018105, 9.999999999998899e-05, 0.013405714685225001, 9.999999999998899e-05, 0.04852946035203909, 0.22796807307612055, 0.3518385156675107, 0.2563437932664291, 0.18156172294241923, 0.27664825044026686, 0.16007710740363523, 0.2453371646338396, 0.19470711450275158, 0.2543094317524386, 0.06066552569340744, 0.07002880176896664, 0.10593672037358104, 0.06804453317227943, 0.08293692322513357, 0.056384262807451346, 0.06829846715587573, 0.06990349959666164, 0.07362355669078258, 0.1238614230771653, 0.12106303799951779, 0.15691398314708782, 0.10342577314551094, 0.10852972522114013, 0.1589636048712888, 0.1417176569116273, 0.12014918965410892, 0.10304385054790166, 0.29845195632017585, 0.17095125129913158, 0.1905375923683612, 0.24987530981712514, 0.2483715973370486, 0.29516819272235706, 0.24715728322525654, 0.19620120717117318, 0.1725401433801762, 0.13620232197244708, 0.26899457923090353, 0.09865458487737455, 0.1309729186061619, 0.24542170892062665, 0.15679940666228143, 0.14696803795745617, 0.2873042786057418, 0.22076769527402063, 0.17334329443651864, 0.1483949433250964, 0.1418637212041931, 0.1259363674054984, 0.19668031858389823, 0.15844241309116314, 0.14168249718150616, 0.13681223392691444, 0.16250263400905773, 0.17464438823819362, 0.1693900038774735, 0.1693430638320811, 0.17558060128639608, 0.18125840068090582, 0.19386152977211246, 0.18104590083013927, 0.17482056179720817, 0.18011093859520244, 0.16829889547230936, 0.16821813078529324, 0.17195896474058858, 0.16297281793837193, 0.18477809517155497, 0.17466415709266858, 0.32324412694859406, 0.22470532593170545, 0.1489635266121111, 0.1774799877480313, 0.08408908425438277, 0.16738306626179167, 0.14582853622196668, 0.12312352298638984, 0.06813093791686331, 0.1288383739890604, 0.08649023084085128, 0.20399993640879288, 0.15438539683979557, 0.17647402629819775, 0.15639313036979197, 0.15951210256286963, 0.184526344332951, 0.15541168040512476, 0.18344214273670612, 0.18077523880057889, 0.17862046095607542, 0.05249283028465468, 0.0686537878730249, 0.0658601028480531, 0.06388700233941913, 0.06860528666308796, 0.07296172172334736, 0.07515894223258857, 0.06626383230691046, 0.0864433743224845]}, "mutation_prompt": null}
{"id": "367fc2ec-a82c-4f80-a227-10e67eb53833", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population_size = int(np.clip(20, 5, budget // dim))\n        self.pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.scores = np.full(self.population_size, float('inf'))\n        self.current_evaluations = 0\n\n    def mutate(self, idx):\n        indices = [i for i in range(self.population_size) if i != idx]\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = self.pop[a] + self.F * (self.pop[b] - self.pop[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        offspring = np.where(cross_points, mutant, target)\n        return offspring\n\n    def adapt_population_size(self):\n        # Adjust population size dynamically during iterations\n        factor = np.exp(-self.current_evaluations / self.budget)\n        self.population_size = max(5, int(self.population_size * factor))\n        self.pop = self.pop[:self.population_size]\n        self.scores = self.scores[:self.population_size]\n\n    def __call__(self, func):\n        # Initial evaluation\n        for i in range(self.population_size):\n            self.scores[i] = func(self.pop[i])\n            self.current_evaluations += 1\n            if self.current_evaluations >= self.budget:\n                return self.pop[np.argmin(self.scores)]\n\n        while self.current_evaluations < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(i)\n                offspring = self.crossover(self.pop[i], mutant)\n                score = func(offspring)\n                self.current_evaluations += 1\n\n                if score < self.scores[i]:\n                    self.pop[i] = offspring\n                    self.scores[i] = score\n\n                if self.current_evaluations >= self.budget:\n                    return self.pop[np.argmin(self.scores)]\n            \n            # Adapt the population size over time\n            self.adapt_population_size()\n\n        return self.pop[np.argmin(self.scores)]", "name": "AdaptiveDifferentialEvolution", "description": "A dynamic population-based search algorithm that combines differential evolution with adaptive population sizing for diverse exploration and efficient convergence.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d859c7be-2cb2-4310-853b-bf73a0e06784", "metadata": {"aucs": [0.36152167654598055, 0.3219431970223805, 0.21000705675752074, 0.369236316529282, 0.18331396646903864, 0.42533550401727993, 0.31190890899693346, 0.3379799373922169, 0.35450477651015755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575413554629173, 0.04003914450115875, 0.010779573411168752, 9.999999999998899e-05, 0.004193628800098992, 0.06578673659415435, 0.08807248877412877, 0.12510507246093017, 0.09173145547405748, 0.10856769750869133, 0.0830958382306144, 0.08560103364697824, 0.06921852312067822, 0.08800531816547486, 0.0670091101729633, 0.057106412345625523, 0.02325096223341594, 0.08909571741134437, 0.06179091367700984, 0.0371136442026323, 0.1175230470219325, 0.022518784853959195, 0.0935411228867069, 0.050255099344447274, 0.20060592868754512, 0.9821974202534534, 0.18417229356979647, 0.9744015890116074, 0.974053081799595, 0.3091247785369311, 0.9852489742061882, 0.25992202016640453, 0.9788590666122425, 0.05332844830101313, 0.11596918389133948, 0.0424949067839574, 0.12458611104457484, 0.04899525270776828, 0.11028809149910268, 0.07868011355433369, 0.06310643118146397, 0.13942379031516905, 0.18613876685636743, 0.10997627020328071, 0.19898883719540272, 0.19037148081402822, 0.13323896155457116, 0.21259757083969677, 0.15269092949935004, 0.23695205458812252, 0.18066897613214827, 0.14579658886721159, 0.13844366272228148, 0.0020184851972966378, 0.05516037729968959, 0.1123847034531924, 0.010940834498629703, 0.10896331230021006, 9.999999999998899e-05, 0.013125292621772533, 0.043707821388635604, 0.010046409387188926, 0.03159274405828327, 0.10512303518215371, 0.16428887016013882, 0.1405017154933541, 0.05671702329195105, 0.0648781293506816, 0.13307035749146456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09052036852794243, 0.07551415660879157, 0.04803597321342845, 0.17948581913973372, 0.062252036634755537, 0.05607438438345003, 0.1095264556659471, 0.02557487457204133, 0.2067179934561132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1601394220208242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11980716966723848, 9.999999999998899e-05, 0.011369614649915816, 0.14209318191018105, 9.999999999998899e-05, 0.013405714685225001, 9.999999999998899e-05, 0.04852946035203909, 0.22796807307612055, 0.3518385156675107, 0.2563437932664291, 0.18156172294241923, 0.27664825044026686, 0.16007710740363523, 0.2453371646338396, 0.19470711450275158, 0.2543094317524386, 0.06066552569340744, 0.07002880176896664, 0.10593672037358104, 0.06804453317227943, 0.08293692322513357, 0.056384262807451346, 0.06829846715587573, 0.06990349959666164, 0.07362355669078258, 0.1238614230771653, 0.12106303799951779, 0.15691398314708782, 0.10342577314551094, 0.10852972522114013, 0.1589636048712888, 0.1417176569116273, 0.12014918965410892, 0.10304385054790166, 0.29845195632017585, 0.17095125129913158, 0.1905375923683612, 0.24987530981712514, 0.2483715973370486, 0.29516819272235706, 0.24715728322525654, 0.19620120717117318, 0.1725401433801762, 0.13620232197244708, 0.26899457923090353, 0.09865458487737455, 0.1309729186061619, 0.24542170892062665, 0.15679940666228143, 0.14696803795745617, 0.2873042786057418, 0.22076769527402063, 0.17334329443651864, 0.1483949433250964, 0.1418637212041931, 0.1259363674054984, 0.19668031858389823, 0.15844241309116314, 0.14168249718150616, 0.13681223392691444, 0.16250263400905773, 0.17464438823819362, 0.1693900038774735, 0.1693430638320811, 0.17558060128639608, 0.18125840068090582, 0.19386152977211246, 0.18104590083013927, 0.17482056179720817, 0.18011093859520244, 0.16829889547230936, 0.16821813078529324, 0.17195896474058858, 0.16297281793837193, 0.18477809517155497, 0.17466415709266858, 0.32324412694859406, 0.22470532593170545, 0.1489635266121111, 0.1774799877480313, 0.08408908425438277, 0.16738306626179167, 0.14582853622196668, 0.12312352298638984, 0.06813093791686331, 0.1288383739890604, 0.08649023084085128, 0.20399993640879288, 0.15438539683979557, 0.17647402629819775, 0.15639313036979197, 0.15951210256286963, 0.184526344332951, 0.15541168040512476, 0.18344214273670612, 0.18077523880057889, 0.17862046095607542, 0.05249283028465468, 0.0686537878730249, 0.0658601028480531, 0.06388700233941913, 0.06860528666308796, 0.07296172172334736, 0.07515894223258857, 0.06626383230691046, 0.0864433743224845]}, "mutation_prompt": null}
