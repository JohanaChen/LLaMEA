{"id": "b524cf30-b35d-44da-a2f4-2f2858256e18", "solution": "import numpy as np\n\nclass HybridGeneticSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.temperature = 1.0\n        self.alpha = 0.99\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _select_parents(self, population, fitness):\n        probabilities = fitness / fitness.sum()\n        return population[np.random.choice(self.population_size, 2, p=probabilities)]\n\n    def _crossover(self, parent1, parent2):\n        crossover_point = np.random.randint(1, self.dim)\n        child1 = np.concatenate((parent1[:crossover_point], parent2[crossover_point:]))\n        child2 = np.concatenate((parent2[:crossover_point], parent1[crossover_point:]))\n        return child1, child2\n\n    def _mutate(self, individual):\n        if np.random.rand() < self.mutation_rate:\n            mutation_point = np.random.randint(self.dim)\n            individual[mutation_point] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return individual\n\n    def _anneal(self, candidate, best, func):\n        candidate_fitness = func(candidate)\n        best_fitness = func(best)\n        if candidate_fitness < best_fitness:\n            return candidate, candidate_fitness\n        else:\n            acceptance_probability = np.exp((best_fitness - candidate_fitness) / self.temperature)\n            if np.random.rand() < acceptance_probability:\n                return candidate, candidate_fitness\n        return best, best_fitness\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = self._evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n        best_fitness = fitness[best_index]\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            new_population = []\n            for _ in range(self.population_size // 2):\n                parents = self._select_parents(population, fitness)\n                child1, child2 = self._crossover(*parents)\n                child1 = self._mutate(child1)\n                child2 = self._mutate(child2)\n                new_population.extend([child1, child2])\n                \n            new_population = np.array(new_population)\n            new_fitness = self._evaluate_population(new_population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                best_solution, best_fitness = self._anneal(new_population[i], best_solution, func)\n            \n            population = new_population\n            fitness = new_fitness\n            self.temperature *= self.alpha\n\n        return best_solution", "name": "HybridGeneticSimulatedAnnealing", "description": "Hybrid Genetic-Simulated Annealing Algorithm leveraging population diversity and adaptive cooling to explore and exploit the search space effectively.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 58, in __call__\n  File \"<string>\", line 22, in _select_parents\n  File \"mtrand.pyx\", line 956, in numpy.random.mtrand.RandomState.choice\nValueError: probabilities are not non-negative\n.", "error": "ValueError('probabilities are not non-negative')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 58, in __call__\n  File \"<string>\", line 22, in _select_parents\n  File \"mtrand.pyx\", line 956, in numpy.random.mtrand.RandomState.choice\nValueError: probabilities are not non-negative\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "f03ec70b-d933-4d77-856b-fc336e4f5a12", "solution": "import numpy as np\n\nclass HybridGeneticSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.mutation_rate = 0.1\n        self.temperature = 1.0\n        self.alpha = 0.99\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _select_parents(self, population, fitness):\n        fitness += abs(fitness.min()) + 1e-8  # Avoid negative probabilities\n        probabilities = fitness / fitness.sum()\n        return population[np.random.choice(self.population_size, 2, p=probabilities)]\n\n    def _crossover(self, parent1, parent2):\n        crossover_point = np.random.randint(1, self.dim)\n        child1 = np.concatenate((parent1[:crossover_point], parent2[crossover_point:]))\n        child2 = np.concatenate((parent2[:crossover_point], parent1[crossover_point:]))\n        return child1, child2\n\n    def _mutate(self, individual):\n        if np.random.rand() < self.mutation_rate:\n            mutation_strength = np.random.normal(0, 0.2, self.dim)  # Gaussian mutation\n            individual += mutation_strength\n            individual = np.clip(individual, self.lower_bound, self.upper_bound)\n        return individual\n\n    def _anneal(self, candidate, best, func):\n        candidate_fitness = func(candidate)\n        best_fitness = func(best)\n        if candidate_fitness < best_fitness:\n            return candidate, candidate_fitness\n        else:\n            acceptance_probability = np.exp((best_fitness - candidate_fitness) / self.temperature)\n            if np.random.rand() < acceptance_probability:\n                return candidate, candidate_fitness\n        return best, best_fitness\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        fitness = self._evaluate_population(population, func)\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n        best_fitness = fitness[best_index]\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            new_population = []\n            for _ in range(self.population_size // 2):\n                parents = self._select_parents(population, fitness)\n                child1, child2 = self._crossover(*parents)\n                child1 = self._mutate(child1)\n                child2 = self._mutate(child2)\n                new_population.extend([child1, child2])\n                \n            new_population = np.array(new_population)\n            new_fitness = self._evaluate_population(new_population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                best_solution, best_fitness = self._anneal(new_population[i], best_solution, func)\n            \n            population = new_population\n            fitness = new_fitness\n            self.temperature *= self.alpha\n\n        return best_solution", "name": "HybridGeneticSimulatedAnnealing", "description": "Enhanced Hybrid Genetic-Simulated Annealing with fitness scaling to correct selection probabilities and improved mutation strategy for diverse exploration.", "configspace": "", "generation": 1, "fitness": 0.05826759137687601, "feedback": "", "error": "", "parent_id": "b524cf30-b35d-44da-a2f4-2f2858256e18", "metadata": {"aucs": [0.14379874711082974, 0.12917549566825837, 0.1553616211806209, 0.09431231635004056, 0.13312408246252838, 0.11042008850345264, 0.0998473575412605, 0.07431300570909605, 0.07040185664501242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.005375109906600173, 0.03879763293729355, 0.031245199602621176, 0.016603592943650658, 0.02038861655165869, 0.029037922356700108, 0.011571048695420916, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028635128825612033, 0.05523995982129126, 0.004145019089606072, 0.014763392921912755, 0.0072293035030308594, 9.999999999998899e-05, 0.06528726613740965, 0.0687858048002894, 0.06798195856060774, 0.06391080397782867, 0.059953637624078016, 0.05038976607341794, 0.07390043956431613, 0.05516199171373415, 0.05081450561474998, 0.06274794416174423, 0.043001109483775335, 0.026356406435372293, 0.014032922983239993, 0.00031549654350837564, 0.0065823003396638935, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.12891317886133458, 0.08224659834595494, 0.0619718335759204, 0.0667108215001172, 0.07285119553694963, 0.04813816059103537, 0.07332127957796697, 0.06964540120388885, 0.09277946990457697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020060455677849642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.15756555760738078, 0.14838054695461433, 0.10279143709805372, 0.10274288241579344, 0.10419638002310727, 0.17771624581248802, 0.1236737056157059, 0.18871743233426774, 0.010480412335640565, 0.04946487262111565, 0.02198412468535549, 0.03578316331754672, 0.01103809452037352, 0.02906069977495629, 0.011488450348101975, 0.009026615192263332, 0.034068627126702666, 0.11282921051338413, 0.15566318694278358, 0.11876924912146913, 0.1240525152784252, 0.11244105989368558, 0.10798713552628325, 0.11687687098300503, 0.12288331895882842, 0.10987653283926879, 0.10362480608127966, 0.09729624038196982, 0.1613932299901244, 0.15032636405366462, 0.12653569350628568, 0.1408109899971468, 0.1389444009250086, 0.17377774300845283, 0.12951077092089858, 0.07251047681729728, 0.08418228114685411, 0.09654076201456796, 0.08501947556041523, 0.09905882966540047, 0.09487485050842737, 0.0837317855149382, 0.10005576158818219, 0.0831448268864573, 0.11943364695601921, 0.11364119802182049, 0.13345086981233123, 0.12626758996502963, 0.1222508200239486, 0.13626479471591868, 0.13477940580352665, 0.13772112420843874, 0.13455719302229974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14855833558310627, 9.999999999998899e-05, 9.999999999998899e-05, 0.02886340103543228, 9.999999999998899e-05, 9.999999999998899e-05, 0.14820361606442567, 0.10844220076965283, 0.11173517742648109, 0.11611675328751403, 0.1207914665021157, 0.10737319297125725, 0.1070176662487543, 0.10511484148144368, 0.1131637666826526, 0.11040265245322212, 0.16327537884893062, 0.15617125330901038, 0.10997749136629409, 0.10564537344556735, 0.10501743382410023, 0.08074065775903383, 0.08797792889938805, 0.09032881644130553, 0.20264706004103905, 0.16101078247221723, 0.17052087399660376, 0.17510173971152476, 0.1735713739031034, 0.17367918859777642, 0.18372076283328242, 0.16489895350276051, 0.15693498497525127, 0.0349714213546678, 0.05320574159468883, 0.051054361945938265, 0.03873801852347136, 0.04111032934361214, 0.04190987981400818, 0.036094726285823664, 0.03803354422653826, 0.04232264664137342]}, "mutation_prompt": null}
