{"id": "fe707835-69e8-4deb-afd5-a819244cfd1d", "solution": "import numpy as np\n\nclass HybridPSOwithADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(40, budget // dim)\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.f = 0.8   # DE mutation factor\n        self.cr = 0.9  # DE crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate population\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(self.population[i])\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = self.population[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(2)\n            self.velocities = (self.w * self.velocities\n                               + self.c1 * r1 * (self.personal_best - self.population)\n                               + self.c2 * r2 * (self.global_best - self.population))\n            self.population += self.velocities\n\n            # Apply DE mutation and crossover for exploration\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.f * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr:\n                        trial[j] = mutant[j]\n                score = func(trial)\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best[i] = trial\n                    self.population[i] = trial\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best = trial\n        return self.global_best", "name": "HybridPSOwithADE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution that balances global exploration and local exploitation to efficiently optimize black-box functions.", "configspace": "", "generation": 0, "fitness": 0.3542999190102248, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8281300904484927, 0.809142139014307, 0.8158783091879533, 0.7924359034653552, 0.7940696189602392, 0.7826694657027633, 0.8094052484343301, 0.81263578285352, 0.8121516069550333, 0.5232292235074073, 0.4157746169377581, 0.5167229380701892, 0.6054658344866419, 0.480732226083057, 0.25550533912088746, 0.639504438192481, 0.587797007198567, 0.5458098397905505, 0.15127676794786327, 0.10805369504720952, 0.11861833343256367, 0.09480149721448727, 0.10696414861483516, 0.13011275699826197, 0.10892160242913929, 0.11325812338131513, 0.5675735233082808, 0.1172461795210975, 0.13560462533174578, 0.10328677969850197, 0.14932062023979997, 0.07525355351122798, 0.10346706156318142, 0.11056769923339471, 0.13534279344142885, 0.10220240342484554, 0.9874884345252553, 0.987076497859142, 0.9727638358286341, 0.9596030250877026, 0.9758081575752361, 0.9785613058888529, 0.9808347137496716, 0.9680237911414734, 0.9737834233205309, 0.7218213802678033, 0.6902887068735548, 0.5541728548080561, 0.6871900715042703, 0.665600724246121, 0.6857234167983395, 0.7319202981935898, 0.6521491053931482, 0.6512828470465013, 0.35295652370475217, 0.8377876748405236, 0.8151624681625734, 0.8014541795702187, 0.8287955222252088, 0.2062669804133408, 0.23090561006428767, 0.23626280408848865, 0.8387886790164583, 0.21251762764870696, 0.13003641081562656, 0.1272162566772449, 0.2882961759383573, 0.12486527601875153, 0.15617685514407387, 0.1893650805963123, 0.19791994440372274, 0.43882608264209655, 0.5931926833247593, 0.15968545833192838, 0.2205489700497616, 0.3555942100802747, 0.17395251045682603, 0.2974434575974284, 0.19406678721779025, 0.41010699162130526, 0.11817072501426551, 0.4829551789162281, 0.02562217577043835, 0.09726820647007595, 0.24163169434681409, 0.2501403594063407, 0.03446964053339141, 0.6453497235578068, 0.010831972747648577, 0.17439184052051293, 0.3973800293729056, 0.12062151751600536, 0.155069038522055, 0.2724201153155146, 0.1151917085359726, 0.09416102069958232, 0.24268225389700737, 0.4407850236802269, 0.21390984147432635, 0.2486558972419065, 0.03968725505116455, 0.05847899648466426, 0.10212993151910554, 0.10264743486642913, 0.07215455903614731, 0.13802808556159785, 0.26926462617306357, 0.07711691065685022, 0.22177671480317684, 0.28031811459406686, 0.14535935189567317, 0.40288771271592017, 0.4815321422270755, 0.28029727494824674, 0.31703470289237656, 0.1233599372555394, 0.21988908949152863, 0.7174908360576722, 0.7203512774237792, 0.5788711748050759, 0.6973240555804865, 0.6213704573872667, 0.5745476582841673, 0.7741678404481236, 0.7239732616748875, 0.6268962242044596, 0.17017291118429767, 0.11197783314018817, 0.09219735108804339, 0.1286042764706572, 0.07574290781049131, 0.103534876007083, 0.10684957639026127, 0.11501664989418026, 0.1426530491702751, 0.27589956493738577, 0.266993576606984, 0.22058685695584046, 0.45338696440845705, 0.28203905044928557, 0.6110501410675688, 0.25651060788272584, 0.26634821649928975, 0.19465549282132943, 0.44949180568073055, 0.5087257726842399, 0.49878830300515653, 0.4059173205677159, 0.3942613937582511, 0.44428674979993665, 0.45145822566963456, 0.3876115458659354, 0.27918480989866534, 0.3240554935723945, 0.3091945429476167, 0.24978230618980413, 0.35708738988691524, 0.3114645498740757, 0.2682752293432977, 0.4712575970752306, 0.3856599568599941, 0.3536124906056807, 0.22975228020789795, 0.178520946355458, 0.2466046428698181, 0.20708209074749961, 0.17115059830018786, 0.17690615688899347, 0.22377433847162687, 0.2078653323304327, 0.2253869256389156, 0.1751210893010282, 0.2202753975703512, 0.1973228275921357, 0.1918388430179352, 0.23540387258870743, 0.2028205749784473, 0.20028263281396663, 0.2083222692805874, 0.18230596381992314, 0.8728640402814808, 0.18301024853119185, 0.15486442652059418, 0.16907643713234688, 0.1995334420409186, 0.1986038967167345, 0.14225286935528525, 0.1696983328739674, 0.8914441765172306, 0.8625624666257388, 0.16856221506760316, 0.15433372489596786, 0.8099735041865646, 0.16688215299891485, 0.15461441814540033, 0.8302580995699356, 0.10388480189028582, 0.8443255717506697, 0.18762931097523639, 0.20852078712324662, 0.18891498278628827, 0.19683715005249025, 0.18156959394225847, 0.19331206218091346, 0.1835354271213362, 0.2923214251677333, 0.23146723835339822, 0.09392670910882284, 0.09579634964774741, 0.0764680177754089, 0.10016464822060078, 0.08130366007644474, 0.10614694237994249, 0.09902438328568786, 0.09356492206437139, 0.08658270891728825]}, "mutation_prompt": null}
{"id": "964a4f2c-80f8-4a96-93e1-8151b441971c", "solution": "import numpy as np\n\nclass EnhancedHybridPSOwithDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(40, budget // dim)\n        self.c1 = 1.5  # cognitive coefficient\n        self.c2 = 1.5  # social coefficient\n        self.w = 0.5   # inertia weight\n        self.f = 0.8   # DE mutation factor\n        self.cr = 0.9  # DE crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                score = func(self.population[i])\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best = self.population[i]\n\n            # Adjust inertia weight dynamically\n            self.w = 0.9 - 0.5 * (self.evaluations / self.budget)\n\n            # Update velocities and positions using PSO with neighborhood topology\n            neighborhood_size = max(1, self.population_size // 5)\n            for i in range(self.population_size):\n                neighbors = np.random.choice(self.population_size, neighborhood_size, replace=False)\n                local_best = min(neighbors, key=lambda idx: self.personal_best_scores[idx])\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i]\n                                      + self.c1 * r1 * (self.personal_best[i] - self.population[i])\n                                      + self.c2 * r2 * (self.personal_best[local_best] - self.population[i]))\n            self.population += self.velocities\n\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.f * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr:\n                        trial[j] = mutant[j]\n                score = func(trial)\n                self.evaluations += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best[i] = trial\n                    self.population[i] = trial\n                    if score < self.global_best_score:\n                        self.global_best_score = score\n                        self.global_best = trial\n        return self.global_best", "name": "EnhancedHybridPSOwithDE", "description": "Enhanced Hybrid PSO with Adaptive DE and Randomized Neighborhood Topology to improve convergence and diversity.", "configspace": "", "generation": 1, "fitness": 0.28776675886467223, "feedback": "", "error": "", "parent_id": "fe707835-69e8-4deb-afd5-a819244cfd1d", "metadata": {"aucs": [0.6128551451142663, 0.5705198304147778, 0.6327665213526307, 0.5713509411018873, 0.5856010998302393, 0.5780145584033315, 0.6033719479547511, 0.6069120127122709, 0.6006283676622903, 0.2542730801908816, 0.2767034277063549, 0.2569136830063159, 0.25582606615347436, 0.3070005031067823, 0.2680172677105306, 0.25100869266043324, 0.29367675675352645, 0.2876979233883139, 0.11409878745803548, 0.08192812510266723, 0.08982101312414781, 0.0891409597922711, 0.09647373423573702, 0.07952167278404865, 0.1194663476728014, 0.09260177930393532, 0.09972335927195619, 0.07540080189057463, 0.08447156966484348, 0.08138389473317142, 0.09240576041019088, 0.08055712697213291, 0.07934829182168701, 0.07680611572195462, 0.08940633733850478, 0.06633366659083673, 0.9802032028871382, 0.9857588396198711, 0.9748948010167209, 0.9885382571522116, 0.9810850978533843, 0.9796861227457355, 0.9786392068692599, 0.9747744755670762, 0.9888371308211158, 0.33636274733997185, 0.32044488874538657, 0.3146194737256155, 0.29895158000612054, 0.29394826591514933, 0.29102830100404375, 0.31200970899865943, 0.2871611825830639, 0.3068636055409213, 0.58555536059452, 0.6934592253999141, 0.5738422283371316, 0.7081508608477971, 0.6211938631918854, 0.626695682545158, 0.6041994568111647, 0.6089097387259634, 0.5775197608160778, 0.2808274478520487, 0.10950220835099389, 0.2362696762045361, 0.30648043235871525, 0.24537165470292366, 0.2255402255143547, 0.18379663732138574, 0.21510168668774876, 0.24580222462699874, 0.13678528664982803, 0.18380314027925848, 0.18891916871853853, 0.2018959990717042, 0.30907445898530517, 0.19193782110842916, 0.28868390692172385, 0.21028289391602284, 0.19059965686689073, 0.13689862904105243, 0.17665252077422555, 0.22548571705159215, 0.2895330195764161, 0.2667031085954106, 0.22217538516498925, 0.21943384696885582, 0.24987769876762478, 0.300666339387033, 0.33088657468228333, 0.27842236051378355, 0.3350541504203395, 0.31658127879075626, 0.34072484465252595, 0.32191676764733024, 0.32458286754866594, 0.3277524847955505, 0.29066186707852315, 0.08752622953111644, 0.05806629307156075, 0.08608638903813226, 0.07149855160138907, 0.0447332297029861, 0.11922485607638666, 0.15495150170951388, 0.09922015590537381, 0.09410774268959499, 0.21030212790300762, 0.1913825879643537, 0.2026441301556654, 0.18553742567940568, 0.2140621292053786, 0.21162414584222322, 0.21729436394060453, 0.21317123923625436, 0.2183491562315255, 0.5145801776119734, 0.5179037373466672, 0.5196781732688905, 0.48838004137709845, 0.4872578377677683, 0.4821516537574555, 0.5240928002878877, 0.4801463992969247, 0.5270552900301734, 0.08915402134284434, 0.0868370568996727, 0.0760881615074055, 0.10202726219771252, 0.10467818312863741, 0.08394602753411906, 0.08175468671718522, 0.07708746356752816, 0.11083379236271507, 0.1261445431402879, 0.12985128408343882, 0.1396792607950159, 0.14362782159253384, 0.1364647662512054, 0.12039811115903154, 0.13972782553301932, 0.12576625695006127, 0.12341502193561316, 0.32263684291881467, 0.2990363080976406, 0.32625773008470693, 0.34349867806483214, 0.3513330051699346, 0.32036971820103677, 0.32842267052050866, 0.3207872022907351, 0.32808247586625183, 0.2593043936012569, 0.3090339333612633, 0.29141379829495284, 0.26246338533849467, 0.2205553292824768, 0.2535961806916084, 0.27333874555108284, 0.27126460617931936, 0.25738107721268677, 0.18020494955918076, 0.19718284093475857, 0.18185310381634512, 0.1851517271362313, 0.1775280991092737, 0.16995681439155064, 0.1826984656722791, 0.18444093320224686, 0.1773726015089676, 0.16581657970767905, 0.19526406969215016, 0.20711879865371374, 0.1838154491039632, 0.18742041250165598, 0.19507621525179497, 0.19388572644078017, 0.1704856100797113, 0.17239539317517538, 0.5327275730286902, 0.40664582785170267, 0.15097586761176207, 0.5871461140143011, 0.18385229152270877, 0.464196816381819, 0.1766661680159468, 0.6130259150025028, 0.5617560807418727, 0.5756129440598972, 0.1936311137413247, 0.600838647677525, 0.19899260849007794, 0.1627592218167745, 0.5285721745223119, 0.20490367249940178, 0.18382139290087451, 0.20255478366024138, 0.1808033085478511, 0.1634891456398917, 0.1822104569846581, 0.1710056516700743, 0.16875267579712894, 0.20029193314656646, 0.18671348641818342, 0.19785274331705027, 0.18103862585583985, 0.06806733615281024, 0.06167291362757421, 0.06329159731010836, 0.07421769638550635, 0.0746113974785867, 0.07519048564503883, 0.0703048991533709, 0.08090541352507041, 0.06352292861377662]}, "mutation_prompt": null}
