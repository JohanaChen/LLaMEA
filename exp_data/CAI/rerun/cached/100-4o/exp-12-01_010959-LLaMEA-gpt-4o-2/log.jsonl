{"id": "5a1a2e3f-ac3d-4f18-9325-a9658f1186f9", "solution": "import numpy as np\n\nclass AdaptiveMultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_swarms = 5  # Number of swarms\n        self.particles_per_swarm = 10  # Particles per swarm\n        self.c1 = 2.05  # Cognitive component\n        self.c2 = 2.05  # Social component\n        self.w = 0.729  # Inertia weight\n        self.local_search_prob = 0.3  # Probability to perform local search\n\n    def __call__(self, func):\n        num_particles = self.num_swarms * self.particles_per_swarm\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(num_particles, np.inf)\n\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            scores = np.array([func(pos) for pos in positions])\n            evaluations += num_particles\n\n            # Update personal bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            # Update global best\n            min_index = np.argmin(personal_best_scores)\n            if personal_best_scores[min_index] < global_best_score:\n                global_best_score = personal_best_scores[min_index]\n                global_best_position = personal_best_positions[min_index]\n\n            # Adaptive swarm behavior\n            for swarm_idx in range(self.num_swarms):\n                start_idx = swarm_idx * self.particles_per_swarm\n                end_idx = start_idx + self.particles_per_swarm\n                swarm_positions = positions[start_idx:end_idx]\n                swarm_velocities = velocities[start_idx:end_idx]\n                swarm_personal_bests = personal_best_positions[start_idx:end_idx]\n\n                # Update velocities and positions\n                r1, r2 = np.random.rand(2, self.particles_per_swarm, self.dim)\n                swarm_velocities = (self.w * swarm_velocities + \n                                    self.c1 * r1 * (swarm_personal_bests - swarm_positions) +\n                                    self.c2 * r2 * (global_best_position - swarm_positions))\n                swarm_positions += swarm_velocities\n\n                # Apply bounds\n                np.clip(swarm_positions, self.lower_bound, self.upper_bound, out=swarm_positions)\n\n                # Randomized Local Search\n                if np.random.rand() < self.local_search_prob:\n                    local_search_idx = np.random.choice(range(self.particles_per_swarm))\n                    candidate_position = swarm_positions[local_search_idx] + np.random.uniform(-0.1, 0.1, self.dim)\n                    candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                    candidate_score = func(candidate_position)\n                    evaluations += 1\n\n                    if candidate_score < personal_best_scores[start_idx + local_search_idx]:\n                        personal_best_scores[start_idx + local_search_idx] = candidate_score\n                        personal_best_positions[start_idx + local_search_idx] = candidate_position\n                        if candidate_score < global_best_score:\n                            global_best_score = candidate_score\n                            global_best_position = candidate_position\n\n                # Update swarm positions and velocities\n                positions[start_idx:end_idx] = swarm_positions\n                velocities[start_idx:end_idx] = swarm_velocities\n\n        return global_best_position, global_best_score", "name": "AdaptiveMultiSwarmPSO", "description": "An Adaptive Multi-Swarm Particle Swarm Optimization with Randomized Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2044769991505726, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.44325830253276943, 0.4823992388904328, 0.44131398996828197, 0.5020291315213623, 0.5221408769700243, 0.49797891690191687, 0.51475462262661, 0.5060025790359929, 0.4600566763831262, 9.999999999998899e-05, 0.014139938776751126, 0.024443223956539084, 0.03139959337067666, 0.1344965173035405, 0.15953959836399756, 0.038359519475261394, 0.11531305707383976, 0.10725284265041246, 0.09058995685601712, 0.13233360075176004, 0.07288352641810836, 0.09901367389454863, 0.07105287799555504, 0.11293967568543573, 0.11605651216443036, 0.10619582919723325, 0.07375094951370498, 0.09057661691523555, 0.09505215119958843, 0.09169376373323279, 0.09576931942133193, 0.07990527606694797, 0.09807436424188787, 0.11364644293035653, 0.11936596054388049, 0.09327294877260395, 0.9849463006137537, 0.9874003084273657, 0.9891199862981999, 0.984669051991778, 0.9886320802115228, 0.9801781935860865, 0.9852311779776048, 0.9889830533908789, 0.9852325691551945, 0.23531810677846965, 0.22348459088710493, 0.153585977939103, 0.26371525366984483, 0.2407610662259263, 0.24656454051584165, 0.1232434438949136, 0.22863860695356608, 0.21288833662478213, 0.1703911172270669, 0.21688190287324582, 0.16868753354883337, 0.21029260551684303, 0.2625118028147574, 0.18963561165215825, 0.21264631426386849, 0.12610895505545616, 0.16479391511812247, 0.13703842753180018, 0.07837626570754441, 0.13836722312684402, 0.10353435676763034, 0.11516197830992514, 0.09214923627883487, 0.11773190263314715, 0.136654926348457, 0.1478059182109016, 0.14177095658296202, 0.13396458483585194, 0.1654257042139914, 0.1284583349416336, 0.155152710140962, 0.1412357726434229, 0.19897392284318927, 0.06934216330458853, 0.15062597579026682, 9.999999999998899e-05, 0.01212864350589693, 0.002274723120923805, 9.999999999998899e-05, 0.0001012460506565338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04564868693933399, 0.025675562423226772, 0.037882290447259215, 0.00894638879167109, 0.028470041481225006, 0.000495822391506584, 0.020434176877052623, 0.12570224792464302, 0.06633924940791225, 0.012005979061131988, 0.01633890016066908, 0.03546803696436018, 0.026637098922808633, 0.03751603449197627, 0.07824641549422162, 0.029346781691682366, 0.01907902265535799, 0.03335912144197195, 0.03514840019394616, 0.03560391167732846, 0.0751931256162921, 0.05137300035742043, 0.004463929507927622, 0.1052444249058333, 0.07164116334551185, 0.1202970645701471, 0.06918896943481301, 0.4126441238833226, 0.4265456027962753, 0.3859152240943021, 0.4366966922383976, 0.3855651513947793, 0.3821414339527367, 0.39865549354181606, 0.3934397663036575, 0.3751157996560599, 0.07878924312653457, 0.08712640426531248, 0.08474823577387491, 0.1123567110560314, 0.09547592675470495, 0.08090374245750098, 0.1376863326651785, 0.08581788186567263, 0.07131553288337855, 0.2797297853140781, 0.22061919391395046, 0.18269851281910665, 0.2175220832590702, 0.17987043294278082, 0.15522714232544077, 0.32203593007458353, 0.19199752031244643, 0.20161219750592418, 0.2257788128323257, 0.2582392008507346, 0.27167208037497237, 0.27723336490870565, 0.26554919785880615, 0.28448014171223146, 0.25156455038673364, 0.30645192900429863, 0.2742947664994463, 0.12694736099509285, 0.18242231726680103, 0.18731906980816904, 0.1333908260047577, 0.1431622842799597, 0.13142829463795935, 0.20870895251518373, 0.23840846359062573, 0.23021381525390328, 0.18863025862610217, 0.1384406666307776, 0.18220141663696543, 0.19111777372865213, 0.1642231264726195, 0.19772967041529055, 0.19556204668531207, 0.1845361267315554, 0.17971657097368754, 0.2081565081424217, 0.1763116024035597, 0.22171765232121643, 0.2149044821235666, 0.20925970379120862, 0.18704876029719397, 0.16873042155943507, 0.2790559656398094, 0.20529830998118503, 0.6106265907887942, 0.1672522521280072, 0.15365612343686985, 0.6199930135712014, 0.19524527390610524, 0.41164596744063164, 0.13962151768738895, 0.15929587003669732, 0.51026901416323, 0.34696676727685205, 0.20274995177895438, 0.2081343358860127, 0.40144589806164444, 0.16597765678283372, 0.14966346006591225, 0.21092711133651942, 0.2077617137446971, 0.20145098034416242, 0.18521042334952098, 0.18309343576086712, 0.22532246981116577, 0.18142081171855817, 0.1884045885219191, 0.17855185731223677, 0.1825954000008393, 0.18189082924205235, 0.17974220010215702, 0.07757860915740744, 0.07942776218590575, 0.07980137280314248, 0.07288928058037614, 0.07126165352204028, 0.09436945343117698, 0.07797943941636987, 0.07020030632153507, 0.06813454034936928]}, "mutation_prompt": null}
{"id": "39a2dba8-6b1b-45f8-8bb5-5464d4ee9bd0", "solution": "import numpy as np\n\nclass AdaptiveMultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_swarms = 5  # Number of swarms\n        self.particles_per_swarm = 10  # Particles per swarm\n        self.c1 = 2.05  # Cognitive component\n        self.c2 = 2.05  # Social component\n        self.w = 0.729  # Inertia weight\n        self.local_search_prob = 0.3  # Probability to perform local search\n\n    def __call__(self, func):\n        num_particles = self.num_swarms * self.particles_per_swarm\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(num_particles, np.inf)\n\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            scores = np.array([func(pos) for pos in positions])\n            evaluations += num_particles\n\n            # Update personal bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            # Update global best\n            min_index = np.argmin(personal_best_scores)\n            if personal_best_scores[min_index] < global_best_score:\n                global_best_score = personal_best_scores[min_index]\n                global_best_position = personal_best_positions[min_index]\n\n            # Adaptive swarm behavior\n            for swarm_idx in range(self.num_swarms):\n                start_idx = swarm_idx * self.particles_per_swarm\n                end_idx = start_idx + self.particles_per_swarm\n                swarm_positions = positions[start_idx:end_idx]\n                swarm_velocities = velocities[start_idx:end_idx]\n                swarm_personal_bests = personal_best_positions[start_idx:end_idx]\n\n                # Update velocities and positions\n                r1, r2 = np.random.rand(2, self.particles_per_swarm, self.dim)\n                swarm_velocities = (self.w * swarm_velocities + \n                                    self.c1 * r1 * (swarm_personal_bests - swarm_positions) +\n                                    self.c2 * r2 * (global_best_position - swarm_positions))\n                swarm_positions += swarm_velocities\n\n                # Apply bounds\n                np.clip(swarm_positions, self.lower_bound, self.upper_bound, out=swarm_positions)\n\n                # Randomized Local Search\n                if np.random.rand() < self.local_search_prob:\n                    local_search_idx = np.random.choice(range(self.particles_per_swarm))\n                    candidate_position = swarm_positions[local_search_idx] + np.random.uniform(-0.1, 0.1, self.dim)\n                    candidate_position = np.clip(candidate_position, self.lower_bound, self.upper_bound)\n                    candidate_score = func(candidate_position)\n                    evaluations += 1\n\n                    if candidate_score < personal_best_scores[start_idx + local_search_idx]:\n                        personal_best_scores[start_idx + local_search_idx] = candidate_score\n                        personal_best_positions[start_idx + local_search_idx] = candidate_position\n                        if candidate_score < global_best_score:\n                            global_best_score = candidate_score\n                            global_best_position = candidate_position\n\n                # Update swarm positions and velocities\n                positions[start_idx:end_idx] = swarm_positions\n                velocities[start_idx:end_idx] = swarm_velocities\n\n        return global_best_position, global_best_score", "name": "AdaptiveMultiSwarmPSO", "description": "An Adaptive Multi-Swarm Particle Swarm Optimization with Randomized Local Search for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5a1a2e3f-ac3d-4f18-9325-a9658f1186f9", "metadata": {"aucs": [0.44325830253276943, 0.4823992388904328, 0.44131398996828197, 0.5020291315213623, 0.5221408769700243, 0.49797891690191687, 0.51475462262661, 0.5060025790359929, 0.4600566763831262, 9.999999999998899e-05, 0.014139938776751126, 0.024443223956539084, 0.03139959337067666, 0.1344965173035405, 0.15953959836399756, 0.038359519475261394, 0.11531305707383976, 0.10725284265041246, 0.09058995685601712, 0.13233360075176004, 0.07288352641810836, 0.09901367389454863, 0.07105287799555504, 0.11293967568543573, 0.11605651216443036, 0.10619582919723325, 0.07375094951370498, 0.09057661691523555, 0.09505215119958843, 0.09169376373323279, 0.09576931942133193, 0.07990527606694797, 0.09807436424188787, 0.11364644293035653, 0.11936596054388049, 0.09327294877260395, 0.9849463006137537, 0.9874003084273657, 0.9891199862981999, 0.984669051991778, 0.9886320802115228, 0.9801781935860865, 0.9852311779776048, 0.9889830533908789, 0.9852325691551945, 0.23531810677846965, 0.22348459088710493, 0.153585977939103, 0.26371525366984483, 0.2407610662259263, 0.24656454051584165, 0.1232434438949136, 0.22863860695356608, 0.21288833662478213, 0.1703911172270669, 0.21688190287324582, 0.16868753354883337, 0.21029260551684303, 0.2625118028147574, 0.18963561165215825, 0.21264631426386849, 0.12610895505545616, 0.16479391511812247, 0.13703842753180018, 0.07837626570754441, 0.13836722312684402, 0.10353435676763034, 0.11516197830992514, 0.09214923627883487, 0.11773190263314715, 0.136654926348457, 0.1478059182109016, 0.14177095658296202, 0.13396458483585194, 0.1654257042139914, 0.1284583349416336, 0.155152710140962, 0.1412357726434229, 0.19897392284318927, 0.06934216330458853, 0.15062597579026682, 9.999999999998899e-05, 0.01212864350589693, 0.002274723120923805, 9.999999999998899e-05, 0.0001012460506565338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04564868693933399, 0.025675562423226772, 0.037882290447259215, 0.00894638879167109, 0.028470041481225006, 0.000495822391506584, 0.020434176877052623, 0.12570224792464302, 0.06633924940791225, 0.012005979061131988, 0.01633890016066908, 0.03546803696436018, 0.026637098922808633, 0.03751603449197627, 0.07824641549422162, 0.029346781691682366, 0.01907902265535799, 0.03335912144197195, 0.03514840019394616, 0.03560391167732846, 0.0751931256162921, 0.05137300035742043, 0.004463929507927622, 0.1052444249058333, 0.07164116334551185, 0.1202970645701471, 0.06918896943481301, 0.4126441238833226, 0.4265456027962753, 0.3859152240943021, 0.4366966922383976, 0.3855651513947793, 0.3821414339527367, 0.39865549354181606, 0.3934397663036575, 0.3751157996560599, 0.07878924312653457, 0.08712640426531248, 0.08474823577387491, 0.1123567110560314, 0.09547592675470495, 0.08090374245750098, 0.1376863326651785, 0.08581788186567263, 0.07131553288337855, 0.2797297853140781, 0.22061919391395046, 0.18269851281910665, 0.2175220832590702, 0.17987043294278082, 0.15522714232544077, 0.32203593007458353, 0.19199752031244643, 0.20161219750592418, 0.2257788128323257, 0.2582392008507346, 0.27167208037497237, 0.27723336490870565, 0.26554919785880615, 0.28448014171223146, 0.25156455038673364, 0.30645192900429863, 0.2742947664994463, 0.12694736099509285, 0.18242231726680103, 0.18731906980816904, 0.1333908260047577, 0.1431622842799597, 0.13142829463795935, 0.20870895251518373, 0.23840846359062573, 0.23021381525390328, 0.18863025862610217, 0.1384406666307776, 0.18220141663696543, 0.19111777372865213, 0.1642231264726195, 0.19772967041529055, 0.19556204668531207, 0.1845361267315554, 0.17971657097368754, 0.2081565081424217, 0.1763116024035597, 0.22171765232121643, 0.2149044821235666, 0.20925970379120862, 0.18704876029719397, 0.16873042155943507, 0.2790559656398094, 0.20529830998118503, 0.6106265907887942, 0.1672522521280072, 0.15365612343686985, 0.6199930135712014, 0.19524527390610524, 0.41164596744063164, 0.13962151768738895, 0.15929587003669732, 0.51026901416323, 0.34696676727685205, 0.20274995177895438, 0.2081343358860127, 0.40144589806164444, 0.16597765678283372, 0.14966346006591225, 0.21092711133651942, 0.2077617137446971, 0.20145098034416242, 0.18521042334952098, 0.18309343576086712, 0.22532246981116577, 0.18142081171855817, 0.1884045885219191, 0.17855185731223677, 0.1825954000008393, 0.18189082924205235, 0.17974220010215702, 0.07757860915740744, 0.07942776218590575, 0.07980137280314248, 0.07288928058037614, 0.07126165352204028, 0.09436945343117698, 0.07797943941636987, 0.07020030632153507, 0.06813454034936928]}, "mutation_prompt": null}
