{"id": "6c68fb72-d389-4cb5-9c28-a56efdb8f5a4", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Evaluate fitness\n            fitness = np.array([func(ind) for ind in self.population])\n            self.eval_count += self.population_size\n            \n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.population[i]\n            \n            if np.min(fitness) < self.global_best_fitness:\n                self.global_best_fitness = np.min(fitness)\n                self.global_best = self.population[np.argmin(fitness)]\n            \n            # PSO update\n            r1, r2 = np.random.uniform(size=(2, self.population_size, self.dim))\n            self.velocities = (\n                self.w * self.velocities +\n                self.c1 * r1 * (self.personal_best - self.population) +\n                self.c2 * r2 * (self.global_best - self.population)\n            )\n            self.population += self.velocities\n            self.population = np.clip(self.population, self.lower_bound, self.upper_bound)\n            \n            # DE mutation and crossover\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.eval_count += 1\n                \n                if trial_fitness < fitness[i]:\n                    self.population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < self.personal_best_fitness[i]:\n                        self.personal_best_fitness[i] = trial_fitness\n                        self.personal_best[i] = trial\n\n                if trial_fitness < self.global_best_fitness:\n                    self.global_best_fitness = trial_fitness\n                    self.global_best = trial\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best, self.global_best_fitness", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Evolution to balance exploration and exploitation dynamically.", "configspace": "", "generation": 0, "fitness": 0.19076015129516785, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5902290996914157, 0.4785386818670011, 0.558459215024792, 0.42212275124701804, 0.47680449288784055, 0.599130740662311, 0.5761085210193191, 0.18219336827787325, 0.4367097691122056, 9.999999999998899e-05, 0.03240585410911068, 0.13236574939830548, 0.2168410099094289, 0.04102779337023099, 0.05618467316495679, 0.28978520797042306, 0.25839802403594114, 0.3095029953759145, 0.07044054526663202, 0.10686322089202172, 0.09624549703357621, 0.08879675706676138, 0.06301160229564451, 0.09095088858568945, 0.09431717084308822, 0.09419216734926306, 0.06078309980993368, 0.04862885486974988, 0.12085355037977663, 0.0580466153929754, 0.08793667760783574, 0.08916009498310828, 0.08161096424578795, 0.0730014686049919, 0.0646520349139228, 0.1048790707251499, 0.9820568991097823, 0.9886897830418419, 0.9815818628302294, 0.9749564278278807, 0.974588261170733, 0.9748506717166513, 0.9812215270709742, 0.9819645376728411, 0.9742950972618604, 0.16281291460752922, 0.09562694212853606, 0.05232952714334371, 0.14555678596897303, 0.1333361902970488, 0.17185974738708953, 0.11288421827788264, 0.14847297587697572, 0.08795292383615083, 0.22019141165402334, 0.17054413501534726, 0.16933157775870278, 0.191056042866942, 0.23784132870442332, 0.18972190148061674, 0.1762900512422646, 0.20535865001827747, 0.1964349034521331, 0.11338929915438622, 0.06317179285523256, 0.1510688681320056, 0.0744099180990464, 0.1462615779214479, 0.1116002189975841, 0.12299133024578801, 0.11745954570499562, 0.12697751153294068, 0.0895627645488889, 0.17812336936349127, 0.19578208057799007, 0.17237754424625762, 0.09221238766256956, 0.10603206932238884, 0.16369646848495245, 0.02851708156906152, 0.1488996397861443, 9.999999999998899e-05, 9.999999999998899e-05, 0.002158941895938571, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052566866282447, 0.007810413796094151, 0.024312363326142616, 0.05239060979153021, 0.030285932811992988, 0.020531566691441516, 0.022714401203884016, 0.033963109532316405, 0.047546247314401935, 0.021720743724981006, 9.999999999998899e-05, 0.031239645852506714, 0.04995594290142069, 0.05230578907714212, 0.039910419789350615, 0.06400629708654781, 0.05263748204095231, 0.057754478570679946, 0.11879066269172966, 0.033544024118317806, 9.999999999998899e-05, 0.005814688999379758, 0.054828218010742225, 0.115261759569242, 0.04838654068465165, 0.061723497143318706, 0.07207097105550764, 0.2845210475667398, 0.3067269651007096, 0.3532870700638382, 0.45273336077629767, 0.37781819990824106, 0.20703165781536426, 0.39201900234573106, 0.38735819149497464, 0.416333430335147, 0.05724257673573174, 0.061467800678466133, 0.06912895897501148, 0.06562587963369337, 0.09297858614384291, 0.06206850622985183, 0.05135400708061988, 0.0720626544392835, 0.07260963094102513, 0.2010478390725009, 0.13499805943265197, 0.13653269205157248, 0.14942977878614616, 0.14702072787525466, 0.23993664660500835, 0.22071917094870297, 0.13274697512736566, 0.1662118889604648, 0.23364882541419818, 0.22531986793351322, 0.21350743500621205, 0.27656504391465875, 0.23311579764393886, 0.17002649408598702, 0.3093505264345736, 0.2671684167871362, 0.2521216765961475, 0.14960203378415915, 0.15717670856468902, 0.17894175312479532, 0.16294645645806016, 0.15055924855175218, 0.16936789582757994, 0.1888707564668386, 0.21103515238685688, 0.2032327751315942, 0.165335212336173, 0.1441751805976772, 0.18258679040162573, 0.18873982776966725, 0.1327707725779146, 0.1761955429867208, 0.1819195785047233, 0.17184574710073686, 0.1768632010942538, 0.1633420369838221, 0.21582068797086817, 0.16320754893406697, 0.18980312452886172, 0.18334574579886653, 0.18020815160718207, 0.1728237046265947, 0.17118599091880027, 0.18588041691068757, 0.5311173742526825, 0.16623654964648338, 0.15331582784308972, 0.1662763217662928, 0.19548398625985397, 0.16787794922974753, 0.5347722538508632, 0.16419751848271513, 0.598529795236768, 0.263705416322196, 0.20405662089749443, 0.15370119770769963, 0.2180984337413251, 0.2856317284168327, 0.22554926299388345, 0.1026389433535565, 0.19682522316774853, 0.2035479584371619, 0.18238500218795273, 0.18255143841972377, 0.17555451566492553, 0.17649855570272233, 0.18137635474576974, 0.18913958281710053, 0.17900117146780214, 0.1942151887805117, 0.17751412773660957, 0.06236716016915722, 0.0716862305541548, 0.07053839999197475, 0.06370590754075034, 0.07760704910361982, 0.06807145656549562, 0.06323245678122458, 0.07561151612229788, 0.061106167335013506]}, "mutation_prompt": null}
{"id": "6ea7d8d8-8cc9-4bf5-ac39-92ddd5c522a1", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.5\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Evaluate fitness\n            fitness = np.array([func(ind) for ind in self.population])\n            self.eval_count += self.population_size\n            \n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.population[i]\n            \n            if np.min(fitness) < self.global_best_fitness:\n                self.global_best_fitness = np.min(fitness)\n                self.global_best = self.population[np.argmin(fitness)]\n            \n            # PSO update\n            r1, r2 = np.random.uniform(size=(2, self.population_size, self.dim))\n            self.velocities = (\n                self.w * self.velocities +\n                self.c1 * r1 * (self.personal_best - self.population) +\n                self.c2 * r2 * (self.global_best - self.population)\n            )\n            self.population += self.velocities\n            self.population = np.clip(self.population, self.lower_bound, self.upper_bound)\n            \n            # DE mutation and crossover\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.eval_count += 1\n                \n                if trial_fitness < fitness[i]:\n                    self.population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < self.personal_best_fitness[i]:\n                        self.personal_best_fitness[i] = trial_fitness\n                        self.personal_best[i] = trial\n\n                if trial_fitness < self.global_best_fitness:\n                    self.global_best_fitness = trial_fitness\n                    self.global_best = trial\n\n                if self.eval_count >= self.budget:\n                    break\n\n        return self.global_best, self.global_best_fitness", "name": "HybridPSO_DE", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Evolution to balance exploration and exploitation dynamically.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c68fb72-d389-4cb5-9c28-a56efdb8f5a4", "metadata": {"aucs": [0.5902290996914157, 0.4785386818670011, 0.558459215024792, 0.42212275124701804, 0.47680449288784055, 0.599130740662311, 0.5761085210193191, 0.18219336827787325, 0.4367097691122056, 9.999999999998899e-05, 0.03240585410911068, 0.13236574939830548, 0.2168410099094289, 0.04102779337023099, 0.05618467316495679, 0.28978520797042306, 0.25839802403594114, 0.3095029953759145, 0.07044054526663202, 0.10686322089202172, 0.09624549703357621, 0.08879675706676138, 0.06301160229564451, 0.09095088858568945, 0.09431717084308822, 0.09419216734926306, 0.06078309980993368, 0.04862885486974988, 0.12085355037977663, 0.0580466153929754, 0.08793667760783574, 0.08916009498310828, 0.08161096424578795, 0.0730014686049919, 0.0646520349139228, 0.1048790707251499, 0.9820568991097823, 0.9886897830418419, 0.9815818628302294, 0.9749564278278807, 0.974588261170733, 0.9748506717166513, 0.9812215270709742, 0.9819645376728411, 0.9742950972618604, 0.16281291460752922, 0.09562694212853606, 0.05232952714334371, 0.14555678596897303, 0.1333361902970488, 0.17185974738708953, 0.11288421827788264, 0.14847297587697572, 0.08795292383615083, 0.22019141165402334, 0.17054413501534726, 0.16933157775870278, 0.191056042866942, 0.23784132870442332, 0.18972190148061674, 0.1762900512422646, 0.20535865001827747, 0.1964349034521331, 0.11338929915438622, 0.06317179285523256, 0.1510688681320056, 0.0744099180990464, 0.1462615779214479, 0.1116002189975841, 0.12299133024578801, 0.11745954570499562, 0.12697751153294068, 0.0895627645488889, 0.17812336936349127, 0.19578208057799007, 0.17237754424625762, 0.09221238766256956, 0.10603206932238884, 0.16369646848495245, 0.02851708156906152, 0.1488996397861443, 9.999999999998899e-05, 9.999999999998899e-05, 0.002158941895938571, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052566866282447, 0.007810413796094151, 0.024312363326142616, 0.05239060979153021, 0.030285932811992988, 0.020531566691441516, 0.022714401203884016, 0.033963109532316405, 0.047546247314401935, 0.021720743724981006, 9.999999999998899e-05, 0.031239645852506714, 0.04995594290142069, 0.05230578907714212, 0.039910419789350615, 0.06400629708654781, 0.05263748204095231, 0.057754478570679946, 0.11879066269172966, 0.033544024118317806, 9.999999999998899e-05, 0.005814688999379758, 0.054828218010742225, 0.115261759569242, 0.04838654068465165, 0.061723497143318706, 0.07207097105550764, 0.2845210475667398, 0.3067269651007096, 0.3532870700638382, 0.45273336077629767, 0.37781819990824106, 0.20703165781536426, 0.39201900234573106, 0.38735819149497464, 0.416333430335147, 0.05724257673573174, 0.061467800678466133, 0.06912895897501148, 0.06562587963369337, 0.09297858614384291, 0.06206850622985183, 0.05135400708061988, 0.0720626544392835, 0.07260963094102513, 0.2010478390725009, 0.13499805943265197, 0.13653269205157248, 0.14942977878614616, 0.14702072787525466, 0.23993664660500835, 0.22071917094870297, 0.13274697512736566, 0.1662118889604648, 0.23364882541419818, 0.22531986793351322, 0.21350743500621205, 0.27656504391465875, 0.23311579764393886, 0.17002649408598702, 0.3093505264345736, 0.2671684167871362, 0.2521216765961475, 0.14960203378415915, 0.15717670856468902, 0.17894175312479532, 0.16294645645806016, 0.15055924855175218, 0.16936789582757994, 0.1888707564668386, 0.21103515238685688, 0.2032327751315942, 0.165335212336173, 0.1441751805976772, 0.18258679040162573, 0.18873982776966725, 0.1327707725779146, 0.1761955429867208, 0.1819195785047233, 0.17184574710073686, 0.1768632010942538, 0.1633420369838221, 0.21582068797086817, 0.16320754893406697, 0.18980312452886172, 0.18334574579886653, 0.18020815160718207, 0.1728237046265947, 0.17118599091880027, 0.18588041691068757, 0.5311173742526825, 0.16623654964648338, 0.15331582784308972, 0.1662763217662928, 0.19548398625985397, 0.16787794922974753, 0.5347722538508632, 0.16419751848271513, 0.598529795236768, 0.263705416322196, 0.20405662089749443, 0.15370119770769963, 0.2180984337413251, 0.2856317284168327, 0.22554926299388345, 0.1026389433535565, 0.19682522316774853, 0.2035479584371619, 0.18238500218795273, 0.18255143841972377, 0.17555451566492553, 0.17649855570272233, 0.18137635474576974, 0.18913958281710053, 0.17900117146780214, 0.1942151887805117, 0.17751412773660957, 0.06236716016915722, 0.0716862305541548, 0.07053839999197475, 0.06370590754075034, 0.07760704910361982, 0.06807145656549562, 0.06323245678122458, 0.07561151612229788, 0.061106167335013506]}, "mutation_prompt": null}
