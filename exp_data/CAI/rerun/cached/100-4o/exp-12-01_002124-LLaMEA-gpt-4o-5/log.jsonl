{"id": "7f4e493f-5c68-4a0b-9456-5777c45c828a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.particles = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.global_best_position = None\n        self.personal_best_values = np.full(self.pop_size, float('inf'))\n        self.global_best_value = float('inf')\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        evaluations = 0\n\n        # Evaluate initial population\n        values = np.apply_along_axis(func, 1, self.particles)\n        evaluations += len(values)\n\n        # Update personal and global bests\n        for i in range(self.pop_size):\n            if values[i] < self.personal_best_values[i]:\n                self.personal_best_values[i] = values[i]\n                self.personal_best_positions[i] = self.particles[i]\n            if values[i] < self.global_best_value:\n                self.global_best_value = values[i]\n                self.global_best_position = self.particles[i]\n\n        # Optimization loop\n        while evaluations < self.budget:\n            # Particle Swarm Optimization Update\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive = r1 * (self.personal_best_positions[i] - self.particles[i])\n                social = r2 * (self.global_best_position - self.particles[i])\n                self.velocities[i] = 0.5 * self.velocities[i] + cognitive + social\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5, 5)\n\n            # Differential Evolution Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                trial_vector = np.copy(self.particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == j_rand:\n                        trial_vector[j] = self.particles[a][j] + self.f * (self.particles[b][j] - self.particles[c][j])\n                trial_vector = np.clip(trial_vector, -5, 5)\n                trial_value = func(trial_vector)\n                evaluations += 1\n                if trial_value < values[i]:\n                    self.particles[i] = trial_vector\n                    values[i] = trial_value\n                    if trial_value < self.personal_best_values[i]:\n                        self.personal_best_values[i] = trial_value\n                        self.personal_best_positions[i] = trial_vector\n                    if trial_value < self.global_best_value:\n                        self.global_best_value = trial_value\n                        self.global_best_position = trial_vector\n                if evaluations >= self.budget:\n                    break\n        return self.global_best_position", "name": "HybridPSODE", "description": "A hybrid optimization algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation in continuous spaces.", "configspace": "", "generation": 0, "fitness": 0.2311163416428125, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.9525399008220283, 0.9632034923514465, 0.9608731955668834, 0.957272165333574, 0.9661635702411642, 0.9485158331909753, 0.18360337281013284, 0.18944188044625776, 0.9657203336732914, 0.9266963180153861, 0.05698214316734629, 9.999999999998899e-05, 0.21623633694045863, 0.052068164190195554, 9.999999999998899e-05, 9.999999999998899e-05, 0.062149472696810704, 0.1728316218968592, 0.13762968679278909, 0.12803161095278282, 0.12695924442300532, 0.1347684425916641, 0.09450690567941566, 0.09055834112882899, 0.11308228286447752, 0.09428588131804228, 0.10765955841178965, 0.11335202710104275, 0.09039488647238325, 0.08139336357480531, 0.06146165599190512, 0.11998035048548483, 0.06131878561237103, 0.08676642538355483, 0.09413916940095624, 0.08685773889612824, 0.9883717666663242, 0.9846509318463649, 0.9892193234106245, 0.9866410724161702, 0.9838795020562564, 0.9787720227787666, 0.9790607560488096, 0.9886487843027191, 0.9825866866788925, 0.08175360259794018, 0.2069923919378267, 0.1669345971351075, 0.1531983798524621, 0.22351339010460192, 0.15330614425406452, 0.11705765767061971, 0.11174902520799501, 0.08889145150979438, 0.2322631479532029, 0.12218858371410557, 0.13245846998195343, 0.1986582780128905, 0.17724193787241238, 0.19870077571801803, 0.10846071678471092, 0.13793692490563336, 0.23877719486107285, 0.12140730925071985, 0.14149137440546766, 0.14801832534981352, 0.15963970997000365, 0.13445326887281406, 0.15747706334487155, 0.17354787634310564, 0.13552943928220051, 0.2048400506493101, 0.19709645647935337, 0.16319058793008612, 0.109196268261196, 0.14455259950615817, 0.14206677940754509, 0.14131340644736046, 0.20445436576421938, 9.999999999998899e-05, 0.13850371935096462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010569414666254828, 0.05885187501456879, 0.027429056718120792, 0.02280659589626144, 0.06297632871127679, 0.016532695971834266, 0.0959635487023397, 0.05989901701096678, 0.10630365630508021, 0.046573109856986594, 0.13794393135519567, 0.12402189060215874, 0.2808446301383396, 0.09804626068671862, 0.1217746614007712, 0.09713274062526567, 0.29409144046113267, 0.09713003970580736, 0.08065980834227138, 0.3075895714015452, 0.2506009776631276, 0.05184757352752567, 0.15592535970591104, 0.09627824799431417, 0.24147412298631254, 0.2663839401765036, 0.059487441290516974, 0.08658799130050066, 0.25454565741723156, 0.4555191491493292, 0.48624242819802543, 0.3616232874831967, 0.4749433453319445, 0.4604532095405559, 0.44689374947898486, 0.5815820925733584, 0.49841719070115353, 0.1016762881058001, 0.11936390048161816, 0.0785699474736804, 0.14911565705619656, 0.125766392147991, 0.08727498006440237, 0.16547261648252354, 0.1485500984694592, 0.14938090836383022, 0.20717083102929068, 0.3326507597135041, 0.22451714929859323, 0.2201231852876041, 0.20435275926702356, 0.522355280334603, 0.2919127442369299, 0.27258178148985057, 0.20828751728844674, 0.17763874576609484, 0.2518040910597139, 0.22684659513484362, 0.2898230701379564, 0.2959800114123926, 0.48189951000940545, 0.24849607683993924, 0.3111117177112115, 0.1275862689767291, 0.1128546900956644, 0.17672843985294462, 0.26033426380061775, 0.26138193478036786, 0.24044708940986415, 0.2584514171477136, 0.24189616894269805, 0.21137649990764962, 0.11019575865142595, 0.2338772085085774, 0.2041856019953392, 0.21687332944289273, 0.20104895382722265, 0.24573669060204606, 0.24927245885182236, 0.20704417037983658, 0.22275850364656846, 0.20644197529400188, 0.17826419972142682, 0.19234044502587844, 0.1800266389782913, 0.18216776466343265, 0.1958745495903147, 0.21257108158554694, 0.1801609153037782, 0.18246649030434614, 0.19451700729823718, 0.6422735253012599, 0.1888008659872683, 0.15352757488754576, 0.17342083273449893, 0.20201564137700356, 0.1270471207002153, 0.10012970428001067, 0.1706632167604536, 0.16475993418105606, 0.1571838570989772, 0.18114536687017557, 0.0735060293706643, 0.2124673266229814, 0.2274340251054061, 0.21332810389433865, 0.10555042242812307, 0.43787067364299437, 0.19074894090614547, 0.19515159802596904, 0.20242932392003432, 0.18638062760693397, 0.20008986240082993, 0.18041260643571355, 0.1799620148743143, 0.19108120173585452, 0.20954437244888535, 0.18769884040868323, 0.07519549687885285, 0.09119850688765385, 0.07138742428135214, 0.09892685351758213, 0.08989801687899723, 0.10340222224164086, 0.06633390648572002, 0.0923157444526701, 0.09496256855840235]}, "mutation_prompt": null}
{"id": "5657c36e-b3ad-432f-af11-bee154e2317f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20\n        self.particles = np.random.uniform(-5, 5, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.global_best_position = None\n        self.personal_best_values = np.full(self.pop_size, float('inf'))\n        self.global_best_value = float('inf')\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        evaluations = 0\n\n        # Evaluate initial population\n        values = np.apply_along_axis(func, 1, self.particles)\n        evaluations += len(values)\n\n        # Update personal and global bests\n        for i in range(self.pop_size):\n            if values[i] < self.personal_best_values[i]:\n                self.personal_best_values[i] = values[i]\n                self.personal_best_positions[i] = self.particles[i]\n            if values[i] < self.global_best_value:\n                self.global_best_value = values[i]\n                self.global_best_position = self.particles[i]\n\n        # Optimization loop\n        while evaluations < self.budget:\n            # Particle Swarm Optimization Update\n            for i in range(self.pop_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                cognitive = r1 * (self.personal_best_positions[i] - self.particles[i])\n                social = r2 * (self.global_best_position - self.particles[i])\n                self.velocities[i] = 0.5 * self.velocities[i] + cognitive + social\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5, 5)\n\n            # Differential Evolution Update\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                trial_vector = np.copy(self.particles[i])\n                j_rand = np.random.randint(self.dim)\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == j_rand:\n                        trial_vector[j] = self.particles[a][j] + self.f * (self.particles[b][j] - self.particles[c][j])\n                trial_vector = np.clip(trial_vector, -5, 5)\n                trial_value = func(trial_vector)\n                evaluations += 1\n                if trial_value < values[i]:\n                    self.particles[i] = trial_vector\n                    values[i] = trial_value\n                    if trial_value < self.personal_best_values[i]:\n                        self.personal_best_values[i] = trial_value\n                        self.personal_best_positions[i] = trial_vector\n                    if trial_value < self.global_best_value:\n                        self.global_best_value = trial_value\n                        self.global_best_position = trial_vector\n                if evaluations >= self.budget:\n                    break\n        return self.global_best_position", "name": "HybridPSODE", "description": "A hybrid optimization algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation in continuous spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f4e493f-5c68-4a0b-9456-5777c45c828a", "metadata": {"aucs": [0.9525399008220283, 0.9632034923514465, 0.9608731955668834, 0.957272165333574, 0.9661635702411642, 0.9485158331909753, 0.18360337281013284, 0.18944188044625776, 0.9657203336732914, 0.9266963180153861, 0.05698214316734629, 9.999999999998899e-05, 0.21623633694045863, 0.052068164190195554, 9.999999999998899e-05, 9.999999999998899e-05, 0.062149472696810704, 0.1728316218968592, 0.13762968679278909, 0.12803161095278282, 0.12695924442300532, 0.1347684425916641, 0.09450690567941566, 0.09055834112882899, 0.11308228286447752, 0.09428588131804228, 0.10765955841178965, 0.11335202710104275, 0.09039488647238325, 0.08139336357480531, 0.06146165599190512, 0.11998035048548483, 0.06131878561237103, 0.08676642538355483, 0.09413916940095624, 0.08685773889612824, 0.9883717666663242, 0.9846509318463649, 0.9892193234106245, 0.9866410724161702, 0.9838795020562564, 0.9787720227787666, 0.9790607560488096, 0.9886487843027191, 0.9825866866788925, 0.08175360259794018, 0.2069923919378267, 0.1669345971351075, 0.1531983798524621, 0.22351339010460192, 0.15330614425406452, 0.11705765767061971, 0.11174902520799501, 0.08889145150979438, 0.2322631479532029, 0.12218858371410557, 0.13245846998195343, 0.1986582780128905, 0.17724193787241238, 0.19870077571801803, 0.10846071678471092, 0.13793692490563336, 0.23877719486107285, 0.12140730925071985, 0.14149137440546766, 0.14801832534981352, 0.15963970997000365, 0.13445326887281406, 0.15747706334487155, 0.17354787634310564, 0.13552943928220051, 0.2048400506493101, 0.19709645647935337, 0.16319058793008612, 0.109196268261196, 0.14455259950615817, 0.14206677940754509, 0.14131340644736046, 0.20445436576421938, 9.999999999998899e-05, 0.13850371935096462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010569414666254828, 0.05885187501456879, 0.027429056718120792, 0.02280659589626144, 0.06297632871127679, 0.016532695971834266, 0.0959635487023397, 0.05989901701096678, 0.10630365630508021, 0.046573109856986594, 0.13794393135519567, 0.12402189060215874, 0.2808446301383396, 0.09804626068671862, 0.1217746614007712, 0.09713274062526567, 0.29409144046113267, 0.09713003970580736, 0.08065980834227138, 0.3075895714015452, 0.2506009776631276, 0.05184757352752567, 0.15592535970591104, 0.09627824799431417, 0.24147412298631254, 0.2663839401765036, 0.059487441290516974, 0.08658799130050066, 0.25454565741723156, 0.4555191491493292, 0.48624242819802543, 0.3616232874831967, 0.4749433453319445, 0.4604532095405559, 0.44689374947898486, 0.5815820925733584, 0.49841719070115353, 0.1016762881058001, 0.11936390048161816, 0.0785699474736804, 0.14911565705619656, 0.125766392147991, 0.08727498006440237, 0.16547261648252354, 0.1485500984694592, 0.14938090836383022, 0.20717083102929068, 0.3326507597135041, 0.22451714929859323, 0.2201231852876041, 0.20435275926702356, 0.522355280334603, 0.2919127442369299, 0.27258178148985057, 0.20828751728844674, 0.17763874576609484, 0.2518040910597139, 0.22684659513484362, 0.2898230701379564, 0.2959800114123926, 0.48189951000940545, 0.24849607683993924, 0.3111117177112115, 0.1275862689767291, 0.1128546900956644, 0.17672843985294462, 0.26033426380061775, 0.26138193478036786, 0.24044708940986415, 0.2584514171477136, 0.24189616894269805, 0.21137649990764962, 0.11019575865142595, 0.2338772085085774, 0.2041856019953392, 0.21687332944289273, 0.20104895382722265, 0.24573669060204606, 0.24927245885182236, 0.20704417037983658, 0.22275850364656846, 0.20644197529400188, 0.17826419972142682, 0.19234044502587844, 0.1800266389782913, 0.18216776466343265, 0.1958745495903147, 0.21257108158554694, 0.1801609153037782, 0.18246649030434614, 0.19451700729823718, 0.6422735253012599, 0.1888008659872683, 0.15352757488754576, 0.17342083273449893, 0.20201564137700356, 0.1270471207002153, 0.10012970428001067, 0.1706632167604536, 0.16475993418105606, 0.1571838570989772, 0.18114536687017557, 0.0735060293706643, 0.2124673266229814, 0.2274340251054061, 0.21332810389433865, 0.10555042242812307, 0.43787067364299437, 0.19074894090614547, 0.19515159802596904, 0.20242932392003432, 0.18638062760693397, 0.20008986240082993, 0.18041260643571355, 0.1799620148743143, 0.19108120173585452, 0.20954437244888535, 0.18769884040868323, 0.07519549687885285, 0.09119850688765385, 0.07138742428135214, 0.09892685351758213, 0.08989801687899723, 0.10340222224164086, 0.06633390648572002, 0.0923157444526701, 0.09496256855840235]}, "mutation_prompt": null}
