{"id": "c746397f-7bbc-4b61-836e-43ca57828f4d", "solution": "import numpy as np\n\nclass HybridGA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.7\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Selection\n            selected_indices = np.random.choice(self.population_size, size=self.population_size, replace=True, p=self._selection_proba(fitness))\n            selected_population = population[selected_indices]\n\n            # Crossover\n            offspring = []\n            for i in range(0, self.population_size, 2):\n                parent1, parent2 = selected_population[i], selected_population[i+1]\n                child1, child2 = self._crossover(parent1, parent2)\n                offspring.append(child1)\n                offspring.append(child2)\n\n            # Mutation\n            offspring = np.array(offspring)\n            offspring = self._mutate(offspring)\n            \n            # Evaluate new offspring\n            new_fitness = np.array([func(ind) for ind in offspring])\n            evaluations += self.population_size\n            \n            # Elitism: keep the best solutions from each generation\n            combined_population = np.vstack((population, offspring))\n            combined_fitness = np.hstack((fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.population_size]\n            population, fitness = combined_population[best_indices], combined_fitness[best_indices]\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]\n\n    def _selection_proba(self, fitness):\n        # Using inverse fitness proportional selection\n        inverted_fitness = 1.0 / (fitness + 1e-9)\n        return inverted_fitness / inverted_fitness.sum()\n\n    def _crossover(self, parent1, parent2):\n        if np.random.rand() < self.crossover_rate:\n            alpha = np.random.rand(self.dim)\n            child1 = alpha * parent1 + (1 - alpha) * parent2\n            child2 = alpha * parent2 + (1 - alpha) * parent1\n            return child1, child2\n        return parent1, parent2\n\n    def _mutate(self, population):\n        for i in range(self.population_size):\n            if np.random.rand() < self.mutation_rate:\n                mutation_vector = np.random.randn(self.dim)\n                scale_factor = np.random.rand() * 0.1\n                population[i] += scale_factor * mutation_vector\n                np.clip(population[i], self.bounds[0], self.bounds[1], out=population[i])\n        return population", "name": "HybridGA", "description": "Hybrid Genetic Algorithm with Adaptive Mutation for Efficient Exploration and Exploitation Balance.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 20, in __call__\n  File \"mtrand.pyx\", line 956, in numpy.random.mtrand.RandomState.choice\nValueError: probabilities are not non-negative\n.", "error": "ValueError('probabilities are not non-negative')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 20, in __call__\n  File \"mtrand.pyx\", line 956, in numpy.random.mtrand.RandomState.choice\nValueError: probabilities are not non-negative\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "74450703-f78f-4e7a-b768-d2cfba64c057", "solution": "import numpy as np\n\nclass HybridGA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.mutation_rate = 0.1\n        self.crossover_rate = 0.7\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Selection\n            selected_indices = np.random.choice(self.population_size, size=self.population_size, replace=True, p=self._selection_proba(fitness))\n            selected_population = population[selected_indices]\n\n            # Crossover\n            offspring = []\n            for i in range(0, self.population_size, 2):\n                parent1, parent2 = selected_population[i], selected_population[i+1]\n                child1, child2 = self._crossover(parent1, parent2)\n                offspring.append(child1)\n                offspring.append(child2)\n\n            # Mutation\n            offspring = np.array(offspring)\n            offspring = self._mutate(offspring)\n            \n            # Evaluate new offspring\n            new_fitness = np.array([func(ind) for ind in offspring])\n            evaluations += self.population_size\n            \n            # Elitism: keep the best solutions from each generation\n            combined_population = np.vstack((population, offspring))\n            combined_fitness = np.hstack((fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.population_size]\n            population, fitness = combined_population[best_indices], combined_fitness[best_indices]\n            \n            # Re-evaluate elite individuals for robustness\n            fitness[:self.population_size//2] = [func(population[i]) for i in range(self.population_size//2)]\n        \n        best_index = np.argmin(fitness)\n        return population[best_index]\n\n    def _selection_proba(self, fitness):\n        # Using normalized inverse fitness proportional selection\n        fitness = fitness - fitness.min() + 1e-9\n        inverted_fitness = 1.0 / fitness\n        return inverted_fitness / inverted_fitness.sum()\n\n    def _crossover(self, parent1, parent2):\n        if np.random.rand() < self.crossover_rate:\n            alpha = np.random.rand(self.dim)\n            child1 = alpha * parent1 + (1 - alpha) * parent2\n            child2 = alpha * parent2 + (1 - alpha) * parent1\n            return child1, child2\n        return parent1, parent2\n\n    def _mutate(self, population):\n        for i in range(self.population_size):\n            if np.random.rand() < self.mutation_rate:\n                mutation_vector = np.random.randn(self.dim)\n                scale_factor = np.random.rand() * 0.1\n                population[i] += scale_factor * mutation_vector\n                np.clip(population[i], self.bounds[0], self.bounds[1], out=population[i])\n        return population", "name": "HybridGA", "description": "Adaptive Hybrid Genetic Algorithm with Re-evaluated Elitism and Normalized Selection Strategy.", "configspace": "", "generation": 1, "fitness": 0.10772240596372583, "feedback": "", "error": "", "parent_id": "c746397f-7bbc-4b61-836e-43ca57828f4d", "metadata": {"aucs": [0.4209749527911967, 0.4209749527911967, 0.4209749527911967, 0.4386667933926911, 0.4386667933926911, 0.4386667933926911, 0.4344752988528936, 0.4344752988528936, 0.4344752988528936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014931093460126998, 0.014931093460126998, 0.014931093460126998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028496705924863086, 0.00028496705924863086, 0.00028496705924863086, 0.022914861668596465, 0.022914861668596465, 0.022914861668596465, 0.0353383900331099, 0.0353383900331099, 0.0353383900331099, 0.012329341862684529, 0.012329341862684529, 0.012329341862684529, 0.08561171554569647, 0.08561171554569647, 0.08561171554569647, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09137726625935616, 0.09137726625935616, 0.09137726625935616, 0.07974801689067279, 0.07974801689067279, 0.07974801689067279, 0.1070111498152686, 0.1070111498152686, 0.1070111498152686, 0.06587561299231603, 0.06587561299231603, 0.06587561299231603, 0.1096007089530262, 0.1096007089530262, 0.1096007089530262, 0.20934739709552241, 0.20934739709552241, 0.20934739709552241, 0.14975986674154174, 0.14975986674154174, 0.14975986674154174, 0.006014598841461938, 0.006014598841461938, 0.006014598841461938, 0.042512138987473524, 0.042512138987473524, 0.042512138987473524, 0.12031226862141198, 0.12031226862141198, 0.12031226862141198, 0.03693377160892597, 0.03693377160892597, 0.03693377160892597, 0.11038682462739668, 0.11038682462739668, 0.11038682462739668, 0.1508836055903997, 0.1508836055903997, 0.1508836055903997, 0.11503581125179918, 0.11503581125179918, 0.11503581125179918, 0.1809220685952967, 0.1809220685952967, 0.1809220685952967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04846999029660215, 0.04846999029660215, 0.04846999029660215, 0.0658417516591202, 0.0658417516591202, 0.0658417516591202, 0.13274188635133066, 0.13274188635133066, 0.13274188635133066, 0.0026986903942833873, 0.0026986903942833873, 0.0026986903942833873, 0.023870962106442906, 0.023870962106442906, 0.023870962106442906, 0.027567328889422038, 0.027567328889422038, 0.027567328889422038, 0.02716620724389629, 0.02716620724389629, 0.02716620724389629, 0.009417658658492645, 0.009417658658492645, 0.009417658658492645, 0.1065736090799666, 0.1065736090799666, 0.1065736090799666, 0.32401805309519016, 0.32401805309519016, 0.32401805309519016, 0.29798943941300426, 0.29798943941300426, 0.29798943941300426, 0.32984208273967053, 0.32984208273967053, 0.32984208273967053, 0.016723428751248326, 0.016723428751248326, 0.016723428751248326, 0.023333298487164256, 0.023333298487164256, 0.023333298487164256, 0.0019256521974037044, 0.0019256521974037044, 0.0019256521974037044, 0.1415439113378445, 0.1415439113378445, 0.1415439113378445, 0.14372891883434136, 0.14372891883434136, 0.14372891883434136, 0.20080356571960833, 0.20080356571960833, 0.20080356571960833, 0.11175904069694442, 0.11175904069694442, 0.11175904069694442, 0.13179442759694737, 0.13179442759694737, 0.13179442759694737, 0.13736818798787076, 0.13736818798787076, 0.13736818798787076, 0.059539368305231655, 0.059539368305231655, 0.059539368305231655, 0.08280752881945341, 0.08280752881945341, 0.08280752881945341, 0.07007163868979094, 0.07007163868979094, 0.07007163868979094, 0.165813636825616, 0.165813636825616, 0.165813636825616, 0.12937000155788558, 0.12937000155788558, 0.12937000155788558, 0.17843034666347524, 0.17843034666347524, 0.17843034666347524, 0.1307427240488701, 0.1307427240488701, 0.1307427240488701, 0.19594698090591778, 0.19594698090591778, 0.19594698090591778, 0.13394136932714862, 0.13394136932714862, 0.13394136932714862, 0.10210858645013743, 0.10210858645013743, 0.10210858645013743, 0.16274010378972648, 0.16274010378972648, 0.16274010378972648, 0.09927189600348396, 0.09927189600348396, 0.09927189600348396, 0.07953470706303123, 0.07953470706303123, 0.07953470706303123, 0.09850413570026906, 0.09850413570026906, 0.09850413570026906, 0.10123534220522834, 0.10123534220522834, 0.10123534220522834, 0.16329741491184235, 0.16329741491184235, 0.16329741491184235, 0.1616434624709041, 0.1616434624709041, 0.1616434624709041, 0.18535487219701874, 0.18535487219701874, 0.18535487219701874, 0.024984596539265436, 0.024984596539265436, 0.024984596539265436, 0.04205823769325612, 0.04205823769325612, 0.04205823769325612, 0.04158966614579929, 0.04158966614579929, 0.04158966614579929]}, "mutation_prompt": null}
