{"id": "c905eacb-4311-4bac-9cb7-d37b1bb642bb", "solution": "import numpy as np\n\nclass HG_PSO:\n    def __init__(self, budget, dim, swarm_size=50, inertia=0.7, cognitive=1.5, social=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia = inertia\n        self.cognitive = cognitive\n        self.social = social\n        self.mutation_prob = mutation_prob\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize positions and velocities\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize personal bests and global best\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.swarm_size\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (\n                    self.inertia * velocities[i] +\n                    self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                    self.social * r2 * (global_best_position - positions[i])\n                )\n\n                # Update position\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate fitness\n                score = func(positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n            # Genetic mutation\n            mutation_mask = np.random.rand(self.swarm_size, self.dim) < self.mutation_prob\n            mutation_values = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n            positions = np.where(mutation_mask, mutation_values, positions)\n\n        return global_best_position, global_best_score", "name": "HG_PSO", "description": "Hybrid Genetic-Particle Swarm Optimization (HG-PSO) combining evolutionary population dynamics and velocity-based swarm intelligence to effectively explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.17266672925205762, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.3159487386211871, 0.3159487386211871, 0.3159487386211871, 0.33434201940264263, 0.33434201940264263, 0.33434201940264263, 0.3408008504925192, 0.3408008504925192, 0.3408008504925192, 0.018766388490522368, 0.018766388490522368, 0.018766388490522368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002559478600645204, 0.002559478600645204, 0.002559478600645204, 0.11718845620539231, 0.11718845620539231, 0.11718845620539231, 0.0810417402464535, 0.0810417402464535, 0.0810417402464535, 0.09317146207002147, 0.09317146207002147, 0.09317146207002147, 0.08071993623125673, 0.08071993623125673, 0.08071993623125673, 0.09839990889040418, 0.09839990889040418, 0.09839990889040418, 0.09546070922837768, 0.09546070922837768, 0.09546070922837768, 0.9886552428373289, 0.9886552428373289, 0.9886552428373289, 0.9886993626814161, 0.9886993626814161, 0.9886993626814161, 0.9897275718120124, 0.9897275718120124, 0.9897275718120124, 0.1703081390291461, 0.1703081390291461, 0.1703081390291461, 0.1437733949970097, 0.1437733949970097, 0.1437733949970097, 0.15678200486767724, 0.15678200486767724, 0.15678200486767724, 0.20731268605150166, 0.20731268605150166, 0.20731268605150166, 0.160666187442829, 0.160666187442829, 0.160666187442829, 0.15876509230998959, 0.15876509230998959, 0.15876509230998959, 0.12195203903046381, 0.12195203903046381, 0.12195203903046381, 0.11477896295099999, 0.11477896295099999, 0.11477896295099999, 0.10437593906607368, 0.10437593906607368, 0.10437593906607368, 0.14120158994265508, 0.14120158994265508, 0.14120158994265508, 0.04674137943786261, 0.04674137943786261, 0.04674137943786261, 0.029048606412063416, 0.029048606412063416, 0.029048606412063416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03114399857651573, 0.03114399857651573, 0.03114399857651573, 0.0059576853156797505, 0.0059576853156797505, 0.0059576853156797505, 0.06426444187849123, 0.06426444187849123, 0.06426444187849123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06065996582916233, 0.06065996582916233, 0.06065996582916233, 0.022703483649376133, 0.022703483649376133, 0.022703483649376133, 0.041799714463172655, 0.041799714463172655, 0.041799714463172655, 0.34383060893324247, 0.34383060893324247, 0.34383060893324247, 0.31762001198923395, 0.31762001198923395, 0.31762001198923395, 0.30794582099919643, 0.30794582099919643, 0.30794582099919643, 0.0713147562272115, 0.0713147562272115, 0.0713147562272115, 0.0741177398482088, 0.0741177398482088, 0.0741177398482088, 0.10170202329338462, 0.10170202329338462, 0.10170202329338462, 0.11915838423590008, 0.11915838423590008, 0.11915838423590008, 0.18933257366368994, 0.18933257366368994, 0.18933257366368994, 0.169599474479444, 0.169599474479444, 0.169599474479444, 0.23587183553838187, 0.23587183553838187, 0.23587183553838187, 0.23257024672621507, 0.23257024672621507, 0.23257024672621507, 0.22666221408217757, 0.22666221408217757, 0.22666221408217757, 0.10699746559507095, 0.10699746559507095, 0.10699746559507095, 0.18225259916897196, 0.18225259916897196, 0.18225259916897196, 0.13057359934790091, 0.13057359934790091, 0.13057359934790091, 0.1887185604512488, 0.1887185604512488, 0.1887185604512488, 0.19479989671679776, 0.19479989671679776, 0.19479989671679776, 0.17327630785852977, 0.17327630785852977, 0.17327630785852977, 0.1904029456407278, 0.1904029456407278, 0.1904029456407278, 0.17478476728506065, 0.17478476728506065, 0.17478476728506065, 0.1694832940299208, 0.1694832940299208, 0.1694832940299208, 0.4191444277076991, 0.4191444277076991, 0.4191444277076991, 0.15302997949033592, 0.15302997949033592, 0.15302997949033592, 0.16888209868710602, 0.16888209868710602, 0.16888209868710602, 0.20264062643855918, 0.20264062643855918, 0.20264062643855918, 0.2077612218234114, 0.2077612218234114, 0.2077612218234114, 0.24895205182891877, 0.24895205182891877, 0.24895205182891877, 0.18050814302471752, 0.18050814302471752, 0.18050814302471752, 0.19523632376765, 0.19523632376765, 0.19523632376765, 0.18762353242852425, 0.18762353242852425, 0.18762353242852425, 0.0748463674341241, 0.0748463674341241, 0.0748463674341241, 0.07815888453634467, 0.07815888453634467, 0.07815888453634467, 0.08578854580939221, 0.08578854580939221, 0.08578854580939221]}, "mutation_prompt": null}
{"id": "91f515df-454d-4e98-91ec-e8b07996ebcc", "solution": "import numpy as np\n\nclass HG_PSO:\n    def __init__(self, budget, dim, swarm_size=50, inertia=0.7, cognitive=1.5, social=1.5, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia = inertia\n        self.cognitive = cognitive\n        self.social = social\n        self.mutation_prob = mutation_prob\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize positions and velocities\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize personal bests and global best\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(x) for x in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.swarm_size\n        inertia_decay = 0.99  # New: Decay rate for inertia\n        min_inertia = 0.4  # New: Minimum inertia value\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                # Update velocity\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (\n                    self.inertia * velocities[i] +\n                    self.cognitive * r1 * (personal_best_positions[i] - positions[i]) +\n                    self.social * r2 * (global_best_position - positions[i])\n                )\n\n                # Update position\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate fitness\n                score = func(positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n            # Dynamic inertia adjustment\n            self.inertia = max(min_inertia, self.inertia * inertia_decay)  # New: Adjust inertia\n\n            # Adaptive mutation\n            success_rate = np.mean(personal_best_scores < global_best_score)  # New: Calculate success rate\n            adaptive_mutation_prob = self.mutation_prob * (1 - success_rate)  # New: Adjust mutation probability\n            mutation_mask = np.random.rand(self.swarm_size, self.dim) < adaptive_mutation_prob\n            mutation_values = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n            positions = np.where(mutation_mask, mutation_values, positions)\n\n        return global_best_position, global_best_score", "name": "HG_PSO", "description": "Enhanced HG-PSO with dynamic inertia and adaptive mutation to balance exploration and exploitation more effectively.", "configspace": "", "generation": 1, "fitness": 0.20935871702920736, "feedback": "", "error": "", "parent_id": "c905eacb-4311-4bac-9cb7-d37b1bb642bb", "metadata": {"aucs": [0.44668868640500936, 0.44668868640500936, 0.44668868640500936, 0.43164838168993824, 0.43164838168993824, 0.43164838168993824, 0.4989746090741992, 0.4989746090741992, 0.4989746090741992, 0.07589656883959472, 0.07589656883959472, 0.07589656883959472, 0.11014013602656447, 0.11014013602656447, 0.11014013602656447, 0.13584523797929904, 0.13584523797929904, 0.13584523797929904, 0.1259928207950496, 0.1259928207950496, 0.1259928207950496, 0.1114395471458427, 0.1114395471458427, 0.1114395471458427, 0.14114918959430656, 0.14114918959430656, 0.14114918959430656, 0.09960958490499938, 0.09960958490499938, 0.09960958490499938, 0.1268798655547504, 0.1268798655547504, 0.1268798655547504, 0.10818884224306513, 0.10818884224306513, 0.10818884224306513, 0.9886552155892017, 0.9886552155892017, 0.9886552155892017, 0.9886955693203692, 0.9886955693203692, 0.9886955693203692, 0.9897281669068357, 0.9897281669068357, 0.9897281669068357, 0.23394673077225048, 0.23394673077225048, 0.23394673077225048, 0.155021028551678, 0.155021028551678, 0.155021028551678, 0.20640014502977522, 0.20640014502977522, 0.20640014502977522, 0.33769545507038234, 0.33769545507038234, 0.33769545507038234, 0.1605898564999687, 0.1605898564999687, 0.1605898564999687, 0.2583943175112343, 0.2583943175112343, 0.2583943175112343, 0.17469864665332713, 0.17469864665332713, 0.17469864665332713, 0.14157971734329788, 0.14157971734329788, 0.14157971734329788, 0.15039435347069285, 0.15039435347069285, 0.15039435347069285, 0.20459070301458382, 0.20459070301458382, 0.20459070301458382, 0.17044623383766921, 0.17044623383766921, 0.17044623383766921, 0.05814362187257882, 0.05814362187257882, 0.05814362187257882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02262807468445771, 0.02262807468445771, 0.02262807468445771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06897341558232839, 0.06897341558232839, 0.06897341558232839, 0.044770712419501035, 0.044770712419501035, 0.044770712419501035, 0.0429156634873068, 0.0429156634873068, 0.0429156634873068, 0.009099559567394278, 0.009099559567394278, 0.009099559567394278, 0.008319333860491662, 0.008319333860491662, 0.008319333860491662, 0.012137699258392254, 0.012137699258392254, 0.012137699258392254, 0.11824790374582117, 0.11824790374582117, 0.11824790374582117, 0.034990422143147404, 0.034990422143147404, 0.034990422143147404, 0.10611415583450579, 0.10611415583450579, 0.10611415583450579, 0.3914385697302285, 0.3914385697302285, 0.3914385697302285, 0.4037928662924659, 0.4037928662924659, 0.4037928662924659, 0.3878241559722915, 0.3878241559722915, 0.3878241559722915, 0.0978043508991544, 0.0978043508991544, 0.0978043508991544, 0.11494619585931809, 0.11494619585931809, 0.11494619585931809, 0.10424026101735129, 0.10424026101735129, 0.10424026101735129, 0.1752648831257393, 0.1752648831257393, 0.1752648831257393, 0.1603997297449833, 0.1603997297449833, 0.1603997297449833, 0.22176227178925323, 0.22176227178925323, 0.22176227178925323, 0.2368855690594902, 0.2368855690594902, 0.2368855690594902, 0.2733589356642624, 0.2733589356642624, 0.2733589356642624, 0.29528521604512825, 0.29528521604512825, 0.29528521604512825, 0.13018516826128612, 0.13018516826128612, 0.13018516826128612, 0.22967505927732146, 0.22967505927732146, 0.22967505927732146, 0.1112087747194721, 0.1112087747194721, 0.1112087747194721, 0.18821500112867795, 0.18821500112867795, 0.18821500112867795, 0.1973485111242551, 0.1973485111242551, 0.1973485111242551, 0.19544517075958934, 0.19544517075958934, 0.19544517075958934, 0.21838577169762496, 0.21838577169762496, 0.21838577169762496, 0.2434866938325816, 0.2434866938325816, 0.2434866938325816, 0.20534446430966968, 0.20534446430966968, 0.20534446430966968, 0.6771195302075008, 0.6771195302075008, 0.6771195302075008, 0.1569954229210534, 0.1569954229210534, 0.1569954229210534, 0.16958598493602772, 0.16958598493602772, 0.16958598493602772, 0.2062749472414629, 0.2062749472414629, 0.2062749472414629, 0.20928546704449258, 0.20928546704449258, 0.20928546704449258, 0.15432484729814955, 0.15432484729814955, 0.15432484729814955, 0.17157152621517668, 0.17157152621517668, 0.17157152621517668, 0.1926724688951651, 0.1926724688951651, 0.1926724688951651, 0.17032576371361663, 0.17032576371361663, 0.17032576371361663, 0.08120823973124913, 0.08120823973124913, 0.08120823973124913, 0.07988085986633031, 0.07988085986633031, 0.07988085986633031, 0.12245477544274941, 0.12245477544274941, 0.12245477544274941]}, "mutation_prompt": null}
