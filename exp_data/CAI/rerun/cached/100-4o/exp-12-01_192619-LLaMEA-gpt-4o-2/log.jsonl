{"id": "9683d82a-79e5-4835-9ce0-e379e9d23bc0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 5 * dim\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.array([func(ind) for ind in self.population])\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                candidates = list(range(0, i)) + list(range(i + 1, self.pop_size))\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = self.population[a] + self.mutation_factor * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(crossover, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n            # Adaptive population size adjustment based on diversity\n            diversity = np.std(self.population, axis=0).mean()\n            if diversity < 1e-5:\n                self.pop_size = max(4, self.pop_size // 2)\n            elif diversity > 0.1:\n                self.pop_size = min(5 * self.dim, self.pop_size * 2)\n            \n            # Re-evaluate the population size\n            if self.pop_size != len(self.population):\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n                self.fitness = np.array([func(ind) for ind in self.population])\n                self.evaluations += self.pop_size - len(self.population)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# Example usage:\n# optimizer = AdaptiveDifferentialEvolution(budget=10000, dim=10)\n# best_solution = optimizer(some_black_box_function)\n# print(best_solution)", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with a dynamic population size adjusts exploration and exploitation phases based on current progress and diversity.", "configspace": "", "generation": 0, "fitness": 0.41002302095075505, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.8077912302362373, 0.8252852963635764, 0.830688859515355, 0.7935324404759964, 0.8396273377454595, 0.81823718926939, 0.8212451292431437, 0.8155715301073053, 0.8078096843917265, 0.7069963073022234, 0.7140788498559194, 0.6560478462495474, 0.7263918775586273, 0.6686486359643224, 0.7239767814939851, 0.6884388884423083, 0.6791662790245121, 0.7199594578802364, 0.12244584890081511, 0.13145822476062263, 0.25239524170277405, 0.13059926451497905, 0.10568395706283196, 0.1759292259804266, 0.12383249440301447, 0.14674341287554948, 0.13531687175285956, 0.1287208574818698, 0.11128080485280867, 0.13181639653570987, 0.11772813266066773, 0.12089654650840509, 0.16059439012249677, 0.13998827071440834, 0.12339225411111876, 0.1202270974264904, 0.9556975743575105, 0.9594167269938412, 0.9747255017594925, 0.9555532691792352, 0.9847891944693814, 0.953146846585718, 0.9729938292206437, 0.9964070659403929, 0.9540545092109143, 0.5562531084123952, 0.5470597890477957, 0.5430401227630969, 0.5281500848205958, 0.5673185838506387, 0.6079062586513126, 0.5528089516918937, 0.5465495743702118, 0.5504988748189057, 0.7664723880454865, 0.7453683398226344, 0.7381796964087812, 0.7778456222919701, 0.7835662249055174, 0.7782163084217298, 0.8195490674683813, 0.7428884964235933, 0.8571563658076037, 0.49801977635672967, 0.4247544496366725, 0.4873034149527946, 0.5785138060142606, 0.40867349223788907, 0.4927525323631371, 0.46876801252002154, 0.5167643647705111, 0.519546731658449, 0.10604321664231375, 0.4944504095908204, 0.5169783341123595, 0.5349782004615833, 0.47758116189965494, 0.5082357813585361, 0.47853499819419254, 0.48311823204321924, 0.45086974361215626, 0.4083051600447226, 0.4094256804832638, 0.39534486893402454, 0.43520156861719095, 0.41565088792386573, 0.4623365010761359, 0.4325978583210295, 0.3422885830525889, 0.3923843656955568, 0.5488833556474391, 0.566865404962746, 0.5285621279873305, 0.5252039885496662, 0.49116238686549785, 0.5156567558139618, 0.6345195386949809, 0.5780567907732492, 0.6014785586433211, 0.11770497004072744, 0.23702646412168293, 0.10157288278407961, 0.17909715798125525, 0.2188149739868489, 0.28980433082480794, 0.11504352864655121, 0.1851930453140398, 0.17286585400412569, 0.31451937626766224, 0.35086972351829837, 0.33196279092183845, 0.39237222563231966, 0.3770627819522435, 0.35928333052804307, 0.3422456385663988, 0.32839358515943373, 0.34459014935124554, 0.7080671635135306, 0.6896590597556498, 0.7060796361699164, 0.7174829959029436, 0.7014672569017677, 0.7128426620064365, 0.7040149692685291, 0.6798549695700257, 0.7189206892280304, 0.09535024856878138, 0.10608535672908093, 0.08342412676816979, 0.0896616791619197, 0.08713614854465268, 0.10847735960580462, 0.0999696897131056, 0.0895623674929078, 0.1077316975830761, 0.13715289047832468, 0.2248976258630242, 0.14310033232957264, 0.21354279929616693, 0.18200971229982688, 0.17226656443543975, 0.23941583604246275, 0.15734370450624813, 0.1652312021494885, 0.394826974109055, 0.37092556710307756, 0.38602567702839896, 0.34342851825866105, 0.34970485691850783, 0.42307428310924, 0.3977659498677141, 0.4383000259280879, 0.3859844459098145, 0.30568725545963893, 0.2985964896586166, 0.29195804416504145, 0.27884392977185235, 0.2732017247416151, 0.2885569937140845, 0.30065069950451306, 0.32657422305710804, 0.29892035675962403, 0.1802839601161944, 0.19034869150784384, 0.18665742806222896, 0.21199387262983027, 0.19551881557251094, 0.18130363515061265, 0.19382018495053188, 0.1872080408068364, 0.1860817235543114, 0.39785017748841445, 0.2983089863298727, 0.18270952005607033, 0.26598395227245897, 0.2351369581539593, 0.187723434948749, 0.21085374358217224, 0.24084082333054269, 0.4043537078234365, 0.798429419070809, 0.7148707742766245, 0.16951851007332064, 0.7542111281798506, 0.7141880941135208, 0.18441131295583868, 0.3870085467007973, 0.52321455823662, 0.6443960941548023, 0.1627273488874904, 0.27453125131313105, 0.628575050123413, 0.19875567313912257, 0.8020830011042224, 0.20012954332813837, 0.2119316029576538, 0.20530161310561235, 0.7544225146118803, 0.18270321356116037, 0.1819290333347009, 0.20174312456920884, 0.18969194196267136, 0.2173879282118768, 0.1796343390159686, 0.185649188810033, 0.1818360775809429, 0.1871534794652121, 0.07274571941750052, 0.07660745636896993, 0.07224157891949001, 0.07147334314893306, 0.07117980936851886, 0.07055066475533023, 0.07949503602449637, 0.07070826047867684, 0.08639473940956632]}, "mutation_prompt": null}
{"id": "8b7e4d5e-ad31-4b3b-a5c9-96cab018fe68", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = 5 * dim\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.array([func(ind) for ind in self.population])\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                candidates = list(range(0, i)) + list(range(i + 1, self.pop_size))\n                a, b, c = np.random.choice(candidates, 3, replace=False)\n                mutant = self.population[a] + self.mutation_factor * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(crossover, mutant, self.population[i])\n                trial_fitness = func(trial) * (1 + 0.01 * np.random.randn())  # Added noisy fitness evaluation\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n            # Adaptive population size adjustment based on diversity\n            diversity = np.std(self.population, axis=0).mean()\n            if diversity < 1e-5:\n                self.pop_size = max(4, self.pop_size // 2)\n            elif diversity > 0.1:\n                self.pop_size = min(5 * self.dim, self.pop_size * 2)\n            \n            # Re-evaluate the population size\n            if self.pop_size != len(self.population):\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n                self.fitness = np.array([func(ind) for ind in self.population])\n                self.evaluations += self.pop_size - len(self.population)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved adaptive differential evolution by incorporating a noisy fitness evaluation to enhance robustness in local optima regions.", "configspace": "", "generation": 1, "fitness": 0.25132330835098754, "feedback": "", "error": "", "parent_id": "9683d82a-79e5-4835-9ce0-e379e9d23bc0", "metadata": {"aucs": [0.34628548747703836, 0.3454974121303651, 0.3425607197331192, 0.27869235446901763, 0.28881892652064467, 0.3042121563230472, 0.295208690889483, 0.296511158361196, 0.3138045885091395, 0.2550076539221433, 0.2826926361592246, 0.2943187638165816, 0.28501611280941874, 0.31148414700132976, 0.2827269716945019, 0.2987427006720943, 0.27798127786147464, 0.30888983651526103, 0.10468079858307844, 0.10954658880585577, 0.11858076101271675, 0.17075070826701755, 0.10098187539977932, 0.11216857392441837, 0.1425407988520161, 0.11394327770246238, 0.13575601724707775, 0.09406022071151854, 0.10725345309633905, 0.11089637306817879, 0.1150817815488483, 0.12521207227389752, 0.12622816203939125, 0.10911679930709584, 0.1113057369253132, 0.10645745471212631, 0.987033269495685, 0.9594991819063747, 0.937053956795149, 0.978628559652096, 0.8674818044256747, 0.9675039167626013, 0.9941467590880249, 0.9844672620878322, 0.9641735278038438, 0.27522075819034986, 0.29432121097897024, 0.2542242347884779, 0.3030744452346459, 0.26326125808741896, 0.27539008750794225, 0.1586747276334951, 0.13154451811128764, 0.15895232808891246, 0.3371128138422156, 0.2788609891011643, 0.29551448021116666, 0.3252166845939526, 0.684045196538704, 0.352240997088594, 0.7727565151604687, 0.684571334428299, 0.6840072264778554, 0.18034726383319144, 0.1746518129082849, 0.1459225497866713, 0.14306229857675012, 0.12960044489013167, 0.13683605920696695, 0.22393178577798012, 0.1728690356084851, 0.16507785732834113, 0.1579449910861287, 0.25481086751207516, 0.05324758618537384, 0.2368169139578037, 0.24829950400334277, 0.21434199357504602, 0.19220694604015565, 0.2482671855721047, 0.22808469354785466, 0.25490873551213855, 0.2624327325521193, 0.22642321109602592, 0.24348856100797633, 0.24414799104329, 0.24464749545528686, 0.19766642847923854, 0.1923694769284543, 0.19263828024792828, 0.2892562088140591, 0.2675422544144107, 0.30758852362551625, 0.32300536545458713, 0.3308179233724313, 0.3047935034934187, 0.3530255400206669, 0.3318932747167179, 0.34008621058584154, 0.10135431348062207, 0.09220036019297406, 0.10053680525748643, 0.16909831655699636, 0.13773824872502904, 0.18413271762299055, 0.1429753604000472, 0.2123701676956663, 0.12510139352779115, 0.2278326574141447, 0.2149491441640453, 0.22867700596908125, 0.20262760496211962, 0.227080827471129, 0.2127165088892089, 0.17302680742508125, 0.17557353380562235, 0.16476064554343084, 0.3492697893547799, 0.4133562197657894, 0.3397381384388143, 0.2923609837174227, 0.29683791735813847, 0.27872099262967587, 0.3244318223145032, 0.31145779709609167, 0.30823437381853214, 0.0993524211985034, 0.09284852997215076, 0.12462096704197756, 0.10475043872127499, 0.08771797977534423, 0.09469225449137098, 0.11366142798997259, 0.08768946111156461, 0.10110233716789352, 0.1548590048933043, 0.16167784091102588, 0.16439335248237108, 0.1498269485229139, 0.21111354525433568, 0.15037163164692613, 0.14336395607731844, 0.18711215110156876, 0.15313055993962132, 0.2917210520922283, 0.28378426476954977, 0.2843850286007148, 0.27726171335984084, 0.2676782244268636, 0.26393025845547735, 0.2146767641614732, 0.19945522688058204, 0.2252709295583124, 0.2526008424990951, 0.245000618730424, 0.24246184867402343, 0.2598494224243394, 0.23738046844618044, 0.25809082163658925, 0.16682433733617674, 0.2007483239066501, 0.1933482518414198, 0.19145859031229884, 0.2126471858361909, 0.19106199779906585, 0.18663842193890867, 0.1842460095410745, 0.1755578258820828, 0.17781848057182925, 0.18945347086476672, 0.1755265399489293, 0.16911565553830898, 0.170935615513514, 0.17535423285829854, 0.17730344294469236, 0.1822332593270084, 0.1727022510670846, 0.17290725634573756, 0.17028295965164675, 0.1708915445052871, 0.4041599791388065, 0.5167982946242559, 0.19515326073954642, 0.16967093519082233, 0.18733140586763752, 0.5070973957145224, 0.3548529746867928, 0.1761353919035893, 0.3683344218736314, 0.2745510694916776, 0.19203499266066937, 0.1630790045703352, 0.3939869986364837, 0.21575557314874572, 0.2897822008118224, 0.20934394196616646, 0.2101004078854034, 0.1533804052628861, 0.18590186570691114, 0.1966624502126142, 0.210553993442544, 0.18519526697032473, 0.18832794382772022, 0.18623642685057584, 0.19518878369973647, 0.18493747711577713, 0.18119925966567918, 0.0797142902297423, 0.0637702664865647, 0.08127916590256612, 0.07719947378018277, 0.07277630077253339, 0.0790614176391975, 0.07387974484547577, 0.07981662163426939, 0.07749420207357749]}, "mutation_prompt": null}
