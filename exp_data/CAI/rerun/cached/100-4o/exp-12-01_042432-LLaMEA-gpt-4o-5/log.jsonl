{"id": "e03146d3-b445-4547-aac8-f788a2206beb", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * self.dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.scale_factor = 0.5\n        self.crossover_prob = 0.7\n    \n    def __call__(self, func):\n        evaluations = 0\n        best_idx = None\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Evaluate individual if necessary\n                if self.fitness[i] == np.inf:\n                    self.fitness[i] = func(self.population[i])\n                    evaluations += 1\n                    if best_idx is None or self.fitness[i] < self.fitness[best_idx]:\n                        best_idx = i\n\n                # Mutation and Crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.scale_factor * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Evaluate trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.fitness[best_idx]:\n                        best_idx = i\n\n            # Dynamically update parameters\n            if evaluations % (self.budget // 10) == 0:\n                self.scale_factor = 0.5 + 0.1 * np.random.rand()\n                self.crossover_prob = 0.7 + 0.1 * np.random.rand()\n\n        return self.population[best_idx], self.fitness[best_idx]", "name": "DynamicDifferentialEvolution", "description": "The algorithm combines a Differential Evolution strategy with dynamic parameter adaptation to explore and exploit the search space efficiently within a given budget.", "configspace": "", "generation": 0, "fitness": 0.3111085562256966, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.7803415688192024, 0.7964692917992728, 0.8065996597635527, 0.7802807770155539, 0.796339426480044, 0.7979124122627668, 0.8086241404160168, 0.788987635097983, 0.7795339126164642, 0.5999669378492734, 0.6245940035622415, 0.6231904132893326, 0.6311462692931835, 0.638307790591395, 0.6432799579096325, 0.6094230545554711, 0.6295512664621271, 0.6295281870217054, 0.13384434680080615, 0.12936525934919352, 0.1149102205303707, 0.11895523751876735, 0.13593004737764947, 0.14076248680573333, 0.1296876639860538, 0.13792791028954454, 0.12247166884638205, 0.1243615439697956, 0.11174347024459697, 0.11396423910856679, 0.11649128134770859, 0.12347431565736555, 0.1111412575587708, 0.11598044602865831, 0.1161276877497861, 0.12459790888321753, 0.9257413849959486, 0.9527973581567573, 0.9239932696097771, 0.9499037592940689, 0.9441176463391545, 0.9258120914220415, 0.9592221567807947, 0.9452138397422194, 0.9244472624282762, 0.36556848340330195, 0.43535026763255735, 0.392392390686344, 0.39262404790502314, 0.3916281005032105, 0.41494234965577415, 0.4270606449994192, 0.41953732294193347, 0.40569046287923016, 0.5889442897165534, 0.5925117851062642, 0.6325987687313748, 0.6939677350516125, 0.650670895947614, 0.681797684733175, 0.6582105308783175, 0.6993856205878801, 0.6163448836663548, 0.20032485767348351, 0.1872810765110311, 0.19664669210395092, 0.17791224823223384, 0.22154190790409767, 0.19038338903092, 0.2553417201624484, 0.1612268543889771, 0.21395461419004813, 0.19785535153552714, 0.1975525802859298, 0.1962055066682611, 0.18121774690666748, 0.19585618837096586, 0.2826600601777164, 0.2492314723299066, 0.1828367836825846, 0.21800420405892895, 0.10327612060363167, 0.09410577521723351, 0.07945015196700334, 0.13547122669724376, 0.15468584592833445, 0.09292953611986854, 0.11310700789771877, 0.10166369573355283, 0.10906472624421881, 0.24148784470782836, 0.24277992099819434, 0.2463784753685928, 0.21428502000285976, 0.23075122987021546, 0.18881664458599057, 0.26872352607630423, 0.26882592024335494, 0.26418083438545514, 0.04883055017735283, 0.04873383750294247, 0.043935049757643396, 0.08097750240599977, 0.04934995918633489, 0.06222572737241894, 0.06184612131710654, 0.0682793432127008, 0.05198862284151495, 0.1737703044666421, 0.19155572890690353, 0.15716315587080787, 0.21403727833487085, 0.18954324155772861, 0.18844607797585866, 0.17308450780299922, 0.1726468217129561, 0.1679808322265517, 0.5436388168930946, 0.5760486424281746, 0.5423462256593772, 0.5903750213815362, 0.5493673420130659, 0.5594176420712884, 0.5547764429971507, 0.5309194253678033, 0.5745206643146101, 0.10728633115311237, 0.09001581554277749, 0.10688195912578558, 0.09764356927919926, 0.10446811326607186, 0.08981509323308623, 0.09062157558098227, 0.1221811887766362, 0.09350539633260813, 0.13923072708185358, 0.13822605285478273, 0.14964809981432625, 0.141377925419376, 0.14591488855946044, 0.15582110810658245, 0.14963830625768026, 0.14826006318961227, 0.12453660518822984, 0.32864574876125063, 0.36136327229264176, 0.3457508678835648, 0.3461775311332762, 0.35473754852834083, 0.32601192802669265, 0.3918440691778604, 0.38325305945089827, 0.35993992518976925, 0.24979055568676078, 0.2593415561731893, 0.21978864769369433, 0.23619693756072602, 0.22132734833797163, 0.26156338494494835, 0.26845914522752845, 0.25527153259487256, 0.24214844858220486, 0.22140775944204716, 0.2261614294999249, 0.21390637508077603, 0.20180749432689205, 0.18822646183034797, 0.23596124533068874, 0.20889948449189166, 0.19762563677154177, 0.20254037061871433, 0.19846889650434474, 0.2856013739547256, 0.18563347889057324, 0.18783544042422506, 0.20146579123415642, 0.19290429469608095, 0.22974917111684667, 0.20619745973299364, 0.21953022949541812, 0.5179043149647615, 0.5982578276081668, 0.17682966876246753, 0.5427491973642358, 0.4983581340712139, 0.6556815775977731, 0.1938040892857601, 0.16517277662284902, 0.5969780590796577, 0.1929229284828009, 0.19610174353754706, 0.5113116527271069, 0.19077939801626964, 0.19011225706623502, 0.19568244438572624, 0.19910402516117764, 0.6281005958419588, 0.2044158769094413, 0.17757308197251298, 0.20861767032223144, 0.19358434467243368, 0.1820711494565037, 0.18280904590904934, 0.1837996630715677, 0.17851441733286844, 0.21211088336961925, 0.17692000673816533, 0.0781889699717696, 0.08266443388234124, 0.07627332065968839, 0.07048155122162048, 0.08193765950281062, 0.08428652994312302, 0.07806001994136491, 0.0880364524460161, 0.0805352841312027]}, "mutation_prompt": null}
{"id": "541a4161-4557-45f4-bbe1-50c21b77b247", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * self.dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.scale_factor = 0.5\n        self.crossover_prob = 0.7\n    \n    def __call__(self, func):\n        evaluations = 0\n        best_idx = None\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                # Evaluate individual if necessary\n                if self.fitness[i] == np.inf:\n                    self.fitness[i] = func(self.population[i])\n                    evaluations += 1\n                    if best_idx is None or self.fitness[i] < self.fitness[best_idx]:\n                        best_idx = i\n\n                # Mutation and Crossover\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.scale_factor * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(crossover):\n                    crossover[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(crossover, mutant, self.population[i])\n\n                # Evaluate trial\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                # Selection\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.fitness[best_idx]:\n                        best_idx = i\n\n            # Dynamically update parameters\n            if evaluations % (self.budget // 10) == 0:\n                self.scale_factor = 0.5 + 0.1 * np.random.rand()\n                self.crossover_prob = 0.7 + 0.1 * np.random.rand()\n\n        return self.population[best_idx], self.fitness[best_idx]", "name": "DynamicDifferentialEvolution", "description": "The algorithm combines a Differential Evolution strategy with dynamic parameter adaptation to explore and exploit the search space efficiently within a given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e03146d3-b445-4547-aac8-f788a2206beb", "metadata": {"aucs": [0.7803415688192024, 0.7964692917992728, 0.8065996597635527, 0.7802807770155539, 0.796339426480044, 0.7979124122627668, 0.8086241404160168, 0.788987635097983, 0.7795339126164642, 0.5999669378492734, 0.6245940035622415, 0.6231904132893326, 0.6311462692931835, 0.638307790591395, 0.6432799579096325, 0.6094230545554711, 0.6295512664621271, 0.6295281870217054, 0.13384434680080615, 0.12936525934919352, 0.1149102205303707, 0.11895523751876735, 0.13593004737764947, 0.14076248680573333, 0.1296876639860538, 0.13792791028954454, 0.12247166884638205, 0.1243615439697956, 0.11174347024459697, 0.11396423910856679, 0.11649128134770859, 0.12347431565736555, 0.1111412575587708, 0.11598044602865831, 0.1161276877497861, 0.12459790888321753, 0.9257413849959486, 0.9527973581567573, 0.9239932696097771, 0.9499037592940689, 0.9441176463391545, 0.9258120914220415, 0.9592221567807947, 0.9452138397422194, 0.9244472624282762, 0.36556848340330195, 0.43535026763255735, 0.392392390686344, 0.39262404790502314, 0.3916281005032105, 0.41494234965577415, 0.4270606449994192, 0.41953732294193347, 0.40569046287923016, 0.5889442897165534, 0.5925117851062642, 0.6325987687313748, 0.6939677350516125, 0.650670895947614, 0.681797684733175, 0.6582105308783175, 0.6993856205878801, 0.6163448836663548, 0.20032485767348351, 0.1872810765110311, 0.19664669210395092, 0.17791224823223384, 0.22154190790409767, 0.19038338903092, 0.2553417201624484, 0.1612268543889771, 0.21395461419004813, 0.19785535153552714, 0.1975525802859298, 0.1962055066682611, 0.18121774690666748, 0.19585618837096586, 0.2826600601777164, 0.2492314723299066, 0.1828367836825846, 0.21800420405892895, 0.10327612060363167, 0.09410577521723351, 0.07945015196700334, 0.13547122669724376, 0.15468584592833445, 0.09292953611986854, 0.11310700789771877, 0.10166369573355283, 0.10906472624421881, 0.24148784470782836, 0.24277992099819434, 0.2463784753685928, 0.21428502000285976, 0.23075122987021546, 0.18881664458599057, 0.26872352607630423, 0.26882592024335494, 0.26418083438545514, 0.04883055017735283, 0.04873383750294247, 0.043935049757643396, 0.08097750240599977, 0.04934995918633489, 0.06222572737241894, 0.06184612131710654, 0.0682793432127008, 0.05198862284151495, 0.1737703044666421, 0.19155572890690353, 0.15716315587080787, 0.21403727833487085, 0.18954324155772861, 0.18844607797585866, 0.17308450780299922, 0.1726468217129561, 0.1679808322265517, 0.5436388168930946, 0.5760486424281746, 0.5423462256593772, 0.5903750213815362, 0.5493673420130659, 0.5594176420712884, 0.5547764429971507, 0.5309194253678033, 0.5745206643146101, 0.10728633115311237, 0.09001581554277749, 0.10688195912578558, 0.09764356927919926, 0.10446811326607186, 0.08981509323308623, 0.09062157558098227, 0.1221811887766362, 0.09350539633260813, 0.13923072708185358, 0.13822605285478273, 0.14964809981432625, 0.141377925419376, 0.14591488855946044, 0.15582110810658245, 0.14963830625768026, 0.14826006318961227, 0.12453660518822984, 0.32864574876125063, 0.36136327229264176, 0.3457508678835648, 0.3461775311332762, 0.35473754852834083, 0.32601192802669265, 0.3918440691778604, 0.38325305945089827, 0.35993992518976925, 0.24979055568676078, 0.2593415561731893, 0.21978864769369433, 0.23619693756072602, 0.22132734833797163, 0.26156338494494835, 0.26845914522752845, 0.25527153259487256, 0.24214844858220486, 0.22140775944204716, 0.2261614294999249, 0.21390637508077603, 0.20180749432689205, 0.18822646183034797, 0.23596124533068874, 0.20889948449189166, 0.19762563677154177, 0.20254037061871433, 0.19846889650434474, 0.2856013739547256, 0.18563347889057324, 0.18783544042422506, 0.20146579123415642, 0.19290429469608095, 0.22974917111684667, 0.20619745973299364, 0.21953022949541812, 0.5179043149647615, 0.5982578276081668, 0.17682966876246753, 0.5427491973642358, 0.4983581340712139, 0.6556815775977731, 0.1938040892857601, 0.16517277662284902, 0.5969780590796577, 0.1929229284828009, 0.19610174353754706, 0.5113116527271069, 0.19077939801626964, 0.19011225706623502, 0.19568244438572624, 0.19910402516117764, 0.6281005958419588, 0.2044158769094413, 0.17757308197251298, 0.20861767032223144, 0.19358434467243368, 0.1820711494565037, 0.18280904590904934, 0.1837996630715677, 0.17851441733286844, 0.21211088336961925, 0.17692000673816533, 0.0781889699717696, 0.08266443388234124, 0.07627332065968839, 0.07048155122162048, 0.08193765950281062, 0.08428652994312302, 0.07806001994136491, 0.0880364524460161, 0.0805352841312027]}, "mutation_prompt": null}
