{"id": "1d6dcba3-c066-4a2d-a9a7-defac6457ab2", "solution": "import numpy as np\n\nclass HybridDEAS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20 + dim  # Adjust size based on dimension\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.scale_factor = 0.8\n        self.crossover_rate = 0.9\n        self.min_budget = budget\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            \n        used_budget = self.population_size\n        \n        while used_budget < self.min_budget:\n            # Differential Evolution (DE) Phase\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.population[a] + self.scale_factor * (self.population[b] - self.population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                crossover_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_fitness = func(crossover_vector)\n                used_budget += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = crossover_vector\n                    self.fitness[i] = trial_fitness\n                    \n            # Adaptive Swarm Intelligence (ASI) Phase\n            global_best_idx = np.argmin(self.fitness)\n            for i in range(self.population_size):\n                if np.random.rand() < 0.5:\n                    learning_factor = 0.5 + np.random.rand() / 2.0\n                    attraction_vector = self.population[global_best_idx] - self.population[i]\n                    step_vector = learning_factor * attraction_vector + np.random.randn(self.dim)\n                    self.population[i] = np.clip(self.population[i] + step_vector, self.lower_bound, self.upper_bound)\n                    candidate_fitness = func(self.population[i])\n                    used_budget += 1\n                    \n                    if candidate_fitness < self.fitness[i]:\n                        self.fitness[i] = candidate_fitness\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index], self.fitness[best_index]", "name": "HybridDEAS", "description": "Hybrid Differential Evolution with Adaptive Swarm Intelligence for robust exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 0, "fitness": 0.13749184080869103, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.20541309791087226, 0.21953144470170105, 0.21680592298367463, 0.22764966404622655, 0.2535358237176458, 0.27429804550913217, 0.2624196017742514, 0.23323869807546116, 0.23508682425707517, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07863337625776656, 0.087368328967379, 0.06344331846369333, 0.06296932878360695, 0.05057752089237033, 0.07041572687039066, 0.0569452019794211, 0.08738960761481396, 0.06117019599607243, 0.030025247598731264, 0.04658499641741165, 0.05259729776417099, 0.04345123307852172, 0.024434599822052094, 0.03617636470829988, 0.047359653535967716, 0.03628916468902188, 0.05151070072743602, 0.9724726128849357, 0.22569791197992795, 0.9750964389819946, 0.9803587678452418, 0.9934576135260332, 0.9732756302471629, 0.9560392973013899, 0.9964070659403929, 0.3093634070009549, 0.11586882326534198, 0.11468499377428543, 0.08633740686999858, 0.13881153034684846, 0.1208474788475713, 0.12922134620313097, 0.10488599097741824, 0.1145149708854113, 0.15581745117331736, 0.17264120424617324, 0.1912931156886215, 0.13044781695053442, 0.1414963749869117, 0.17003184710032238, 0.18080582445146554, 0.15960769639711525, 0.14370679001654096, 0.15531347989298205, 0.05861279840580569, 0.042378776651456285, 0.050684185588401154, 0.032996741200416735, 0.023237306102530386, 0.0631342796451585, 0.04076059805549337, 0.018205917268099392, 0.02767422042295853, 0.02750331742649781, 0.019648722076470393, 0.05503252933863656, 0.017090377635831988, 0.04145978262840022, 0.056858589063410236, 0.023828606761186366, 0.0002952986203086372, 0.03811428885154344, 0.019226077724328605, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025991326431343276, 0.09164598063672169, 0.04232782096212473, 0.04327026787916932, 0.02123085186199003, 0.02796798698471592, 0.06917456831612967, 0.04453323400000986, 0.06672157283116398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031884214996258375, 0.005892317643277245, 9.999999999998899e-05, 0.01512769210914866, 0.010123990579912423, 9.999999999998899e-05, 0.013851187008875554, 0.07952205634759302, 0.00565018184944488, 0.23846163790818153, 0.24557490785378633, 0.252672973985675, 0.22112771261460307, 0.21745049608878209, 0.23894026827801562, 0.23510649965791053, 0.22499442484985188, 0.2669210495958235, 0.07032827775596706, 0.07627757958031345, 0.06000498653123254, 0.055045755521279216, 0.0838251443006569, 0.05814020763971928, 0.05576697591226454, 0.06123849900739564, 0.05865482202930383, 0.14646120098248872, 0.1382128003291616, 0.14774024576332123, 0.15465633520392452, 0.15681566494561217, 0.13534174474396277, 0.13929173696181096, 0.15825752374816604, 0.1356012275953271, 0.20886241442279174, 0.182394258064011, 0.2010284633424504, 0.205704776659965, 0.1643783686444914, 0.20158229671549666, 0.17865670130460598, 0.19295822579962763, 0.18687707635992978, 0.13568150450890937, 0.13752492790923332, 0.13295873947246417, 0.13057789366429584, 0.12984284318923178, 0.13465405019816168, 0.1256530860706071, 0.12440661684968268, 0.13298536701512786, 0.19762505511116757, 0.1751914202046071, 0.17355372346036035, 0.16061477129169888, 0.1856910579670994, 0.20160873288076875, 0.16464329827738544, 0.1775157220168201, 0.18462511997955666, 0.16612744649149003, 0.15933961461721569, 0.16148927453760953, 0.1551693038587022, 0.15778993388701823, 0.1561338304525638, 0.1584163017718634, 0.1573238136647771, 0.16519370988751836, 0.3071133671524304, 0.16015299732614363, 0.15372530033460097, 0.16632051329689568, 0.15296096589305308, 0.15175939067685773, 0.16064102653598433, 0.16044238345624706, 0.2846673174297384, 0.1470784489657042, 0.2153687308862643, 0.1683683639572009, 0.15746312637365212, 0.1690977070427151, 0.16999083084513078, 0.19012526161629217, 0.20687187988893685, 0.18416959221322293, 0.1849643547523273, 0.17514945312288877, 0.1883286757681636, 0.17755457068104985, 0.18451749775053528, 0.1901907992830224, 0.17893713004170753, 0.17470154053249876, 0.17561501755342723, 0.06181241940082127, 0.061727830308196285, 0.06952439771927854, 0.040453804931977144, 0.056128263606502915, 0.053589521759680236, 0.06394386977741795, 0.050399348845932, 0.057105729683547546]}, "mutation_prompt": null}
{"id": "806ec3a4-3762-4f85-84a4-69bf69c442a2", "solution": "import numpy as np\n\nclass HybridDEAS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20 + dim  # Adjust size based on dimension\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.scale_factor = 0.8\n        self.crossover_rate = 0.9\n        self.min_budget = budget\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            \n        used_budget = self.population_size\n        \n        while used_budget < self.min_budget:\n            # Differential Evolution (DE) Phase\n            for i in range(self.population_size):\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant_vector = self.population[a] + self.scale_factor * (self.population[b] - self.population[c])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                crossover_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, self.population[i])\n                trial_fitness = func(crossover_vector)\n                used_budget += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = crossover_vector\n                    self.fitness[i] = trial_fitness\n                    \n            # Adaptive Swarm Intelligence (ASI) Phase\n            global_best_idx = np.argmin(self.fitness)\n            for i in range(self.population_size):\n                if np.random.rand() < 0.5:\n                    learning_factor = 0.5 + np.random.rand() / 2.0\n                    attraction_vector = self.population[global_best_idx] - self.population[i]\n                    step_vector = learning_factor * attraction_vector + np.random.randn(self.dim)\n                    self.population[i] = np.clip(self.population[i] + step_vector, self.lower_bound, self.upper_bound)\n                    candidate_fitness = func(self.population[i])\n                    used_budget += 1\n                    \n                    if candidate_fitness < self.fitness[i]:\n                        self.fitness[i] = candidate_fitness\n\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index], self.fitness[best_index]", "name": "HybridDEAS", "description": "Hybrid Differential Evolution with Adaptive Swarm Intelligence for robust exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1d6dcba3-c066-4a2d-a9a7-defac6457ab2", "metadata": {"aucs": [0.20541309791087226, 0.21953144470170105, 0.21680592298367463, 0.22764966404622655, 0.2535358237176458, 0.27429804550913217, 0.2624196017742514, 0.23323869807546116, 0.23508682425707517, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07863337625776656, 0.087368328967379, 0.06344331846369333, 0.06296932878360695, 0.05057752089237033, 0.07041572687039066, 0.0569452019794211, 0.08738960761481396, 0.06117019599607243, 0.030025247598731264, 0.04658499641741165, 0.05259729776417099, 0.04345123307852172, 0.024434599822052094, 0.03617636470829988, 0.047359653535967716, 0.03628916468902188, 0.05151070072743602, 0.9724726128849357, 0.22569791197992795, 0.9750964389819946, 0.9803587678452418, 0.9934576135260332, 0.9732756302471629, 0.9560392973013899, 0.9964070659403929, 0.3093634070009549, 0.11586882326534198, 0.11468499377428543, 0.08633740686999858, 0.13881153034684846, 0.1208474788475713, 0.12922134620313097, 0.10488599097741824, 0.1145149708854113, 0.15581745117331736, 0.17264120424617324, 0.1912931156886215, 0.13044781695053442, 0.1414963749869117, 0.17003184710032238, 0.18080582445146554, 0.15960769639711525, 0.14370679001654096, 0.15531347989298205, 0.05861279840580569, 0.042378776651456285, 0.050684185588401154, 0.032996741200416735, 0.023237306102530386, 0.0631342796451585, 0.04076059805549337, 0.018205917268099392, 0.02767422042295853, 0.02750331742649781, 0.019648722076470393, 0.05503252933863656, 0.017090377635831988, 0.04145978262840022, 0.056858589063410236, 0.023828606761186366, 0.0002952986203086372, 0.03811428885154344, 0.019226077724328605, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025991326431343276, 0.09164598063672169, 0.04232782096212473, 0.04327026787916932, 0.02123085186199003, 0.02796798698471592, 0.06917456831612967, 0.04453323400000986, 0.06672157283116398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031884214996258375, 0.005892317643277245, 9.999999999998899e-05, 0.01512769210914866, 0.010123990579912423, 9.999999999998899e-05, 0.013851187008875554, 0.07952205634759302, 0.00565018184944488, 0.23846163790818153, 0.24557490785378633, 0.252672973985675, 0.22112771261460307, 0.21745049608878209, 0.23894026827801562, 0.23510649965791053, 0.22499442484985188, 0.2669210495958235, 0.07032827775596706, 0.07627757958031345, 0.06000498653123254, 0.055045755521279216, 0.0838251443006569, 0.05814020763971928, 0.05576697591226454, 0.06123849900739564, 0.05865482202930383, 0.14646120098248872, 0.1382128003291616, 0.14774024576332123, 0.15465633520392452, 0.15681566494561217, 0.13534174474396277, 0.13929173696181096, 0.15825752374816604, 0.1356012275953271, 0.20886241442279174, 0.182394258064011, 0.2010284633424504, 0.205704776659965, 0.1643783686444914, 0.20158229671549666, 0.17865670130460598, 0.19295822579962763, 0.18687707635992978, 0.13568150450890937, 0.13752492790923332, 0.13295873947246417, 0.13057789366429584, 0.12984284318923178, 0.13465405019816168, 0.1256530860706071, 0.12440661684968268, 0.13298536701512786, 0.19762505511116757, 0.1751914202046071, 0.17355372346036035, 0.16061477129169888, 0.1856910579670994, 0.20160873288076875, 0.16464329827738544, 0.1775157220168201, 0.18462511997955666, 0.16612744649149003, 0.15933961461721569, 0.16148927453760953, 0.1551693038587022, 0.15778993388701823, 0.1561338304525638, 0.1584163017718634, 0.1573238136647771, 0.16519370988751836, 0.3071133671524304, 0.16015299732614363, 0.15372530033460097, 0.16632051329689568, 0.15296096589305308, 0.15175939067685773, 0.16064102653598433, 0.16044238345624706, 0.2846673174297384, 0.1470784489657042, 0.2153687308862643, 0.1683683639572009, 0.15746312637365212, 0.1690977070427151, 0.16999083084513078, 0.19012526161629217, 0.20687187988893685, 0.18416959221322293, 0.1849643547523273, 0.17514945312288877, 0.1883286757681636, 0.17755457068104985, 0.18451749775053528, 0.1901907992830224, 0.17893713004170753, 0.17470154053249876, 0.17561501755342723, 0.06181241940082127, 0.061727830308196285, 0.06952439771927854, 0.040453804931977144, 0.056128263606502915, 0.053589521759680236, 0.06394386977741795, 0.050399348845932, 0.057105729683547546]}, "mutation_prompt": null}
