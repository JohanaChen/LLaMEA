{"id": "8209e2f4-9aca-494a-abdc-7d3b475ac235", "solution": "import numpy as np\n\nclass HybridPSO_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 10\n        self.w = 0.5  # Inertia weight\n        self.c1 = 1.5  # Cognitive (particle) weight\n        self.c2 = 1.5  # Social (swarm) weight\n        self.temp_start = 1.0  # Initial temperature for SA\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.array([func(pos) for pos in positions])\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        evals = self.num_particles\n        while evals < self.budget:\n            # Update velocities and positions for PSO\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n\n            # Evaluate new solutions\n            current_values = np.array([func(pos) for pos in positions])\n            evals += self.num_particles\n\n            # Update personal bests\n            better_mask = current_values < personal_best_values\n            personal_best_positions[better_mask] = positions[better_mask]\n            personal_best_values[better_mask] = current_values[better_mask]\n\n            # Update global best\n            new_global_best_index = np.argmin(personal_best_values)\n            new_global_best_value = personal_best_values[new_global_best_index]\n            if new_global_best_value < global_best_value:\n                global_best_position = personal_best_positions[new_global_best_index]\n                global_best_value = new_global_best_value\n\n            # Apply simulated annealing to refine the global best position\n            current_temperature = self.temp_start * (1 - evals / self.budget)\n            new_global_position = global_best_position + np.random.normal(0, 0.1, self.dim)\n            new_global_position = np.clip(new_global_position, self.lower_bound, self.upper_bound)\n            new_global_value = func(new_global_position)\n            evals += 1\n            if new_global_value < global_best_value or np.random.rand() < np.exp((global_best_value - new_global_value) / current_temperature):\n                global_best_position = new_global_position\n                global_best_value = new_global_value\n\n        return global_best_value, global_best_position", "name": "HybridPSO_SA", "description": "A hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation effectively within a fixed budget.", "configspace": "", "generation": 0, "fitness": 0.25454963064842134, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5031881040534629, 0.5082305040484115, 0.5132394156721645, 0.48556692554471437, 0.5062230030507076, 0.49226507062312164, 0.4912042257045186, 0.48130059036186035, 0.48870207273510435, 9.999999999998899e-05, 0.03788046759126573, 0.4039610125005425, 0.07204275142706607, 0.06991728145202136, 9.999999999998899e-05, 0.030663847062672334, 0.7025058920125646, 0.21635961551781002, 0.1660223387311165, 0.07381045331466918, 0.08485910752609982, 0.19562091725578734, 0.05678458886182436, 0.11381817917523696, 0.12895346416413445, 0.0817516904530372, 0.07143990570695025, 0.08110647667645243, 0.12045808739642072, 0.04528560385475211, 0.09875359710619047, 0.03786907512466098, 0.08153626255020063, 0.07347414783669481, 0.12041517621935238, 0.06283905011870738, 0.9939678127841601, 0.982173475268453, 0.9913811831933619, 0.9934282480295753, 0.9929956711308592, 0.9878621443211532, 0.98003127598605, 0.991216174537022, 0.9880438792705432, 0.8405910426712484, 0.87010680013644, 0.7174485974505218, 0.8214097315371541, 0.8682370529348158, 0.7805653515055815, 0.7335330971484154, 0.7626692218655113, 0.6741604272506971, 0.18252672337201392, 0.16994438697906245, 0.15086864744467088, 0.2840668276485464, 0.09144693795108283, 0.14642154440517896, 0.9396155844955156, 0.15716264031233662, 0.14037292165450832, 0.1334902457283006, 0.208157840267035, 0.13459835988780067, 0.13213633939530156, 0.20020234099431178, 0.20634403509915777, 0.21113880066916613, 0.16843372725471673, 0.22227414963838232, 0.20237298919030988, 0.20819908746932692, 0.21787068583461622, 0.21202830387128235, 0.1175626206469218, 0.2029973541793797, 0.2527323077980119, 0.15635934412735863, 0.22049937280488474, 9.999999999998899e-05, 0.005173766378521627, 0.0003322831205643251, 9.999999999998899e-05, 0.05422751565539419, 0.03413449534551005, 0.00886524057700988, 9.999999999998899e-05, 0.006384293389552487, 0.07144867966788204, 0.027904060744075698, 0.046514060631324905, 0.06983124241006677, 0.0009937395948902417, 0.01818606004245027, 0.08445366650038488, 0.04047456005235761, 0.04156585202336316, 0.22912196736783297, 0.05918458992788145, 0.1270095812033455, 0.3273880074767671, 0.09315524140745968, 0.1040848476686328, 0.1015766195512684, 0.0868297878409654, 0.3542197633534311, 0.14741479575765748, 0.1428444965772413, 0.1557300116618009, 0.1041893759270488, 0.024850372720150116, 0.19148135377747977, 0.09665101983770541, 0.1447805425295643, 0.08733830568778234, 0.4538843754292329, 0.4321069997155651, 0.45151005787395115, 0.4553149335496416, 0.4807014998963062, 0.45462466849260286, 0.4939256826223445, 0.4592508679424242, 0.476493673635874, 0.09388516679291536, 0.09501264949869892, 0.05826273058187559, 0.08905685910861372, 0.08436501578335154, 0.11964816385411503, 0.07168103436222939, 0.13760252778917237, 0.07122943467019849, 0.2614240728220193, 0.23784964383315077, 0.36362116118848187, 0.2574199778057348, 0.19339948236186066, 0.20188260245149336, 0.24558961039908167, 0.24791711143258122, 0.1569309337719904, 0.25718969392195146, 0.21727798073627091, 0.24837168569314882, 0.34211462524507896, 0.3747703975378939, 0.25889586996440517, 0.15214741077011162, 0.14740085826554827, 0.15545237645646526, 0.11895185944983755, 0.23939949690909956, 0.16617683610982803, 0.3432805286342805, 0.4519727805783438, 0.1906224613112638, 0.09696253322182602, 0.1069093490876698, 0.2771900772107144, 0.2445689948416674, 0.21377637945702888, 0.2948291921655677, 0.1920417870454989, 0.12632185300219168, 0.2025601178292593, 0.2608046378200438, 0.17237311971237412, 0.2599259801447473, 0.19975244849884322, 0.21166189598416207, 0.21571891159313505, 0.18296887662252703, 0.21289496254904583, 0.18420742032744708, 0.18735805131143857, 0.258623399719326, 0.1732136343154258, 0.12337252196015047, 0.07659052085284579, 0.1891644484870194, 0.1737460670303782, 0.2023508739349703, 0.109274209718904, 0.745514435339979, 0.1152684039210311, 0.10402725807364044, 0.6975291912571573, 0.11361501751995162, 0.1286849543489731, 0.6189173548830293, 0.1556952667063649, 0.2139223636488733, 0.09499829439201435, 0.0736351182034628, 0.6549796882734056, 0.23835803458659488, 0.23446011896346142, 0.20740803025103705, 0.22278243736659875, 0.22980704140884778, 0.1885601692718698, 0.22651454934377202, 0.22202693689377817, 0.2269372152961321, 0.05453245508701143, 0.11693005364356701, 0.08665473434537618, 0.12459822656923403, 0.12068525322185852, 0.09807250389811817, 0.10654636097661474, 0.07997619767196207, 0.09677008702364087]}, "mutation_prompt": null}
{"id": "10cc3dc0-23c9-458c-acca-858d673f7774", "solution": "import numpy as np\n\nclass HybridPSO_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 10\n        self.w = 0.7  # Inertia weight (increased for more exploration early on)\n        self.c1 = 1.5  # Cognitive (particle) weight\n        self.c2 = 1.7  # Social (swarm) weight (increased for better convergence)\n        self.temp_start = 1.0  # Initial temperature for SA\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.array([func(pos) for pos in positions])\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_value = personal_best_values[global_best_index]\n\n        evals = self.num_particles\n        while evals < self.budget:\n            # Update velocities and positions for PSO\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            self.w = 0.7 * (1 - evals / self.budget) + 0.3  # Adjust inertia weight over time\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n\n            # Evaluate new solutions\n            current_values = np.array([func(pos) for pos in positions])\n            evals += self.num_particles\n\n            # Update personal bests\n            better_mask = current_values < personal_best_values\n            personal_best_positions[better_mask] = positions[better_mask]\n            personal_best_values[better_mask] = current_values[better_mask]\n\n            # Update global best\n            new_global_best_index = np.argmin(personal_best_values)\n            new_global_best_value = personal_best_values[new_global_best_index]\n            if new_global_best_value < global_best_value:\n                global_best_position = personal_best_positions[new_global_best_index]\n                global_best_value = new_global_best_value\n\n            # Apply simulated annealing to refine the global best position\n            current_temperature = self.temp_start * (1 - evals / self.budget)\n            new_global_position = global_best_position + np.random.normal(0, 0.1, self.dim)\n            new_global_position = np.clip(new_global_position, self.lower_bound, self.upper_bound)\n            new_global_value = func(new_global_position)\n            evals += 1\n            if new_global_value < global_best_value or np.random.rand() < np.exp((global_best_value - new_global_value) / current_temperature):\n                global_best_position = new_global_position\n                global_best_value = new_global_value\n\n        return global_best_value, global_best_position", "name": "HybridPSO_SA", "description": "Enhanced Hybrid PSO-SA with dynamic parameter adjustment for improved balance between exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.25915083140595674, "feedback": "", "error": "", "parent_id": "8209e2f4-9aca-494a-abdc-7d3b475ac235", "metadata": {"aucs": [0.40228825316956374, 0.40514849737352765, 0.4034724758068301, 0.4306011385089181, 0.4123609741492791, 0.42495193788317864, 0.42907763301549173, 0.40721835103597004, 0.4108992524609707, 0.03427873715153251, 0.12743780724548537, 0.6141324277907173, 0.5886543650321785, 0.5752650790039253, 0.5719937071748034, 0.5854432879748863, 0.03787392666567779, 0.5375478126606316, 0.11847952007235674, 0.11623333616411946, 0.12595790994045086, 0.15162617000769096, 0.06991141051147387, 0.1426894371122447, 0.1332806252079023, 0.12631621693038797, 0.12893630061482197, 0.1302206063323179, 0.14155393211915523, 0.10162246156287169, 0.10325907412081303, 0.1173851490585277, 0.42596664445206445, 0.10279920508077645, 0.11066025629097531, 0.10970781470834023, 0.994666120569092, 0.9946520821995629, 0.9961346294400608, 0.9948135553941132, 0.9939231500609669, 0.9940855462720849, 0.9938653562303476, 0.9964346777071698, 0.9957413010162941, 0.569624278918882, 0.5415352527110187, 0.4848356412181487, 0.6112895093018086, 0.5775901520878878, 0.4776246157326406, 0.5722007377465276, 0.48960124674675987, 0.5468744115186798, 0.43271318826996985, 0.3173142626674599, 0.6209980617356237, 0.262363359573906, 0.2505136018070915, 0.2620201163362169, 0.22969665963495067, 0.2178622992413971, 0.4633799423739088, 0.12909058252282524, 0.17251111178739864, 0.23386091697222544, 0.18399038640470078, 0.16731790616314157, 0.13160907142866562, 0.18903236751322405, 0.19788128521332282, 0.17048541932316363, 0.13412913307753083, 0.18245698726105142, 0.19684372578073128, 0.19078864295303177, 0.3363848993823696, 0.19203337671368492, 0.18945882061726937, 0.09785519394760922, 0.18945073683988523, 0.08040667215092145, 9.999999999998899e-05, 9.999999999998899e-05, 0.02905064991630757, 9.999999999998899e-05, 0.07045794567697872, 0.001676027781378986, 0.09855648353264856, 0.001696740145421205, 0.10670509120657756, 0.033083429102876094, 0.033728024329570006, 0.06908694553045935, 9.999999999998899e-05, 0.0018245911538143922, 0.06729957514069629, 0.0294263907694009, 0.057751716822196264, 0.0441547568577747, 0.02705983995959016, 0.05272392101743595, 0.11356189562477337, 0.06415257509184025, 0.05668741431432367, 0.17179178286662866, 0.06940154342687543, 0.07951051207677506, 0.05240710579039731, 0.08622655790636347, 0.04895076877439131, 0.1564203078009332, 0.08030588322527421, 0.08914779159284247, 0.10002908903698848, 0.10482193449256916, 0.09994013667418422, 0.3945765987721712, 0.3791792236672561, 0.3877972403088079, 0.3930532611718708, 0.3879861240138148, 0.39147041854761067, 0.38511759978001814, 0.3983659212199534, 0.4009341003061655, 0.0533593112312889, 0.10400224729640628, 0.09240129220327087, 0.08868608999350958, 0.09631515006282976, 0.13309308597080394, 0.06778463901014387, 0.10563442168026171, 0.12206124334046076, 0.2409665955763003, 0.19264017127446353, 0.3249510396492379, 0.3434282022695009, 0.24196561299357178, 0.18942959896406308, 0.30137772418854525, 0.29838265081247317, 0.18782366476913148, 0.293491642243461, 0.23379030838453585, 0.3015925243053117, 0.3062487926982016, 0.14944230397087976, 0.15490504686124584, 0.2592744871739081, 0.18743880094115783, 0.16787571745253949, 0.29248910452388455, 0.18041713309351703, 0.14992663948568674, 0.30340932623347194, 0.12795069898316558, 0.25659802495370887, 0.19154846895014632, 0.35595220294129115, 0.23152040465488066, 0.22311071739164945, 0.19770925834049957, 0.2092981184917364, 0.21125324481544017, 0.1492372071501048, 0.24997309458928274, 0.20376846171400997, 0.20490812712795892, 0.23295375072268043, 0.2062370728502898, 0.1990723354670081, 0.19873610241086237, 0.21005078639942598, 0.5434305108911026, 0.2124152874291091, 0.49410688680630555, 0.20898475560817187, 0.5478974688132907, 0.17632957965753415, 0.19779573348097734, 0.13277273677344859, 0.6134969460757742, 0.20030555294654317, 0.5926085924156255, 0.6373934396765959, 0.14661071931460667, 0.15864807684677795, 0.38648020198726485, 0.16506516256864512, 0.5101394895154109, 0.45917529657199874, 0.2023909820147043, 0.2036276617371846, 0.16387631970944516, 0.1557394083590813, 0.41547459259851327, 0.1994237701116901, 0.19475132828934094, 0.2130191706172232, 0.21287476344575185, 0.18785194960119822, 0.21785737904716618, 0.20960731935192634, 0.2137375190517793, 0.1995235401188986, 0.09990640638016324, 0.08437586762699323, 0.08146238242012782, 0.09525328304791314, 0.13291185683389684, 0.07978141982069953, 0.11842138729028773, 0.08274733804326151, 0.08411421179987699]}, "mutation_prompt": null}
