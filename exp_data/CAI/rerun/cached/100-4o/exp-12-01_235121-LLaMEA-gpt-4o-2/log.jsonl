{"id": "21917390-6112-4259-976b-db53984ecd78", "solution": "import numpy as np\n\nclass HybridADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * self.dim)\n        self.F = 0.5   # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = float('inf')\n        fitness = np.array([func(ind) for ind in self.population])\n        self.evaluations += self.population_size\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                indices = np.random.choice([j for j in range(self.population_size) if j != i], 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                jrand = np.random.randint(self.dim)\n                trial = np.array([mutant[j] if (np.random.rand() < self.CR or j == jrand) else self.population[i, j] for j in range(self.dim)])\n                \n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    self.population[i] = trial\n                    fitness[i] = trial_fitness\n                    \n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n\n            # Dynamic population size adjustment\n            if self.evaluations < self.budget * 0.8:\n                self.population_size = 10 + int(0.5 * self.dim) + int(0.2 * self.dim * (self.evaluations / self.budget))\n            else:\n                self.population_size = max(5, int(self.population_size * 0.9))\n\n        return best_solution", "name": "HybridADE", "description": "Hybrid Adaptive Differential Evolution with Dynamic Population Size to efficiently explore and exploit the search space within budget constraints.", "configspace": "", "generation": 0, "fitness": 0.1723768326470234, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.35206036468331225, 0.37086082806130527, 0.7154638628029437, 0.20781598895803688, 0.7500238496149728, 0.1845165806792045, 0.34140915708498, 0.14027900578875763, 0.30677467671537884, 0.1362207195632451, 9.999999999998899e-05, 9.999999999998899e-05, 0.14855631109220724, 0.055822140090590056, 9.999999999998899e-05, 0.2224723658993042, 0.13528092899496336, 9.999999999998899e-05, 0.09089528927006063, 0.17860234018284316, 0.0922277260970168, 0.15814666259220866, 0.15549889085453505, 0.11620631623172162, 0.15147418293053416, 0.12353652014165672, 0.14398464802391442, 0.0853406386730654, 0.1105820595340603, 0.10686958517874068, 0.09833900021661834, 0.09553112143654585, 0.11761803614808908, 0.07303067515786721, 0.10109869207728828, 0.1307586256503972, 0.9833550493999617, 0.9855310778264983, 0.1886278424037835, 0.255705799570323, 0.1533719616966015, 0.15093669898510276, 0.1791921610199637, 0.11954443189000363, 0.10068347216849793, 0.20870929356737422, 0.11670938600424541, 0.027911365971198254, 0.13649000296554736, 0.07229108196932044, 0.061896579463629364, 0.11300258303597877, 0.18304947479411204, 0.04589279957338366, 0.23027143900913194, 0.2163427233992138, 0.09639108839998567, 0.24973334071646325, 0.07906015185905269, 0.22277674986717066, 0.37028294431759334, 0.11982393712619976, 0.16767838046198358, 0.1453799485078252, 0.24606543372540823, 0.1669291058937632, 0.3042173497150066, 0.00684233575704607, 0.1541270508451804, 0.3266929039129526, 0.022768806623957194, 0.06951380040238675, 0.09526128889328933, 0.13011259611467252, 0.10764166759107863, 0.1489315006904277, 0.15467867972415517, 0.0017245373303436118, 0.17715527388452934, 0.15651996339416474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17945805670659154, 0.10160051391383162, 0.14348124728683087, 0.06871582036474833, 0.03696415333326153, 0.06834807975582569, 0.1976823660939938, 0.11332478214979091, 0.014224974283877034, 9.999999999998899e-05, 9.999999999998899e-05, 0.06951690325528292, 0.12398882827813085, 0.004379175633174026, 0.08624737578779418, 0.14542176330866474, 0.12374859938115501, 9.999999999998899e-05, 0.044779063260584784, 0.07856858025880298, 0.012981898482313792, 9.999999999998899e-05, 0.1473902421164598, 0.2893028624320576, 0.02685479635928245, 9.999999999998899e-05, 0.013932404868553738, 0.3521585665938518, 0.41822708316152335, 0.2782602966819945, 0.23816485390018005, 0.21799414807479556, 0.16415162611165557, 0.3046655382061757, 0.3891258130865646, 0.44652029243067204, 0.11279859043554497, 0.10032774750112095, 0.0929867787839821, 0.12660471755128, 0.08510629532152347, 0.13665145768210551, 0.1429947907378082, 0.0819404600496324, 0.08239487607765328, 0.2198060465158519, 0.3654734499035065, 0.3452024883528576, 0.2065149648780703, 0.2843118807110715, 0.12832644611843447, 0.1640046774920515, 0.5066327639805575, 0.13345641961135157, 0.17264428941047827, 0.30837179825396865, 0.19282850415393904, 0.2269075949515722, 0.4015065514026541, 0.28918587669743856, 0.2731430234972724, 0.30105477510301804, 0.22458580438846942, 0.5444656149371367, 0.3355239001114112, 0.21952724288536052, 0.2556099957604291, 0.20156799406057613, 0.17914174914045067, 0.19249312702139665, 0.2439348782620394, 0.11217952368889872, 0.14817624686419317, 0.3066753889039685, 0.17400559337133548, 0.1700187445546668, 0.22500361402395785, 0.19118866980065896, 0.19684660092943018, 0.19379306866711765, 0.19456942323505044, 0.17537597997976684, 0.19487163312329914, 0.22521582155680175, 0.22924970910075138, 0.2263984221002011, 0.19705157173086885, 0.21938037312906356, 0.17315600714990165, 0.2255877878895861, 0.15613850631976034, 0.16633436514339683, 0.14032048542998132, 0.19737010392109144, 0.17425730111993942, 0.1636910410609702, 0.12040686401544498, 0.110745230335492, 0.15939699969454046, 0.4900019382815085, 0.16882149187216777, 0.7256399327294898, 0.16859565951410482, 0.16257131976111983, 0.16547711343706883, 0.15856911086041292, 0.19005683617968705, 0.1575631496526163, 0.18054080044381993, 0.19940168981344342, 0.18670193917264355, 0.20585829416006007, 0.18463043879491592, 0.19527039158759785, 0.1815258431459721, 0.1877955912121354, 0.20228902345695632, 0.1009681781027093, 0.07888890470503551, 0.0682050096377187, 0.04467574413344921, 0.07640357453116686, 0.08003366425489256, 0.08405831964409738, 0.10489069126003703, 0.08932599637677796]}, "mutation_prompt": null}
{"id": "58f523f1-c72b-4b5c-aabc-2fe3696f0c5a", "solution": "import numpy as np\n\nclass HybridADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(0.5 * self.dim)\n        self.F = 0.5   # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = float('inf')\n        fitness = np.array([func(ind) for ind in self.population])\n        self.evaluations += self.population_size\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                indices = np.random.choice([j for j in range(self.population_size) if j != i], 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                mutant = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                jrand = np.random.randint(self.dim)\n                trial = np.array([mutant[j] if (np.random.rand() < self.CR or j == jrand) else self.population[i, j] for j in range(self.dim)])\n                \n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < fitness[i]:\n                    self.population[i] = trial\n                    fitness[i] = trial_fitness\n                    \n                    if trial_fitness < best_fitness:\n                        best_fitness = trial_fitness\n                        best_solution = trial\n\n            # Dynamic population size adjustment\n            if self.evaluations < self.budget * 0.8:\n                self.population_size = 10 + int(0.5 * self.dim) + int(0.2 * self.dim * (self.evaluations / self.budget))\n            else:\n                self.population_size = max(5, int(self.population_size * 0.9))\n\n        return best_solution", "name": "HybridADE", "description": "Hybrid Adaptive Differential Evolution with Dynamic Population Size to efficiently explore and exploit the search space within budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21917390-6112-4259-976b-db53984ecd78", "metadata": {"aucs": [0.35206036468331225, 0.37086082806130527, 0.7154638628029437, 0.20781598895803688, 0.7500238496149728, 0.1845165806792045, 0.34140915708498, 0.14027900578875763, 0.30677467671537884, 0.1362207195632451, 9.999999999998899e-05, 9.999999999998899e-05, 0.14855631109220724, 0.055822140090590056, 9.999999999998899e-05, 0.2224723658993042, 0.13528092899496336, 9.999999999998899e-05, 0.09089528927006063, 0.17860234018284316, 0.0922277260970168, 0.15814666259220866, 0.15549889085453505, 0.11620631623172162, 0.15147418293053416, 0.12353652014165672, 0.14398464802391442, 0.0853406386730654, 0.1105820595340603, 0.10686958517874068, 0.09833900021661834, 0.09553112143654585, 0.11761803614808908, 0.07303067515786721, 0.10109869207728828, 0.1307586256503972, 0.9833550493999617, 0.9855310778264983, 0.1886278424037835, 0.255705799570323, 0.1533719616966015, 0.15093669898510276, 0.1791921610199637, 0.11954443189000363, 0.10068347216849793, 0.20870929356737422, 0.11670938600424541, 0.027911365971198254, 0.13649000296554736, 0.07229108196932044, 0.061896579463629364, 0.11300258303597877, 0.18304947479411204, 0.04589279957338366, 0.23027143900913194, 0.2163427233992138, 0.09639108839998567, 0.24973334071646325, 0.07906015185905269, 0.22277674986717066, 0.37028294431759334, 0.11982393712619976, 0.16767838046198358, 0.1453799485078252, 0.24606543372540823, 0.1669291058937632, 0.3042173497150066, 0.00684233575704607, 0.1541270508451804, 0.3266929039129526, 0.022768806623957194, 0.06951380040238675, 0.09526128889328933, 0.13011259611467252, 0.10764166759107863, 0.1489315006904277, 0.15467867972415517, 0.0017245373303436118, 0.17715527388452934, 0.15651996339416474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17945805670659154, 0.10160051391383162, 0.14348124728683087, 0.06871582036474833, 0.03696415333326153, 0.06834807975582569, 0.1976823660939938, 0.11332478214979091, 0.014224974283877034, 9.999999999998899e-05, 9.999999999998899e-05, 0.06951690325528292, 0.12398882827813085, 0.004379175633174026, 0.08624737578779418, 0.14542176330866474, 0.12374859938115501, 9.999999999998899e-05, 0.044779063260584784, 0.07856858025880298, 0.012981898482313792, 9.999999999998899e-05, 0.1473902421164598, 0.2893028624320576, 0.02685479635928245, 9.999999999998899e-05, 0.013932404868553738, 0.3521585665938518, 0.41822708316152335, 0.2782602966819945, 0.23816485390018005, 0.21799414807479556, 0.16415162611165557, 0.3046655382061757, 0.3891258130865646, 0.44652029243067204, 0.11279859043554497, 0.10032774750112095, 0.0929867787839821, 0.12660471755128, 0.08510629532152347, 0.13665145768210551, 0.1429947907378082, 0.0819404600496324, 0.08239487607765328, 0.2198060465158519, 0.3654734499035065, 0.3452024883528576, 0.2065149648780703, 0.2843118807110715, 0.12832644611843447, 0.1640046774920515, 0.5066327639805575, 0.13345641961135157, 0.17264428941047827, 0.30837179825396865, 0.19282850415393904, 0.2269075949515722, 0.4015065514026541, 0.28918587669743856, 0.2731430234972724, 0.30105477510301804, 0.22458580438846942, 0.5444656149371367, 0.3355239001114112, 0.21952724288536052, 0.2556099957604291, 0.20156799406057613, 0.17914174914045067, 0.19249312702139665, 0.2439348782620394, 0.11217952368889872, 0.14817624686419317, 0.3066753889039685, 0.17400559337133548, 0.1700187445546668, 0.22500361402395785, 0.19118866980065896, 0.19684660092943018, 0.19379306866711765, 0.19456942323505044, 0.17537597997976684, 0.19487163312329914, 0.22521582155680175, 0.22924970910075138, 0.2263984221002011, 0.19705157173086885, 0.21938037312906356, 0.17315600714990165, 0.2255877878895861, 0.15613850631976034, 0.16633436514339683, 0.14032048542998132, 0.19737010392109144, 0.17425730111993942, 0.1636910410609702, 0.12040686401544498, 0.110745230335492, 0.15939699969454046, 0.4900019382815085, 0.16882149187216777, 0.7256399327294898, 0.16859565951410482, 0.16257131976111983, 0.16547711343706883, 0.15856911086041292, 0.19005683617968705, 0.1575631496526163, 0.18054080044381993, 0.19940168981344342, 0.18670193917264355, 0.20585829416006007, 0.18463043879491592, 0.19527039158759785, 0.1815258431459721, 0.1877955912121354, 0.20228902345695632, 0.1009681781027093, 0.07888890470503551, 0.0682050096377187, 0.04467574413344921, 0.07640357453116686, 0.08003366425489256, 0.08405831964409738, 0.10489069126003703, 0.08932599637677796]}, "mutation_prompt": null}
