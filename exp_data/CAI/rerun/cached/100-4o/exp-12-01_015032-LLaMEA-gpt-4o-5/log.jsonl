{"id": "4024d255-dbec-4d2a-87af-d301e36a7d12", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 + int(3 * np.log(dim))  # Dynamic swarm size based on dimensionality\n        self.c1 = 1.49  # Cognitive parameter\n        self.c2 = 1.49  # Social parameter\n        self.w = 0.72   # Inertia weight\n        self.mutation_factor = 0.5  # DE mutation factor\n        self.recombination_rate = 0.9  # DE recombination rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n        # Initialize particles\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.p_best_positions = np.copy(self.positions)\n        self.p_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particles\n            for i in range(self.pop_size):\n                score = func(self.positions[i])\n                if score < self.p_best_scores[i]:\n                    self.p_best_scores[i] = score\n                    self.p_best_positions[i] = self.positions[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions using PSO formula\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            cognitive_component = self.c1 * r1 * (self.p_best_positions - self.positions)\n            social_component = self.c2 * r2 * (self.global_best_position - self.positions)\n            self.velocities = self.w * self.velocities + cognitive_component + social_component\n\n            # Update positions\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n            # Apply DE crossover for diversification\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant_vector = self.positions[a] + self.mutation_factor * (self.positions[b] - self.positions[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, self.positions[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < self.p_best_scores[i]:\n                    self.p_best_scores[i] = trial_score\n                    self.p_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) crossover to enhance exploration and exploitation in black-box optimization problems.", "configspace": "", "generation": 0, "fitness": 0.20800291845028163, "feedback": "", "error": "", "parent_id": null, "metadata": {"aucs": [0.5189054838912541, 0.45169408875171946, 0.5662097350897142, 0.18975979203107973, 0.18959810383230136, 0.6536020441967952, 0.17436864524604645, 0.1744493788303364, 0.538056145948664, 9.999999999998899e-05, 0.233028911071689, 9.999999999998899e-05, 0.15790118615933912, 0.03661444324428953, 0.030406695360957414, 9.999999999998899e-05, 0.13066434032193264, 0.014473355047489367, 0.06674650093022794, 0.128312569365843, 0.0943515353893527, 0.10494685657624436, 0.12117559905577802, 0.13460875741057166, 0.12943440908006598, 0.08245125895013394, 0.07436409947349332, 0.08737326521093802, 0.08084830278109689, 0.09512636199848368, 0.10388133674876243, 0.09300242176759088, 0.11262413830821938, 0.1204518323007645, 0.02203747297412828, 0.11811204228990424, 0.9834189496871197, 0.9891028095708533, 0.9886782137365371, 0.9831977547992488, 0.9847806047055462, 0.9807661695394907, 0.9884384748265644, 0.9853266344173436, 0.9888633194710421, 0.15923110390428352, 0.35793319227088427, 0.3473872502703097, 0.14523314454140468, 0.14927182829999397, 0.29382903339772704, 0.08810791158865705, 0.08733568428794258, 0.36235828334516196, 0.16549634311883454, 0.4329021119605191, 0.23783351225435367, 0.3186103425290303, 0.16852329017977152, 0.21159595172655832, 0.12428693958472636, 0.4972667852186976, 0.38560570474515843, 0.14001472080149902, 0.09647154969499339, 0.13376477095811, 0.12203554785684478, 0.18385102991886104, 0.07948553983623174, 9.999999999998899e-05, 0.10595715714369636, 0.16477857038993482, 0.1608231378821816, 0.012802045779500837, 0.17585961279617257, 0.19175567991660147, 0.17926918501362887, 0.17330011591381678, 0.15559889123581994, 9.999999999998899e-05, 0.10086254249142435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023795325907823517, 9.999999999998899e-05, 9.999999999998899e-05, 0.002326648915776053, 9.999999999998899e-05, 0.04199776282289425, 0.021381285905597736, 0.02295984520315031, 0.10761529935544512, 0.022422999642523034, 0.013280029082026301, 9.999999999998899e-05, 0.11411377651598609, 0.03806379415749361, 0.06211297585410025, 0.038820659544228864, 0.11179746152577663, 0.07352613147941722, 0.058564969461292415, 0.012700200617372315, 0.053901120991840745, 0.04404725494160433, 0.03890010236763519, 0.0016919105343607965, 0.008454918700409153, 0.1690667570339358, 0.0390929905694587, 0.005249878905581151, 9.999999999998899e-05, 9.999999999998899e-05, 0.06543819096417214, 9.999999999998899e-05, 0.062142820193480275, 0.35413815847131114, 0.39521473846590705, 0.40787897253651983, 0.5045777144012313, 0.292532661693095, 0.43029455905464087, 0.42536987250850844, 0.4144276128018779, 0.39691937792201337, 0.06582700147257259, 0.13265369461177667, 0.1036143785344602, 0.07821513482034537, 0.10096977430394849, 0.09725581062796063, 0.07085013418170161, 0.09552877544614224, 0.13463133593387577, 0.19109153562387282, 0.18510821347866013, 0.22505482559277656, 0.24061776498089593, 0.270036300009899, 0.13886935471467676, 0.21854653482993203, 0.20969399522446486, 0.1885761707337832, 0.31500779484743946, 0.21975297416869222, 0.31841716940171494, 0.3038102016588976, 0.2595339008855966, 0.2758207193639116, 0.35210587980369223, 0.3604208810479822, 0.29518909581694086, 0.22660712927664173, 0.1638423002543915, 0.17934456671488264, 0.15729383155042798, 0.17744979033697295, 0.22017502836016312, 0.190317678058062, 0.27616550324630806, 0.192501893925354, 0.21652524956731878, 0.19080775548870677, 0.21849642395657598, 0.1866790582443224, 0.19213272311347895, 0.19689735680805165, 0.19196505358536065, 0.18979629650757857, 0.19104126313491465, 0.19900086045507215, 0.38812000658111123, 0.1663832015577431, 0.21549214793969684, 0.18696705339508468, 0.18713483904817863, 0.2179012528828964, 0.20292571295893702, 0.1981234605599438, 0.8280540726291716, 0.18153470718052656, 0.15423462058274617, 0.787184442730593, 0.15996207278574692, 0.2001322628292791, 0.12234384150279498, 0.1701732791897015, 0.7915205467085877, 0.12363642568999911, 0.15557635692854477, 0.16989250711793957, 0.2034247148535342, 0.22021334136859816, 0.21056788279471417, 0.19750920086597412, 0.38475423851006085, 0.18116412912782776, 0.1891847551525926, 0.1781842575168886, 0.19405316252603022, 0.18374050911169737, 0.18929024431881136, 0.1844942533900069, 0.20050767219613297, 0.20312408206664634, 0.19019688244895494, 0.08953347884035379, 0.0789065820553595, 0.0629173238058891, 0.08345491669932048, 0.07917136164827843, 0.07727707542691298, 0.08315825041434943, 0.09236361460420373, 0.07199519972650736]}, "mutation_prompt": null}
{"id": "f2730548-7151-455c-b3f5-7ddce8ea7bed", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 + int(3 * np.log(dim))  # Dynamic swarm size based on dimensionality\n        self.c1 = 1.49  # Cognitive parameter\n        self.c2 = 1.49  # Social parameter\n        self.w = 0.72   # Inertia weight\n        self.mutation_factor = 0.5  # DE mutation factor\n        self.recombination_rate = 0.9  # DE recombination rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n        # Initialize particles\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.p_best_positions = np.copy(self.positions)\n        self.p_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particles\n            for i in range(self.pop_size):\n                score = func(self.positions[i])\n                if score < self.p_best_scores[i]:\n                    self.p_best_scores[i] = score\n                    self.p_best_positions[i] = self.positions[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions using PSO formula\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            cognitive_component = self.c1 * r1 * (self.p_best_positions - self.positions)\n            social_component = self.c2 * r2 * (self.global_best_position - self.positions)\n            self.velocities = self.w * self.velocities + cognitive_component + social_component\n\n            # Update positions\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n            # Apply DE crossover for diversification\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant_vector = self.positions[a] + self.mutation_factor * (self.positions[b] - self.positions[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, self.positions[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n                trial_score = func(trial_vector)\n                evaluations += 1\n                if trial_score < self.p_best_scores[i]:\n                    self.p_best_scores[i] = trial_score\n                    self.p_best_positions[i] = trial_vector\n\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) crossover to enhance exploration and exploitation in black-box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4024d255-dbec-4d2a-87af-d301e36a7d12", "metadata": {"aucs": [0.5189054838912541, 0.45169408875171946, 0.5662097350897142, 0.18975979203107973, 0.18959810383230136, 0.6536020441967952, 0.17436864524604645, 0.1744493788303364, 0.538056145948664, 9.999999999998899e-05, 0.233028911071689, 9.999999999998899e-05, 0.15790118615933912, 0.03661444324428953, 0.030406695360957414, 9.999999999998899e-05, 0.13066434032193264, 0.014473355047489367, 0.06674650093022794, 0.128312569365843, 0.0943515353893527, 0.10494685657624436, 0.12117559905577802, 0.13460875741057166, 0.12943440908006598, 0.08245125895013394, 0.07436409947349332, 0.08737326521093802, 0.08084830278109689, 0.09512636199848368, 0.10388133674876243, 0.09300242176759088, 0.11262413830821938, 0.1204518323007645, 0.02203747297412828, 0.11811204228990424, 0.9834189496871197, 0.9891028095708533, 0.9886782137365371, 0.9831977547992488, 0.9847806047055462, 0.9807661695394907, 0.9884384748265644, 0.9853266344173436, 0.9888633194710421, 0.15923110390428352, 0.35793319227088427, 0.3473872502703097, 0.14523314454140468, 0.14927182829999397, 0.29382903339772704, 0.08810791158865705, 0.08733568428794258, 0.36235828334516196, 0.16549634311883454, 0.4329021119605191, 0.23783351225435367, 0.3186103425290303, 0.16852329017977152, 0.21159595172655832, 0.12428693958472636, 0.4972667852186976, 0.38560570474515843, 0.14001472080149902, 0.09647154969499339, 0.13376477095811, 0.12203554785684478, 0.18385102991886104, 0.07948553983623174, 9.999999999998899e-05, 0.10595715714369636, 0.16477857038993482, 0.1608231378821816, 0.012802045779500837, 0.17585961279617257, 0.19175567991660147, 0.17926918501362887, 0.17330011591381678, 0.15559889123581994, 9.999999999998899e-05, 0.10086254249142435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023795325907823517, 9.999999999998899e-05, 9.999999999998899e-05, 0.002326648915776053, 9.999999999998899e-05, 0.04199776282289425, 0.021381285905597736, 0.02295984520315031, 0.10761529935544512, 0.022422999642523034, 0.013280029082026301, 9.999999999998899e-05, 0.11411377651598609, 0.03806379415749361, 0.06211297585410025, 0.038820659544228864, 0.11179746152577663, 0.07352613147941722, 0.058564969461292415, 0.012700200617372315, 0.053901120991840745, 0.04404725494160433, 0.03890010236763519, 0.0016919105343607965, 0.008454918700409153, 0.1690667570339358, 0.0390929905694587, 0.005249878905581151, 9.999999999998899e-05, 9.999999999998899e-05, 0.06543819096417214, 9.999999999998899e-05, 0.062142820193480275, 0.35413815847131114, 0.39521473846590705, 0.40787897253651983, 0.5045777144012313, 0.292532661693095, 0.43029455905464087, 0.42536987250850844, 0.4144276128018779, 0.39691937792201337, 0.06582700147257259, 0.13265369461177667, 0.1036143785344602, 0.07821513482034537, 0.10096977430394849, 0.09725581062796063, 0.07085013418170161, 0.09552877544614224, 0.13463133593387577, 0.19109153562387282, 0.18510821347866013, 0.22505482559277656, 0.24061776498089593, 0.270036300009899, 0.13886935471467676, 0.21854653482993203, 0.20969399522446486, 0.1885761707337832, 0.31500779484743946, 0.21975297416869222, 0.31841716940171494, 0.3038102016588976, 0.2595339008855966, 0.2758207193639116, 0.35210587980369223, 0.3604208810479822, 0.29518909581694086, 0.22660712927664173, 0.1638423002543915, 0.17934456671488264, 0.15729383155042798, 0.17744979033697295, 0.22017502836016312, 0.190317678058062, 0.27616550324630806, 0.192501893925354, 0.21652524956731878, 0.19080775548870677, 0.21849642395657598, 0.1866790582443224, 0.19213272311347895, 0.19689735680805165, 0.19196505358536065, 0.18979629650757857, 0.19104126313491465, 0.19900086045507215, 0.38812000658111123, 0.1663832015577431, 0.21549214793969684, 0.18696705339508468, 0.18713483904817863, 0.2179012528828964, 0.20292571295893702, 0.1981234605599438, 0.8280540726291716, 0.18153470718052656, 0.15423462058274617, 0.787184442730593, 0.15996207278574692, 0.2001322628292791, 0.12234384150279498, 0.1701732791897015, 0.7915205467085877, 0.12363642568999911, 0.15557635692854477, 0.16989250711793957, 0.2034247148535342, 0.22021334136859816, 0.21056788279471417, 0.19750920086597412, 0.38475423851006085, 0.18116412912782776, 0.1891847551525926, 0.1781842575168886, 0.19405316252603022, 0.18374050911169737, 0.18929024431881136, 0.1844942533900069, 0.20050767219613297, 0.20312408206664634, 0.19019688244895494, 0.08953347884035379, 0.0789065820553595, 0.0629173238058891, 0.08345491669932048, 0.07917136164827843, 0.07727707542691298, 0.08315825041434943, 0.09236361460420373, 0.07199519972650736]}, "mutation_prompt": null}
